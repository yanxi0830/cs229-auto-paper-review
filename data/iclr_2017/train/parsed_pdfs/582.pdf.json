{
  "name" : "582.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "FOR THE TASK OF PRODUCT RECOMMENDATION",
    "authors" : [ "Thomas Nedelec", "Elena Smirnova" ],
    "emails" : [ "t.nedelec@criteo.com", "e.smirnova@criteo.com", "f.vasile@criteo.com" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "Online product recommendation is now a key driver of demand, not only in E-commerce businesses that recommend physical products, such as Amazon (Marshall, 2006), TaoBao (Xiang, 2013) and Ebay (Academy, 2013), but also in online websites that recommend digital content such as news (Yahoo! - Agarwal et al. (2013), Google - Liu et al. (2010)), movies (Netflix - Bell & Koren (2007)), music (Spotify - Johnson (2015)), videos (YouTube - Covington et al. (2016)) and games (Xbox - Koenigstein et al. (2012)).\nTwo of the most challenging aspects of recommendation in general and of product recommendation in particular, are scalability and freshness. The first one addresses the problem of making fast recommendations in parallel, the second addresses the problem of updating recommendations based on real-time user interaction. One of the most encountered architecture solutions for recommendation at scale divides the recommendation process in two stages: a candidate generation stage that prunes the number of recommendable items from billions to a couple of hundreds, followed by a second item selection stage that decides the final set of items to be displayed to the user, as shown in Figure 1 (see Mazare (2016), Cheng et al. (2016), Covington et al. (2016)).\nThe first stage generally implies the pre-generation of an inverted index over the set of recommendable products, paired with a real-time retrieval module, similarly to a search engine architecture. In our current paper we focus on the cases where the system supports vectorial product queries. The sources of the vectorial representations range from the set of co-occurring products, like in the case of neighborhood-based collaborative filtering, to a low-dimensional representation produced via matrix factorization or to an embedded representation produced via a deep neural network.\nThe second stage takes the candidate set and decides the final list of recommendations, usually by optimizing a ranking metric. This stage has in general a lot more constraints in terms of latency, due to its use of real-time signal that makes its predictions not cacheable. Therefore, in terms of model choice, the first stage can be a lot more complex than the second. In terms of impact, the quality of the candidate set coming from the first stage is crucial, since this constitutes a hard threshold on the performance of the second stage and of the overall system.\nBecause of the feasibility of using a more complex model and the potential impact on the final recommendation performance, we choose to concentrate our efforts on the task of optimal candi-\ndate generation. We formalize the problem as a link prediction task, where given a set of past co-purchased products we try to predict unseen pairs of products. Related work in representation learning for recommendation investigated the use of collaborative filtering (CF), text and product images, but to our knowledge, there has been no attempt to unify all of these signals in a single representation. We see this as an opportunity to investigate the leveraging effect of generating a Unified Product Representation via a deep-learning approach. In the following, we formally define the set of associated requirements we would like to satisfy:\n• Relevance: the representation should be optimized for product recommendation relevance, as measured by the associated target metrics (in this case, modeling it as a link prediction task and optimizing for the AUC of product pair prediction).\n• Coverage: the representation should leverage all available product information (in our case, all product information available in the product catalog together with observed product co-occurrences).\n• Cross-modality expressiveness: the representation should be able to account for interactions between various information sources such as text and image (can take into account the fact that the word ”red” and the ”red” color detector are correlated).\n• Pair-wise expressiveness: the representation should be able to account for interactions between the two products.\n• Robustness: the representation should operate well (recommendation performance will not degrade dramatically) in hard recommendation situations such as product cold-start (new products, new product pairs) and cross-category recommendation. These are important use-cases in product recommendation, when the product catalog has high churn (as in the case of flash sales websites or classifieds) or the recommendation needs to leverage crossadvertiser signal (as in the case of new users and user acquisition advertising campaigns). This is a different goal from simply trying to optimize for relevance metrics, due to the inherent limitations of offline metrics in predicting future online performance.\n• Retrieval-optimized: the representation should be adapted to a content-retrieval setup, both on the query and on the indexing side, meaning that the vectors should be either small, sparse or both.\nWe propose a modular deep architecture that leverages state-of-the-art architectures for generating embedded representations for image, text and CF input, re-specializes the resulting product embeddings and combines them into a single product vector. This is a very general architecture that can plugin any networks in the image and text domain and re-use them for the problem of product recommendation, along with their gains in representation learning for the two domains. We investigate multiple ways of merging the modality-specific product information and propose a new type of residual-inspired unit, which we name Pairwise Residual Unit, that can model the joint aspects of the different product embeddings and show that it leads to good improvements.\nWe analyze our proposed architecture on an Amazon dataset (McAuley et al., 2015) containing information on co-purchased products. We report our improvements versus a text and an imagebased baseline, that was introduced in previous work by (cite Julian) and show improvements both on normal and hard recommendation regimes such as cold-start and cross-category setups.\nOur approach is similar to the recent work by (Covington et al., 2016), that propose a solution for video recommendation at YouTube. Unlike their proposed solution, where, in order to support user vector queries, the candidate generation step co-embeds users and items, we are interested to coembed just the product pairs, which generally has a much smaller dimension. In our approach, the personalization step can happen after the per-item candidates are retrieved.\nOur main contributions are the following:\n• We propose a novel way of integrating deep-learning item representation in the context of large scale recommender system with a 2-stage serving architecture and introduce the new task of Unified Product Representation for optimal candidate selection in both cold start and normal recommendation setups.\n• We introduce a new deep architecture that merges content and CF signal for the task of product recommendation and propose the Pairwise Residual Unit, a new learning component that models the joint product representations.\n• We introduce two novel experimental setups (hard cold start, cross-category) and test that the proposed Content2Vec architecture satisfies the requirements we defined.\nThough the focus of our work is on improving product recommendation through representation learning, we believe that simple extensions of our approach can be applied to many other recommendation scenarios.\nThe rest of the paper goes as follows: In Section 2 we cover previous related work and the relationship with our method. In Section 3 we present the Content2Vec model, followed by a detailed description of the resulting architecture in Section 4. In Section 5 we present the experimental setup and go over the results on Section 5.2. In Section 6 we summarize our findings and conclude with future directions of research."
    }, {
      "heading" : "2 RELATED WORK",
      "text" : "Our work fits in the new wave of deep learning based recommendation solutions, that similarly to classical approaches can fall into 3 categories, namely collaborative filtering based, content based or hybrid approaches.\nSeveral approaches use neural networks to build better item representations based on the cooccurrence matrix. The Prod2Vec algorithm (see (Grbovic et al., 2015)) implements Word2Vec ((Mikolov et al., 2013a), (Shazeer et al., 2016)), an algorithm that is at origin a shallow neural language model, on sequences of product ids, to reach a low-dimensional representation of each product. Among other embedding solutions that use the item relationship graph are the more recent extensions to Word2Vec algorithm such as Glove (Pennington et al., 2014) and SWIVEL (Shazeer et al., 2016) and the graph embedding solutions proposed in Node2Vec (Grover & Leskovec, 2016) and SDNE (Wang et al., 2016).\nContent-based methods recommend an item to a user based upon an item description and a user profile ((Pazzani & Billsus, 2007)). This idea was deeply investigated in the information retrieval literature: in the context of web search, DSSM (Huang et al., 2013) and its extensions (Shen et al., 2014)(C-DSSM) and (Shan et al., 2016) are some of the most successful methods that specialize\nquery and document text embedding in order to predict implicit feedback signal such as document click-through rate. In the context of product recommendation, in (McAuley et al., 2015) the authors feed a pre-trained CNN (CNN trained on the ImageNet dataset, which is an image classification task that is very different from the task of image-based product recommendation) with products images and use the last layer of the network as the product embedding. This representation is subsequently used to compute similarities between products. Similarly, the authors in (Van den Oord et al., 2013) use CNNs to compute similarities between songs. Yosinski et al. (2014) show that the low layers of DNNs trained on different tasks are often similar and that good performance can be reached by fine-tuning a network previously trained on another task. In the case of recommendation systems, this fine tuning was implemented in Veit et al. (2015), where the authors specialize a GoogLeNet architecture to the task of predicting co-view events based on product pictures.\nThe performance of Collaborative Filtering (CF) models is often higher than that of content-based ones but it suffers from the cold-start problem. To take advantage of the best of both worlds, hybrid models use both sources of information in order to make recommendations. One possible way to incorporate product information is using it as side information in the product sequence model, as proposed in Meta-Prod2Vec (Vasile et al., 2016), leading to better product embeddings for products with low signal (low number of co-occurrences). In this work we continue the investigation of using both types of signal, this time both at training and product recommendation time."
    }, {
      "heading" : "3 CONTENT2VEC MODEL",
      "text" : "Our proposed approach takes the idea of specializing the input representations to the recommendation task and generalizes it for multi-modality inputs, in order to leverage all product information and in particular, product images and product title and description text.\nThe main criteria for the Content2Vec architecture is to allow us to easily plugin new sources of signal and to replace existing embedding solutions with new versions. We are also interested in separating product-level embeddings from pair-level embeddings, such that the network can generate product vectors that are readily indexable. As a result, the Content2Vec architecture has three types of modules, as shown in Figure 2:\n• Content-specific embedding modules that take raw product information and generate the associated vectors. In this paper we cover embedding modules for text, image, categorical attributes and product co-occurrences (for an example, see Figure 3).\n• Overall product embedding modules that merge all the product information into a unified product representation.\n• Pair embedding module that merges the product-to-product interactions and computes the final similarity score. In the case of retrieval-optimized product embeddings, this module becomes the inner-product between the two items and all interactions between them are to be approximated within the product-level embedding modules.\nContent2Vec training follows the architecture, learning module-by-module. In the first stage, we initialize the content-specific modules with embeddings from proxy tasks (classification for image, language modeling for text) and re-specialize them to the task of product recommendation. For the specialization task, as mentioned in Section 1, we frame the objective as a link prediction task where we try to predict the pairs of products purchased together. We describe the loss function in Section 3.1. In the second stage, we stack the modality-specific embeddings generated in the first stage into a general product vector and learn an additional residual vector using the same learning objective as in the specialization step. This will described in depth in Section 4.2. Finally, in the third stage, given the updated product vectors from stage two, we learn the linear combination between the similarities of the product vectors and make the final prediction."
    }, {
      "heading" : "3.1 LOSS FUNCTION",
      "text" : "The previous work on learning pair-wise item distances concentrated on using ranking (McFee & Lanckriet, 2010), siamese (Hadsell et al., 2006) or logistic loss (Zheng et al., 2015). For optimizing the link prediction objective we choose the logistic similarity loss (eq. 1) that has the advantage of\nhaving a fast approximation via Negative Sampling loss (Mikolov et al., 2013b) shown in eq. 2. By using Negative Sampling, the prediction step can scale up to large number of items, by using all positive pairs and sampling the negatives on the fly.\nL(θ) = ∑ ij −XPOSij log σ(sim(ai, bj))−XNEGij log σ(−sim(ai, bj)) (1)\nLNS(θ) = ∑ ij −XPOSij (log σ(sim(ai, bj)) + k∑ l=1 Enl∼PD log σ(−sim(ai, nl))) (2)\nwhere: θ = (ai, bj) is the set of model parameters, where ai and bj are the embedding vectors for the products A and B, sim(ai, bj) = α < ai, bj > +β is the similarity function between ai and bj , α and β are scalar values, XPOSij is the frequency of the observed item pair ij (e.g. the frequency of the positive pair ij), XNEGij = Xi − XPOSij is the frequency of the unobserved item pair ij (we assume that all unobserved pairs are negatives), PD probability distribution used to sample negative context examples nl, k is a hyper parameter specifying the number of negative examples per positive example."
    }, {
      "heading" : "4 CONTENT2VEC MODULES",
      "text" : ""
    }, {
      "heading" : "4.1 CONTENT-SPECIFIC EMBEDDING MODULES",
      "text" : "Content-specific modules can have various architectures and are meant to be used separately in order to increase modularity. Their role is to map all types of item signal into embedded representations.\nIn Figure 3 we give an illustrative example of mapping a pair of products to their vectorial representations.\nIn the following we analyze four types of input signal and embedding solutions for each one of them. For all of the modules, we use LNS loss (see eq. 2) as specialization loss."
    }, {
      "heading" : "4.1.1 EMBEDDING PRODUCT IMAGES: ALEXNET",
      "text" : "Model and proxy task: CNN for Image Classification For generating the image embeddings we propose reusing a model trained for image classification, as in previous work by (Krizhevsky et al., 2012) and (He & McAuley, 2015). In (He & McAuley, 2015), the authors have shown how to use the Inception architecture (Szegedy et al., 2015) and specialize it for the product recommendation task. However, the Inception architecture is very deep and requires extensive training time. For ease of experimentation we use AlexNet, which is a simpler architecture that was also a winner on the ImageNet task (Krizhevsky et al., 2012) previously to Inception NN. In section 5.2 we will show that, even if simpler, when combined with additional product text information, the AlexNet-based solution can perform very well on the recommendation task. For our experiments, we use the pretrained version of AlexNet available on Toronto’s university website. We experimented with two different ways to specialize the representation in order to compute product similarities. In the first one, we learn a weighted inner product between the two representations (fc7 layer of ImageNet). In the second one, we specialize the fc7 layer to detect product similarities. The second approach lead to much better performance and is the one for which we report final results."
    }, {
      "heading" : "4.1.2 EMBEDDING PRODUCT TEXT: WORD2VEC AND CNN ON SENTENCES",
      "text" : "Model and proxy task: Word2Vec for Product Language Modeling For generating word embeddings, we propose reusing Word2Vec Mikolov et al. (2013b), a model for generating language models that has been employed in a various of text understanding tasks. More recently, it has been shown in (Pennington et al., 2014) that Word2Vec is closely linked with matrix factorization techniques applied on the word co-occurrence matrix. For Content2Vec, we chose to pretrain Word2Vec\non the entire product catalog text information and not use an available set of word embeddings such as the one created on the Google Corpus. The main reason is that the text distribution within product descriptions is quite different from the general distribution. For example the word ’jersey’ has a very different conditional distribution within the product description corpus versus general online text. Text CNN (Kim, 2014) offers a simple solution for sentence-level embeddings using convolutions. The convolutions act as a form of n-gram filters, allowing the network to embed sentence-level information and specializing word embeddings to higher-order tasks such as text classification or sentiment analysis. To the best of our knowledge, this is the first attempt to employ them for the task of product recommendation. For our task, we generate sentences based on the product titles and descriptions."
    }, {
      "heading" : "4.1.3 EMBEDDING PRODUCT CO-OCCURRENCES: PROD2VEC",
      "text" : "Prod2Vec (Grbovic et al., 2015) is an extension of the Word2Vec algorithm to product shopping sequences. As a result, Prod2Vec can be seen as a matrix factorization technique on the product co-occurence matrix. In Content2Vec, the Prod2Vec-based similarity contains all of the information that can be derived from the sequential aspect of the user behavior, without taking into account the per-product meta-data."
    }, {
      "heading" : "4.1.4 EMBEDDING CATEGORICAL PRODUCT META-DATA: META-PROD2VEC",
      "text" : "Meta-Prod2Vec (Vasile et al., 2016) improves upon Prod2Vec by using the product meta-data side information to regularize the final product embeddings. In Content2Vec, we can use the similar technique of co-embedding product categorical information with product ids to generate the embedding values for the categorical features."
    }, {
      "heading" : "4.2 JOINT PRODUCT EMBEDDING: PAIRWISE RESIDUAL UNIT",
      "text" : "As stated in Section 1, the function of the product embedding module is two-fold: first, to model all interactions that exist between the modality-specific embeddings with respect to the final optimization objective, and second, to approximate interaction terms between the products that cannot be explained by a linear combination of the modality-specific similarities. With this in mind, we introduce a new type of learning unit, the Pairwise Residual Unit (eq. 4), which similarly to the original residual unit introduced in He et al. (2015) (eq. 3), allows the layers to learn incremental, i.e. residual representations (see Figure 4). In Hardt & Ma (2016) the authors motivate the use of residual units as helping preserve the representations learned in the previous layers. In our case we are interested in preserving the specialized image and text representations and learn an additional representation for their interactions. Though in previous work, most the of the residual units are using at least two ReLU layers in the residual unit, we observe good results using just one. In order to model interactions between modalities, we could also learn a fully connected layer initialized with identity that takes as input the concatenated modality-specific vectors. However, in order to have a smaller number of parameters and increase model comprehensibility, we would like to keep separate the modality-specific representations and to model the final prediction model as an ensemble.\ny = F (x) + x (3)\ny = sim(F (x1), F (x2)) + sim(x1, x2) (4) where: x1 and x2 are the two product embedding vectors (obtained by stacking the modality-specific vectors), sim(., .) is a similarity function over two embedding vectors x1, x2, F (x) is a Rectified Linear Unit.\nTo be able to measure the incremental value of introducing a residual vector we introduce a baseline architecture that computes the final prediction based on the linear combination of the modalityspecific similarities denoted by Content2Vec-linear with the associated similarity function defined in eq. 5.\nsimc2v(ai, bj) = ∑\nm∈Modalities\nwmσ(simm(ai, bj)) (5)\nUnder this notation, the residual-based architecture denoted as Content2Vec-res minimizes LNS with the similarity function defined in eq. 6.\nsimc2v−res(ai, bj) = ∑\nm∈(Modalities+Residual)\nwmσ(simm(ai, bj)) (6)\nIn order to learn the residual vector, we keep fixed the modality-specific similarities and co-train the final weights of each of the modalities together with the product-specific residual layers. For example, in the case of using only image and text signals, our final predictor can be defined as in eq 7, where Ptxt and Pimg are pre-set and wtxt, wimg , wres and Pres are learned together:\nP (pos|a, b) = σ(wtxtPtxt(pos|atxt, btxt) + wimgPimg(pos|aimg, bimg) + wresPres(pos|ares, bres)) (7)\nwhere: pos is the positive outcome of products A and B being bought together and Pres(pos|a, b) = σ(α < F ([atxt, aimg]), F ([btxt, bimg]) > +β)\nIn Section 5.2 we compare the performance of Content2Vec-res and Content2Vec-linear and show that, as expected, the proposed architecture surpasses the performance of the linear model, while allowing for a retrieval-based candidate scoring solution."
    }, {
      "heading" : "4.3 PAIR EMBEDDING MODULE",
      "text" : "In a retrieval-based architecture, the pair embedding module cannot support more than a simple linear combination of the product embedding vectors, such that the final score can be computed via inner-product. However, we are still interested to know the trade-off in performance between an inner-product-based candidate scoring and a model that allows for explicit interaction terms between the items. To this end, we introduce two explicit interaction models: Content2Vec-crossfeat - a\nmodel where we discretize the text and image-specific similarity scores and create explicit feature conjunctions between them and Content2Vec-embedpairs - a model where we use a similar technique with Paiwise Residual Unit, in this case modeling the residual of the linear similarity directly as a vector in the pair embedding layer, as shown in Figure 5. In Section 5.2 we show that two models have as expected better performance than the linear model and that the pair embedding is slightly better."
    }, {
      "heading" : "5 EXPERIMENTAL RESULTS",
      "text" : ""
    }, {
      "heading" : "5.1 DATASET",
      "text" : "We perform our evaluation on the publicly available Amazon dataset (McAuley et al., 2015) that represents a collection of products that were co-bought on the Amazon website. Each item has a rich description containing product image, text and category (any of the modalities can be missing). In terms of dimensionality, the dataset contains around 10M pairs of products. We concentrate on the subgraph of Book and Movie product pairs, because both categories are large and they have a reasonable sized intersection. This allows us to look at recommendation performance on crosscategory pairs (to evaluate a model trained only on Book pairs on predicting Movie co-bought items) and mixed category pairs (to evaluate the models on Book-Movie product pairs).\nBased on the full Book & Movies data we generate three datasets with different characteristics: The first dataset simulates a hard cold start regime, where all product pairs used in validation and testing are over products unseen in training. This tests the hardest recommendation setup, where all testing data is new. We decided to bench all of our hyperparameters on this regime and use the best setup on all datasets, since tuning on the harder dataset ensures the best generalization error (results shown in Table 1). The second dataset simulates a non-cold start regime, where the vast majority of the products in the test set are available at training time. The dataset is generated by taking the top 100k most connected products in the original dataset and keeping the links between them (results shown in Table 2). The third dataset simulates a soft cold start regime, where some of the products in the test set are available at training time. The dataset is generated by taking the top 200k most connected products in the original dataset and sampling 10% of the links between them (results shown in Table 3).\nHyper-parameters We fixed the sizes of embedding vectors for image CNN module to 4096 hidden units, for text CNN module to 256, for Prod2Vec module to 50, for residual representation to 128. For optimization we use an Adam algorithm and we manually set the initial learning rate based on the validation set performance. The batch sizes vary for different datasets. We train all the models until validation set performance stops increasing.\nEvaluation task We evaluate the recommendation methods on the product link prediction task, similar to (He & McAuley, 2015). We consider the observed product pairs as positive examples and all unknown pairs as negatives. We generate negative pairs according to the popularity of the products in the positive pairs (negative examples between popular products are more likely to be generated) with a positive to negative ratio of 1:2.\nEvaluation metrics For the link prediction task, we use the Area Under Curve (AUC) of the Precision/Recall curve as our evaluation metric.\nCompeting methods\n• ImageCNN: prediction based on specialized image embeddings similarity • TextCNN: prediction based on specialized text embeddings similarity • Content2Vec-linear: prediction based on the linear combination of text and image similar-\nities • Content2Vec-crossfeat: prediction based on the linear combination of discretized image\nand text similarities and their conjuctions • Content2Vec-res: prediction based on the linear combination of text and image similarities\nplus product-level residual vectors similarities • Content2Vec-embedpairs: prediction based on the linear combination of text and image\nsimilarities and a pair-level residual component • Prod2Vec: prediction based on the product vectors coming from the decomposition of the\nco-purchase matrix • Content2Vec+: prediction based on the ensemble of Prod2Vec and Content2Vec models"
    }, {
      "heading" : "5.2 RESULTS",
      "text" : "The results on hard and soft cold start datasets (Tables 1, 3) show that our main proposed method Content2Vec-res can leverage the additional signal provided by each of the input modalities in a joint manner and leads to significant gains in AUC versus the one-signal baselines (ImageCNN, TextCNN) and their linear combination (Content2Vec-linear). From the point of view of robustness, Content2Vec-res learns product representations that perform better than the baseline methods on out-of-sample recommendations such as cross-category pairs and mixed-category pairs (Table 1). We observe that adding an additional layer that represents pair-level interactions does not lead to big improvements in either of the two models we investigated (Content2Vec-crossfeat,embedpairs), confirming that a product retrieval-based recommender system can achieve state-of-the-art results. Finally, Content2Vec-res+, our proposed hybrid architecture that combines content and CF signal achieves better performance than the content and CF-only models, with bigger lifts in the case of the third dataset (Table 3) where the CF signal is weaker due to higher sparsity.\nRecommendation Model Test Content2Vec-linear 84% Content2Vec-res 87% Prod2Vec 96% Content2Vec-linear+ 97% Content2Vec-res+ 97%\nTable 2: AUC results on non cold-start dataset.\nRecommendation Model Test ImageCNN 80% TextCNN 78% Content2vec-linear 88% Content2vec-res 89% Content2vec-embed pairs 90% Prod2vec 86% Content2vec-linear+ 89% Content2vec-res+ 92% Content2vec-embed pairs+ 92%\nTable 3: AUC results on soft cold-start dataset."
    }, {
      "heading" : "6 CONCLUSIONS",
      "text" : "This work has several key contributions. We show how to use all product signal for the task of product recommendation using a modular architecture that can leverage fast evolving solutions for each type of input modality. We define a set of requirements for evaluating the resulting product embeddings and show that our method leads to significant improvements over the single signal approaches on hard recommendation situations such as cold-start and cross-category evaluation. Finally, in order to model the joint aspects of the product embeddings we introduce a new type of learning unit, named Pairwise Residual Unit and show the resulting gains on a real product co-purchases dataset. In the current work we have addressed all but one of the desired requirements, namely generating retrieval-optimized embeddings. For the next steps, we want to pursue sparse and compressed product representations, in order to help the performance of the final product retrieval system."
    } ],
    "references" : [ {
      "title" : "Wide & deep learning for recommender systems",
      "author" : [ "Heng-Tze Cheng", "Levent Koc", "Jeremiah Harmsen", "Tal Shaked", "Tushar Chandra", "Hrishi Aradhye", "Glen Anderson", "Greg Corrado", "Wei Chai", "Mustafa Ispir" ],
      "venue" : "arXiv preprint arXiv:1606.07792,",
      "citeRegEx" : "Cheng et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Cheng et al\\.",
      "year" : 2016
    }, {
      "title" : "Deep neural networks for youtube recommendations",
      "author" : [ "Paul Covington", "Jay Adams", "Emre Sargin" ],
      "venue" : "In Proceedings of the 10th ACM Conference on Recommender Systems,",
      "citeRegEx" : "Covington et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Covington et al\\.",
      "year" : 2016
    }, {
      "title" : "E-commerce in your inbox: Product recommendations at scale",
      "author" : [ "Mihajlo Grbovic", "Vladan Radosavljevic", "Nemanja Djuric", "Narayan Bhamidipati", "Jaikit Savla", "Varun Bhagwan", "Doug Sharp" ],
      "venue" : "In Proceedings of the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining,",
      "citeRegEx" : "Grbovic et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Grbovic et al\\.",
      "year" : 2015
    }, {
      "title" : "node2vec: Scalable feature learning for networks. 2016",
      "author" : [ "Aditya Grover", "Jure Leskovec" ],
      "venue" : null,
      "citeRegEx" : "Grover and Leskovec.,? \\Q2016\\E",
      "shortCiteRegEx" : "Grover and Leskovec.",
      "year" : 2016
    }, {
      "title" : "Dimensionality reduction by learning an invariant mapping",
      "author" : [ "Raia Hadsell", "Sumit Chopra", "Yann LeCun" ],
      "venue" : "IEEE Computer Society Conference on Computer Vision and Pattern Recognition (CVPR’06),",
      "citeRegEx" : "Hadsell et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Hadsell et al\\.",
      "year" : 2006
    }, {
      "title" : "Identity matters in deep learning",
      "author" : [ "Moritz Hardt", "Tengyu Ma" ],
      "venue" : "arXiv preprint arXiv:1611.04231,",
      "citeRegEx" : "Hardt and Ma.,? \\Q2016\\E",
      "shortCiteRegEx" : "Hardt and Ma.",
      "year" : 2016
    }, {
      "title" : "Deep residual learning for image recognition",
      "author" : [ "Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun" ],
      "venue" : "arXiv preprint arXiv:1512.03385,",
      "citeRegEx" : "He et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2015
    }, {
      "title" : "Vbpr: visual bayesian personalized ranking from implicit feedback",
      "author" : [ "Ruining He", "Julian McAuley" ],
      "venue" : "arXiv preprint arXiv:1510.01784,",
      "citeRegEx" : "He and McAuley.,? \\Q2015\\E",
      "shortCiteRegEx" : "He and McAuley.",
      "year" : 2015
    }, {
      "title" : "Learning deep structured semantic models for web search using clickthrough data",
      "author" : [ "Po-Sen Huang", "Xiaodong He", "Jianfeng Gao", "Li Deng", "Alex Acero", "Larry Heck" ],
      "venue" : "In Proceedings of the 22nd ACM international conference on Conference on information & knowledge management,",
      "citeRegEx" : "Huang et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Huang et al\\.",
      "year" : 2013
    }, {
      "title" : "Convolutional neural networks for sentence classification",
      "author" : [ "Yoon Kim" ],
      "venue" : "arXiv preprint arXiv:1408.5882,",
      "citeRegEx" : "Kim.,? \\Q2014\\E",
      "shortCiteRegEx" : "Kim.",
      "year" : 2014
    }, {
      "title" : "The xbox recommender system",
      "author" : [ "Noam Koenigstein", "Nir Nice", "Ulrich Paquet", "Nir Schleyen" ],
      "venue" : "In Proceedings of the sixth ACM conference on Recommender systems,",
      "citeRegEx" : "Koenigstein et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Koenigstein et al\\.",
      "year" : 2012
    }, {
      "title" : "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing",
      "author" : [ "Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E Hinton" ],
      "venue" : null,
      "citeRegEx" : "Krizhevsky et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Krizhevsky et al\\.",
      "year" : 2012
    }, {
      "title" : "Personalized news recommendation based on click behavior",
      "author" : [ "Jiahui Liu", "Peter Dolan", "Elin Rønby Pedersen" ],
      "venue" : "In Proceedings of the 15th international conference on Intelligent user interfaces,",
      "citeRegEx" : "Liu et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2010
    }, {
      "title" : "Venture beat article. http://venturebeat.com/2006/12/10/ aggregate-knowledge-raises-5m-from-kleiner-on-a-roll",
      "author" : [ "Matt Marshall" ],
      "venue" : null,
      "citeRegEx" : "Marshall.,? \\Q2006\\E",
      "shortCiteRegEx" : "Marshall.",
      "year" : 2006
    }, {
      "title" : "Product recommendation at criteo",
      "author" : [ "PierreEmmanuel Mazare" ],
      "venue" : "http://labs.criteo.com/ 2016/09/product-recommendation-criteo/, September 2016",
      "citeRegEx" : "Mazare.,? \\Q2016\\E",
      "shortCiteRegEx" : "Mazare.",
      "year" : 2016
    }, {
      "title" : "Image-based recommendations on styles and substitutes",
      "author" : [ "Julian McAuley", "Christopher Targett", "Qinfeng Shi", "Anton van den Hengel" ],
      "venue" : "In Proceedings of the 38th International ACM SIGIR Conference on Research and Development in Information Retrieval,",
      "citeRegEx" : "McAuley et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "McAuley et al\\.",
      "year" : 2015
    }, {
      "title" : "Metric learning to rank",
      "author" : [ "Brian McFee", "Gert R Lanckriet" ],
      "venue" : "In Proceedings of the 27th International Conference on Machine Learning",
      "citeRegEx" : "McFee and Lanckriet.,? \\Q2010\\E",
      "shortCiteRegEx" : "McFee and Lanckriet.",
      "year" : 2010
    }, {
      "title" : "Efficient estimation of word representations in vector space",
      "author" : [ "Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean" ],
      "venue" : "arXiv preprint arXiv:1301.3781,",
      "citeRegEx" : "Mikolov et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2013
    }, {
      "title" : "Distributed representations of words and phrases and their compositionality",
      "author" : [ "Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean" ],
      "venue" : "In Advances in neural information processing systems,",
      "citeRegEx" : "Mikolov et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2013
    }, {
      "title" : "Content-based recommendation systems",
      "author" : [ "Michael J Pazzani", "Daniel Billsus" ],
      "venue" : "In The adaptive web,",
      "citeRegEx" : "Pazzani and Billsus.,? \\Q2007\\E",
      "shortCiteRegEx" : "Pazzani and Billsus.",
      "year" : 2007
    }, {
      "title" : "Glove: Global Vectors for Word Representation",
      "author" : [ "Jeffrey Pennington", "Richard Socher", "Christopher Manning" ],
      "venue" : "In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP),",
      "citeRegEx" : "Pennington et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Pennington et al\\.",
      "year" : 2014
    }, {
      "title" : "Deep crossing: Webscale modeling without manually crafted combinatorial features",
      "author" : [ "Ying Shan", "T Ryan Hoens", "Jian Jiao", "Haijing Wang", "Dong Yu", "JC Mao" ],
      "venue" : null,
      "citeRegEx" : "Shan et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Shan et al\\.",
      "year" : 2016
    }, {
      "title" : "Swivel: Improving embeddings by noticing what’s missing",
      "author" : [ "Noam Shazeer", "Ryan Doherty", "Colin Evans", "Chris Waterson" ],
      "venue" : "arXiv preprint arXiv:1602.02215,",
      "citeRegEx" : "Shazeer et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Shazeer et al\\.",
      "year" : 2016
    }, {
      "title" : "Learning semantic representations using convolutional neural networks for web search",
      "author" : [ "Yelong Shen", "Xiaodong He", "Jianfeng Gao", "Li Deng", "Grégoire Mesnil" ],
      "venue" : "In Proceedings of the 23rd International Conference on World Wide Web,",
      "citeRegEx" : "Shen et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Shen et al\\.",
      "year" : 2014
    }, {
      "title" : "Rethinking the inception architecture for computer vision",
      "author" : [ "Christian Szegedy", "Vincent Vanhoucke", "Sergey Ioffe", "Jonathon Shlens", "Zbigniew Wojna" ],
      "venue" : "arXiv preprint arXiv:1512.00567,",
      "citeRegEx" : "Szegedy et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Szegedy et al\\.",
      "year" : 2015
    }, {
      "title" : "Deep content-based music recommendation",
      "author" : [ "Aaron Van den Oord", "Sander Dieleman", "Benjamin Schrauwen" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Oord et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Oord et al\\.",
      "year" : 2013
    }, {
      "title" : "Meta-prod2vec-product embeddings using side-information for recommendation",
      "author" : [ "Flavian Vasile", "Elena Smirnova", "Alexis Conneau" ],
      "venue" : "arXiv preprint arXiv:1607.07326,",
      "citeRegEx" : "Vasile et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Vasile et al\\.",
      "year" : 2016
    }, {
      "title" : "Learning visual clothing style with heterogeneous dyadic co-occurrences",
      "author" : [ "Andreas Veit", "Balazs Kovacs", "Sean Bell", "Julian McAuley", "Kavita Bala", "Serge Belongie" ],
      "venue" : "In Proceedings of the IEEE International Conference on Computer Vision, pp. 4642–4650,",
      "citeRegEx" : "Veit et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Veit et al\\.",
      "year" : 2015
    }, {
      "title" : "Structural deep network embedding",
      "author" : [ "Daixin Wang", "Peng Cui", "Wenwu Zhu" ],
      "venue" : null,
      "citeRegEx" : "Wang et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2016
    }, {
      "title" : "How transferable are features in deep neural networks",
      "author" : [ "Jason Yosinski", "Jeff Clune", "Yoshua Bengio", "Hod Lipson" ],
      "venue" : "In Advances in neural information processing systems,",
      "citeRegEx" : "Yosinski et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Yosinski et al\\.",
      "year" : 2014
    }, {
      "title" : "Logistic similarity metric learning for face verification",
      "author" : [ "Lilei Zheng", "Khalid Idrissi", "Christophe Garcia", "Stefan Duffner", "Atilla Baskurt" ],
      "venue" : "In 2015 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP),",
      "citeRegEx" : "Zheng et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Zheng et al\\.",
      "year" : 2015
    } ],
    "referenceMentions" : [ {
      "referenceID" : 13,
      "context" : "Online product recommendation is now a key driver of demand, not only in E-commerce businesses that recommend physical products, such as Amazon (Marshall, 2006), TaoBao (Xiang, 2013) and Ebay (Academy, 2013), but also in online websites that recommend digital content such as news (Yahoo! - Agarwal et al.",
      "startOffset" : 144,
      "endOffset" : 160
    }, {
      "referenceID" : 9,
      "context" : "Online product recommendation is now a key driver of demand, not only in E-commerce businesses that recommend physical products, such as Amazon (Marshall, 2006), TaoBao (Xiang, 2013) and Ebay (Academy, 2013), but also in online websites that recommend digital content such as news (Yahoo! - Agarwal et al. (2013), Google - Liu et al.",
      "startOffset" : 145,
      "endOffset" : 313
    }, {
      "referenceID" : 9,
      "context" : "(2013), Google - Liu et al. (2010)), movies (Netflix - Bell & Koren (2007)), music (Spotify - Johnson (2015)), videos (YouTube - Covington et al.",
      "startOffset" : 17,
      "endOffset" : 35
    }, {
      "referenceID" : 9,
      "context" : "(2013), Google - Liu et al. (2010)), movies (Netflix - Bell & Koren (2007)), music (Spotify - Johnson (2015)), videos (YouTube - Covington et al.",
      "startOffset" : 17,
      "endOffset" : 75
    }, {
      "referenceID" : 9,
      "context" : "(2013), Google - Liu et al. (2010)), movies (Netflix - Bell & Koren (2007)), music (Spotify - Johnson (2015)), videos (YouTube - Covington et al.",
      "startOffset" : 17,
      "endOffset" : 109
    }, {
      "referenceID" : 0,
      "context" : "(2010)), movies (Netflix - Bell & Koren (2007)), music (Spotify - Johnson (2015)), videos (YouTube - Covington et al. (2016)) and games (Xbox Koenigstein et al.",
      "startOffset" : 101,
      "endOffset" : 125
    }, {
      "referenceID" : 0,
      "context" : "(2010)), movies (Netflix - Bell & Koren (2007)), music (Spotify - Johnson (2015)), videos (YouTube - Covington et al. (2016)) and games (Xbox Koenigstein et al. (2012)).",
      "startOffset" : 101,
      "endOffset" : 168
    }, {
      "referenceID" : 0,
      "context" : "(2010)), movies (Netflix - Bell & Koren (2007)), music (Spotify - Johnson (2015)), videos (YouTube - Covington et al. (2016)) and games (Xbox Koenigstein et al. (2012)). Two of the most challenging aspects of recommendation in general and of product recommendation in particular, are scalability and freshness. The first one addresses the problem of making fast recommendations in parallel, the second addresses the problem of updating recommendations based on real-time user interaction. One of the most encountered architecture solutions for recommendation at scale divides the recommendation process in two stages: a candidate generation stage that prunes the number of recommendable items from billions to a couple of hundreds, followed by a second item selection stage that decides the final set of items to be displayed to the user, as shown in Figure 1 (see Mazare (2016), Cheng et al.",
      "startOffset" : 101,
      "endOffset" : 879
    }, {
      "referenceID" : 0,
      "context" : "One of the most encountered architecture solutions for recommendation at scale divides the recommendation process in two stages: a candidate generation stage that prunes the number of recommendable items from billions to a couple of hundreds, followed by a second item selection stage that decides the final set of items to be displayed to the user, as shown in Figure 1 (see Mazare (2016), Cheng et al. (2016), Covington et al.",
      "startOffset" : 391,
      "endOffset" : 411
    }, {
      "referenceID" : 0,
      "context" : "One of the most encountered architecture solutions for recommendation at scale divides the recommendation process in two stages: a candidate generation stage that prunes the number of recommendable items from billions to a couple of hundreds, followed by a second item selection stage that decides the final set of items to be displayed to the user, as shown in Figure 1 (see Mazare (2016), Cheng et al. (2016), Covington et al. (2016)).",
      "startOffset" : 391,
      "endOffset" : 436
    }, {
      "referenceID" : 15,
      "context" : "We analyze our proposed architecture on an Amazon dataset (McAuley et al., 2015) containing information on co-purchased products.",
      "startOffset" : 58,
      "endOffset" : 80
    }, {
      "referenceID" : 1,
      "context" : "Our approach is similar to the recent work by (Covington et al., 2016), that propose a solution for video recommendation at YouTube.",
      "startOffset" : 46,
      "endOffset" : 70
    }, {
      "referenceID" : 2,
      "context" : "The Prod2Vec algorithm (see (Grbovic et al., 2015)) implements Word2Vec ((Mikolov et al.",
      "startOffset" : 28,
      "endOffset" : 50
    }, {
      "referenceID" : 22,
      "context" : ", 2013a), (Shazeer et al., 2016)), an algorithm that is at origin a shallow neural language model, on sequences of product ids, to reach a low-dimensional representation of each product.",
      "startOffset" : 10,
      "endOffset" : 32
    }, {
      "referenceID" : 20,
      "context" : "Among other embedding solutions that use the item relationship graph are the more recent extensions to Word2Vec algorithm such as Glove (Pennington et al., 2014) and SWIVEL (Shazeer et al.",
      "startOffset" : 136,
      "endOffset" : 161
    }, {
      "referenceID" : 22,
      "context" : ", 2014) and SWIVEL (Shazeer et al., 2016) and the graph embedding solutions proposed in Node2Vec (Grover & Leskovec, 2016) and SDNE (Wang et al.",
      "startOffset" : 19,
      "endOffset" : 41
    }, {
      "referenceID" : 28,
      "context" : ", 2016) and the graph embedding solutions proposed in Node2Vec (Grover & Leskovec, 2016) and SDNE (Wang et al., 2016).",
      "startOffset" : 98,
      "endOffset" : 117
    }, {
      "referenceID" : 8,
      "context" : "This idea was deeply investigated in the information retrieval literature: in the context of web search, DSSM (Huang et al., 2013) and its extensions (Shen et al.",
      "startOffset" : 110,
      "endOffset" : 130
    }, {
      "referenceID" : 23,
      "context" : ", 2013) and its extensions (Shen et al., 2014)(C-DSSM) and (Shan et al.",
      "startOffset" : 27,
      "endOffset" : 46
    }, {
      "referenceID" : 21,
      "context" : ", 2014)(C-DSSM) and (Shan et al., 2016) are some of the most successful methods that specialize",
      "startOffset" : 20,
      "endOffset" : 39
    }, {
      "referenceID" : 15,
      "context" : "In the context of product recommendation, in (McAuley et al., 2015) the authors feed a pre-trained CNN (CNN trained on the ImageNet dataset, which is an image classification task that is very different from the task of image-based product recommendation) with products images and use the last layer of the network as the product embedding.",
      "startOffset" : 45,
      "endOffset" : 67
    }, {
      "referenceID" : 26,
      "context" : "One possible way to incorporate product information is using it as side information in the product sequence model, as proposed in Meta-Prod2Vec (Vasile et al., 2016), leading to better product embeddings for products with low signal (low number of co-occurrences).",
      "startOffset" : 144,
      "endOffset" : 165
    }, {
      "referenceID" : 15,
      "context" : "In the context of product recommendation, in (McAuley et al., 2015) the authors feed a pre-trained CNN (CNN trained on the ImageNet dataset, which is an image classification task that is very different from the task of image-based product recommendation) with products images and use the last layer of the network as the product embedding. This representation is subsequently used to compute similarities between products. Similarly, the authors in (Van den Oord et al., 2013) use CNNs to compute similarities between songs. Yosinski et al. (2014) show that the low layers of DNNs trained on different tasks are often similar and that good performance can be reached by fine-tuning a network previously trained on another task.",
      "startOffset" : 46,
      "endOffset" : 548
    }, {
      "referenceID" : 15,
      "context" : "In the context of product recommendation, in (McAuley et al., 2015) the authors feed a pre-trained CNN (CNN trained on the ImageNet dataset, which is an image classification task that is very different from the task of image-based product recommendation) with products images and use the last layer of the network as the product embedding. This representation is subsequently used to compute similarities between products. Similarly, the authors in (Van den Oord et al., 2013) use CNNs to compute similarities between songs. Yosinski et al. (2014) show that the low layers of DNNs trained on different tasks are often similar and that good performance can be reached by fine-tuning a network previously trained on another task. In the case of recommendation systems, this fine tuning was implemented in Veit et al. (2015), where the authors specialize a GoogLeNet architecture to the task of predicting co-view events based on product pictures.",
      "startOffset" : 46,
      "endOffset" : 822
    }, {
      "referenceID" : 4,
      "context" : "The previous work on learning pair-wise item distances concentrated on using ranking (McFee & Lanckriet, 2010), siamese (Hadsell et al., 2006) or logistic loss (Zheng et al.",
      "startOffset" : 120,
      "endOffset" : 142
    }, {
      "referenceID" : 30,
      "context" : ", 2006) or logistic loss (Zheng et al., 2015).",
      "startOffset" : 25,
      "endOffset" : 45
    }, {
      "referenceID" : 11,
      "context" : "Model and proxy task: CNN for Image Classification For generating the image embeddings we propose reusing a model trained for image classification, as in previous work by (Krizhevsky et al., 2012) and (He & McAuley, 2015).",
      "startOffset" : 171,
      "endOffset" : 196
    }, {
      "referenceID" : 24,
      "context" : "In (He & McAuley, 2015), the authors have shown how to use the Inception architecture (Szegedy et al., 2015) and specialize it for the product recommendation task.",
      "startOffset" : 86,
      "endOffset" : 108
    }, {
      "referenceID" : 11,
      "context" : "For ease of experimentation we use AlexNet, which is a simpler architecture that was also a winner on the ImageNet task (Krizhevsky et al., 2012) previously to Inception NN.",
      "startOffset" : 120,
      "endOffset" : 145
    }, {
      "referenceID" : 20,
      "context" : "More recently, it has been shown in (Pennington et al., 2014) that Word2Vec is closely linked with matrix factorization techniques applied on the word co-occurrence matrix.",
      "startOffset" : 36,
      "endOffset" : 61
    }, {
      "referenceID" : 17,
      "context" : "Model and proxy task: Word2Vec for Product Language Modeling For generating word embeddings, we propose reusing Word2Vec Mikolov et al. (2013b), a model for generating language models that has been employed in a various of text understanding tasks.",
      "startOffset" : 121,
      "endOffset" : 144
    }, {
      "referenceID" : 9,
      "context" : "Text CNN (Kim, 2014) offers a simple solution for sentence-level embeddings using convolutions.",
      "startOffset" : 9,
      "endOffset" : 20
    }, {
      "referenceID" : 2,
      "context" : "Prod2Vec (Grbovic et al., 2015) is an extension of the Word2Vec algorithm to product shopping sequences.",
      "startOffset" : 9,
      "endOffset" : 31
    }, {
      "referenceID" : 26,
      "context" : "Meta-Prod2Vec (Vasile et al., 2016) improves upon Prod2Vec by using the product meta-data side information to regularize the final product embeddings.",
      "startOffset" : 14,
      "endOffset" : 35
    }, {
      "referenceID" : 6,
      "context" : "4), which similarly to the original residual unit introduced in He et al. (2015) (eq.",
      "startOffset" : 64,
      "endOffset" : 81
    }, {
      "referenceID" : 6,
      "context" : "4), which similarly to the original residual unit introduced in He et al. (2015) (eq. 3), allows the layers to learn incremental, i.e. residual representations (see Figure 4). In Hardt & Ma (2016) the authors motivate the use of residual units as helping preserve the representations learned in the previous layers.",
      "startOffset" : 64,
      "endOffset" : 197
    }, {
      "referenceID" : 15,
      "context" : "We perform our evaluation on the publicly available Amazon dataset (McAuley et al., 2015) that represents a collection of products that were co-bought on the Amazon website.",
      "startOffset" : 67,
      "endOffset" : 89
    } ],
    "year" : 2016,
    "abstractText" : "We propose a unified product embedded representation that is optimized for the task of retrieval-based product recommendation. We generate this representation using Content2Vec, a new deep architecture that merges product content information such as text and image, and we analyze its performance on hard recommendation setups such as cold-start and cross-category recommendations. In the case of a normal recommendation regime where collaborative information signal is available, we merge the product co-occurrence information and propose a second architecture Content2vec+ and show its lift in performance versus non-hybrid approaches in both cold start and normal recommendation regimes.",
    "creator" : "LaTeX with hyperref package"
  }
}