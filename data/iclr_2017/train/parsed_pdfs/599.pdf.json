{
  "name" : "599.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "MISSING VALUES", "Zhengping Che", "Sanjay Purushotham", "Kyunghyun Cho", "David Sontag", "Yan Liu" ],
    "emails" : [ "zche@usc.edu", "spurusho@usc.edu", "yanliu.cs@usc.edu" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "Multivariate time series data are ubiquitous in many practical applications ranging from health care, geoscience, astronomy, to biology and others. They often inevitably carry missing observations due to various reasons, such as medical events, saving costs, anomalies, inconvenience and so on. It has been noted that these missing values are usually informative missingness (Rubin, 1976), i.e., the missing values and patterns provide rich information about target labels in supervised learning tasks (e.g, time series classification). To illustrate this idea, we show some examples from MIMIC-III, a real world health care dataset in Figure 1. We plot the Pearson correlation coefficient between variable missing rates, which indicates how often the variable is missing in the time series, and the labels of our interests such as mortality and ICD-9 diagnoses. We observe that the missing rate is correlated with the labels, and the missing rates with low rate values are usually highly (either positive or negative) correlated with the labels. These findings demonstrate the usefulness of missingness patterns in solving a prediction task.\nIn the past decades, various approaches have been developed to address missing values in time series (Schafer & Graham, 2002). A simple solution is to omit the missing data and to perform analysis only on the observed data. A variety of methods have been developed to fill in the missing values, such as smoothing or interpolation (Kreindler & Lumsden, 2012), spectral analysis (Mondal & Percival, 2010), kernel methods (Rehfeld et al., 2011), multiple imputation (White et al., 2011),\nand EM algorithm (Garcı́a-Laencina et al., 2010). Schafer & Graham (2002) and references therein provide excellent reviews on related solutions. However, these solutions often result in a twostep process where imputations are disparate from prediction models and missing patterns are not effectively explored, thus leading to suboptimal analyses and predictions (Wells et al., 2013).\nIn the meantime, Recurrent Neural Networks (RNNs), such as Long Short-Term Memory (LSTM) (Hochreiter & Schmidhuber, 1997) and Gated Recurrent Unit (GRU) (Cho et al., 2014), have shown to achieve the state-of-the-art results in many applications with time series or sequential data, including machine translation (Bahdanau et al., 2014; Sutskever et al., 2014) and speech recognition (Hinton et al., 2012). RNNs enjoy several nice properties such as strong prediction performance as well as the ability to capture long-term temporal dependencies and variable-length observations. RNNs for missing data has been studied in earlier works (Bengio & Gingras, 1996; Tresp & Briegel, 1998; Parveen & Green, 2001) and applied for speech recognition and blood-glucose prediction. Recent works (Lipton et al., 2016; Choi et al., 2015) tried to handle missingness in RNNs by concatenating missing entries or timestamps with the input or performing simple imputations. However, there have not been works which model missing patterns into a systematically modified RNN structure for time series classification problems. Exploiting the power of customized RNN models along with the informativeness of missing patterns is a new promising venue to effectively model multivariate time series and is the main motivation behind our work.\nIn this paper, we develop a novel deep learning model based on GRU, namely GRU-D, to effectively exploit two representations of informative missingness patterns, i.e., masking and time interval. Masking informs the model which inputs are observed (or missing), while time interval encapsulates the input observation patterns. Our model captures the observations and their dependencies by applying masking and time interval (using a decay term) to the inputs and network states of GRU, and jointly train all model components using back-propagation. Thus, our model not only captures the long-term temporal dependencies of time series observations but also utilizes the missing patterns to improve the prediction results. Empirical experiments on real-world clinical datasets as well as synthetic datasets demonstrate that our proposed model outperforms strong deep learning models built on GRU with imputation as well as other strong baselines. These experiments show that our proposed method is suitable for many time series classification problems with missing data, and in particular is readily applicable to the predictive tasks in emerging health care applications. Moreover, our method provides useful insights into more general research challenges of time series analysis with missing data beyond classification tasks, including 1) a general deep learning framework to handle time series with missing data, 2) effective solutions to characterize the missing patterns of not missing-completely-at-random time series data such as modeling masking and time interval, and 3) an insightful approach to study the impact of variable missingness on the prediction labels by decay analysis."
    }, {
      "heading" : "2 RNN MODELS FOR TIME SERIES WITH MISSING VARIABLES",
      "text" : "We denote a multivariate time series with D variables of length T as X = (x1,x2, . . . ,xT ) T ∈ RT×D, where for each t ∈ {1, 2, . . . , T}, xt ∈ RD represents the tth observations (a.k.a., measurements) of all variables and xdt denotes the measurement of dth variable of xt. Let st ∈ R denote the time-stamp when the tth observation is obtained and we assume that the first observation is made at\ntime-stamp 0 (i.e., s1 = 0). A time series X could have missing values. We introduce a masking vectormt ∈ {0, 1}D to denote which variables are missing at time step t. The masking vector for xt is given by\nmdt = { 1, if xdt is observed 0, otherwise\nFor each variable d, we also maintain the time interval δdt ∈ R since its last observation as\nδdt =  st − st−1 + δ d t−1, t > 1,m d t−1 = 0\nst − st−1, t > 1,mdt−1 = 1 0, t = 1\nAn example of these notations is illustrated in Figure 2. In this paper, we are interested in the time series classification problem, where we predict the labels ln given the time series data D, where D = {(Xn, sn,Mn,∆n)}Nn=1, andXn = [ x (n) 1 , . . . ,x (n) Tn ] , sn = [ s (n) 1 , . . . , s (n) Tn ] ,Mn =[\nm (n) 1 , . . . ,m (n) Tn ] , ∆n = [ δ (n) 1 , . . . , δ (n) Tn ] , and ln ∈ {1, . . . , L}."
    }, {
      "heading" : "2.1 GRU-RNN FOR TIME SERIES CLASSIFICATION",
      "text" : "We investigate the use of recurrent neural networks (RNN) for time-series classification, as their recursive formulation allow them to handle variable-length sequences naturally. Moreover, RNN shares the same parameters across all time steps which greatly reduces the total number of parameters we need to learn. Among different variants of the RNN, we specifically consider an RNN with gated recurrent units (Cho et al., 2014; Chung et al., 2014), but similar discussion and convolutions are also valid for other RNN models such as LSTM (Hochreiter & Schmidhuber, 1997).\nThe structure of GRU is shown in Figure 3(a). For each jth hidden unit, GRU has a reset gate rjt and an update gate zjt to control the hidden state h j t at each time t. The update functions are shown as follows:\nrt = σ (W rxt +U rht−1 + br) zt = σ (W zxt +Uzht−1 + bz)\nh̃t = tanh (Wxt +U(rt ht−1) + b) ht = (1− zt) ht−1 + zt h̃t where matricesW z,W r,W ,Uz,U r,U and vectors bz, br, b are model parameters. We use σ for element-wise sigmoid function, and for element-wise multiplication. This formulation assumes that all the variables are observed. A sigmoid or soft-max layer is then applied on the output of the GRU layer at the last time step for classification task.\nExisting work on handling missing values lead to three possible solutions with no modification on GRU network structure. One straightforward approach is simply replacing each missing observation\nwith the mean of the variable across the training examples. In the context of GRU, we have\nxdt ← mdtxdt + (1−mdt )x̃d (1)\nwhere x̃d = ∑N n=1 ∑Tn t=1m d t,nx d t,n /∑N n=1 ∑Tn t=1m d t,n. We refer to this approach as GRU-mean.\nA second approach is exploiting the temporal structure in time series. For example, we may assume any missing value is same as its last measurement and use forward imputation (GRU-forward), i.e.,\nxdt ← mdtxdt + (1−mdt )xdt′ (2)\nwhere t′ < t is the last time the d-th variable was observed.\nInstead of explicitly imputing missing values, the third approach simply indicates which variables are missing and how long they have been missing as a part of input, by concatenating the measurement, masking and time interval vectors as\nx (n) t ← [ x (n) t ;m (n) t ; δ (n) t ] (3)\nwhere x(n)t can be either from Equation (1) or (2). We later refer to this approach as GRU-simple.\nSeveral recent works (Lipton et al., 2016; Choi et al., 2015; Pham et al., 2016) use RNNs on EHR data to model diseases and to predict patient diagnosis from health care time series data with irregular time stamps or missing values, but none of them have explicitly attempted to capture and utilize the missing patterns into their RNNs via systematically modified network architectures. Choi et al. (2015) feeds medical codes along with its time stamps into GRU model to predict the next medical event. This feeding time stamps idea is equivalent to the baseline GRU-simple without feeding the masking, which we denote as GRU-simple (interval only). Pham et al. (2016) takes time stamps into LSTM model, and modify its forgetting gate by either time decay and parametric time both from time stamps. However, their non-trainable decay is not that flexible, and the parametric time also does not change RNN model structure and is similar to GRU-simple (interval only). In addition, neither of them consider missing values in time series medical records, and the time stamp input used in these two models is vector for one patient, but not matrix for each input variable of one patient as ours. Lipton et al. (2016) achieves their best performance on diagnosis prediction by feeding masking with zero-filled missing values. Their model is equivalent to GRU-simple without feeding the time interval, and no model structure modification is made for further capturing and utilizing missingness. We denote their best model as GRU-simple (masking only). Conclusively, our GRU-simple baseline can be considered as a generalization from all related RNN models mentioned above and as shown in the experiments these GRU-simple variations have quite close performance.\nThese approaches solve the missing value issue to a certain extent, However, it is known that imputing the missing value with mean or forward imputation cannot distinguish whether missing values are imputed or truly observed. Simply concatenating masking and time interval vectors fails to exploit the temporal structure of missing values. Thus none of them fully utilize missingness in data to achieve desirable performance."
    }, {
      "heading" : "2.2 GRU-D: MODEL WITH TRAINABLE DECAYS",
      "text" : "To fundamentally address the issue of missing values in time series, we notice two important properties of the missing values in time series, especially in health care domains: First, the value of the missing variable tend to be close to some default value if its last observation happens a long time ago. This property usually exists in health care data for human body as homeostasis mechanisms and is considered to be critical for disease diagnosis and treatment (Vodovotz et al., 2013). Second, the influence of the input variables will fade away over time if the variable has been missing for a while. For example, one medical feature in electronic health records (EHRs) is only significant in a certain temporal context (Zhou & Hripcsak, 2007). Therefore we propose a GRU-based model called GRU-D, in which a decay mechanism is designed for the input variables and the hidden states to capture the aforementioned properties. We introduce decay rates in the model to control the decay mechanism by considering the following important factors. First, each input variable in health care time series has its own medical meaning and importance. The decay rates should be flexible to differ from variable to variable based on the underlying properties associated with the variables.\nSecond, as we see lots of missing patterns are informative in prediction tasks, the decay rate should be indicative of such patterns and benefits the prediction tasks. Furthermore, since the missing patterns are unknown and possibly complex, we aim at learning decay rates from the training data rather than being fixed a priori. That is, we model a vector of decay rates γ as\nγt = exp {−max (0,W γδt + bγ)} (4) where W γ and bγ are model parameters that we train jointly with all the other parameters of the GRU. We chose the exponentiated negative rectifier in order to keep each decay rate monotonically decreasing in a reasonable range between 0 and 1. Note that other formulations such as a sigmoid function can be used instead, as long as the resulting decay is monotonic and is in the same range.\nOur proposed GRU-D model incorporates two different trainable decays to utilize the missingness directly with the input feature values and implicitly in the RNN states. First, for a missing variable, we use an input decay γx to decay it over time toward the empirical mean (which we take as a default configuration), instead of using the last observation as it is. Under this assumption, the trainable decay scheme can be readily applied to the measurement vector by\nxdt ← mdtxdt + (1−mdt )γxdtxdt′ + (1−mdt )(1− γxdt )x̃d (5)\nwhere xdt′ is the last observation of the d-th variable (t ′ < t) and x̃d is the empirical mean of the dth variable. When decaying the input variable directly, we constrain W γx to be diagonal, which effectively makes the decay rate of each variable independent from the others. Sometimes the input decay may not fully capture the missing patterns since not all missingness information can be represented in decayed input values. In order to capture richer knowledge from missingness, we also have a hidden state decay γh in GRU-D. Intuitively, this has an effect of decaying the extracted features (GRU hidden states) rather than raw input variables directly. This is implemented by decaying the previous hidden state ht−1 before computing the new hidden state ht as\nht−1 ← γht ht−1, (6) in which case we do not constrain W γh to be diagonal. In addition, we feed the masking vectors (mt) directly into the model. The update functions of GRU-D are\nzt = σ (W zxt +Uzht−1 + V zmt + bz) rt = σ (W rxt +U rht−1 + V rmt + br)\nh̃t = tanh (Wxt +U(rt ht−1) + Vmt + b) ht = (1− zt) ht−1 + zt h̃t where xt and ht−1 are respectively updated by Equation (5) and (6), and V z,V r,V are new parameters for masking vectormt.\nTo validate GRU-D model and demonstrate how it utilizes informative missing patterns, in Figure 4, we show the input decay (γx) plots and hidden decay (γh) histograms for all the variables for predicting mortality on PhysioNet dataset. For input decay, we notice that the decay rate is almost constant for the majority of variables. However, a few variables have large decay which means that the model relies less on the previous observations for prediction. For example, the changes in the variable values of weight, arterial pH, temperature, and respiration rate are known to impact the ICU patients health condition. The hidden decay histograms show the distribution of decay parameters related to each variable. We noticed that the parameters related to variables with smaller missing rate are more spread out. This indicates that the missingness of those variables has more impact on decaying or keeping the hidden states of the models.\nNotice that the decay term can be generalized to LSTM straightforwardly. In practical applications, missing values in time series may contain useful information in a variety of ways. A better model should have the flexibility to capture different missing patterns. In order to demonstrate the capacity of our GRU-D model, we discuss some model variations in Appendix A.2."
    }, {
      "heading" : "3 EXPERIMENTS",
      "text" : ""
    }, {
      "heading" : "3.1 DATASET DESCRIPTIONS AND EXPERIMENTAL DESIGN",
      "text" : "We demonstrate the performance of our proposed models on one synthetic and two real-world health-care datasets1 and compare it to several strong machine learning and deep learning approaches\n1A summary statistics of the three datasets is shown in Appendix A.3.1.\n6: Cholesterol mr: 0.9989 27: TroponinI mr: 0.9984 28: TroponinT mr: 0.9923 3: Albumin mr: 0.9915 0: ALP mr: 0.9888 1: ALT mr: 0.9885 2: AST mr: 0.9885 5: Bilirubin mr: 0.9884 16: Lactate mr: 0.9709 24: SaO2 mr: 0.9705 30: WBC mr: 0.9532\n11: Glucose mr: 0.9528 19: Na mr: 0.9508 18: Mg mr: 0.9507 12: HCO3 mr: 0.9507 4: BUN mr: 0.9496 7: Creatinine mr: 0.9493 22: Platelets mr: 0.9489 15: K mr: 0.9477 13: HCT mr: 0.9338 21: PaO2 mr: 0.9158 20: PaCO2 mr: 0.9157\n32: pH mr: 0.9118 9: FiO2 mr: 0.883 23: RespRate mr: 0.8053 10: GCS mr: 0.7767 26: Temp mr: 0.6915 31: Weight mr: 0.5452 29: Urine mr: 0.5095 17: MAP mr: 0.2141 8: DiasABP mr: 0.2054 25: SysABP mr: 0.2052 14: HR mr: 0.1984\n(a) x-axis, time interval δdt between 0 and 24 hours; y-axis, value of decay rate γxdt between 0 and 1.\n101\n102\n6: Cholesterol mr: 0.9989 27: TroponinI mr: 0.9984 28: TroponinT mr: 0.9923 3: Albumin mr: 0.9915 0: ALP mr: 0.9888 1: ALT mr: 0.9885 2: AST mr: 0.9885 5: Bilirubin mr: 0.9884 16: Lactate mr: 0.9709 24: SaO2 mr: 0.9705 30: WBC mr: 0.9532\n101\n102\n11: Glucose mr: 0.9528 19: Na mr: 0.9508 18: Mg mr: 0.9507 12: HCO3 mr: 0.9507 4: BUN mr: 0.9496 7: Creatinine mr: 0.9493 22: Platelets mr: 0.9489 15: K mr: 0.9477 13: HCT mr: 0.9338 21: PaO2 mr: 0.9158 20: PaCO2 mr: 0.9157\n0.3 0.3\n101\n102\n32: pH mr: 0.9118\n0.3 0.3\n9: FiO2 mr: 0.883\n0.3 0.3\n23: RespRate mr: 0.8053\n0.3 0.3\n10: GCS mr: 0.7767\n0.3 0.3\n26: Temp mr: 0.6915\n0.3 0.3\n31: Weight mr: 0.5452\n0.3 0.3\n29: Urine mr: 0.5095\n0.3 0.3\n17: MAP mr: 0.2141\n0.3 0.3\n8: DiasABP mr: 0.2054\n0.3 0.3\n25: SysABP mr: 0.2052\n0.3 0.3\n14: HR mr: 0.1984\n(b) x-axis, value of decay parameter W γh ; y-axis, count.\nFigure 4: Plots of input decay γxt (top) and histrograms of hidden state decay γht (bottom) of all 33 variables in GRU-D model for predicting mortality on PhysioNet dataset. Variables in green are lab measurements; variables in red are vital signs; mr refers to missing rate.\nin classification tasks. We evaluate our models for different settings such as early prediction and different training sizes and investigate the impact of informative missingness.\nGesture phase segmentation dataset (Gesture) This UCI dataset (Madeo et al., 2013) has multivariate time series features, regularly sampled and with no missing values, for 5 different gesticulations. We extracted 378 time series and generate 4 synthetic datasets for the purpose of understanding model behaviors with different missing patterns. We treat it as multi-class classification task.\nPhysioNet Challenge 2012 dataset (PhysioNet) This dataset, from PhysioNet Challenge 2012 (Silva et al., 2012), is a publicly available collection of multivariate clinical time series from 8000 intensive care unit (ICU) records. Each record is a multivariate time series of roughly 48 hours and contains 33 variables such as Albumin, heart-rate, glucose etc. We used Training Set A subset in our experiments since outcomes (such as in-hospital mortality labels) are publicly available only for this subset. We conduct the following two prediction tasks on this dataset: 1) Mortality task: Predict whether the patient dies in the hospital. There are 554 patients with positive mortality label. We treat this as a binary classification problem. and 2) All 4 tasks: Predict 4 tasks: in-hospital mortality, length-of-stay less than 3 days, whether the patient had a cardiac condition, and whether the patient was recovering from surgery. We treat this as a multi-task classification problem.\nMIMIC-III dataset (MIMIC-III) This public dataset (Johnson et al., 2016) has deidentified clinical care data collected at Beth Israel Deaconess Medical Center from 2001 to 2012. It contains over 58,000 hospital admission records. We extracted 99 time series features from 19714 admission records for 4 modalities including input-events (fluids into patient, e.g., insulin), output-events (fluids out of the patient, e.g., urine), lab-events (lab test results, e.g., pH values) and prescription-events (drugs prescribed by doctors, e.g., aspirin). These modalities are known to be extremely useful for monitoring ICU patients. We only use the first 48 hours data after admission from each time series. We perform following two predictive tasks: 1) Mortality task: Predict whether the patient dies in the hospital after 48 hours. There are 1716 patients with positive mortality label and we perform binary classification. and 2) ICD-9 Code tasks: Predict 20 ICD-9 diagnosis categories (e.g., respiratory system diagnosis) for each admission. We treat this as a multi-task classification problem."
    }, {
      "heading" : "3.2 METHODS AND IMPLEMENTATION DETAILS",
      "text" : "We categorize all evaluated prediction models into three following groups:\n• Non-RNN Baselines (Non-RNN): We evaluate logistic regression (LR), support vector machines (SVM) and Random Forest (RF) which are widely used in health care applications. • RNN Baselines (RNN): We take GRU-mean, GRU-forward, GRU-simple, and LSTM-mean\n(LSTM model with mean-imputation on the missing measurements) as RNN baselines. • Proposed Methods (Proposed): This is our proposed GRU-D model from Section 2.2.\nThe non-RNN baselines cannot handle missing data directly. We carefully design experiments for nonRNN models to capture the informative missingness as much as possible to have fair comparison with the RNN methods. Since non-RNN models only work with fixed length inputs, we regularly sample the time-series data to get a fixed length input and perform imputation to fill in the missing values. Similar to RNN baselines, we can concatenate the masking vector along with the measurements and feed it to non-RNN models. For PhysioNet dataset, we sample the time series on an hourly basis and propagate measurements forward (or backward) in time to fill gaps. For MIMIC-III dataset, we consider two hourly samples (in the first 48 hours) and do forward (or backward) imputation. Our preliminary experiments showed 2-hourly samples obtains better performance than one-hourly samples for MIMIC-III. We report results for both concatenation of input and masking vectors (i.e., SVM/LR/RF-simple) and only input vector without masking (i.e., SVM/LR/RF-forward). We use the scikit-learn (Pedregosa et al., 2011) for the non-RNN model implementation and tune the parameters by cross-validation. We choose RBF kernel for SVM since it performs better than other kernels.\nFor RNN models, we use a one layer RNN to model the sequence, and then apply a soft-max regressor on top of the last hidden state hT to do classification. We use 100 and 64 hidden units in GRU-mean for MIMIC-III and PhysioNet datasets, respectively. All the other RNN models were constructed to have a comparable number of parameters.2 For GRU-simple, we use mean imputation for input as shown in Equation (1). Batch normalization (Ioffe & Szegedy, 2015) and dropout (Srivastava et al., 2014) of rate 0.5 are applied to the top regressor layer. We train all the RNN models with the Adam optimization method (Kingma & Ba, 2014) and use early stopping to find the best weights on the validation dataset. All the input variables are normalized to be 0 mean and 1 standard deviation. We report the results from 5-fold cross validation in terms of area under the ROC curve (AUC score). We provide more detailed comparisons of RNN baselines and variations in Appendix A.3.4 and evaluations on multilayer RNN models in Appendix A.3.5."
    }, {
      "heading" : "3.3 QUANTITATIVE RESULTS",
      "text" : "Exploiting informative missingness on synthetic dataset As illustrated in Figure 1, missing patterns can be useful in solving prediction tasks. A robust model should exploit informative missingness properly and avoid inducing nonexistent relations between missingness and predictions. To evaluate the impact of modeling missingness we conduct experiments on the synthetic Gesture datasets. We process the data in 4 different settings with the same missing rate but different correlations between missing rate and the label. A higher correlation implies more informative missingness. Figure 5 shows the AUC score comparison of three GRU baseline models (GRU-mean, GRU-forward, GRU-simple) and the proposed GRU-D. Since GRU-mean and GRU-forward do not utilize any missingness (i.e., masking or time interval), they perform similarly across all 4 settings. GRU-simple and GRU-D benefit from utilizing the missingness, especially when the correlation is high. Our GRU-D achieves the best performance in all settings, while GRU-simple fails when the correlation is low. The results on synthetic datasets demonstrates that our proposed model can model and distinguish useful missing patterns in data properly compared with baselines.\nPrediction task evaluation on real datasets We evaluate all methods in Section 3.2 on MIMIC-III and PhysioNet datasets. We noticed that dropout in the recurrent layer helps a lot for all RNN models\n2Appendix A.3.2 compares all GRU models tested in the experiments in terms of model size.\non both of the datasets, probably because they contain more input variables and training samples than synthetic dataset. Similar to Gal (2015), we apply dropout rate of 0.3 with same dropout samples at each time step on weights W ,U ,V . Table 2 shows the prediction performance of all the models on mortality task. All models except for random forest improve their performance when they feed missingness indicators along with inputs. The proposed GRU-D achieves the best AUC score on both datasets. We also conduct multi-task classification experiments for all 4 tasks on PhysioNet and 20 ICD-9 code tasks on MIMIC-III using all the GRU models. As shown in Table 1, GRU-D performs best in terms of average AUC score across all tasks and in most of the single tasks."
    }, {
      "heading" : "3.4 DISCUSSIONS",
      "text" : "Online prediction in early stage Although our model is trained on the first 48 hours data and makes prediction at the last time step, it can be used directly to make predictions before it sees all the time series and can make predictions on the fly. This is very useful in applications such as health care, where early decision making is beneficial and critical for patient care. Figure 6 shows the online prediction results for MIMIC-III mortality task. As we can see, AUC is around 0.7 at first 12 hours for all the GRU models and it keeps increasing when longer time series is fed into these models. GRU-D and GRU-simple, which explicitly handle missingness, perform consistently better than the other two methods. In addition, GRU-D outperforms GRU-simple when making predictions given time series of more than 24 hours, and has at least 2.5% higher AUC score after 30 hours. This indicates that GRU-D is able to capture and utilize long-range temporal missing patterns. Furthermore, GRU-D achieves similar prediction performance (i.e., same AUC) as best non-RNN baseline model with less time series data. As shown in the figure, GRU-D has same AUC performance at 36 hours as the best non-RNN baseline model (RF-simple) at 48 hours. This 12 hour improvement of GRU-D over non-RNN baseline is highly significant in hospital settings such as ICU where time-saving critical decisions demands accurate early predictions.\nModel Scalability with growing data size In many practical applications, model scalability with large dataset size is very important. To evaluate the model performance with different training dataset size, we subsample three smaller datasets of 2000 and 10000 admissions from the entire MIMIC-III dataset while keeping the same mortality rate. We compare our proposed models with all GRU baselines and two most competitive non-RNN baselines (SVM-simple, RF-simple) and shows the prediction results in Figure 7. We observe that all models can achieve improved performance given more training samples. However, the improvements of non-RNN baselines are quite limited compared to GRU models, and our GRU-D model achieves the best results on the two larger datasets. These results indicate the performance gap between GRU-D and non-RNN baselines will continue to grow as more data become available."
    }, {
      "heading" : "4 SUMMARY",
      "text" : "In this paper, we proposed novel GRU-based model to effectively handle missing values in multivariate time series data. Our model captures the informative missingness by incorporating masking and time interval directly inside the GRU architecture. Empirical experiments on both synthetic and real-world health care datasets showed promising results and provided insightful findings. In our future work, we will explore deep learning approaches to characterize missing-not-at-random data and we will conduct theoretical analysis to understand the behaviors of existing solutions for missing values."
    }, {
      "heading" : "A APPENDIX",
      "text" : "A.1 INVESTIGATION OF RELATION BETWEEN MISSINGNESS AND LABELS\nIn many time series applications, the pattern of missing variables in the time series is often informative and useful for prediction tasks. Here, we empirically confirm this claim on real health care dataset by investigating the correlation between the missingness and prediction labels (mortality and ICD9 diagnosis categories). We denote the missing rate for a variable d as pdX and calculate it by pdX = 1− 1T ∑T t=1m d t . Note that p d X is dependent on mask vector (m d t ) and number of time steps T . For each prediction task, we compute the Pearson correlation coefficient between pdX and label ` across all the time series. As shown in Figure 1, we observe that on MIMIC-III dataset the missing rates with low rate values are usually highly (either positive or negative) correlated with the labels. The distinct correlation between missingness and labels demonstrates usefulness of missingness patterns in solving prediction tasks."
    }, {
      "heading" : "A.2 GRU-D MODEL VARIATIONS",
      "text" : "In this section, we will discuss some variations of GRU-D model, and also compare some related RNN models which are used for time series with missing data with the proposed model."
    }, {
      "heading" : "A.2.1 GRU MODEL WITH DIFFERENT TRAINABLE DECAYS",
      "text" : "The proposed GRU-D applies trainable decays on both input and hidden state transitions in order to capture the temporal missing patterns explicitly. This decay idea can be straightforwardly generated to other parts inside the GRU models separately or jointly, given different assumptions on the impact of missingness. As comparisons, we also describe and evaluate several modifications of GRU-D model.\nGRU-DI (Figure 8(a)) and GRU-DS (Figure 8(b)) decay only the input and only the hidden state by Equation (5) and (6), respectively. They can be considered as two simplified models of the proposed GRU-D. GRU-DI aims at capturing direct impact of missing values in the data, while GRU-DS captures more indirect impact of missingness. Another intuition comes from this perspective: if an input variable is just missing, we should pay more attention to this missingness; however, if an variable has been missing for a long time and keeps missing, the missingness becomes less important. We can utilize this assumption by decaying the masking. This brings us the model GRU-DM shown in Figure 8(c), where we replace the masking mdt fed into GRU-D in by\nmdt ← mdt + (1−mdt )γmdt (1−mdt ) = mdt + (1−mdt )γmdt (7)\nwhere the equality holds since mdt is either 0 or 1. We decay the masking for each variable independently from others by constrainingW γm to be diagonal."
    }, {
      "heading" : "A.2.2 GRU-IMP: GOAL-ORIENTED IMPUTATION MODEL",
      "text" : "We may alternatively let the GRU-RNN predict the missing values in the next timestep on its own. When missing values occur only during test time, we simply train the model to predict the measurement vector of the next time step as a language model (Mikolov et al., 2010) and use it to fill the missing values during test time. This is unfortunately not applicable for some time series applications such as in health care domains, which also have missing data during training.\nInstead, we propose goal-oriented imputation model here called GRU-IMP, and view missing values as latent variables in a probabilistic graphical model. Given a timeseriesX , we denote all the missing variables by MX and all the observed ones by OX . Then, training a time-series classifier with missing variables becomes equivalent to maximizing the marginalized log-conditional probability of a correct label l, i.e., log p(l|OX). The exact marginalized log-conditional probability is however intractable to compute, and we instead maximize its lowerbound:\nlog p(l|OX) = log ∑ MX p (l|MX ,OX) p (MX |OX) ≥ EMX∼p(MX |OX) log p (l|MX ,OX)\nwhere we assume the distribution over the missing variables at each time step is only conditioned on all the previous observations:\np (MX |OX) = T∏ t=1 mdt=1∏ 1≤d≤D p(xdt |x1:(t−1),m1:(t−1), δ1:(t−1)) (8)\nAlthough this lowerbound is still intractable to compute exactly, we can approximate it by Monte Carlo method, which amounts to sampling the missing variables at each time as the RNN reads the input sequence from the beginning to the end, such that\nxdt ← mdtxdt + (1−mdt )x̃dt (9)\nwhere x̃t ∼ xdt |x1:(t−1),m1:(t−1), δ1:(t−1). By further assuming that x̃t ∼ N ( µt,σ 2 t ) , µt = γt (W xht−1 + bx) and σt = 1, we can use a reparametrization technique widely used in stochastic variational inference (Kingma & Welling, 2013; Rezende et al., 2014) to estimate the gradient of the lowerbound efficiently. During the test time, we simply use the mean of the missing variable, i.e., x̃t = µt, as we have not seen any improvement from Monte Carlo approximation in our preliminary experiments. We view this approach as a goal-oriented imputation method and show its structure in Figure 8(d). The whole model is trained to minimize the classification cross-entropy error `log loss and we take the negative log likelihood of the observed values as a regularizer.\n` = `log loss + λ 1\nN N∑ n=1 1 Tn Tn∑ t=1 ∑D d=1m d t · log p(xdt |µdt , σdt )∑D d=1m d t\n(10)"
    }, {
      "heading" : "A.3 SUPPLEMENTARY EXPERIMENT DETAILS",
      "text" : ""
    }, {
      "heading" : "A.3.1 DATA STATISTICS",
      "text" : "For each of the three datasets used in our experiments, we list the number of samples, the number of input variables, the mean and max number of time steps for all the samples, and the mean of all the variable missing rates in Table 3."
    }, {
      "heading" : "A.3.2 GRU MODEL SIZE COMPARISON",
      "text" : "In order to fairly compare the capacity of all GRU-RNN models, we build each model in proper size so they share similar number of parameters. Table 4 shows the statistics of all GRU-based models for on three datasets. We show the statistics for mortality prediction on the two real datasets, and it’s almost the same for multi-task classifications tasks on these datasets. In addition, having comparable number of parameters also makes all the models have number of iterations and training time close in the same scale in all the experiments."
    }, {
      "heading" : "A.3.3 MULTI-TASK PREDICTION DETAILS",
      "text" : "The RNN models for multi-task learning with m tasks is almost the same as that for binary classification, except that 1) the soft-max prediction layer is replaced by a fully connected layer with n sigmoid logistic functions, and 2) a data-driven prior regularizer (Che et al., 2015), parameterized by comorbidity (co-occurrence) counts in training data, is applied to the prediction layer to improve the classification performance. We show the AUC scores for predicting 20 ICD-9 diagnosis categories on MIMIC-III dataset in Figure 9, and all 4 tasks on PhysioNet dataset in Figure 10. The proposed GRU-D achieves the best average AUC score on both datasets and wins 11 of the 20 ICD-9 prediction tasks."
    }, {
      "heading" : "A.3.4 EMPIRICAL COMPARISON OF MODEL VARIATIONS",
      "text" : "As a thorough empirical comparison, we test all GRU model variations mentioned in Appendix A.2 along with the proposed GRU-D. These include 1) 4 models with trainable decays (GRU-DI, GRU-DS, GRU-DM, GRU-IMP), and 2) two models simplified from GRU-simple (interval only and masking only). The results are shown in Table 5. As we can see, GRU-D performs best among these models."
    }, {
      "heading" : "A.3.5 EVALUATION ON MULTI-LAYER RNNS",
      "text" : "We also conducted experiments on 2-layer RNN models to demonstrate the superiority of our proposed GRU-D models can be generalized to multi-layer RNNs. For all baseline and proposed GRU models, we add one standard GRU layer on top of the baseline or proposed GRU layer. We tested models both with similar number of parameters to single layer models and with more parameters. As shown in Table 6 and 7, our GRU-D model consistently outperforms other baselines in all cases, and models with moderate size perform as good as larger models with more parameters. Compared with 1-layer RNNs, all models with deeper structures perform much better on the large MIMIC-III dataset but no better on the relative small PhysioNet dataset."
    } ],
    "references" : [ {
      "title" : "Neural machine translation by jointly learning to align and translate",
      "author" : [ "REFERENCES Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio" ],
      "venue" : "arXiv preprint arXiv:1409.0473,",
      "citeRegEx" : "Bahdanau et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Bahdanau et al\\.",
      "year" : 2014
    }, {
      "title" : "Recurrent neural networks for missing or asynchronous data",
      "author" : [ "Yoshua Bengio", "Francois Gingras" ],
      "venue" : "Advances in neural information processing systems,",
      "citeRegEx" : "Bengio and Gingras.,? \\Q1996\\E",
      "shortCiteRegEx" : "Bengio and Gingras.",
      "year" : 1996
    }, {
      "title" : "Deep computational phenotyping",
      "author" : [ "Zhengping Che", "David Kale", "Wenzhe Li", "Mohammad Taha Bahadori", "Yan Liu" ],
      "venue" : "In SIGKDD,",
      "citeRegEx" : "Che et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Che et al\\.",
      "year" : 2015
    }, {
      "title" : "Learning phrase representations using rnn encoder-decoder for statistical machine translation",
      "author" : [ "Kyunghyun Cho", "Bart Van Merriënboer", "Caglar Gulcehre", "Dzmitry Bahdanau", "Fethi Bougares", "Holger Schwenk", "Yoshua Bengio" ],
      "venue" : "arXiv preprint arXiv:1406.1078,",
      "citeRegEx" : "Cho et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Cho et al\\.",
      "year" : 2014
    }, {
      "title" : "Doctor ai: Predicting clinical events via recurrent neural networks",
      "author" : [ "Edward Choi", "Mohammad Taha Bahadori", "Jimeng Sun" ],
      "venue" : "arXiv preprint arXiv:1511.05942,",
      "citeRegEx" : "Choi et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Choi et al\\.",
      "year" : 2015
    }, {
      "title" : "Empirical evaluation of gated recurrent neural networks on sequence modeling",
      "author" : [ "Junyoung Chung", "Caglar Gulcehre", "KyungHyun Cho", "Yoshua Bengio" ],
      "venue" : "arXiv preprint arXiv:1412.3555,",
      "citeRegEx" : "Chung et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Chung et al\\.",
      "year" : 2014
    }, {
      "title" : "A theoretically grounded application of dropout in recurrent neural networks",
      "author" : [ "Yarin Gal" ],
      "venue" : "arXiv preprint arXiv:1512.05287,",
      "citeRegEx" : "Gal.,? \\Q2015\\E",
      "shortCiteRegEx" : "Gal.",
      "year" : 2015
    }, {
      "title" : "Pattern classification with missing data: a review",
      "author" : [ "Pedro J Garcı́a-Laencina", "José-Luis Sancho-Gómez", "Anı́bal R Figueiras-Vidal" ],
      "venue" : "Neural Computing and Applications,",
      "citeRegEx" : "Garcı́a.Laencina et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Garcı́a.Laencina et al\\.",
      "year" : 2010
    }, {
      "title" : "Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups",
      "author" : [ "Geoffrey Hinton", "Li Deng", "Dong Yu", "George E Dahl", "Abdel-rahman Mohamed", "Navdeep Jaitly", "Andrew Senior", "Vincent Vanhoucke", "Patrick Nguyen", "Tara N Sainath" ],
      "venue" : "Signal Processing Magazine, IEEE,",
      "citeRegEx" : "Hinton et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Hinton et al\\.",
      "year" : 2012
    }, {
      "title" : "Long short-term memory",
      "author" : [ "Sepp Hochreiter", "Jürgen Schmidhuber" ],
      "venue" : "Neural computation,",
      "citeRegEx" : "Hochreiter and Schmidhuber.,? \\Q1997\\E",
      "shortCiteRegEx" : "Hochreiter and Schmidhuber.",
      "year" : 1997
    }, {
      "title" : "Batch normalization: Accelerating deep network training by reducing internal covariate shift",
      "author" : [ "Sergey Ioffe", "Christian Szegedy" ],
      "venue" : "arXiv preprint arXiv:1502.03167,",
      "citeRegEx" : "Ioffe and Szegedy.,? \\Q2015\\E",
      "shortCiteRegEx" : "Ioffe and Szegedy.",
      "year" : 2015
    }, {
      "title" : "Mimic-iii, a freely accessible critical care database",
      "author" : [ "AEW Johnson", "TJ Pollard", "L Shen", "L Lehman", "M Feng", "M Ghassemi", "B Moody", "P Szolovits", "LA Celi", "RG Mark" ],
      "venue" : "Scientific Data,",
      "citeRegEx" : "Johnson et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Johnson et al\\.",
      "year" : 2016
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "Diederik Kingma", "Jimmy Ba" ],
      "venue" : "arXiv preprint arXiv:1412.6980,",
      "citeRegEx" : "Kingma and Ba.,? \\Q2014\\E",
      "shortCiteRegEx" : "Kingma and Ba.",
      "year" : 2014
    }, {
      "title" : "Auto-encoding variational bayes",
      "author" : [ "Diederik P Kingma", "Max Welling" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Kingma and Welling.,? \\Q2013\\E",
      "shortCiteRegEx" : "Kingma and Welling.",
      "year" : 2013
    }, {
      "title" : "The effects of the irregular sample and missing data in time series analysis. Nonlinear Dynamical Systems Analysis for the Behavioral Sciences",
      "author" : [ "David M Kreindler", "Charles J Lumsden" ],
      "venue" : "Using Real Data,",
      "citeRegEx" : "Kreindler and Lumsden.,? \\Q2012\\E",
      "shortCiteRegEx" : "Kreindler and Lumsden.",
      "year" : 2012
    }, {
      "title" : "Directly modeling missing data in sequences with rnns: Improved classification of clinical time series",
      "author" : [ "Zachary C Lipton", "David C Kale", "Randall Wetzel" ],
      "venue" : "arXiv preprint arXiv:1606.04130,",
      "citeRegEx" : "Lipton et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Lipton et al\\.",
      "year" : 2016
    }, {
      "title" : "Gesture unit segmentation using support vector machines: segmenting gestures from rest positions",
      "author" : [ "Renata CB Madeo", "Clodoaldo AM Lima", "Sarajane M Peres" ],
      "venue" : "In SAC,",
      "citeRegEx" : "Madeo et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Madeo et al\\.",
      "year" : 2013
    }, {
      "title" : "Recurrent neural network based language model",
      "author" : [ "Tomas Mikolov", "Martin Karafiát", "Lukas Burget", "Jan Cernockỳ", "Sanjeev Khudanpur" ],
      "venue" : "In INTERSPEECH,",
      "citeRegEx" : "Mikolov et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2010
    }, {
      "title" : "Wavelet variance analysis for gappy time series",
      "author" : [ "Debashis Mondal", "Donald B Percival" ],
      "venue" : "Annals of the Institute of Statistical Mathematics,",
      "citeRegEx" : "Mondal and Percival.,? \\Q2010\\E",
      "shortCiteRegEx" : "Mondal and Percival.",
      "year" : 2010
    }, {
      "title" : "Speech recognition with missing data using recurrent neural nets",
      "author" : [ "Shahla Parveen", "P Green" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Parveen and Green.,? \\Q2001\\E",
      "shortCiteRegEx" : "Parveen and Green.",
      "year" : 2001
    }, {
      "title" : "Scikit-learn: Machine learning in Python",
      "author" : [ "F. Pedregosa", "G. Varoquaux", "A. Gramfort", "V. Michel", "B. Thirion", "O. Grisel", "M. Blondel", "P. Prettenhofer", "R. Weiss", "V. Dubourg", "J. Vanderplas", "A. Passos", "D. Cournapeau", "M. Brucher", "M. Perrot", "E. Duchesnay" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "Pedregosa et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Pedregosa et al\\.",
      "year" : 2011
    }, {
      "title" : "Deepcare: A deep dynamic memory model for predictive medicine",
      "author" : [ "Trang Pham", "Truyen Tran", "Dinh Phung", "Svetha Venkatesh" ],
      "venue" : "In Advances in Knowledge Discovery and Data",
      "citeRegEx" : "Pham et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Pham et al\\.",
      "year" : 2016
    }, {
      "title" : "Comparison of correlation analysis techniques for irregularly sampled time series",
      "author" : [ "Kira Rehfeld", "Norbert Marwan", "Jobst Heitzig", "Jürgen Kurths" ],
      "venue" : "Nonlinear Processes in Geophysics,",
      "citeRegEx" : "Rehfeld et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Rehfeld et al\\.",
      "year" : 2011
    }, {
      "title" : "Stochastic backpropagation and approximate inference in deep generative models",
      "author" : [ "Danilo Jimenez Rezende", "Shakir Mohamed", "Daan Wierstra" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Rezende et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Rezende et al\\.",
      "year" : 2014
    }, {
      "title" : "Missing data: our view of the state of the art",
      "author" : [ "Joseph L Schafer", "John W Graham" ],
      "venue" : "Psychological methods,",
      "citeRegEx" : "Schafer and Graham.,? \\Q2002\\E",
      "shortCiteRegEx" : "Schafer and Graham.",
      "year" : 2002
    }, {
      "title" : "Predicting in-hospital mortality of icu patients: The physionet/computing in cardiology",
      "author" : [ "Ivanovitch Silva", "Galan Moody", "Daniel J Scott", "Leo A Celi", "Roger G Mark" ],
      "venue" : "In CinC,",
      "citeRegEx" : "Silva et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Silva et al\\.",
      "year" : 2012
    }, {
      "title" : "Dropout: a simple way to prevent neural networks from overfitting",
      "author" : [ "Nitish Srivastava", "Geoffrey E Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov" ],
      "venue" : null,
      "citeRegEx" : "Srivastava et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Srivastava et al\\.",
      "year" : 2014
    }, {
      "title" : "Sequence to sequence learning with neural networks. In Advances in neural information processing",
      "author" : [ "Ilya Sutskever", "Oriol Vinyals", "Quoc VV Le" ],
      "venue" : null,
      "citeRegEx" : "Sutskever et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Sutskever et al\\.",
      "year" : 2014
    }, {
      "title" : "A solution for missing data in recurrent neural networks with an application to blood glucose prediction",
      "author" : [ "Volker Tresp", "Thomas Briegel" ],
      "venue" : null,
      "citeRegEx" : "Tresp and Briegel.,? \\Q1998\\E",
      "shortCiteRegEx" : "Tresp and Briegel.",
      "year" : 1998
    }, {
      "title" : "A systems engineering perspective on homeostasis and disease",
      "author" : [ "Yoram Vodovotz", "Gary An", "Ioannis P Androulakis" ],
      "venue" : "Frontiers in bioengineering and biotechnology,",
      "citeRegEx" : "Vodovotz et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Vodovotz et al\\.",
      "year" : 2013
    }, {
      "title" : "Strategies for handling missing data in electronic health record derived data. EGEMS",
      "author" : [ "Brian J Wells", "Kevin M Chagin", "Amy S Nowacki", "Michael W Kattan" ],
      "venue" : null,
      "citeRegEx" : "Wells et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Wells et al\\.",
      "year" : 2013
    }, {
      "title" : "Multiple imputation using chained equations: issues and guidance for practice",
      "author" : [ "Ian R White", "Patrick Royston", "Angela M Wood" ],
      "venue" : "Statistics in medicine,",
      "citeRegEx" : "White et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "White et al\\.",
      "year" : 2011
    }, {
      "title" : "Temporal reasoning with medical dataa review with emphasis on medical natural language processing",
      "author" : [ "Li Zhou", "George Hripcsak" ],
      "venue" : "Journal of biomedical informatics,",
      "citeRegEx" : "Zhou and Hripcsak.,? \\Q2007\\E",
      "shortCiteRegEx" : "Zhou and Hripcsak.",
      "year" : 2007
    } ],
    "referenceMentions" : [ {
      "referenceID" : 22,
      "context" : "A variety of methods have been developed to fill in the missing values, such as smoothing or interpolation (Kreindler & Lumsden, 2012), spectral analysis (Mondal & Percival, 2010), kernel methods (Rehfeld et al., 2011), multiple imputation (White et al.",
      "startOffset" : 196,
      "endOffset" : 218
    }, {
      "referenceID" : 31,
      "context" : ", 2011), multiple imputation (White et al., 2011),",
      "startOffset" : 29,
      "endOffset" : 49
    }, {
      "referenceID" : 7,
      "context" : "and EM algorithm (Garcı́a-Laencina et al., 2010).",
      "startOffset" : 17,
      "endOffset" : 48
    }, {
      "referenceID" : 30,
      "context" : "However, these solutions often result in a twostep process where imputations are disparate from prediction models and missing patterns are not effectively explored, thus leading to suboptimal analyses and predictions (Wells et al., 2013).",
      "startOffset" : 217,
      "endOffset" : 237
    }, {
      "referenceID" : 3,
      "context" : "In the meantime, Recurrent Neural Networks (RNNs), such as Long Short-Term Memory (LSTM) (Hochreiter & Schmidhuber, 1997) and Gated Recurrent Unit (GRU) (Cho et al., 2014), have shown to achieve the state-of-the-art results in many applications with time series or sequential data, including machine translation (Bahdanau et al.",
      "startOffset" : 153,
      "endOffset" : 171
    }, {
      "referenceID" : 0,
      "context" : ", 2014), have shown to achieve the state-of-the-art results in many applications with time series or sequential data, including machine translation (Bahdanau et al., 2014; Sutskever et al., 2014) and speech recognition (Hinton et al.",
      "startOffset" : 148,
      "endOffset" : 195
    }, {
      "referenceID" : 27,
      "context" : ", 2014), have shown to achieve the state-of-the-art results in many applications with time series or sequential data, including machine translation (Bahdanau et al., 2014; Sutskever et al., 2014) and speech recognition (Hinton et al.",
      "startOffset" : 148,
      "endOffset" : 195
    }, {
      "referenceID" : 8,
      "context" : ", 2014) and speech recognition (Hinton et al., 2012).",
      "startOffset" : 31,
      "endOffset" : 52
    }, {
      "referenceID" : 15,
      "context" : "Recent works (Lipton et al., 2016; Choi et al., 2015) tried to handle missingness in RNNs by concatenating missing entries or timestamps with the input or performing simple imputations.",
      "startOffset" : 13,
      "endOffset" : 53
    }, {
      "referenceID" : 4,
      "context" : "Recent works (Lipton et al., 2016; Choi et al., 2015) tried to handle missingness in RNNs by concatenating missing entries or timestamps with the input or performing simple imputations.",
      "startOffset" : 13,
      "endOffset" : 53
    }, {
      "referenceID" : 4,
      "context" : "and EM algorithm (Garcı́a-Laencina et al., 2010). Schafer & Graham (2002) and references therein provide excellent reviews on related solutions.",
      "startOffset" : 18,
      "endOffset" : 74
    }, {
      "referenceID" : 3,
      "context" : "Among different variants of the RNN, we specifically consider an RNN with gated recurrent units (Cho et al., 2014; Chung et al., 2014), but similar discussion and convolutions are also valid for other RNN models such as LSTM (Hochreiter & Schmidhuber, 1997).",
      "startOffset" : 96,
      "endOffset" : 134
    }, {
      "referenceID" : 5,
      "context" : "Among different variants of the RNN, we specifically consider an RNN with gated recurrent units (Cho et al., 2014; Chung et al., 2014), but similar discussion and convolutions are also valid for other RNN models such as LSTM (Hochreiter & Schmidhuber, 1997).",
      "startOffset" : 96,
      "endOffset" : 134
    }, {
      "referenceID" : 15,
      "context" : "Several recent works (Lipton et al., 2016; Choi et al., 2015; Pham et al., 2016) use RNNs on EHR data to model diseases and to predict patient diagnosis from health care time series data with irregular time stamps or missing values, but none of them have explicitly attempted to capture and utilize the missing patterns into their RNNs via systematically modified network architectures.",
      "startOffset" : 21,
      "endOffset" : 80
    }, {
      "referenceID" : 4,
      "context" : "Several recent works (Lipton et al., 2016; Choi et al., 2015; Pham et al., 2016) use RNNs on EHR data to model diseases and to predict patient diagnosis from health care time series data with irregular time stamps or missing values, but none of them have explicitly attempted to capture and utilize the missing patterns into their RNNs via systematically modified network architectures.",
      "startOffset" : 21,
      "endOffset" : 80
    }, {
      "referenceID" : 21,
      "context" : "Several recent works (Lipton et al., 2016; Choi et al., 2015; Pham et al., 2016) use RNNs on EHR data to model diseases and to predict patient diagnosis from health care time series data with irregular time stamps or missing values, but none of them have explicitly attempted to capture and utilize the missing patterns into their RNNs via systematically modified network architectures.",
      "startOffset" : 21,
      "endOffset" : 80
    }, {
      "referenceID" : 4,
      "context" : ", 2016; Choi et al., 2015; Pham et al., 2016) use RNNs on EHR data to model diseases and to predict patient diagnosis from health care time series data with irregular time stamps or missing values, but none of them have explicitly attempted to capture and utilize the missing patterns into their RNNs via systematically modified network architectures. Choi et al. (2015) feeds medical codes along with its time stamps into GRU model to predict the next medical event.",
      "startOffset" : 8,
      "endOffset" : 371
    }, {
      "referenceID" : 4,
      "context" : ", 2016; Choi et al., 2015; Pham et al., 2016) use RNNs on EHR data to model diseases and to predict patient diagnosis from health care time series data with irregular time stamps or missing values, but none of them have explicitly attempted to capture and utilize the missing patterns into their RNNs via systematically modified network architectures. Choi et al. (2015) feeds medical codes along with its time stamps into GRU model to predict the next medical event. This feeding time stamps idea is equivalent to the baseline GRU-simple without feeding the masking, which we denote as GRU-simple (interval only). Pham et al. (2016) takes time stamps into LSTM model, and modify its forgetting gate by either time decay and parametric time both from time stamps.",
      "startOffset" : 8,
      "endOffset" : 634
    }, {
      "referenceID" : 4,
      "context" : ", 2016; Choi et al., 2015; Pham et al., 2016) use RNNs on EHR data to model diseases and to predict patient diagnosis from health care time series data with irregular time stamps or missing values, but none of them have explicitly attempted to capture and utilize the missing patterns into their RNNs via systematically modified network architectures. Choi et al. (2015) feeds medical codes along with its time stamps into GRU model to predict the next medical event. This feeding time stamps idea is equivalent to the baseline GRU-simple without feeding the masking, which we denote as GRU-simple (interval only). Pham et al. (2016) takes time stamps into LSTM model, and modify its forgetting gate by either time decay and parametric time both from time stamps. However, their non-trainable decay is not that flexible, and the parametric time also does not change RNN model structure and is similar to GRU-simple (interval only). In addition, neither of them consider missing values in time series medical records, and the time stamp input used in these two models is vector for one patient, but not matrix for each input variable of one patient as ours. Lipton et al. (2016) achieves their best performance on diagnosis prediction by feeding masking with zero-filled missing values.",
      "startOffset" : 8,
      "endOffset" : 1178
    }, {
      "referenceID" : 29,
      "context" : "This property usually exists in health care data for human body as homeostasis mechanisms and is considered to be critical for disease diagnosis and treatment (Vodovotz et al., 2013).",
      "startOffset" : 159,
      "endOffset" : 182
    }, {
      "referenceID" : 16,
      "context" : "Gesture phase segmentation dataset (Gesture) This UCI dataset (Madeo et al., 2013) has multivariate time series features, regularly sampled and with no missing values, for 5 different gesticulations.",
      "startOffset" : 62,
      "endOffset" : 82
    }, {
      "referenceID" : 25,
      "context" : "PhysioNet Challenge 2012 dataset (PhysioNet) This dataset, from PhysioNet Challenge 2012 (Silva et al., 2012), is a publicly available collection of multivariate clinical time series from 8000 intensive care unit (ICU) records.",
      "startOffset" : 89,
      "endOffset" : 109
    }, {
      "referenceID" : 11,
      "context" : "MIMIC-III dataset (MIMIC-III) This public dataset (Johnson et al., 2016) has deidentified clinical care data collected at Beth Israel Deaconess Medical Center from 2001 to 2012.",
      "startOffset" : 50,
      "endOffset" : 72
    }, {
      "referenceID" : 20,
      "context" : "We use the scikit-learn (Pedregosa et al., 2011) for the non-RNN model implementation and tune the parameters by cross-validation.",
      "startOffset" : 24,
      "endOffset" : 48
    }, {
      "referenceID" : 26,
      "context" : "Batch normalization (Ioffe & Szegedy, 2015) and dropout (Srivastava et al., 2014) of rate 0.",
      "startOffset" : 56,
      "endOffset" : 81
    }, {
      "referenceID" : 6,
      "context" : "Similar to Gal (2015), we apply dropout rate of 0.",
      "startOffset" : 11,
      "endOffset" : 22
    } ],
    "year" : 2017,
    "abstractText" : "Multivariate time series data in practical applications, such as health care, geoscience, and biology, are characterized by a variety of missing values. In time series prediction and other related tasks, it has been noted that missing values and their missing patterns are often correlated with the target labels, a.k.a., informative missingness. There is very limited work on exploiting the missing patterns for effective imputation and improving prediction performance. In this paper, we develop novel deep learning models, namely GRU-D, as one of the early attempts. GRU-D is based on Gated Recurrent Unit (GRU), a state-of-the-art recurrent neural network. It takes two representations of missing patterns, i.e., masking and time interval, and effectively incorporates them into a deep model architecture so that it not only captures the long-term temporal dependencies in time series, but also utilizes the missing patterns to achieve better prediction results. Experiments of time series classification tasks on real-world clinical datasets (MIMIC-III, PhysioNet) and synthetic datasets demonstrate that our models achieve state-of-the-art performance and provides useful insights for better understanding and utilization of missing values in time series analysis.",
    "creator" : "LaTeX with hyperref package"
  }
}