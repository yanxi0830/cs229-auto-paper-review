{
  "name" : "544.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "A DIFFERENTIABLE PHYSICS ENGINE",
    "authors" : [ "Jonas Degrave", "Michiel Hermans", "Joni Dambre" ],
    "emails" : [ "Jonas.Degrave@UGent.be", "Joni.Dambre@UGent.be", "Francis.wyffels@UGent.be" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "To solve tasks efficiently, robots require an optimization of their control system. This optimization process can be done in automated testbeds (Degrave et al., 2015), but typically these controllers are optimized in simulation. Standard methods to optimize these controllers include particle swarms, reinforcement learning, genetic algorithms and evolutionary strategies. These are all derivative-free methods.\nA recently popular alternative approach is to use deep Q-learning, a reinforcement learning algorithm. This method requires a lot of evaluations in order to train the many parameters (Levine et al., 2016). However, deep learning experience has taught us that optimizing with a gradient is often faster and more efficient. This fact is especially true when there are a lot of parameters, as is common in deep learning. However, in the optimization processes for control systems, the robot is almost exclusively treated as a non-differentiable black box. The reason for this is that the robot in hardware is not differentiable, nor are current physics engines able to provide the gradient of the robot models. The resulting need for derivative-free optimization approaches limits both the optimization speed and the number of parameters in the controllers.\nRecent physics engines, such as mujoco (Todorov et al., 2012), can derive gradients through the model of a robot but rely on a finite difference method to approximate the gradient. Evaluating finite difference approximations, however, requires the same number of model evaluations as the number of states with respect to which is differentiated. Additionally, the gradient is an estimation.\nIn this paper, we suggest an alternative approach, by introducing a differentiable physics engine with analytical gradients. This idea is not novel. It has been done before with spring-damper models in 2D and 3D (Hermans et al., 2014). This technique is also similar to adjoint optimization, a method widely used in various applications such as thermodynamics (Jarny et al., 1991) and fluid\n∗Former member, currently unaffiliated\ndynamics (Iollo et al., 2001). However, modern engines to model robotics are not based on springdamper systems. The most commonly used ones are 3D rigid body engines, which rely on impulsebased velocity stepping methods (Erez et al., 2015). In this paper, we test whether these engines are also differentiable and whether this gradient is computationally tractable. We will show how this method does speed up the optimization process tremendously, and give some examples where we optimize deep learned neural network controllers with millions of parameters."
    }, {
      "heading" : "2 A 3D RIGID BODY ENGINE",
      "text" : "The goal is to implement a modern 3D Rigid body engine, in which parameters can be differentiated with respect to the fitness a robot achieves in a simulation, such that these parameters can be optimized with methods based on gradient descent.\nThe most frequently used simulation tools for model-based robotics, such as PhysX, Bullet, Havok and ODE, go back to MathEngine (Erez et al., 2015). These tools are all 3D rigid body engines, where bodies have 6 degrees of freedom, and the relations between them are defined as constraints. These bodies exert impulses on each other, but their positions are constrained, e.g. to prevent the bodies from penetrating each other. The velocities, positions and constraints of the rigid bodies define a linear complementarity problem (LCP) (Chappuis, 2013), which is then solved using a Gauss-Seidel projection (GSP) method (Jourdan et al., 1998). The solution of this problem are the new velocities of the bodies, which are then integrated by semi-implicit Euler integration to get the new positions (Stewart and Trinkle, 2000). This system is not always numerically stable. Therefore the constraints are usually softened (Catto, 2009).\nThe recent growth of automatic differentiation libraries, such as Theano (Al-Rfou et al., 2016), Caffe (Jia et al., 2014) and Tensorflow (Abadi et al., 2015), has allowed for efficient differentiation of remarkably complex functions before (Degrave et al., 2016). Therefore, we implemented such a physics engine as a mathematical expression in Theano, a software library which does automatic evaluation and differentiation of expressions with a focus on deep learning. The resulting computational graph to evaluate this expression is then compiled for both CPU and GPU. To be able to compile for GPU however, we had to limit our implementation to a restricted set of elementary operations. The range of implementable functions is therefore severely capped. However, since the analytic gradient is determined automatically, the complexity of correctly implementing the differentiation is removed entirely.\nOne of these limitations with this restricted set of operations, is the limited support for conditionals. Therefore we needed to implement our physics engine without branching, as this is not yet available in Theano for GPU. Therefore some sacrifices had to be made. For instance, our system only allows for contact constraints between different spheres or between spheres and the ground plane. Collision detection algorithms for cubes typically have a lot of branching (Mirtich, 1998). However, this sphere based approach can in principle be extended to any other shape (Hubbard, 1996). On the other hand, we did implement a rather accurate model of servo motors, with gain, maximal torque, and maximal velocity parameters.\nAnother design choice was to use rotation matrices rather than the more common quaternions for representing rotations. Consequently, the states of the bodies are larger, but the operations required are matrix multiplications. This design reduced the complexity of the graph. However, cumulative operations on a rotation matrix might move the rotation matrix away from orthogonality. To correct for this, we renormalize our matrix with the update equation (Premerlani and Bizard, 2009):\nA′ = 3A−A ◦ (A ·A)\n2 (1)\nwhere A′ is the renormalized version of the rotation matrix A. ‘◦’ denotes the elementwise multiplication, and ‘·’ the matrix multiplication. These design decisions are the most important aspects of difference with the frequently used simulation tools. In the following section, we will evaluate our physics simulator on some different problems. We take a look at the speed of computation and the number of evaluations required before the parameters of are optimized."
    }, {
      "heading" : "2.1 THROWING A BALL",
      "text" : "To test our engine, we implemented the model of a giant soccer ball in the physics engine, as shown in Fig. 2a. The ball has a 1m diameter, a friction of µ = 1.0 and restitution e = 0.5. The ball starts off at position (0, 0). After 5 s it should be at position (10, 0) with zero velocity v and zero angular velocity ω. We optimized the initial velocity v0 and angular velocity ω0 at time t = 0 s until the errors at t = 5 s are less than 0.01m and 0.01m/s respectively.\nSince the quantity we optimize is only know at the end of the simulation, but we need to optimize the parameters at the beginning of the simulation, we need to backpropagate our error through time (BPTT) (Sutskever, 2013). This approach is similar to the backpropagation through time method used for optimizing recurrent neural networks (RNN). In our case, every time step in the simulation can be seen as one pass through a neural network, which transforms the inputs from this timestep to inputs for the next time step. For finding the gradient, this RNN is unfolded completely, and the gradient can be obtained by differentiating this unfolded structure. This analytic differentiation is done automatically by the Theano library.\nOptimizing the six parameters in v0 and ω0 took only 88 iterations with gradient descent and backpropagation through time. Optimizing this problem with CMA-ES (Hansen, 2006), a state of the art derivative-free optimization method, took 2422 iterations. Even when taking the time to compute the gradient into account, the optimization with gradient descent takes 16.3 s, compared to 59.9 s with CMA-ES. This result shows that gradient-based optimization of kinematic systems can in some cases already outperform gradient-free optimization algorithms from as little as six parameters."
    }, {
      "heading" : "3 POLICY SEARCH",
      "text" : "To evaluate the relevance of our differentiable physics engine, we use a neural network as a general controller for a robot, as shown in Figure 1. We consider a general robot model in a discrete-time dynamical system xt+1 = fph(xt,ut) with a task cost function of l(xt,p), where xt is the state of the system at time t and ut is the input of the system at time t. p provides some freedom in parameterizing the loss. If Xt is the trajectory of the state up to time t − 1, the goal is to find a policy ut = π(Xt) such that we minimize the loss Lπ .\nLπ = T∑ t=0 l(xt,p)\ns.t. xt+1 = fph(xt, π(Xt)) and x0 = xinit (2)\nIn previous research, finding a gradient for this objective has been described as presenting challenges (Mordatch and Todorov, 2014). An approximation to tackle these issues has been discussed in Levine and Koltun (2013).\nWe implement this equation into an automatic differentiation library, ignoring these challenges in finding the analytic gradient altogether. The automatic differentiation library, Theano in our case, analytically derives this equation and compiles code to evaluate both the equation and its gradient.\nWe define our controller as a deep neural network gdeep with weights W. We do not pass all information Xt to this neural network, but only a vector of values st observed by the modeled sensors s(xt). We also provide our network with (some of the) task-specific parameters p′. Finally, we add a recurrent connection to the controller in the previous timestep ht. Therefore, our policy is the following:\nπ(Xt) = gdeep(s(x t),ht,p′ |W)\ns.t. ht = hdeep(s(xt−1),ht−1,p′ |W) and h0 = 0 (3)\nNotice the similarity between equations 2 and 3. Indeed, the equations for recurrent neural networks (RNN) in equation 3 are very similar to the ones of the loss of a physical model in equation 2. Therefore, we optimize this entire system as an RNN unfolded over time, as illustrated in Figure 4. The weights W are optimized with stochastic gradient descent. The gradient required for that is the Jacobian dL/dW, which is found with automatic differentiation software.\nWe have now reduced the problem to a standard deep learning problem. We need to train our network gdeep on a sufficient amount of samples xinit and for a sufficient amount of sampled tasks p in order to get adequate generalization. Standard RNN regularization approaches could also improve this generalization. We reckon that generalization of gdeep to more models fph, in order to ease the transfer of the controller from the model to the real system, is also possible (Hermans et al., 2014), but it is outside the scope of this paper."
    }, {
      "heading" : "3.1 QUADRUPEDAL ROBOT – COMPUTING SPEED",
      "text" : "To verify the speed of our engine, we also implemented a small quadrupedal robot model, as illustrated in Fig. 2b. This model has a total of 81 sensors, e.g. encoders and an inertial measurement unit (IMU). The servo motors are controlled in a closed loop by a small neural network gdeep with a number of parameters, as shown previously in Fig. 4. The gradient is the Jacobian of L, the total traveled distance of the robot in 10 s , differentiated with respect to all the parameters of the controller W. This Jacobian is found by using BPTT and propagating all 10 s back. The time it takes to compute this traveled distance and the accompanying Jacobian is shown in Table 1. We include both the computation time with and without the gradient, i.e. both the forward and backward pass and the forward pass alone. This way, the numbers can be compared to other physics engines, as those only calculate without gradient. Our implementation and our model can probably be made more efficient, and evaluating the gradient can probably be made faster a similar factor.\nWhen only a single controller is optimized, our engine runs more slowly on GPU than on CPU. To tackle this issue, we implemented batch gradient descent, which is commonly used in complex optimization problems. In this case, by batching our robot models, we achieve significant acceleration on GPU. Although backpropagating the gradient through physics slows down the computations by roughly a factor 10, this factor only barely increases with the number of parameters in our controller.\nCombining this with our previous observation that fewer iterations are needed when using gradient descent, our approach can enable the use of gradient descent through physics for highly complex\ndeep neural network controllers with millions of parameters. Also note that by using a batch method, a single GPU can simulate about 864 000 model seconds per day, or 86 400 000 model states. This should be plenty for deep learning. It also means that a single simulation step of a single robot, which includes collision detection, solving the LCP problem, integrating the velocities and backpropagating the gradient through it all, takes about 1ms on average. Without the backpropagation, this process is only about seven times faster."
    }, {
      "heading" : "3.2 4 DEGREE OF FREEDOM ROBOT ARM",
      "text" : "As a first test of optimizing robot controllers, we implemented a four degree of freedom robotic arm, as depicted in Fig. 2c. The bottom of the robot has a 2 degrees of freedom actuated universal joint; the elbow has a 2 degree of freedom actuated joint as well. The arm is 1m long, and has a total mass of 32 kg. The servos have a gain of 30 s−1, a torque of 30Nm and a velocity of 45◦ s−1.\nFor this robot arm, we train controllers for a task with a gradually increasing amount of difficulty. To be able to train our parameters, we have to use a couple of tricks often used in the training of recurrent neural networks.\n• We choose an objective which is evaluated at every time step and then averaged, rather than at specific points of the simulation. This approach vastly increases the number of samples over which the gradient is averaged, which in turn makes the gradient direction more reliable (Sjöberg et al., 1995).\n• The value of the gradient is decreased by a factor α < 1 at every time step. This trick has the effect of a prior. Namely, events further in the past are less important for influencing current events, because intermediate events might diminish their influence altogether. It also improves robustness against exploding gradients (Hermans et al., 2014).\n• We initialize the controller intelligently. We do not want the controller to shake the actuators violently and explore outside the accurate domain of our simulation model. Therefore our controllers are initialized such that they only output zeros at the start of the simulation. The initial policy is the zero policy.\n• We constraint the size of the gradient to an L2-norm of 1. This makes sure that gradients close to discontinuities in the fitness landscape do not push the parameter values too far away, such that everything which was learned is forgotten (Sutskever, 2013)."
    }, {
      "heading" : "3.2.1 REACHING A FIXED POINT",
      "text" : "A first simple task, is to have a small neural net controller learn to move the controller to a certain fixed point in space, at coordinates (0.5m; 0.5m; 0.5m). The objective we minimize for this task, is the distance between the end effector and the target point, averaged over the 8 seconds we simulate our model.\nWe provide the controller with a single sensor input, namely the current distance between the end effector and the target point. Input is not required for this task, as there are solutions for which the motor signals are constant in time. However, this would not necessarily be the optimal approach for minimizing the average distance over time, it only solves the distance at the end of the simulation, but does not minimize the distance during the trajectory to get at the final position.\nAs a controller, we use a dense neural network with 1 input, 2 hidden layers of 128 units with a rectifier activation function, and 4 outputs with an identity activation function. This controller has 17 284 parameters in total. We disabled the recurrent connections ht.\nWe use gradient descent with a batch size of 1 robot for optimization, as the problem is not stochastic in nature. The parameters are optimized with Adam’s rule (Kingma and Ba, 2014) with a learning rate of 0.001. Every update step with this method takes about 5 seconds on CPU. We find that the controller comes within 4 cm of the target in 100 model evaluations, and within 1 cm in 150 model evaluations, which is small compared to the 1m arm of the robot. Moreover, the controller does find a more optimal trajectory which takes into account the sensor information.\nSolving problems like these in fewer iteration steps than the number of parameters, is unfeasible with derivative free methods (Sjöberg et al., 1995). Despite that, we did try to optimize the same\nproblem with CMA-ES. After a week of computing and 60 000 model evaluations, CMA-ES did not show any sign of convergence, as it cannot handle the sheer amount of parameters."
    }, {
      "heading" : "3.2.2 REACHING A RANDOM POINT",
      "text" : "As a second task, we sample a random target point in the reachable space of the end effector. We give this point as input v′ to the controller, and the task is to again minimize the average distance between the end effector and the target point v. Our objective L is this distance averaged over all timesteps.\nAs a controller, we use a dense neural network comparable to the previous section, but this time with 3 inputs. We used 3 hidden layers with 1024 units each, so the controller has 2 107 396 parameters in total. This is not necessary for this task, but we do it like this to demonstrate the power of this approach. In order to train for this task, we use a batch size of 128 robots, such that every update step takes 58 s on GPU. Each simulation takes 8 s with a simulation step of 0.01 s. Therefore, the gradient on the parameters of the controllers has been averaged over 51 200 timesteps at every update step. We update the parameters with Adam’s rule, where we scale the learning rate with the average error achieved in the previous step.\nWe find that it takes 576 update steps before the millions of parameters are optimized, such that the end effector of the robot is on average less than 10 cm of target, 2 563 update steps before the error is less than 5 cm."
    }, {
      "heading" : "3.3 A QUADRUPEDAL ROBOT – REVISITED",
      "text" : "Optimizing a gait for a quadrupedal robot is a problem of a different order, something the authors have extensive experience with (Sproewitz et al., 2013; Degrave et al., 2013; 2015). The problem is way more challenging and allows for a broad range of possible solutions. In nature, we find a wide variety of gaits, from hopping over trotting, walking and galloping. With hand tuning on the robot model shown in Figure 2b, we were able to obtain a trotting motion with an average forward speed of 0.7m/s. We found it tricky to find a gait where the robot did not end up like an upside down turtle, as 75% of the mass of the robot is located in its torso.\nAs a controller for our quadrupedal robot, we use a neural network with 2 input signals st, namely a sine and a cosine signal with a frequency of 1.5Hz. On top of this, we added 2 hidden layers of 128 units and a rectifier activation function. As output layer, we have a dense layer with 8 units and a linear activation function, which has as input both the input layer and the top layer of the hidden layers. In total, this controller has 17 952 parameters. Since the problem is not stochastic in nature, we use a batch size of 1 robot. We initialize the output layer with zero weights, so the robot starts the optimization in a stand still position.\nWe optimize these parameters to maximize the average velocity of the spine over the course of 10 s of time in simulation. This way, the gradient used in the update step is effectively an average of the 1 000 time steps after unrolling the recurrent connections. This objective does not take into account energy use, or other metrics typically employed in robotic problems.\nIn only 500 model evaluations or about 1 hour of optimizing on CPU, the optimization with BPTT comes up with a solution with a speed of 1.17m/s. This solution is a hopping gait, with a summersault every 3 steps1, despite limiting the torque of the servos to 4Nm on this 28.7 kg robot. For more life-like gaits, energy efficiency could be use as a regularization method. Evaluating these improvements are however outside the scope of this paper."
    }, {
      "heading" : "3.3.1 THE INVERTED PENDULUM WITH A CAMERA AS SENSOR",
      "text" : "As a fourth example, we implemented a model of the pendulum-cart system we have in our laboratorium. This pendulum-cart system is used for the classic control task of the underactuated inverted pendulum (Vaccaro, 1995). In this example however, a camera which is set up in front of the system is the only available information for the controller. It therefore has to observe the system it controls using vision. A frame captured by this camera is shown in Figure 3.\n1A video is available at https://goo.gl/5ykZZe\nIn order to build this model, we implemented a differentiable camera in our physics engine. This camera uses a ray-tracing approach to find where it needs to sample from the textures, and uses bilinear interpolation to sample from these textures, similar to the one used for the spatial transform layer (Jaderberg et al., 2015). This interpolation is necessary for making the frame captured by the camera differentiable to the state of the robot with non-zero derivatives.\nWe minimize the distance from the end of the pendulum to the desired point and regularize the speed of the pendulum. The memoryless deep controller receives the current image of the camera, in addition to two images from the past such that it can estimate velocity and acceleration. We observe that a controller with 1,065,888 parameters is able to learn to swing up and keep the pendulum stable after only 2420 episodes of 3 model seconds. The complete optimization process took 15 hours. The resulting controller keeps the pendulum stable for more than one minute2. In order to do this, the controller has learned to interpret the frames it receives from the camera and found a suitable control strategy."
    }, {
      "heading" : "4 DISCUSSION",
      "text" : "Our results show the first prototype of a differentiable physics engine based on similar algorithms as those that are commonly used in modern robotics simulators. When initially addressing the problem, we did not know whether finding the gradient would be computationally tractable, let alone whether evaluating it would be fast enough to be beneficial for optimization. In this paper, we have demonstrated that evaluating the gradient is tractable enough to speed up optimization on problems with as little as six parameters. The speed of this evaluation mainly depends on the complexity of the physics model and only slightly on the number of parameters to optimize. Therefore, our results suggest that this cost is dominated by the gain achieved from the combination of using batch gradient descent and GPU acceleration.\nOptimizing the controller of a robot model with gradient-based optimization is equivalent to optimizing an RNN. After all, the gradient passes through each parameter at every time step. The parameter space is therefore very noisy. Consequently, training the parameters of this controller is a highly non-trivial problem, as it corresponds to training the parameters of an RNN. On top of that, exploding and vanishing signals and gradients cause far more challenging problems compared to feed forward networks.\nIn section 3.2, we already discussed some of the tricks used for optimizing RNNs. Earlier research shows that these methods can be extended to more complicated tasks than the ones discussed here (Hermans et al., 2014; Sutskever, 2013). Hence, we believe that this approach towards learning controllers for robotics applies to more complex problems than the illustrative examples in this paper.\nAll of the results in this paper will largely depend on showing how these controllers will work on the physical counterparts of our models. Nonetheless, we would like to conjecture that to a certain extent, this gradient of a model is close to the gradient of the physical system. The gradient of the model is more susceptible to high-frequency noise introduced by modeling the system, than the imaginary gradient of the system itself. Nonetheless, it contains information which might be indicative, even if it is not perfect. We would theorize that using this noisy gradient is still better than\n2https://twitter.com/317070/status/821062814798331905\noptimizing in the blind and that the transferability to real robots can be improved by evaluating the gradients on batches of (slightly) different robots in (slightly) different situations and averaging the results. This technique has already been applied in (Hermans et al., 2014) as a regularization method to avoid bifurcations during online learning. If the previous proves to be correct, our approach can offer an addition or possibly even an alternative to deep Q-learning for deep neural network controllers in robotics.\nWe can see the use of this extended approach for a broad range of applications in robotics. Not only do we think there are multiple ways where recent advances in deep learning could be applied to robotics more efficiently with a differentiable physics engine, we also see various ways in which this engine could improve existing angles at which robotics are currently approached:\n• In this paper, we added memory by introducing recurrent connections in the neural network controller. We reckon that advanced, recurrent connections such as ones with a memory made out of LSTM cells (Hochreiter and Schmidhuber, 1997) can allow for more powerful controllers than the controllers described in this paper.\n• Using a differentiable physics engine, we reckon that knowledge of a model can be transferred more efficiently into a forward or backward model in the form of a neural network, similar to methods such as used in Johnson et al. (2016) and Dumoulin et al. (2016). By differentiating through an exact model and defining a relevant error on this model, it should be possible to transfer knowledge from a forward or backward model in the differentiable physics engine to a forward or backward neural network model. Neural network models trained this way might be more robust than the ones learned from generated trajectories (Christiano et al., 2016). In turn, this neural model could then be used for faster but approximate evaluation of the model.\n• Although we did not address this in this paper, there is no reason why only control parameters could be differentiated. Hardware parameters of the robot have been optimized the same way before (Jarny et al., 1991; Iollo et al., 2001; Hermans et al., 2014). The authors reckon that the reverse process is also true. A physics engine can provide a strong prior, which can be used for robots to learn (or adjust) their robot models based on their hardware measurements faster than today. You could optimize the model parameters with gradient descent through physics, to have the model better mimic the actual observations.\n• Where adversarial networks are already showing their use in generating image models, we believe adversarial robotics training (ART) will create some inventive ways to design and control robots. Like in generative adversarial nets (GAN) (Goodfellow et al., 2014), where the gradient is pulled through two competing neural networks, the gradient could be pulled through multiple competing robots as well. It would form an interesting approach for swarm robotics, similar to previous results in evolutionary robotics (Sims, 1994; Pfeifer and Bongard, 2006; Cheney et al., 2014), but possibly faster."
    }, {
      "heading" : "5 CONCLUSION",
      "text" : "In this paper, we show it is possible to build a differentiable physics engine. We implemented a modern engine which can run a 3D rigid body model, using the same algorithm as other engines commonly used to simulate robots, but we can additionally differentiate control parameters with BPTT. Our implementation also runs on GPU, and we show that using GPUs to simulate the physics can speed up the process for large batches of robots. We show that even complex sensors such as cameras, can be implemented and differentiated through, allowing for computer vision to be learned together with a control policy.\nWe find that these gradients can be computed fast enough for use in applications. We also show that using gradient descent with BPTT speeds up optimization processes often found in robotics, even for rather small problems, due to the reduced number of model evaluations required. We show that this improvement in speed scales to problems with a lot of parameters. We also show that using this engine, finding policies for robot models can be done faster and in a more straightforward way. This method should allow for a new approach to apply deep learning techniques in robotics."
    }, {
      "heading" : "ACKNOWLEDGMENTS",
      "text" : "Special thanks to David Pfau for pointing out relevant prior art we were previously unaware of, and Iryna Korshunova for proofreading the paper. The research leading to these results has received funding from the Agency for Innovation by Science and Technology in Flanders (IWT). The NVIDIA Corporation donated the GTX 1080 used for this research."
    }, {
      "heading" : "6.2 TABLES",
      "text" : ""
    } ],
    "references" : [ {
      "title" : "TensorFlow: Large-scale machine learning on",
      "author" : [ "M. Abadi", "A. Agarwal", "P. Barham", "E. Brevdo", "Z. Chen", "C. Citro", "G.S. Corrado", "A. Davis", "J. Dean", "M. Devin", "S. Ghemawat", "I. Goodfellow", "A. Harp", "G. Irving", "M. Isard", "Y. Jia", "R. Jozefowicz", "L. Kaiser", "M. Kudlur", "J. Levenberg", "D. Mané", "R. Monga", "S. Moore", "D. Murray", "C. Olah", "M. Schuster", "J. Shlens", "B. Steiner", "I. Sutskever", "K. Talwar", "P. Tucker", "V. Vanhoucke", "V. Vasudevan", "F. Viégas", "O. Vinyals", "P. Warden", "M. Wattenberg", "M. Wicke", "Y. Yu", "X. Zheng" ],
      "venue" : null,
      "citeRegEx" : "Abadi et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Abadi et al\\.",
      "year" : 2015
    }, {
      "title" : "Theano: A Python framework for fast computation of mathematical expressions",
      "author" : [ "C. Raffel", "D. Renshaw", "M. Rocklin", "A. Romero", "M. Roth", "P. Sadowski", "J. Salvatier", "F. Savard", "J. Schlüter", "J. Schulman", "G. Schwartz", "I.V. Serban", "D. Serdyuk", "S. Shabanian", "E. Simon", "S. Spieckermann", "S.R. Subramanyam", "J. Sygnowski", "J. Tanguay", "G. van Tulder", "J. Turian", "S. Urban", "P. Vincent", "F. Visin", "H. de Vries", "D. Warde-Farley", "D.J. Webb", "M. Willson", "K. Xu", "L. Xue", "L. Yao", "S. Zhang", "Y. Zhang" ],
      "venue" : null,
      "citeRegEx" : "Raffel et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Raffel et al\\.",
      "year" : 2016
    }, {
      "title" : "Modeling and solving constraints",
      "author" : [ "E. Catto" ],
      "venue" : "In Game Developers Conference",
      "citeRegEx" : "Catto,? \\Q2009\\E",
      "shortCiteRegEx" : "Catto",
      "year" : 2009
    }, {
      "title" : "Constraints derivation for rigid body simulation in 3D",
      "author" : [ "D. Chappuis" ],
      "venue" : null,
      "citeRegEx" : "Chappuis,? \\Q2013\\E",
      "shortCiteRegEx" : "Chappuis",
      "year" : 2013
    }, {
      "title" : "Evolved electrophysiological soft robots",
      "author" : [ "N. Cheney", "J. Clune", "H. Lipson" ],
      "venue" : "In ALIFE,",
      "citeRegEx" : "Cheney et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Cheney et al\\.",
      "year" : 2014
    }, {
      "title" : "Transfer from simulation to real world through learning deep inverse dynamics model",
      "author" : [ "P. Christiano", "Z. Shah", "I. Mordatch", "J. Schneider", "T. Blackwell", "J. Tobin", "P. Abbeel", "W. Zaremba" ],
      "venue" : "arXiv preprint arXiv:1610.03518",
      "citeRegEx" : "Christiano et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Christiano et al\\.",
      "year" : 2016
    }, {
      "title" : "Transfer learning of gaits on a quadrupedal robot",
      "author" : [ "J. Degrave", "M. Burm", "Kindermans", "P.-J", "J. Dambre", "F. wyffels" ],
      "venue" : "Adaptive Behavior,",
      "citeRegEx" : "Degrave et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Degrave et al\\.",
      "year" : 2015
    }, {
      "title" : "Comparing trotting and turning strategies on the quadrupedal oncilla robot",
      "author" : [ "J. Degrave", "M. Burm", "T. Waegeman", "F. Wyffels", "B. Schrauwen" ],
      "venue" : "In Robotics and Biomimetics (ROBIO),",
      "citeRegEx" : "Degrave et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Degrave et al\\.",
      "year" : 2013
    }, {
      "title" : "Spatial chirp-Z transformer networks",
      "author" : [ "J. Degrave", "S. Dieleman", "J. Dambre", "F. wyffels" ],
      "venue" : "In European Symposium on Artificial Neural Networks (ESANN)",
      "citeRegEx" : "Degrave et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Degrave et al\\.",
      "year" : 2016
    }, {
      "title" : "A learned representation for artistic style. CoRR, abs/1610.07629",
      "author" : [ "V. Dumoulin", "J. Shlens", "M. Kudlur" ],
      "venue" : null,
      "citeRegEx" : "Dumoulin et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Dumoulin et al\\.",
      "year" : 2016
    }, {
      "title" : "Simulation tools for model-based robotics: Comparison of bullet, havok, mujoco, ode and physx",
      "author" : [ "T. Erez", "Y. Tassa", "E. Todorov" ],
      "venue" : "In International Conference on Robotics and Automation (ICRA),",
      "citeRegEx" : "Erez et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Erez et al\\.",
      "year" : 2015
    }, {
      "title" : "Generative adversarial nets",
      "author" : [ "I. Goodfellow", "J. Pouget-Abadie", "M. Mirza", "B. Xu", "D. Warde-Farley", "S. Ozair", "A. Courville", "Y. Bengio" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Goodfellow et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Goodfellow et al\\.",
      "year" : 2014
    }, {
      "title" : "The cma evolution strategy: a comparing review",
      "author" : [ "N. Hansen" ],
      "venue" : null,
      "citeRegEx" : "Hansen,? \\Q2006\\E",
      "shortCiteRegEx" : "Hansen",
      "year" : 2006
    }, {
      "title" : "Automated design of complex dynamic systems",
      "author" : [ "M. Hermans", "B. Schrauwen", "P. Bienstman", "J. Dambre" ],
      "venue" : "PloS one,",
      "citeRegEx" : "Hermans et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Hermans et al\\.",
      "year" : 2014
    }, {
      "title" : "Long short-term memory",
      "author" : [ "S. Hochreiter", "J. Schmidhuber" ],
      "venue" : "Neural computation,",
      "citeRegEx" : "Hochreiter and Schmidhuber,? \\Q1997\\E",
      "shortCiteRegEx" : "Hochreiter and Schmidhuber",
      "year" : 1997
    }, {
      "title" : "Approximating polyhedra with spheres for time-critical collision detection",
      "author" : [ "P.M. Hubbard" ],
      "venue" : "ACM Transactions on Graphics (TOG),",
      "citeRegEx" : "Hubbard,? \\Q1996\\E",
      "shortCiteRegEx" : "Hubbard",
      "year" : 1996
    }, {
      "title" : "An aerodynamic optimization method based on the inverse problem adjoint equations",
      "author" : [ "A. Iollo", "M. Ferlauto", "L. Zannetti" ],
      "venue" : "Journal of Computational Physics,",
      "citeRegEx" : "Iollo et al\\.,? \\Q2001\\E",
      "shortCiteRegEx" : "Iollo et al\\.",
      "year" : 2001
    }, {
      "title" : "Spatial transformer networks",
      "author" : [ "M. Jaderberg", "K. Simonyan", "A Zisserman" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Jaderberg et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Jaderberg et al\\.",
      "year" : 2015
    }, {
      "title" : "A general optimization method using adjoint equation for solving multidimensional inverse heat conduction",
      "author" : [ "Y. Jarny", "M. Ozisik", "J. Bardon" ],
      "venue" : "International journal of heat and mass transfer,",
      "citeRegEx" : "Jarny et al\\.,? \\Q1991\\E",
      "shortCiteRegEx" : "Jarny et al\\.",
      "year" : 1991
    }, {
      "title" : "Caffe: Convolutional architecture for fast feature embedding",
      "author" : [ "Y. Jia", "E. Shelhamer", "J. Donahue", "S. Karayev", "J. Long", "R. Girshick", "S. Guadarrama", "T. Darrell" ],
      "venue" : "arXiv preprint arXiv:1408.5093",
      "citeRegEx" : "Jia et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Jia et al\\.",
      "year" : 2014
    }, {
      "title" : "Perceptual losses for real-time style transfer and super-resolution",
      "author" : [ "J. Johnson", "A. Alahi", "L. Fei-Fei" ],
      "venue" : "arXiv preprint arXiv:1603.08155",
      "citeRegEx" : "Johnson et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Johnson et al\\.",
      "year" : 2016
    }, {
      "title" : "A gauss-seidel like algorithm to solve frictional contact problems. Computer methods in applied mechanics and engineering, 155(1):31–47",
      "author" : [ "F. Jourdan", "P. Alart", "M. Jean" ],
      "venue" : null,
      "citeRegEx" : "Jourdan et al\\.,? \\Q1998\\E",
      "shortCiteRegEx" : "Jourdan et al\\.",
      "year" : 1998
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "D.P. Kingma", "J. Ba" ],
      "venue" : "Proceedings of the 3rd International Conference on Learning Representations (ICLR)",
      "citeRegEx" : "Kingma and Ba,? \\Q2014\\E",
      "shortCiteRegEx" : "Kingma and Ba",
      "year" : 2014
    }, {
      "title" : "Variational policy search via trajectory optimization",
      "author" : [ "S. Levine", "V. Koltun" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Levine and Koltun,? \\Q2013\\E",
      "shortCiteRegEx" : "Levine and Koltun",
      "year" : 2013
    }, {
      "title" : "Learning hand-eye coordination for robotic grasping with deep learning and large-scale data collection",
      "author" : [ "S. Levine", "P. Pastor", "A. Krizhevsky", "D. Quillen" ],
      "venue" : "arXiv preprint arXiv:1603.02199",
      "citeRegEx" : "Levine et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Levine et al\\.",
      "year" : 2016
    }, {
      "title" : "V-clip: Fast and robust polyhedral collision detection",
      "author" : [ "B. Mirtich" ],
      "venue" : "ACM Transactions On Graphics (TOG),",
      "citeRegEx" : "Mirtich,? \\Q1998\\E",
      "shortCiteRegEx" : "Mirtich",
      "year" : 1998
    }, {
      "title" : "Combining the benefits of function approximation and trajectory optimization",
      "author" : [ "I. Mordatch", "E. Todorov" ],
      "venue" : "In Robotics: Science and Systems (RSS)",
      "citeRegEx" : "Mordatch and Todorov,? \\Q2014\\E",
      "shortCiteRegEx" : "Mordatch and Todorov",
      "year" : 2014
    }, {
      "title" : "How the body shapes the way we think: a new view of intelligence",
      "author" : [ "R. Pfeifer", "J. Bongard" ],
      "venue" : null,
      "citeRegEx" : "Pfeifer and Bongard,? \\Q2006\\E",
      "shortCiteRegEx" : "Pfeifer and Bongard",
      "year" : 2006
    }, {
      "title" : "Direction cosine matrix IMU: Theory",
      "author" : [ "W. Premerlani", "P. Bizard" ],
      "venue" : "DIY DRONE: USA,",
      "citeRegEx" : "Premerlani and Bizard,? \\Q2009\\E",
      "shortCiteRegEx" : "Premerlani and Bizard",
      "year" : 2009
    }, {
      "title" : "Evolving 3d morphology and behavior by competition",
      "author" : [ "K. Sims" ],
      "venue" : "Artificial life,",
      "citeRegEx" : "Sims,? \\Q1994\\E",
      "shortCiteRegEx" : "Sims",
      "year" : 1994
    }, {
      "title" : "Nonlinear black-box modeling in system identification: a unified overview",
      "author" : [ "J. Sjöberg", "Q. Zhang", "L. Ljung", "A. Benveniste", "B. Delyon", "Glorennec", "P.-Y", "H. Hjalmarsson", "A. Juditsky" ],
      "venue" : null,
      "citeRegEx" : "Sjöberg et al\\.,? \\Q1995\\E",
      "shortCiteRegEx" : "Sjöberg et al\\.",
      "year" : 1995
    }, {
      "title" : "Towards dynamically running quadruped robots: performance, scaling, and comparison",
      "author" : [ "A. Sproewitz", "A. Tuleu", "M. D’Haene", "R. Möckel", "J. Degrave", "M. Vespignani", "S. Gay", "M. Ajallooeian", "B. Schrauwen", "A.J. Ijspeert" ],
      "venue" : "In Adaptive Motion of Animals and Machines,",
      "citeRegEx" : "Sproewitz et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Sproewitz et al\\.",
      "year" : 2013
    }, {
      "title" : "An implicit time-stepping scheme for rigid body dynamics with coulomb friction",
      "author" : [ "D. Stewart", "J.C. Trinkle" ],
      "venue" : "In International Conference on Robotics and Automation (ICRA),",
      "citeRegEx" : "Stewart and Trinkle,? \\Q2000\\E",
      "shortCiteRegEx" : "Stewart and Trinkle",
      "year" : 2000
    }, {
      "title" : "Training recurrent neural networks",
      "author" : [ "I. Sutskever" ],
      "venue" : "PhD thesis,",
      "citeRegEx" : "Sutskever,? \\Q2013\\E",
      "shortCiteRegEx" : "Sutskever",
      "year" : 2013
    }, {
      "title" : "Mujoco: A physics engine for model-based control",
      "author" : [ "E. Todorov", "T. Erez", "Y. Tassa" ],
      "venue" : "In 2012 IEEE/RSJ International Conference on Intelligent Robots and Systems,",
      "citeRegEx" : "Todorov et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Todorov et al\\.",
      "year" : 2012
    }, {
      "title" : "Digital control: a state-space approach, volume 196",
      "author" : [ "R.J. Vaccaro" ],
      "venue" : null,
      "citeRegEx" : "Vaccaro,? \\Q1995\\E",
      "shortCiteRegEx" : "Vaccaro",
      "year" : 1995
    } ],
    "referenceMentions" : [ {
      "referenceID" : 6,
      "context" : "This optimization process can be done in automated testbeds (Degrave et al., 2015), but typically these controllers are optimized in simulation.",
      "startOffset" : 60,
      "endOffset" : 82
    }, {
      "referenceID" : 24,
      "context" : "This method requires a lot of evaluations in order to train the many parameters (Levine et al., 2016).",
      "startOffset" : 80,
      "endOffset" : 101
    }, {
      "referenceID" : 34,
      "context" : "Recent physics engines, such as mujoco (Todorov et al., 2012), can derive gradients through the model of a robot but rely on a finite difference method to approximate the gradient.",
      "startOffset" : 39,
      "endOffset" : 61
    }, {
      "referenceID" : 13,
      "context" : "It has been done before with spring-damper models in 2D and 3D (Hermans et al., 2014).",
      "startOffset" : 63,
      "endOffset" : 85
    }, {
      "referenceID" : 18,
      "context" : "This technique is also similar to adjoint optimization, a method widely used in various applications such as thermodynamics (Jarny et al., 1991) and fluid ∗Former member, currently unaffiliated",
      "startOffset" : 124,
      "endOffset" : 144
    }, {
      "referenceID" : 16,
      "context" : "dynamics (Iollo et al., 2001).",
      "startOffset" : 9,
      "endOffset" : 29
    }, {
      "referenceID" : 10,
      "context" : "The most commonly used ones are 3D rigid body engines, which rely on impulsebased velocity stepping methods (Erez et al., 2015).",
      "startOffset" : 108,
      "endOffset" : 127
    }, {
      "referenceID" : 10,
      "context" : "The most frequently used simulation tools for model-based robotics, such as PhysX, Bullet, Havok and ODE, go back to MathEngine (Erez et al., 2015).",
      "startOffset" : 128,
      "endOffset" : 147
    }, {
      "referenceID" : 3,
      "context" : "The velocities, positions and constraints of the rigid bodies define a linear complementarity problem (LCP) (Chappuis, 2013), which is then solved using a Gauss-Seidel projection (GSP) method (Jourdan et al.",
      "startOffset" : 108,
      "endOffset" : 124
    }, {
      "referenceID" : 21,
      "context" : "The velocities, positions and constraints of the rigid bodies define a linear complementarity problem (LCP) (Chappuis, 2013), which is then solved using a Gauss-Seidel projection (GSP) method (Jourdan et al., 1998).",
      "startOffset" : 192,
      "endOffset" : 214
    }, {
      "referenceID" : 32,
      "context" : "The solution of this problem are the new velocities of the bodies, which are then integrated by semi-implicit Euler integration to get the new positions (Stewart and Trinkle, 2000).",
      "startOffset" : 153,
      "endOffset" : 180
    }, {
      "referenceID" : 2,
      "context" : "Therefore the constraints are usually softened (Catto, 2009).",
      "startOffset" : 47,
      "endOffset" : 60
    }, {
      "referenceID" : 19,
      "context" : ", 2016), Caffe (Jia et al., 2014) and Tensorflow (Abadi et al.",
      "startOffset" : 15,
      "endOffset" : 33
    }, {
      "referenceID" : 0,
      "context" : ", 2014) and Tensorflow (Abadi et al., 2015), has allowed for efficient differentiation of remarkably complex functions before (Degrave et al.",
      "startOffset" : 23,
      "endOffset" : 43
    }, {
      "referenceID" : 8,
      "context" : ", 2015), has allowed for efficient differentiation of remarkably complex functions before (Degrave et al., 2016).",
      "startOffset" : 90,
      "endOffset" : 112
    }, {
      "referenceID" : 25,
      "context" : "Collision detection algorithms for cubes typically have a lot of branching (Mirtich, 1998).",
      "startOffset" : 75,
      "endOffset" : 90
    }, {
      "referenceID" : 15,
      "context" : "However, this sphere based approach can in principle be extended to any other shape (Hubbard, 1996).",
      "startOffset" : 84,
      "endOffset" : 99
    }, {
      "referenceID" : 28,
      "context" : "To correct for this, we renormalize our matrix with the update equation (Premerlani and Bizard, 2009):",
      "startOffset" : 72,
      "endOffset" : 101
    }, {
      "referenceID" : 33,
      "context" : "Since the quantity we optimize is only know at the end of the simulation, but we need to optimize the parameters at the beginning of the simulation, we need to backpropagate our error through time (BPTT) (Sutskever, 2013).",
      "startOffset" : 204,
      "endOffset" : 221
    }, {
      "referenceID" : 12,
      "context" : "Optimizing this problem with CMA-ES (Hansen, 2006), a state of the art derivative-free optimization method, took 2422 iterations.",
      "startOffset" : 36,
      "endOffset" : 50
    }, {
      "referenceID" : 26,
      "context" : "In previous research, finding a gradient for this objective has been described as presenting challenges (Mordatch and Todorov, 2014).",
      "startOffset" : 104,
      "endOffset" : 132
    }, {
      "referenceID" : 23,
      "context" : "An approximation to tackle these issues has been discussed in Levine and Koltun (2013). We implement this equation into an automatic differentiation library, ignoring these challenges in finding the analytic gradient altogether.",
      "startOffset" : 62,
      "endOffset" : 87
    }, {
      "referenceID" : 13,
      "context" : "We reckon that generalization of gdeep to more models fph, in order to ease the transfer of the controller from the model to the real system, is also possible (Hermans et al., 2014), but it is outside the scope of this paper.",
      "startOffset" : 159,
      "endOffset" : 181
    }, {
      "referenceID" : 30,
      "context" : "This approach vastly increases the number of samples over which the gradient is averaged, which in turn makes the gradient direction more reliable (Sjöberg et al., 1995).",
      "startOffset" : 147,
      "endOffset" : 169
    }, {
      "referenceID" : 13,
      "context" : "It also improves robustness against exploding gradients (Hermans et al., 2014).",
      "startOffset" : 56,
      "endOffset" : 78
    }, {
      "referenceID" : 33,
      "context" : "This makes sure that gradients close to discontinuities in the fitness landscape do not push the parameter values too far away, such that everything which was learned is forgotten (Sutskever, 2013).",
      "startOffset" : 180,
      "endOffset" : 197
    }, {
      "referenceID" : 22,
      "context" : "The parameters are optimized with Adam’s rule (Kingma and Ba, 2014) with a learning rate of 0.",
      "startOffset" : 46,
      "endOffset" : 67
    }, {
      "referenceID" : 30,
      "context" : "Solving problems like these in fewer iteration steps than the number of parameters, is unfeasible with derivative free methods (Sjöberg et al., 1995).",
      "startOffset" : 127,
      "endOffset" : 149
    }, {
      "referenceID" : 31,
      "context" : "Optimizing a gait for a quadrupedal robot is a problem of a different order, something the authors have extensive experience with (Sproewitz et al., 2013; Degrave et al., 2013; 2015).",
      "startOffset" : 130,
      "endOffset" : 182
    }, {
      "referenceID" : 7,
      "context" : "Optimizing a gait for a quadrupedal robot is a problem of a different order, something the authors have extensive experience with (Sproewitz et al., 2013; Degrave et al., 2013; 2015).",
      "startOffset" : 130,
      "endOffset" : 182
    }, {
      "referenceID" : 35,
      "context" : "This pendulum-cart system is used for the classic control task of the underactuated inverted pendulum (Vaccaro, 1995).",
      "startOffset" : 102,
      "endOffset" : 117
    }, {
      "referenceID" : 17,
      "context" : "This camera uses a ray-tracing approach to find where it needs to sample from the textures, and uses bilinear interpolation to sample from these textures, similar to the one used for the spatial transform layer (Jaderberg et al., 2015).",
      "startOffset" : 211,
      "endOffset" : 235
    }, {
      "referenceID" : 13,
      "context" : "Earlier research shows that these methods can be extended to more complicated tasks than the ones discussed here (Hermans et al., 2014; Sutskever, 2013).",
      "startOffset" : 113,
      "endOffset" : 152
    }, {
      "referenceID" : 33,
      "context" : "Earlier research shows that these methods can be extended to more complicated tasks than the ones discussed here (Hermans et al., 2014; Sutskever, 2013).",
      "startOffset" : 113,
      "endOffset" : 152
    }, {
      "referenceID" : 13,
      "context" : "This technique has already been applied in (Hermans et al., 2014) as a regularization method to avoid bifurcations during online learning.",
      "startOffset" : 43,
      "endOffset" : 65
    }, {
      "referenceID" : 14,
      "context" : "We reckon that advanced, recurrent connections such as ones with a memory made out of LSTM cells (Hochreiter and Schmidhuber, 1997) can allow for more powerful controllers than the controllers described in this paper.",
      "startOffset" : 97,
      "endOffset" : 131
    }, {
      "referenceID" : 5,
      "context" : "Neural network models trained this way might be more robust than the ones learned from generated trajectories (Christiano et al., 2016).",
      "startOffset" : 110,
      "endOffset" : 135
    }, {
      "referenceID" : 18,
      "context" : "Hardware parameters of the robot have been optimized the same way before (Jarny et al., 1991; Iollo et al., 2001; Hermans et al., 2014).",
      "startOffset" : 73,
      "endOffset" : 135
    }, {
      "referenceID" : 16,
      "context" : "Hardware parameters of the robot have been optimized the same way before (Jarny et al., 1991; Iollo et al., 2001; Hermans et al., 2014).",
      "startOffset" : 73,
      "endOffset" : 135
    }, {
      "referenceID" : 13,
      "context" : "Hardware parameters of the robot have been optimized the same way before (Jarny et al., 1991; Iollo et al., 2001; Hermans et al., 2014).",
      "startOffset" : 73,
      "endOffset" : 135
    }, {
      "referenceID" : 11,
      "context" : "Like in generative adversarial nets (GAN) (Goodfellow et al., 2014), where the gradient is pulled through two competing neural networks, the gradient could be pulled through multiple competing robots as well.",
      "startOffset" : 42,
      "endOffset" : 67
    }, {
      "referenceID" : 29,
      "context" : "It would form an interesting approach for swarm robotics, similar to previous results in evolutionary robotics (Sims, 1994; Pfeifer and Bongard, 2006; Cheney et al., 2014), but possibly faster.",
      "startOffset" : 111,
      "endOffset" : 171
    }, {
      "referenceID" : 27,
      "context" : "It would form an interesting approach for swarm robotics, similar to previous results in evolutionary robotics (Sims, 1994; Pfeifer and Bongard, 2006; Cheney et al., 2014), but possibly faster.",
      "startOffset" : 111,
      "endOffset" : 171
    }, {
      "referenceID" : 4,
      "context" : "It would form an interesting approach for swarm robotics, similar to previous results in evolutionary robotics (Sims, 1994; Pfeifer and Bongard, 2006; Cheney et al., 2014), but possibly faster.",
      "startOffset" : 111,
      "endOffset" : 171
    }, {
      "referenceID" : 9,
      "context" : "We reckon that advanced, recurrent connections such as ones with a memory made out of LSTM cells (Hochreiter and Schmidhuber, 1997) can allow for more powerful controllers than the controllers described in this paper. • Using a differentiable physics engine, we reckon that knowledge of a model can be transferred more efficiently into a forward or backward model in the form of a neural network, similar to methods such as used in Johnson et al. (2016) and Dumoulin et al.",
      "startOffset" : 98,
      "endOffset" : 454
    }, {
      "referenceID" : 7,
      "context" : "(2016) and Dumoulin et al. (2016). By differentiating through an exact model and defining a relevant error on this model, it should be possible to transfer knowledge from a forward or backward model in the differentiable physics engine to a forward or backward neural network model.",
      "startOffset" : 11,
      "endOffset" : 34
    } ],
    "year" : 2017,
    "abstractText" : "One of the most important fields in robotics is the optimization of controllers. Currently, robots are often treated as a black box in this optimization process, which is the reason why derivative-free optimization methods such as evolutionary algorithms or reinforcement learning are omnipresent. When gradient-based methods are used, models are kept small or rely on finite difference approximations for the Jacobian. This method quickly grows expensive with increasing numbers of parameters, such as found in deep learning. We propose an implementation of a modern physics engine, which can differentiate control parameters. This engine is implemented for both CPU and GPU. Firstly, this paper shows how such an engine speeds up the optimization process, even for small problems. Furthermore, it explains why this is an alternative approach to deep Q-learning, for using deep learning in robotics. Finally, we argue that this is a big step for deep learning in robotics, as it opens up new possibilities to optimize robots, both in hardware and software.",
    "creator" : "LaTeX with hyperref package"
  }
}