{
  "name" : "305.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "END-TO-END OPTIMIZED IMAGE COMPRESSION",
    "authors" : [ "Johannes Ballé", "Eero P. Simoncelli" ],
    "emails" : [ "johannes.balle@nyu.edu", "valero.laparra@uv.es", "eero.simoncelli@nyu.edu" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "Data compression is a fundamental and well-studied problem in engineering, and is commonly formulated with the goal of designing codes for a given discrete data ensemble with minimal entropy (Shannon, 1948). The solution relies heavily on knowledge of the probabilistic structure of the data, and thus the problem is closely related to probabilistic source modeling. However, since all practical codes must have finite entropy, continuous-valued data (such as vectors of image pixel intensities) must be quantized to a finite set of discrete values, which introduces error. In this context, known as the lossy compression problem, one must trade off two competing costs: the entropy of the discretized representation (rate) and the error arising from the quantization (distortion). Different compression applications, such as data storage or transmission over limited-capacity channels, demand different rate–distortion trade-offs.\nJoint optimization of rate and distortion is difficult. Without further constraints, the general problem of optimal quantization in high-dimensional spaces is intractable (Gersho and Gray, 1992). For this reason, most existing image compression methods operate by linearly transforming the data vector into a suitable continuous-valued representation, quantizing its elements independently, and then encoding the resulting discrete representation using a lossless entropy code (Wintz, 1972; Netravali and Limb, 1980). This scheme is called transform coding due to the central role of the transforma-\n∗JB and EPS are supported by the Howard Hughes Medical Institute.\ntion. For example, JPEG uses a discrete cosine transform on blocks of pixels, and JPEG 2000 uses a multi-scale orthogonal wavelet decomposition. Typically, the three components of transform coding methods – transform, quantizer, and entropy code – are separately optimized (often through manual parameter adjustment).\nWe have developed a framework for end-to-end optimization of an image compression model based on nonlinear transforms (figure 1). Previously, we demonstrated that a model consisting of linear– nonlinear block transformations, optimized for a measure of perceptual distortion, exhibited visually superior performance compared to a model optimized for mean squared error (MSE) (Ballé, Laparra, and Simoncelli, 2016). Here, we optimize for MSE, but use a more flexible transforms built from cascades of linear convolutions and nonlinearities. Specifically, we use a generalized divisive normalization (GDN) joint nonlinearity that is inspired by models of neurons in biological visual systems, and has proven effective in Gaussianizing image densities (Ballé, Laparra, and Simoncelli, 2015). This cascaded transformation is followed by uniform scalar quantization (i.e., each element is rounded to the nearest integer), which effectively implements a parametric form of vector quantization on the original image space. The compressed image is reconstructed from these quantized values using an approximate parametric nonlinear inverse transform.\nFor any desired point along the rate–distortion curve, the parameters of both analysis and synthesis transforms are jointly optimized using stochastic gradient descent. To achieve this in the presence of quantization (which produces zero gradients almost everywhere), we use a proxy loss function based on a continuous relaxation of the probability model, replacing the quantization step with additive uniform noise. The relaxed rate–distortion optimization problem bears some resemblance to those used to fit generative image models, and in particular variational autoencoders (Kingma and Welling, 2014; Rezende, Mohamed, and Wierstra, 2014), but differs in the constraints we impose to ensure that it approximates the discrete problem all along the rate–distortion curve. Finally, rather than reporting differential or discrete entropy estimates, we implement an entropy code and report performance using actual bit rates, thus demonstrating the feasibility of our solution as a complete lossy compression method."
    }, {
      "heading" : "2 CHOICE OF FORWARD, INVERSE, AND PERCEPTUAL TRANSFORMS",
      "text" : "Most compression methods are based on orthogonal linear transforms, chosen to reduce correlations in the data, and thus to simplify entropy coding. But the joint statistics of linear filter responses exhibit strong higher order dependencies. These may be significantly reduced through the use of joint local nonlinear gain control operations (Schwartz and Simoncelli, 2001; Lyu, 2010; Sinz and Bethge, 2013), inspired by models of visual neurons (Heeger, 1992; Carandini and Heeger, 2012). Cascaded versions of such models have been used to capture multiple stages of visual transformation\n(Simoncelli and Heeger, 1998; Mante, Bonin, and Carandini, 2008). Some earlier results suggest that incorporating local normalization in linear block transform coding methods can improve coding performance (Malo et al., 2006), and can improve object recognition performance of cascaded convolutional neural networks (Jarrett et al., 2009). However, the normalization parameters in these cases were not optimized for the task. Here, we make use of a generalized divisive normalization (GDN) transform with optimized parameters, that we have previously shown to be highly efficient in Gaussianizing the local joint statistics of natural images, much more so than cascades of linear transforms followed by pointwise nonlinearities (Ballé, Laparra, and Simoncelli, 2015).\nNote that some training algorithms for deep convolutional networks incorporate “batch normalization”, rescaling the responses of linear filters in the network so as to keep it in a reasonable operating range (Ioffe and Szegedy, 2015). This type of normalization is different from local gain control in that the rescaling factor is identical across all spatial locations. Moreover, once the training is completed, the scaling parameters are typically fixed, which turns the normalization into an affine transformation with respect to the data – unlike GDN, which is spatially adaptive and can be highly nonlinear.\nSpecifically, our analysis transform ga consists of three stages of convolution, subsampling, and divisive normalization. We represent the ith input channel of the kth stage at spatial location (m,n) as u(k)i (m,n). The input image vector x corresponds to u (0) i (m,n), and the output vector y is u (3) i (m,n). Each stage then begins with an affine convolution:\nv (k) i (m,n) = ∑ j ( hk,ij ∗ u(k)j ) (m,n) + ck,i, (1)\nwhere ∗ denotes 2D convolution. This is followed by downsampling:\nw (k) i (m,n) = v (k) i (skm, skn), (2)\nwhere sk is the downsampling factor for stage k. Each stage concludes with a GDN operation:\nu (k+1) i (m,n) = w (k) i (m,n)( βk,i + ∑ j γk,ij ( w (k) j (m,n) )2) 12 . (3) The full set of h, c, β, and γ parameters (across all three stages) constitute the parameter vector φ to be optimized.\nAnalogously, the synthesis transform gs consists of three stages, with the order of operations reversed within each stage, downsampling replaced by upsampling, and GDN replaced by an approximate inverse we call IGDN (more details in the appendix). We define û(k)i (m,n) as the input to the kth synthesis stage, such that ŷ corresponds to û(0)i (m,n), and x̂ to û (3) i (m,n). Each stage then consists of the IGDN operation:\nŵ (k) i (m,n) = û (k) i (m,n) · ( β̂k,i + ∑ j γ̂k,ij ( û (k) j (m,n) )2) 12 , (4)\nwhich is followed by upsampling:\nv̂ (k) i (m,n) =\n{ ŵ\n(k) i (m/ŝk, n/ŝk) if m/ŝk and n/ŝk are integers,\n0 otherwise, (5)\nwhere ŝk is the upsampling factor for stage k. Finally, this is followed by an affine convolution:\nû (k+1) i (m,n) = ∑ j ( ĥk,ij ∗ v̂(k)j ) (m,n) + ĉk,i. (6)\nAnalogously, the set of ĥ, ĉ, β̂, and γ̂ make up the parameter vector θ. Note that the down/upsampling operations can be implemented jointly with their adjacent convolution, improving computational efficiency.\nIn previous work, we used a perceptual transform gp, separately optimized to mimic human judgements of grayscale image distortions (Laparra et al., 2016), and showed that a set of one-stage transforms optimized for this distortion measure led to visually improved results (Ballé, Laparra, and Simoncelli, 2016). Here, we set the perceptual transform gp to the identity, and use mean squared error (MSE) as the metric (i.e., d(z, ẑ) = ‖z − ẑ‖22). This allows a more interpretable comparison to existing methods, which are generally optimized for MSE, and also allows optimization for color images, for which we do not currently have a reliable perceptual metric."
    }, {
      "heading" : "3 OPTIMIZATION OF NONLINEAR TRANSFORM CODING MODEL",
      "text" : "Our objective is to minimize a weighted sum of the rate and distortion, R+λD, over the parameters of the analysis and synthesis transforms and the entropy code, where λ governs the trade-off between the two terms (figure 2, left panel). Rather than attempting optimal quantization directly in the image space, which is intractable due to the high dimensionality, we instead assume a fixed uniform scalar quantizer in the code space, and aim to have the nonlinear transformations warp the space in an appropriate way, effectively implementing a parametric form of vector quantization (figure 1). The actual rates achieved by a properly designed entropy code are only slightly larger than the entropy (Rissanen and Langdon, 1981), and thus we define the objective functional directly in terms of entropy:\nL[ga, gs, Pq] = −E [ log2 Pq ] + λE [ d(z, ẑ) ] , (7)\nwhere both expectations will be approximated by averages over a training set of images. Given a powerful enough set of transformations, we can assume without loss of generality that the quantization bin size is always one and the representing values are at the centers of the bins. That is,\nŷi = qi = round(yi), (8) where index i runs over all elements of the vectors, including channels and spatial locations. The marginal density of ŷi is then given by a train of discrete probability masses (Dirac delta functions, figure 2, right panel) with weights equal to the probability mass function of qi:\nPqi(n) = ∫ n+ 12 n− 12 pyi(t) dt, for all n ∈ Z . (9)\nNote that both terms in (7) depend on the quantized values, and the derivatives of the quantization function (8) are zero almost everywhere, rendering gradient descent ineffective. To allow optimization via stochastic gradient descent, we replace the quantizer with an additive i.i.d. uniform noise\nsource ∆y, which has the same width as the quantization bins (one). This relaxed formulation has two desirable properties. First, the density function of ỹ = y+ ∆y is a continuous relaxation of the probability mass function of q (figure 2, right panel):\npỹ(n) = Pq(n), for all n ∈ ZM , (10) which implies that the differential entropy of ỹ can be used as an approximation of the entropy of q. Second, independent uniform noise approximates quantization error in terms of its marginal moments, and is frequently used as a model of quantization error (Gray and Neuhoff, 1998). We can thus use the same approximation for our measure of distortion. We examine the empirical quality of these rate and distortion approximations in section 4.\nWe assume independent marginals in the code space for both the relaxed probability model of ỹ and the entropy code, and model the marginals pỹi non-parametrically to reduce model error. Specifically, we use finely sampled piecewise linear functions which we update similarly to onedimensional histograms (see appendix). Since pỹi = pyi ∗ U(0, 1) is effectively smoothed by a box-car filter – the uniform density on the unit interval, U(0, 1) – the model error can be made arbitrarily small by decreasing the sampling interval.\nGiven this continuous approximation of the quantized coefficient distribution, the loss function for parameters θ and φ can be written as:\nL(θ,φ) = Ex,∆y [ − ∑ i log2 pỹi(ga(x;φ) + ∆y;ψ (i))\n+ λ d ( gp ( gs(ga(x;φ) + ∆y;θ) ) , gp(x) )] . (11)\nwhere vector ψ(i) parameterizes the piecewise linear approximation of pỹi (trained jointly with θ and ϕ). This is continuous and differentiable, and thus well-suited for stochastic optimization."
    }, {
      "heading" : "3.1 RELATIONSHIP TO VARIATIONAL GENERATIVE IMAGE MODELS",
      "text" : "We derived our formulation directly from the classical rate–distortion optimization problem. However, once the transition to a continuous loss function is made, the optimization problem resembles those encountered in fitting generative models of images, and can more specifically be cast in the context of variational autoencoders (Kingma and Welling, 2014; Rezende, Mohamed, and Wierstra, 2014). In Bayesian variational inference, we are given an ensemble of observations of a random variable x along with a generative model px|y(x|y). We seek to find a posterior py|x(y|x), which generally cannot be expressed in closed form. The approach followed by Kingma and Welling (2014) consists of approximating this posterior with a density q(y|x), by minimizing the Kullback– Leibler divergence between the two:\nDKL [ q‖py|x ] = Ey∼q log q(y|x)− Ey∼q log py|x(y|x) = Ey∼q log q(y|x)− Ey∼q log px|y(x|y)− Ey∼q log py(y) + const. (12)\nThis objective function is equivalent to our relaxed rate–distortion optimization problem, with distortion measured as MSE, if we define the generative model as follows (figure 3):\npx|ỹ(x|ỹ;λ,θ) = N ( x; gs(ỹ;θ), (2λ) −11 ) , (13)\npỹ(ỹ;ψ (0),ψ(1), . . . ) = ∏ i pỹi(ỹi;ψ (i)), (14)\nand the approximate posterior as follows:\nq(ỹ|x;φ) = ∏ i U(ỹi; yi, 1) with y = ga(x;φ), (15)\nwhere U(ỹi; yi, 1) is the uniform density on the unit interval centered on yi. With this, the first term in the Kullback–Leibler divergence is constant; the second term corresponds to the distortion, and the third term corresponds to the rate (both up to additive constants). Note that if a perceptual transform gp is used, or the metric d is not Euclidean, px|ỹ is no longer Gaussian, and equivalence to variational autoencoders cannot be guaranteed, since the distortion term may not correspond to a normalizable density. For any affine and invertible perceptual transform and any translation-invariant metric, it can be shown to correspond to the density\npx|ỹ(x|ỹ;λ,θ) = 1\nZ(λ) exp\n( −λ d ( gp ( gs(ỹ;θ) ) , gp(x) )) , (16)\nwhere Z(λ) normalizes the density (but need not be computed to fit the model).\nDespite the similarity between our nonlinear transform coding framework and that of variational autoencoders, it is worth noting several fundamental differences. First, variational autoencoders are continuous-valued, and digital compression operates in the discrete domain. Comparing differential entropy with (discrete) entropy, or entropy with an actual bit rate, can potentially lead to misleading results. In this paper, we use the continous domain strictly for optimization, and perform the evaluation on actual bit rates, which allows comparison to existing image coding methods. We assess the quality of the rate and distortion approximations empirically.\nSecond, generative models aim to minimize differential entropy of the data ensemble under the model, i.e., explaining fluctuations in the data. This often means minimizing the variance of a “slack” term like (13), which in turn maximizes λ. Transform coding methods, on the other hand, are optimized to achieve the best trade-off between having the model explain the data (which increases rate and decreases distortion), and having the slack term explain the data (which decreases rate and increases distortion). The overall performance of a compression model is determined by the shape of the convex hull of attainable model distortions and rates, over all possible values of the model parameters. Finding this convex hull is equivalent to optimizing the model for particular values of λ (see figure 2). In contrast, generative models operate in a regime where λ is inferred and ideally approaches infinity for noiseless data, which corresponds to the regime of lossless compression. Even so, lossless compression methods still need to operate in a discretized space, typically directly on quantized luminance values. For generative models, the discretization of luminance values is usually considered a nuisance (Theis, van den Oord, and Bethge, 2015), although there are examples of generative models that operate on quantized pixel values (van den Oord, Kalchbrenner, and Kavukcuoglu, 2016).\nFinally, although correspondence between the typical slack term (13) of a generative model (figure 3, left panel) and the distortion metric in rate–distortion optimization holds for simple metrics (e.g., Euclidean distance), a more general perceptual measure would be considered a peculiar choice from a generative modeling perspective, if it corresponds to a density at all."
    }, {
      "heading" : "4 EXPERIMENTAL RESULTS",
      "text" : "We jointly optimized the full set of parameters φ, θ, and all ψ over a subset of the ImageNet database (Deng et al., 2009) consisting of 6507 images using stochastic descent. This optimization was performed separately for each λ, yielding separate transforms and marginal probability models for each value.\nFor the grayscale analysis transform, we used 128 filters (size 9 × 9) in the first stage, each subsampled by a factor of 4 vertically and horizontally. The remaining two stages retain the number of channels, but use filters operating across all input channels (5× 5× 128), with outputs subsampled by a factor of 2 in each dimension. The net output thus has half the dimensionality of the input. The synthesis transform is structured analogously. For RGB images, we trained a separate set of models, with the first stage augmented to operate across three (color) input channels. For the two largest values of λ, and for RGB models, we increased the network capacity by increasing the number of channels in each stage to 256 and 192, respectively. Further details about the parameterization of the transforms and their training can be found in the appendix.\nWe first verified that the continuously-relaxed loss function given in section 3 provides a good approximation to the actual rate–distortion values obtained with quantization (figure 4). The relaxed distortion term appears to be mostly unbiased, and exhibits a relatively small variance. The relaxed (differential) entropy provides a somewhat positively biased estimate of the discrete entropy for the coarser quantization regime, but the bias disappears for finer quantization, as expected. Note that since the values of λ do not have any intrinsic meaning, but serve only to map out the convex hull of optimal points in the rate–distortion plane (figure 2, left panel), a constant bias in either of the terms would simply alter the effective value of λ, with no effect on the compression performance.\nWe compare the rate–distortion performance of our method to two standard methods: JPEG and JPEG 2000. For our method, all images were compressed using uniform quantization (the continuous relaxation using additive noise was used only for training purposes). To make the comparisons more fair, we implemented a simple entropy code based on the context-based adaptive binary arithmetic coding framework (CABAC; Marpe, Schwarz, and Wiegand, 2003). All sideband information needed by the decoder (size of images, value of λ, etc.) was included in the bit stream (see appendix). Note that although the computational costs for training our models are quite high, encoding or decoding an image with the trained models is efficient, requiring only execution of the optimized analysis transformation and quantizer, or the synthesis transformation, respectively. Evaluations were performed on the Kodak image dataset1, an uncompressed set of images commonly used to evaluate image compression methods. We also examined a set of relatively standard (if outdated) images used by the compression community (known by the names “Lena”, “Barbara”, “Peppers”, and “Mandrill”) as well as a set of our own digital photographs. None of these test images was included in the training set. All test images, compressed at a variety of bit rates using all three methods, along with their associated rate–distortion curves, are available online at http://www.cns.nyu.edu/˜lcv/iclr2017.\n1Downloaded from http://www.cipr.rpi.edu/resource/stills/kodak.html\nAlthough we used MSE as a distortion metric for training, the appearance of compressed images is both qualitatively different and substantially improved, compared to JPEG and JPEG 2000. As an example, figure 5 shows an image compressed using our method optimized for a low value of λ (and thus, a low bit rate), compared to JPEG/JPEG 2000 images compressed at equal or greater bit rates. The image compressed with our method has less detail than the original (not shown, but available online), with fine texture and other patterns often eliminated altogether, but this is accomplished in a way that preserves the smoothness of contours and sharpness of many of the edges, giving them a natural appearance. By comparison, the JPEG and JPEG 2000 images exhibit artifacts that are common to all linear transform coding methods: since local features (edges, contours, texture elements,\netc.) are represented using particular combinations of localized linear basis functions, independent scalar quantization of the transform coefficients causes imbalances in these combinations, and leads to visually disturbing blocking, aliasing, and ringing artifacts that reflect the underlying basis functions.\nRemarkably, we find that the perceptual advantages of our method hold for all images tested, and at all bit rates. The progression from high to low bit rates is shown for an example image in figure 6 (additional examples provided in appendix and online). As bit rate is reduced, JPEG and JPEG 2000 degrade their approximation of the original image by coarsening the precision of the coefficients of linear basis functions, thus exposing the visual appearance of those basis functions. On the other hand, our method appears to progressively simplify contours and other image features, effectively concealing the underlying quantization of the representation. Consistent with the appearance of these example images, we find that distortion measured with a perceptual metric (MS-SSIM; Wang, Simoncelli, and Bovik, 2003), indicates substantial improvements across all tested images and bit rates (figure 7; additional examples provided in the appendix and online). Finally, when quantified with PSNR, we find that our method exhibits better rate–distortion performance than both JPEG and JPEG 2000 for most (but not all) test images, especially at the lower bit rates."
    }, {
      "heading" : "5 DISCUSSION",
      "text" : "We have presented a complete image compression method based on nonlinear transform coding, and a framework to optimize it end-to-end for rate–distortion performance. Our compression method offers improvements in rate–distortion performance over JPEG and JPEG 2000 for most images and bit rates. More remarkably, although the method was optimized using mean squared error as a distortion metric, the compressed images are much more natural in appearance than those compressed with JPEG or JPEG 2000, both of which suffer from the severe artifacts commonly seen in linear transform coding methods. Consistent with this, perceptual quality (as estimated with the MS-SSIM index) exhibits substantial improvement across all test images and bit rates. We believe this visual improvement arises because the cascade of biologically-inspired nonlinear transformations in the model have been optimized to capture the features and attributes of images that are represented in the statistics of the data, parallel to the processes of evolution and development that are believed to have shaped visual representations within the human brain (Simoncelli and Olshausen, 2001). Nevertheless, additional visual improvements might be possible if the method were optimized using a perceptual metric in place of MSE (Ballé, Laparra, and Simoncelli, 2016).\nFor comparison to linear transform coding methods, we can interpret our analysis transform as a single-stage linear transform followed by a complex vector quantizer. As in many other optimized representations – e.g., sparse coding (Lewicki and Olshausen, 1998) – as well as many engineered representations – e.g., the steerable pyramid (Simoncelli, Freeman, et al., 1992), curvelets (Candès and Donoho, 2002), and dual-tree complex wavelets (Selesnick, Baraniuk, and Kingsbury, 2005) – the filters in this first stage are localized and oriented and the representation is overcomplete. Whereas most transform coding methods use complete (often orthogonal) linear transforms with spatially separable filters, the overcompleteness and orientation tuning of our initial transform may explain the ability of the model to better represent features and contours with continuously varying orientation, position and scale (Simoncelli, Freeman, et al., 1992).\nOur work is related to two previous publications that optimize image representations with the goal of image compression. Gregor, Besse, et al. (2016) introduce an interesting hierarchical representation of images, in which degradations are more natural looking than those of linear representations. However, rather than optimizing directly for rate–distortion performance, their modeling is generative. Due to the differences between these approaches (as outlined in section 3.1), their procedure of obtaining coding representations from the generative model (scalar quantization, and elimination of hierarchical levels of the representation) is less systematic than our approach and unlikely to be optimal. Further, no entropy code is provided, and the authors therefore resort to comparing entropy estimates to bit rates of established compression methods, which can be unreliable. The model developed by Toderici et al. (2016) is optimized to provide various rate–distortion trade-offs and directly output a binary representation, making it more easily comparable to other image compression methods. Moreover, their formulation has the advantage over ours that a single representation is sought for all rate points. However, it is not clear whether their formulation necessarily leads to rate–distortion optimality (and their empirical results suggest that this is not the case).\nWe are currently testing models that use simpler rectified-linear or sigmoidal nonlinearities, to determine how much of the performance and visual quality of our results is due to use of biologicallyinspired joint nonlinearities. Preliminary results indicate that qualitatively similar results are achievable with other activation functions we tested, but that rectified linear units generally require a substantially larger number of model parameters/stages to achieve the same rate–distortion performance as the GDN/IGDN nonlinearities. This suggests that GDN/IGDN transforms are more efficient for compression, producing better models with fewer stages of processing (as we previously found for density estimation; Ballé, Laparra, and Simoncelli, 2015), which might be an advantage for deployment of our method, say, in embedded systems. However, such conclusions are based on a somewhat limited set of experiments and should at this point be considered provisional. More generally, GDN represents a multivariate generalization of a particular type of sigmoidal function. As such, the observed efficiency advantage relative to pointwise nonlinearities is expected, and a variant of a universal function approximation theorem (e.g., Leshno et al., 1993) should hold.\nThe rate–distortion objective can be seen as a particular instantiation of the general unsupervised learning or density estimation problems. Since the transformation to a discrete representation may be viewed as a form of classification, it is worth considering whether our framework offers any insights that might be transferred to more specific supervised learning problems, such as object recognition. For example, the additive noise used in the objective function as a relaxation of quantization might also serve the purpose of making supervised classification networks more robust to small perturbations, and thus allow them to avoid catastrophic “adversarial” failures that have been demonstrated in previous work (Szegedy et al., 2013). In any case, our results provide a strong example of the power of end-to-end optimization in achieving a new solution to a classical problem."
    }, {
      "heading" : "ACKNOWLEDGMENTS",
      "text" : "We thank Olivier Hénaff and Matthias Bethge for fruitful discussions."
    }, {
      "heading" : "6 APPENDIX",
      "text" : ""
    }, {
      "heading" : "6.1 NETWORK ARCHITECTURE AND OPTIMIZATION",
      "text" : "As described in the main text, our analysis transform consists of three stages of convolution, downsampling, and GDN. The number and size of filters, downsampling factors, and connectivity from layer to layer are provided in figure 8 for the grayscale transforms. The transforms for RGB images and for high bit rates differ slightly in that they have an increased number of channels in each stage. These choices are somewhat ad-hoc, and a more thorough exploration of alternative architectures could potentially lead to significant performance improvements.\nWe have previously shown that GDN is highly efficient in Gaussianizing the local joint statistics of natural images (Ballé, Laparra, and Simoncelli, 2015). Even though Gaussianization is a quite different optimization problem than the rate–distortion objective with the set of constraints defined above, it is similar in that a marginally independent latent model is assumed in both cases. When optimizing for Gaussianization, the exponents in the parametric form of GDN control the tail behavior of the Gaussianized densities. Since tail behavior is less important here, we chose to simplify the functional form, fixing the exponents as well as forcing the weight matrix to be symmetric (i.e., γk,ij = γk,ji).\nThe synthesis transform is meant to function as an approximate inverse transformation, so we construct it by applying a principle known from the LISTA algorithm (Gregor and LeCun, 2010) to the fixed point iteration previously used to invert the GDN transform (Ballé, Laparra, and Simoncelli, 2015). The approximate inverse consists of one iteration, but with a separate set of parameters from the forward transform, which are constrained in the same way, but trained separately. We refer to this nonlinear transform as “inverse GDN” (IGDN).\nThe full model (analysis and synthesis filters, GDN and IGDN parameters) were optimized, for each λ, over a subset of the ImageNet database (Deng et al., 2009) consisting of 6507 images. We applied a number of preprocessing steps to the images in order to reduce artifacts and other unwanted contaminations: first, we eliminated images with excessive saturation. We added a small amount of uniform noise, corresponding to the quantization of pixel values, to the remaining images. Finally, we downsampled and cropped the images to a size of 256 × 256 pixels each, where the amount of downsampling and cropping was randomized, but depended on the size of the original image. In order to reduce high-frequency noise and compression artifacts, we only allowed resampling factors less than 0.75, discarding images that were too small to satisfy this constraint.\nTo ensure efficient and stable optimization, we used the following techniques:\n• We used the Adam optimization algorithm (Kingma and Ba, 2014) to obtain values for the parameters φ and θ, starting with α = 10−4, and subsequently lowering it by a factor of 10 whenever the improvement of both rate and distortion stagnated, until α = 10−7.\n• Linear filters were parameterized using their discrete cosine transform (DCT) coefficients. We found this to be slightly more effective in speeding up the convergence than discrete Fourier transform (DFT) parameterization (Rippel, Snoek, and Adams, 2015).\n• We parameterized the GDN parameters in terms of the elementwise relationship\nβk,i = (β ′ k,i) 2 − 2−10.\nThe squaring ensures that gradients are smaller around parameter values close to 0, a regime in which the optimization can otherwise become unstable. To obtain an unambiguous mapping, we projected each β′k,i onto the interval [2\n−5,∞) after each gradient step. We applied the same treatment to γk,ij , and additionally averaged γ′k,ij with its transpose after each step in order to make it symmetric as explained above. The IGDN parameters were treated in the same way.\n• To remove the scaling ambiguity between the each linear transform and its following nonlinearity (or preceding nonlinearity, in the case of the synthesis transform), we renormalized the linear filters after each gradient step, dividing each filter by the square root of the sum of its squared coefficients. For the analysis transform, the sum runs over space and all input channels, and for the synthesis transform, over space and all output channels.\nWe represented each of the marginals pỹi as a piecewise linear function (i.e., a linear spline), using 10 sampling points per unit interval. The parameter vector ψ(i) consists of the value of pỹi at these sampling points. We did not use Adam to update ψ(i); rather, we used ordinary stochastic gradient descent to minimize the negative expected likelihood:\nLψ(ψ (0),ψ(1), . . . ) = −Eỹ ∑ i pỹi(ỹi;ψ (i)). (17)\nand renormalized the marginal densities after each step. After every 106 gradient steps, we used a heuristic to adapt the range of the spline approximation to cover the range of values of ỹi obtained on the training set."
    }, {
      "heading" : "6.2 ENTROPY CODE",
      "text" : "We implemented an entropy code based on the context-adaptive binary arithmetic coding (CABAC) framework defined by Marpe, Schwarz, and Wiegand (2003). Arithmetic entropy codes are designed to compress discrete-valued data to bit rates closely approaching the entropy of the representation, assuming that the probability model used to design the code describes the data well. The following information was encoded into the bitstream:\n• the size of the image (two 16-bit integers, bypassing arithmetic coding), • whether the image is grayscale or RGB (one bit, bypassing arithmetic coding), • the value of λ (one 16-bit integer, bypassing arithmetic coding), which provides an index\nfor the parameters of the analysis and synthesis transforms as well as the initial probability models for the entropy codes (these are fixed after optimization, and assumed to be available to encoder and decoder).\n• the value of each element of q, iterating over channels, and over space in raster-scan order, using the arithmetic coding engine.\nSince CABAC operates on binary values, the quantized values in q need to be converted to binary decisions. We follow a simple scheme inspired by the encoding of H.264/AVC transform coefficients as detailed by Marpe, Schwarz, and Wiegand (2003). For each qi, we start by testing if the encoded value is equal to the mode of the distribution. If this is the case, the encoding of qi is completed. If not, another binary decision determines whether it is smaller or larger than the mode. Following\nthat, each possible integer value is tested in turn, which yields a bifurcated chain of decisions as illustrated in figure 9. This process is carried out until either one of the binary decisions determines qi, or some minimum (qi,min) or maximum (qi,max) value is reached. In case qi is outside of that range, the difference between it and the range bound is encoded using an exponential Golomb code, bypassing the arithmetic coding engine.\nAdaptive codes, such as CABAC, can potentially further improve bit rates, and to some extent correct model error, by adapting the probability model on-line to the statistics of the data. In our code, this is achieved by sharing the marginal probability model Pqi of each element in q across space within each channel. We derived the initial probability models by subsampling the continuous densities pỹi determined during optimization, as in (10). However, note that due to the simple raster-scan ordering, the coding scheme presented above only crudely exploits spatial adaptation of the probability model compared to existing coding methods such as JPEG 2000 and H.264/AVC. Thus, the performance gains compared to a well-designed non-adaptive entropy code are relatively small (figure 10), and likely smaller than those achieved by the entropy code in JPEG 2000, to which we compare."
    }, {
      "heading" : "6.3 EVALUATION DETAILS AND ADDITIONAL EXAMPLE IMAGES",
      "text" : "Although it is desirable to summarize and compare the rate–distortion behavior of JPEG, JPEG 2000, and our method across an image set, it is difficult to do this in a way that is fair and interpretable. First, rate–distortion behavior varies substantially across bit rates for different images. For example, for the image in figure 12, our method achieves the same MSE with roughly 50% of the bits needed by JPEG 2000 for low rates, and about 30% for high rates. For the image in figure 17, the gains are more modest, although still significant through the range. But for the image in figure 15, our method only slightly outperforms JPEG 2000 at low rates, and under-performs it at high rates. Note that these behaviors are again different for MS-SSIM, which shows a significant improvement for all images and bit rates (consistent with their visual appearance).\nSecond, there is no obvious or agreed-upon method for combining rate–distortion curves across images. More specifically, one must decide which points in the curves to combine. For our method, it is natural to average the MSE and entropy values across images compressed using the same choice of λ, since these are all coded and decoded using exactly the same representation and quantization scheme. For JPEG, it seems natural to average over images coded at the same “quality” setting, which appear to be coded using the same quantization choices. The OpenJPEG implementation of JPEG 2000 we use allows selection of points on the rate–distortion curve either through specification of a target bit rate, or a target quality. This choice has no effect on rate–distortion plots for individual images (verified, but not shown), but has a substantial effect when averaging over images, since the two choices lead one to average over a different set of R-D points. This is illustrated in figure 11. Even if points were selected in exactly the same fashion for each of the methods (say, matched to a given set of target rates), summary plots can still over- or underemphasize high rate vs. low rate performance.\nWe conclude that summaries of rate–distortion are of limited use. Instead, we encourage the reader to browse our extensive collection of test images, with individual rate–distortion plots for each image, available at http://www.cns.nyu.edu/˜lcv/iclr2017 in both grayscale and RGB.\nIn the following pages, we show additional example images, compressed at relatively low bit rates, in order to visualize the qualitative nature of compression artifacts. On each page, the JPEG 2000 image is selected to have the lowest possible bit rate that is equal or greater than the bit rate of the proposed method. In all experiments, we compare to JPEG with 4:2:0 chroma subsampling, and the OpenJPEG implementation of JPEG 2000 with the default “multiple component transform”. For evaluating PSNR, we use the JPEG-defined conversion matrix to convert between RGB and Y’CbCr. For evaluating MS-SSIM (Wang, Simoncelli, and Bovik, 2003), we used only the resulting luma component. Original images are not shown, but are available online, along with compressed images at a variety of other bit rates, at http://www.cns.nyu.edu/˜lcv/iclr2017."
    } ],
    "references" : [ {
      "title" : "Density Modeling of Images Using a Generalized Normalization Transformation",
      "author" : [ "Ballé", "Johannes", "Valero Laparra", "Eero P. Simoncelli" ],
      "venue" : "In: arXiv e-prints. Presented at the 4th Int. Conf. for Learning Representations, 2016. arXiv: 1511.06281.",
      "citeRegEx" : "Ballé et al\\.,? 2015",
      "shortCiteRegEx" : "Ballé et al\\.",
      "year" : 2015
    }, {
      "title" : "New Tight Frames of Curvelets and Optimal Representations of Objects with C Singularities",
      "author" : [ "Candès", "Emmanuel J.", "David L. Donoho" ],
      "venue" : "In: Comm. Pure Appl. Math. 57, pp. 219–266.",
      "citeRegEx" : "Candès et al\\.,? 2002",
      "shortCiteRegEx" : "Candès et al\\.",
      "year" : 2002
    }, {
      "title" : "Normalization as a canonical neural computation",
      "author" : [ "Carandini", "Matteo", "David J. Heeger" ],
      "venue" : "In: Nature Reviews Neuroscience 13. DOI: 10.1038/nrn3136.",
      "citeRegEx" : "Carandini et al\\.,? 2012",
      "shortCiteRegEx" : "Carandini et al\\.",
      "year" : 2012
    }, {
      "title" : "ImageNet: A Large-Scale Hierarchical Image Database",
      "author" : [ "J Deng" ],
      "venue" : "In: IEEE Conf. on Computer Vision and Pattern Recognition. DOI: 10.1109/CVPR.2009.5206848.",
      "citeRegEx" : "Deng,? 2009",
      "shortCiteRegEx" : "Deng",
      "year" : 2009
    }, {
      "title" : "Vector Quantization and Signal Compression",
      "author" : [ "Gersho", "Allen", "Robert M. Gray" ],
      "venue" : "Kluwer. ISBN: 978-0-7923-9181-4.",
      "citeRegEx" : "Gersho et al\\.,? 1992",
      "shortCiteRegEx" : "Gersho et al\\.",
      "year" : 1992
    }, {
      "title" : "Quantization",
      "author" : [ "Gray", "Robert M.", "David L. Neuhoff" ],
      "venue" : "In: IEEE Transactions on Information Theory 44.6. DOI: 10.1109/18.720541.",
      "citeRegEx" : "Gray et al\\.,? 1998",
      "shortCiteRegEx" : "Gray et al\\.",
      "year" : 1998
    }, {
      "title" : "Towards Conceptual Compression",
      "author" : [ "Gregor", "Karol", "Frederic Besse" ],
      "venue" : "arXiv e-prints",
      "citeRegEx" : "Gregor et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Gregor et al\\.",
      "year" : 2016
    }, {
      "title" : "Learning Fast Approximations of Sparse Coding",
      "author" : [ "Gregor", "Karol", "Yann LeCun" ],
      "venue" : "In: Proceedings of the 27th International Conference on Machine Learning.",
      "citeRegEx" : "Gregor et al\\.,? 2010",
      "shortCiteRegEx" : "Gregor et al\\.",
      "year" : 2010
    }, {
      "title" : "Normalization of cell responses in cat striate cortex",
      "author" : [ "Heeger", "David J." ],
      "venue" : "In: Visual Neuroscience 9.2. DOI: 10.1017/S0952523800009640.",
      "citeRegEx" : "Heeger and J.,? 1992",
      "shortCiteRegEx" : "Heeger and J.",
      "year" : 1992
    }, {
      "title" : "Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariance Shift",
      "author" : [ "Ioffe", "Sergey", "Christian Szegedy" ],
      "venue" : "In: arXiv e-prints. arXiv: 1502.03167.",
      "citeRegEx" : "Ioffe et al\\.,? 2015",
      "shortCiteRegEx" : "Ioffe et al\\.",
      "year" : 2015
    }, {
      "title" : "What is the Best Multi-Stage Architecture for Object Recognition?” In: 2009 IEEE 12th International Conference on Computer Vision",
      "author" : [ "Jarrett", "Kevin" ],
      "venue" : "DOI: 10.1109/ICCV.2009. 5459469.",
      "citeRegEx" : "Jarrett and Kevin,? 2009",
      "shortCiteRegEx" : "Jarrett and Kevin",
      "year" : 2009
    }, {
      "title" : "Adam: A Method for Stochastic Optimization",
      "author" : [ "Kingma", "Diederik P.", "Jimmy Lei Ba" ],
      "venue" : "In: arXiv e-prints. Presented at the 3rd Int. Conf. for Learning Representations, 2015. arXiv: 1412.6980. 11",
      "citeRegEx" : "Kingma et al\\.,? 2014",
      "shortCiteRegEx" : "Kingma et al\\.",
      "year" : 2014
    }, {
      "title" : "Auto-Encoding Variational Bayes",
      "author" : [ "Kingma", "Diederik P", "Max Welling" ],
      "venue" : null,
      "citeRegEx" : "Kingma et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Kingma et al\\.",
      "year" : 2014
    }, {
      "title" : "Perceptual image quality assessment using a normalized Laplacian",
      "author" : [ "Laparra", "Valero" ],
      "venue" : null,
      "citeRegEx" : "Laparra and Valero,? \\Q2016\\E",
      "shortCiteRegEx" : "Laparra and Valero",
      "year" : 2016
    }, {
      "title" : "Inferring sparse, overcomplete image codes",
      "author" : [ "Lewicki", "Michael S", "Bruno Olshausen" ],
      "venue" : null,
      "citeRegEx" : "Lewicki et al\\.,? \\Q1998\\E",
      "shortCiteRegEx" : "Lewicki et al\\.",
      "year" : 1998
    }, {
      "title" : "Non-linear image representation for efficient perceptual coding",
      "author" : [ "Malo", "Jesús" ],
      "venue" : "Neural Information Processing Systems",
      "citeRegEx" : "Malo and Jesús,? \\Q2006\\E",
      "shortCiteRegEx" : "Malo and Jesús",
      "year" : 2006
    }, {
      "title" : "Context-Based Adaptive Binary",
      "author" : [ "j.neuron.2008.03.011. Marpe", "Detlev", "Heiko Schwarz", "Thomas Wiegand" ],
      "venue" : null,
      "citeRegEx" : "Marpe et al\\.,? \\Q2003\\E",
      "shortCiteRegEx" : "Marpe et al\\.",
      "year" : 2003
    }, {
      "title" : "Pixel Recurrent Neural",
      "author" : [ "10.1109/PROC.1980.11647. Oord", "Aäron van den", "Nal Kalchbrenner", "Koray Kavukcuoglu" ],
      "venue" : null,
      "citeRegEx" : "68",
      "shortCiteRegEx" : "68",
      "year" : 2016
    }, {
      "title" : "Universal modeling and coding",
      "author" : [ "Rissanen", "Jorma", "Glen G. Langdon Jr." ],
      "venue" : "Neural Networks”",
      "citeRegEx" : "Rissanen et al\\.,? \\Q1981\\E",
      "shortCiteRegEx" : "Rissanen et al\\.",
      "year" : 1981
    }, {
      "title" : "The Dual-Tree Complex",
      "author" : [ "Selesnick", "Ivan W", "Richard G. Baraniuk", "Nick C. Kingsbury" ],
      "venue" : "Nature Neuroscience",
      "citeRegEx" : "Selesnick et al\\.,? \\Q2005\\E",
      "shortCiteRegEx" : "Selesnick et al\\.",
      "year" : 2005
    }, {
      "title" : "A Mathematical Theory of Communication",
      "author" : [ "Shannon", "Claude E" ],
      "venue" : null,
      "citeRegEx" : "1550194",
      "shortCiteRegEx" : "1550194",
      "year" : 1948
    }, {
      "title" : "Shiftable Multiscale Transforms",
      "author" : [ "Eero P", "William T. Freeman" ],
      "venue" : null,
      "citeRegEx" : "Simoncelli et al\\.,? \\Q1992\\E",
      "shortCiteRegEx" : "Simoncelli et al\\.",
      "year" : 1992
    }, {
      "title" : "What Is the Limit of Redundancy Reduction with Divi",
      "author" : [ "Sinz", "Fabian", "Matthias Bethge" ],
      "venue" : null,
      "citeRegEx" : "1193",
      "shortCiteRegEx" : "1193",
      "year" : 2013
    }, {
      "title" : "A note on the evaluation",
      "author" : [ "6199. Theis", "Lucas", "Aäron van den Oord", "Matthias Bethge" ],
      "venue" : null,
      "citeRegEx" : "1312",
      "shortCiteRegEx" : "1312",
      "year" : 2015
    }, {
      "title" : "Full Resolution Image Compression with Recurrent",
      "author" : [ "Toderici", "George" ],
      "venue" : null,
      "citeRegEx" : "Toderici and George,? \\Q2016\\E",
      "shortCiteRegEx" : "Toderici and George",
      "year" : 2016
    }, {
      "title" : "works”. In: arXiv e-prints",
      "author" : [ "Wang", "Zhou", "Eero P. Simoncelli", "Alan Conrad Bovik" ],
      "venue" : null,
      "citeRegEx" : "Wang et al\\.,? \\Q2003\\E",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2003
    } ],
    "referenceMentions" : [ ],
    "year" : 2017,
    "abstractText" : "We describe an image compression method, consisting of a nonlinear analysis transformation, a uniform quantizer, and a nonlinear synthesis transformation. The transforms are constructed in three successive stages of convolutional linear filters and nonlinear activation functions. Unlike most convolutional neural networks, the joint nonlinearity is chosen to implement a form of local gain control, inspired by those used to model biological neurons. Using a variant of stochastic gradient descent, we jointly optimize the entire model for rate–distortion performance over a database of training images, introducing a continuous proxy for the discontinuous loss function arising from the quantizer. Under certain conditions, the relaxed loss function may be interpreted as the log likelihood of a generative model, as implemented by a variational autoencoder. Unlike these models, however, the compression model must operate at any given point along the rate– distortion curve, as specified by a trade-off parameter. Across an independent set of test images, we find that the optimized method generally exhibits better rate–distortion performance than the standard JPEG and JPEG 2000 compression methods. More importantly, we observe a dramatic improvement in visual quality for all images at all bit rates, which is supported by objective quality estimates using MS-SSIM.",
    "creator" : "LaTeX with hyperref package"
  }
}