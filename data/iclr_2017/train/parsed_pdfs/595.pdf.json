{
  "name" : "595.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "INFERENCE & INTROSPECTION IN DEEP GENERATIVE MODELS OF SPARSE DATA",
    "authors" : [ "Rahul G. Krishnan", "Matthew Hoffman" ],
    "emails" : [ "rahul@cs.nyu.edu", "matthoffm@adobe.com" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "Deep latent Gaussian models (DLGMs, a.k.a. variational autoencoders; Rezende et al., 2014; Kingma et al., 2014) have led a resurgence in the use of deep generative models for density estimation. DLGMs assume that observed vectors x are generated by applying a nonlinear transformation (defined by a neural network with parameters θ) to a vector of Gaussian random variables z. Learning in DLGMs proceeds by approximately maximizing the average marginal likelihood p(x) ≡∫ z p(z)p(x|z)dz of the observations x. Computing the true marginal likelihood is intractable, so we resort to variational expectation-maximization (Bishop, 2006), an approximation to maximumlikelihood estimation. To learn the parameters θ of the generative model, the procedure needs to find a distribution q(z|x) that approximates the posterior distribution p(z|x) of the latent vector z given the observations x. In the past, such q distributions were fit using iterative optimization procedures (e.g., Hoffman et al., 2013). But Rezende et al. (2014) and Kingma et al. (2014) showed that q(z|x) can be parameterized by a feedforward “inference network” with parameters φ, speeding up learning. This inference network is trained jointly with the generative model; as training proceeds, the inference network learns to approximate posterior inference on the generative model, and the generative model improves itself using the output of the inference network.\nEmbedded within this procedure, however, lies a potential problem: both the inference network and the generative model are initialized randomly. Early on in learning, the inference network’s q(z|x) distributions will be poor approximations to the true posterior p(z|x), and the gradients used to update the parameters of the generative model will therefore be poor approximations to the gradients of the true log-likelihood log p(x). Previous stochastic variational inference methods (Hoffman et al., 2013) were slower, but suffered less from this problem since for every data-point, a set of variational parameters was optimized within the inner loop of learning. In this work, we investigate blending the two methodologies for learning models of sparse data. In particular, we use the parameters predicted by the inference network as an initialization and optimize them further during learning. When modeling high-dimensional sparse data, we show that updating the local variational parameters yields generative models with better held-out likelihood, particularly for deeper generative models.\nWhat purpose is served by fitting bigger, deeper, more powerful generative models? Breiman (2001) argues that statistical discriminative modeling falls into two schools of thought: the data modeling culture and the algorithmic modeling culture. The former advocates the use of predictive models that assume interpretable, mechanistic processes while the latter advocates the use of black box techniques with an emphasis on prediction accuracy. Breiman’s arguments also ring true about the\nz\nx θ φ Figure 1: Deep Latent Gaussian Model: The Bayesian network depicted here comprises a single latent variable with the conditional probability p(x|z) defined by a deep neural network with parameter θ. The dotted line represents the inference network parameterized by φ, which is used for posterior inference at train and test time.\ndivide between deep generative models with complex conditional distributions and simpler, more interpretable statistical models. Consider a classic model such as Latent Dirichlet Allocation (Blei et al., 2003). It is outperformed in held-out likelihood (Miao et al., 2016) by deeper generative models and assumes a simple probabilistic process for data generation that is unlikely to hold in reality. Yet, its generative semantics lend it a distinct advantage: interpretability. The word-topic matrix in the model allows practitioners to read off what the model has learned about the data. Is there a natural way to interpret the generative model when the conditional distributions are parameterized by a deep neural network?\nOur second contribution is to introduce a simple, easy to implement method to interpret what is being learned by generative models such as DLGMs whose conditional probabilities are parameterized by deep neural networks. Our hope is to narrow the perceived gulf between a complex generative model’s representational power and its interpretability. We use the Jacobian of the conditional distribution with respect to latent variables in the Bayesian network to form embeddings (or Jacobian vectors) of the observations. We investigate the properties of the Jacobian vectors obtained from deeper, more non-linear generative models."
    }, {
      "heading" : "2 BACKGROUND",
      "text" : "Generative Model: We consider learning in generative models of the form shown in Figure 1. We observe a set of D word count vectors x1:D, where xdv denotes the number of times that word index v ∈ {1, . . . , V } appears in document d. We assume we are given the total number of words per document Nd ≡ ∑ v xdv , and that xd was generated via the following generative process: zd ∼ N (0, I); γ(zd) ≡ MLP(zd; θ); µ(zd) ≡ exp{γ(zd)}∑ v exp{γ(zd)v} ; xd ∼ Multinomial(µ(zd), Nd).\n(1)\nThat is, we draw a Gaussian random vector, pass it through a multilayer perceptron (MLP) with parameters θ, pass the resulting vector through the softmax (a.k.a. multinomial logistic) function, and sample Nd times from the resulting distribution over the vocabulary.1\nVariational Learning: For ease of exposition notation we drop the subscript on xd to form x referring to a single data point. We need to approximate the intractable posterior distribution p(z|x) during learning. Using the well-known variational principle, we can obtain the lower bound on the log marginal likelihood of the data (or L(x; θ, φ)) in Eq. 2. where the inequality is by Jensen’s inequality.\nlog p(x; θ) ≥ E qφ(z|x) [log pθ(x|z))]−KL( qφ(z|x)||p(z) ) = L(x; θ, φ), (2)\nWe leverage an inference network or recognition network (Hinton et al., 1995), a neural network which approximates the intractable posterior, during learning. This is a parametric conditional distribution that is optimized to perform inference. Kingma & Welling (2014); Rezende et al. (2014) use a neural net (with parameters φ) to parameterize qφ(z|x). The challenge in the resulting optimization problem is that the lower bound (2) includes an expectation w.r.t. qφ(z|x), which implicitly depends on the network parameters φ. This difficulty is overcome by using stochastic backpropagation.\nWith a normal distribution as our variational approximation we have that qφ(z|x) ∼ N (µφ(x),Σφ(x)). µφ(x),Σφ(x) are functions of the observation x, and we denote by ψ(x) :=\n1In keeping with common practice, we neglect the multinomial base measure term N ! x1!···xV ! , which amounts to assuming that the words are observed in a particular order.\n{µφ(x),Σφ(x)} the local variational parameters predicted by the inference network. A simple transformation allows one to obtain unbiased Monte Carlo estimates of the gradients of Eqφ(z|x) [log pθ(x|z))] with respect to φ. If we assume the prior p(z) is also normally distributed, the KL and its gradients may be obtained analytically. Throughout this paper we will use θ to denote the parameters of the generative model, and φ to denote the parameters of the inference network."
    }, {
      "heading" : "3 METHODOLOGY",
      "text" : "Inference with Global Information: Sparse data typically exhibits long tails and learning in the presence of rare features is challenging. Inference networks learn to regress to the optimal posterior parameters for every data point and global information about the relative frequencies of the individual features in the training distribution may present valuable information during learning.\nThe simplest way to incorporate first order statistics across the training data into the inferential process is to condition on tf-idf (Baeza-Yates et al., 1999) features instead of the raw-counts. tf-idf is one of the most widely used techniques in information retrieval. In the context of building bag-of-words representations for documents, tf-idf re-weight features to increase the influence of rarer words while decreasing the influence of common words appearing in all documents. The tf-idf-transformed word-count vector is x̃dv ≡ xdv log D∑\nd′ min{xd′v,1} . After applying transform, the resulting vector x̃\nis normalized by its L2 norm. It’s worthwhile to note that leveraging first-order statistics for inference is difficult in the traditional paradigm of tracking variational parameters for each data point but is easy with inference networks.\nOptimizing Local Variational Parameters: The inference network initially comprises a randomly initialized neural network. The predictions of the inference network early in optimization are suboptimal variational parameters used to derive gradients of the parameters of the generative model. This induces noise and bias to the gradients used to update the parameters of the generative model; this noise and bias may push the generative model towards a poor local optimum. Previous work has suggested that deep neural networks (which form the conditional probability distributions pθ(x|z)) are sensitive to initialization (Glorot & Bengio, 2010; Larochelle et al., 2009).\nTo avoid these issues, we only use the local variational parameters ψ(x) predicted by the inference network to initialize an iterative optimizer that maximizes the ELBO with respect to ψ; we use the optimized variational parameters ˆψ(x) to derive gradients for the generative model. We then train the inference network using stochastic backpropagation and gradient descent, holding the parameters of the generative model θ fixed. Our procedure is detailed in Algorithm 1.\nAlgorithm 1 Pseudocode for Learning: We evaluate expectations in L(x) (see Eq. 2) using a single sample from the variational distribution and aggregate gradients across mini-batches. M = 1 corresponds to performing no additional optimization to the variational parameters We update θ, ψ(x), φ using stochastic gradient descent with adaptive learning rates ηθ, ηψ(x), ηφ obtained via ADAM (Kingma & Ba, 2015)\nInputs: Dataset D := [x1, . . . , xD], Inference Model: qφ(z|x), Generative Model: pθ(x|z), p(z) while notConverged() do\n1. Sample datapoint: x ∼ D 2. Estimate local variational parameters ψ(x)1 using qφ(z|x) 3. Estimate ψ(x)M ≈ ˆψ(x) = arg maxψ(x) L(x; θ;ψ(x)) via SGD as:\nm = 1, . . . ,M , ψ(x)m+1 = ψ(x)m + ηψ(x) ∂L(x;θ,ψ(x)m)\n∂ψ(x)m\n4. Update θ as: θ ← θ + ηθ∇θL(x; θ, ψ(x)M ) 5. Update φ as: φ← φ+ ηφ∇φL(x; θ, ψ(x))\nend while\nIntrospection: Linear models are inherently interpretable. Consider linear regression, factor analysis (Spearman, 1904), and latent Dirichlet allocation (LDA; Blei et al., 2003), which (standardizing notation) assume the following relationships:\nRegression: E[y|x] = Wx+ b; Factor Analysis: x ∼ N (0, I); E[y|x] = Wx+ b; Latent Dirichlet Allocation: x ∼ Dirichlet(α); E[y|x] = Wx. (3)\nIn each case, we need only inspect the parameter matrix W to answer the question “what happens to y if we increase xk a little?” The answer is clear—y moves in the direction of the kth row of W . We can ask this question differently and get the same answer: “what is the derivative ∂E[y|x]∂x ?” The answer is simply the parameter matrix W .\nFor models as in Fig 1, the variability in the training data is assumed to be due to the single latent state z. The relationship between latent variables z and observations x cannot be quickly read off of the parameters θ. But we can still ask what happens if we perturb z by some small dz—this is simply the directional derivative ∂E[x|z]∂z dz. We can interpret this Jacobian matrix in much the same way we would a factor loading matrix, with two main differences. First, the Jacobian matrix ∂E[x|z] ∂z varies with z—the interpretation of z may change significantly depending on context. Second, DLGMs exhibit rotational symmetry—the prior on z is rotationally symmetric, and the MLP can apply arbitrary rotations to z before applying any nonlinearities, so a priori there is no “natural” set of basis vectors for z. For a given Jacobian matrix, however, we can find the most significant directions via a singular value decomposition (SVD).\nJacobian Vectors: We present our method to generate embeddings from Bayesian networks of the form Figure 1. We consider three variants of Jacobian embedding vectors, based on the unnormalized potentials from the MLP, logarithmic probabilities, and linear probabilities respectively:\nJ (z)pot = ∂γ(z) ∂z\nJ (z)log = ∂ logµ(z) ∂z\nJ (z)prob = ∂µ(z) ∂z\n(4)\nFor any z, {J (z)log,J (z)pot,J (z)prob} ∈ RV×K where K is the latent dimension and V is the dimensionality of the observations. It is this matrix that we use to form embeddings. We denote by ui the Jacobian vector obtained from the row of the Jacobian matrix. When not referring to a particular variant, we use J (z) to denote the Jacobian matrix. J (z) is a function of z leaving open the choice of where to evaluate this function. The semantics of our generative model suggest a natural choice: Jmean := Ep(z)[J (z)]. This set of embeddings captures the variation in the output distribution with respect to the latent state across the prior distribution of the generative model. Additionally, one may also evaluate the Jacobian at the approximate posterior corresponding to an observation x. We study how this may be used to obtain contextual word-vectors.\nIn frameworks that support automatic differentiation (e.g., Theano; Theano Development Team, 2016), J (z) is readily available and we estimate Jmean via Monte-Carlo sampling from the prior. Deriving Jacobian Vectors: For simplicity, we derive the functional form of the Jacobian in a linear model i.e where γ(zd) = Wzd (c.f Eq 1). We drop the subscript d and denote by γi(z), the ith element of the vector γ(z).\np(xi = 1|z) = exp(γi(z))∑ j exp(γj(z))\nand γi(z) = wTi z\nFor linear models, ∇zγi(z) = wi directly corresponds to J (z)pot. Noting that ∇z exp(γi(z)) = exp(γi(z))∇zγi(z) and ∇z ∑ j exp(γj(z)) = ∑ j exp(γj(z))∇zγj(z), we estimate J (z)prob as:\n∇zp(xi = 1|z) = ∇z exp(γi(z))∑ j exp(γj(z)) =\n∑ j exp(γj(z))∇z exp(γi(z))− exp(γi(z))∇z ∑ j exp(γj(z))\n( ∑ j exp(γj(z))) 2\n=\n∑ j exp(γj(z)) exp(γi(z))wi − exp(γi(z)) ∑ j exp(γj(z))wj\n( ∑ j exp(γj(z))) 2\n= p(xi = 1|z)wi − p(xi = 1|z) ∑ j p(xj = 1|z)wj\n= p(xi = 1|z)(wi − ∑ j p(xj = 1|z)wj)\nSimilarly, we may compute J (z)log: ∇z log p(xi = 1|z) = wi − ∑ j p(xj = 1|z)wj = ∑ j p(xj = 1|z)(wi − wj) (5)\nDenoting a word-pair vector as wi −wj , where wi, wj are columns of the matrix W . If we define the set of all word-pair vectors as S , then Eq 5 captures the idea that the vector representation for a word i lies in the convex hull of S . Furthermore, the word vector’s location in CONV(S) is determined by the likelihood of the pairing word (xj) under the model p(xj = 1|z).\nWhen we use a non-linear conditional probability distribution J (z)log becomes: ∇z log p(xi = 1|z) = ∑ j p(xj = 1|z)(∇zγi(z)−∇zγj(z)) where ∇zγi(z) is a non-linear function of z. To the best of our knowledge, Jacobian Vectors and their properties have not been studied."
    }, {
      "heading" : "4 RELATED WORK",
      "text" : "Learning in Deep Generative Models: Salakhutdinov & Larochelle (2010) optimize the local variational parameters obtained from an inference network when learning deep Boltzmann machines. For DLGMs, Hjelm et al. (2016) also consider the optimization of the local variational parameters, though their exposition focuses on deriving an importance-sampling-based bound to use during learning in deep generative models with discrete latent variables. Their experimental results suggest the procedure does not improve performance much on the binarized MNIST dataset. This is consistent with our experience—we found that our secondary optimization procedure helped more when modeling sparse, high-dimensional text data than when modeling MNIST.\nLeveraging Gradient Information: The algorithmic procedure for obtaining Jacobian Vectors that we propose resembles that used to derive Fisher Score features. For an data point X under a parameteric distribution p(X; θ), the Fisher scores is defined as UX = ∇θ log p(X; θ). Jaakkola & Haussler (2007) similarly use UX to form a kernel function for subsequent use in a discriminative classifier. The intuition behind such methods is to note that the derivative of the log-probability with respect to the parameters of the generative model encodes all the variability in the input under the generative process. We rely on a related intuition, although our motivations are different; we are interested in characterizing isolated features such as words, not vector observations such as documents. Also, we consider Jacobians with respect to per-observation latent variables z, rather than globally shared parameters θ.\nIn the context of discriminative modeling, (Erhan et al., 2009) use gradient information to study the patterns with which neurons are activated in a deep neural networks while (Wang et al., 2016) use the spectra of the Jacobian to study the complexity of the functions learned by neural networks.\nIntrospection via Embeddings: Landauer et al. (1998) proposed latent semantic analysis, one of the earliest works to create vector space representations of documents. Bengio et al. (2003); Mikolov & Dean (2016) propose log-linear models to create word-representations from document corpora in an unsupervised fashion. Rudolph et al. (2016) describe a family of models to create contextual embeddings where the conditional distributions that lie in the exponential family. Finally, Choi et al. (2016) propose a variant of Word2Vec to create representations of diagnosis codes from temporal Electronic Health Record data. The models above explicitly condition the probability of a word on its nearby context. In contrast, our model models the probability of a word as it appears in the document (or rather, conditioned on its global context). Augmenting the generative model in Figure 1 to incorporate local context is a possible direction for future work.\nMiao et al. (2016) learn a shallow log-linear model on text data and obtain embeddings for words from the weight matrix that parameterize their generative model. Li et al. (2016) propose a modification to LDA that explicitly models representations for word in addition to modeling the word-topic structure."
    }, {
      "heading" : "5 EVALUATION",
      "text" : "Text Data: We study the effect of further optimization of the variational parameters and inference with tf-idf features on the two datasets of varying size: the smaller 20Newsgroups (Lang, 2008) (train/valid/test: 10768/500/7505, V : 2000) and the larger RCV2 (Lewis et al., 2004) dataset (train/valid/test: 789414/5000/10000, V : 10000). We follow the preprocessing procedure defined in (Miao et al., 2016) for both datasets. We also train models on the Wikipedia corpus used in (Huang et al., 2012). We remove stop words, words appearing less than ten times in the dataset. and select our vocabulary to comprise the union of the top 20000 words in the corpus, the words in the WordSim353\n(Finkelstein et al., 2001) and the words in the Stanford Contextual Word Similarity Dataset (SCWS) (Huang et al., 2012). The resulting dataset is of size train/valid: 1212781/1000 and V :20253.\nEHR Data: We train shallow and deep generative models on a dataset constructed from Electronic Medical Records. The dataset comprises 185000 patients where each patient’s data across time was aggregated to create a bag-of-diagnosis-codes representation of the patient. The vocabulary comprises four different kinds of medical diagnosis codes: ICD9 (diagnosis), LOINC (laboratory tests), NDC (prescription medication), CPT (procedures). For a single patient, we have 51321 diagnosis codes.\nTraining Procedure: On all datasets, we train shallow log-linear models (γ(z) = Wz + b) and deeper three-layer DLGMs (γ(z) = MLP(z; θ)). We vary the number of secondary optimization steps M = 1, 100 (cf. Algorithm 1) to study the effect of optimization on ψ(x) with ADAM (Kingma & Ba, 2015). We use a mini-batch size of 500, a learning rate of 0.01 for ψ(x) and 0.0008 for θ, φ. The inference network was fixed to a two-layer MLP whose intermediate hidden layer h(x) was used to parameterize the mean and diagonal log-variance µ(x), log Σ(x). To evaluate the quality of the learned generative models, we report an upper bound on perplexity (Mnih & Gregor, 2014) given by exp(− 1N ∑ i 1 Ni\nlog p(xi)) where log p(xi) is replaced by Eq 2. The notation 3-M100-tfidf indicates a model where the MLP parameterizing γ(z) has three hidden layers, the local variational parameters are updated 100 times before an update of θ and tf-idf features were used in the inference network.\nImproving Learning: Table 1 depicts our results on 20newsgroups and RCV2. On the smaller dataset, we find that the deeper models overfit quickly and are outperformed by shallow generative models. On the larger datasets, the deeper models’ capacity is more readily utilized yielding better generalization. The use of tf-idf features always helps learning on smaller datasets. On larger datasets, the benefits are smaller when we also optimize ψ(x). Finally, the optimization of the local variational parameters appears to help most on the larger datasets. To investigate how this occurs, we plot the held-out likelihood versus epochs. For models trained on the larger RCV2 (Figure 2a) and Wikipedia (Figure 2b) datasets, the larger deep generative models converge to better solutions (and in fewer passes through the data) with the additional optimization of ψ(x).\nTo study the effect of investigate where optimizing ψ(x) is particularly effective on, we train a three layer model on different subsets of the Wikipedia dataset. The subsets are created by selecting the top K most frequently occurring features in the data. Our rationale is that by holding everything fixed and varying the level of sparsity (datasets with smaller values of K are less sparse) in the data, we can begin to understand when our method is most helpful. On held-out data, we compute the difference between the perplexity when the model is trained with M = 1 (denoted PM1) and M = 100 (denoted PM100) and compute the relative decrease in perplexity obtained as PM1−PM100PM100 . The results are depicted in Figure 2c where we see that our method improves learning as a function of the dimensionality of the data.\nIn Table 5 in the supplementary material, we study the effect of varying the parameters of the inference network. There, we perform a small grid search over the hidden dimension and the number of layers in the inference network and find that optimizing the variational parameters continues to produces models with lower overall perplexity.\nJacobian Vectors: Our first avenue for introspection into the learned generative model is using log-singular values of the Jacobian matrix. Since the Jacobian matrix precisely encodes how sensitive the outputs are with respect to the inputs, the log-singular value spectrum of this matrix directly captures the amount of variance in the data explained by the latent space. Said differently, we can read off the number of active units in the DLGM or VAE by counting the number of log-singular values larger than zero. Furthermore, this method of introspection depends only on the parameters of the generative model. In Figure 2d, 2e, we see that for larger models continuing to optimize the variational parameters allows us to learn models that use many more of the available latent dimensions. This suggests that, when fit to text data, DLGMs may be particularly susceptible to the overpruning phenomenon noted by Burda et al. (2015). In Figure 2, the lower held-out perplexity and the increased utilization of the latent space suggest that the continued optimization of the variational parameters yields more powerful generative models.\nWe investigate how the Jacobian matrix may be used for model introspection by studying the qualitative properties of J logmean on DLGMs (of type “3-M100-tfidf”) trained on two, diverse sets of data. We form a Monte Carlo estimate of J logmean using 400 samples. The cosine distance is\nused to define neighbors of words in the embedding space of the Jacobian and spectral clustering (Von Luxburg, 2007) is used to form clusters.\nIn Table 2a, we visualize some of the nearest neighbors of words using J logmean obtained from models trained on the Wikipedia dataset. The neighbors are semantically sensible. Instead of evaluating the Jacobian at L points z1:L ∼ p(z), one may instead evaluate it at z1:L ∼ q(z|x) for some x. In Table 2b, we select three polysemous query words alongside “context words” that disambiguate the query’s meaning. For each word-context pair, we create a document comprising a subset of words in the the\n(a) Word Embeddings (Nearest Neighbors): We visualize nearest neighbors of word embeddings. We exclude plurals of the query and other words in the neighborhood.\nQuery Neighborhood intelligence espionage, secrecy, interrogation, counterterrorism zen dharma, buddhism, buddhas, meditation,yoga artificial artificially, molecules, synthetic, soluble military civilian, armys, commanders, infantry\n(b) Word Embeddings (Polysemy): We visualize the nearest neighbors under the Jacobian vector induced by the posterior distribution of a document created based on the context word.\nWord Context Neighboring Words crane construction lifting, usaaf, spanned, crushed, lift bird erected, parkland, locally, farmland, causeway bank river watershed, footpath, confluence, drains, tributary money banking, government, bankers, comptroller, fiscal fires burn ignition, combustion, engines, fuel, engine\nlayoff thunderstorm, grassy, surrounded, walkway, burning (c) Medical Embeddings (Nearest Neighbors): We evaluate nearest neighbors of selected diagnosis, drug and procedure codes (ignoring duplicates and shortening some code names). Metformin, Glimepiride, Pioglitazone and Avandia are diabetic drugs. A contour meter is an instrument to track blood glucose. Advair, Albuterol, Proventil and Spiriva are prescribed to patients with chronic obstructive pulmonary disease (COPD)\ncontext’s Wikipedia page. Then, we use the learned inference network to perform posterior inference to evaluate J logmean at the corresponding q(z|x). This yields a set of contextual Jacobian vectors. We display the nearest neighbors for each word under different contextual Jacobian vectors and find that, while not always perfect, they capture different contextually relevant semantics. The take-away here is that by combining posterior inference in this Bayesian network with our methodology of introspecting the model, one obtains different context-specific representations for the observations despite not having been trained to capture this explicitly.\nIn Table 8b (appendix), we visualize clusters formed from the embeddings of medical diagnosis codes to find that they exhibit topical coherence. In Table 2c, the nearest neighbors of drugs include other drugs prescribed in conjunction with or as a replacement for the query drug. For diagnosis codes such as “Asbestosis”, the nearest neighbors are symptoms and procedures associated with the\ndisease. Finally, for a qualitative evaluation of Jacobian vectors obtained from a model trained on movie ratings, we refer the reader to the appendix.\nThe Semantics of Embeddings: We evaluate the vector space representations that we obtain from Jmean on benchmarks (such as WordSim353 (Finkelstein et al., 2001) and SCWS (Huang et al., 2012)) that attempt to measure the similarity of words. The algorithmically derived measure of similarity is compared to a human-annotated score (between one and ten) using the Spearman rank correlation. The models that we compare to primarily use local context, which yields a more precise signal about the meanings of particular words. Closest to us in terms of training procedure is (Huang (G)) in Table 3a, whose model we outperform. Finding ways to incorporate local context is fertile ground for future work on models tailor-made for extracting embeddings.\nFor medical codes, we follow the method in (Choi et al., 2016). The authors build two kinds of evaluations to estimate whether an embedding space of medical diagnosis codes captures medically related concepts well. MRMNDF-RT (Medical Relatedness Measure under NDF-RT) leverages a database (NDF-RT) to evaluate how good an embedding space is at answering analogical queries between drugs and diseases such as uDiabetes ≈ uMetformin − (uLung Cancer − uTarceva). (Metformin is a diabetic drug and Tarceva is used in the treatment of lung cancer). The evaluation (MRMCCS) measures if the neighborhood of the diagnosis codes is medically coherent using a predefined medical ontology (CCS) as ground truth. The number computed may be thought of as a measure of precision, where a higher number is better. We refer the reader to the appendix for additional details.\nTable 4 details the results on evaluating the medical embeddings. Once again, the baselines we compare (Choi et al., 2016) are variants of Word2Vec that maximize the likelihood of the diagnosis codes conditioned on carefully crafted contexts. Our method performs comparably to the baselines, even though it relies exclusively on global context and was not designed with this task in mind. This setting depicts an instance where Jacobian vectors resulting from a deeper, better-trained model outperform those from a shallow model, highlighting the importance of a method of interpretation agnostic to the structure of the conditional probability functions in the generative model.\nBetween the three choices of Jacobian vectors, we found that all three perform comparably on the word similarity evaluation with J probmean slightly outperforming the others. On the medical data, with we found similar results aside from a few cases where J probmean did not perform well. For deeper models, we found that optimizing ψ(x) improved the quality of the obtained Jacobian vectors on text and medical data. The full versions of Tables 3 and 4 can be found in the appendix."
    }, {
      "heading" : "6 DISCUSSION",
      "text" : "We explored techniques to improve inference and learning in deep generative models of sparse non-negative data. We also developed and explored a novel, simple, yet effective method to interpret the structure of the non-linear generative model via embeddings obtained from the Jacobian matrix relating latent variables to observations. The embeddings are evaluated qualitatively and quantitatively, and were seen to exhibit interesting semantic structure across a variety of domains. Studying the effects of varying the priors on the latent variables, conditioning on context, and varying the neural architectures that parameterize the conditional distributions suggest avenues for blending ideas from generative modeling and Bayesian inference into building more powerful embeddings for data."
    }, {
      "heading" : "APPENDIX A RCV2: COMPLEXITY OF THE INFERENCE NETWORK",
      "text" : "We study the effect of varying the inference network on the two-layer model trained with the RCV2 data. Folding fixed a three-layer DLGM with stochastic dimension 100 (same architecture as 3−tfidf in Table 1), we learn models on the RCV2 data using M = 1, 100 (we evaluate and report bounds on perplexity using M = 100) and display the results in Table 5. When M = 1 (the standard procedure for training VAEs and DLGMs), increasing the number of layers in the inference network decreases the quality of the model learned. One possible explanation for this is that the already noisy gradients of the inference network must propagate along a longer path in a deeper inference network, slowing down learning of the parameters φ which in turn affects the quality of inference. In contrast, increasing hidden dimension of the inference network improves results. Generally, we obtain better results (in both train and validation error) with M = 100 than training with M = 1 across the various configurations of the inference network that we tried. Furthermore, we find that when M = 100, the inference network architecture is less relevant and all models converge to approximately the same result suggesting that the procedure treats the output of the inference network as a crude initialization for the variational parameters and that the subsequent steps of optimization are primarily responsible for gains in learning."
    }, {
      "heading" : "APPENDIX B NETFLIX: EMBEDDINGS FOR MOVIES",
      "text" : "The Netflix dataset Netflix (2009) comprises movie ratings of 500, 000 users. We treat each user’s ratings as a document and model the numbers ascribed to each movie (from 1− 5) as counts drawn from the multinomial distribution parameterized as in Eq. 1. We train a three-layer DLGM on the dataset, evaluate Jmean with 100 samples and consider two distinct methods of evaluating the learned embeddings. We cluster the movie embeddings (using spectral clustering with cosine distance to obtain 100 clusters) and depict some of the clusters in Table 6a. We find that clusters exhibit coherent themes such as documentary films, horror and James Bond movies. Other clusters (not displayed) included multiple seasons of the same show such as Friends, WWE wrestling, and Pokemon. In Table 6b, we visualize the neighbors of some popular films. In the examples we visualize, the nearest neighbors include sequels, movies from the same franchise or, as in the case of 12 Angry Men, other dramatic classics.\nTo compare the effect of using a model to create embeddings versus using the raw data from a large dataset directly, we evaluated nearest neighbors of movies using a simple baseline. For a query movie, we found all users who gave the movie a rating of 3 or above (nominally, they watched and liked the movie). Then, for all those users, we computed the mean ratings they gave to every other movie in the vocabulary and ranked them based on the mean ratings. We display the top five movies obtained using this approach in Table 6. The query words are the same as in Table 6b. For most of the queries, the difference between the two is evident and we simply end up with popular, well-liked movies rather than relevant movies."
    }, {
      "heading" : "APPENDIX C WIKIPEDIA: EMBEDDINGS FOR WORD",
      "text" : "Table 7 is the full version of Table 3 in the main paper. We find that the three variants of the Jacobian vectors perform comparably across the board. The vectors obtained from shallow log-linear models appear to have the edge. The evaluation on the WordSim and SCWS datasets are done by computing the Spearman rank correlation between human annotated rankings between 1 and 10 and an algorithmically derived measures of word-pair similarity. We first compute the distances between all word pairs. Our measure of similarity is obtained by subtracting the distances from the maximal distance across all word pairs."
    }, {
      "heading" : "APPENDIX D EHR DATA: EMBEDDINGS FOR DIAGNOSIS CODES",
      "text" : "For EHR data in particular, the bag-of-diagnosis-codes assumption we make is a crude one since (1) we assume the temporal nature of the patient data is irrelevant, and (2) combining patient statistics over time renders it difficult for the generative model to disambiguate the correlations between codes that correspond to multiple diseases a patient may suffer from. Despite this, it is interesting that the Jacobian vectors still capture much of the meaningful structure among the diagnosis codes (c.f Table 2c, 8b). Here we provide additional details surrounding the evaluating of medical embeddings.\nMRMCCS(V,G): The Agency for Healthcare Research and Quality’s clinical classification software (CCS) collapses the hierarchical ICD9 diagnosis codes into clinically meaningful categories. The evaluation on CCS checks whether the nearest neighbors of a disease include other diseases related to it (if they are in the same category in the CCS). Using the ICD9 hierarchy, the authors further split the evaluation task into predicting neighbors of fine-grained and coarse grained diagnosis codes.\nFor a choice of granularity G ∈ {fine,coarse}, V (G) ∈ V denotes the subset of ICD9 codes in the vocabulary. IG(v(i)) is one if the v’s i’th nearest neighbor: v(i) is in the same group as v according to G.\nMRMCCS(V,G) = 1 |V (G)| ∑\nv∈V (G) 40∑ k=1 IG(v(i)) log2(i+ 1)\n(6)\nMRMNDF-RT(V,R): The other evaluation uses the National Drug File Reference Terminology (NDF-RT) to evaluate analogical reasoning. The NDF-RT provides two kinds of relationships (R) between drugs and diseases: May-Treat (if the drug may be used to treat the disease) and May-Prevent. Given φA as the embedding for a code A, this test automates the evaluation of analogies such as φDiabetes︸ ︷︷ ︸\nr\n≈ φMetformin︸ ︷︷ ︸ v −(φLung Cancer − φTarceva︸ ︷︷ ︸ s ). Here v is the query code and s is a representation\nof the relationship we seek. (Metformin is a diabetic drug and Tarceva is used in the treatment of lung cancer.) The evaluation we perform reports a number proportional to the number of times\nthe neighborhood of v − s contains r for the best value of s (computed from the set of all valid drug-disease relationships in the datasets.) Given V ∗ ∈ V (concepts for which NDF-RT has at-least one substance with the given relation), IR ( ∪40i=1(v − s)(i) ) is one if any of the medical concepts in the top-40 neighborhood of the selected medical concept v satisfies relation R.\nMRMNDF-RT(V,R) = 1 |V ∗| ∑ v∈V ∗ IR ( ∪40i=1(v − s)(i) ) (7)\nIn both cases the choice of 40 was adopted to maintain consistency with (Choi et al., 2016). The evaluation is conducted by taking the average result over all possible seeds s and the best possible seed s for a query.\n(a) Medical Analogies: We can perform analogical reasoning with embeddings of medical codes. If we know a drug used to treat a disease, we can use their relationship in vector space to find unknown drugs associated with a different disease. The queries are of the form Code 1→Code 2 =⇒ Code 3→?. Sicca syndrome or Sjogren’s disease is an immune disease treated with Evoxac and Methotrexate is commonly used to treat Rheumatoid Arthiritis. “ Leg Varicosity” denotes the presence of swollen veins under the skin. “Ligation of angioaccess arteriovenous fistula” denotes the tying of passage between an artery and a vein.\n(b) Medical Embeddings (Clustering): We visualize some topical clusters of diagnosis codes.\nLabel Diagnosis Codes Thrombosis Hx Venous Thrombosis, Compression Of Vein, Renal Vein Thrombosis Occular Atrophy Optic Atrophy, Retina Layer Separation, Chronic Endophthalmitis Drug Use Opioid Dependence, Alcohol Abuse-Continuous, Hallucinogen Dep"
    } ],
    "references" : [ {
      "title" : "Modern information retrieval, volume 463",
      "author" : [ "Ricardo Baeza-Yates", "Berthier Ribeiro-Neto" ],
      "venue" : "ACM press New York,",
      "citeRegEx" : "Baeza.Yates and Ribeiro.Neto,? \\Q1999\\E",
      "shortCiteRegEx" : "Baeza.Yates and Ribeiro.Neto",
      "year" : 1999
    }, {
      "title" : "A neural probabilistic language model",
      "author" : [ "Yoshua Bengio", "Réjean Ducharme", "Pascal Vincent", "Christian Jauvin" ],
      "venue" : null,
      "citeRegEx" : "Bengio et al\\.,? \\Q2003\\E",
      "shortCiteRegEx" : "Bengio et al\\.",
      "year" : 2003
    }, {
      "title" : "Pattern Recognition and Machine Learning",
      "author" : [ "C. Bishop" ],
      "venue" : "Springer New York.,",
      "citeRegEx" : "Bishop.,? \\Q2006\\E",
      "shortCiteRegEx" : "Bishop.",
      "year" : 2006
    }, {
      "title" : "Statistical modeling: The two cultures",
      "author" : [ "Leo Breiman" ],
      "venue" : "Statistical Science,",
      "citeRegEx" : "Breiman.,? \\Q2001\\E",
      "shortCiteRegEx" : "Breiman.",
      "year" : 2001
    }, {
      "title" : "Importance weighted autoencoders",
      "author" : [ "Yuri Burda", "Roger Grosse", "Ruslan Salakhutdinov" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Burda et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Burda et al\\.",
      "year" : 2015
    }, {
      "title" : "Learning low-dimensional representations of medical concepts",
      "author" : [ "Youngduck Choi", "Chill Yi-I Chiu", "David Sontag" ],
      "venue" : "In AMIA,",
      "citeRegEx" : "Choi et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Choi et al\\.",
      "year" : 2016
    }, {
      "title" : "A unified architecture for natural language processing: Deep neural networks with multitask learning",
      "author" : [ "Ronan Collobert", "Jason Weston" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Collobert and Weston.,? \\Q2008\\E",
      "shortCiteRegEx" : "Collobert and Weston.",
      "year" : 2008
    }, {
      "title" : "Medical semantic similarity with a neural language model",
      "author" : [ "Lance De Vine", "Guido Zuccon", "Bevan Koopman", "Laurianne Sitbon", "Peter Bruza" ],
      "venue" : "In CIKM,",
      "citeRegEx" : "Vine et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Vine et al\\.",
      "year" : 2014
    }, {
      "title" : "Visualizing higher-layer features of a deep",
      "author" : [ "Dumitru Erhan", "Yoshua Bengio", "Aaron Courville", "Pascal Vincent" ],
      "venue" : null,
      "citeRegEx" : "Erhan et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Erhan et al\\.",
      "year" : 2009
    }, {
      "title" : "Placing search in context: The concept revisited",
      "author" : [ "Lev Finkelstein", "Evgeniy Gabrilovich", "Yossi Matias", "Ehud Rivlin", "Zach Solan", "Gadi Wolfman", "Eytan Ruppin" ],
      "venue" : "In WWW,",
      "citeRegEx" : "Finkelstein et al\\.,? \\Q2001\\E",
      "shortCiteRegEx" : "Finkelstein et al\\.",
      "year" : 2001
    }, {
      "title" : "Building the graph of medicine from millions of clinical narratives",
      "author" : [ "Samuel G Finlayson", "Paea LePendu", "Nigam H Shah" ],
      "venue" : "Scientific data,",
      "citeRegEx" : "Finlayson et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Finlayson et al\\.",
      "year" : 2014
    }, {
      "title" : "Understanding the difficulty of training deep feedforward neural networks",
      "author" : [ "Xavier Glorot", "Yoshua Bengio" ],
      "venue" : "In AISTATS,",
      "citeRegEx" : "Glorot and Bengio.,? \\Q2010\\E",
      "shortCiteRegEx" : "Glorot and Bengio.",
      "year" : 2010
    }, {
      "title" : "Replicated softmax: an undirected topic model",
      "author" : [ "Geoffrey E Hinton", "Ruslan R Salakhutdinov" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Hinton and Salakhutdinov.,? \\Q2009\\E",
      "shortCiteRegEx" : "Hinton and Salakhutdinov.",
      "year" : 2009
    }, {
      "title" : "The” wake-sleep” algorithm for unsupervised neural networks",
      "author" : [ "Geoffrey E Hinton", "Peter Dayan", "Brendan J Frey", "Radford M Neal" ],
      "venue" : null,
      "citeRegEx" : "Hinton et al\\.,? \\Q1995\\E",
      "shortCiteRegEx" : "Hinton et al\\.",
      "year" : 1995
    }, {
      "title" : "Iterative refinement of approximate posterior for training directed belief networks",
      "author" : [ "R Devon Hjelm", "Kyunghyun Cho", "Junyoung Chung", "Russ Salakhutdinov", "Vince Calhoun", "Nebojsa Jojic" ],
      "venue" : null,
      "citeRegEx" : "Hjelm et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Hjelm et al\\.",
      "year" : 2016
    }, {
      "title" : "Stochastic variational inference",
      "author" : [ "Matthew D Hoffman", "David M Blei", "Chong Wang", "John William Paisley" ],
      "venue" : null,
      "citeRegEx" : "Hoffman et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Hoffman et al\\.",
      "year" : 2013
    }, {
      "title" : "Improving Word Representations via Global Context and Multiple Word Prototypes",
      "author" : [ "Eric H. Huang", "Richard Socher", "Christopher D. Manning", "Andrew Y. Ng" ],
      "venue" : "In ACL,",
      "citeRegEx" : "Huang et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Huang et al\\.",
      "year" : 2012
    }, {
      "title" : "Exploiting generative models in discriminative classifiers",
      "author" : [ "Tommi S Jaakkola", "David Haussler" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Jaakkola and Haussler.,? \\Q2007\\E",
      "shortCiteRegEx" : "Jaakkola and Haussler.",
      "year" : 2007
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "Diederik Kingma", "Jimmy Ba" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Kingma and Ba.,? \\Q2015\\E",
      "shortCiteRegEx" : "Kingma and Ba.",
      "year" : 2015
    }, {
      "title" : "Auto-encoding variational bayes",
      "author" : [ "Diederik P Kingma", "Max Welling" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Kingma and Welling.,? \\Q2014\\E",
      "shortCiteRegEx" : "Kingma and Welling.",
      "year" : 2014
    }, {
      "title" : "Semi-supervised learning with deep generative models",
      "author" : [ "Diederik P Kingma", "Shakir Mohamed", "Danilo Jimenez Rezende", "Max Welling" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Kingma et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Kingma et al\\.",
      "year" : 2014
    }, {
      "title" : "An introduction to latent semantic analysis",
      "author" : [ "Thomas K Landauer", "Peter W Foltz", "Darrell Laham" ],
      "venue" : "Discourse processes,",
      "citeRegEx" : "Landauer et al\\.,? \\Q1998\\E",
      "shortCiteRegEx" : "Landauer et al\\.",
      "year" : 1998
    }, {
      "title" : "The 20 newsgroups data",
      "author" : [ "Ken Lang" ],
      "venue" : null,
      "citeRegEx" : "Lang.,? \\Q2008\\E",
      "shortCiteRegEx" : "Lang.",
      "year" : 2008
    }, {
      "title" : "Exploring strategies for training deep neural networks",
      "author" : [ "Hugo Larochelle", "Yoshua Bengio", "Jérôme Louradour", "Pascal Lamblin" ],
      "venue" : null,
      "citeRegEx" : "Larochelle et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Larochelle et al\\.",
      "year" : 2009
    }, {
      "title" : "RCV1: A new benchmark collection for text categorization research",
      "author" : [ "David D Lewis", "Yiming Yang", "Tony G Rose", "Fan Li" ],
      "venue" : null,
      "citeRegEx" : "Lewis et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Lewis et al\\.",
      "year" : 2004
    }, {
      "title" : "Generative topic embedding: a continuous representation of documents",
      "author" : [ "Shaohua Li", "Tat-Seng Chua", "Jun Zhu", "Chunyan Miao" ],
      "venue" : "In ACL,",
      "citeRegEx" : "Li et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Li et al\\.",
      "year" : 2016
    }, {
      "title" : "Neural variational inference for text processing",
      "author" : [ "Yishu Miao", "Lei Yu", "Phil Blunsom" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Miao et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Miao et al\\.",
      "year" : 2016
    }, {
      "title" : "Distributed representations of words and phrases and their compositionality",
      "author" : [ "T Mikolov", "J Dean" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Mikolov and Dean.,? \\Q2016\\E",
      "shortCiteRegEx" : "Mikolov and Dean.",
      "year" : 2016
    }, {
      "title" : "Neural variational inference and learning in belief networks",
      "author" : [ "Andriy Mnih", "Karol Gregor" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Mnih and Gregor.,? \\Q2014\\E",
      "shortCiteRegEx" : "Mnih and Gregor.",
      "year" : 2014
    }, {
      "title" : "Glove: Global vectors for word representation",
      "author" : [ "Jeffrey Pennington", "Richard Socher", "Christopher D Manning" ],
      "venue" : "In EMNLP,",
      "citeRegEx" : "Pennington et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Pennington et al\\.",
      "year" : 2014
    }, {
      "title" : "Stochastic backpropagation and approximate inference in deep generative models",
      "author" : [ "Danilo Jimenez Rezende", "Shakir Mohamed", "Daan Wierstra" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Rezende et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Rezende et al\\.",
      "year" : 2014
    }, {
      "title" : "Exponential family embeddings",
      "author" : [ "Maja R Rudolph", "Francisco JR Ruiz", "Stephan Mandt", "David M Blei" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Rudolph et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Rudolph et al\\.",
      "year" : 2016
    }, {
      "title" : "Efficient learning of deep boltzmann machines",
      "author" : [ "Ruslan Salakhutdinov", "Hugo Larochelle" ],
      "venue" : "In AISTATS,",
      "citeRegEx" : "Salakhutdinov and Larochelle.,? \\Q2010\\E",
      "shortCiteRegEx" : "Salakhutdinov and Larochelle.",
      "year" : 2010
    }, {
      "title" : "intelligence,” objectively determined and measured",
      "author" : [ "Charles Spearman" ],
      "venue" : "The American Journal of Psychology,",
      "citeRegEx" : "Spearman.,? \\Q1904\\E",
      "shortCiteRegEx" : "Spearman.",
      "year" : 1904
    }, {
      "title" : "A tutorial on spectral clustering",
      "author" : [ "Ulrike Von Luxburg" ],
      "venue" : "Statistics and computing,",
      "citeRegEx" : "Luxburg.,? \\Q2007\\E",
      "shortCiteRegEx" : "Luxburg.",
      "year" : 2007
    }, {
      "title" : "Analysis of deep neural networks with the extended data jacobian matrix",
      "author" : [ "Shengjie Wang", "Matthai Plilipose", "COM Matthew Richardson", "COM Krzysztof Geras", "Gregor Urban", "EDU Ozlem Aslan" ],
      "venue" : null,
      "citeRegEx" : "Wang et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2016
    }, {
      "title" : "NETFLIX: EMBEDDINGS FOR MOVIES The Netflix dataset Netflix (2009) comprises movie ratings of 500, 000 users. We treat each user’s ratings as a document and model the numbers ascribed to each movie (from 1− 5) as counts drawn from the multinomial distribution parameterized as in Eq",
      "author" : [ "B APPENDIX" ],
      "venue" : null,
      "citeRegEx" : "APPENDIX,? \\Q2009\\E",
      "shortCiteRegEx" : "APPENDIX",
      "year" : 2009
    } ],
    "referenceMentions" : [ {
      "referenceID" : 30,
      "context" : "Deep latent Gaussian models (DLGMs, a.k.a. variational autoencoders; Rezende et al., 2014; Kingma et al., 2014) have led a resurgence in the use of deep generative models for density estimation.",
      "startOffset" : 28,
      "endOffset" : 111
    }, {
      "referenceID" : 20,
      "context" : "Deep latent Gaussian models (DLGMs, a.k.a. variational autoencoders; Rezende et al., 2014; Kingma et al., 2014) have led a resurgence in the use of deep generative models for density estimation.",
      "startOffset" : 28,
      "endOffset" : 111
    }, {
      "referenceID" : 2,
      "context" : "Computing the true marginal likelihood is intractable, so we resort to variational expectation-maximization (Bishop, 2006), an approximation to maximumlikelihood estimation.",
      "startOffset" : 108,
      "endOffset" : 122
    }, {
      "referenceID" : 2,
      "context" : "Computing the true marginal likelihood is intractable, so we resort to variational expectation-maximization (Bishop, 2006), an approximation to maximumlikelihood estimation. To learn the parameters θ of the generative model, the procedure needs to find a distribution q(z|x) that approximates the posterior distribution p(z|x) of the latent vector z given the observations x. In the past, such q distributions were fit using iterative optimization procedures (e.g., Hoffman et al., 2013). But Rezende et al. (2014) and Kingma et al.",
      "startOffset" : 109,
      "endOffset" : 515
    }, {
      "referenceID" : 2,
      "context" : "Computing the true marginal likelihood is intractable, so we resort to variational expectation-maximization (Bishop, 2006), an approximation to maximumlikelihood estimation. To learn the parameters θ of the generative model, the procedure needs to find a distribution q(z|x) that approximates the posterior distribution p(z|x) of the latent vector z given the observations x. In the past, such q distributions were fit using iterative optimization procedures (e.g., Hoffman et al., 2013). But Rezende et al. (2014) and Kingma et al. (2014) showed that q(z|x) can be parameterized by a feedforward “inference network” with parameters φ, speeding up learning.",
      "startOffset" : 109,
      "endOffset" : 540
    }, {
      "referenceID" : 15,
      "context" : "Previous stochastic variational inference methods (Hoffman et al., 2013) were slower, but suffered less from this problem since for every data-point, a set of variational parameters was optimized within the inner loop of learning.",
      "startOffset" : 50,
      "endOffset" : 72
    }, {
      "referenceID" : 3,
      "context" : "What purpose is served by fitting bigger, deeper, more powerful generative models? Breiman (2001) argues that statistical discriminative modeling falls into two schools of thought: the data modeling culture and the algorithmic modeling culture.",
      "startOffset" : 83,
      "endOffset" : 98
    }, {
      "referenceID" : 26,
      "context" : "It is outperformed in held-out likelihood (Miao et al., 2016) by deeper generative models and assumes a simple probabilistic process for data generation that is unlikely to hold in reality.",
      "startOffset" : 42,
      "endOffset" : 61
    }, {
      "referenceID" : 13,
      "context" : "We leverage an inference network or recognition network (Hinton et al., 1995), a neural network which approximates the intractable posterior, during learning.",
      "startOffset" : 56,
      "endOffset" : 77
    }, {
      "referenceID" : 13,
      "context" : "We leverage an inference network or recognition network (Hinton et al., 1995), a neural network which approximates the intractable posterior, during learning. This is a parametric conditional distribution that is optimized to perform inference. Kingma & Welling (2014); Rezende et al.",
      "startOffset" : 57,
      "endOffset" : 269
    }, {
      "referenceID" : 13,
      "context" : "We leverage an inference network or recognition network (Hinton et al., 1995), a neural network which approximates the intractable posterior, during learning. This is a parametric conditional distribution that is optimized to perform inference. Kingma & Welling (2014); Rezende et al. (2014) use a neural net (with parameters φ) to parameterize qφ(z|x).",
      "startOffset" : 57,
      "endOffset" : 292
    }, {
      "referenceID" : 23,
      "context" : "Previous work has suggested that deep neural networks (which form the conditional probability distributions pθ(x|z)) are sensitive to initialization (Glorot & Bengio, 2010; Larochelle et al., 2009).",
      "startOffset" : 149,
      "endOffset" : 197
    }, {
      "referenceID" : 33,
      "context" : "Consider linear regression, factor analysis (Spearman, 1904), and latent Dirichlet allocation (LDA; Blei et al.",
      "startOffset" : 44,
      "endOffset" : 60
    }, {
      "referenceID" : 14,
      "context" : "For DLGMs, Hjelm et al. (2016) also consider the optimization of the local variational parameters, though their exposition focuses on deriving an importance-sampling-based bound to use during learning in deep generative models with discrete latent variables.",
      "startOffset" : 11,
      "endOffset" : 31
    }, {
      "referenceID" : 8,
      "context" : "In the context of discriminative modeling, (Erhan et al., 2009) use gradient information to study the patterns with which neurons are activated in a deep neural networks while (Wang et al.",
      "startOffset" : 43,
      "endOffset" : 63
    }, {
      "referenceID" : 35,
      "context" : ", 2009) use gradient information to study the patterns with which neurons are activated in a deep neural networks while (Wang et al., 2016) use the spectra of the Jacobian to study the complexity of the functions learned by neural networks.",
      "startOffset" : 120,
      "endOffset" : 139
    }, {
      "referenceID" : 19,
      "context" : "Introspection via Embeddings: Landauer et al. (1998) proposed latent semantic analysis, one of the earliest works to create vector space representations of documents.",
      "startOffset" : 30,
      "endOffset" : 53
    }, {
      "referenceID" : 1,
      "context" : "Bengio et al. (2003); Mikolov & Dean (2016) propose log-linear models to create word-representations from document corpora in an unsupervised fashion.",
      "startOffset" : 0,
      "endOffset" : 21
    }, {
      "referenceID" : 1,
      "context" : "Bengio et al. (2003); Mikolov & Dean (2016) propose log-linear models to create word-representations from document corpora in an unsupervised fashion.",
      "startOffset" : 0,
      "endOffset" : 44
    }, {
      "referenceID" : 1,
      "context" : "Bengio et al. (2003); Mikolov & Dean (2016) propose log-linear models to create word-representations from document corpora in an unsupervised fashion. Rudolph et al. (2016) describe a family of models to create contextual embeddings where the conditional distributions that lie in the exponential family.",
      "startOffset" : 0,
      "endOffset" : 173
    }, {
      "referenceID" : 1,
      "context" : "Bengio et al. (2003); Mikolov & Dean (2016) propose log-linear models to create word-representations from document corpora in an unsupervised fashion. Rudolph et al. (2016) describe a family of models to create contextual embeddings where the conditional distributions that lie in the exponential family. Finally, Choi et al. (2016) propose a variant of Word2Vec to create representations of diagnosis codes from temporal Electronic Health Record data.",
      "startOffset" : 0,
      "endOffset" : 333
    }, {
      "referenceID" : 25,
      "context" : "Li et al. (2016) propose a modification to LDA that explicitly models representations for word in addition to modeling the word-topic structure.",
      "startOffset" : 0,
      "endOffset" : 17
    }, {
      "referenceID" : 22,
      "context" : "Text Data: We study the effect of further optimization of the variational parameters and inference with tf-idf features on the two datasets of varying size: the smaller 20Newsgroups (Lang, 2008) (train/valid/test: 10768/500/7505, V : 2000) and the larger RCV2 (Lewis et al.",
      "startOffset" : 182,
      "endOffset" : 194
    }, {
      "referenceID" : 24,
      "context" : "Text Data: We study the effect of further optimization of the variational parameters and inference with tf-idf features on the two datasets of varying size: the smaller 20Newsgroups (Lang, 2008) (train/valid/test: 10768/500/7505, V : 2000) and the larger RCV2 (Lewis et al., 2004) dataset (train/valid/test: 789414/5000/10000, V : 10000).",
      "startOffset" : 260,
      "endOffset" : 280
    }, {
      "referenceID" : 26,
      "context" : "We follow the preprocessing procedure defined in (Miao et al., 2016) for both datasets.",
      "startOffset" : 49,
      "endOffset" : 68
    }, {
      "referenceID" : 16,
      "context" : "We also train models on the Wikipedia corpus used in (Huang et al., 2012).",
      "startOffset" : 53,
      "endOffset" : 73
    }, {
      "referenceID" : 9,
      "context" : "(Finkelstein et al., 2001) and the words in the Stanford Contextual Word Similarity Dataset (SCWS) (Huang et al.",
      "startOffset" : 0,
      "endOffset" : 26
    }, {
      "referenceID" : 16,
      "context" : ", 2001) and the words in the Stanford Contextual Word Similarity Dataset (SCWS) (Huang et al., 2012).",
      "startOffset" : 80,
      "endOffset" : 100
    }, {
      "referenceID" : 4,
      "context" : "This suggests that, when fit to text data, DLGMs may be particularly susceptible to the overpruning phenomenon noted by Burda et al. (2015). In Figure 2, the lower held-out perplexity and the increased utilization of the latent space suggest that the continued optimization of the variational parameters yields more powerful generative models.",
      "startOffset" : 120,
      "endOffset" : 140
    }, {
      "referenceID" : 26,
      "context" : ", 2003), Replicated Softmax (RSM) (Hinton & Salakhutdinov, 2009), Sigmoid Belief Networks (SBN) and Deep Autoregressive Networks (DARN) (Mnih & Gregor, 2014), Neural Variational Document Model (Miao et al., 2016).",
      "startOffset" : 193,
      "endOffset" : 212
    }, {
      "referenceID" : 16,
      "context" : "Table 3: Semantic Similarity in Words: The baseline results are taken from (Huang et al., 2012).",
      "startOffset" : 75,
      "endOffset" : 95
    }, {
      "referenceID" : 29,
      "context" : "Glove corresponds to embeddings by (Pennington et al., 2014).",
      "startOffset" : 35,
      "endOffset" : 60
    }, {
      "referenceID" : 5,
      "context" : "SCUIs corresponds to the application of the method developed by (Choi et al., 2016) on data released by (Finlayson et al.",
      "startOffset" : 64,
      "endOffset" : 83
    }, {
      "referenceID" : 10,
      "context" : ", 2016) on data released by (Finlayson et al., 2014).",
      "startOffset" : 28,
      "endOffset" : 52
    }, {
      "referenceID" : 5,
      "context" : "56 (Choi et al., 2016) 59.",
      "startOffset" : 3,
      "endOffset" : 22
    }, {
      "referenceID" : 9,
      "context" : "The Semantics of Embeddings: We evaluate the vector space representations that we obtain from Jmean on benchmarks (such as WordSim353 (Finkelstein et al., 2001) and SCWS (Huang et al.",
      "startOffset" : 134,
      "endOffset" : 160
    }, {
      "referenceID" : 16,
      "context" : ", 2001) and SCWS (Huang et al., 2012)) that attempt to measure the similarity of words.",
      "startOffset" : 17,
      "endOffset" : 37
    }, {
      "referenceID" : 5,
      "context" : "For medical codes, we follow the method in (Choi et al., 2016).",
      "startOffset" : 43,
      "endOffset" : 62
    }, {
      "referenceID" : 5,
      "context" : "Once again, the baselines we compare (Choi et al., 2016) are variants of Word2Vec that maximize the likelihood of the diagnosis codes conditioned on carefully crafted contexts.",
      "startOffset" : 37,
      "endOffset" : 56
    } ],
    "year" : 2017,
    "abstractText" : "Deep generative models such as deep latent Gaussian models (DLGMs) are powerful and popular density estimators. However, they have been applied almost exclusively to dense data such as images; DLGMs are rarely applied to sparse, high-dimensional integer data such as word counts or product ratings. One reason is that the standard training procedures find poor local optima when applied to such data. We propose two techniques that alleviate this problem, significantly improving our ability to fit DLGMs to sparse, high-dimensional data. Having fit these models, we are faced with another challenge: how to use and interpret the representation that we have learned? To that end, we propose a method that extracts distributed representations of features via a simple linearization of the model.",
    "creator" : "LaTeX with hyperref package"
  }
}