{
  "name" : "461.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "TEMPORAL ENSEMBLING FOR SEMI-SUPERVISED LEARNING",
    "authors" : [ "Samuli Laine", "Timo Aila" ],
    "emails" : [ "slaine@nvidia.com", "taila@nvidia.com" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "It has long been known that an ensemble of multiple neural networks generally yields better predictions than a single network in the ensemble. This effect has also been indirectly exploited when training a single network through dropout (Srivastava et al., 2014), dropconnect (Wan et al., 2013), or stochastic depth (Huang et al., 2016) regularization methods, and in swapout networks (Singh et al., 2016), where training always focuses on a particular subset of the network, and thus the complete network can be seen as an implicit ensemble of such trained sub-networks. We extend this idea by forming ensemble predictions during training, using the outputs of a single network on different training epochs and under different regularization and input augmentation conditions. Our training still operates on a single network, but the predictions made on different epochs correspond to an ensemble prediction of a large number of individual sub-networks because of dropout regularization.\nThis ensemble prediction can be exploited for semi-supervised learning where only a small portion of training data is labeled. If we compare the ensemble prediction to the current output of the network being trained, the ensemble prediction is likely to be closer to the correct, unknown labels of the unlabeled inputs. Therefore the labels inferred this way can be used as training targets for the unlabeled inputs. Our method relies heavily on dropout regularization and versatile input augmentation. Indeed, without neither, there would be much less reason to place confidence in whatever labels are inferred for the unlabeled training data.\nWe describe two ways to implement self-ensembling, Π-model and temporal ensembling. Both approaches surpass prior state-of-the-art results in semi-supervised learning by a considerable margin. We furthermore observe that self-ensembling improves the classification accuracy in fully labeled cases as well, and provides tolerance against incorrect labels.\nThe recently introduced transform/stability loss of Sajjadi et al. (2016b) is based on the same principle as our work, and the Π-model can be seen as a special case of it. The Π-model can also be seen as a simplification of the Γ-model of the ladder network by Rasmus et al. (2015), a previously presented network architecture for semi-supervised learning. Our temporal ensembling method has connections to the bootstrapping method of Reed et al. (2014) targeted for training with noisy labels.\nAlgorithm 1 Π-model pseudocode. Require: xi = training stimuli Require: L = set of training input indices with known labels Require: yi = labels for labeled inputs i ∈ L Require: w(t) = unsupervised weight ramp-up function Require: fθ(x) = stochastic neural network with trainable parameters θ Require: g(x) = stochastic input augmentation function\nfor t in [1,num epochs] do for each minibatch B do zi∈B ← fθ(g(xi∈B)) . evaluate network outputs for augmented inputs z̃i∈B ← fθ(g(xi∈B)) . again, with different dropout and augmentation loss ←− 1|B| ∑ i∈(B∩L) log zi[yi] . supervised loss component\n+ w(t) 1C|B| ∑ i∈B ||zi − z̃i||2 . unsupervised loss component\nupdate θ using, e.g., ADAM . update network parameters end for\nend for return θ"
    }, {
      "heading" : "2 SELF-ENSEMBLING DURING TRAINING",
      "text" : "We present two implementations of self-ensembling during training. The first one, Π-model, encourages consistent network output between two realizations of the same input stimulus, under two different dropout conditions. The second method, temporal ensembling, simplifies and extends this by taking into account the network predictions over multiple previous training epochs.\nWe shall describe our methods in the context of traditional image classification networks. Let the training data consist of total of N inputs, out of which M are labeled. The input stimuli, available for all training data, are denoted xi, where i ∈ {1 . . . N}. Let set L contain the indices of the labeled inputs, |L| = M . For every i ∈ L, we have a known correct label yi ∈ {1 . . . C}, where C is the number of different classes."
    }, {
      "heading" : "2.1 Π-MODEL",
      "text" : "The structure of Π-model is shown in Figure 1 (top), and the pseudocode in Algorithm 1. During training, we evaluate the network for each training input xi twice, resulting in prediction vectors zi and z̃i. Our loss function consists of two components. The first component is the standard crossentropy loss, evaluated for labeled inputs only. The second component, evaluated for all inputs, penalizes different predictions for the same training input xi by taking the mean square difference\nbetween the prediction vectors zi and z̃i.1 To combine the supervised and unsupervised loss terms, we scale the latter by time-dependent weighting function w(t). By comparing the entire output vectors zi and z̃i, we effectively ask the “dark knowledge” (Hinton et al., 2015) between the two evaluations to be close, which is a much stronger requirement compared to asking that only the final classification remains the same, which is what happens in traditional training.\nIt is important to notice that, because of dropout regularization, the network output during training is a stochastic variable. Thus two evaluations of the same input xi under same network weights θ yield different results. In addition, Gaussian noise and augmentations such as random translation are evaluated twice, resulting in additional variation. The combination of these effects explains the difference between the prediction vectors zi and z̃i. This difference can be seen as an error in classification, given that the original input xi was the same, and thus minimizing it is a reasonable goal.\nIn our implementation, the unsupervised loss weighting function w(t) ramps up, starting from zero, along a Gaussian curve during the first 80 training epochs. See Appendix A for further details about this and other training parameters. In the beginning the total loss and the learning gradients are thus dominated by the supervised loss component, i.e., the labeled data only. We have found it to be very important that the ramp-up of the unsupervised loss component is slow enough—otherwise, the network gets easily stuck in a degenerate solution where no meaningful classification of the data is obtained.\nOur approach is somewhat similar to the Γ-model of the ladder network by Rasmus et al. (2015), but conceptually simpler. In the Π-model, the comparison is done directly on network outputs, i.e., after softmax activation, and there is no auxiliary mapping between the two branches such as the learned denoising functions in the ladder network architecture. Furthermore, instead of having one “clean” and one “corrupted” branch as in Γ-model, we apply equal augmentation and noise to the inputs for both branches.\nAs shown in Section 3, the Π-model combined with a good convolutional network architecture provides a significant improvement over prior art in classification accuracy."
    }, {
      "heading" : "2.2 TEMPORAL ENSEMBLING",
      "text" : "Analyzing how the Π-model works, we could equally well split the evaluation of the two branches in two separate phases: first classifying the training set once without updating the weights θ, and then training the network on the same inputs under different augmentations and dropout, using the just obtained predictions as targets for the unsupervised loss component. As the training targets obtained this way are based on a single evaluation of the network, they can be expected to be noisy. Temporal ensembling alleviates this by aggregating the predictions of multiple previous network evaluations into an ensemble prediction. It also lets us evaluate the network only once during training, gaining an approximate 2x speedup over the Π-model.\nThe structure of our temporal ensembling method is shown in Figure 1 (bottom), and the pseudocode in Algorithm 2. The main difference to the Π-model is that the network and augmentations are evaluated only once per input per epoch, and the target vectors z̃ for the unsupervised loss component are based on prior network evaluations instead of a second evaluation of the network.\nAfter every training epoch, the network outputs zi are accumulated into ensemble outputs Zi by updating Zi ← αZi + (1− α)zi, where α is a momentum term that controls how far the ensemble reaches into training history. Because of dropout regularization and stochastic augmentation, Z thus contains a weighted average of the outputs of an ensemble of networks f from previous training epochs, with recent epochs having larger weight than distant epochs. For generating the training targets z̃, we need to correct for the startup bias in Z by dividing by factor (1 − αt). A similar bias correction has been used in, e.g., Adam (Kingma & Ba, 2014) and mean-only batch normalization (Salimans & Kingma, 2016). On the first training epoch, Z and z̃ are zero as no data from previous epochs is available. For this reason, we specify the unsupervised weight ramp-up function w(t) to also be zero on the first training epoch.\n1Squared difference gave slightly but consistently better results than cross-entropy loss in our tests.\nAlgorithm 2 Temporal ensembling pseudocode. Note that the updates of Z and z̃ could equally well be done inside the minibatch loop; in this pseudocode they occur between epochs for clarity. Require: xi = training stimuli Require: L = set of training input indices with known labels Require: yi = labels for labeled inputs i ∈ L Require: α = ensembling momentum, 0 ≤ α < 1 Require: w(t) = unsupervised weight ramp-up function Require: fθ(x) = stochastic neural network with trainable parameters θ Require: g(x) = stochastic input augmentation function Z ← 0[N×C] . initialize ensemble predictions z̃ ← 0[N×C] . initialize target vectors for t in [1,num epochs] do\nfor each minibatch B do zi∈B ← fθ(g(xi∈B , t)) . evaluate network outputs for augmented inputs loss ←− 1|B| ∑ i∈(B∩L) log zi[yi] . supervised loss component\n+ w(t) 1C|B| ∑ i∈B ||zi − z̃i||2 . unsupervised loss component\nupdate θ using, e.g., ADAM . update network parameters end for Z ← αZ + (1− α)z . accumulate ensemble predictions z̃ ← Z/(1− αt) . construct target vectors by bias correction\nend for return θ\nThe benefits of temporal ensembling compared to Π-model are twofold. First, the training is faster because the network is evaluated only once per input on each epoch. Second, the training targets z̃ can be expected to be less noisy than with Π-model. As shown in Section 3, we indeed obtain somewhat better results with temporal ensembling than with Π-model in the same number of training epochs. The downside compared to Π-model is the need to store auxiliary data across epochs, and the new hyperparameter α. While the matrix Z can be fairly large when the dataset contains a large number of items and categories, its elements are accessed relatively infrequently. Thus it can be stored, e.g., in a memory mapped file.\nAn intriguing additional possibility of temporal ensembling is collecting other statistics from the network predictions zi besides the mean. For example, by tracking the second raw moment of the network outputs, we can estimate the variance of each output component zi,j . This makes it possible to reason about the uncertainty of network outputs in a principled way (Gal & Ghahramani, 2016). Based on this information, we could, e.g., place more weight on more certain predictions vs. uncertain ones in the unsupervised loss term. However, we leave the exploration of these avenues as future work."
    }, {
      "heading" : "3 RESULTS",
      "text" : "Our network structure is given in Table 5, and the test setup and all training parameters are detailed in Appendix A. We test the Π-model and temporal ensembling in two image classification tasks, CIFAR-10 and SVHN, and report the mean and standard deviation of 10 runs using different random seeds.\nAlthough it is rarely stated explicitly, we believe that our comparison methods do not use input augmentation, i.e., are limited to dropout and other forms of permutation-invariant noise. Therefore we report the error rates without augmentation, unless explicitly stated otherwise. Given that the ability of an algorithm to extract benefit from augmentation is also an important property, we report the classification accuracy using a standard set of augmentations as well. In purely supervised training the de facto standard way of augmenting the CIFAR-10 dataset includes horizontal flips and random translations, while SVHN is limited to random translations. By using these same augmentations we can compare against the best fully supervised results as well. After all, the fully supervised results should indicate the upper bound of obtainable accuracy."
    }, {
      "heading" : "3.1 CIFAR-10",
      "text" : "CIFAR-10 is a dataset consisting of 32× 32 pixel RGB images from ten classes. Table 1 shows a 2.1 percentage point reduction in classification error rate with 4000 labels (400 per class) compared to earlier methods for the non-augmented Π-model.\nEnabling the standard set of augmentations further reduces the error rate by 4.2 percentage points to 12.36%. Temporal ensembling is slightly better still at 12.16%, while being twice as fast to train. This small improvement conceals the subtle fact that random horizontal flips need to be done independently for each epoch in temporal ensembling, while Π-model can randomize once per a pair of evaluations, which according to our measurements is ∼0.5 percentage points better than independent flips.\nA principled comparison with Sajjadi et al. (2016b) is difficult due to several reasons. They provide results only for a fairly extreme set of augmentations (translations, flipping, rotations, stretching, and shearing) on top of fractional max pooling (Graham, 2014), which introduces random, local stretching inside the network, and is known to improve classification results substantially. They quote an error rate of only 13.60% for supervised-only training with 4000 labels, while our corresponding baseline is 34.85%. This gap indicates a huge benefit from versatile augmentations and fractional max pooling—in fact, their baseline result is already better than any previous semisupervised results. By enabling semi-supervised learning they achieve a 17% drop in classification error rate (from 13.60% to 11.29%), while we see a much larger relative drop of 65% (from 34.85% to 12.16%)."
    }, {
      "heading" : "3.2 SVHN",
      "text" : "The street view house numbers (SVHN) dataset consists of 32× 32 pixel RGB images of real-world house numbers, and the task is to classify the centermost digit. In SVHN we chose to use only the\nofficial 73257 training examples following Salimans et al. (2016). Even with this choice our error rate with all labels is only 3.05% without augmentation.\nTable 2 compares our method to the previous state-of-the-art. With the most commonly used 1000 labels we observe an improvement of 2.7 percentage points, from 8.11% to 5.43% without augmentation, and further to 4.42% with standard augmentations.\nWe also investigated the behavior with 500 labels, where we obtained an error rate less than half of Salimans et al. (2016) without augmentations, with a significantly lower standard deviation as well. When augmentations were enabled, temporal ensembling further reduced the error rate to 5.12%. In this test the difference between Π-model and temporal ensembling was quite significant at 1.5 percentage points.\nIn SVHN Sajjadi et al. (2016b) provide results without augmentation, with the caveat that they use fractional max pooling, which is a very augmentation-like technique due to the random, local stretching it introduces inside the network. It leads to a superb error rate of 2.28% in supervisedonly training, while our corresponding baseline is 3.05% (or 2.88% with translations). Given that in a separate experiment our network matched the best published result for non-augmented SVHN when extra data is used (1.69% from Lee et al. (2015)), this gap is quite surprising, and leads us to conclude that fractional max pooling leads to a powerful augmentation of the dataset, well beyond what simple translations can achieve. Our temporal ensembling technique obtains better error rates for both 500 and 1000 labels (5.12% and 4.42%, respectively) compared to the 6.03% reported by Sajjadi et al. for 732 labels."
    }, {
      "heading" : "3.3 CIFAR-100 AND TINY IMAGES",
      "text" : "The CIFAR-100 dataset consists of 32× 32 pixel RGB images from a hundred classes. We are not aware of previous semi-supervised results in this dataset, and chose 10000 labels for our experiments. Table 3 shows error rates of 43.43% and 38.65% without and with augmentation, respectively. These correspond to 7.8 and 5.9 percentage point improvements compared to supervised learning with labeled inputs only.\nWe ran two additional tests using unlabeled extra data from Tiny Images dataset (Torralba et al., 2008): one with randomly selected 500k extra images, most not corresponding to any of the CIFAR100 categories, and another with a restricted set of 237k images from the categories that correspond to those found in the CIFAR-100 dataset (see appendix A for details). The results are shown in Table 4. The addition of randomly selected, unlabeled extra images improved the error rate by 2.7 percentage points (from 26.30% to 23.63%), indicating a desirable ability to learn from random natural images. Temporal ensembling benefited much more from the extra data than the Π-model. Interestingly, restricting the extra data to categories that are present in CIFAR-100 did not improve\nthe classification accuracy further. This indicates that in order to train a better classifier by adding extra data as unlabeled inputs, it is enough to have the extra data roughly in the same space as the actual inputs—in our case, natural images. We hypothesize that it may even be possible to use properly crafted synthetic data as unlabeled inputs to obtain improved classifiers.\nIn order to keep the training times tolerable, we limited the number of unlabeled inputs to 50k per epoch in these tests, i.e., on every epoch we trained using all 50k labeled inputs from CIFAR-100 and 50k additional unlabeled inputs from Tiny Images. The 50k unlabeled inputs were chosen randomly on each epoch from the 500k or 237k extra inputs. In temporal ensembling, after each epoch we updated only the rows of Z that corresponded to inputs used on that epoch."
    }, {
      "heading" : "3.4 SUPERVISED LEARNING",
      "text" : "When all labels are used for traditional supervised training, our network approximately matches the state-of-the-art error rate for a single model in CIFAR-10 with augmentation (Lee et al., 2015; Mishkin & Matas, 2016) at 6.05%, and without augmentation (Salimans & Kingma, 2016) at 7.33%. The same is probably true for SVHN as well, but there the best published results rely on extra data that we chose not to use.\nGiven this premise, it is perhaps somewhat surprising that our methods reduce the error rate also when all labels are used (Tables 1 and 2). We believe that this is an indication that the consistency requirement adds a degree of resistance to ambiguous labels that are fairly common in many classification tasks, and that it encourages features to be more invariant to stochastic sampling."
    }, {
      "heading" : "3.5 TOLERANCE TO INCORRECT LABELS",
      "text" : "In a further test we studied the hypothesis that our methods add tolerance to incorrect labels by assigning a random label to a certain percentage of the training set before starting to train. Figure 2 shows the classification error graphs for standard supervised training and temporal ensembling.\nClearly our methods provide considerable resistance to wrong labels, and we believe this is because the unsupervised loss term encourages the mapping function implemented by the network to be flat in the vicinity of all input data points, whereas the supervised loss term enforces the mapping function to have a specific value in the vicinity of the labeled input data points. This means that even the wrongly labeled inputs play a role in shaping the mapping function—the unsupervised loss term smooths the mapping function and thus also the decision boundaries, effectively fusing the inputs into coherent clusters, whereas the excess of correct labels in each class is sufficient for locking the clusters to the right output vectors through the supervised loss term. The difference to classical regularizers is that we induce smoothness only on the manifold of likely inputs instead\nof over the entire input domain. For further analysis about the importance of the gradient of the mapping function, see Simard et al. (1998)."
    }, {
      "heading" : "4 RELATED WORK",
      "text" : "There is a large body of previous work on semi-supervised learning (Zhu, 2005). In here we will concentrate on the ones that are most directly connected to our work.\nΓ-model is a subset of a ladder network (Rasmus et al., 2015) that introduces lateral connections into an encoder-decoder type network architecture, targeted at semi-supervised learning. In Γ-model, all but the highest lateral connections in the ladder network are removed, and after pruning the unnecessary stages, the remaining network consists of two parallel, identical branches. One of the branches takes the original training inputs, whereas the other branch is given the same input corrupted with noise. The unsupervised loss term is computed as the squared difference between the (pre-activation) output of the clean branch and a denoised (pre-activation) output of the corrupted branch. The denoised estimate is computed from the output of the corrupted branch using a parametric nonlinearity that has 10 auxiliary trainable parameters per unit. Our Π-model differs from the Γ-model in removing the parametric nonlinearity and denoising, having two corrupted paths, and comparing the outputs of the network instead of pre-activation data of the final layer.\nSajjadi et al. (2016b) recently introduced a new loss function for semi-supervised learning, so called transform/stability loss, which is founded on the same principle as our work. During training, they run augmentation and network evaluation n times for each minibatch, and then compute an unsupervised loss term as the sum of all pairwise squared distances between the obtained n network outputs. As such, their technique follows the general pseudo-ensemble agreement (PEA) regularization framework of Bachman et al. (2014). In addition, they employ a mutual exclusivity loss term (Sajjadi et al., 2016a) that we do not use. Our Π-model can be seen as a special case of the transform/stability loss obtained by setting n = 2. The computational cost of training with transform/stability loss increases linearly as a function of n, whereas the efficiency of our temporal ensembling technique remains constant regardless of how large effective ensemble we obtain via the averaging of previous epochs’ predictions.\nIn bootstrap aggregating, or bagging, multiple networks are trained independently based on subsets of training data (Breiman, 1996). This results in an ensemble that is more stable and accurate than the individual networks. Our approach can be seen as pulling the predictions from an implicit ensemble that is based on a single network, and the variability is a result of evaluating it under different dropout and augmentation conditions instead of training on different subsets of data. In work parallel to ours, Huang et al. (2017) store multiple snapshots of the network during training, hopefully corresponding to different local minima, and use them as an explicit ensemble.\nThe general technique of inferring new labels from partially labeled data is often referred to as bootstrapping or self-training, and it was first proposed by Yarowsky (1995) in the context of linguistic analysis. Whitney & Sarkar (2012) analyze Yarowsky’s algorithm and propose a novel graph-based label propagation approach. Similarly, label propagation methods (Zhu & Ghahramani, 2002) infer labels for unlabeled training data by comparing the associated inputs to labeled training inputs using a suitable distance metric. Our approach differs from this in two important ways. Firstly, we never compare training inputs against each other, but instead only rely on the unknown labels remaining constant, and secondly, we let the network produce the likely classifications for the unlabeled inputs instead of providing them through an outside process.\nIn addition to partially labeled data, considerable amount of effort has been put into dealing with densely but inaccurately labeled data. This can be seen as a semi-supervised learning task where part of the training process is to identify the labels that are not to be trusted. For recent work in this area, see, e.g., Sukhbaatar et al. (2014) and Patrini et al. (2016). In this context of noisy labels, Reed et al. (2014) presented a simple bootstrapping method that trains a classifier with the target composed of a convex combination of the previous epoch output and the known but potentially noisy labels. Our temporal ensembling differs from this by taking into account the evaluations over multiple epochs.\nGenerative Adversarial Networks (GAN) have been recently used for semi-supervised learning with promising results (Maaløe et al., 2016; Springenberg, 2016; Odena, 2016; Salimans et al., 2016). It\ncould be an interesting avenue for future work to incorporate a generative component to our solution. We also envision that our methods could be applied to regression-type learning tasks."
    }, {
      "heading" : "5 ACKNOWLEDGEMENTS",
      "text" : "We thank the anonymous reviewers, Tero Karras, Pekka Jänis, Tim Salimans, Ian Goodfellow, as well as Harri Valpola and his colleagues at Curious AI for valuable suggestions that helped to improve this article."
    }, {
      "heading" : "A NETWORK ARCHITECTURE, TEST SETUP, AND TRAINING PARAMETERS",
      "text" : "Table 5 details the network architecture used in all of our tests. It is heavily inspired by ConvPoolCNN-C (Springenberg et al., 2014) and the improvements made by Salimans & Kingma (2016). All data layers were initialized following He et al. (2015), and we applied weight normalization and mean-only batch normalization (Salimans & Kingma, 2016) with momentum 0.999 to all of them. We used leaky ReLU (Maas et al., 2013) with α = 0.1 as the non-linearity, and chose to use max pooling instead of strided convolutions because it gave consistently better results in our experiments.\nAll networks were trained using Adam (Kingma & Ba, 2014) with a maximum learning rate of λmax = 0.003, except for temporal ensembling in the SVHN case where a maximum learning rate of λmax = 0.001 worked better. Adam momentum parameters were set to β1 = 0.9 and β2 = 0.999 as suggested in the paper. The maximum value for the unsupervised loss component was set to wmax ·M/N , where M is the number of labeled inputs and N is the total number of training inputs. For Π-model runs, we used wmax = 100 in all runs except for CIFAR-100 with Tiny Images where we set wmax = 300. For temporal ensembling we used wmax = 30 in most runs. For the corrupted label test in Section 3.5 we used wmax = 300 for 0% and 20% corruption, and wmax = 3000 for corruption of 50% and higher. For basic CIFAR-100 runs we used wmax = 100, and for CIFAR-100 with Tiny Images we used wmax = 1000. The accumulation decay constant of temporal ensembling was set to α = 0.6 in all runs.\nIn all runs we ramped up both the learning rate λ and unsupervised loss component weight w during the first 80 epochs using a Gaussian ramp-up curve exp[−5(1 − T )2], where T advances linearly from zero to one during the ramp-up period. In addition to ramp-up, we annealed the learning rate λ to zero and Adam β1 to 0.5 during the last 50 epochs, but otherwise we did not decay them during training. The ramp-down curve was similar to the ramp-up curve but time-reversed and with a scaling constant of 12.5 instead of 5. All networks were trained for 300 epochs with minibatch size of 100.\nCIFAR-10 Following previous work in fully supervised learning, we pre-processed the images using ZCA and augmented the dataset using horizontal flips and random translations. The translations were drawn from [−2, 2] pixels, and were independently applied to both branches in the Π-model. SVHN We pre-processed the input images by biasing and scaling each input image to zero mean and unit variance. We used only the 73257 items in the official training set, i.e., did not use the provided 531131 extra items. The training setups were otherwise similar to CIFAR-10 except that horizontal flips were not used.\nImplementation Our implementation is written in Python using Theano (Theano Development Team, 2016) and Lasagne (Dieleman et al., 2015), and is available at https://github.com/smlaine2/tempens.\nModel convergence As discussed in Section 2.1, a slow ramp-up of the unsupervised cost is very important for getting the models to converge. Furthermore, in our very preliminary tests with 250 labels in SVHN we noticed that optimization tended to explode during the ramp-up period, and we eventually found that using a lower value for Adam β2 parameter (e.g., 0.99 instead of 0.999) seems to help in this regard.\nWe do not attempt to guarantee that the occurrence of labeled inputs during training would be somehow stratified; with bad luck there might be several consecutive minibatches without any labeled inputs when the label density is very low. Some previous work has identified this as a weakness, and have solved the issue by shuffling the input sequences in such a way that stratification is guaranteed, e.g. Rasmus et al. (2015) (confirmed from the authors). This kind of stratification might further improve the convergence of our methods as well.\nTiny Images, extra data from restricted categories The restricted extra data in Section 3.3 was extracted from Tiny Images by picking all images with labels corresponding to the 100 categories used in CIFAR-100. As the Tiny Images dataset does not contain CIFAR-100 categories aquarium fish and maple tree, we used images with labels fish and maple instead. The result was a total of 237 203 images that were used as unlabeled extra data. Table 6 shows the composition of this extra data set.\nIt is worth noting that the CIFAR-100 dataset itself is a subset of Tiny Images, and we did not explicitly prevent overlap between this extra set and CIFAR-100. This led to approximately a third of the CIFAR-100 training and test images being present as unlabeled inputs in the extra set. The other test with 500k extra entries picked randomly out of all 79 million images had a negligible overlap with CIFAR-100."
    } ],
    "references" : [ {
      "title" : "Learning with pseudo-ensembles",
      "author" : [ "Philip Bachman", "Ouais Alsharif", "Doina Precup" ],
      "venue" : "In Advances in Neural Information Processing Systems",
      "citeRegEx" : "Bachman et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Bachman et al\\.",
      "year" : 2014
    }, {
      "title" : "Dropout as a bayesian approximation: Representing model uncertainty in deep learning",
      "author" : [ "Yarin Gal", "Zoubin Ghahramani" ],
      "venue" : null,
      "citeRegEx" : "Gal and Ghahramani.,? \\Q2016\\E",
      "shortCiteRegEx" : "Gal and Ghahramani.",
      "year" : 2016
    }, {
      "title" : "Fractional max-pooling",
      "author" : [ "Benjamin Graham" ],
      "venue" : "CoRR, abs/1412.6071,",
      "citeRegEx" : "Graham.,? \\Q2014\\E",
      "shortCiteRegEx" : "Graham.",
      "year" : 2014
    }, {
      "title" : "Delving deep into rectifiers: Surpassing human-level performance on imagenet classification",
      "author" : [ "Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun" ],
      "venue" : "CoRR, abs/1502.01852,",
      "citeRegEx" : "He et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2015
    }, {
      "title" : "Distilling the knowledge in a neural network",
      "author" : [ "G.E. Hinton", "O. Vinyals", "J. Dean" ],
      "venue" : "CoRR, abs/1503.02531,",
      "citeRegEx" : "Hinton et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Hinton et al\\.",
      "year" : 2015
    }, {
      "title" : "Deep networks with stochastic depth",
      "author" : [ "Gao Huang", "Yu Sun", "Zhuang Liu", "Daniel Sedra", "Kilian Q. Weinberger" ],
      "venue" : null,
      "citeRegEx" : "Huang et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Huang et al\\.",
      "year" : 2016
    }, {
      "title" : "Snapshot Ensembles: Train 1, get M for free",
      "author" : [ "Gao Huang", "Yixuan Li", "Geoff Pleiss", "Zhuang Liu", "John E. Hopcroft", "Kilian Q. Weinberger" ],
      "venue" : "In Proc. International Conference on Learning Representations (ICLR),",
      "citeRegEx" : "Huang et al\\.,? \\Q2017\\E",
      "shortCiteRegEx" : "Huang et al\\.",
      "year" : 2017
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "Diederik P. Kingma", "Jimmy Ba" ],
      "venue" : "CoRR, abs/1412.6980,",
      "citeRegEx" : "Kingma and Ba.,? \\Q2014\\E",
      "shortCiteRegEx" : "Kingma and Ba.",
      "year" : 2014
    }, {
      "title" : "Semi-supervised learning with deep generative models",
      "author" : [ "Diederik P Kingma", "Shakir Mohamed", "Danilo Jimenez Rezende", "Max Welling" ],
      "venue" : "In Advances in Neural Information Processing Systems",
      "citeRegEx" : "Kingma et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Kingma et al\\.",
      "year" : 2014
    }, {
      "title" : "Generalizing pooling functions in convolutional neural networks: Mixed",
      "author" : [ "Chen-Yu Lee", "Patrick W. Gallagher", "Zhuowen Tu" ],
      "venue" : "gated, and tree. CoRR,",
      "citeRegEx" : "Lee et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Lee et al\\.",
      "year" : 2015
    }, {
      "title" : "Rectifier nonlinearities improve neural network acoustic models",
      "author" : [ "Andrew L Maas", "Awni Y Hannun", "Andrew Ng" ],
      "venue" : "In Proc. International Conference on Machine Learning (ICML),",
      "citeRegEx" : "Maas et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Maas et al\\.",
      "year" : 2013
    }, {
      "title" : "All you need is a good init",
      "author" : [ "Dmytro Mishkin", "Jiri Matas" ],
      "venue" : "In Proc. International Conference on Learning Representations (ICLR),",
      "citeRegEx" : "Mishkin and Matas.,? \\Q2016\\E",
      "shortCiteRegEx" : "Mishkin and Matas.",
      "year" : 2016
    }, {
      "title" : "Distributional smoothing with virtual adversarial training",
      "author" : [ "Takeru Miyato", "Shin-ichi Maeda", "Masanori Koyama", "Ken Nakae", "Shin Ishii" ],
      "venue" : "In Proc. International Conference on Learning Representations (ICLR),",
      "citeRegEx" : "Miyato et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Miyato et al\\.",
      "year" : 2016
    }, {
      "title" : "Semi-supervised learning with generative adversarial networks. Data Efficient Machine Learning workshop at ICML",
      "author" : [ "Augustus Odena" ],
      "venue" : null,
      "citeRegEx" : "Odena.,? \\Q2016\\E",
      "shortCiteRegEx" : "Odena.",
      "year" : 2016
    }, {
      "title" : "Making neural networks robust to label noise: a loss correction approach",
      "author" : [ "Giorgio Patrini", "Alessandro Rozza", "Aditya Menon", "Richard Nock", "Lizhen Qu" ],
      "venue" : null,
      "citeRegEx" : "Patrini et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Patrini et al\\.",
      "year" : 2016
    }, {
      "title" : "Semisupervised learning with ladder networks",
      "author" : [ "Antti Rasmus", "Mathias Berglund", "Mikko Honkala", "Harri Valpola", "Tapani Raiko" ],
      "venue" : "In Advances in Neural Information Processing Systems",
      "citeRegEx" : "Rasmus et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Rasmus et al\\.",
      "year" : 2015
    }, {
      "title" : "Training deep neural networks on noisy labels with bootstrapping",
      "author" : [ "Scott E. Reed", "Honglak Lee", "Dragomir Anguelov", "Christian Szegedy", "Dumitru Erhan", "Andrew Rabinovich" ],
      "venue" : "CoRR, abs/1412.6596,",
      "citeRegEx" : "Reed et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Reed et al\\.",
      "year" : 2014
    }, {
      "title" : "Mutual exclusivity loss for semi-supervised deep learning",
      "author" : [ "Mehdi Sajjadi", "Mehran Javanmardi", "Tolga Tasdizen" ],
      "venue" : "In 2016 IEEE International Conference on Image Processing,",
      "citeRegEx" : "Sajjadi et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Sajjadi et al\\.",
      "year" : 2016
    }, {
      "title" : "Regularization with stochastic transformations and perturbations for deep semi-supervised learning",
      "author" : [ "Mehdi Sajjadi", "Mehran Javanmardi", "Tolga Tasdizen" ],
      "venue" : "In Advances in Neural Information Processing Systems",
      "citeRegEx" : "Sajjadi et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Sajjadi et al\\.",
      "year" : 2016
    }, {
      "title" : "Weight normalization: A simple reparameterization to accelerate training of deep neural networks",
      "author" : [ "Tim Salimans", "Diederik P. Kingma" ],
      "venue" : null,
      "citeRegEx" : "Salimans and Kingma.,? \\Q2016\\E",
      "shortCiteRegEx" : "Salimans and Kingma.",
      "year" : 2016
    }, {
      "title" : "Improved techniques for training",
      "author" : [ "Tim Salimans", "Ian J. Goodfellow", "Wojciech Zaremba", "Vicki Cheung", "Alec Radford", "Xi Chen" ],
      "venue" : "GANs. CoRR,",
      "citeRegEx" : "Salimans et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Salimans et al\\.",
      "year" : 2016
    }, {
      "title" : "Transformation Invariance in Pattern Recognition ",
      "author" : [ "Patrice Y. Simard", "Yann A. LeCun", "John S. Denker", "Bernard Victorri" ],
      "venue" : "Tangent Distance and Tangent Propagation,",
      "citeRegEx" : "Simard et al\\.,? \\Q1998\\E",
      "shortCiteRegEx" : "Simard et al\\.",
      "year" : 1998
    }, {
      "title" : "Swapout: Learning an ensemble of deep architectures",
      "author" : [ "Saurabh Singh", "Derek Hoiem", "David A. Forsyth" ],
      "venue" : null,
      "citeRegEx" : "Singh et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Singh et al\\.",
      "year" : 2016
    }, {
      "title" : "Unsupervised and semi-supervised learning with categorical generative adversarial networks",
      "author" : [ "Jost Tobias Springenberg" ],
      "venue" : "In Proc. International Conference on Learning Representations (ICLR),",
      "citeRegEx" : "Springenberg.,? \\Q2016\\E",
      "shortCiteRegEx" : "Springenberg.",
      "year" : 2016
    }, {
      "title" : "Striving for simplicity: The all convolutional net",
      "author" : [ "Jost Tobias Springenberg", "Alexey Dosovitskiy", "Thomas Brox", "Martin A. Riedmiller" ],
      "venue" : "CoRR, abs/1412.6806,",
      "citeRegEx" : "Springenberg et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Springenberg et al\\.",
      "year" : 2014
    }, {
      "title" : "80 million tiny images: A large data set for nonpara",
      "author" : [ "A. Torralba", "R. Fergus", "W.T. Freeman" ],
      "venue" : "expressions. CoRR,",
      "citeRegEx" : "Torralba et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Torralba et al\\.",
      "year" : 2016
    }, {
      "title" : "Regularization of neural",
      "author" : [ "Li Wan", "Matthew Zeiler", "Sixin Zhang", "Yann L. Cun", "Rob Fergus" ],
      "venue" : null,
      "citeRegEx" : "Wan et al\\.,? \\Q1958\\E",
      "shortCiteRegEx" : "Wan et al\\.",
      "year" : 1958
    }, {
      "title" : "Bootstrapping via graph propagation",
      "author" : [ "Max Whitney", "Anoop Sarkar" ],
      "venue" : "In Proceedings of the 50th",
      "citeRegEx" : "Whitney and Sarkar.,? \\Q2013\\E",
      "shortCiteRegEx" : "Whitney and Sarkar.",
      "year" : 2013
    }, {
      "title" : "A NETWORK ARCHITECTURE, TEST SETUP, AND TRAINING PARAMETERS Table 5 details the network architecture used in all of our tests. It is heavily inspired by ConvPoolCNN-C (Springenberg et al., 2014) and the improvements made by Salimans",
      "author" : [ "He" ],
      "venue" : null,
      "citeRegEx" : "He,? \\Q2002\\E",
      "shortCiteRegEx" : "He",
      "year" : 2002
    }, {
      "title" : "confirmed from the authors). This kind of stratification might further improve the convergence of our methods as well. Tiny Images, extra data from restricted categories The restricted extra data in Section 3.3 was extracted from Tiny Images by picking all images with labels corresponding to the 100 categories used in CIFAR-100. As the Tiny Images dataset does not contain CIFAR-100 categories aquar",
      "author" : [ "e.g. Rasmus" ],
      "venue" : null,
      "citeRegEx" : "Rasmus,? \\Q2015\\E",
      "shortCiteRegEx" : "Rasmus",
      "year" : 2015
    } ],
    "referenceMentions" : [ {
      "referenceID" : 5,
      "context" : ", 2013), or stochastic depth (Huang et al., 2016) regularization methods, and in swapout networks (Singh et al.",
      "startOffset" : 29,
      "endOffset" : 49
    }, {
      "referenceID" : 22,
      "context" : ", 2016) regularization methods, and in swapout networks (Singh et al., 2016), where training always focuses on a particular subset of the network, and thus the complete network can be seen as an implicit ensemble of such trained sub-networks.",
      "startOffset" : 56,
      "endOffset" : 76
    }, {
      "referenceID" : 15,
      "context" : "The recently introduced transform/stability loss of Sajjadi et al. (2016b) is based on the same principle as our work, and the Π-model can be seen as a special case of it.",
      "startOffset" : 52,
      "endOffset" : 75
    }, {
      "referenceID" : 15,
      "context" : "The Π-model can also be seen as a simplification of the Γ-model of the ladder network by Rasmus et al. (2015), a previously presented network architecture for semi-supervised learning.",
      "startOffset" : 89,
      "endOffset" : 110
    }, {
      "referenceID" : 15,
      "context" : "The Π-model can also be seen as a simplification of the Γ-model of the ladder network by Rasmus et al. (2015), a previously presented network architecture for semi-supervised learning. Our temporal ensembling method has connections to the bootstrapping method of Reed et al. (2014) targeted for training with noisy labels.",
      "startOffset" : 89,
      "endOffset" : 282
    }, {
      "referenceID" : 4,
      "context" : "By comparing the entire output vectors zi and z̃i, we effectively ask the “dark knowledge” (Hinton et al., 2015) between the two evaluations to be close, which is a much stronger requirement compared to asking that only the final classification remains the same, which is what happens in traditional training.",
      "startOffset" : 91,
      "endOffset" : 112
    }, {
      "referenceID" : 4,
      "context" : "By comparing the entire output vectors zi and z̃i, we effectively ask the “dark knowledge” (Hinton et al., 2015) between the two evaluations to be close, which is a much stronger requirement compared to asking that only the final classification remains the same, which is what happens in traditional training. It is important to notice that, because of dropout regularization, the network output during training is a stochastic variable. Thus two evaluations of the same input xi under same network weights θ yield different results. In addition, Gaussian noise and augmentations such as random translation are evaluated twice, resulting in additional variation. The combination of these effects explains the difference between the prediction vectors zi and z̃i. This difference can be seen as an error in classification, given that the original input xi was the same, and thus minimizing it is a reasonable goal. In our implementation, the unsupervised loss weighting function w(t) ramps up, starting from zero, along a Gaussian curve during the first 80 training epochs. See Appendix A for further details about this and other training parameters. In the beginning the total loss and the learning gradients are thus dominated by the supervised loss component, i.e., the labeled data only. We have found it to be very important that the ramp-up of the unsupervised loss component is slow enough—otherwise, the network gets easily stuck in a degenerate solution where no meaningful classification of the data is obtained. Our approach is somewhat similar to the Γ-model of the ladder network by Rasmus et al. (2015), but conceptually simpler.",
      "startOffset" : 92,
      "endOffset" : 1616
    }, {
      "referenceID" : 15,
      "context" : "15 Conv-Large, Γ-model (Rasmus et al., 2015) 20.",
      "startOffset" : 23,
      "endOffset" : 44
    }, {
      "referenceID" : 23,
      "context" : "47 CatGAN (Springenberg, 2016) 19.",
      "startOffset" : 10,
      "endOffset" : 30
    }, {
      "referenceID" : 15,
      "context" : "15 Conv-Large, Γ-model (Rasmus et al., 2015) 20.40± 0.47 CatGAN (Springenberg, 2016) 19.58± 0.58 GAN of Salimans et al. (2016) 18.",
      "startOffset" : 24,
      "endOffset" : 127
    }, {
      "referenceID" : 8,
      "context" : "03 DGN (Kingma et al., 2014) 36.",
      "startOffset" : 7,
      "endOffset" : 28
    }, {
      "referenceID" : 12,
      "context" : "10 Virtual Adversarial (Miyato et al., 2016) 24.",
      "startOffset" : 23,
      "endOffset" : 44
    }, {
      "referenceID" : 8,
      "context" : "03 DGN (Kingma et al., 2014) 36.02± 0.10 Virtual Adversarial (Miyato et al., 2016) 24.63 ADGM (Maaløe et al., 2016) 22.86 SDGM (Maaløe et al., 2016) 16.61± 0.24 GAN of Salimans et al. (2016) 18.",
      "startOffset" : 8,
      "endOffset" : 191
    }, {
      "referenceID" : 2,
      "context" : "They provide results only for a fairly extreme set of augmentations (translations, flipping, rotations, stretching, and shearing) on top of fractional max pooling (Graham, 2014), which introduces random, local stretching inside the network, and is known to improve classification results substantially.",
      "startOffset" : 163,
      "endOffset" : 177
    }, {
      "referenceID" : 16,
      "context" : "A principled comparison with Sajjadi et al. (2016b) is difficult due to several reasons.",
      "startOffset" : 29,
      "endOffset" : 52
    }, {
      "referenceID" : 17,
      "context" : "official 73257 training examples following Salimans et al. (2016). Even with this choice our error rate with all labels is only 3.",
      "startOffset" : 43,
      "endOffset" : 66
    }, {
      "referenceID" : 17,
      "context" : "official 73257 training examples following Salimans et al. (2016). Even with this choice our error rate with all labels is only 3.05% without augmentation. Table 2 compares our method to the previous state-of-the-art. With the most commonly used 1000 labels we observe an improvement of 2.7 percentage points, from 8.11% to 5.43% without augmentation, and further to 4.42% with standard augmentations. We also investigated the behavior with 500 labels, where we obtained an error rate less than half of Salimans et al. (2016) without augmentations, with a significantly lower standard deviation as well.",
      "startOffset" : 43,
      "endOffset" : 526
    }, {
      "referenceID" : 16,
      "context" : "In SVHN Sajjadi et al. (2016b) provide results without augmentation, with the caveat that they use fractional max pooling, which is a very augmentation-like technique due to the random, local stretching it introduces inside the network.",
      "startOffset" : 8,
      "endOffset" : 31
    }, {
      "referenceID" : 9,
      "context" : "69% from Lee et al. (2015)), this gap is quite surprising, and leads us to conclude that fractional max pooling leads to a powerful augmentation of the dataset, well beyond what simple translations can achieve.",
      "startOffset" : 9,
      "endOffset" : 27
    }, {
      "referenceID" : 9,
      "context" : "When all labels are used for traditional supervised training, our network approximately matches the state-of-the-art error rate for a single model in CIFAR-10 with augmentation (Lee et al., 2015; Mishkin & Matas, 2016) at 6.",
      "startOffset" : 177,
      "endOffset" : 218
    }, {
      "referenceID" : 21,
      "context" : "For further analysis about the importance of the gradient of the mapping function, see Simard et al. (1998).",
      "startOffset" : 87,
      "endOffset" : 108
    }, {
      "referenceID" : 15,
      "context" : "Γ-model is a subset of a ladder network (Rasmus et al., 2015) that introduces lateral connections into an encoder-decoder type network architecture, targeted at semi-supervised learning.",
      "startOffset" : 40,
      "endOffset" : 61
    }, {
      "referenceID" : 0,
      "context" : "As such, their technique follows the general pseudo-ensemble agreement (PEA) regularization framework of Bachman et al. (2014). In addition, they employ a mutual exclusivity loss term (Sajjadi et al.",
      "startOffset" : 105,
      "endOffset" : 127
    }, {
      "referenceID" : 0,
      "context" : "As such, their technique follows the general pseudo-ensemble agreement (PEA) regularization framework of Bachman et al. (2014). In addition, they employ a mutual exclusivity loss term (Sajjadi et al., 2016a) that we do not use. Our Π-model can be seen as a special case of the transform/stability loss obtained by setting n = 2. The computational cost of training with transform/stability loss increases linearly as a function of n, whereas the efficiency of our temporal ensembling technique remains constant regardless of how large effective ensemble we obtain via the averaging of previous epochs’ predictions. In bootstrap aggregating, or bagging, multiple networks are trained independently based on subsets of training data (Breiman, 1996). This results in an ensemble that is more stable and accurate than the individual networks. Our approach can be seen as pulling the predictions from an implicit ensemble that is based on a single network, and the variability is a result of evaluating it under different dropout and augmentation conditions instead of training on different subsets of data. In work parallel to ours, Huang et al. (2017) store multiple snapshots of the network during training, hopefully corresponding to different local minima, and use them as an explicit ensemble.",
      "startOffset" : 105,
      "endOffset" : 1148
    }, {
      "referenceID" : 14,
      "context" : "(2014) and Patrini et al. (2016). In this context of noisy labels, Reed et al.",
      "startOffset" : 11,
      "endOffset" : 33
    }, {
      "referenceID" : 14,
      "context" : "(2014) and Patrini et al. (2016). In this context of noisy labels, Reed et al. (2014) presented a simple bootstrapping method that trains a classifier with the target composed of a convex combination of the previous epoch output and the known but potentially noisy labels.",
      "startOffset" : 11,
      "endOffset" : 86
    }, {
      "referenceID" : 23,
      "context" : "Generative Adversarial Networks (GAN) have been recently used for semi-supervised learning with promising results (Maaløe et al., 2016; Springenberg, 2016; Odena, 2016; Salimans et al., 2016).",
      "startOffset" : 114,
      "endOffset" : 191
    }, {
      "referenceID" : 13,
      "context" : "Generative Adversarial Networks (GAN) have been recently used for semi-supervised learning with promising results (Maaløe et al., 2016; Springenberg, 2016; Odena, 2016; Salimans et al., 2016).",
      "startOffset" : 114,
      "endOffset" : 191
    }, {
      "referenceID" : 20,
      "context" : "Generative Adversarial Networks (GAN) have been recently used for semi-supervised learning with promising results (Maaløe et al., 2016; Springenberg, 2016; Odena, 2016; Salimans et al., 2016).",
      "startOffset" : 114,
      "endOffset" : 191
    } ],
    "year" : 2017,
    "abstractText" : "In this paper, we present a simple and efficient method for training deep neural networks in a semi-supervised setting where only a small portion of training data is labeled. We introduce self-ensembling, where we form a consensus prediction of the unknown labels using the outputs of the network-in-training on different epochs, and most importantly, under different regularization and input augmentation conditions. This ensemble prediction can be expected to be a better predictor for the unknown labels than the output of the network at the most recent training epoch, and can thus be used as a target for training. Using our method, we set new records for two standard semi-supervised learning benchmarks, reducing the (non-augmented) classification error rate from 18.44% to 7.05% in SVHN with 500 labels and from 18.63% to 16.55% in CIFAR-10 with 4000 labels, and further to 5.12% and 12.16% by enabling the standard augmentations. We additionally obtain a clear improvement in CIFAR-100 classification accuracy by using random images from the Tiny Images dataset as unlabeled extra inputs during training. Finally, we demonstrate good tolerance to incorrect labels.",
    "creator" : "TeX"
  }
}