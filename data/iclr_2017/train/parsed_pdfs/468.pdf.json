{
  "name" : "468.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "NETWORK QUANTIZATION", "Yoojin Choi", "Mostafa El-Khamy" ],
    "emails" : [ "yoojin.c@samsung.com", "mostafa.e@samsung.com", "jungwon2.lee@samsung.com" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "Deep neural networks have emerged to be the state-of-the-art in the field of machine learning for image classification, object detection, speech recognition, natural language processing, and machine translation (LeCun et al., 2015). The substantial progress of neural networks however comes with high cost of computations and hardware resources resulting from a large number of parameters. For example, Krizhevsky et al. (2012) came up with a deep convolutional neural network consisting of 61 million parameters and won the ImageNet competition in 2012. It is followed by deeper neural networks with even larger numbers of parameters, e.g., Simonyan & Zisserman (2014).\nThe large sizes of deep neural networks make it difficult to deploy them on resource-limited devices, e.g., mobile or portable devices, and network compression is of great interest in recent years to reduce computational cost and memory requirements for deep neural networks. Our interest in this paper is mainly on curtailing the size of the storage (memory) for network parameters (weights and biases). In particular, we focus on the network size compression by reducing the number of distinct network parameters by quantization.\nBesides network quantization, network pruning has been studied for network compression to remove redundant parameters permanently from neural networks (Mozer & Smolensky, 1989; LeCun et al., 1989; Hassibi & Stork, 1993; Han et al., 2015b; Lebedev & Lempitsky, 2016; Wen et al., 2016). Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015). Moreover, similar to network quantization, low-precision network implementation has been examined in Vanhoucke et al. (2011); Courbariaux et al. (2014); Anwar et al. (2015); Gupta et al. (2015); Lin et al. (2015a). Some extremes of low-precision neural networks consisting of binary or ternary parameters can be found in Courbariaux et al. (2015); Lin et al. (2015b); Rastegari et al. (2016). We note that these are different types of network compression techniques, which can be employed on top of each other.\nThemost related work to our investigation in this paper can be found in Gong et al. (2014); Han et al. (2015a), where a conventional quantization method using k-means clustering is employed for network quantization. This conventional approach however is proposed with little consideration for the impact of quantization errors on the neural network performance loss and no effort to optimize the quantization procedure for a given compression ratio constraint. In this paper, we reveal the suboptimality of this conventional method and newly design quantization schemes for neural networks. In particular, we formulate an optimization problem to minimize the network performance loss due to quantization given a compression ratio constraint and find efficient quantization methods for neural networks.\nThe main contribution of the paper can be summarized as follows:\n• It is derived that the performance loss due to quantization in neural networks can be quantified approximately by the Hessian-weighted distortion measure. Then, Hessian-weighted k-means clustering is proposed for network quantization to minimize the performance loss.\n• It is identified that the optimization problem for network quantization provided a compression ratio constraint can be reduced to an entropy-constrained scalar quantization (ECSQ) problem when optimal variable-length binary coding is employed after quantization. Two efficient heuristic solutions for ECSQ are proposed for network quantization, i.e., uniform quantization and an iterative solution similar to Lloyd’s algorithm.\n• As an alternative of Hessian, it is proposed to utilize some function (e.g., square root) of the second moment estimates of gradients when the Adam (Kingma & Ba, 2014) stochastic gradient decent (SGD) optimizer is used in training. The advantage of using this alternative is that it is computed while training and can be obtained at the end of training at no additional cost.\n• It is shown how the proposed network quantization schemes can be applied for quantizing network parameters of all layers together at once, rather than layer-by-layer network quantization in Gong et al. (2014); Han et al. (2015a). This follows from our investigation that Hessian-weighting can handle the different impact of quantization errors properly not only within layers but also across layers. Moreover, quantizing network parameters of all layers together, one can even avoid layer-by-layer compression rate optimization.\nThe rest of the paper is organized as follows. In Section 2, we define the network quantization problem and review the conventional quantization method using k-means clustering. Section 3 discusses Hessian-weighted network quantization. Our entropy-constrained network quantization schemes follow in Section 4. Finally, experiment results and conclusion can be found in Section 5 and Section 6, respectively."
    }, {
      "heading" : "2 NETWORK QUANTIZATION",
      "text" : "We consider a neural network that is already trained, pruned if employed and fine-tuned before quantization. If no network pruning is employed, all parameters in a network are subject to quantization. For pruned networks, our focus is on quantization of unpruned parameters.\nThe goal of network quantization is to quantize (unpruned) network parameters in order to reduce the size of the storage for them while minimizing the performance degradation due to quantization. For network quantization, network parameters are grouped into clusters. Parameters in the same cluster share their quantized value, which is the representative value (i.e., cluster center) of the cluster they belong to. After quantization, lossless binary coding follows to encode quantized parameters into binary codewords to store instead of actual parameter values. Either fixed-length binary coding or variable-length binary coding, e.g., Huffman coding, can be employed to this end."
    }, {
      "heading" : "2.1 COMPRESSION RATIO",
      "text" : "Suppose that we have total N parameters in a neural network. Before quantization, each parameter is assumed to be of b bits. For quantization, we partition the network parameters into k clusters. Let Ci be the set of network parameters in cluster i and let bi be the number of bits of the codeword assigned to the network parameters in cluster i for 1 ≤ i ≤ k. For a lookup table to decode quantized\nvalues from their binary encoded codewords, we store k binary codewords (bi bits for 1 ≤ i ≤ k) and corresponding quantized values (b bits for each). The compression ratio is then given by\nCompression ratio = Nb\n∑k i=1(|Ci|+ 1)bi + kb\n. (1)\nObserve in (1) that the compression ratio depends not only on the number of clusters but also on the sizes of the clusters and the lengths of the binary codewords assigned to them, in particular, when a variable-length code is used for encoding quantized values. For fixed-length codes, however, all codewords are of the same length, i.e., bi = ⌈log2 k⌉ for all 1 ≤ i ≤ k, and thus the compression ratio is reduced to only a function of the number of clusters, i.e., k, assuming thatN and b are given."
    }, {
      "heading" : "2.2 K-MEANS CLUSTERING",
      "text" : "Provided network parameters {wi} N i=1 to quantize, k-means clustering partitions them into k disjoint sets (clusters), denoted by C1, C2, . . . , Ck, while minimizing the mean square quantization error (MSQE) as follows:\nargmin C1,C2,...,Ck\nk∑\ni=1\n∑\nw∈Ci\n|w − ci| 2, where ci =\n1\n|Ci|\n∑\nw∈Ci\nw. (2)\nWe observe two issues with employing k-means clustering for network quantization.\n• First, although k-means clustering minimizes the MSQE, it does not imply that k-means clustering minimizes the performance loss due to quantization as well in neural networks. K-means clustering treats quantization errors from all network parameters with equal importance. However, quantization errors from some network parameters may degrade the performance more significantly that the others. Thus, for minimizing the loss due to quantization in neural networks, one needs to take this dissimilarity into account.\n• Second, k-means clustering does not consider any compression ratio constraint. It simply minimizes its distortion measure for a given number of clusters, i.e., for k clusters. This is however suboptimal when variable-length coding follows since the compression ratio depends not only on the number of clusters but also on the sizes of the clusters and assigned codeword lengths to them, which are determined by the binary coding scheme employed after clustering. Therefore, for the optimization of network quantization given a compression ratio constraint, one need to take the impact of binary coding into account, i.e., we need to solve the quantization problem under the actual compression ratio constraint imposed by the specific binary coding scheme employed after clustering."
    }, {
      "heading" : "3 HESSIAN-WEIGHTED NETWORK QUANTIZATION",
      "text" : "In this section, we analyze the impact of quantization errors on the neural network loss function and derive that the Hessian-weighted distortion measure is a relevant objective function for network quantization in order to minimize the quantization loss locally. Moreover, from this analysis, we propose Hessian-weighted k-means clustering for network quantization to minimize the performance loss due to quantization in neural networks."
    }, {
      "heading" : "3.1 NETWORK MODEL",
      "text" : "We consider a general non-linear neural network that yields outputy = f(x;w) from input x, where w = [w1 · · · wN ]\nT is the vector consisting of all trainable network parameters in the network; N is the total number of trainable parameters in the network. A loss function loss(y, ŷ) is defined as the objective function that we aim to minimize in average, where ŷ = ŷ(x) is the expected (groundtruth) output for input x. Cross entropy or mean square error are typical examples of a loss function. Given a training data set Xtrain, we optimize network parameters by solving the following problem, e.g., approximately by using a stochastic gradient descent (SGD) method with mini-batches:\nŵ = argmin w\nL(Xtrain;w), where L(X ;w) = 1\n|X |\n∑\nx∈X\nloss(f(x;w), ŷ(x))."
    }, {
      "heading" : "3.2 HESSIAN-WEIGHTED QUANTIZATION ERROR",
      "text" : "The average loss function L(X ;w) can be expanded by Taylor series with respect tow as follows:\nδL(X ;w) = g(w)T δw + 1\n2 δwTH(w)δw +O(‖δw‖3), (3)\nwhere\ng(w) = ∂L(X ;w)\n∂w , H(w) =\n∂2L(X ;w)\n∂w2 ;\nthe square matrix H(w) consisting of second-order partial derivatives is called as Hessian matrix or Hessian. Assume that the loss function has reached to one of its local minima, at w = ŵ, after training. At local minima, gradients are all zero, i.e., we have g(ŵ) = 0, and thus the first term in the right-hand side of (3) can be neglected at w = ŵ. The third term in the right-hand side of (3) is also ignored under the assumption that the average loss function is approximately quadratic at the local minimum w = ŵ. Finally, for simplicity, we approximate the Hessian matrix as a diagonal matrix by setting its off-diagonal terms to be zero. Then, it follows from (3) that\nδL(X ; ŵ) ≈ 1\n2\nN∑\ni=1\nhii(ŵ)|δŵi| 2, (4)\nwhere hii(ŵ) is the second-order partial derivative of the average loss function with respect to wi evaluated atw = ŵ, which is the i-th diagonal element of the Hessian matrixH(ŵ).\nNow, we connect (4) with the problem of network quantization by treating δŵi as the quantization error of network parameter wi at its local optimum wi = ŵi, i.e.,\nδŵi = w̄i − ŵi, (5)\nwhere w̄i is a quantized value of ŵi. Finally, combining (4) and (5), we derive that the local impact of quantization on the average loss function at w = ŵ can be quantified approximately as follows:\nδL(X ; ŵ) ≈ 1\n2\nN∑\ni=1\nhii(ŵ)|ŵi − w̄i| 2. (6)\nAt a local minimum, the diagonal elements of Hessian, i.e., hii(ŵ)’s, are all non-negative and thus the summation in (6) is always additive, implying that the average loss function either increases or stays the same. Therefore, the performance degradation due to quantization of a neural network can be measured approximately by the Hessian-weighted distortion as shown in (6). Further discussion on the Hessian-weighted distortion measure can be found in Appendix A.1."
    }, {
      "heading" : "3.3 HESSIAN-WEIGHTED K-MEANS CLUSTERING",
      "text" : "For notational simplicity, we use wi ≡ ŵi and hii ≡ hii(ŵ) from now on. The optimal clustering that minimizes the Hessian-weighted distortion measure is given by\nargmin C1,C2,...,Ck\nk∑\nj=1\n∑\nwi∈Cj\nhii|wi − cj | 2, where cj =\n∑\nwi∈Cj hiiwi\n∑\nwi∈Cj hii\n. (7)\nWe call this as Hessian-weighted k-means clustering. Observe in (7) that we give a larger penalty for a network parameter in defining the distortion measure for clustering when its second-order partial derivative is larger, in order to avoid a large deviation from its original value, since the impact on the loss function due to quantization is expected to be larger for that parameter.\nHessian-weighted k-means clustering is locally optimal in minimizing the quantization loss when fixed-length binary coding follows, where the compression ratio solely depends on the number of clusters as shown in Section 2.1. Similar to the conventional k-means clustering, solving this optimization is not easy, but Lloyd’s algorithm is still applicable as an efficient heuristic solution for this problem if Hessian-weighted means are used as cluster centers instead of non-weighted regular means."
    }, {
      "heading" : "3.4 HESSIAN COMPUTATION",
      "text" : "For obtaining Hessian, one needs to evaluate the second-order partial derivative of the average loss function with respect to each of network parameters, i.e., we need to calculate\nhii(ŵ) = ∂2L(X ;w)\n∂w2i\n∣ ∣ ∣ ∣ w=ŵ = 1 |X | ∂2 ∂w2i ∑\nx∈X\nloss(f(x;w), ŷ(x)) ∣ ∣ ∣ ∣ w=ŵ . (8)\nRecall that we are interested in only the diagonal elements of Hessian. An efficient way of computing the diagonal of Hessian is presented in Le Cun (1987); Becker & Le Cun (1988) and it is based on the back propagation method that is similar to the back propagation algorithm used for computing first-order partial derivatives (gradients). That is, computing the diagonal of Hessian is of the same order of complexity as computing gradients.\nHessian computation and our network quantization are performed after completing network training. For the data set X used to compute Hessian in (8), we can either reuse a training data set or use some other data set, e.g., validation data set. We observed from our experiments that even using a small subset of the training or validation data set is sufficient to yield good approximation of Hessian for network quantization."
    }, {
      "heading" : "3.5 ALTERNATIVE OF HESSIAN",
      "text" : "Although there is an efficient way to obtain the diagonal of Hessian as discussed in the previous subsection, Hessian computation is not free. In order to avoid this additional Hessian computation, we propose to use an alternative metric instead of Hessian. In particular, we consider neural networks trained with the Adam SGD optimizer (Kingma & Ba, 2014) and propose to use some function (e.g., square root) of the second moment estimates of gradients as an alternative of Hessian.\nThe Adam algorithm computes adaptive learning rates for individual network parameters from the first and second moment estimates of gradients. We compare the Adam method to Newton’s optimization method using Hessian and notice that the second moment estimates of gradients in the Adam method act like the Hessian in Newton’s method. This observation leads us to use some function (e.g., square root) of the second moment estimates of gradients as an alternative of Hessian.\nThe advantage of using the second moment estimates from the Adam method is that they are computed while training and we can obtain them at the end of training at no additional cost. It makes Hessian-weighting more feasible for deep neural networks, which have millions of parameters. We note that similar quantities can be found and used for other SGD optimization methods using adaptive learning rates, e.g., AdaGrad (Duchi et al., 2011), Adadelta (Zeiler, 2012) and RMSProp (Tieleman & Hinton, 2012)."
    }, {
      "heading" : "3.6 QUANTIZATION OF ALL LAYERS",
      "text" : "We propose quantizing the network parameters of all layers in a neural network together at once by taking Hessian-weight into account. Layer-by-layer quantization was examined in the previous work (Gong et al., 2014; Han et al., 2015a). However, e.g., in Han et al. (2015a), a larger number of bits (a larger number of clusters) are assigned to convolutional layers than fully-connected layers, which implies that they heuristically treat convolutional layers more importantly. This follows from the fact that the impact of quantization errors on the performance varies significantly across layers; some layers, e.g., convolutional layers, may be more important than the others. This concern is exactly what we can address by Hessian-weighting.\nHessian-weighting properly handles the different impact of quantization errors not only within layers but also across layers and thus it can be employed for quantizing all layers of a network together. The impact of quantization errors may vary more substantially across layers than within layers. Thus, Hessian-weighting may show more benefit in deeper neural networks. We note that Hessianweighting can still provide gain even for layer-by-layer quantization since it can address the different impact of the quantization errors of network parameters within each layer as well.\nRecent neural networks are getting deeper, e.g., see Szegedy et al. (2015a;b); He et al. (2015). For such deep neural networks, quantizing network parameters of all layers together is even more advantageous since we can avoid layer-by-layer compression rate optimization. Optimizing compression\nratios jointly across all individual layers (to maximize the overall compression ratio for a network) requires exponential time complexity with respect to the number of layers. This is because the total number of possible combinations of compression ratios for individual layers increases exponentially as the number of layers increases."
    }, {
      "heading" : "4 ENTROPY-CONSTRAINED NETWORK QUANTIZATION",
      "text" : "In this section, we investigate how to solve the network quantization problem under a constraint on the compression ratio. In designing network quantization schemes, we not only want to minimize the performance loss but also want to maximize the compression ratio. In Section 3, we explored how to quantify and minimize the loss due to quantization. In this section, we investigate how to take the compression ratio into account properly in the optimization of network quantization."
    }, {
      "heading" : "4.1 ENTROPY CODING",
      "text" : "After quantizing network parameters by clustering, lossless data compression by variable-length binary coding can be followed for compressing quantized values. There is a set of optimal codes that achieve the minimum average codeword length for a given source. Entropy is the theoretical limit of the average codeword length per symbol that we can achieve by lossless data compression, proved by Shannon (see, e.g., Cover & Thomas (2012, Section 5.3)). It is known that optimal codes achieve this limit with some overhead less than 1 bit when only integer-length codewords are allowed. So optimal coding is also called as entropy coding. Huffman coding is one of entropy coding schemes commonly used when the source distribution is provided (see, e.g., Cover & Thomas (2012, Section 5.6)), or can be estimated."
    }, {
      "heading" : "4.2 ENTROPY-CONSTRAINED SCALAR QUANTIZATION (ECSQ)",
      "text" : "Considering a compression ratio constraint in network quantization, we need to solve the clustering problem in (2) or (7) under the compression ratio constraint given by\nCompression ratio = b\nb̄+ ( ∑k i=1 bi + kb)/N > C, where b̄ =\n1\nN\nk∑\ni=1\n|Ci|bi, (9)\nwhich follows from (1). This optimization problem is too complex to solve for any arbitrary variablelength binary code since the average codeword length b̄ can be arbitrary. However, we identify that it can be simplified if optimal codes, e.g., Huffman codes, are assumed to be used. In particular, optimal coding closely achieves the lower limit of the average source code length, i.e., entropy, and then we approximately have\nb̄ ≈ H = −\nk∑\ni=1\npi log2 pi, (10)\nwhere H is the entropy of the quantized network parameters after clustering (i.e., source), given that pi = |Ci|/N is the ratio of the number of network parameters in cluster Ci to the number of all network parameters (i.e., source distribution). Moreover, assuming thatN ≫ k, we have\n1\nN\n( k∑\ni=1\nbi + kb\n)\n≈ 0, (11)\nin (9). From (10) and (11), the constraint in (9) can be altered to an entropy constraint given by\nH = −\nk∑\ni=1\npi log2 pi < R,\nwhere R ≈ b/C. In summary, assuming that optimal coding is employed after clustering, one can approximately replace a compression ratio constraint with an entropy constraint for the clustering output. The network quantization problem is then translated into a quantization problem with an entropy constraint, which is called as entropy-constrained scalar quantization (ECSQ) in information theory. Two efficient heuristic solutions for ECSQ are proposed for network quantization in the following subsections, i.e., uniform quantization and an iterative solution similar to Lloyd’s algorithm for k-means clustering."
    }, {
      "heading" : "4.3 UNIFORM QUANTIZATION",
      "text" : "It is shown in Gish & Pierce (1968) that the uniform quantizer is asymptotically optimal in minimizing the mean square quantization error for any random source with a reasonably smooth density function as the resolution becomes infinite, i.e., as the number of clusters k → ∞. This asymptotic result leads us to come up with a very simple but efficient network quantization scheme as follows:\n1. We first set uniformly spaced thresholds and divide network parameters into clusters.\n2. After determining clusters, their quantized values (cluster centers) are obtained by taking the mean of network parameters in each cluster.\nNote that one can use Hessian-weighted mean instead of non-weighted mean in computing cluster centers in the second step above in order to take the benefit of Hessian-weighting. A performance comparison of uniform quantization with non-weighted mean and uniform quantization with Hessian-weighted mean can be found in Appendix A.2.\nAlthough uniform quantization is a straightforward method, it has never been shown before in the literature that it is actually one of the most efficient quantization schemes for neural networks when optimal variable-length coding, e.g., Huffman coding, follows. We note that uniform quantization is not always good; it is inefficient for fixed-length coding, which is also first shown in this paper."
    }, {
      "heading" : "4.4 ITERATIVE ALGORITHM TO SOLVE ECSQ",
      "text" : "Another scheme proposed to solve the ECSQ problem for network quantization is an iterative algorithm, which is similar to Lloyd’s algorithm for k-means clustering. Although this iterative solution is more complicated than the uniform quantization in Section 4.3, it finds a local optimum for a given discrete source. An iterative algorithm to solve the general ECSQ problem is provided in Chou et al. (1989). We derive a similar iterative algorithm to solve the ECSQ problem for network quantization. The main difference from the method in Chou et al. (1989) is that we minimize the Hessian-weighted distortion measure instead of the non-weighted regular distortion measure for optimal quantization. The detailed algorithm and further discussion can be found in Appendix A.3."
    }, {
      "heading" : "5 EXPERIMENTS",
      "text" : "This section presents our experiment results for the proposed network quantization schemes in three exemplary convolutional neural networks: (a) LeNet (LeCun et al., 1998) for the MNIST data set, (b) ResNet (He et al., 2015) for the CIFAR-10 data set, and (c) AlexNet (Krizhevsky et al., 2012) for the ImageNet ILSVRC-2012 data set. Our experiments can be summarized as follows:\n• We employ the proposed network quantization methods to quantize all of network parameters in a network together at once, as discussed in Section 3.6.\n• We evaluate the performance of the proposed network quantization methods with and without network pruning. For a pruned model, we need to store not only the values of unpruned parameters but also their respective indexes (locations) in the original model. For the index information, we compute index differences between unpruned network parameters in the original model and further compress them by Huffman coding as in Han et al. (2015a).\n• For Hessian computation, 50,000 samples of the training set are reused. We also evaluate the performance when Hessian is computed with 1,000 samples only.\n• Finally, we evaluate the performance of our network quantization schemes using Hessian when its alternative is used instead, as discussed in Section 3.5. To this end, we retrain the considered neural networks with the Adam SGD optimizer and obtain the second moment estimates of gradients at the end of training. Then, we use the square roots of the second moment estimates instead of Hessian and evaluate the performance."
    }, {
      "heading" : "5.1 EXPERIMENT MODELS",
      "text" : "First, we evaluate our network quantization schemes for the MNIST data set with a simplified version of LeNet5 (LeCun et al., 1998), consisting of two convolutional layers and two fully-connected\nlayers followed by a soft-max layer. It has total 431,080 parameters and achieves 99.25% accuracy. For a pruned model, we prune 91% of the original network parameters and fine-tune the rest.\nSecond, we experiment our network quantization schemes for the CIFAR-10 data set (Krizhevsky, 2009) with a pre-trained 32-layer ResNet (He et al., 2015). The 32-layer ResNet consists of 464,154 parameters in total and achieves 92.58% accuracy. For a prunedmodel, we prune 80% of the original network parameters and fine-tune the rest.\nThird, we evaluate our network quantization schemes with AlexNet (Krizhevsky et al., 2012) for the ImageNet ILSVRC-2012 data set (Russakovsky et al., 2015). We obtain a pre-trainedAlexNet Caffe model, which achieves 57.16% top-1 accuracy. For a pruned model, we prune 89% parameters and fine-tune the rest. In fine-tuning, the Adam SGD optimizer is used in order to avoid the computation of Hessian by utilizing its alternative (see Section 3.5). However, the pruned model does not recover the original accuracy after fine-tuning with the Adam method; the top-1 accuracy recovered after pruning and fine-tuning is 56.00%. We are able to find a better pruned model achieving the original accuracy by pruning and retraining iteratively (Han et al., 2015b), which is however not used here."
    }, {
      "heading" : "5.2 EXPERIMENT RESULTS",
      "text" : "We first present the quantization results without pruning for 32-layer ResNet in Figure 1, where the accuracy of 32-layer ResNet is plotted against the average codeword length per network parameter after quantization. When fixed-length coding is employed, the proposed Hessian-weighted k-means clustering method performs the best, as expected. Observe that Hessian-weighted k-means clustering yields better accuracy than others even after fine-tuning. On the other hand, when Huffman coding is employed, uniform quantization and the iterative algorithm for ECSQ outperform Hessian-weighted k-means clustering and k-means clustering. However, these two ECSQ solutions underperformHessian-weighted k-means clustering and even k-means clustering when fixed-length coding is employed since they are optimized for optimal variable-length coding.\nFigure 2 shows the performance of Hessian-weighted k-means clustering when Hessian is computed with a small number of samples (1,000 samples). Observe that even using the Hessian computed with a small number of samples yields almost the same performance. We also show the performance of Hessian-weighted k-means clustering when an alternative of Hessian is used instead of Hessian as explained in Section 3.5. In particular, the square roots of the second moment estimates of gradients are used instead of Hessian, and using this alternative provides similar performance to using Hessian.\nIn Table 1, we summarize the compression ratios that we can achieve with different network quantization methods for pruned models. The original network parameters are 32-bit float numbers. Using the simple uniform quantization followed by Huffman coding, we achieve the compression ratios of 51.25, 22.17 and 40.65 (i.e., the compressed model sizes are 1.95%, 4.51% and 2.46% of the original model sizes) for LeNet, 32-layer ResNet and AlexNet, respectively, at no or marginal performance loss. Observe that the loss in the compressed AlexNet is mainly due to pruning. Here, we also compare our network quantization results to the ones in Han et al. (2015a). Note that layer-bylayer quantization with k-means clustering is evaluated in Han et al. (2015a) while our quantization schemes including k-means clustering are employed to quantize network parameters of all layers together at once (see Section 3.6)."
    }, {
      "heading" : "6 CONCLUSION",
      "text" : "This paper investigates the quantization problem of network parameters in deep neural networks. We identify the suboptimality of the conventional quantization method using k-means clustering and newly design network quantization schemes so that they can minimize the performance loss due to quantization given a compression ratio constraint. In particular, we analytically show that Hessian can be used as a measure of the importance of network parameters and propose to minimize Hessianweighted quantization errors in average for clustering network parameters to quantize. Hessianweighting is beneficial in quantizing all of the network parameters together at once since it can handle the different impact of quantization errors properly not only within layers but also across layers. Furthermore, we make a connection from the network quantization problem to the entropyconstrained data compression problem in information theory and push the compression ratio to the limit that information theory provides. Two efficient heuristic solutions are presented to this end, i.e., uniform quantization and an iterative solution for ECSQ. Our experiment results show that the proposed network quantization schemes provide considerable gain over the conventional method using k-means clustering, in particular for large and deep neural networks."
    }, {
      "heading" : "A APPENDIX",
      "text" : "A.1 FURTHER DISCUSSION ON THE HESSIAN-WEIGHTED QUANTIZATION ERROR\nThe diagonal approximation for Hessian simplifies the optimization problem as well as its solution for network quantization. This simplification comeswith some performance loss. We conjecture that the loss due to this approximation is small. The reason is that the contributions from off-diagonal terms are not always additive and their summationmay end up with a small value. However, diagonal terms are all non-negative and therefore their contributions are always additive. We do not verify this conjecture in this paper since solving the problem without diagonal approximation is too complex; we even need to compute the whole Hessian matrix, which is also too costly.\nObserve that the relation of the Hessian-weighted distortion measure to the quantization loss holds for any model for which the objective function can be approximated as a quadratic function with respect to the parameters to quantize in the model. Hence, the quantization methods proposed in this paper to minimize the Hessian-weighted distortion measure are not specific to neural networks but are generally applicable to quantization of parameters of any model whose objective function is locally quadratic with respect to its parameters approximately.\nFinally, we do not consider the interactions between quantization and retraining in our formulation in Section 3.2. We analyze the expected loss due to quantization assuming no further retraining and focus on finding optimal network quantization schemes that minimize the performance loss. In our experiments, however, we further fine-tune the quantized values (cluster centers) so that we can recover the loss due to quantization and improve the performance.\nA.2 EXPERIMENT RESULTS FOR UNIFORM QUANTIZATION\nWe compare uniform quantization with non-weighted mean and uniform quantization with Hessianweighted mean in Figure 3, which shows that uniform quantization with Hessian-weighted mean slightly outperforms uniform quantization with non-weighted mean.\nA.3 FURTHER DISCUSSION ON THE ITERATIVE ALGORITHM FOR ECSQ\nIn order to solve the ECSQ problem for network quantization, we define a Lagrangian cost function:\nJλ(C1, C2, . . . , Ck) = D + λH = 1\nN\nk∑\nj=1\n∑\nwi∈Cj\n(hii|wi − cj | 2 − λ log2 pj) ︸ ︷︷ ︸\n=dλ(i,j)\n, (12)\nwhere\nD = 1\nN\nk∑\nj=1\n∑\nwi∈Cj\nhii|wi − cj | 2, H = −\nk∑\nj=1\npj log2 pj .\nAlgorithm 1 Iterative solution for entropy-constrained network quantization\nInitialization: n ← 0 Initialize the centers of k clusters: c\n(0) 1 , . . . , c (0) k\nInitialize the proportions of k clusters (set all of them to be the same initially): p (0) 1 , . . . , p (0) k\nrepeat Assignment:\nfor all network parameters i = 1 → N do Assign wi to the cluster j that minimizes the individual Lagrangian cost as follows:\nC (n+1) l ← C (n+1) l ∪ {wi} for l = argmin\nj\n{\nhii|wi − c (n) j | 2 − λ log2 p (n) j\n}\nend for Update:\nfor all clusters j = 1 → k do Update the cluster center and the proportion of cluster j:\nc (n+1) j ←\n∑\nwi∈C (n+1) j hiiwi ∑\nwi∈C (n+1) j\nhii and p\n(n+1) j ←\n|C (n+1) j |\nN\nend for n ← n+ 1\nuntil Lagrangian cost function Jλ decreases less than some threshold\nThe entropy-constrained network quantization problem is then reduced to find k partitions (clusters) C1, C2, . . . , Ck that minimize the Lagrangian cost function as follows:\nargmin C1,C2,...,Ck Jλ(C1, C2, . . . , Ck).\nA heuristic iterative algorithm to solve this method of Lagrange multipliers for network quantization is presented in Algorithm 1. It is similar to Lloyd’s algorithm for k-means clustering. The key difference is how to partition network parameters at the assignment step. In Lloyd’s algorithm, the Euclidean distance (quantization error) is minimized. For ECSQ, the individual Lagrangian cost function, i.e., dλ(i, j) in (12), is minimized instead, which includes both quantization error and expected codeword length after entropy coding."
    } ],
    "references" : [ {
      "title" : "Improving the convergence of back-propagation learning with second order methods",
      "author" : [ "Sue Becker", "Yann Le Cun" ],
      "venue" : "In Proceedings of the Connectionist Models Summer School,",
      "citeRegEx" : "Becker and Cun.,? \\Q1988\\E",
      "shortCiteRegEx" : "Becker and Cun.",
      "year" : 1988
    }, {
      "title" : "Entropy-constrained vector quantization",
      "author" : [ "Philip A Chou", "Tom Lookabaugh", "Robert M Gray" ],
      "venue" : "IEEE Transactions on Acoustics, Speech, and Signal Processing,",
      "citeRegEx" : "Chou et al\\.,? \\Q1989\\E",
      "shortCiteRegEx" : "Chou et al\\.",
      "year" : 1989
    }, {
      "title" : "Training deep neural networks with low precision multiplications",
      "author" : [ "Matthieu Courbariaux", "Jean-Pierre David", "Yoshua Bengio" ],
      "venue" : "arXiv preprint arXiv:1412.7024,",
      "citeRegEx" : "Courbariaux et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Courbariaux et al\\.",
      "year" : 2014
    }, {
      "title" : "Binaryconnect: Training deep neural networks with binary weights during propagations",
      "author" : [ "Matthieu Courbariaux", "Yoshua Bengio", "Jean-Pierre David" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Courbariaux et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Courbariaux et al\\.",
      "year" : 2015
    }, {
      "title" : "Elements of information theory",
      "author" : [ "Thomas M Cover", "Joy A Thomas" ],
      "venue" : null,
      "citeRegEx" : "Cover and Thomas.,? \\Q2012\\E",
      "shortCiteRegEx" : "Cover and Thomas.",
      "year" : 2012
    }, {
      "title" : "Adaptive subgradient methods for online learning and stochastic optimization",
      "author" : [ "John Duchi", "Elad Hazan", "Yoram Singer" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "Duchi et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Duchi et al\\.",
      "year" : 2011
    }, {
      "title" : "Asymptotically efficient quantizing",
      "author" : [ "Herbert Gish", "John Pierce" ],
      "venue" : "IEEE Transactions on Information Theory,",
      "citeRegEx" : "Gish and Pierce.,? \\Q1968\\E",
      "shortCiteRegEx" : "Gish and Pierce.",
      "year" : 1968
    }, {
      "title" : "Compressing deep convolutional networks using vector quantization",
      "author" : [ "Yunchao Gong", "Liu Liu", "Ming Yang", "Lubomir Bourdev" ],
      "venue" : "arXiv preprint arXiv:1412.6115,",
      "citeRegEx" : "Gong et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Gong et al\\.",
      "year" : 2014
    }, {
      "title" : "Deep learning with limited numerical precision",
      "author" : [ "Suyog Gupta", "Ankur Agrawal", "Kailash Gopalakrishnan", "Pritish Narayanan" ],
      "venue" : "In Proceedings of the 32nd International Conference on Machine Learning,",
      "citeRegEx" : "Gupta et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Gupta et al\\.",
      "year" : 2015
    }, {
      "title" : "Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding",
      "author" : [ "Song Han", "Huizi Mao", "William J Dally" ],
      "venue" : "arXiv preprint arXiv:1510.00149,",
      "citeRegEx" : "Han et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Han et al\\.",
      "year" : 2015
    }, {
      "title" : "Learning both weights and connections for efficient neural network",
      "author" : [ "Song Han", "Jeff Pool", "John Tran", "William Dally" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Han et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Han et al\\.",
      "year" : 2015
    }, {
      "title" : "Second order derivatives for network pruning: Optimal brain surgeon",
      "author" : [ "Babak Hassibi", "David G Stork" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Hassibi and Stork.,? \\Q1993\\E",
      "shortCiteRegEx" : "Hassibi and Stork.",
      "year" : 1993
    }, {
      "title" : "Deep residual learning for image recognition",
      "author" : [ "Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun" ],
      "venue" : "arXiv preprint arXiv:1512.03385,",
      "citeRegEx" : "He et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2015
    }, {
      "title" : "Speeding up convolutional neural networks with low rank expansions",
      "author" : [ "Max Jaderberg", "AndreaVedaldi", "andAndrew Zisserman" ],
      "venue" : "In Proceedings of the British Machine Vision Conference,",
      "citeRegEx" : "Jaderberg et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Jaderberg et al\\.",
      "year" : 2014
    }, {
      "title" : "Compression of deep convolutional neural networks for fast and low power mobile applications",
      "author" : [ "Yong-Deok Kim", "Eunhyeok Park", "Sungjoo Yoo", "Taelim Choi", "Lu Yang", "Dongjun Shin" ],
      "venue" : "arXiv preprint arXiv:1511.06530,",
      "citeRegEx" : "Kim et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Kim et al\\.",
      "year" : 2015
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "Diederik Kingma", "Jimmy Ba" ],
      "venue" : "arXiv preprint arXiv:1412.6980,",
      "citeRegEx" : "Kingma and Ba.,? \\Q2014\\E",
      "shortCiteRegEx" : "Kingma and Ba.",
      "year" : 2014
    }, {
      "title" : "Learning multiple layers of features from tiny images",
      "author" : [ "Alex Krizhevsky" ],
      "venue" : null,
      "citeRegEx" : "Krizhevsky.,? \\Q2009\\E",
      "shortCiteRegEx" : "Krizhevsky.",
      "year" : 2009
    }, {
      "title" : "Imagenet classification with deep convolutional neural networks",
      "author" : [ "Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E Hinton" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Krizhevsky et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Krizhevsky et al\\.",
      "year" : 2012
    }, {
      "title" : "Modèles connexionnistes de l’apprentissage",
      "author" : [ "Yann Le Cun" ],
      "venue" : "PhD thesis, Paris",
      "citeRegEx" : "Cun.,? \\Q1987\\E",
      "shortCiteRegEx" : "Cun.",
      "year" : 1987
    }, {
      "title" : "Fast convnets using group-wise brain damage",
      "author" : [ "Vadim Lebedev", "Victor Lempitsky" ],
      "venue" : "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "Lebedev and Lempitsky.,? \\Q2016\\E",
      "shortCiteRegEx" : "Lebedev and Lempitsky.",
      "year" : 2016
    }, {
      "title" : "Speeding-up convolutional neural networks using fine-tuned CP-decomposition",
      "author" : [ "Vadim Lebedev", "Yaroslav Ganin", "Maksim Rakhuba", "Ivan Oseledets", "Victor Lempitsky" ],
      "venue" : "arXiv preprint arXiv:1412.6553,",
      "citeRegEx" : "Lebedev et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Lebedev et al\\.",
      "year" : 2014
    }, {
      "title" : "Optimal brain damage",
      "author" : [ "Yann LeCun", "John S Denker", "Sara A Solla", "Richard E Howard", "Lawrence D Jackel" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "LeCun et al\\.,? \\Q1989\\E",
      "shortCiteRegEx" : "LeCun et al\\.",
      "year" : 1989
    }, {
      "title" : "Gradient-based learning applied to document recognition",
      "author" : [ "Yann LeCun", "Léon Bottou", "Yoshua Bengio", "Patrick Haffner" ],
      "venue" : "Proceedings of the IEEE,",
      "citeRegEx" : "LeCun et al\\.,? \\Q1998\\E",
      "shortCiteRegEx" : "LeCun et al\\.",
      "year" : 1998
    }, {
      "title" : "Fixed point quantization of deep convolutional networks",
      "author" : [ "Darryl D Lin", "Sachin S Talathi", "V Sreekanth Annapureddy" ],
      "venue" : "arXiv preprint arXiv:1511.06393,",
      "citeRegEx" : "Lin et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Lin et al\\.",
      "year" : 2015
    }, {
      "title" : "Neural networks with few multiplications",
      "author" : [ "Zhouhan Lin", "Matthieu Courbariaux", "Roland Memisevic", "Yoshua Bengio" ],
      "venue" : "arXiv preprint arXiv:1510.03009,",
      "citeRegEx" : "Lin et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Lin et al\\.",
      "year" : 2015
    }, {
      "title" : "Sparse convolutional neural networks",
      "author" : [ "Baoyuan Liu", "Min Wang", "Hassan Foroosh", "Marshall Tappen", "Marianna Pensky" ],
      "venue" : "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "Liu et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2015
    }, {
      "title" : "Skeletonization: A technique for trimming the fat from a network via relevance assessment",
      "author" : [ "Michael C Mozer", "Paul Smolensky" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Mozer and Smolensky.,? \\Q1989\\E",
      "shortCiteRegEx" : "Mozer and Smolensky.",
      "year" : 1989
    }, {
      "title" : "Tensorizing neural networks",
      "author" : [ "Alexander Novikov", "Dmitrii Podoprikhin", "Anton Osokin", "Dmitry P Vetrov" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Novikov et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Novikov et al\\.",
      "year" : 2015
    }, {
      "title" : "XNOR-Net: Imagenet classification using binary convolutional neural networks",
      "author" : [ "Mohammad Rastegari", "Vicente Ordonez", "Joseph Redmon", "Ali Farhadi" ],
      "venue" : "arXiv preprint arXiv:1603.05279,",
      "citeRegEx" : "Rastegari et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Rastegari et al\\.",
      "year" : 2016
    }, {
      "title" : "Imagenet large scale visual recognition challenge",
      "author" : [ "Olga Russakovsky", "Jia Deng", "Hao Su", "Jonathan Krause", "Sanjeev Satheesh", "Sean Ma", "Zhiheng Huang", "Andrej Karpathy", "Aditya Khosla", "Michael Bernstein" ],
      "venue" : "International Journal of Computer Vision,",
      "citeRegEx" : "Russakovsky et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Russakovsky et al\\.",
      "year" : 2015
    }, {
      "title" : "Lowrank matrix factorization for deep neural network training with high-dimensional output targets",
      "author" : [ "Tara N Sainath", "Brian Kingsbury", "Vikas Sindhwani", "Ebru Arisoy", "Bhuvana Ramabhadran" ],
      "venue" : "In IEEE International Conference on Acoustics, Speech and Signal Processing,",
      "citeRegEx" : "Sainath et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Sainath et al\\.",
      "year" : 2013
    }, {
      "title" : "Very deep convolutional networks for large-scale image recognition",
      "author" : [ "Karen Simonyan", "Andrew Zisserman" ],
      "venue" : "arXiv preprint arXiv:1409.1556,",
      "citeRegEx" : "Simonyan and Zisserman.,? \\Q2014\\E",
      "shortCiteRegEx" : "Simonyan and Zisserman.",
      "year" : 2014
    }, {
      "title" : "Going deeper with convolutions",
      "author" : [ "Christian Szegedy", "Wei Liu", "Yangqing Jia", "Pierre Sermanet", "Scott Reed", "Dragomir Anguelov", "Dumitru Erhan", "Vincent Vanhoucke", "Andrew Rabinovich" ],
      "venue" : "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "Szegedy et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Szegedy et al\\.",
      "year" : 2015
    }, {
      "title" : "Rethinking the inception architecture for computer vision",
      "author" : [ "Christian Szegedy", "Vincent Vanhoucke", "Sergey Ioffe", "Jonathon Shlens", "Zbigniew Wojna" ],
      "venue" : "arXiv preprint arXiv:1512.00567,",
      "citeRegEx" : "Szegedy et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Szegedy et al\\.",
      "year" : 2015
    }, {
      "title" : "Convolutional neural networks with low-rank regularization",
      "author" : [ "Cheng Tai", "Tong Xiao", "Xiaogang Wang" ],
      "venue" : "arXiv preprint arXiv:1511.06067,",
      "citeRegEx" : "Tai et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Tai et al\\.",
      "year" : 2015
    }, {
      "title" : "Lecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude",
      "author" : [ "Tijmen Tieleman", "Geoffrey Hinton" ],
      "venue" : "COURSERA: Neural Networks for Machine Learning,",
      "citeRegEx" : "Tieleman and Hinton.,? \\Q2012\\E",
      "shortCiteRegEx" : "Tieleman and Hinton.",
      "year" : 2012
    }, {
      "title" : "Improving the speed of neural networks on CPUs",
      "author" : [ "Vincent Vanhoucke", "Andrew Senior", "Mark Z Mao" ],
      "venue" : "In Deep Learning and Unsupervised Feature Learning Workshop,",
      "citeRegEx" : "Vanhoucke et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Vanhoucke et al\\.",
      "year" : 2011
    }, {
      "title" : "Learning structured sparsity in deep neural networks",
      "author" : [ "Wei Wen", "Chunpeng Wu", "Yandan Wang", "Yiran Chen", "Hai Li" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Wen et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Wen et al\\.",
      "year" : 2016
    }, {
      "title" : "Restructuring of deep neural network acoustic models with singular value decomposition",
      "author" : [ "Jian Xue", "Jinyu Li", "Yifan Gong" ],
      "venue" : "In INTERSPEECH,",
      "citeRegEx" : "Xue et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Xue et al\\.",
      "year" : 2013
    }, {
      "title" : "Deep fried convnets",
      "author" : [ "Zichao Yang", "Marcin Moczulski", "Misha Denil", "Nando de Freitas", "Alex Smola", "Le Song", "Ziyu Wang" ],
      "venue" : "In Proceedings of the IEEE International Conference on Computer Vision, pp",
      "citeRegEx" : "Yang et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Yang et al\\.",
      "year" : 2015
    }, {
      "title" : "Adadelta: an adaptive learning rate method",
      "author" : [ "Matthew D Zeiler" ],
      "venue" : "arXiv preprint arXiv:1212.5701,",
      "citeRegEx" : "Zeiler.,? \\Q2012\\E",
      "shortCiteRegEx" : "Zeiler.",
      "year" : 2012
    } ],
    "referenceMentions" : [ {
      "referenceID" : 21,
      "context" : "Besides network quantization, network pruning has been studied for network compression to remove redundant parameters permanently from neural networks (Mozer & Smolensky, 1989; LeCun et al., 1989; Hassibi & Stork, 1993; Han et al., 2015b; Lebedev & Lempitsky, 2016; Wen et al., 2016).",
      "startOffset" : 151,
      "endOffset" : 283
    }, {
      "referenceID" : 37,
      "context" : "Besides network quantization, network pruning has been studied for network compression to remove redundant parameters permanently from neural networks (Mozer & Smolensky, 1989; LeCun et al., 1989; Hassibi & Stork, 1993; Han et al., 2015b; Lebedev & Lempitsky, 2016; Wen et al., 2016).",
      "startOffset" : 151,
      "endOffset" : 283
    }, {
      "referenceID" : 30,
      "context" : "Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015).",
      "startOffset" : 218,
      "endOffset" : 399
    }, {
      "referenceID" : 38,
      "context" : "Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015).",
      "startOffset" : 218,
      "endOffset" : 399
    }, {
      "referenceID" : 13,
      "context" : "Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015).",
      "startOffset" : 218,
      "endOffset" : 399
    }, {
      "referenceID" : 20,
      "context" : "Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015).",
      "startOffset" : 218,
      "endOffset" : 399
    }, {
      "referenceID" : 39,
      "context" : "Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015).",
      "startOffset" : 218,
      "endOffset" : 399
    }, {
      "referenceID" : 25,
      "context" : "Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015).",
      "startOffset" : 218,
      "endOffset" : 399
    }, {
      "referenceID" : 14,
      "context" : "Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015).",
      "startOffset" : 218,
      "endOffset" : 399
    }, {
      "referenceID" : 34,
      "context" : "Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015).",
      "startOffset" : 218,
      "endOffset" : 399
    }, {
      "referenceID" : 27,
      "context" : "Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015).",
      "startOffset" : 218,
      "endOffset" : 399
    }, {
      "referenceID" : 9,
      "context" : "For example, Krizhevsky et al. (2012) came up with a deep convolutional neural network consisting of 61 million parameters and won the ImageNet competition in 2012.",
      "startOffset" : 13,
      "endOffset" : 38
    }, {
      "referenceID" : 9,
      "context" : "For example, Krizhevsky et al. (2012) came up with a deep convolutional neural network consisting of 61 million parameters and won the ImageNet competition in 2012. It is followed by deeper neural networks with even larger numbers of parameters, e.g., Simonyan & Zisserman (2014). The large sizes of deep neural networks make it difficult to deploy them on resource-limited devices, e.",
      "startOffset" : 13,
      "endOffset" : 280
    }, {
      "referenceID" : 6,
      "context" : ", 1989; Hassibi & Stork, 1993; Han et al., 2015b; Lebedev & Lempitsky, 2016; Wen et al., 2016). Matrix/tensor factorization and low-rank approximation have been investigated as well to find more efficient representations of neural networks with a smaller number of parameters and consequently to save computations (Sainath et al., 2013; Xue et al., 2013; Jaderberg et al., 2014; Lebedev et al., 2014; Yang et al., 2015; Liu et al., 2015; Kim et al., 2015; Tai et al., 2015; Novikov et al., 2015). Moreover, similar to network quantization, low-precision network implementation has been examined in Vanhoucke et al. (2011); Courbariaux et al.",
      "startOffset" : 31,
      "endOffset" : 622
    }, {
      "referenceID" : 2,
      "context" : "(2011); Courbariaux et al. (2014); Anwar et al.",
      "startOffset" : 8,
      "endOffset" : 34
    }, {
      "referenceID" : 2,
      "context" : "(2011); Courbariaux et al. (2014); Anwar et al. (2015); Gupta et al.",
      "startOffset" : 8,
      "endOffset" : 55
    }, {
      "referenceID" : 2,
      "context" : "(2011); Courbariaux et al. (2014); Anwar et al. (2015); Gupta et al. (2015); Lin et al.",
      "startOffset" : 8,
      "endOffset" : 76
    }, {
      "referenceID" : 2,
      "context" : "(2011); Courbariaux et al. (2014); Anwar et al. (2015); Gupta et al. (2015); Lin et al. (2015a). Some extremes of low-precision neural networks consisting of binary or ternary parameters can be found in Courbariaux et al.",
      "startOffset" : 8,
      "endOffset" : 96
    }, {
      "referenceID" : 2,
      "context" : "(2011); Courbariaux et al. (2014); Anwar et al. (2015); Gupta et al. (2015); Lin et al. (2015a). Some extremes of low-precision neural networks consisting of binary or ternary parameters can be found in Courbariaux et al. (2015); Lin et al.",
      "startOffset" : 8,
      "endOffset" : 229
    }, {
      "referenceID" : 2,
      "context" : "(2011); Courbariaux et al. (2014); Anwar et al. (2015); Gupta et al. (2015); Lin et al. (2015a). Some extremes of low-precision neural networks consisting of binary or ternary parameters can be found in Courbariaux et al. (2015); Lin et al. (2015b); Rastegari et al.",
      "startOffset" : 8,
      "endOffset" : 249
    }, {
      "referenceID" : 2,
      "context" : "(2011); Courbariaux et al. (2014); Anwar et al. (2015); Gupta et al. (2015); Lin et al. (2015a). Some extremes of low-precision neural networks consisting of binary or ternary parameters can be found in Courbariaux et al. (2015); Lin et al. (2015b); Rastegari et al. (2016). We note that these are different types of network compression techniques, which can be employed on top of each other.",
      "startOffset" : 8,
      "endOffset" : 274
    }, {
      "referenceID" : 7,
      "context" : "Themost related work to our investigation in this paper can be found in Gong et al. (2014); Han et al.",
      "startOffset" : 72,
      "endOffset" : 91
    }, {
      "referenceID" : 7,
      "context" : "Themost related work to our investigation in this paper can be found in Gong et al. (2014); Han et al. (2015a), where a conventional quantization method using k-means clustering is employed for network quantization.",
      "startOffset" : 72,
      "endOffset" : 111
    }, {
      "referenceID" : 7,
      "context" : "• It is shown how the proposed network quantization schemes can be applied for quantizing network parameters of all layers together at once, rather than layer-by-layer network quantization in Gong et al. (2014); Han et al.",
      "startOffset" : 192,
      "endOffset" : 211
    }, {
      "referenceID" : 7,
      "context" : "• It is shown how the proposed network quantization schemes can be applied for quantizing network parameters of all layers together at once, rather than layer-by-layer network quantization in Gong et al. (2014); Han et al. (2015a). This follows from our investigation that Hessian-weighting can handle the different impact of quantization errors properly not only within layers but also across layers.",
      "startOffset" : 192,
      "endOffset" : 231
    }, {
      "referenceID" : 18,
      "context" : "An efficient way of computing the diagonal of Hessian is presented in Le Cun (1987); Becker & Le Cun (1988) and it is based on the back propagation method that is similar to the back propagation algorithm used for computing first-order partial derivatives (gradients).",
      "startOffset" : 73,
      "endOffset" : 84
    }, {
      "referenceID" : 18,
      "context" : "An efficient way of computing the diagonal of Hessian is presented in Le Cun (1987); Becker & Le Cun (1988) and it is based on the back propagation method that is similar to the back propagation algorithm used for computing first-order partial derivatives (gradients).",
      "startOffset" : 73,
      "endOffset" : 108
    }, {
      "referenceID" : 5,
      "context" : ", AdaGrad (Duchi et al., 2011), Adadelta (Zeiler, 2012) and RMSProp (Tieleman & Hinton, 2012).",
      "startOffset" : 10,
      "endOffset" : 30
    }, {
      "referenceID" : 40,
      "context" : ", 2011), Adadelta (Zeiler, 2012) and RMSProp (Tieleman & Hinton, 2012).",
      "startOffset" : 18,
      "endOffset" : 32
    }, {
      "referenceID" : 7,
      "context" : "Layer-by-layer quantization was examined in the previous work (Gong et al., 2014; Han et al., 2015a).",
      "startOffset" : 62,
      "endOffset" : 100
    }, {
      "referenceID" : 7,
      "context" : "Layer-by-layer quantization was examined in the previous work (Gong et al., 2014; Han et al., 2015a). However, e.g., in Han et al. (2015a), a larger number of bits (a larger number of clusters) are assigned to convolutional layers than fully-connected layers, which implies that they heuristically treat convolutional layers more importantly.",
      "startOffset" : 63,
      "endOffset" : 139
    }, {
      "referenceID" : 7,
      "context" : "Layer-by-layer quantization was examined in the previous work (Gong et al., 2014; Han et al., 2015a). However, e.g., in Han et al. (2015a), a larger number of bits (a larger number of clusters) are assigned to convolutional layers than fully-connected layers, which implies that they heuristically treat convolutional layers more importantly. This follows from the fact that the impact of quantization errors on the performance varies significantly across layers; some layers, e.g., convolutional layers, may be more important than the others. This concern is exactly what we can address by Hessian-weighting. Hessian-weighting properly handles the different impact of quantization errors not only within layers but also across layers and thus it can be employed for quantizing all layers of a network together. The impact of quantization errors may vary more substantially across layers than within layers. Thus, Hessian-weighting may show more benefit in deeper neural networks. We note that Hessianweighting can still provide gain even for layer-by-layer quantization since it can address the different impact of the quantization errors of network parameters within each layer as well. Recent neural networks are getting deeper, e.g., see Szegedy et al. (2015a;b); He et al. (2015). For such deep neural networks, quantizing network parameters of all layers together is even more advantageous since we can avoid layer-by-layer compression rate optimization.",
      "startOffset" : 63,
      "endOffset" : 1285
    }, {
      "referenceID" : 1,
      "context" : "An iterative algorithm to solve the general ECSQ problem is provided in Chou et al. (1989). We derive a similar iterative algorithm to solve the ECSQ problem for network quantization.",
      "startOffset" : 72,
      "endOffset" : 91
    }, {
      "referenceID" : 1,
      "context" : "An iterative algorithm to solve the general ECSQ problem is provided in Chou et al. (1989). We derive a similar iterative algorithm to solve the ECSQ problem for network quantization. The main difference from the method in Chou et al. (1989) is that we minimize the Hessian-weighted distortion measure instead of the non-weighted regular distortion measure for optimal quantization.",
      "startOffset" : 72,
      "endOffset" : 242
    }, {
      "referenceID" : 22,
      "context" : "This section presents our experiment results for the proposed network quantization schemes in three exemplary convolutional neural networks: (a) LeNet (LeCun et al., 1998) for the MNIST data set, (b) ResNet (He et al.",
      "startOffset" : 151,
      "endOffset" : 171
    }, {
      "referenceID" : 12,
      "context" : ", 1998) for the MNIST data set, (b) ResNet (He et al., 2015) for the CIFAR-10 data set, and (c) AlexNet (Krizhevsky et al.",
      "startOffset" : 43,
      "endOffset" : 60
    }, {
      "referenceID" : 17,
      "context" : ", 2015) for the CIFAR-10 data set, and (c) AlexNet (Krizhevsky et al., 2012) for the ImageNet ILSVRC-2012 data set.",
      "startOffset" : 51,
      "endOffset" : 76
    }, {
      "referenceID" : 9,
      "context" : "For the index information, we compute index differences between unpruned network parameters in the original model and further compress them by Huffman coding as in Han et al. (2015a). • For Hessian computation, 50,000 samples of the training set are reused.",
      "startOffset" : 164,
      "endOffset" : 183
    }, {
      "referenceID" : 22,
      "context" : "1 EXPERIMENT MODELS First, we evaluate our network quantization schemes for the MNIST data set with a simplified version of LeNet5 (LeCun et al., 1998), consisting of two convolutional layers and two fully-connected",
      "startOffset" : 131,
      "endOffset" : 151
    }, {
      "referenceID" : 16,
      "context" : "Second, we experiment our network quantization schemes for the CIFAR-10 data set (Krizhevsky, 2009) with a pre-trained 32-layer ResNet (He et al.",
      "startOffset" : 81,
      "endOffset" : 99
    }, {
      "referenceID" : 12,
      "context" : "Second, we experiment our network quantization schemes for the CIFAR-10 data set (Krizhevsky, 2009) with a pre-trained 32-layer ResNet (He et al., 2015).",
      "startOffset" : 135,
      "endOffset" : 152
    }, {
      "referenceID" : 17,
      "context" : "Third, we evaluate our network quantization schemes with AlexNet (Krizhevsky et al., 2012) for the ImageNet ILSVRC-2012 data set (Russakovsky et al.",
      "startOffset" : 65,
      "endOffset" : 90
    }, {
      "referenceID" : 29,
      "context" : ", 2012) for the ImageNet ILSVRC-2012 data set (Russakovsky et al., 2015).",
      "startOffset" : 46,
      "endOffset" : 72
    }, {
      "referenceID" : 9,
      "context" : "Here, we also compare our network quantization results to the ones in Han et al. (2015a). Note that layer-bylayer quantization with k-means clustering is evaluated in Han et al.",
      "startOffset" : 70,
      "endOffset" : 89
    }, {
      "referenceID" : 9,
      "context" : "Here, we also compare our network quantization results to the ones in Han et al. (2015a). Note that layer-bylayer quantization with k-means clustering is evaluated in Han et al. (2015a) while our quantization schemes including k-means clustering are employed to quantize network parameters of all layers together at once (see Section 3.",
      "startOffset" : 70,
      "endOffset" : 186
    } ],
    "year" : 2017,
    "abstractText" : "Network quantization is one of network compression techniques to reduce the redundancy of deep neural networks. It reduces the number of distinct network parameter values by quantization in order to save the storage for them. In this paper, we design network quantization schemes that minimize the performance loss due to quantization given a compression ratio constraint. We analyze the quantitative relation of quantization errors to the neural network loss function and identify that the Hessian-weighted distortion measure is locally the right objective function for the optimization of network quantization. As a result, Hessian-weighted k-means clustering is proposed for clustering network parameters to quantize. When optimal variable-length binary codes, e.g., Huffman codes, are employed for further compression, we derive that the network quantization problem can be related to the entropy-constrained scalar quantization (ECSQ) problem in information theory and consequently propose two solutions of ECSQ for network quantization, i.e., uniform quantization and an iterative solution similar to Lloyd’s algorithm. Finally, using the simple uniform quantization followed by Huffman coding, we show from our experiments that the compression ratios of 51.25, 22.17 and 40.65 are achievable for LeNet, 32-layer ResNet and AlexNet, respectively.",
    "creator" : "LaTeX with hyperref package"
  }
}