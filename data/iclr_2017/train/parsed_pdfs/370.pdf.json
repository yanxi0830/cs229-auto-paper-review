{
  "name" : "370.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "DSD: DENSE-SPARSE-DENSE TRAINING FOR DEEP NEURAL NETWORKS",
    "authors" : [ "Song Han", "Huizi Mao", "Enhao Gong", "Shijian Tang", "William J. Dally", "Jeff Pool", "John Tran", "Bryan Catanzaro", "Sharan Narang", "Erich Elsen", "Peter Vajda", "Manohar Paluri" ],
    "emails" : [ "songhan@stanford.edu", "huizi@stanford.edu", "enhaog@stanford.edu", "sjtang@stanford.edu", "dally@stanford.edu", "jpool@nvidia.com", "johntran@nvidia.com", "bcatanzaro@nvidia.com", "sharan@baidu.com", "vajdap@fb.com", "mano@fb.com", "eriche@google.com" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "Deep neural networks (DNNs) have shown significant improvements in many application domains, ranging from computer vision (He et al. (2015)) to natural language processing (Luong et al. (2015)) and speech recognition (Amodei et al. (2015)). The abundance of powerful hardware makes it easier to train complicated DNN models with large capacities. The upside of complicated models is that they are very expressive and can capture the highly non-linear relationship between features and output. The downside of such large models is that they are prone to capturing the noise, rather than the intended pattern, in the training dataset. This noise does not generalize to new datasets, leading to over-fitting and a high variance.\n∗Indicates equal contribution †Also at NVIDIA ‡Now at Google Brain. eriche@google.com\nDense\nPruning\nSparsity Constraint\nSparse\nIncrease Model Capacity\nRe-Dense\nDense\nend goto Sparse Phase for iterative DSD;\nIn contrast, simply reducing the model capacity would lead to the other extreme, causing a machine learning system to miss the relevant relationships between features and target outputs, leading to under-fitting and a high bias. Bias and variance are hard to optimize at the same time.\nTo solve this problem, we propose a dense-sparse-dense training flow (DSD), a novel training strategy that starts from a dense model from conventional training, then regularizes the model with sparsityconstrained optimization, and finally increases the model capacity by restoring and retraining the pruned weights. At testing time, the final model produced by DSD still has the same architecture and dimension as the original dense model, and DSD training doesn’t incur any inference overhead. We experimented DSD training on 7 mainstream CNN / RNN / LSTMs and found consistent performance gains over its comparable counterpart for image classification, image captioning and speech recognition."
    }, {
      "heading" : "2 DSD TRAINING FLOW",
      "text" : "Our DSD training employs a three-step process: dense, sparse, re-dense. Each step is illustrated in Figure 1 and Algorithm 1. The progression of weight distribution is plotted in Figure 2.\nInitial Dense Training: The first D step learns the connection weights and importance via normal network training on the dense network. Unlike conventional training, however, the goal of this D step is not only to learn the values of the weights; we are also learning which connections are important. We use a simple heuristic to quantify the importance of the weights using their absolute value.\nSparse Training: The S step prunes the low-weight connections and trains a sparse network. We applied the same sparsity to all the layers, thus there’s a single hyper parameter: the sparsity, the percentage of weights that are pruned to 0. For each layer W with N parameters, we sorted the parameters, picked the k-th largest one λ = Sk as the threshold where k = N ∗ (1− sparsity), and generated a binary mask to remove all the weights smaller than λ. Details are shown in Algorithm 1 .\nWe remove small weights because of the Taylor expansion. The loss function and its Taylor expansion are shown in Equation (1)(2). We want to minimize the increase in Loss when conducting a hard thresholding on the weights, so we need to minimize the first and second terms in Equation 2. Since we are zeroing out parameters, ∆Wi is actually Wi − 0 = Wi. At the local minimum where ∂Loss/∂Wi ≈ 0 and ∂\n2Loss ∂W 2i > 0, only the second order term matters. Since second order gradient\n∂2Loss/∂W 2i is expensive to calculate andWi has a power of 2, we use |Wi| as the metric of pruning. Smaller |Wi| means a smaller increase to the loss function.\nLoss = f(x,W1,W2,W3...) (1)\n∆Loss = ∂Loss\n∂Wi ∆Wi +\n1\n2\n∂2Loss\n∂W 2i ∆Wi\n2 + ... (2)\nRetraining while enforcing the binary mask in each iteration, we converted a dense network into a sparse network that has a known sparsity support and can fully recover or even increase the original accuracy of initial dense model under the sparsity constraint. The sparsity is the same for all the layers and can be tuned using validation. We find a sparsity value between 25% and 50% generally works well in our experiments.\nFinal Dense Training: The final D step recovers the pruned connections, making the network dense again. These previously-pruned connections are initialized to zero and the entire network is retrained with 1/10 the original learning rate (since the sparse network is already at a good local minima). Hyper parameters like dropout ratios and weight decay remained unchanged. By restoring the pruned connections, the final D step increases the model capacity of the network and makes it possible to arrive at a better local minima compared with the sparse model from the S step.\nTo visualize the DSD training flow, we plotted the progression of the weight distribution in Figure 2. The figure is plotted using GoogLeNet’s inception_5b3x3 layer, and we found this progression of weight distribution very representative for VGGNet and ResNet as well. The original distribution of weight is centered on zero with tails dropping off quickly. Pruning is based on absolute value so after pruning the large center region is truncated away. The un-pruned network parameters adjust themselves during the retraining phase, so in (c), the boundary becomes soft and forms a bimodal distribution. In (d), at the beginning of the re-dense training step, all the pruned weights come back again and are reinitialized to zero. Finally, in (e), the pruned weights are retrained together with the un-pruned weights. In this step, we kept the same learning hyper-parameters (weight decay, learning rate, etc.) for pruned weights and un-pruned weights. Comparing Figure (d) and (e), the un-pruned weights’ distribution almost remained the same, while the pruned weights became distributed further around zero. The overall mean absolute value of the weight distribution is much smaller. This is a good phenomenon: choosing the smallest vector that solves the learning problem suppresses irrelevant components of the weight vector ( Moody et al. (1995))."
    }, {
      "heading" : "3 RELATED WORK",
      "text" : "Dropout and DropConnect: DSD, Dropout (Srivastava et al. (2014)) and DropConnnect (Wan et al. (2013)) can all regularize neural networks and prevent over-fitting. The difference is that Dropout and DropConnect use a random sparsity pattern at each SGD iteration, while DSD training learns with a deterministic data driven sparsity pattern throughout sparse training. Our experiments on VGG16, GoogLeNet and NeuralTalk show that DSD training can work together with Dropout.\nDistillation: Model distillation (Hinton et al. (2015)) is a method that can transfer the learned knowledge from a large model to a small model, which is more efficient for deployment. This is another method that allows for performance improvements in neural networks without architectural changes.\nModel Compression: Both model compression (Han et al. (2016; 2015)) and DSD training use network pruning (LeCun et al. (1990); Hassibi et al. (1993)). The difference is that the focus of DSD training goes beyond maintaining the accuracy. DSD is able to further improve the accuracy by considerable margins. Another difference is that DSD training doesn’t require aggressive pruning. A modestly pruned network (50%-60% sparse) can work well. However, model compression requires aggressively pruning the network to achieve high compression rates.\nSparsity Regularization and Hard Thresholding: the truncation-based sparse network has been theoretically analyzed for learning a broad range of statistical models in high dimensions (Langford et al. (2009); Yuan & Zhang (2013); Wang et al. (2014)). A similar training strategy with iterative hard thresholding and connection restoration is proposed by Jin et al. (2016) during the same time period as, but independently from, DSD. Sparsity regularized optimization is heavily applied in Compressed Sensing (Candes & Romberg (2007)) to find optimal solutions to the inverse problems in highly under-determined systems based on the sparsity assumption."
    }, {
      "heading" : "4 EXPERIMENTS",
      "text" : "We applied DSD training to different kinds of neural networks in different domains. We found that DSD training improved the accuracy for all these networks compared to the baseline networks that were not trained with DSD. The neural networks are chosen from CNN, RNN and LSTMs; the datasets covered image classification, speech recognition, and caption generation. For networks trained for ImageNet, we focus on GoogLeNet, VGG and ResNet, which are widely used in research and production. An overview of the networks, dataset and accuracy results are shown in Table 1. For the convolutional networks, we do not prune the first layer during the sparse phase, since it has only 3 channels and is very sensitive to pruning. The sparsity is the same for all the other layers, including convolutional and fully-connected layers. We do not change any other training hyper-parameters, and the initial learning rate at each stage is decayed the same as conventional training. The epochs are decided by when the loss converges. When the loss no longer decreases, we stop the training."
    }, {
      "heading" : "4.1 GOOGLENET",
      "text" : "We experimented with the BVLC GoogLeNet (Szegedy et al. (2015)) model obtained from the Caffe Model Zoo (Jia (2013)). It has 13 million parameters and 57 convolutional layers. We pruned each layer (except the first) to 30% sparsity. Retraining the sparse network gave some improvement in accuracy due to regularization, as shown in Table 2. After the final dense training step, GoogLeNet’s error rates were reduced by 1.12% (Top-1) and 0.62% (Top-5) over the baseline.\nWe compared DSD v.s. conventional training for the same number of epochs by dropping the learning rate upon \"convergence\" and continuing to learn. The result is shown as LLR (lower the learning rate). The training epochs for LLR is equal to that of Sparse+re-Dense as a fair comparison. LLR can not achieve the same accuracy as DSD."
    }, {
      "heading" : "4.2 VGGNET",
      "text" : "We explored DSD training on VGG-16 (Simonyan & Zisserman (2014)), which is widely used in detection, segmentation and transfer learning. The baseline model is obtained from the Caffe Model Zoo (Jia (2013)). Similar to GoogLeNet, each layer is pruned to 30% sparsity. DSD training greatly reduced the error by 4.31% (Top-1) and 2.65% (Top-5), detailed in Table 3. DSD also wins over the LLR result by a large margin."
    }, {
      "heading" : "4.3 RESNET",
      "text" : "Deep Residual Networks (ResNets, He et al. (2015)) were the top performer in the 2015 ImageNet challenge. The baseline ResNet-18 and ResNet-50 models are provided by Facebook (2016). We prune to 30% sparsity uniformly, and a single DSD pass for these networks reduced top-1 error by 1.26% (ResNet-18) and 1.12% (ResNet-50), shown in Table 4. A second DSD iteration can further improve the accuracy. As a fair comparison, we continue train the original model by lowering the learning rate by another decade, but can’t reach the same accuracy as DSD, as shown in the LLR row.\n1"
    }, {
      "heading" : "4.4 NEURALTALK",
      "text" : "We evaluated DSD training on RNN and LSTM beyond CNN. We applied DSD to NeuralTalk (Karpathy & Fei-Fei (2015)), an LSTM for generating image descriptions. It uses a CNN as an image feature extractor and an LSTM to generate captions. To verify DSD training on LSTMs, we fixed the CNN weights and only train the LSTM weights. The baseline NeuralTalk model we used is the flickr8k_cnn_lstm_v1.p downloaded from NeuralTalk Model Zoo.\nIn the pruning step, we pruned all layers except Ws, the word embedding lookup table, to 80% sparse. We used a higher sparsity than CNN’s experiments based on the validation set of flickr8k. We retrained the remaining sparse network using the same weight decay and batch size as the original paper. The learning rate is tuned based on the validation set, shown in Table 5. Retraining the sparse network improved the BLUE score by [1.2, 1.1, 0.9, 0.7]. After getting rid of the sparsity constraint and retraining the dense network, the final results of DSD further improved the BLEU score by [2.0, 2.1, 2.0, 1.7] over baseline.\nThe BLEU score is not the sole criteria measuring auto-caption system. We visualized the captions generated by DSD training in Figure 3. In the first image, the baseline model mistakes the girl with a boy and the girl’s hair with a rock wall; the sparse model can tell that it’s a girl; and the DSD model can further identify the swing. In the the second image, DSD training can more accurately tell the player is in a white uniform and trying to make a shot, rather than the baseline just saying he’s in a red uniform and playing with a ball. The performance of DSD training generalizes beyond these examples; more image caption results generated by DSD training are provided in the Appendix."
    }, {
      "heading" : "4.5 DEEPSPEECH",
      "text" : "We explore DSD training on speech recognition tasks using both Deep Speech 1 (DS1) and Deep Speech 2 (DS2) networks (Hannun et al. (2014); Amodei et al. (2015)).\nThe DS1 model is a 5 layer network with 1 Bidirectional Recurrent layer, as described in Table 6. The training dataset used for this model is the Wall Street Journal (WSJ), which contains 81 hours of\nspeech. The validation set consists of 1 hour of speech. The test sets are from WSJ’92 and WSJ’93 and contain 1 hour of speech combined. The Word Error Rate (WER) reported on the test sets for the baseline models is different from Amodei et al. (2015) due to two factors. First, in DeepSpeech2, the models were trained using much larger data sets containing approximately 12,000 hours of multi-speaker speech data. Secondly, WER was evaluated with beam search and a language model in DeepSpeech2; here the network output is obtained using only max decoding to show improvement in the neural network accuracy, and filtering out the other parts.\nThe first dense phase was trained for 50 epochs. In the sparse phase, weights are pruned in the Fully Connected layers and the Bidirectional Recurrent layer only (they are the majority of the weights). Each layer is pruned to achieve the same 50% sparsity and trained for 50 epochs. In the final dense phase, the pruned weights are initialized to zero and trained for another 50 epochs. For a fair comparison of baseline, we used Nesterov SGD to train, reduce the learning rate with each re-training, and keep all other hyper parameters unchanged. The learning rate is picked using our validation set.\nWe first wanted to compare the DSD results with a baseline model trained for the same number of epochs. The first 3 rows of Table 7 shows the WER when the DSD model is trained for 50+50+50=150 epochs, and the 6th line shows the baseline model trained by 150 epochs (the Same #Epochs as DSD). DSD training improves WER by 0.13 (WSJ ’92) and 1.35 (WSJ ’93) given the same number of epochs as the conventional training.\nGiven a second DSD iteration, accuracy can be further improved. In the second DSD iteration, each layer is pruned away 25% of the weights. Similar to the first iteration, the sparse model and subsequent dense model are further retrained for 50 epochs. The learning rate is scaled down for each re-training step. The results are shown in Table 7. Compared with the fully trained and converged baseline, the second DSD iteration improves WER by 0.58 (WSJ ’92) and 1.96 (WSJ ’93), a relative improvement of 2.07% (WSJ ’92) and 5.84% (WSJ ’93). So, we can do more DSD iterations (DSDSD) to further improve the performance. Adding more DSD iterations has a diminishing return."
    }, {
      "heading" : "4.6 DEEPSPEECH 2",
      "text" : "To show how DSD works on deeper networks, we evaluated DSD on the Deep Speech 2 (DS2) network, described in Table 8. This network has 7 Bidirectional Recurrent layers with approximately 67 million parameters, around 8 times larger than the DS1 model. A subset of the internal English training set is used. The training set is comprised of 2,100 hours of speech. The validation set is comprised of 3.46 hours of speech. The test sets are from WSJ’92 and WSJ’93, which contain 1 hour of speech combined.\nTable 9 shows the results of the two iterations of DSD training. For the first sparse re-training, similar to DS1, 50% of the parameters from the Bidirectional Recurrent Layers and Fully Connected\nLayers are pruned. The Baseline model is trained for 60 epochs to provide a fair comparison with DSD training. The baseline model shows no improvement after 40 epochs. With one iteration of DSD training, WER improves by 0.44 (WSJ ’92) and 0.56 (WSJ ’93) compared to the fully trained baseline.\nHere we show again that DSD can be applied multiple times or iteratively for further performance gain. A second iteration of DSD training achieves better accuracy as shown in Table 9. For the second sparse iteration, 25% of parameters in the Fully Connected layer and Bidirectional Recurrent layers are pruned. Overall DSD training achieves relative improvement of 5.55% (WSJ ’92) and 7.44% (WSJ ’93) on the DS2 architecture. These results are in line with DSD experiments on the smaller DS1 network. We can conclude that DSD re-training continues to show improvement in accuracy with larger layers and deeper networks."
    }, {
      "heading" : "5 DISCUSSION",
      "text" : "Dense-Sparse-Dense training changes the optimization process and improves the optimization performance with significant margins by nudging the network with pruning and re-densifying. We conjecture that the following aspects contribute to the efficacy of DSD training.\nEscape Saddle Point: Based on previous studies, one of the most profound difficulties of optimizing deep networks is the proliferation of saddle points (Dauphin et al. (2014)). Advanced optimization methods have been proposed to overcome saddle points. For a similar purpose but with a different approach, the proposed DSD method overcomes the saddle points by pruning and re-densifying framework. Pruning the converged model perturbs the learning dynamics and allows the network to jump away from saddle points, which gives the network a chance to converge at a better local or global minimum. This idea is also similar to Simulated Annealing ( Hwang (1988)). While Simulated Annealing randomly jumps with decreasing probability on the search graph, DSD deterministically deviates from the converged solution achieved in the first dense training phase by removing the small weights and enforcing a sparsity support. Similar to Simulated Annealing, which can escape sub-optimal solutions multiple times in the entire optimization process, DSD can also be applied iteratively to achieve further performance gains, as shown in the Deep Speech results.\nSignificantly Better Minima: After escaping saddle point, DSD achieved better minima. We measured both the training loss and validation loss, DSD training decreased the loss and error on both the training and the validation sets on ImageNet. We have also validated the significance of the improvements compared with conventional fine-tuning by t-test, shown in the appendix.\nRegularized and Sparse Training: The sparsity regularization in the sparse training step moves the optimization to a lower-dimensional space where the loss surface is smoother and tend to be more robust to noise. More numerical experiments verified that both sparse training and the final DSD reduce the variance and lead to lower error (shown in the appendix).\nRobust re-initialization: Weight initialization plays a big role in deep learning (Mishkin & Matas (2015)). Conventional training has only one chance of initialization. DSD gives the optimization a second (or more) chance during the training process to re-initialize from a more robust sparse training solution. We re-densify the network from the sparse solution which can be seen as a zero initialization for pruned weights. Other initialization methods are also worth trying.\nBreak Symmetry: The permutation symmetry of the hidden units makes the weights symmetrical, thus prone to co-adaptation in training. In DSD, pruning the weights breaks the symmetry of the hidden units associated with the weights, and the weights are asymmetrical in the final dense phase."
    }, {
      "heading" : "6 CONCLUSION",
      "text" : "We introduce DSD, a dense-sparse-dense training framework that regularizes neural networks by pruning and then restoring connections. Our method learns which connections are important during the initial dense solution. Then it regularizes the network by pruning the unimportant connections and retraining to a sparser and more robust solution with same or better accuracy. Finally, the pruned connections are restored and the entire network is retrained again. This increases the dimensionality of parameters, and thus model capacity, from the sparser model.\nDSD training achieves superior optimization performance. We highlight our experiments using GoogLeNet, VGGNet, and ResNet on ImageNet; NeuralTalk on Flickr-8K; and DeepSpeech-1&2 on the WSJ dataset. This shows that the accuracy of CNNs, RNNs, and LSTMs can be significantly improved with DSD training. Our numerical results and empirical tests show the inadequacy of current training methods for which we have provided an effective solution."
    }, {
      "heading" : "A. APPENDIX: SIGNIFICANCE OF DSD IMPROVEMENTS",
      "text" : "DSD training improves the baseline model performance by consecutively pruning and re-densifying the network weights. We conducted more intensive experiments to validate that the improvements are significant and not due to any randomness in the optimization. In order to evaluate the significance, we repeated the baseline training, DSD training (retraining on baseline) and conventional fine-tuning (retraining on the same baseline) multiple times. The statistical significance of DSD improvements are quantified on the Cifar-10 dataset using ResNet."
    }, {
      "heading" : "1. SIGNIFICANT IMPROVEMENTS ON CIFAR-10 USING RESNET-20",
      "text" : "Cifar-10 is a smaller image recognition benchmark with 50,000 32x32 color images for training and 10,000 for testing. Training on Cifar-10 is fast enough that it is feasible to conduct intensive experiments within a reasonable time to evaluate DSD performance. The baseline models were trained with the standard 164 epochs and initial LR of 0.1 as recommended in the released code (Facebook, 2016). After 164 epochs, we obtained the model with a 8.26% top-1 testing error that is consistent with the Facebook result. Initialized from this baseline model, we repeated 16 times of re-training using DSD training and 16 times using conventional fine-tuning. The DSD used sparsity of 50% and 90 epochs (45 for sparse training and 45 for re-densing training). As a fair comparison, the conventional fine-tuning is also based on the same baseline model with the same hyper-parameters and settings (90 epochs, 45 LR of 0.001 and 45 LR of 0.0001).\nDetailed results are listed below. On Cifar-10 and using ResNet-20 architecture, the DSD training on average achieved Top-1 testing error of 7.89%, which is a 0.37% absolute improvement (4.5% relative improvement) over the baseline model and relatively 1.1% better than the conventional fine-tuning. The experiment also shows that DSD training can reduce the variance of learning: the trained models after the sparse training and the final DSD training both have lower standard deviation of errors compared with their counterparts using conventional fine-tuning.\nWe used t-test (unpaired) to compare the top-1 testing error rate of the models trained using DSD and conventional methods. The results demonstrate the DSD training achieves significant improvements from both the baseline model (p<0.001) and conventional fine tuning (p<0.001).\nBased on the results above, DSD significantly improves conventional baseline training and is also significantly better and more robust than conventional fine-tuning."
    }, {
      "heading" : "B. APPENDIX: MORE EXAMPLES OF DSD TRAINING IMPROVES THE CAPTIONS GENERATED BY NEURALTALK (IMAGES FROM FLICKR-8K TEST SET)",
      "text" : "Baseline: a man in a red shirt and jeans is riding a bicycle down a street. Sparse: a man in a red shirt and a woman in a wheelchair. DSD: a man and a woman are riding on a street. Baseline: two girls in bathing suits are playing in the water. Sparse: two children are playing in the sand. DSD: two children are playing in the sand. Baseline: a group of people are standing in front of a building. Sparse: a group of people are standing in front of a building. DSD: a group of people are walking in a park.\nBaseline: a dog runs through the grass. Sparse: a dog runs through the grass. DSD: a white and brown dog is running through the grass. Baseline: a group of football players in red uniforms. Sparse: a group of football players in a field. DSD: a group of football players in red and white uniforms. Baseline: a group of people sit on a bench in front of a building. Sparse: a group of people are standing in front of a building. DSD: a group of people are standing in a fountain. Baseline: a man in a black jacket and a black jacket is smiling. Sparse: a man and a woman are standing in front of a mountain. DSD: a man in a black jacket is standing next to a man in a black shirt.\nBaseline:a young girl in a red dress is holding a camera. Sparse: a little girl in a pink dress is standing in front of a tree. DSD: a little girl in a red dress is holding a red and white flowers. Baseline: a man in a red jacket is standing in front of a white building. Sparse: a man in a black jacket is standing in front of a brick wall. DSD: a man in a black jacket is standing in front of a white building. Baseline: a man in a red shirt is standing on a rock. Sparse: a man in a red jacket is standing on a mountaintop. DSD: a man is standing on a rock overlooking the mountains. Baseline: a group of people are sitting in a subway station. Sparse: a man and a woman are sitting on a couch. DSD: a group of people are sitting at a table in a room.\nBaseline: a soccer player in a red and white uniform is running on the field. Sparse: a soccer player in a red uniform is tackling another player in a white uniform. DSD: a soccer player in a red uniform kicks a soccer ball. Baseline: a young girl in a swimming pool. Sparse: a young boy in a swimming pool. DSD: a girl in a pink bathing suit jumps into a pool. Baseline: a soccer player in a red and white uniform is playing with a soccer ball. Sparse: two boys playing soccer. DSD: two boys playing soccer. Baseline: a girl in a white dress is standing on a sidewalk. Sparse: a girl in a pink shirt is standing in front of a white building. DSD: a girl in a pink dress is walking on a sidewalk.\nBaseline: a boy is swimming in a pool. Sparse: a small black dog is jumping into a pool. DSD: a black and white dog is swimming in a pool.\nA. Supplementary Material: More Examples of DSD Training Improves the Performance of NeuralTalk Auto-Caption System\n1\nBaseline: a snowboarder flies through the air. Sparse: a person is snowboarding down a snowy hill. DSD: a person on a snowboard is jumping over a snowy hill. Baseline: two young girls are posing for a picture. Sparse: a young girl with a blue shirt is blowing bubbles. DSD: a young boy and a woman smile for the camera. Baseline: a man in a red shirt is sitting in a subway station. Sparse: a woman in a blue shirt is standing in front of a store. DSD: a man in a black shirt is standing in front of a restaurant. Baseline: a surfer is riding a wave. Sparse: a man in a black wetsuit is surfing on a wave. DSD: a man in a black wetsuit is surfing a wave.\nBaseline: a man in a red shirt is standing on top of a rock. Sparse: a man in a red shirt is standing on a cliff overlooking the mountains. DSD: a man is standing on a rock overlooking the mountains.\nBaseline: a group of people sit on a bench. Sparse: a group of people are sitting on a bench. DSD: a group of children are sitting on a bench.\nBaseline: a little boy is playing with a toy. Sparse: a little boy in a blue shirt is playing with bubbles. DSD: a baby in a blue shirt is playing with a toy.\nBaseline: a brown dog is running through the grassy. Sparse: a brown dog is playing with a ball. DSD: a brown dog is playing with a ball.\nBaseline: a boy in a red shirt is jumping on a trampoline. Sparse: a boy in a red shirt is jumping in the air. DSD: a boy in a red shirt is jumping off a swing.\nBaseline: a man is standing on the edge of a cliff. Sparse: a man is standing on the shore of a lake. DSD: a man is standing on the shore of the ocean.\nBaseline: two people are riding a boat on the beach. Sparse: two people are riding a wave on a beach. DSD: a man in a yellow kayak is riding a wave.\nBaseline: a black and white dog is running on the beach. Sparse: a black and white dog running on the beach. DSD: a black dog is running on the beach.\nBaseline: a man and a dog are playing with a ball. Sparse: a man and a woman are playing tug of war. DSD: a man and a woman are playing with a dog.\nBaseline: a group of people are standing in a room. Sparse: a group of people gather together. DSD: a group of people are posing for a picture.\nBaseline: a man in a red jacket is riding a bike through the woods. Sparse: a man in a red jacket is doing a jump on a snowboard. DSD: a person on a dirt bike jumps over a hill.\nBaseline: a man in a red jacket and a helmet is standing in the snow. Sparse: a man in a red jacket and a helmet is standing in the snow. DSD: a man in a red jacket is standing in front of a snowy mountain.\n2"
    } ],
    "references" : [ {
      "title" : "Deep speech 2: End-to-end speech recognition in english and mandarin",
      "author" : [ "Dario Amodei", "Rishita Anubhai", "Eric Battenberg", "Carl Case", "Jared Casper", "Bryan Catanzaro", "Jingdong Chen", "Mike Chrzanowski", "Adam Coates", "Greg Diamos" ],
      "venue" : "arXiv preprint arXiv:1512.02595,",
      "citeRegEx" : "Amodei et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Amodei et al\\.",
      "year" : 2015
    }, {
      "title" : "Sparsity and incoherence in compressive sampling",
      "author" : [ "Emmanuel Candes", "Justin Romberg" ],
      "venue" : "Inverse problems,",
      "citeRegEx" : "Candes and Romberg.,? \\Q2007\\E",
      "shortCiteRegEx" : "Candes and Romberg.",
      "year" : 2007
    }, {
      "title" : "Identifying and attacking the saddle point problem in high-dimensional non-convex optimization",
      "author" : [ "Yann N Dauphin", "Razvan Pascanu", "Caglar Gulcehre", "Kyunghyun Cho", "Surya Ganguli", "Yoshua Bengio" ],
      "venue" : "In Advances in neural information processing systems,",
      "citeRegEx" : "Dauphin et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Dauphin et al\\.",
      "year" : 2014
    }, {
      "title" : "Learning both weights and connections for efficient neural network",
      "author" : [ "Song Han", "Jeff Pool", "John Tran", "William Dally" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Han et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Han et al\\.",
      "year" : 2015
    }, {
      "title" : "Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding",
      "author" : [ "Song Han", "Huizi Mao", "William J Dally" ],
      "venue" : "International Conference on Learning Representations,",
      "citeRegEx" : "Han et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Han et al\\.",
      "year" : 2016
    }, {
      "title" : "Deep speech: Scaling up end-to-end speech recognition",
      "author" : [ "Awni Hannun", "Carl Case", "Jared Casper", "Bryan Catanzaro", "Greg Diamos", "Erich Elsen", "Ryan Prenger", "Sanjeev Satheesh", "Shubho Sengupta", "Adam Coates", "Andrew Ng" ],
      "venue" : "arXiv, preprint arXiv:1412.5567,",
      "citeRegEx" : "Hannun et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Hannun et al\\.",
      "year" : 2014
    }, {
      "title" : "Second order derivatives for network pruning: Optimal brain surgeon",
      "author" : [ "Babak Hassibi", "David G Stork" ],
      "venue" : "Advances in neural information processing systems,",
      "citeRegEx" : "Hassibi and Stork,? \\Q1993\\E",
      "shortCiteRegEx" : "Hassibi and Stork",
      "year" : 1993
    }, {
      "title" : "Deep residual learning for image recognition",
      "author" : [ "Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun" ],
      "venue" : "arXiv preprint arXiv:1512.03385,",
      "citeRegEx" : "He et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2015
    }, {
      "title" : "Distilling the knowledge in a neural network",
      "author" : [ "Geoffrey Hinton", "Oriol Vinyals", "Jeff Dean" ],
      "venue" : "arXiv preprint arXiv:1503.02531,",
      "citeRegEx" : "Hinton et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Hinton et al\\.",
      "year" : 2015
    }, {
      "title" : "Simulated annealing: theory and applications",
      "author" : [ "Chii-Ruey Hwang" ],
      "venue" : "Acta Applicandae Mathematicae,",
      "citeRegEx" : "Hwang.,? \\Q1988\\E",
      "shortCiteRegEx" : "Hwang.",
      "year" : 1988
    }, {
      "title" : "BVLC caffe model zoo",
      "author" : [ "Yangqing Jia" ],
      "venue" : "http://caffe.berkeleyvision.org/model_zoo,",
      "citeRegEx" : "Jia.,? \\Q2013\\E",
      "shortCiteRegEx" : "Jia.",
      "year" : 2013
    }, {
      "title" : "Training skinny deep neural networks with iterative hard thresholding methods",
      "author" : [ "Xiaojie Jin", "Xiaotong Yuan", "Jiashi Feng", "Shuicheng Yan" ],
      "venue" : "arXiv preprint arXiv:1607.05423,",
      "citeRegEx" : "Jin et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Jin et al\\.",
      "year" : 2016
    }, {
      "title" : "Deep visual-semantic alignments for generating image descriptions",
      "author" : [ "Andrej Karpathy", "Li Fei-Fei" ],
      "venue" : "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "Karpathy and Fei.Fei.,? \\Q2015\\E",
      "shortCiteRegEx" : "Karpathy and Fei.Fei.",
      "year" : 2015
    }, {
      "title" : "Sparse online learning via truncated gradient",
      "author" : [ "John Langford", "Lihong Li", "Tong Zhang" ],
      "venue" : "In Advances in neural information processing systems,",
      "citeRegEx" : "Langford et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Langford et al\\.",
      "year" : 2009
    }, {
      "title" : "Optimal brain damage",
      "author" : [ "Yann LeCun", "John S. Denker", "Sara A. Solla" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "LeCun et al\\.,? \\Q1990\\E",
      "shortCiteRegEx" : "LeCun et al\\.",
      "year" : 1990
    }, {
      "title" : "Effective approaches to attention-based neural machine translation",
      "author" : [ "Minh-Thang Luong", "Hieu Pham", "Christopher D Manning" ],
      "venue" : "arXiv preprint arXiv:1508.04025,",
      "citeRegEx" : "Luong et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Luong et al\\.",
      "year" : 2015
    }, {
      "title" : "All you need is a good init",
      "author" : [ "Dmytro Mishkin", "Jiri Matas" ],
      "venue" : "arXiv preprint arXiv:1511.06422,",
      "citeRegEx" : "Mishkin and Matas.,? \\Q2015\\E",
      "shortCiteRegEx" : "Mishkin and Matas.",
      "year" : 2015
    }, {
      "title" : "A simple weight decay can improve generalization",
      "author" : [ "J Moody", "S Hanson", "Anders Krogh", "John A Hertz" ],
      "venue" : "Advances in neural information processing systems,",
      "citeRegEx" : "Moody et al\\.,? \\Q1995\\E",
      "shortCiteRegEx" : "Moody et al\\.",
      "year" : 1995
    }, {
      "title" : "Very deep convolutional networks for large-scale image recognition",
      "author" : [ "Karen Simonyan", "Andrew Zisserman" ],
      "venue" : "arXiv preprint arXiv:1409.1556,",
      "citeRegEx" : "Simonyan and Zisserman.,? \\Q2014\\E",
      "shortCiteRegEx" : "Simonyan and Zisserman.",
      "year" : 2014
    }, {
      "title" : "Dropout: A simple way to prevent neural networks from overfitting",
      "author" : [ "Nitish Srivastava", "Geoffrey Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov" ],
      "venue" : null,
      "citeRegEx" : "Srivastava et al\\.,? \\Q1929\\E",
      "shortCiteRegEx" : "Srivastava et al\\.",
      "year" : 1929
    }, {
      "title" : "Going deeper with convolutions",
      "author" : [ "Christian Szegedy", "Wei Liu", "Yangqing Jia", "Pierre Sermanet", "Scott Reed", "Dragomir Anguelov", "Dumitru Erhan", "Vincent Vanhoucke", "Andrew Rabinovich" ],
      "venue" : "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "Szegedy et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Szegedy et al\\.",
      "year" : 2015
    }, {
      "title" : "Regularization of neural networks using dropconnect",
      "author" : [ "Li Wan", "Matthew Zeiler", "Sixin Zhang", "Yann L Cun", "Rob Fergus" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Wan et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Wan et al\\.",
      "year" : 2013
    }, {
      "title" : "High dimensional expectation-maximization algorithm: Statistical optimization and asymptotic normality",
      "author" : [ "Zhaoran Wang", "Quanquan Gu", "Yang Ning", "Han Liu" ],
      "venue" : "arXiv preprint arXiv:1412.8729,",
      "citeRegEx" : "Wang et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2014
    }, {
      "title" : "Truncated power method for sparse eigenvalue problems",
      "author" : [ "Xiao-Tong Yuan", "Tong Zhang" ],
      "venue" : "The Journal of Machine Learning Research,",
      "citeRegEx" : "Yuan and Zhang.,? \\Q2013\\E",
      "shortCiteRegEx" : "Yuan and Zhang.",
      "year" : 2013
    } ],
    "referenceMentions" : [ {
      "referenceID" : 6,
      "context" : "Deep neural networks (DNNs) have shown significant improvements in many application domains, ranging from computer vision (He et al. (2015)) to natural language processing (Luong et al.",
      "startOffset" : 123,
      "endOffset" : 140
    }, {
      "referenceID" : 6,
      "context" : "Deep neural networks (DNNs) have shown significant improvements in many application domains, ranging from computer vision (He et al. (2015)) to natural language processing (Luong et al. (2015)) and speech recognition (Amodei et al.",
      "startOffset" : 123,
      "endOffset" : 193
    }, {
      "referenceID" : 0,
      "context" : "(2015)) and speech recognition (Amodei et al. (2015)).",
      "startOffset" : 32,
      "endOffset" : 53
    }, {
      "referenceID" : 17,
      "context" : "This is a good phenomenon: choosing the smallest vector that solves the learning problem suppresses irrelevant components of the weight vector ( Moody et al. (1995)).",
      "startOffset" : 145,
      "endOffset" : 165
    }, {
      "referenceID" : 19,
      "context" : "Dropout and DropConnect: DSD, Dropout (Srivastava et al. (2014)) and DropConnnect (Wan et al.",
      "startOffset" : 39,
      "endOffset" : 64
    }, {
      "referenceID" : 19,
      "context" : "Dropout and DropConnect: DSD, Dropout (Srivastava et al. (2014)) and DropConnnect (Wan et al. (2013)) can all regularize neural networks and prevent over-fitting.",
      "startOffset" : 39,
      "endOffset" : 101
    }, {
      "referenceID" : 6,
      "context" : "Distillation: Model distillation (Hinton et al. (2015)) is a method that can transfer the learned knowledge from a large model to a small model, which is more efficient for deployment.",
      "startOffset" : 34,
      "endOffset" : 55
    }, {
      "referenceID" : 3,
      "context" : "Model Compression: Both model compression (Han et al. (2016; 2015)) and DSD training use network pruning (LeCun et al. (1990); Hassibi et al.",
      "startOffset" : 43,
      "endOffset" : 126
    }, {
      "referenceID" : 3,
      "context" : "Model Compression: Both model compression (Han et al. (2016; 2015)) and DSD training use network pruning (LeCun et al. (1990); Hassibi et al. (1993)).",
      "startOffset" : 43,
      "endOffset" : 149
    }, {
      "referenceID" : 3,
      "context" : "Model Compression: Both model compression (Han et al. (2016; 2015)) and DSD training use network pruning (LeCun et al. (1990); Hassibi et al. (1993)). The difference is that the focus of DSD training goes beyond maintaining the accuracy. DSD is able to further improve the accuracy by considerable margins. Another difference is that DSD training doesn’t require aggressive pruning. A modestly pruned network (50%-60% sparse) can work well. However, model compression requires aggressively pruning the network to achieve high compression rates. Sparsity Regularization and Hard Thresholding: the truncation-based sparse network has been theoretically analyzed for learning a broad range of statistical models in high dimensions (Langford et al. (2009); Yuan & Zhang (2013); Wang et al.",
      "startOffset" : 43,
      "endOffset" : 752
    }, {
      "referenceID" : 3,
      "context" : "Model Compression: Both model compression (Han et al. (2016; 2015)) and DSD training use network pruning (LeCun et al. (1990); Hassibi et al. (1993)). The difference is that the focus of DSD training goes beyond maintaining the accuracy. DSD is able to further improve the accuracy by considerable margins. Another difference is that DSD training doesn’t require aggressive pruning. A modestly pruned network (50%-60% sparse) can work well. However, model compression requires aggressively pruning the network to achieve high compression rates. Sparsity Regularization and Hard Thresholding: the truncation-based sparse network has been theoretically analyzed for learning a broad range of statistical models in high dimensions (Langford et al. (2009); Yuan & Zhang (2013); Wang et al.",
      "startOffset" : 43,
      "endOffset" : 773
    }, {
      "referenceID" : 3,
      "context" : "Model Compression: Both model compression (Han et al. (2016; 2015)) and DSD training use network pruning (LeCun et al. (1990); Hassibi et al. (1993)). The difference is that the focus of DSD training goes beyond maintaining the accuracy. DSD is able to further improve the accuracy by considerable margins. Another difference is that DSD training doesn’t require aggressive pruning. A modestly pruned network (50%-60% sparse) can work well. However, model compression requires aggressively pruning the network to achieve high compression rates. Sparsity Regularization and Hard Thresholding: the truncation-based sparse network has been theoretically analyzed for learning a broad range of statistical models in high dimensions (Langford et al. (2009); Yuan & Zhang (2013); Wang et al. (2014)).",
      "startOffset" : 43,
      "endOffset" : 793
    }, {
      "referenceID" : 3,
      "context" : "Model Compression: Both model compression (Han et al. (2016; 2015)) and DSD training use network pruning (LeCun et al. (1990); Hassibi et al. (1993)). The difference is that the focus of DSD training goes beyond maintaining the accuracy. DSD is able to further improve the accuracy by considerable margins. Another difference is that DSD training doesn’t require aggressive pruning. A modestly pruned network (50%-60% sparse) can work well. However, model compression requires aggressively pruning the network to achieve high compression rates. Sparsity Regularization and Hard Thresholding: the truncation-based sparse network has been theoretically analyzed for learning a broad range of statistical models in high dimensions (Langford et al. (2009); Yuan & Zhang (2013); Wang et al. (2014)). A similar training strategy with iterative hard thresholding and connection restoration is proposed by Jin et al. (2016) during the same time period as, but independently from, DSD.",
      "startOffset" : 43,
      "endOffset" : 916
    }, {
      "referenceID" : 3,
      "context" : "Model Compression: Both model compression (Han et al. (2016; 2015)) and DSD training use network pruning (LeCun et al. (1990); Hassibi et al. (1993)). The difference is that the focus of DSD training goes beyond maintaining the accuracy. DSD is able to further improve the accuracy by considerable margins. Another difference is that DSD training doesn’t require aggressive pruning. A modestly pruned network (50%-60% sparse) can work well. However, model compression requires aggressively pruning the network to achieve high compression rates. Sparsity Regularization and Hard Thresholding: the truncation-based sparse network has been theoretically analyzed for learning a broad range of statistical models in high dimensions (Langford et al. (2009); Yuan & Zhang (2013); Wang et al. (2014)). A similar training strategy with iterative hard thresholding and connection restoration is proposed by Jin et al. (2016) during the same time period as, but independently from, DSD. Sparsity regularized optimization is heavily applied in Compressed Sensing (Candes & Romberg (2007)) to find optimal solutions to the inverse problems in highly under-determined systems based on the sparsity assumption.",
      "startOffset" : 43,
      "endOffset" : 1077
    }, {
      "referenceID" : 19,
      "context" : "We experimented with the BVLC GoogLeNet (Szegedy et al. (2015)) model obtained from the Caffe Model Zoo (Jia (2013)).",
      "startOffset" : 41,
      "endOffset" : 63
    }, {
      "referenceID" : 10,
      "context" : "(2015)) model obtained from the Caffe Model Zoo (Jia (2013)).",
      "startOffset" : 49,
      "endOffset" : 60
    }, {
      "referenceID" : 10,
      "context" : "The baseline model is obtained from the Caffe Model Zoo (Jia (2013)).",
      "startOffset" : 57,
      "endOffset" : 68
    }, {
      "referenceID" : 7,
      "context" : "Deep Residual Networks (ResNets, He et al. (2015)) were the top performer in the 2015 ImageNet challenge.",
      "startOffset" : 33,
      "endOffset" : 50
    }, {
      "referenceID" : 7,
      "context" : "Deep Residual Networks (ResNets, He et al. (2015)) were the top performer in the 2015 ImageNet challenge. The baseline ResNet-18 and ResNet-50 models are provided by Facebook (2016). We prune to 30% sparsity uniformly, and a single DSD pass for these networks reduced top-1 error by 1.",
      "startOffset" : 33,
      "endOffset" : 182
    }, {
      "referenceID" : 4,
      "context" : "We explore DSD training on speech recognition tasks using both Deep Speech 1 (DS1) and Deep Speech 2 (DS2) networks (Hannun et al. (2014); Amodei et al.",
      "startOffset" : 117,
      "endOffset" : 138
    }, {
      "referenceID" : 0,
      "context" : "(2014); Amodei et al. (2015)).",
      "startOffset" : 8,
      "endOffset" : 29
    }, {
      "referenceID" : 0,
      "context" : "The Word Error Rate (WER) reported on the test sets for the baseline models is different from Amodei et al. (2015) due to two factors.",
      "startOffset" : 94,
      "endOffset" : 115
    }, {
      "referenceID" : 2,
      "context" : "Escape Saddle Point: Based on previous studies, one of the most profound difficulties of optimizing deep networks is the proliferation of saddle points (Dauphin et al. (2014)).",
      "startOffset" : 153,
      "endOffset" : 175
    }, {
      "referenceID" : 2,
      "context" : "Escape Saddle Point: Based on previous studies, one of the most profound difficulties of optimizing deep networks is the proliferation of saddle points (Dauphin et al. (2014)). Advanced optimization methods have been proposed to overcome saddle points. For a similar purpose but with a different approach, the proposed DSD method overcomes the saddle points by pruning and re-densifying framework. Pruning the converged model perturbs the learning dynamics and allows the network to jump away from saddle points, which gives the network a chance to converge at a better local or global minimum. This idea is also similar to Simulated Annealing ( Hwang (1988)).",
      "startOffset" : 153,
      "endOffset" : 659
    } ],
    "year" : 2017,
    "abstractText" : "Modern deep neural networks have a large number of parameters, making them very hard to train. We propose DSD, a dense-sparse-dense training flow, for regularizing deep neural networks and achieving better optimization performance. In the first D (Dense) step, we train a dense network to learn connection weights and importance. In the S (Sparse) step, we regularize the network by pruning the unimportant connections with small weights and retraining the network given the sparsity constraint. In the final D (re-Dense) step, we increase the model capacity by removing the sparsity constraint, re-initialize the pruned parameters from zero and retrain the whole dense network. Experiments show that DSD training can improve the performance for a wide range of CNNs, RNNs and LSTMs on the tasks of image classification, caption generation and speech recognition. On ImageNet, DSD improved the Top1 accuracy of GoogLeNet by 1.1%, VGG-16 by 4.3%, ResNet-18 by 1.2% and ResNet-50 by 1.1%, respectively. On the WSJ’93 dataset, DSD improved DeepSpeech and DeepSpeech2 WER by 2.0% and 1.1%. On the Flickr-8K dataset, DSD improved the NeuralTalk BLEU score by over 1.7. DSD is easy to use in practice: at training time, DSD incurs only one extra hyper-parameter: the sparsity ratio in the S step. At testing time, DSD doesn’t change the network architecture or incur any inference overhead. The consistent and significant performance gain of DSD experiments shows the inadequacy of the current training methods for finding the best local optimum, while DSD effectively achieves superior optimization performance for finding a better solution. DSD models are available to download at https://songhan.github.io/DSD.",
    "creator" : "LaTeX with hyperref package"
  }
}