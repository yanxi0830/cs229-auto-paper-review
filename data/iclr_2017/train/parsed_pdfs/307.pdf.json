{
  "name" : "307.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ ],
    "emails" : [ "jase}@fb.com" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "The most useful applications of dialog systems such as digital personal assistants or bots are currently goal-oriented and transactional: the system needs to understand a user request and complete a related task with a clear goal within a limited number of dialog turns. The workhorse of traditional dialog systems is slot-filling (Lemon et al., 2006; Wang and Lemon, 2013; Young et al., 2013) which predefines the structure of a dialog state as a set of slots to be filled during the dialog. For a restaurant reservation system, such slots can be the location, price range or type of cuisine of a restaurant. Slot-filling has proven reliable but is inherently hard to scale to new domains: it is impossible to manually encode all features and slots that users might refer to in a conversation.\nEnd-to-end dialog systems, usually based on neural networks (Shang et al., 2015; Vinyals and Le, 2015; Sordoni et al., 2015; Serban et al., 2015a; Dodge et al., 2016), escape such limitations: all their components are directly trained on past dialogs, with no assumption on the domain or dialog state structure, thus making it easy to automatically scale up to new domains. They have shown promising performance in non goal-oriented chit-chat settings, where they were trained to predict the next utterance in social media and forum threads (Ritter et al., 2011; Wang et al., 2013; Lowe et al., 2015) or movie conversations (Banchs, 2012). But the performance achieved on chit-chat may not necessarily carry over to goal-oriented conversations. As illustrated in Figure 1 in a restaurant reservation scenario, conducting goal-oriented dialog requires skills that go beyond language modeling, e.g., asking questions to clearly define a user request, querying Knowledge Bases (KBs), interpreting results from queries to display options to users or completing a transaction. This makes it hard to ascertain how well end-to-end dialog models would do, especially since evaluating chit-chat performance in itself is not straightforward (Liu et al., 2016). In particular, it is unclear if end-to-end models are in a position to replace traditional dialog methods in a goal-directed setting: can end-to-end dialog models be competitive with traditional methods even in the well-defined narrow-domain tasks where they excel? If not, where do they fall short?\nThis paper aims to make it easier to address these questions by proposing an open resource to test endto-end dialog systems in a way that 1) favors reproducibility and comparisons, and 2) is lightweight and easy to use. We aim to break down a goal-directed objective into several subtasks to test some crucial capabilities that dialog systems should have (and hence provide error analysis by design).\nIn the spirit of the bAbI tasks conceived as question answering testbeds (Weston et al., 2015b), we designed a set of five tasks within the goal-oriented context of restaurant reservation. Grounded with an underlying KB of restaurants and their properties (location, type of cuisine, etc.), these tasks cover several dialog stages and test if models can learn various abilities such as performing dialog management, querying KBs, interpreting the output of such queries to continue the conversation or dealing with new entities not appearing in dialogs from the training set. In addition to showing how the set of tasks we propose can be used to test the goal-directed capabilities of an end-to-end dialog system, we also propose results on two additional datasets extracted from real interactions with users, to confirm that the pattern of results observed in our tasks is indeed a good proxy for what would be observed on real data, with the added benefit of better reproducibility and interpretability.\nThe goal here is explicitly not to improve the state of the art in the narrow domain of restaurant booking, but to take a narrow domain where traditional handcrafted dialog systems are known to perform well, and use that to gauge the strengths and weaknesses of current end-to-end systems with no domain knowledge. Solving our tasks requires manipulating both natural language and symbols from a KB. Evaluation uses two metrics, per-response and per-dialog accuracies, the latter tracking completion of the actual goal. Figure 1 depicts the tasks and Section 3 details them. Section 4 compares multiple methods on these tasks. As an end-to-end neural model, we tested Memory Networks (Weston et al., 2015a), an attention-based architecture that has proven competitive for non goal-oriented dialog (Dodge et al., 2016). Our experiments in Section 5 show that Memory Networks can be trained to perform non-trivial operations such as issuing API calls to KBs and manipulating entities unseen in training. We confirm our findings on real human-machine dialogs\nfrom the restaurant reservation dataset of the 2nd Dialog State Tracking Challenge, or DSTC2 (Henderson et al., 2014a), which we converted into our task format, showing that Memory Networks can outperform a dedicated slot-filling rule-based baseline. We also evaluate on a dataset of humanhuman dialogs extracted from an online concierge service that books restaurants for users. Overall, the per-response performance is encouraging, but the per-dialog one remains low, indicating that end-to-end models still need to improve before being able to reliably handle goal-oriented dialog."
    }, {
      "heading" : "2 RELATED WORK",
      "text" : "The most successful goal-oriented dialog systems model conversation as partially observable Markov decision processes (POMDP) (Young et al., 2013). However, despite recent efforts to learn modules (Henderson et al., 2014b), they still require many hand-crafted features for the state and action space representations, which restrict their usage to narrow domains. Our simulation, used to generate goal-oriented datasets, can be seen as an equivalent of the user simulators used to train POMDP (Young et al., 2013; Pietquin and Hastie, 2013), but for training end-to-end systems.\nSerban et al. (2015b) list available corpora for training dialog systems. Unfortunately, no good resources exist to train and test end-to-end models in goal-oriented scenarios. Goal-oriented datasets are usually designed to train or test dialog state tracker components (Henderson et al., 2014a) and are hence of limited scale and not suitable for end-to-end learning (annotated at the state level and noisy). However, we do convert the Dialog State Tracking Challenge data into our framework. Some datasets are not open source, and require a particular license agreement or the participation to a challenge (e.g., the end-to-end task of DSTC4 (Kim et al., 2016)) or are proprietary (e.g., Chen et al. (2016)). Datasets are often based on interactions between users and existing systems (or ensemble of systems) like DSTC datasets, SFCore (Ga≈°ic et al., 2014) or ATIS (Dahl et al., 1994). This creates noise and makes it harder to interpret the errors of a model. Lastly, resources designed to connect dialog systems to users, in particular in the context of reinforcement learning, are usually built around a crowdsourcing setting such as Amazon Mechanical Turk, e.g., (Hixon et al., 2015; Wen et al., 2015; Su et al., 2015a;b). While this has clear advantages, it prevents reproducibility and consistent comparisons of methods in the exact same setting.\nThe closest resource to ours might be the set of tasks described in (Dodge et al., 2016), since some of them can be seen as goal-oriented. However, those are question answering tasks rather than dialog, i.e. the bot only responds with answers, never questions, which does not reflect full conversation."
    }, {
      "heading" : "3 GOAL-ORIENTED DIALOG TASKS",
      "text" : "All our tasks involve a restaurant reservation system, where the goal is to book a table at a restaurant. The first five tasks are generated by a simulation, the last one uses real human-bot dialogs. The data for all tasks is available at http://fb.ai/babi. We also give results on a proprietary dataset extracted from an online restaurant reservation concierge service with anonymized users."
    }, {
      "heading" : "3.1 RESTAURANT RESERVATION SIMULATION",
      "text" : "The simulation is based on an underlying KB, whose facts contain the restaurants that can be booked and their properties. Each restaurant is defined by a type of cuisine (10 choices, e.g., French, Thai), a location (10 choices, e.g., London, Tokyo), a price range (cheap, moderate or expensive) and a rating (from 1 to 8). For simplicity, we assume that each restaurant only has availability for a single party size (2, 4, 6 or 8 people). Each restaurant also has an address and a phone number listed in the KB.\nThe KB can be queried using API calls, which return the list of facts related to the corresponding restaurants. Each query must contain four fields: a location, a type of cuisine, a price range and a party size. It can return facts concerning one, several or no restaurant (depending on the party size).\nUsing the KB, conversations are generated in the format shown in Figure 1. Each example is a dialog comprising utterances from a user and a bot, as well as API calls and the resulting facts. Dialogs are generated after creating a user request by sampling an entry for each of the four required fields: e.g. the request in Figure 1 is [cuisine: British, location: London, party size: six, price range: expensive]. We use natural language patterns to create user and bot utterances. There are 43 patterns for the user and 20 for the bot (the user can use up to 4 ways to say something, while the bot always uses the same). Those patterns are combined with the KB entities to form thousands of different utterances."
    }, {
      "heading" : "3.1.1 TASK DEFINITIONS",
      "text" : "We now detail each task. Tasks 1 and 2 test dialog management to see if end-to-end systems can learn to implicitly track dialog state (never given explicitly), whereas Task 3 and 4 check if they can learn to use KB facts in a dialog setting. Task 3 also requires to learn to sort. Task 5 combines all tasks.\nTask 1: Issuing API calls A user request implicitly defines a query that can contain from 0 to 4 of the required fields (sampled uniformly; in Figure 1, it contains 3). The bot must ask questions for filling the missing fields and eventually generate the correct corresponding API call. The bot asks for information in a deterministic order, making prediction possible.\nTask 2: Updating API calls Starting by issuing an API call as in Task 1, users then ask to update their requests between 1 and 4 times (sampled uniformly). The order in which fields are updated is random. The bot must ask users if they are done with their updates and issue the updated API call.\nTask 3: Displaying options Given a user request, we query the KB using the corresponding API call and add the facts resulting from the call to the dialog history. The bot must propose options to users by listing the restaurant names sorted by their corresponding rating (from higher to lower) until users accept. For each option, users have a 25% chance of accepting. If they do, the bot must stop displaying options, otherwise propose the next one. Users always accept the option if this is the last remaining one. We only keep examples with API calls retrieving at least 3 options.\nTask 4: Providing extra information Given a user request, we sample a restaurant and start the dialog as if users had agreed to book a table there. We add all KB facts corresponding to it to the dialog. Users then ask for the phone number of the restaurant, its address or both, with proportions 25%, 25% and 50% respectively. The bot must learn to use the KB facts correctly to answer.\nTask 5: Conducting full dialogs We combine Tasks 1-4 to generate full dialogs just as in Figure 1. Unlike in Task 3, we keep examples if API calls return at least 1 option instead of 3."
    }, {
      "heading" : "3.1.2 DATASETS",
      "text" : "We want to test how well models handle entities appearing in the KB but not in the dialog training sets. We split types of cuisine and locations in half, and create two KBs, one with all facts about restaurants within the first halves and one with the rest. This yields two KBs of 4,200 facts and 600 restaurants each (5 types of cuisine √ó 5 locations √ó 3 price ranges √ó 8 ratings) that only share price ranges, ratings and party sizes, but have disjoint sets of restaurants, locations, types of cuisine, phones and addresses. We use one of the KBs to generate the standard training, validation and test dialogs, and use the other KB only to generate test dialogs, termed Out-Of-Vocabulary (OOV) test sets.\nFor training, systems have access to the training examples and both KBs. We then evaluate on both test sets, plain and OOV. Beyond the intrinsic difficulty of each task, the challenge on the OOV test\nsets is for models to generalize to new entities (restaurants, locations and cuisine types) unseen in any training dialog ‚Äì something natively impossible for embedding methods. Ideally, models could, for instance, leverage information coming from the entities of the same type seen during training.\nWe generate five datasets, one per task defined in 3.1.1. Table 1 gives their statistics. Training sets are relatively small (1,000 examples) to create realistic learning conditions. The dialogs from the training and test sets are different, never being based on the same user requests. Thus, we test if models can generalize to new combinations of fields. Dialog systems are evaluated in a ranking, not a generation, setting: at each turn of the dialog, we test whether they can predict bot utterances and API calls by selecting a candidate, not by generating it.1 Candidates are ranked from a set of all bot utterances and API calls appearing in training, validation and test sets (plain and OOV) for all tasks combined."
    }, {
      "heading" : "3.2 DIALOG STATE TRACKING CHALLENGE",
      "text" : "Since our tasks rely on synthetically generated language for the user, we supplement our dataset with real human-bot dialogs. We use data from DSTC2 (Henderson et al., 2014a), that is also in the restaurant booking domain. Unlike our tasks, its user requests only require 3 fields: type of cuisine (91 choices), location (5 choices) and price range (3 choices). The dataset was originally designed for dialog state tracking hence every dialog turn is labeled with a state (a user intent + slots) to be predicted. As our goal is to evaluate end-to-end training, we did not use that, but instead converted the data into the format of our 5 tasks and included it in the dataset as Task 6.\nWe used the provided speech transcriptions to create the user and bot utterances, and given the dialog states we created the API calls to the KB and their outputs which we added to the dialogs. We also added ratings to the restaurants returned by the API calls, so that the options proposed by the bots can be consistently predicted (by using the highest rating). We did use the original test set but use a slightly different training/validation split. Our evaluation differs from the challenge (we do not predict the dialog state), so we cannot compare with the results from (Henderson et al., 2014a).\nThis dataset has similar statistics to our Task 5 (see Table 1) but is harder. The dialogs are noisier and the bots made mistakes due to speech recognition errors or misinterpretations and also do not always have a deterministic behavior (the order in which they can ask for information varies)."
    }, {
      "heading" : "3.3 ONLINE CONCIERGE SERVICE",
      "text" : "Tasks 1-6 are, at least partially, artificial. This provides perfect control over their design (at least for Tasks 1-5), but no guarantee that good performance would carry over from such synthetic to more realistic conditions. To quantify this, we also evaluate the models from Section 4 on data extracted from a real online concierge service performing restaurant booking: users make requests through a text-based chat interface that are handled by human operators who can make API calls. All conversations are between native English speakers.\nWe collected around 4k chats to create this extra dataset, denoted Concierge. All conversations have been anonymized by (1) removing all user identifiers, (2) using the Stanford NER tagger to remove named entities (locations, timestamps, etc.), (3) running some manually defined regex to filter out any remaining salient information (phone numbers, etc.). The dataset does not contain results from API calls, but still records when operators made use of an external service (Yelp or OpenTable) to gather information. Hence, these have to be predicted, but without any argument (unlike in Task 2).\nThe statistics of Concierge are given in Table 1. The dialogs are shorter than in Tasks 1-6, especially since they do not include results of API calls, but the vocabulary is more diverse and so is the candidate set; the candidate set is made of all utterances of the operator appearing in the training, validation and test sets. Beyond the higher variability of the language used by human operators compared to bots, the dataset offers additional challenges. The set of user requests is much wider, ranging from managing restaurant reservations to asking for recommendations or specific information. Users do not always stay focused on the request. API calls are not always used (e.g., the operator might use neither Yelp nor OpenTable to find a restaurant), and facts about restaurants are not structured nor constrained as in a KB. The structure of dialogs is thus much more variable. Users and operators also make typos, spelling and grammar mistakes.\n1 Lowe et al. (2016) termed this setting Next-Utterance-Classification."
    }, {
      "heading" : "4 MODELS",
      "text" : "To demonstrate how to use the dataset and provide baselines, we evaluate several learning methods on our goal-oriented dialog tasks: rule-based systems, classical information retrieval methods, supervised embeddings, and end-to-end Memory networks."
    }, {
      "heading" : "4.1 RULE-BASED SYSTEMS",
      "text" : "Our tasks T1-T5 are built with a simulator so as to be completely predictable. Thus it is possible to hand-code a rule based system that achieves 100% on them, similar to the bAbI tasks of Weston et al. (2015b). Indeed, the point of these tasks is not to check whether a human is smart enough to be able to build a rule-based system to solve them, but to help analyze in which circumstances machine learning algorithms are smart enough to work, and where they fail.\nHowever, the Dialog State Tracking Challenge task (T6) contains some real interactions with users. This makes rule-based systems less straightforward and not so accurate (which is where we expect machine learning to be useful). We implemented a rule-based system for this task in the following way. We initialized a dialog state using the 3 relevant slots for this task: cuisine type, location and price range. Then we analyzed the training data and wrote a series of rules that fire for triggers like word matches, positions in the dialog, entity detections or dialog state, to output particular responses, API calls and/or update a dialog state. Responses are created by combining patterns extracted from the training set with entities detected in the previous turns or stored in the dialog state. Overall we built 28 rules and extracted 21 patterns. We optimized the choice of rules and their application priority (when needed) using the validation set, reaching a validation per-response accuracy of 40.7%. We did not build a rule-based system for Concierge data as it is even less constrained."
    }, {
      "heading" : "4.2 CLASSICAL INFORMATION RETRIEVAL MODELS",
      "text" : "Classical information retrieval (IR) models with no machine learning are standard baselines that often perform surprisingly well on dialog tasks (Isbell et al., 2000; Jafarpour et al., 2010; Ritter et al., 2011; Sordoni et al., 2015). We tried two standard variants:\nTF-IDF Match For each possible candidate response, we compute a matching score between the input and the response, and rank the responses by score. The score is the TF‚ÄìIDF weighted cosine similarity between the bag-of-words of the input and bag-of-words of the candidate response. We consider the case of the input being either only the last utterance or the entire conversation history, and choose the variant that works best on the validation set (typically the latter).\nNearest Neighbor Using the input, we find the most similar conversation in the training set, and output the response from that example. In this case we consider the input to only be the last utterance, and consider the training set as (utterance, response) pairs that we select from. We use word overlap as the scoring method. When several responses are associated with the same utterance in training, we sort them by decreasing co-occurence frequency."
    }, {
      "heading" : "4.3 SUPERVISED EMBEDDING MODELS",
      "text" : "A standard, often strong, baseline is to use supervised word embedding models for scoring (conversation history, response) pairs. The embedding vectors are trained directly for this goal. In contrast, word embeddings are most well-known in the context of unsupervised training on raw text as in word2vec (Mikolov et al., 2013). Such models are trained by learning to predict the middle word given the surrounding window of words, or vice-versa. However, given training data consisting of dialogs, a much more direct and strongly performing training procedure can be used: predict the next response given the previous conversation. In this setting a candidate reponse y is scored against the input x: f(x, y) = (Ax)>By, where A and B are d√ó V word embedding matrices, i.e. input and response are treated as summed bags-of-embeddings. We also consider the case of enforcing A = B, which sometimes works better, and optimize the choice on the validation set.\nThe embeddings are trained with a margin ranking loss: f(x, y) > m + f(x, yÃÑ), with m the size of the margin, and we sample N negative candidate responses yÃÑ per example, and train with SGD. This approach has been previously shown to be very effective in a range of contexts (Bai et al., 2009;\nDodge et al., 2016). This method can be thought of as a classical information retrieval model, but where the matching function is learnt."
    }, {
      "heading" : "4.4 MEMORY NETWORKS",
      "text" : "Memory Networks (Weston et al., 2015a; Sukhbaatar et al., 2015) are a recent class of models that have been applied to a range of natural language processing tasks, including question answering (Weston et al., 2015b), language modeling (Sukhbaatar et al., 2015), and non-goal-oriented dialog (Dodge et al., 2016). By first writing and then iteratively reading from a memory component (using hops) that can store historical dialogs and short-term context to reason about the required response, they have been shown to perform well on those tasks and to outperform some other end-to-end architectures based on Recurrent Neural Networks. Hence, we chose them as end-to-end model baseline.\nWe use the MemN2N architecture of Sukhbaatar et al. (2015), with an additional modification to leverage exact matches and types, described shortly. Apart from that addition, the main components of the model are (i) how it stores the conversation in memory, (ii) how it reads from the memory to reason about the response; and (iii) how it outputs the response. The details are given in Appendix A."
    }, {
      "heading" : "4.5 MATCH TYPE FEATURES TO DEAL WITH ENTITIES",
      "text" : "Words denoting entities have two important traits: 1) exact matches are usually more appropriate to deal with them than approximate matches, and 2) they frequently appear as OOV words (e.g., the name of a new restaurant). Both are a challenge for embedding-based methods. Firstly, embedding into a low dimensional space makes it hard to differentiate between exact word matches, and matches between words with similar meaning (Bai et al., 2009). While this can be a virtue (e.g. when using synonyms), it is often a flaw when dealing with entities (e.g. failure to differentiate between phone numbers since they have similar embeddings). Secondly, when a new word is used (e.g. the name of a new restaurant) not seen before in training, no word embedding is available, typically resulting in failure (Weston et al., 2015a).\nBoth problems can be alleviated with match type features. Specifically, we augment the vocabulary with 7 special words, one for each of the KB entity types (cuisine type, location, price range, party size, rating, phone number and address). For each type, the corresponding type word is added to the candidate representation if a word is found that appears 1) as a KB entity of that type, 2) in the candidate, and 3) in the input or memory. Any word that matches as a KB entity can be typed even if it has never been seen before in training dialogs. These features allow the model to learn to rely on type information using exact matching words cues when OOV entity embeddings are not known, as long as it has access to a KB with the OOV entities. We assess the impact of such features for TF-IDF Match, Supervised Embeddings and Memory Networks."
    }, {
      "heading" : "5 EXPERIMENTS",
      "text" : "Our main results across all the models and tasks are given in Table 2 (extra results are also given in Table 10 of Appendix D). The first 5 rows show tasks T1-T5, and rows 6-10 show the same tasks in the out-of-vocabulary setting. Rows 11 and 12 give results for the Dialog State Tracking Challenge task (T6) and Concierge respectively. Columns 2-7 give the results of each method tried in terms of per-response accuracy and per-dialog accuracy, the latter given in parenthesis. Per-response accuracy counts the percentage of responses that are correct (i.e., the correct candidate is chosen out of all possible candidates). Per-dialog accuracy counts the percentage of dialogs where every response is correct. Ultimately, if only one response is incorrect this could result in a failed dialog, i.e. failure to achieve the goal (in this case, of achieving a restaurant booking). Note that we test Memory Networks (MemNNs) with and without match type features, the results are shown in the last two columns. The hyperparameters for all models were optimized on the validation sets; values for best performing models are given in Appendix C.\nThe classical IR method TF-IDF Match performs the worst of all methods, and much worse than the Nearest Neighbor IR method, which is true on both the simulated tasks T1-T5 and on the real data of T6 and Concierge. Supplementing TF-IDF Match with match type features noticeably improves performance, which however still remains far behind Nearest Neighbor IR (adding bigrams to the\ndictionary has no effect on performance). This is in sharp contrast to other recent results on datadriven non-goal directed conversations, e.g. over dialogs on Twitter (Ritter et al., 2011) or Reddit (Dodge et al., 2016), where it was found that TF-IDF Match outperforms Nearest Neighbor, as general conversations on a given subject typically share many words. We conjecture that the goal-oriented nature of the conversation means that the conversation moves forward more quickly, sharing fewer words per (input, response) pair, e.g. consider the example in Figure 1.\nSupervised embeddings outperform classical IR methods in general, indicating that learning mappings between words (via word embeddings) is important. However, only one task (T1, Issuing API calls) is completely successful. In the other tasks, some responses are correct, as shown by the per-response accuracy, however there is no dialog where the goal is actually achieved (i.e., the mean dialogaccuracy is 0). Typically the model can provide correct responses for greeting messages, asking to wait, making API calls and asking if there are any other options necessary. However, it fails to interpret the results of API calls to display options, provide information or update the calls with new information, resulting in most of its errors, even when match type features are provided.\nMemory Networks (without match type features) outperform classical IR and supervised embeddings across all of the tasks. They can solve the first two tasks (issuing and updating API calls) adequately. On the other tasks, they give improved results, but do not solve them. While the per-response accuracy is improved, the per-dialog accuracy is still close to 0 on T3 and T4. Some examples of predictions of the MemNN for T1-4 are given in Appendix B. On the OOV tasks again performance is improved, but this is all due to better performance on known words, as unknown words are simply not used without the match type features. As stated in Appendix C, optimal hyperparameters on several of the tasks involve 3 or 4 hops, indicating that iterative accessing and reasoning over the conversation helps, e.g. on T3 using 1 hop gives 64.8% while 2 hops yields 74.7%. Appendix B displays illustrative examples of Memory Networks predictions on T 1-4 and Concierge.\nMemory Networks with match type features give two performance gains over the same models without match type features: (i) T4 (providing information) becomes solvable because matches can be made to the results of the API call; and (ii) out-of-vocabulary results are significantly improved as well. Still, tasks T3 and T5 are still fail cases, performance drops slightly on T2 compared to not using match type features, and no relative improvement is observed on T6. Finally, note that matching words on its own is not enough, as evidenced by the poor performance of TF-IDF matching; this idea must be combined with types and the other properties of the MemNN model.\nUnsurprisingly, perfectly coded rule-based systems can solve the simulated tasks T1-T5 perfectly, whereas our machine learning methods cannot. However, it is not easy to build an effective rule-based\nsystem when dealing with real language on real problems, and our rule based system is outperformed by MemNNs on the more realistic task T6.\nOverall, while the methods we tried made some inroads into these tasks, there are still many challenges left unsolved. Our best models can learn to track implicit dialog states and manipulate OOV words and symbols (T1-T2) to issue API calls and progress in conversations, but they are still unable to perfectly handle interpreting knowledge about entities (from returned API calls) to present results to the user, e.g. displaying options in T3. The improvement observed on the simulated tasks e.g. where MemNNs outperform supervised embeddings which in turn outperform IR methods, is also seen on the realistic data of T6 with similar relative gains. This is encouraging as it indicates that future work on breaking down, analysing and developing models over the simulated tasks should help in the real tasks as well. Results on Concierge confirm this observation: the pattern of relative performances of methods is the same on Concierge and on our series of tasks. This suggests that our synthetic data can indeed be used as an effective evaluation proxy."
    }, {
      "heading" : "6 CONCLUSION",
      "text" : "We have introduced an open dataset and task set for evaluating end-to-end goal-oriented dialog learning methods in a systematic and controlled way. We hope this will help foster progress of end-toend conversational agents because (i) existing measures of performance either prevent reproducibility (different Mechanical Turk jobs) or do not correlate well with human judgements (Liu et al., 2016); (ii) the breakdown in tasks will help focus research and development to improve the learning methods; and (iii) goal-oriented dialog has clear utility in real applications. We illustrated how to use the testbed using a variant of end-to-end Memory Networks, which prove an effective model on these tasks relative to other baselines, but are still lacking in some key areas."
    }, {
      "heading" : "ACKNOWLEDGMENTS",
      "text" : "The authors would like to thank Martin Raison, Alex Lebrun and Laurent Landowski for their help with the Concierge data."
    }, {
      "heading" : "A MEMORY NETWORKS IMPLEMENTATION",
      "text" : "Storing and representing the conversation history As the model conducts a conversation with the user, at each time step t the previous utterance (from the user) and response (from the model) are appended to the memory. Hence, at any given time there are cu1 , . . . cut user utterances and cr1, . . . crt‚àí1 model responses stored (i.e. the entire conversation).2 The aim at time t is to thus choose the next response crt . We train on existing full dialog transcripts, so at training time we know the upcoming utterance crt and can use it as a training target. Following Dodge et al. (2016), we represent each utterance as a bag-of-words and in memory it is represented as a vector using the embedding matrix A, i.e. the memory is an array with entries:\nm = (AŒ¶(cu1 ), AŒ¶(c r 1) . . . , AŒ¶(c u t‚àí1), AŒ¶(c r t‚àí1))\nwhere Œ¶(¬∑) maps the utterance to a bag of dimension V (the vocabulary), and A is a d √ó V matrix, where d is the embedding dimension. We retain the last user utterance cut as the ‚Äúinput‚Äù to be used directly in the controller. The contents of each memory slot mi so far does not contain any information of which speaker spoke an utterance, and at what time during the conversation. We therefore encode both of those pieces of information in the mapping Œ¶ by extending the vocabulary to contain T = 1000 extra ‚Äútime features‚Äù which encode the index i into the bag-of-words, and two more features that encode whether the utterance was spoken by the user or the model.\nAttention over the memory The last user utterance cut is embedded using the same matrix A giving q = AŒ¶(cut ), which can also be seen as the initial state of the controller. At this point the controller reads from the memory to find salient parts of the previous conversation that are relevant to producing a response. The match between q and the memories is computed by taking the inner product followed by a softmax: pi = Softmax(u>mi), giving a probability vector over the memories. The vector that is returned back to the controller is then computed by o = R ‚àë i pimi where R is a d√ó d square matrix. The controller state is then updated with q2 = o + q. The memory can be iteratively reread to look for additional pertinent information using the updated state of the controller q2 instead of q, and in general using qh on iteration h, with a fixed number of iterations N (termed N hops). Empirically we find improved performance on our tasks with up to 3 or 4 hops.\nChoosing the response The final prediction is then defined as:\naÃÇ = Softmax(qN+1>WŒ¶(y1), . . . , qN+1>WŒ¶(yC))\nwhere there are C candidate responses in y, and W is of dimension d√ó V . In our tasks the set y is a (large) set of candidate responses which includes all possible bot utterances and API calls.\nThe entire model is trained using stochastic gradient descent (SGD), minimizing a standard cross-entropy loss between aÃÇ and the true label a."
    }, {
      "heading" : "B EXAMPLES OF PREDICTIONS OF A MEMORY NETWORK",
      "text" : "Tables 3, 4, 5 and 6 display examples of predictions of the best performing Memory Network on full dialogs, Task 5, (with 3 hops) on test examples of Tasks 1-4 along with the values of the attention over each memory for each hop (pi as defined in Sec. A). This model does not use match type features. Then, Table 7 displays an example of prediction of the best performing Memory Network on Concierge (with 2 hops) on a test example along with the values of the attention over each memory for each hop."
    }, {
      "heading" : "C HYPERPARAMETERS",
      "text" : "Tables 8 and 9 respectively display the values of the hyperparameters of the best Supervised Embeddings and Memory Networks selected for each task. These models were selected using the best validation validation sets."
    }, {
      "heading" : "D ADDITIONAL RESULTS",
      "text" : "Table 10 provides results for additional variants of supervised embeddings, using either a dictionary that includes all bigrams to leverage some word order information, or match type features. On some tasks, supervised embeddings perform better when the last user utterance is used as sole input, without the full dialog history (see Table 8). When no history is used, we slightly adapt match type features to only record type: a special word corresponding to type T (e.g., phone, address, etc) is appended to the representation of a candidate if the\n2API calls are stored as bot utterances cri , and KB facts resulting from such calls as user utterances c u i .\ncandidate contains a word that appears in the knowledge base as an entity of type T , regardless of whether the same word appeared earlier in the conversation. As seen on Table 10, match type features improve performance on out-of-vocabulary tasks 1 and 5, bringing it closer to that of Memory Networks without match type features, but still quite lagging Memory Networks with match type features. Bigrams slightly hurt rather than help performance, except in Task 5 in the standard in-vocabulary setup (performance is lower in the OOV setup)."
    } ],
    "references" : [ {
      "title" : "Supervised semantic indexing",
      "author" : [ "B. Bai", "J. Weston", "D. Grangier", "R. Collobert", "K. Sadamasa", "Y. Qi", "O. Chapelle", "K. Weinberger" ],
      "venue" : "Proceedings of ACM CIKM, pages 187‚Äì196. ACM.",
      "citeRegEx" : "Bai et al\\.,? 2009",
      "shortCiteRegEx" : "Bai et al\\.",
      "year" : 2009
    }, {
      "title" : "Movie-dic: a movie dialogue corpus for research and development",
      "author" : [ "R.E. Banchs" ],
      "venue" : "Proceedings of the 50th Annual Meeting of the ACL.",
      "citeRegEx" : "Banchs,? 2012",
      "shortCiteRegEx" : "Banchs",
      "year" : 2012
    }, {
      "title" : "End-to-end memory networks with knowledge carryover for multi-turn spoken language understanding",
      "author" : [ "Chen", "Y.-N.", "D. Hakkani-T√ºr", "G. Tur", "J. Gao", "L. Deng" ],
      "venue" : "Proceedings of Interspeech.",
      "citeRegEx" : "Chen et al\\.,? 2016",
      "shortCiteRegEx" : "Chen et al\\.",
      "year" : 2016
    }, {
      "title" : "Expanding the scope of the atis task: The atis-3 corpus",
      "author" : [ "D.A. Dahl", "M. Bates", "M. Brown", "W. Fisher", "K. Hunicke-Smith", "D. Pallett", "C. Pao", "A. Rudnicky", "E. Shriberg" ],
      "venue" : "Proceedings of the workshop on Human Language Technology, pages 43‚Äì48. Association for Computational Linguistics.",
      "citeRegEx" : "Dahl et al\\.,? 1994",
      "shortCiteRegEx" : "Dahl et al\\.",
      "year" : 1994
    }, {
      "title" : "Evaluating prerequisite qualities for learning end-to-end dialog systems",
      "author" : [ "J. Dodge", "A. Gane", "X. Zhang", "A. Bordes", "S. Chopra", "A. Miller", "A. Szlam", "J. Weston" ],
      "venue" : "Proc. of ICLR.",
      "citeRegEx" : "Dodge et al\\.,? 2016",
      "shortCiteRegEx" : "Dodge et al\\.",
      "year" : 2016
    }, {
      "title" : "Incremental on-line adaptation of pomdp-based dialogue managers to extended domains",
      "author" : [ "M. Ga≈°ic", "D. Kim", "P. Tsiakoulis", "C. Breslin", "M. Henderson", "M. Szummer", "B. Thomson", "S. Young" ],
      "venue" : "Proceedings on InterSpeech.",
      "citeRegEx" : "Ga≈°ic et al\\.,? 2014",
      "shortCiteRegEx" : "Ga≈°ic et al\\.",
      "year" : 2014
    }, {
      "title" : "The second dialog state tracking challenge",
      "author" : [ "M. Henderson", "B. Thomson", "J. Williams" ],
      "venue" : "15th Annual Meeting of the Special Interest Group on Discourse and Dialogue, page 263.",
      "citeRegEx" : "Henderson et al\\.,? 2014a",
      "shortCiteRegEx" : "Henderson et al\\.",
      "year" : 2014
    }, {
      "title" : "Word-based dialog state tracking with recurrent neural networks",
      "author" : [ "M. Henderson", "B. Thomson", "S. Young" ],
      "venue" : "Proceedings of the 15th Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGDIAL), pages 292‚Äì299.",
      "citeRegEx" : "Henderson et al\\.,? 2014b",
      "shortCiteRegEx" : "Henderson et al\\.",
      "year" : 2014
    }, {
      "title" : "Learning knowledge graphs for question answering through conversational dialog",
      "author" : [ "B. Hixon", "P. Clark", "H. Hajishirzi" ],
      "venue" : "Proceedings of the the 2015 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Denver, Colorado, USA.",
      "citeRegEx" : "Hixon et al\\.,? 2015",
      "shortCiteRegEx" : "Hixon et al\\.",
      "year" : 2015
    }, {
      "title" : "Cobot in lambdamoo: A social statistics agent",
      "author" : [ "C.L. Isbell", "M. Kearns", "D. Kormann", "S. Singh", "P. Stone" ],
      "venue" : "AAAI/IAAI, pages 36‚Äì41.",
      "citeRegEx" : "Isbell et al\\.,? 2000",
      "shortCiteRegEx" : "Isbell et al\\.",
      "year" : 2000
    }, {
      "title" : "Filter, rank, and transfer the knowledge: Learning to chat",
      "author" : [ "S. Jafarpour", "C.J. Burges", "A. Ritter" ],
      "venue" : "Advances in Ranking, 10.",
      "citeRegEx" : "Jafarpour et al\\.,? 2010",
      "shortCiteRegEx" : "Jafarpour et al\\.",
      "year" : 2010
    }, {
      "title" : "The fourth dialog state tracking challenge",
      "author" : [ "S. Kim", "L.F. D‚ÄôHaro", "R.E. Banchs", "J.D. Williams", "M. Henderson" ],
      "venue" : "In Proceedings of the 7th International Workshop on Spoken Dialogue Systems (IWSDS)",
      "citeRegEx" : "Kim et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Kim et al\\.",
      "year" : 2016
    }, {
      "title" : "An isu dialogue system exhibiting reinforcement learning of dialogue policies: generic slot-filling in the talk in-car system",
      "author" : [ "O. Lemon", "K. Georgila", "J. Henderson", "M. Stuttle" ],
      "venue" : "Proceedings of the 11th Conference of the European Chapter of the ACL: Posters & Demonstrations, pages 119‚Äì122.",
      "citeRegEx" : "Lemon et al\\.,? 2006",
      "shortCiteRegEx" : "Lemon et al\\.",
      "year" : 2006
    }, {
      "title" : "How not to evaluate your dialogue system: An empirical study of unsupervised evaluation metrics for dialogue response generation",
      "author" : [ "Liu", "C.-W.", "R. Lowe", "I.V. Serban", "M. Noseworthy", "L. Charlin", "J. Pineau" ],
      "venue" : "arXiv preprint arXiv:1603.08023.",
      "citeRegEx" : "Liu et al\\.,? 2016",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2016
    }, {
      "title" : "The ubuntu dialogue corpus: A large dataset for research in unstructured multi-turn dialogue systems",
      "author" : [ "R. Lowe", "N. Pow", "I. Serban", "J. Pineau" ],
      "venue" : "arXiv preprint arXiv:1506.08909.",
      "citeRegEx" : "Lowe et al\\.,? 2015",
      "shortCiteRegEx" : "Lowe et al\\.",
      "year" : 2015
    }, {
      "title" : "On the evaluation of dialogue systems with next utterance classification",
      "author" : [ "R. Lowe", "I.V. Serban", "M. Noseworthy", "L. Charlin", "J. Pineau" ],
      "venue" : "arXiv preprint arXiv:1605.05414.",
      "citeRegEx" : "Lowe et al\\.,? 2016",
      "shortCiteRegEx" : "Lowe et al\\.",
      "year" : 2016
    }, {
      "title" : "Efficient estimation of word representations in vector space",
      "author" : [ "T. Mikolov", "K. Chen", "G. Corrado", "J. Dean" ],
      "venue" : "arXiv:1301.3781.",
      "citeRegEx" : "Mikolov et al\\.,? 2013",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2013
    }, {
      "title" : "A survey on metrics for the evaluation of user simulations",
      "author" : [ "O. Pietquin", "H. Hastie" ],
      "venue" : "The knowledge engineering review, 28(01), 59‚Äì73.",
      "citeRegEx" : "Pietquin and Hastie,? 2013",
      "shortCiteRegEx" : "Pietquin and Hastie",
      "year" : 2013
    }, {
      "title" : "Data-driven response generation in social media",
      "author" : [ "A. Ritter", "C. Cherry", "W.B. Dolan" ],
      "venue" : "Proceedings of the Conference on Empirical Methods in Natural Language Processing.",
      "citeRegEx" : "Ritter et al\\.,? 2011",
      "shortCiteRegEx" : "Ritter et al\\.",
      "year" : 2011
    }, {
      "title" : "Building end-to-end dialogue systems using generative hierarchical neural network models",
      "author" : [ "I.V. Serban", "A. Sordoni", "Y. Bengio", "A. Courville", "J. Pineau" ],
      "venue" : "Proc. of the AAAI Conference on Artificial Intelligence.",
      "citeRegEx" : "Serban et al\\.,? 2015a",
      "shortCiteRegEx" : "Serban et al\\.",
      "year" : 2015
    }, {
      "title" : "A survey of available corpora for building data-driven dialogue systems",
      "author" : [ "I.V. Serban", "R. Lowe", "L. Charlin", "J. Pineau" ],
      "venue" : "arXiv preprint arXiv:1512.05742.",
      "citeRegEx" : "Serban et al\\.,? 2015b",
      "shortCiteRegEx" : "Serban et al\\.",
      "year" : 2015
    }, {
      "title" : "Neural responding machine for short-text conversation",
      "author" : [ "L. Shang", "Z. Lu", "H. Li" ],
      "venue" : "arXiv preprint arXiv:1503.02364.",
      "citeRegEx" : "Shang et al\\.,? 2015",
      "shortCiteRegEx" : "Shang et al\\.",
      "year" : 2015
    }, {
      "title" : "A neural network approach to context-sensitive generation of conversational responses",
      "author" : [ "A. Sordoni", "M. Galley", "M. Auli", "C. Brockett", "Y. Ji", "M. Mitchell", "Nie", "J.-Y.", "J. Gao", "B. Dolan" ],
      "venue" : "Proceedings of NAACL.",
      "citeRegEx" : "Sordoni et al\\.,? 2015",
      "shortCiteRegEx" : "Sordoni et al\\.",
      "year" : 2015
    }, {
      "title" : "Learning from real users: Rating dialogue success with neural networks for reinforcement learning in spoken dialogue systems",
      "author" : [ "Su", "P.-H.", "D. Vandyke", "M. Gasic", "D. Kim", "N. Mrksic", "Wen", "T.-H.", "S. Young" ],
      "venue" : "arXiv preprint arXiv:1508.03386.",
      "citeRegEx" : "Su et al\\.,? 2015a",
      "shortCiteRegEx" : "Su et al\\.",
      "year" : 2015
    }, {
      "title" : "Reward shaping with recurrent neural networks for speeding up on-line policy learning in spoken dialogue systems",
      "author" : [ "Su", "P.-H.", "D. Vandyke", "M. Gasic", "N. Mrksic", "Wen", "T.-H.", "S. Young" ],
      "venue" : "arXiv preprint arXiv:1508.03391.",
      "citeRegEx" : "Su et al\\.,? 2015b",
      "shortCiteRegEx" : "Su et al\\.",
      "year" : 2015
    }, {
      "title" : "End-to-end memory networks",
      "author" : [ "S. Sukhbaatar", "A. Szlam", "J. Weston", "R. Fergus" ],
      "venue" : "Proceedings of NIPS.",
      "citeRegEx" : "Sukhbaatar et al\\.,? 2015",
      "shortCiteRegEx" : "Sukhbaatar et al\\.",
      "year" : 2015
    }, {
      "title" : "A neural conversational model",
      "author" : [ "O. Vinyals", "Q. Le" ],
      "venue" : "arXiv preprint arXiv:1506.05869.",
      "citeRegEx" : "Vinyals and Le,? 2015",
      "shortCiteRegEx" : "Vinyals and Le",
      "year" : 2015
    }, {
      "title" : "A dataset for research on short-text conversations",
      "author" : [ "H. Wang", "Z. Lu", "H. Li", "E. Chen" ],
      "venue" : "EMNLP.",
      "citeRegEx" : "Wang et al\\.,? 2013",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2013
    }, {
      "title" : "A simple and generic belief tracking mechanism for the dialog state tracking challenge: On the believability of observed information",
      "author" : [ "Z. Wang", "O. Lemon" ],
      "venue" : "Proceedings of the SIGDIAL 2013 Conference.",
      "citeRegEx" : "Wang and Lemon,? 2013",
      "shortCiteRegEx" : "Wang and Lemon",
      "year" : 2013
    }, {
      "title" : "Semantically conditioned lstm-based natural language generation for spoken dialogue systems",
      "author" : [ "Wen", "T.-H.", "M. Gasic", "N. Mrksic", "Su", "P.-H.", "D. Vandyke", "S. Young" ],
      "venue" : "arXiv preprint arXiv:1508.01745.",
      "citeRegEx" : "Wen et al\\.,? 2015",
      "shortCiteRegEx" : "Wen et al\\.",
      "year" : 2015
    }, {
      "title" : "Memory networks",
      "author" : [ "J. Weston", "S. Chopra", "A. Bordes" ],
      "venue" : "Proceedings of ICLR.",
      "citeRegEx" : "Weston et al\\.,? 2015a",
      "shortCiteRegEx" : "Weston et al\\.",
      "year" : 2015
    }, {
      "title" : "Towards ai-complete question answering: a set of prerequisite toy tasks",
      "author" : [ "J. Weston", "A. Bordes", "S. Chopra", "T. Mikolov" ],
      "venue" : "arXiv preprint arXiv:1502.05698.",
      "citeRegEx" : "Weston et al\\.,? 2015b",
      "shortCiteRegEx" : "Weston et al\\.",
      "year" : 2015
    }, {
      "title" : "Pomdp-based statistical spoken dialog systems: A review",
      "author" : [ "S. Young", "M. Gasic", "B. Thomson", "J.D. Williams" ],
      "venue" : "Proceedings of the IEEE, 101(5), 1160‚Äì1179.",
      "citeRegEx" : "Young et al\\.,? 2013",
      "shortCiteRegEx" : "Young et al\\.",
      "year" : 2013
    }, {
      "title" : "2016), we represent each utterance as a bag-of-words and in memory it is represented as a vector using the embedding matrix A, i.e. the memory is an array with entries",
      "author" : [ "Dodge" ],
      "venue" : null,
      "citeRegEx" : "Dodge,? \\Q2016\\E",
      "shortCiteRegEx" : "Dodge",
      "year" : 2016
    } ],
    "referenceMentions" : [ {
      "referenceID" : 6,
      "context" : "We confirm those results by comparing our system to a hand-crafted slot-filling baseline on data from the second Dialog State Tracking Challenge (Henderson et al., 2014a).",
      "startOffset" : 145,
      "endOffset" : 170
    }, {
      "referenceID" : 12,
      "context" : "The workhorse of traditional dialog systems is slot-filling (Lemon et al., 2006; Wang and Lemon, 2013; Young et al., 2013) which predefines the structure of a dialog state as a set of slots to be filled during the dialog.",
      "startOffset" : 60,
      "endOffset" : 122
    }, {
      "referenceID" : 28,
      "context" : "The workhorse of traditional dialog systems is slot-filling (Lemon et al., 2006; Wang and Lemon, 2013; Young et al., 2013) which predefines the structure of a dialog state as a set of slots to be filled during the dialog.",
      "startOffset" : 60,
      "endOffset" : 122
    }, {
      "referenceID" : 32,
      "context" : "The workhorse of traditional dialog systems is slot-filling (Lemon et al., 2006; Wang and Lemon, 2013; Young et al., 2013) which predefines the structure of a dialog state as a set of slots to be filled during the dialog.",
      "startOffset" : 60,
      "endOffset" : 122
    }, {
      "referenceID" : 21,
      "context" : "End-to-end dialog systems, usually based on neural networks (Shang et al., 2015; Vinyals and Le, 2015; Sordoni et al., 2015; Serban et al., 2015a; Dodge et al., 2016), escape such limitations: all their components are directly trained on past dialogs, with no assumption on the domain or dialog state structure, thus making it easy to automatically scale up to new domains.",
      "startOffset" : 60,
      "endOffset" : 166
    }, {
      "referenceID" : 26,
      "context" : "End-to-end dialog systems, usually based on neural networks (Shang et al., 2015; Vinyals and Le, 2015; Sordoni et al., 2015; Serban et al., 2015a; Dodge et al., 2016), escape such limitations: all their components are directly trained on past dialogs, with no assumption on the domain or dialog state structure, thus making it easy to automatically scale up to new domains.",
      "startOffset" : 60,
      "endOffset" : 166
    }, {
      "referenceID" : 22,
      "context" : "End-to-end dialog systems, usually based on neural networks (Shang et al., 2015; Vinyals and Le, 2015; Sordoni et al., 2015; Serban et al., 2015a; Dodge et al., 2016), escape such limitations: all their components are directly trained on past dialogs, with no assumption on the domain or dialog state structure, thus making it easy to automatically scale up to new domains.",
      "startOffset" : 60,
      "endOffset" : 166
    }, {
      "referenceID" : 19,
      "context" : "End-to-end dialog systems, usually based on neural networks (Shang et al., 2015; Vinyals and Le, 2015; Sordoni et al., 2015; Serban et al., 2015a; Dodge et al., 2016), escape such limitations: all their components are directly trained on past dialogs, with no assumption on the domain or dialog state structure, thus making it easy to automatically scale up to new domains.",
      "startOffset" : 60,
      "endOffset" : 166
    }, {
      "referenceID" : 4,
      "context" : "End-to-end dialog systems, usually based on neural networks (Shang et al., 2015; Vinyals and Le, 2015; Sordoni et al., 2015; Serban et al., 2015a; Dodge et al., 2016), escape such limitations: all their components are directly trained on past dialogs, with no assumption on the domain or dialog state structure, thus making it easy to automatically scale up to new domains.",
      "startOffset" : 60,
      "endOffset" : 166
    }, {
      "referenceID" : 18,
      "context" : "They have shown promising performance in non goal-oriented chit-chat settings, where they were trained to predict the next utterance in social media and forum threads (Ritter et al., 2011; Wang et al., 2013; Lowe et al., 2015) or movie conversations (Banchs, 2012).",
      "startOffset" : 167,
      "endOffset" : 226
    }, {
      "referenceID" : 27,
      "context" : "They have shown promising performance in non goal-oriented chit-chat settings, where they were trained to predict the next utterance in social media and forum threads (Ritter et al., 2011; Wang et al., 2013; Lowe et al., 2015) or movie conversations (Banchs, 2012).",
      "startOffset" : 167,
      "endOffset" : 226
    }, {
      "referenceID" : 14,
      "context" : "They have shown promising performance in non goal-oriented chit-chat settings, where they were trained to predict the next utterance in social media and forum threads (Ritter et al., 2011; Wang et al., 2013; Lowe et al., 2015) or movie conversations (Banchs, 2012).",
      "startOffset" : 167,
      "endOffset" : 226
    }, {
      "referenceID" : 1,
      "context" : ", 2015) or movie conversations (Banchs, 2012).",
      "startOffset" : 31,
      "endOffset" : 45
    }, {
      "referenceID" : 13,
      "context" : "This makes it hard to ascertain how well end-to-end dialog models would do, especially since evaluating chit-chat performance in itself is not straightforward (Liu et al., 2016).",
      "startOffset" : 159,
      "endOffset" : 177
    }, {
      "referenceID" : 31,
      "context" : "In the spirit of the bAbI tasks conceived as question answering testbeds (Weston et al., 2015b), we designed a set of five tasks within the goal-oriented context of restaurant reservation.",
      "startOffset" : 73,
      "endOffset" : 95
    }, {
      "referenceID" : 30,
      "context" : "As an end-to-end neural model, we tested Memory Networks (Weston et al., 2015a), an attention-based architecture that has proven competitive for non goal-oriented dialog (Dodge et al.",
      "startOffset" : 57,
      "endOffset" : 79
    }, {
      "referenceID" : 4,
      "context" : ", 2015a), an attention-based architecture that has proven competitive for non goal-oriented dialog (Dodge et al., 2016).",
      "startOffset" : 99,
      "endOffset" : 119
    }, {
      "referenceID" : 6,
      "context" : "Task 6 was converted from the 2 Dialog State Tracking Challenge (Henderson et al., 2014a).",
      "startOffset" : 64,
      "endOffset" : 89
    }, {
      "referenceID" : 6,
      "context" : "from the restaurant reservation dataset of the 2 Dialog State Tracking Challenge, or DSTC2 (Henderson et al., 2014a), which we converted into our task format, showing that Memory Networks can outperform a dedicated slot-filling rule-based baseline.",
      "startOffset" : 91,
      "endOffset" : 116
    }, {
      "referenceID" : 32,
      "context" : "The most successful goal-oriented dialog systems model conversation as partially observable Markov decision processes (POMDP) (Young et al., 2013).",
      "startOffset" : 126,
      "endOffset" : 146
    }, {
      "referenceID" : 7,
      "context" : "However, despite recent efforts to learn modules (Henderson et al., 2014b), they still require many hand-crafted features for the state and action space representations, which restrict their usage to narrow domains.",
      "startOffset" : 49,
      "endOffset" : 74
    }, {
      "referenceID" : 32,
      "context" : "Our simulation, used to generate goal-oriented datasets, can be seen as an equivalent of the user simulators used to train POMDP (Young et al., 2013; Pietquin and Hastie, 2013), but for training end-to-end systems.",
      "startOffset" : 129,
      "endOffset" : 176
    }, {
      "referenceID" : 17,
      "context" : "Our simulation, used to generate goal-oriented datasets, can be seen as an equivalent of the user simulators used to train POMDP (Young et al., 2013; Pietquin and Hastie, 2013), but for training end-to-end systems.",
      "startOffset" : 129,
      "endOffset" : 176
    }, {
      "referenceID" : 6,
      "context" : "Goal-oriented datasets are usually designed to train or test dialog state tracker components (Henderson et al., 2014a) and are hence of limited scale and not suitable for end-to-end learning (annotated at the state level and noisy).",
      "startOffset" : 93,
      "endOffset" : 118
    }, {
      "referenceID" : 11,
      "context" : ", the end-to-end task of DSTC4 (Kim et al., 2016)) or are proprietary (e.",
      "startOffset" : 31,
      "endOffset" : 49
    }, {
      "referenceID" : 5,
      "context" : "Datasets are often based on interactions between users and existing systems (or ensemble of systems) like DSTC datasets, SFCore (Ga≈°ic et al., 2014) or ATIS (Dahl et al.",
      "startOffset" : 128,
      "endOffset" : 148
    }, {
      "referenceID" : 3,
      "context" : ", 2014) or ATIS (Dahl et al., 1994).",
      "startOffset" : 16,
      "endOffset" : 35
    }, {
      "referenceID" : 2,
      "context" : ", Chen et al. (2016)).",
      "startOffset" : 2,
      "endOffset" : 21
    }, {
      "referenceID" : 4,
      "context" : "The closest resource to ours might be the set of tasks described in (Dodge et al., 2016), since some of them can be seen as goal-oriented.",
      "startOffset" : 68,
      "endOffset" : 88
    }, {
      "referenceID" : 6,
      "context" : "We use data from DSTC2 (Henderson et al., 2014a), that is also in the restaurant booking domain.",
      "startOffset" : 23,
      "endOffset" : 48
    }, {
      "referenceID" : 6,
      "context" : "Our evaluation differs from the challenge (we do not predict the dialog state), so we cannot compare with the results from (Henderson et al., 2014a).",
      "startOffset" : 123,
      "endOffset" : 148
    }, {
      "referenceID" : 14,
      "context" : "1 Lowe et al. (2016) termed this setting Next-Utterance-Classification.",
      "startOffset" : 2,
      "endOffset" : 21
    }, {
      "referenceID" : 30,
      "context" : "Thus it is possible to hand-code a rule based system that achieves 100% on them, similar to the bAbI tasks of Weston et al. (2015b). Indeed, the point of these tasks is not to check whether a human is smart enough to be able to build a rule-based system to solve them, but to help analyze in which circumstances machine learning algorithms are smart enough to work, and where they fail.",
      "startOffset" : 110,
      "endOffset" : 132
    }, {
      "referenceID" : 9,
      "context" : "Classical information retrieval (IR) models with no machine learning are standard baselines that often perform surprisingly well on dialog tasks (Isbell et al., 2000; Jafarpour et al., 2010; Ritter et al., 2011; Sordoni et al., 2015).",
      "startOffset" : 145,
      "endOffset" : 233
    }, {
      "referenceID" : 10,
      "context" : "Classical information retrieval (IR) models with no machine learning are standard baselines that often perform surprisingly well on dialog tasks (Isbell et al., 2000; Jafarpour et al., 2010; Ritter et al., 2011; Sordoni et al., 2015).",
      "startOffset" : 145,
      "endOffset" : 233
    }, {
      "referenceID" : 18,
      "context" : "Classical information retrieval (IR) models with no machine learning are standard baselines that often perform surprisingly well on dialog tasks (Isbell et al., 2000; Jafarpour et al., 2010; Ritter et al., 2011; Sordoni et al., 2015).",
      "startOffset" : 145,
      "endOffset" : 233
    }, {
      "referenceID" : 22,
      "context" : "Classical information retrieval (IR) models with no machine learning are standard baselines that often perform surprisingly well on dialog tasks (Isbell et al., 2000; Jafarpour et al., 2010; Ritter et al., 2011; Sordoni et al., 2015).",
      "startOffset" : 145,
      "endOffset" : 233
    }, {
      "referenceID" : 16,
      "context" : "In contrast, word embeddings are most well-known in the context of unsupervised training on raw text as in word2vec (Mikolov et al., 2013).",
      "startOffset" : 116,
      "endOffset" : 138
    }, {
      "referenceID" : 30,
      "context" : "Memory Networks (Weston et al., 2015a; Sukhbaatar et al., 2015) are a recent class of models that have been applied to a range of natural language processing tasks, including question answering (Weston et al.",
      "startOffset" : 16,
      "endOffset" : 63
    }, {
      "referenceID" : 25,
      "context" : "Memory Networks (Weston et al., 2015a; Sukhbaatar et al., 2015) are a recent class of models that have been applied to a range of natural language processing tasks, including question answering (Weston et al.",
      "startOffset" : 16,
      "endOffset" : 63
    }, {
      "referenceID" : 31,
      "context" : ", 2015) are a recent class of models that have been applied to a range of natural language processing tasks, including question answering (Weston et al., 2015b), language modeling (Sukhbaatar et al.",
      "startOffset" : 138,
      "endOffset" : 160
    }, {
      "referenceID" : 25,
      "context" : ", 2015b), language modeling (Sukhbaatar et al., 2015), and non-goal-oriented dialog (Dodge et al.",
      "startOffset" : 28,
      "endOffset" : 53
    }, {
      "referenceID" : 4,
      "context" : ", 2015), and non-goal-oriented dialog (Dodge et al., 2016).",
      "startOffset" : 38,
      "endOffset" : 58
    }, {
      "referenceID" : 25,
      "context" : "We use the MemN2N architecture of Sukhbaatar et al. (2015), with an additional modification to leverage exact matches and types, described shortly.",
      "startOffset" : 34,
      "endOffset" : 59
    }, {
      "referenceID" : 0,
      "context" : "Firstly, embedding into a low dimensional space makes it hard to differentiate between exact word matches, and matches between words with similar meaning (Bai et al., 2009).",
      "startOffset" : 154,
      "endOffset" : 172
    }, {
      "referenceID" : 30,
      "context" : "the name of a new restaurant) not seen before in training, no word embedding is available, typically resulting in failure (Weston et al., 2015a).",
      "startOffset" : 122,
      "endOffset" : 144
    }, {
      "referenceID" : 18,
      "context" : "over dialogs on Twitter (Ritter et al., 2011) or Reddit (Dodge et al.",
      "startOffset" : 24,
      "endOffset" : 45
    }, {
      "referenceID" : 4,
      "context" : ", 2011) or Reddit (Dodge et al., 2016), where it was found that TF-IDF Match outperforms Nearest Neighbor, as general conversations on a given subject typically share many words.",
      "startOffset" : 18,
      "endOffset" : 38
    }, {
      "referenceID" : 13,
      "context" : "We hope this will help foster progress of end-toend conversational agents because (i) existing measures of performance either prevent reproducibility (different Mechanical Turk jobs) or do not correlate well with human judgements (Liu et al., 2016); (ii) the breakdown in tasks will help focus research and development to improve the learning methods; and (iii) goal-oriented dialog has clear utility in real applications.",
      "startOffset" : 230,
      "endOffset" : 248
    } ],
    "year" : 2017,
    "abstractText" : "Traditional dialog systems used in goal-oriented applications require a lot of domain-specific handcrafting, which hinders scaling up to new domains. Endto-end dialog systems, in which all components are trained from the dialogs themselves, escape this limitation. But the encouraging success recently obtained in chit-chat dialog may not carry over to goal-oriented settings. This paper proposes a testbed to break down the strengths and shortcomings of end-to-end dialog systems in goal-oriented applications. Set in the context of restaurant reservation, our tasks require manipulating sentences and symbols in order to properly conduct conversations, issue API calls and use the outputs of such calls. We show that an end-to-end dialog system based on Memory Networks can reach promising, yet imperfect, performance and learn to perform non-trivial operations. We confirm those results by comparing our system to a hand-crafted slot-filling baseline on data from the second Dialog State Tracking Challenge (Henderson et al., 2014a). We show similar result patterns on data extracted from an online concierge service.",
    "creator" : "LaTeX with hyperref package"
  }
}