{
  "name" : "651.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "BRIDGING NONLINEARITIES", "GAUSSIAN ERROR", "LINEAR UNITS", "Dan Hendrycks", "Kevin Gimpel" ],
    "emails" : [ "dan@ttic.edu", "kgimpel@ttic.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "We propose the Gaussian Error Linear Unit (GELU), a high-performing neural network activation function. The GELU nonlinearity is the expected transformation of a stochastic regularizer which randomly applies the identity or zero map to a neuron’s input. This stochastic regularizer is comparable to nonlinearities aided by dropout, but it removes the need for a traditional nonlinearity. The connection between the GELU and the stochastic regularizer suggests a new probabilistic understanding of nonlinearities. We perform an empirical evaluation of the GELU nonlinearity against the ReLU and ELU activations and find performance improvements across all tasks."
    }, {
      "heading" : "1 INTRODUCTION",
      "text" : "Early artificial neurons utilized binary threshold units (Hopfield, 1982; McCulloch & Pitts, 1943). These hard binary decisions are smoothed with sigmoid activations, enabling a neuron to have a “firing rate” interpretation and to train with backpropagation. But as networks became deeper, training with sigmoid activations proved less effective than the non-smooth, less-probabilistic ReLU (Nair & Hinton, 2010) which makes hard gating decisions based upon an input’s sign. Despite having less of a statistical motivation, the ReLU remains a competitive engineering solution which often enables faster and better convergence than sigmoids. Building on the successes of ReLUs, a recent modification called ELUs (Clevert et al., 2016) allows a ReLU-like nonlinearity to output negative values which sometimes increases training speed. In all, the activation choice has remained a necessary architecture decision for neural networks lest the network be a deep linear classifier.\nDeep nonlinear classifiers can fit their data so well that network designers are often faced with the choice of including stochastic regularizer like adding noise to hidden layers or applying dropout (Srivastava et al., 2014), and this choice remains separate from the activation function. Some stochastic regularizers can make the network behave like an ensemble of networks, a pseudoensemble (Bachman et al., 2014), and can lead to marked accuracy increases. For example, the stochastic regularizer dropout creates a pseudoensemble by randomly altering some activation decisions through zero multiplication. Nonlinearities and dropout thus determine a neuron’s output together, yet the two innovations have remained distinct. More, neither subsumed the other because popular stochastic regularizers act irrespectively of the input and nonlinearities are aided by such regularizers.\nIn this work, we bridge the gap between stochastic regularizers and nonlinearities. To do this, we consider an adaptive stochastic regularizer that allows for a more probabilistic view of a neuron’s output. With this stochastic regularizer we can train networks without any nonlinearity while matching the performance of activations combined with dropout. This is unlike other stochastic regularizers without any nonlinearity as they merely yield a regularized linear classifier. We also take the expected transformation of this stochastic regularizer to obtain a novel nonlinearity which matches or exceeds models with ReLUs or ELUs across tasks from computer vision, natural language processing, and automatic speech recognition.\n∗Work done while the author was at TTIC. Code available at github.com/hendrycks/GELUs\n2 GELUS AND THE STOCHASTIC 0-I MAP\nWe create our stochastic regularizer and nonlinearity by combining intuitions from dropout, zoneout, and ReLUs. First note that a ReLU and dropout both yield a neuron’s output with the ReLU deterministically multiplying the input by zero or one and dropout stochastically multiplying by zero. Also, a new RNN regularizer called zoneout stochastically multiplies inputs by one (Krueger et al., 2016). We merge this functionality by multiplying the input by zero or one, but the values of this zero-one mask are stochastically determined while also dependent upon the input. Specifically, we multiply the neuron input x by m ∼ Bernoulli(Φ(x)), where Φ(x) = P (X ≤ x), X ∼ N (0, 1) is the cumulative distribution function of the standard normal distribution. The distribution Bernoulli(Φ(x)) appears in Gaussian Processes for classification (Houlsby et al., 2011) and the neuron’s output is xm giving x or 0. Thus inputs have a higher probability of being “dropped” as x decreases, so the transformation applied to x is stochastic yet depends upon the input. Masking inputs in this fashion retains nondeterminism but maintains dependency upon the input value. A stochastically chosen mask amounts to a stochastic zero or identity transformation of the input, leading us to call the regularizer the SOI map. The SOI Map is much like Adaptive Dropout (Ba & Frey, 2013), but we refer to the regularizer as the SOI Map because adaptive dropout is used in tandem with nonlinearities. In section 4, we show that simply masking linear transformations with the SOI map exceeds the power of linear classifiers and competes with nonlinearities aided by dropout, showing that nonlinearities can be replaced with stochastic regularizers."
    }, {
      "heading" : "3 GELU ReLU ELU",
      "text" : "The SOI map can be made deterministic should we desire a deterministic decision from a neural network, and this gives rise to our new nonlinearity. The nonlinearity is the expected transformation of the SOI map on an input x, which is Φ(x)×Ix+(1−Φ(x))×0x = xΦ(x). Loosely, this expression states that we scale x by how much greater it is than other inputs. We now make an obvious extension. Since the cumulative distribution function of a Gaussian is computed with the error function, we define the Gaussian Error Linear Unit (GELU) as\nGELU(x) = xP (X ≤ x),\nwhere X ∼ N (µ, σ2). Both µ and σ are possibly parameters to optimize, but throughout this work we simply let µ = 0 and σ = 1. Consequently, we do not introduce any new hyperparameters in the following experiments. In the next section, we show that the GELU exceeds the performance of ReLUs and ELUs across numerous tasks."
    }, {
      "heading" : "3 GELU EXPERIMENTS",
      "text" : "We evaluate the GELU, ELU, and ReLU on MNIST classification (grayscale images with 10 classes, 60k training examples and 10k test examples), MNIST autoencoding, Tweet part-of-speech tagging (1000 training, 327 validation, and 500 testing tweets), TIMIT frame recognition (3696 training, 1152 validation, and 192 test audio sentences), and CIFAR-10/100 classification (color images with 10/100 classes, 50k training and 10k test examples). We do not evaluate nonlinearities like the LReLU because of its similarity to ReLUs (see Maas et al. (2013) for a description of LReLUs)."
    }, {
      "heading" : "3.1 MNIST CLASSIFICATION",
      "text" : "Let us verify that this nonlinearity competes with previous activation functions by replicating an experiment from Clevert et al. (2016). To this end, we train a fully connected neural network with GELUs (µ = 0, σ = 1), ReLUs, and ELUs (α = 1). Each 8-layer, 128 neuron wide neural\nnetwork is trained for 50 epochs with a batch size of 128. This experiment differs from those of Clevert et al. in that we use the Adam optimizer (Kingma & Ba, 2015) rather than stochastic gradient descent without momentum, and we also show how well nonlinearities cope with dropout. Weights are initialized with unit norm rows, as this has positive impact on each nonlinearity’s performance (Hendrycks & Gimpel, 2016; Mishkin & Matas, 2016; Saxe et al., 2014). Note that we tune over the learning rates {10−3, 10−4, 10−5} with 5k validation examples from the training set and take the median results for five runs. Using these classifiers, we demonstrate in Figure 3 that classifiers using a GELU can be more robust to noised inputs. Figure 2 shows that the GELU tends to have the lowest median training log loss with and without dropout. Consequently, although the GELU is inspired by a different stochastic process, it comports well with dropout."
    }, {
      "heading" : "3.2 MNIST AUTOENCODER",
      "text" : "We now consider a self-supervised setting and train a deep autoencoder on MNIST (Desjardins et al., 2015). To accomplish this, we use a network with layers of width 1000, 500, 250, 30, 250, 500, 1000, in that order. We again use the Adam optimizer and a batch size of 64. Our loss is the mean squared loss. We vary the learning rate from 10−3 to 10−5. We also tried a learning rate of 0.01 but ELUs diverged, and GELUs and RELUs converged poorly. The results in Figure 4 indicate the GELU accommodates different learning rates and that the GELU either ties or significantly outperforms\nthe other nonlinearities. To save space, we show the learning curve for the 10−5 learning rate in appendix A."
    }, {
      "heading" : "3.3 TWITTER POS TAGGING",
      "text" : "Many datasets in natural language processing are relatively small, so it is important that an activation generalize well from few examples. To meet this challenge we compare the nonlinearities on POSannotated tweets (Gimpel et al., 2011; Owoputi et al., 2013) which contain 25 tags. The tweet tagger is simply a two-layer network with pretrained word vectors trained on a corpus of 56 million tweets (Owoputi et al., 2013). The input is the concatenation of the vector of the word to be tagged and those of its left and right neighboring words. Each layer has 256 neurons, a dropout keep probability of 0.8, and the network is optimized with Adam while tuning over the learning rates {10−3, 10−4, 10−5}. We train each network five times per learning rate, and the median test set error is 12.57% for the GELU, 12.67% for the ReLU, and 12.91% for the ELU."
    }, {
      "heading" : "3.4 TIMIT FRAME CLASSIFICATION",
      "text" : "Our next challenge is phone recognition with the TIMIT dataset which has recordings of 680 speakers in a noiseless environment. The system is a five-layer, 2048-neuron wide classifier as in (Mohamed et al., 2012) with 39 output phone labels and a dropout rate of 0.5 as in (Srivastava, 2013). This network takes as input 11 frames and must predict the phone of the center frame using 26 MFCC, energy, and derivative features per frame. We tune over the learning rates {10−3, 10−4, 10−5} and optimize with Adam. After five runs per setting, we obtain the median curves in Figure 5, and median test error chosen at the lowest validation error is 29.3% for the GELU, 29.5% for the ReLU, and 29.6% for the ELU."
    }, {
      "heading" : "3.5 CIFAR-10/100 CLASSIFICATION",
      "text" : "Next, we demonstrate that for more intricate architectures the GELU nonlinearity again outperforms other nonlinearities. We evaluate this activation function using CIFAR-10 and CIFAR-100 datasets (Krizhevsky, 2009) on shallow and deep convolutional neural networks, respectively.\nOur shallower convolutional neural network is a 9-layer network with the architecture and training procedure from Salimans & Kingma (2016) while using batch normalization to speed up training. The architecture is described in appendix B and recently obtained state of the art on CIFAR-10 without data augmentation. No data augmentation was used to train this network. We tune over the learning initial rates {10−3, 10−4, 10−5} with 5k validation examples then train on the whole training set again based upon the learning rate from cross validation. The network is optimized with Adam for 200 epochs, and at the 100th epoch the learning rate linearly decays to zero. Results are shown in Figure 6, and each curve is a median of three runs. Ultimately, the GELU obtains a median error rate of 7.89%, the ReLU obtains 8.16%, and the ELU obtains 8.41%.\nNext we consider a wide residual network on CIFAR-100 with 40 layers and a widening factor of 4 (Zagoruyko & Komodakis, 2016). We train for 50 epochs with the learning rate schedule described in (Loshchilov & Hutter, 2016) (T0 = 50, η = 0.1) with Nesterov momentum, and with a dropout keep probability of 0.7. Some have noted that ELUs have an exploding gradient with residual networks (Shah et al., 2016), and this is alleviated with batch normalization at the end of a residual block. Consequently, we use a Conv-Activation-Conv-Activation-BatchNorm block architecture to be charitable to ELUs. Over three runs we obtain the median convergence curves in Figure 7. Meanwhile, the GELU achieves a median error of 20.74%, the ReLU obtains 21.77% (without our changes described above, the original 40-4 WideResNet with a ReLU obtains 22.89% (Zagoruyko & Komodakis, 2016)), and the ELU obtains 22.98%."
    }, {
      "heading" : "4 SOI MAP EXPERIMENTS",
      "text" : "Now let us consider how well the SOI Map performs rather than the GELU, its expectation. We consider evaluating the SOI Map, or an Adaptive Dropout variant without any nonlinearity, to show that neural networks do not require traditional nonlinearities. We can expect the SOI map to perform differently from a nonlinearity plus dropout. For one, stochastic regularizers applied to composed linear maps without a deterministic nonlinearity tend to yield a regularized deep linear transformation. In the case of a single linear transformation dropout and the SOI map behave differently. To see this, recall that Wang & Manning (2013) showed that for least squares regression, if a prediction is Ŷ = ∑ i wiximi, where x is an zero-centered input, w is a zero-centered learned weight, and m\nis a dropout mask of zeros and ones, we have that Var(Ŷ ) = ∑\ni w 2 i x 2 i p(1− p) when using dropout. Meanwhile, the SOI map has the prediction variance ∑\ni w 2 i x 2 i Φ(x)(1−Φ(x)). Thus as xi increases,\nthe variance of the prediction increases for dropout, but for the SOI map xi’s increase is dampened by the Φ(x)(1−Φ(x)) term. Then as the inputs and score gets larger, a prediction with the SOI map can have less volatility rather than more. In the experiments that follow, we confirm that the SOI map and dropout differ because the SOI map yields accuracies comparable to nonlinearities plus dropout, despite the absence of any traditional nonlinearity.\nWe begin our experimentation by reconsidering the 8-layer MNIST classifier. We have the same training procedure except that we tune the dropout keep probability over {1, 0.75, 0.5} when using a nonlinearity. There is no dropout while using the SOI map. Meanwhile, for the SOI map we tune no additional hyperparameter. When the SOI map trains we simply mask the neurons, but during testing we use the expected transformation of the SOI map (the GELU) to make the prediction deterministic, mirroring how dropout is turned off during testing. A ReLU with dropout obtains 2.10% error, and a SOI map achieves 2.00% error.\nNext, we reconsider the Twitter POS tagger. We again perform the same experimentation but also tune over the dropout keep probabilities {1, 0.75, 0.5}when using a nonlinearity. In this experiment, the ReLU with dropout obtains 11.9% error, and the SOI map obtains 12.5% error. It is worth mentioning that the best dropout setting for the ReLU was when the dropout keep probability was 1, i.e., when dropout was off, so the regularization provided by the SOI map was superfluous.\nFinally, we turn to an earlier TIMIT experiment. Like the previous two experiments, we also tune over the dropout keep probabilities {1, 0.75, 0.5} when using a nonlinearity. Under this setup, the ReLU ties with the SOI map as both obtain 29.46% error, though the SOI map obtained its best validation loss in the 7th epoch while the ReLU with dropout did in the 27th epoch.\nIn summary, the SOI map can be comparable to a nonlinearity with dropout and does not simply yield a regularized linear transformation. This is surprising because the SOI map is not like a traditional nonlinearity while it has a nonlinearity’s power. The upshot may be that traditional, deterministic, differentiable functions applied to a neuron’s input are less essential to the success of neural networks, since a stochastic regularizer can achieve comparable performance."
    }, {
      "heading" : "5 DISCUSSION",
      "text" : "Across several experiments, the GELU outperformed previous nonlinearities, but it bears semblance to the ReLU and ELU in other respects. For example, as σ → 0 and if µ = 0, the GELU becomes a ReLU. More, the ReLU and GELU are equal asymptotically. In fact, the GELU can be viewed as a natural way to smooth a ReLU. To see this, recall that ReLU = max(x, 0) = x1(x > 0) (where 1 is the indicator function), while the GELU is xΦ(x) if µ = 0, σ = 1. Then the CDF is a smooth approximation to the binary function the ReLU uses, like how the sigmoid smoothed binary threshold activations. Unlike the ReLU, the GELU and ELU can be both negative and positive. In fact, if we used the cumulative distribution function of the standard Cauchy distribution, then the ELU (when α = 1/π) is asymptotically equal to xP (C ≤ x), C ∼ Cauchy(0, 1) for negative values and for positive values is xP (C ≤ x) if we shift the line down by 1/π. These are some fundamental relations to previous nonlinearities.\nHowever, the GELU has several notable differences. This non-convex, non-monotonic function is not linear in the positive domain and exhibits curvature at all points. Meanwhile ReLUs and ELUs, which are convex and monotonic activations, are linear in the positive domain and thereby can lack curvature. As such, increased curvature and non-monotonicity may allow GELUs to more easily approximate complicated functions than can ReLUs or ELUs. Also, since ReLU(x) = x1(x > 0) and GELU(x) = xΦ(x) if µ = 0, σ = 1, we can see that the ReLU gates the input depending upon its sign, while the GELU weights its input depending upon how much greater it is than other inputs. In addition and significantly, the GELU has a probabilistic interpretation given that it is the expected SOI map, which combines ideas from dropout and zoneout.\nThe SOI Map also relates to a previous stochastic regularizer called Adaptive Dropout (Ba & Frey, 2013). The crucial difference between typical adaptive dropout and the SOI map is that adaptive dropout multiplies the nonlinearity’s output by a mask, but the SOI map multiplies the neuron input by a mask. Consequently, the SOI map trains without any nonlinearity, while adaptive dropout modifies the output of a nonlinearity. In this way, standard implementations of adaptive dropout do not call into question the necessity of traditional nonlinearities since it augments a nonlinearity’s decision rather than eschews the nonlinearity entirely.\nWe also have two practical tips for using the GELU. First we advise using an optimizer with momentum when training with a GELU, as is standard for deep neural networks. Second, using a close approximation to the cumulative distribution function of a Gaussian distribution is important. For\nexample, using a sigmoid function σ(x) = 1/(1 + e−x) is an approximation of a cumulative distribution function of a normal distribution, but it is not a close enough approximation (Ba & Frey, 2013). Indeed, we found that a Sigmoid Linear Unit (SiLU) xσ(x) performs worse than GELUs but usually better than ReLUs and ELUs. The maximum difference between σ(x) and Φ(x) is approximately 0.1, but the difference between the two is visible in Figure 8. Instead of using a xσ(x) to approximate Φ(x), we used 0.5x(1+tanh[ √ 2/π(x+0.044715x3)]) (Choudhury, 2014).1 This is a sufficiently fast, easy-to-implement approximation which we used in every experiment in this paper."
    }, {
      "heading" : "6 CONCLUSION",
      "text" : "We observed that the GELU outperforms previous nonlinearities across tasks from computer vision, natural language processing, and automatic speech recognition. Moreover, we showed that a stochastic regularizer can compete with a nonlinearity aided by dropout, indicating that traditional nonlinearities may not be crucial to neural network architectures. This stochastic regularizer makes probabilistic decisions and the GELU is the expectation of the decision. We therefore probabilistically related the GELU to the SOI map, thereby bridging a nonlinearity to a stochastic regularizer. Now having seen that a stochastic regularizer can replace a traditional nonlinearity, we hope that future work explores the design space of other stochastic regularizers as powerful as a traditional activation aided by dropout. Furthermore, there may be fruitful modifications to the GELU in different contexts. For example, for sparser inputs, a nonlinearity of the form xP (L ≤ x), L ∼ Laplace(0, 1) may be a more effective activation. For the numerous datasets evaluated in this paper, the GELU exceeded the accuracy of the ELU and ReLU consistently, making it a viable alternative to previous nonlinearities."
    }, {
      "heading" : "ACKNOWLEDGMENT",
      "text" : "We would like to thank NVIDIA Corporation for donating several TITAN X GPUs used in this research."
    }, {
      "heading" : "B NEURAL NETWORK ARCHITECTURE FOR CIFAR-10 EXPERIMENTS",
      "text" : ""
    }, {
      "heading" : "A ADDITIONAL MNIST AUTOENCODER LEARNING CURVE",
      "text" : ""
    } ],
    "references" : [ {
      "title" : "Adaptive dropout for training deep neural networks",
      "author" : [ "Jimmy Ba", "Brendan Frey" ],
      "venue" : "In Neural Information Processing Systems,",
      "citeRegEx" : "Ba and Frey.,? \\Q2013\\E",
      "shortCiteRegEx" : "Ba and Frey.",
      "year" : 2013
    }, {
      "title" : "Learning with pseudo-ensembles",
      "author" : [ "Philip Bachman", "Ouais Alsharif", "Doina Precup" ],
      "venue" : "In Neural Information Processing Systems,",
      "citeRegEx" : "Bachman et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Bachman et al\\.",
      "year" : 2014
    }, {
      "title" : "A simple approximation to the area under standard normal curve",
      "author" : [ "Amit Choudhury" ],
      "venue" : "In Mathematics and Statistics,",
      "citeRegEx" : "Choudhury.,? \\Q2014\\E",
      "shortCiteRegEx" : "Choudhury.",
      "year" : 2014
    }, {
      "title" : "Fast and accurate deep network learning by exponential linear units (ELUs)",
      "author" : [ "Djork-Arné Clevert", "Thomas Unterthiner", "Sepp Hochreiter" ],
      "venue" : "In International Conference on Learning Representations,",
      "citeRegEx" : "Clevert et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Clevert et al\\.",
      "year" : 2016
    }, {
      "title" : "Natural neural networks",
      "author" : [ "Guillaume Desjardins", "Karen Simonyan", "Razvan Pascanu", "Koray Kavukcuoglu" ],
      "venue" : "In arXiv,",
      "citeRegEx" : "Desjardins et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Desjardins et al\\.",
      "year" : 2015
    }, {
      "title" : "Adjusting for dropout variance in batch normalization and weight initialization",
      "author" : [ "Dan Hendrycks", "Kevin Gimpel" ],
      "venue" : "In arXiv,",
      "citeRegEx" : "Hendrycks and Gimpel.,? \\Q2016\\E",
      "shortCiteRegEx" : "Hendrycks and Gimpel.",
      "year" : 2016
    }, {
      "title" : "Neural networks and physical systems with emergent collective computational abilities",
      "author" : [ "John Hopfield" ],
      "venue" : "In Proceedings of the National Academy of Sciences of the USA,",
      "citeRegEx" : "Hopfield.,? \\Q1982\\E",
      "shortCiteRegEx" : "Hopfield.",
      "year" : 1982
    }, {
      "title" : "Bayesian active learning for classification and preference learning",
      "author" : [ "Neil Houlsby", "Ferenc Huszár", "Zoubin Ghahramani", "Máté Lengyel" ],
      "venue" : "In arXiv,",
      "citeRegEx" : "Houlsby et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Houlsby et al\\.",
      "year" : 2011
    }, {
      "title" : "Adam: A Method for Stochastic Optimization",
      "author" : [ "Diederik Kingma", "Jimmy Ba" ],
      "venue" : "International Conference for Learning Representations,",
      "citeRegEx" : "Kingma and Ba.,? \\Q2015\\E",
      "shortCiteRegEx" : "Kingma and Ba.",
      "year" : 2015
    }, {
      "title" : "Learning Multiple Layers of Features from Tiny Images",
      "author" : [ "Alex Krizhevsky" ],
      "venue" : null,
      "citeRegEx" : "Krizhevsky.,? \\Q2009\\E",
      "shortCiteRegEx" : "Krizhevsky.",
      "year" : 2009
    }, {
      "title" : "Zoneout: Regularizing RNNs by randomly preserving hidden activations",
      "author" : [ "David Krueger", "Tegan Maharaj", "Jnos Kramár", "Mohammad Pezeshki", "Nicolas Ballas", "Nan Rosemary Ke", "Anirudh Goyal", "Yoshua Bengio", "Hugo Larochelle", "Aaron Courville", "Chris Pal" ],
      "venue" : "In Neural Information Processing Systems,",
      "citeRegEx" : "Krueger et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Krueger et al\\.",
      "year" : 2016
    }, {
      "title" : "SGDR: Stochastic gradient descent with restarts",
      "author" : [ "Ilya Loshchilov", "Frank Hutter" ],
      "venue" : null,
      "citeRegEx" : "Loshchilov and Hutter.,? \\Q2016\\E",
      "shortCiteRegEx" : "Loshchilov and Hutter.",
      "year" : 2016
    }, {
      "title" : "Rectifier nonlinearities improve neural network acoustic models",
      "author" : [ "Andrew L. Maas", "Awni Y. Hannun", "Andrew Y. Ng" ],
      "venue" : "In International Conference on Machine Learning,",
      "citeRegEx" : "Maas et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Maas et al\\.",
      "year" : 2013
    }, {
      "title" : "A logical calculus of the ideas immanent in nervous activity",
      "author" : [ "Warren S. McCulloch", "Walter Pitts" ],
      "venue" : "In Bulletin of Mathematical Biophysics,",
      "citeRegEx" : "McCulloch and Pitts.,? \\Q1943\\E",
      "shortCiteRegEx" : "McCulloch and Pitts.",
      "year" : 1943
    }, {
      "title" : "All you need is a good init",
      "author" : [ "Dmytro Mishkin", "Jiri Matas" ],
      "venue" : "In International Conference on Learning Representations,",
      "citeRegEx" : "Mishkin and Matas.,? \\Q2016\\E",
      "shortCiteRegEx" : "Mishkin and Matas.",
      "year" : 2016
    }, {
      "title" : "Acoustic modeling using deep belief networks",
      "author" : [ "Abdelrahman Mohamed", "George E. Dahl", "Geoffrey E. Hinton" ],
      "venue" : "In IEEE Transactions on Audio, Speech, and Language Processing,",
      "citeRegEx" : "Mohamed et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Mohamed et al\\.",
      "year" : 2012
    }, {
      "title" : "Rectified linear units improve restricted boltzmann machines",
      "author" : [ "Vinod Nair", "Geoffrey E. Hinton" ],
      "venue" : "In International Conference on Machine Learning,",
      "citeRegEx" : "Nair and Hinton.,? \\Q2010\\E",
      "shortCiteRegEx" : "Nair and Hinton.",
      "year" : 2010
    }, {
      "title" : "Improved part-of-speech tagging for online conversational text with word clusters",
      "author" : [ "Olutobi Owoputi", "Brendan O’Connor", "Chris Dyer", "Kevin Gimpel", "Nathan Schneider", "Noah A. Smith" ],
      "venue" : "In North American Chapter of the Association for Computational Linguistics (NAACL),",
      "citeRegEx" : "Owoputi et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Owoputi et al\\.",
      "year" : 2013
    }, {
      "title" : "Weight normalization: A simple reparameterization to accelerate training of deep neural networks",
      "author" : [ "Tim Salimans", "Diederik P. Kingma" ],
      "venue" : "In Neural Information Processing Systems,",
      "citeRegEx" : "Salimans and Kingma.,? \\Q2016\\E",
      "shortCiteRegEx" : "Salimans and Kingma.",
      "year" : 2016
    }, {
      "title" : "Exact solutions to the nonlinear dynamics of learning in deep linear neural networks",
      "author" : [ "Andrew M. Saxe", "James L. McClelland", "Surya Ganguli" ],
      "venue" : "In International Conference on Learning Representations,",
      "citeRegEx" : "Saxe et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Saxe et al\\.",
      "year" : 2014
    }, {
      "title" : "Deep residual networks with exponential linear unit",
      "author" : [ "Anish Shah", "Sameer Shinde", "Eashan Kadam", "Hena Shah", "Sandip Shingade" ],
      "venue" : null,
      "citeRegEx" : "Shah et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Shah et al\\.",
      "year" : 2016
    }, {
      "title" : "Improving neural networks with dropout",
      "author" : [ "Nitish Srivastava" ],
      "venue" : "In University of Toronto,",
      "citeRegEx" : "Srivastava.,? \\Q2013\\E",
      "shortCiteRegEx" : "Srivastava.",
      "year" : 2013
    }, {
      "title" : "Dropout: A simple way to prevent neural networks from overfitting",
      "author" : [ "Nitish Srivastava", "Geoffrey E. Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov" ],
      "venue" : "In Journal of Machine Learning Research,",
      "citeRegEx" : "Srivastava et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Srivastava et al\\.",
      "year" : 2014
    }, {
      "title" : "Fast dropout training",
      "author" : [ "Sida I. Wang", "Christopher D. Manning" ],
      "venue" : "In International Conference on Machine Learning,",
      "citeRegEx" : "Wang and Manning.,? \\Q2013\\E",
      "shortCiteRegEx" : "Wang and Manning.",
      "year" : 2013
    }, {
      "title" : "Wide residual networks",
      "author" : [ "Sergey Zagoruyko", "Nikos Komodakis" ],
      "venue" : "British Machine Vision Conference,",
      "citeRegEx" : "Zagoruyko and Komodakis.,? \\Q2016\\E",
      "shortCiteRegEx" : "Zagoruyko and Komodakis.",
      "year" : 2016
    } ],
    "referenceMentions" : [ {
      "referenceID" : 6,
      "context" : "Early artificial neurons utilized binary threshold units (Hopfield, 1982; McCulloch & Pitts, 1943).",
      "startOffset" : 57,
      "endOffset" : 98
    }, {
      "referenceID" : 3,
      "context" : "Building on the successes of ReLUs, a recent modification called ELUs (Clevert et al., 2016) allows a ReLU-like nonlinearity to output negative values which sometimes increases training speed.",
      "startOffset" : 70,
      "endOffset" : 92
    }, {
      "referenceID" : 22,
      "context" : "Deep nonlinear classifiers can fit their data so well that network designers are often faced with the choice of including stochastic regularizer like adding noise to hidden layers or applying dropout (Srivastava et al., 2014), and this choice remains separate from the activation function.",
      "startOffset" : 200,
      "endOffset" : 225
    }, {
      "referenceID" : 1,
      "context" : "Some stochastic regularizers can make the network behave like an ensemble of networks, a pseudoensemble (Bachman et al., 2014), and can lead to marked accuracy increases.",
      "startOffset" : 104,
      "endOffset" : 126
    }, {
      "referenceID" : 10,
      "context" : "Also, a new RNN regularizer called zoneout stochastically multiplies inputs by one (Krueger et al., 2016).",
      "startOffset" : 83,
      "endOffset" : 105
    }, {
      "referenceID" : 7,
      "context" : "The distribution Bernoulli(Φ(x)) appears in Gaussian Processes for classification (Houlsby et al., 2011) and the neuron’s output is xm giving x or 0.",
      "startOffset" : 82,
      "endOffset" : 104
    }, {
      "referenceID" : 12,
      "context" : "We do not evaluate nonlinearities like the LReLU because of its similarity to ReLUs (see Maas et al. (2013) for a description of LReLUs).",
      "startOffset" : 89,
      "endOffset" : 108
    }, {
      "referenceID" : 3,
      "context" : "Let us verify that this nonlinearity competes with previous activation functions by replicating an experiment from Clevert et al. (2016). To this end, we train a fully connected neural network with GELUs (μ = 0, σ = 1), ReLUs, and ELUs (α = 1).",
      "startOffset" : 115,
      "endOffset" : 137
    }, {
      "referenceID" : 19,
      "context" : "Weights are initialized with unit norm rows, as this has positive impact on each nonlinearity’s performance (Hendrycks & Gimpel, 2016; Mishkin & Matas, 2016; Saxe et al., 2014).",
      "startOffset" : 108,
      "endOffset" : 176
    }, {
      "referenceID" : 4,
      "context" : "We now consider a self-supervised setting and train a deep autoencoder on MNIST (Desjardins et al., 2015).",
      "startOffset" : 80,
      "endOffset" : 105
    }, {
      "referenceID" : 17,
      "context" : "To meet this challenge we compare the nonlinearities on POSannotated tweets (Gimpel et al., 2011; Owoputi et al., 2013) which contain 25 tags.",
      "startOffset" : 76,
      "endOffset" : 119
    }, {
      "referenceID" : 17,
      "context" : "The tweet tagger is simply a two-layer network with pretrained word vectors trained on a corpus of 56 million tweets (Owoputi et al., 2013).",
      "startOffset" : 117,
      "endOffset" : 139
    }, {
      "referenceID" : 15,
      "context" : "The system is a five-layer, 2048-neuron wide classifier as in (Mohamed et al., 2012) with 39 output phone labels and a dropout rate of 0.",
      "startOffset" : 62,
      "endOffset" : 84
    }, {
      "referenceID" : 21,
      "context" : "5 as in (Srivastava, 2013).",
      "startOffset" : 8,
      "endOffset" : 26
    }, {
      "referenceID" : 9,
      "context" : "We evaluate this activation function using CIFAR-10 and CIFAR-100 datasets (Krizhevsky, 2009) on shallow and deep convolutional neural networks, respectively.",
      "startOffset" : 75,
      "endOffset" : 93
    }, {
      "referenceID" : 20,
      "context" : "Some have noted that ELUs have an exploding gradient with residual networks (Shah et al., 2016), and this is alleviated with batch normalization at the end of a residual block.",
      "startOffset" : 76,
      "endOffset" : 95
    }, {
      "referenceID" : 9,
      "context" : "We evaluate this activation function using CIFAR-10 and CIFAR-100 datasets (Krizhevsky, 2009) on shallow and deep convolutional neural networks, respectively. Our shallower convolutional neural network is a 9-layer network with the architecture and training procedure from Salimans & Kingma (2016) while using batch normalization to speed up training.",
      "startOffset" : 76,
      "endOffset" : 298
    }, {
      "referenceID" : 2,
      "context" : "044715x)]) (Choudhury, 2014).",
      "startOffset" : 11,
      "endOffset" : 28
    } ],
    "year" : 2016,
    "abstractText" : "We propose the Gaussian Error Linear Unit (GELU), a high-performing neural network activation function. The GELU nonlinearity is the expected transformation of a stochastic regularizer which randomly applies the identity or zero map to a neuron’s input. This stochastic regularizer is comparable to nonlinearities aided by dropout, but it removes the need for a traditional nonlinearity. The connection between the GELU and the stochastic regularizer suggests a new probabilistic understanding of nonlinearities. We perform an empirical evaluation of the GELU nonlinearity against the ReLU and ELU activations and find performance improvements across all tasks.",
    "creator" : "LaTeX with hyperref package"
  }
}