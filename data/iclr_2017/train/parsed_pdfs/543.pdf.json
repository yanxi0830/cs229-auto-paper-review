{
  "name" : "543.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "ING PLATFORM AND APPLICATION TO DISTRIBUTED TRAINING",
    "authors" : [ "Masatoshi Hidaka", "Ken Miura", "Tatsuya Harada" ],
    "emails" : [ "hidaka@mi.t.u-tokyo.ac.jp", "miura@mi.t.u-tokyo.ac.jp", "harada@mi.t.u-tokyo.ac.jp" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Deep learning is increasingly attracting attention for processing big data. Existing frameworks for deep learning must be set up to specialized computer systems. Gaining sufficient computing resources therefore entails high costs of deployment and maintenance. In this work, we implement a matrix library and deep learning framework that uses JavaScript. It can run on web browsers operating on ordinary personal computers and smartphones. Using JavaScript, deep learning can be accomplished in widely diverse environments without the necessity for software installation. Using GPGPU from WebCL framework, our framework can train large scale convolutional neural networks such as VGGNet and ResNet. In the experiments, we demonstrate their practicality by training VGGNet in a distributed manner using web browsers as the client."
    }, {
      "heading" : "1 INTRODUCTION",
      "text" : "Recently, machine learning, which uses big data derived from user activity on websites, images and videos is increasingly getting attention. Deep learning is at the center of that attention. Conventional machine learning techniques have required hand-crafted features specialized to a particular domain such as image or voice. In contrast, deep learning has a hugely important benefit that can illustrate data flow from raw data to an objective value in a single neural network and can train thoroughly using those data. In the computer vision domain, a team of Hinton (Krizhevsky et al., 2012) achieved outstanding classification accuracy using deep learning in an object classification competition ILSVRC2012 (Russakovsky et al., 2015). In the subsequent years’ competitions, deep-learningbased methods evolved continually and exhibited superior performance (Simonyan & Zisserman, 2014a; Szegedy et al., 2014; He et al., 2016). Convolutional neural networks (CNNs) trained for ILSVRC object classification are helpful for improving classification accuracy for scene recognition and video recognition by functioning as a feature extractor or being fine-tuned (Zhou et al., 2014; Simonyan & Zisserman, 2014b). Moreover, application is beginning to emerge in other areas such as medical imaging (Tajbakhsh et al., 2016). Software platforms for deep learning are expected to play an important role in accelerating a wide range of research efforts and applications.\nAlthough deep learning achieved significant recognition accuracy that cannot be achieved using conventional methods, the number of parameters that can be trained is greater, resulting in requests for huge amounts of training data. This shortcoming not only increases data collection costs but also increases computational costs of training larger parameters with larger data. Moreover, trialand-error must be undertaken to ascertain a good neural network structure; thereby higher costs become necessary. What resolved this computational cost difficulty and enabled deep learning to work on a practical scale problem is general purpose computing on GPU (GPGPU) technology, which offers rapid matrix calculation. However, a deep learning framework must be set up on a dedicated computer. If a user wants to train a huge network, then a cluster computing system that uses MPI or Hadoop must be used for collaboration of multiple computers to obtain larger working memory and computational speed. To set up and maintain these systems generally presents\nan expensive task. For that reason, such systems are available only to expert IT companies or laboratories.\nThis work specifically examines JavaScript, the programming language that runs on web browsers installed on ordinary personal computers and smartphones. With the recent advancement of web technology, JavaScript became the standard programming language to implement rich applications on web browsers. Word processors provided by Google and Microsoft are the popular examples. Those applications are traditionally implemented as native applications. This is not only a change of programming language; it brings an advantage of install-free convenience. Moreover, the communication features of web browsers are used not only during the loading of the application, but are also used by the application on demand, using so-called Ajax technology. For example, using this technology with a Google service spreadsheet, modifications made by one user are shown in real time on other users’ displays. By making full use of this technology, collaboration of an application running on web browsers across the internet becomes possible. Moreover, web browsers such as Google Chrome run not only on Windows, but also on Mac OS X, Linux, Android, and iOS smartphones. They provide a compatible JavaScript executing environment. More recently, a small microcontroller board for prototyping Internet of Things (IoT) devices runs Linux. JavaScript can run on these devices. However, JavaScript is rarely used for scientific computation. This is mainly because JavaScript assumes single-threaded execution. It has no fast matrix computation library, which is crucially important for scientific computation. To resolve this difficulty, our previous work proposed the fast matrix computation library, which uses a parallel computing platform, WebCL, from JavaScript (Miura et al., 2015). In WebCL, GPGPU can be utilized from JavaScript code. Moreover, its application to deep learning is proposed (Miura & Harada, 2015). However, existing implementations cannot fully exploit the functionality of JavaScript and WebCL. For that reason, only a small six-layer CNN for classifying CIFAR-10 (Krizhevsky, 2009) dataset can be trained. In this work, our objective is to provide a deep learning platform that can train practical large-scale CNN as large as VGGNet. In the Experiment section, we present preliminary results on training VGGNet by distributed computation using web browsers as the computation client. In the following section, we restrict our description to CNN only, but our system is applicable to neural networks of other kinds by implementing the layers that they need.\nOur contributions are the following:\n• We implemented the fastest matrix library and deep learning library that can run on web browsers using GPGPU. The source code is provided as open-source software1.\n• Even where GPGPU cannot be used, native JavaScript implementation is provided, which allows high-level multi-dimensional matrix operation.\n• We describe the possibility of training large scale CNN in a distributed manner without installing software in computation nodes, except for a generic plugin."
    }, {
      "heading" : "2 RELATED WORK",
      "text" : "In this section, we first describe the studies related to distributed computing using generic computers that are not designed for scientific computing. The SETI@home project searches for extraterrestrial life (Anderson et al., 2002). In that research effort, radio waves analyses were performed distributedly on computers of volunteers. Although dedicated software had to be installed, more than 3 million computers participated in the project and contributed vast amounts of computational resources. Merelo-Guervos et al. (2008); Klein & Spector (2007) distributedly computed genetic algorithm (GA) using web browsers as computing nodes. The main component of GA was calculation of the fitness of population, which could be computed completely in parallel, thereby achieving extremely effective distributed computing. In our work, the main task to be distributed is deep learning, for which a large amount of weight parameters must be communicated frequently. Therefore, the communication efficiency becomes important.\nSecondly, we explain distributed computing of deep learning. Dean et al. (2012) proposed a mechanism called DistBelief, which divides a neural network into multiple blocks of neurons and trains each block in a different computer. Large amounts of data are transferred at the division borders.\n1Download code from https://github.com/mil-tokyo\nThey require n-to-n communication, which is unsuitable for environment in which computing nodes are not in the same LAN. deeplearning4j 2 provides distributed computing of deep learning framework that runs on the distributed computing Hadoop. However, Hadoop must be installed in all computing nodes, thereby imposing high deployment and maintenance costs. Meeds et al. (2014) developed a distributed deep learning system using web browsers. However, it is implemented in native JavaScript. For that reason, training with a large-scale dataset is nearly impossible because of the computational speed. In this work, we inherit the good properties of a JavaScript (web browser) based computing environment, with the aim of making training of practical CNN possible."
    }, {
      "heading" : "3 MATRIX LIBRARY IMPLEMENTATION",
      "text" : "In this section, we describe the fast and generic matrix library “Sushi2”, which is based on previous library “Sushi.” They are using WebCL technology, which is a parallel computing platform to be used from JavaScript. WebCL is a JavaScript wrapper for parallel computing platform OpenCL, standardized by Khronos Group, which provides a unified interface to multi-core CPU and GPGPU. In contrast to NVIDIA CUDA, GPUs from AMD and Intel can also be used as accelerators. Unfortunately, WebCL is not built-in feature of web browsers, but there is an add-on for Firefox and WebCL-integrated Chromium. Our library also works with node.js (server-side JavaScript execution environment), in which node-opencl3 library can be used to accelerate computation. Although Sushi2 performs best in a WebCL environment, most functions have equivalent native JavaScript implementation. Sushi2 currently uses WebCL for the acceleration of numerical calculation, but it is possible to use other solutions including WebGL or asm.js by substituting implementation of matrix manipulation. In WebCL, “kernel” is the function to run on GPGPU. Kernel, which is written in C language, must be compiled before use. Sushi2 wraps them to allow users to write simple codes. Details of low-level WebCL operations are available in the literature (Miura et al., 2015).\nThough Sushi achieved efficient calculation on GPGPU, currently it lacks the availability for large scale neural networks that require matrices of large dimensions. Sushi2 is developed to overcome such problems that Sushi has been facing and achieved the following benefits:\n• Use simple and efficient data structures to achieve good performance. • Allow users to understand how to use it easily. • Support CPU (native JavaScript) and GPGPUmatrix without burdening ordinary users with\nlearning WebCL programming.\nMost general purpose matrix libraries for JavaScript represent a multi-dimensional matrix with a nested JavaScript array. In contrast, Sushi2 represents a matrix with TypedArray, which is used for transferring numeric data between the CPU and GPGPU. TypedArray is a one-dimensional numeric array with fixed size and bit width at construction, as in arrays of C language. The array accommodates efficient storing and manipulation of large data. TypedArray which stores 32-bit floating point numbers is named Float32Array and the one that stores 8-bit unsigned integer is named Uint8Array. The numeric type of JavaScript is a 64-bit floating point number, but some WebCL environments do not support it. Therefore, the basic numeric type of matrix is a 32-bit floating point number. However, the precision of a 32-bit floating number is only 23-bit, so it cannot be used as an index of a large matrix (which have more than 223 elements). This is a problem for functions such as argmax, so a 32-bit signed integer matrix is also implemented. Moreover, an 8-bit unsigned integer matrix for raw image data and a logical matrix for Boolean operations are implemented.\nFunctions for the operating matrix are designed to be similar to those of MATLAB, which allows new users to use Sushi2 quickly. Operations for matrices that have more than two dimensions are implemented. It is a simple matter to operate color images and sets of color images (fourdimensional matrix). Almost all patterns for indexing operation in MATLAB are implemented. For import or export of a matrix, efficient binary format of numpy4 is implemented as well as the native JavaScript nested Array.\n2http://deeplearning4j.org 3https://github.com/mikeseven/node-opencl 4http://docs.scipy.org/doc/numpy/neps/npy-format.html\nFunction $M.gpuArray transfers a matrix to GPGPU. In functions that support WebCL, operations of matrices in GPGPU are accelerated. In JavaScript, unused memory is released by garbage collection, but this is not applied for memory allocated on the GPGPU by WebCL. It has to be released by explicitly calling the destruct method. To make programming convenient, an “autodestruct” helper function is supplied. When the closure passed to autodestruct finishes, the matrices allocated in it are released automatically. Figure 1 presents a sample implementation of a fully-connected layer of CNN. Whether input matrices are on GPGPU or not, they can be processed in the same code.\nMost GPGPU kernels are implemented originally for Sushi2, but matrix multiplication kernel is ported from clBLAS’s5 “sgemm”, because it requires advanced optimization.\nTable 1 presents a speed comparison between our library and existing JavaScript based matrix libraries; Sylvester6 and Math.js7. The hardware environment is on Table 2 (AMD). When GPGPU is used, the time includes data transfer between the CPU and GPGPU. Task 1 represents simple element-wise task. Task 2 represents relatively expensive element-wise task. Task 3 and 4 are matrix multiplication task; the complexity of operations is greater than the number of elements. Our matrix representation (TypedArray) seems to be better than native JavaScript Array used in other libraries, even without WebCL. We can see clear superiority of using GPGPUwhen the computational cost is high."
    }, {
      "heading" : "4 DEEP LEARNING LIBRARY IMPLEMENTATION",
      "text" : "In this section, we describe deep learning library “Sukiyaki2”, which is based on matrix library Sushi2.\n5https://github.com/clMathLibraries/clBLAS 6http://sylvester.jcoglan.com/ 7http://mathjs.org/\nSukiyaki2 implements modules that are necessary for deep learning: layers, network structure manager, and optimizers. Users can use a single layer separately, as well as training network by supplying configuration file to the executable. Figure 2 portrays a sample of a network definition file. For network analysis required for distributed computing in the future, we used the architecture with statically defined relations of layers. Improvements from our previous work include: enabling network graph branch (necessary for ResNet training), addition of some layers including dropout and batch normalization, efficient binary export of network parameters. Users can implement the original layers and optimizers to train new neural networks. It works automatically with CPU and GPGPU if it can be implemented by Sushi2’s matrix operations. For cases in which a performance bottleneck exists, a dedicated GPGPU kernel can also be implemented. Using GPGPU for training is recommended, but almost all functions have native JavaScript fallback.\nFigure 3 portrays a sample application for recognizing digits captured using a camera. The network is trained using MNIST dataset (LeCun et al., 1998b). Although image data are given as a flat byte array, extensive functions of Sushi2 allow short implementation of image recognition only in 10 lines. Recent web browsers for smartphones follow the JavaScript standard, and it is possible to develop such applications in this sample."
    }, {
      "heading" : "5 EXPERIMENTS",
      "text" : ""
    }, {
      "heading" : "5.1 SINGLE-GPGPU TRAINING",
      "text" : "In this section, we evaluate the CNN training performance of the proposed system. The specifications of hardware used for experiments are shown in Table 2.\nFirst, we compared our library and existing deep learning library ConvNetJS by Andrej Karpathy8, which is written in JavaScript. We evaluated them by training LeNet with MNIST dataset (LeCun et al., 1998b). The network structure is based on LeCun et al. (1998a), which contains two convolutional layers and two fully-connected layers. The batch size is 64. Firefox (version 32) and node.js (version 4.3.0) are used as the JavaScript execution environment. A tiny server application is implemented and used for supplying the dataset and saving the trained model to and from the web browser.\nThe measured calculation speed is presented in Table 3. In Firefox, the performance gain was relatively low because the control overhead of GPGPU is dominant in the small CNN. In node.js, this overhead is smaller, thus using GPGPU allowed faster computation by a large margin.\nNext, we trained VGGNet (Simonyan & Zisserman, 2014a) and ResNet (He et al., 2016) as practical scale CNNs. VGGNet is proposed by Simonyan & Zisserman (2014a) at ILSVRC2014. 16-layer version, denoted as VGG16, includes 13 convolutional layers and 3 fully-connected layers. It is among the largest CNNs that are commonly used. ResNet is the winner of ILSVRC2015. 152-layer version, denoted as ResNet152, includes 151 convolutional layers and 1 fully-connected layer, but the bottleneck structure reduces the number of parameters.\nWe used Caffe (Jia et al., 2014), a popular deep learning library, for comparison. The mainstream version of Caffe employs NVIDIA CUDA as the interface to GPGPU. We designate this version as Caffe (CUDA). CUDA is not compatible with GPGPUs other than NVIDIA’s. Caffe uses cuBLAS for matrix operations such as multiplication. There are forks of Caffe which use OpenCL as an cross-platform GPGPU interface. One such fork is OpenCL-Caffe by AMD9, which uses clBLAS as the matrix operation. Another one is the opencl branch of Caffe by Fabian Tschopp10. It uses ViennaCL11 for matrix operations. In Caffe (CUDA), the cuDNN accelerator library from NVIDIA can also be attached. We used same batch size in the same CNN / GPU setting for fair comparison.\nThe training speed is presented in Table 4. By virtue of GPGPU, VGG16 and ResNet152 can be trained, which was difficult using existing JavaScript based libraries. In ResNet152, more than 1,000 GPGPU kernels are executed and its execution overhead seems to be problematic on Firefox environment. Currently, our library is not faster than Caffe, but it achieved the same order of speed. Especially, Caffe (CUDA) provides the best performance. This difference mainly comes from the speed of convolution. Implementation of convolution in Caffe is similar to ours. To perform con-\n8http://cs.stanford.edu/people/karpathy/convnetjs/index.html 9https://github.com/amd/OpenCL-caffe\n10https://github.com/BVLC/caffe/tree/opencl 11http://viennacl.sourceforge.net/\nvolution, elements of the input matrix are re-ordered (i.e. lowering). Then the output is gained by matrix multiplication with the weight. Table 4 presents the calculation speed in matrix multiplication used in computation of VGG16, performed by cuBLAS and clBLAS.\nAs the table shows, clBLAS gives inferior speed, especially on gradient computation of layers that are close to the input layer. In such layers, the matrix shape is far from square. For that reason, performance tuning for such input shape or implementation without matrix multiplication is needed. In the CUDA environment, Lavin (2015) showed that 96% of theoretical GPGPU performance is achieved in convolution by circumspect implementation."
    }, {
      "heading" : "5.2 DISTRIBUTED TRAINING",
      "text" : "In this subsection, we describe a preliminary evaluation of distributed training of CNN.\nThe method of distributed training is simple data-parallelism. The system is depicted in Fig. 5. First the server distributes network weight Wt and images in a batch. A batch for the iteration (It) is divided into N splits, It1, It2, ..., ItN , where N is the number of computing clients. After the client K calculates gradient of weight ∆WtK using assigned batch split, they send the gradient to the server. The server takes the average of the gradients from all clients and then updates the weight using it (Wt+1 = Wt − η 1NΣ∆WtK). The optimization method is momentum SGD. The result is equivalent regardless of the number of clients.\nFirst, we trained LeNet distributedly in Nexus 7 tablets (Android OS). Chrome browser is used as the client. The batch size is 120 and divided by the clients equally. Figure 6 (left) shows the speedup according to the increase in the number of clients. Naturally, the absolute speed is slow, but we can demonstrate that the computational power of mobile devices can be accumulated and nearly linear speedup is achieved.\nNext, we train large scale CNN; VGG16. Its weight and gradient have 130 million elements. It therefore requires 500 MB if represented as 32-bit floating point numbers, which poses a large communication bottleneck. To suppress this issue, we implemented 8-bit representation of each element proposed by Dettmers (2016). We used p2.xlarge instance of Amazon Web Services for GPGPU environment. It contains NVIDIA K80 GPU. The batch size is 256 according to (Simonyan & Zisserman, 2014a). Single forward-backward procedure cannot process 256 images at the same time due to the memory limit, so we average the gradients from multiple forward-backward procedure.\nWe show the speed of calculation with respect to the number of computing clients in Fig. 6 (right). Although our main focus is using web browser as clients, the result on using node.js as clients is also shown for reference. Under current settings, use of four clients achieved 2.8 times faster computation than with one client setting. The speed is much faster than existing OpenCL-based Caffe. Due to the communication overhead, the speed saturates at 8 clients even when 8-bit representation is employed.\nAlthough we used K80, a high-end GPU, for this experiment, our motivation is to use ordinary personal computers for distributed computing. We can assume that latest ordinary personal computers (not dedicated for 3D game) have 1/10 performance compared to K80. In K80, we could train VGG16 with 29 seconds per iteration using 8 computers. In 1/10 performance GPU, we can estimate that maximum speed is 100 seconds per iteration using 16 computers, considering both calculation and network time. We compressed the weight to 1/4 size by the method of Dettmers, if we can compress it to 1/10 further, the maximum speed will be 31 seconds per iteration using 64 computers. Thus, further improvements demand reduction of communications and a better strategy of parallelism. We leave those improvements as a subject for future work."
    }, {
      "heading" : "6 CONCLUSION",
      "text" : "We implemented a JavaScript based matrix library and deep learning library, to perform deep learning and to develop applications that use a trained model without a dedicated computer system. Using GPGPU via WebCL, our library provides much better performance than existing JavaScript based libraries. It became possible to train VGG16 and ResNet152. However, the performance is not reaching Caffe running on NVIDIA CUDA environment. A salient difficulty is that matrix multiplication necessary for convolution is slower. Additionally, we used WebCL as GPGPU interface, but currently it is not included in web browsers. Further improvements in web technology must be undertaken to make full computing power available to scripts in web pages. In experiments of distributed training of VGG16 using web browsers as computing client, 2.8x speed improvement was gained from four clients. The speed is much faster than existing OpenCL-based Caffe using single computer. The parallelization method used in the experiment is naı̈ve, and further exploration of this area will be undertaken as a subject of future work."
    }, {
      "heading" : "ACKNOWLEDGMENTS",
      "text" : "This work was supported by CREST, JST."
    } ],
    "references" : [ {
      "title" : "SETI@home: an experiment in public-resource computing",
      "author" : [ "David P. Anderson", "Jeff Cobb", "Eric Korpela", "Matt Lebofsky", "Dan Werthimer" ],
      "venue" : "Communications of the ACM,",
      "citeRegEx" : "Anderson et al\\.,? \\Q2002\\E",
      "shortCiteRegEx" : "Anderson et al\\.",
      "year" : 2002
    }, {
      "title" : "Large scale distributed deep networks",
      "author" : [ "Jeffrey Dean", "Greg S. Corrado", "Rajat Monga", "Kai Chen", "Matthieu Devin", "Quoc V. Le", "Mark Z. Mao", "Marc ’Aurelio Ranzato", "Andrew Senior", "Paul Tucker", "Ke Yang", "Andrew Y. Ng" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Dean et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Dean et al\\.",
      "year" : 2012
    }, {
      "title" : "8-Bit Approximations for Parallelism in Deep Learning",
      "author" : [ "Tim Dettmers" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Dettmers.,? \\Q2016\\E",
      "shortCiteRegEx" : "Dettmers.",
      "year" : 2016
    }, {
      "title" : "Deep Residual Learning for Image Recognition",
      "author" : [ "Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun" ],
      "venue" : null,
      "citeRegEx" : "He et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2016
    }, {
      "title" : "Caffe: Convolutional Architecture for Fast Feature Embedding",
      "author" : [ "Yangqing Jia", "Evan Shelhamer", "Jeff Donahue", "Sergey Karayev", "Jonathan Long", "Ross Girshick", "Sergio Guadarrama", "Trevor Darrell" ],
      "venue" : null,
      "citeRegEx" : "Jia et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Jia et al\\.",
      "year" : 2014
    }, {
      "title" : "Unwitting Distributed Genetic Programming via Asynchronous JavaScript and XML",
      "author" : [ "Jon Klein", "Lee Spector" ],
      "venue" : "In GECCO,",
      "citeRegEx" : "Klein and Spector.,? \\Q2007\\E",
      "shortCiteRegEx" : "Klein and Spector.",
      "year" : 2007
    }, {
      "title" : "Learning Multiple Layers of Features from Tiny Images",
      "author" : [ "Alex Krizhevsky" ],
      "venue" : "Master’s Thesis,",
      "citeRegEx" : "Krizhevsky.,? \\Q2009\\E",
      "shortCiteRegEx" : "Krizhevsky.",
      "year" : 2009
    }, {
      "title" : "ImageNet Classification with Deep Convolutional Neural Networks",
      "author" : [ "Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E. Hinton" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Krizhevsky et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Krizhevsky et al\\.",
      "year" : 2012
    }, {
      "title" : "maxDNN: An Efficient Convolution Kernel for Deep Learning with Maxwell GPUs",
      "author" : [ "Andrew Lavin" ],
      "venue" : null,
      "citeRegEx" : "Lavin.,? \\Q2015\\E",
      "shortCiteRegEx" : "Lavin.",
      "year" : 2015
    }, {
      "title" : "Gradient-based learning applied to document recognition",
      "author" : [ "Yann LeCun", "Leon Bottou", "Yoshua Bengio", "Patrick Haffner" ],
      "venue" : "Proceedings of the IEEE,",
      "citeRegEx" : "LeCun et al\\.,? \\Q1998\\E",
      "shortCiteRegEx" : "LeCun et al\\.",
      "year" : 1998
    }, {
      "title" : "The mnist database of handwritten digits, 1998b. http://yann.lecun.com/exdb/mnist",
      "author" : [ "Yann LeCun", "Corinna Cortes", "Christopher J.C. Burges" ],
      "venue" : null,
      "citeRegEx" : "LeCun et al\\.,? \\Q1998\\E",
      "shortCiteRegEx" : "LeCun et al\\.",
      "year" : 1998
    }, {
      "title" : "Asynchronous distributed genetic algorithms with javascript and json",
      "author" : [ "J.J. Merelo-Guervos", "P.A. Castillo", "J.L.J. Laredo", "A. Mora Garcia", "A. Prieto" ],
      "venue" : "In CEC,",
      "citeRegEx" : "Merelo.Guervos et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Merelo.Guervos et al\\.",
      "year" : 2008
    }, {
      "title" : "Implementation of a practical distributed calculation system with browsers and javascript, and application to distributed deep learning",
      "author" : [ "Ken Miura", "Tatsuya Harada" ],
      "venue" : null,
      "citeRegEx" : "Miura and Harada.,? \\Q2015\\E",
      "shortCiteRegEx" : "Miura and Harada.",
      "year" : 2015
    }, {
      "title" : "MILJS : Brand new javascript libraries for matrix calculation and machine learning",
      "author" : [ "Ken Miura", "Tetsuaki Mano", "Atsushi Kanehira", "Yuichiro Tsuchiya", "Tatsuya Harada" ],
      "venue" : null,
      "citeRegEx" : "Miura et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Miura et al\\.",
      "year" : 2015
    }, {
      "title" : "ImageNet Large Scale Visual Recognition Challenge",
      "author" : [ "Olga Russakovsky", "Jia Deng", "Hao Su", "Jonathan Krause", "Sanjeev Satheesh", "Sean Ma", "Zhiheng Huang", "Andrej Karpathy", "Aditya Khosla", "Michael Bernstein", "Alexander C. Berg", "Li Fei-Fei" ],
      "venue" : "International Journal of Computer Vision,",
      "citeRegEx" : "Russakovsky et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Russakovsky et al\\.",
      "year" : 2015
    }, {
      "title" : "Very Deep Convolutional Networks for Large-Scale Image Recognition",
      "author" : [ "Karen Simonyan", "Andrew Zisserman" ],
      "venue" : null,
      "citeRegEx" : "Simonyan and Zisserman.,? \\Q2014\\E",
      "shortCiteRegEx" : "Simonyan and Zisserman.",
      "year" : 2014
    }, {
      "title" : "Two-stream convolutional networks for action recognition in videos",
      "author" : [ "Karen Simonyan", "Andrew Zisserman" ],
      "venue" : "In NIPS, pp",
      "citeRegEx" : "Simonyan and Zisserman.,? \\Q2014\\E",
      "shortCiteRegEx" : "Simonyan and Zisserman.",
      "year" : 2014
    }, {
      "title" : "Convolutional Neural Networks for Medical Image Analysis: Full Training or Fine Tuning",
      "author" : [ "Nima Tajbakhsh", "Jae Y. Shin", "Suryakanth R. Gurudu", "R. Todd Hurst", "Christopher B. Kendall", "Michael B. Gotway", "Jianming Liang" ],
      "venue" : "IEEE Transactions on Medical Imaging,",
      "citeRegEx" : "Tajbakhsh et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Tajbakhsh et al\\.",
      "year" : 2016
    }, {
      "title" : "Learning Deep Features for Scene Recognition using Places Database",
      "author" : [ "Bolei Zhou", "Agata Lapedriza", "Jianxiong Xiao", "Antonio Torralba", "Aude Oliva" ],
      "venue" : "In NIPS, pp",
      "citeRegEx" : "Zhou et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Zhou et al\\.",
      "year" : 2014
    } ],
    "referenceMentions" : [ {
      "referenceID" : 7,
      "context" : "In the computer vision domain, a team of Hinton (Krizhevsky et al., 2012) achieved outstanding classification accuracy using deep learning in an object classification competition ILSVRC2012 (Russakovsky et al.",
      "startOffset" : 48,
      "endOffset" : 73
    }, {
      "referenceID" : 14,
      "context" : ", 2012) achieved outstanding classification accuracy using deep learning in an object classification competition ILSVRC2012 (Russakovsky et al., 2015).",
      "startOffset" : 124,
      "endOffset" : 150
    }, {
      "referenceID" : 3,
      "context" : "In the subsequent years’ competitions, deep-learningbased methods evolved continually and exhibited superior performance (Simonyan & Zisserman, 2014a; Szegedy et al., 2014; He et al., 2016).",
      "startOffset" : 121,
      "endOffset" : 189
    }, {
      "referenceID" : 18,
      "context" : "Convolutional neural networks (CNNs) trained for ILSVRC object classification are helpful for improving classification accuracy for scene recognition and video recognition by functioning as a feature extractor or being fine-tuned (Zhou et al., 2014; Simonyan & Zisserman, 2014b).",
      "startOffset" : 230,
      "endOffset" : 278
    }, {
      "referenceID" : 17,
      "context" : "Moreover, application is beginning to emerge in other areas such as medical imaging (Tajbakhsh et al., 2016).",
      "startOffset" : 84,
      "endOffset" : 108
    }, {
      "referenceID" : 13,
      "context" : "To resolve this difficulty, our previous work proposed the fast matrix computation library, which uses a parallel computing platform, WebCL, from JavaScript (Miura et al., 2015).",
      "startOffset" : 157,
      "endOffset" : 177
    }, {
      "referenceID" : 6,
      "context" : "For that reason, only a small six-layer CNN for classifying CIFAR-10 (Krizhevsky, 2009) dataset can be trained.",
      "startOffset" : 69,
      "endOffset" : 87
    }, {
      "referenceID" : 0,
      "context" : "The SETI@home project searches for extraterrestrial life (Anderson et al., 2002).",
      "startOffset" : 57,
      "endOffset" : 80
    }, {
      "referenceID" : 0,
      "context" : "The SETI@home project searches for extraterrestrial life (Anderson et al., 2002). In that research effort, radio waves analyses were performed distributedly on computers of volunteers. Although dedicated software had to be installed, more than 3 million computers participated in the project and contributed vast amounts of computational resources. Merelo-Guervos et al. (2008); Klein & Spector (2007) distributedly computed genetic algorithm (GA) using web browsers as computing nodes.",
      "startOffset" : 58,
      "endOffset" : 378
    }, {
      "referenceID" : 0,
      "context" : "The SETI@home project searches for extraterrestrial life (Anderson et al., 2002). In that research effort, radio waves analyses were performed distributedly on computers of volunteers. Although dedicated software had to be installed, more than 3 million computers participated in the project and contributed vast amounts of computational resources. Merelo-Guervos et al. (2008); Klein & Spector (2007) distributedly computed genetic algorithm (GA) using web browsers as computing nodes.",
      "startOffset" : 58,
      "endOffset" : 402
    }, {
      "referenceID" : 0,
      "context" : "The SETI@home project searches for extraterrestrial life (Anderson et al., 2002). In that research effort, radio waves analyses were performed distributedly on computers of volunteers. Although dedicated software had to be installed, more than 3 million computers participated in the project and contributed vast amounts of computational resources. Merelo-Guervos et al. (2008); Klein & Spector (2007) distributedly computed genetic algorithm (GA) using web browsers as computing nodes. The main component of GA was calculation of the fitness of population, which could be computed completely in parallel, thereby achieving extremely effective distributed computing. In our work, the main task to be distributed is deep learning, for which a large amount of weight parameters must be communicated frequently. Therefore, the communication efficiency becomes important. Secondly, we explain distributed computing of deep learning. Dean et al. (2012) proposed a mechanism called DistBelief, which divides a neural network into multiple blocks of neurons and trains each block in a different computer.",
      "startOffset" : 58,
      "endOffset" : 948
    }, {
      "referenceID" : 13,
      "context" : "Details of low-level WebCL operations are available in the literature (Miura et al., 2015).",
      "startOffset" : 70,
      "endOffset" : 90
    }, {
      "referenceID" : 9,
      "context" : "We evaluated them by training LeNet with MNIST dataset (LeCun et al., 1998b). The network structure is based on LeCun et al. (1998a), which contains two convolutional layers and two fully-connected layers.",
      "startOffset" : 56,
      "endOffset" : 133
    }, {
      "referenceID" : 3,
      "context" : "Next, we trained VGGNet (Simonyan & Zisserman, 2014a) and ResNet (He et al., 2016) as practical scale CNNs.",
      "startOffset" : 65,
      "endOffset" : 82
    }, {
      "referenceID" : 3,
      "context" : "Next, we trained VGGNet (Simonyan & Zisserman, 2014a) and ResNet (He et al., 2016) as practical scale CNNs. VGGNet is proposed by Simonyan & Zisserman (2014a) at ILSVRC2014.",
      "startOffset" : 66,
      "endOffset" : 159
    }, {
      "referenceID" : 4,
      "context" : "We used Caffe (Jia et al., 2014), a popular deep learning library, for comparison.",
      "startOffset" : 14,
      "endOffset" : 32
    }, {
      "referenceID" : 8,
      "context" : "In the CUDA environment, Lavin (2015) showed that 96% of theoretical GPGPU performance is achieved in convolution by circumspect implementation.",
      "startOffset" : 25,
      "endOffset" : 38
    }, {
      "referenceID" : 2,
      "context" : "To suppress this issue, we implemented 8-bit representation of each element proposed by Dettmers (2016). We used p2.",
      "startOffset" : 88,
      "endOffset" : 104
    } ],
    "year" : 2016,
    "abstractText" : "Deep learning is increasingly attracting attention for processing big data. Existing frameworks for deep learning must be set up to specialized computer systems. Gaining sufficient computing resources therefore entails high costs of deployment and maintenance. In this work, we implement a matrix library and deep learning framework that uses JavaScript. It can run on web browsers operating on ordinary personal computers and smartphones. Using JavaScript, deep learning can be accomplished in widely diverse environments without the necessity for software installation. Using GPGPU from WebCL framework, our framework can train large scale convolutional neural networks such as VGGNet and ResNet. In the experiments, we demonstrate their practicality by training VGGNet in a distributed manner using web browsers as the client.",
    "creator" : " TeX output 2016.12.28:1326"
  }
}