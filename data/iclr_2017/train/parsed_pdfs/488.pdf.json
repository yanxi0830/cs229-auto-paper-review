{
  "name" : "488.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Takeru Miyato", "Andrew M Dai", "Ian Goodfellow" ],
    "emails" : [ "takeru.miyato@gmail.com,", "adai@google.com,", "ian@openai.com" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "Adversarial examples are examples that are created by making small perturbations to the input designed to significantly increase the loss incurred by a machine learning model (Szegedy et al., 2014; Goodfellow et al., 2015). Several models, including state of the art convolutional neural networks, lack the ability to classify adversarial examples correctly, sometimes even when the adversarial perturbation is constrained to be so small that a human observer cannot perceive it. Adversarial training is the process of training a model to correctly classify both unmodified examples and adversarial examples. It improves not only robustness to adversarial examples, but also generalization performance for original examples. Adversarial training requires the use of labels when training models that use a supervised cost, because the label appears in the cost function that the adversarial perturbation is designed to maximize. Virtual adversarial training (Miyato et al., 2016) extends the idea of adversarial training to the semi-supervised regime and unlabeled examples. This is done by regularizing the model so that given an example, the model will produce the same output distribution as it produces on an adversarial perturbation of that example. Virtual adversarial training achieves good generalization performance for both supervised and semi-supervised learning tasks.\nPrevious work has primarily applied adversarial and virtual adversarial training to image classification tasks. In this work, we extend these techniques to text classification tasks and sequence models. Adversarial perturbations typically consist of making small modifications to very many real-valued inputs. For text classification, the input is discrete, and usually represented as a series of highdimensional one-hot vectors. Because the set of high-dimensional one-hot vectors does not admit infinitesimal perturbation, we define the perturbation on continuous word embeddings instead of discrete word inputs. Traditional adversarial and virtual adversarial training can be interpreted both as a regularization strategy (Szegedy et al., 2014; Goodfellow et al., 2015; Miyato et al., 2016) and as defense against an adversary who can supply malicious inputs (Szegedy et al., 2014; Goodfellow et al., 2015). Since the perturbed embedding does not map to any word and the adversary presumably does not have access to the word embedding layer, our proposed training strategy is no longer intended as a defense against an adversary. We thus propose this approach exclusively as a means of regularizing a text classifier by stabilizing the classification function.\n∗This work was done when the author was at Google Brain.\nWe show that our approach with neural language model unsupervised pretraining as proposed by Dai & Le (2015) achieves state of the art performance for multiple semi-supervised text classification tasks, including sentiment classification and topic classification. We emphasize that optimization of only one additional hyperparameter , the norm constraint limiting the size of the adversarial perturbations, achieved such state of the art performance. These results strongly encourage the use of our proposed method for other text classification tasks. We believe that text classification is an ideal setting for semi-supervised learning because there are abundant unlabeled corpora for semi-supervised learning algorithms to leverage. This work is the first work we know of to use adversarial and virtual adversarial training to improve a text or RNN model.\nWe also analyzed the trained models to qualitatively characterize the effect of adversarial and virtual adversarial training. We found that adversarial and virtual adversarial training improved word embeddings over the baseline methods."
    }, {
      "heading" : "2 MODEL",
      "text" : "We denote a sequence of T words as {w(t)|t = 1, . . . , T}, and a corresponding target as y. To transform a discrete word input to a continuous vector, we define the word embedding matrix V ∈ R(K+1)×D where K is the number of words in the vocabulary and each row vk corresponds to the word embedding of the i-th word. Note that the (K + 1)-th word embedding is used as an embedding of an ‘end of sequence (eos)’ token, veos. As a text classification model, we used a simple LSTM-based neural network model, shown in Figure 1a. At time step t, the input is the discrete word w(t), and the corresponding word embedding is v(t). We additionally tried the bidirectional\nLSTM architecture (Graves & Schmidhuber, 2005) since this is used by the current state of the art method (Johnson & Zhang, 2016b). For constructing the bidirectional LSTM model for text classification, we add an additional LSTM on the reversed sequence to the unidirectional LSTM model described in Figure 1. The model then predicts the label on the concatenated LSTM outputs of both ends of the sequence.\nIn adversarial and virtual adversarial training, we train the classifier to be robust to perturbations of the embeddings, shown in Figure 1b. These perturbations are described in detail in Section 3. At present, it is sufficient to understand that the perturbations are of bounded norm. The model could trivially learn to make the perturbations insignificant by learning embeddings with very large norm. To prevent this pathological solution, when we apply adversarial and virtual adversarial training to the model we defined above, we replace the embeddings vk with normalized embeddings v̄k, defined as:\nv̄k = vk − E(v)√\nVar(v) where E(v) = K∑ j=1 fjvj ,Var(v) = K∑ j=1 fj (vj − E(v))2 , (1)\nwhere fi is the frequency of the i-th word, calculated within all training examples."
    }, {
      "heading" : "3 ADVERSARIAL AND VIRTUAL ADVERSARIAL TRAINING",
      "text" : "Adversarial training (Goodfellow et al., 2015) is a novel regularization method for classifiers to improve robustness to small, approximately worst case perturbations. Let us denote x as the input\nand θ as the parameters of a classifier. When applied to a classifier, adversarial training adds the following term to the cost function:\n− log p(y | x+ radv;θ) where radv = arg min r,‖r‖≤ log p(y | x+ r; θ̂) (2)\nwhere r is a perturbation on the input and θ̂ is a constant set to the current parameters of a classifier. The use of the constant copy θ̂ rather than θ indicates that the backpropagation algorithm should not be used to propagate gradients through the adversarial example construction process. At each step of training, we identify the worst case perturbations radv against the current model p(y|x; θ̂) in Eq. (2), and train the model to be robust to such perturbations through minimizing Eq. (2) with respect to θ. However, we cannot calculate this value exactly in general, because exact minimization with respect to r is intractable for many interesting models such as neural networks. Goodfellow et al. (2015) proposed to approximate this value by linearizing log p(y | x; θ̂) around x. With a linear approximation and a L2 norm constraint in Eq.(2), the resulting adversarial perturbation is\nradv = − g/‖g‖2 where g = ∇x log p(y | x; θ̂). This perturbation can be easily computed using backpropagation in neural networks.\nVirtual adversarial training (Miyato et al., 2016) is a regularization method closely related to adversarial training. The additional cost introduced by virtual adversarial training is the following:\nKL[p(· | x; θ̂)||p(· | x+ rv-adv;θ)] (3) where rv-adv = arg max\nr,‖r‖≤ KL[p(· | x; θ̂)||p(· | x+ r; θ̂)] (4)\nwhere KL[p||q] denotes the KL divergence between distributions p and q. By minimizing Eq.(3), a classifier is trained to be smooth. This can be considered as making the classifier resistant to perturbations in directions to which it is most sensitive on the current model p(y|x; θ̂). Virtual adversarial loss Eq.(3) requires only the input x and does not require the actual label y while adversarial loss defined in Eq.(2) requires the label y. This makes it possible to apply virtual adversarial training to semi-supervised learning. Although we also in general cannot analytically calculate the virtual adversarial loss, Miyato et al. (2016) proposed to calculate the approximated Eq.(3) efficiently with backpropagation.\nAs described in Sec. 2, in our work, we apply the adversarial perturbation to word embeddings, rather than directly to the input. To define adversarial perturbation on the word embeddings, let us denote a concatenation of a sequence of (normalized) word embedding vectors [v̄(1), v̄(2), . . . , v̄(T )] as s, and the model conditional probability of y given s as p(y|s;θ) where θ are model parameters. Then we define the adversarial perturbation radv on s as:\nradv = − g/‖g‖2 where g = ∇s log p(y | s; θ̂). (5) To be robust to the adversarial perturbation defined in Eq.(5), we define the adversarial loss by\nLadv(θ) = − 1\nN N∑ n=1 log p(yn | sn + radv,n;θ) (6)\nwhere N is the number of labeled examples. In our experiments, adversarial training refers to minimizing the negative log-likelihood plus Ladv with stochastic gradient descent.\nIn virtual adversarial training on our text classification model, at each training step, we calculate the below approximated virtual adversarial perturbation:\nrv-adv = g/‖g‖2 where g = ∇s+dKL [ p(· | s; θ̂)||p(· | s+ d; θ̂) ] (7)\nwhere d is a TD-dimensional small random vector. This approximation corresponds to a 2nd-order Taylor expansion and a single iteration of the power method on Eq.(3) as in previous work (Miyato et al., 2016). Then the virtual adversarial loss is defined as:\nLv-adv(θ) = 1\nN ′ N ′∑ n′=1 KL [ p(· | sn′ ; θ̂)||p(· | sn′ + rv-adv,n′ ;θ) ] (8)\nwhere N ′ is the number of both labeled and unlabeled examples.\nSee Warde-Farley & Goodfellow (2016) for a recent review of adversarial training methods."
    }, {
      "heading" : "4 EXPERIMENTAL SETTINGS",
      "text" : "All experiments used TensorFlow (Abadi et al., 2016) on GPUs. Code will be available at https: //github.com/tensorflow/models/tree/master/adversarial_text.\nTo compare our method with other text classification methods, we tested on 5 different text datasets. We summarize information about each dataset in Table 1.\nIMDB (Maas et al., 2011)1 is a standard benchmark movie review dataset for sentiment classification. Elec (Johnson & Zhang, 2015b)2 3 is an Amazon electronic product review dataset. Rotten Tomatoes (Pang & Lee, 2005) consists of short snippets of movie reviews, for sentiment classification. The Rotten Tomatoes dataset does not come with separate test sets, thus we divided all examples randomly into 90% for the training set, and 10% for the test set. We repeated training and evaluation five times with different random seeds for the division. For the Rotten Tomatoes dataset, we also collected unlabeled examples using movie reviews from the Amazon Reviews dataset (McAuley & Leskovec, 2013) 4. DBpedia (Lehmann et al., 2015; Zhang et al., 2015) is a dataset of Wikipedia pages for category classification. Because the DBpedia dataset has no additional unlabeled examples, the results on DBpedia are for the supervised learning task only. RCV1 (Lewis et al., 2004) consists of news articles from the Reuters Corpus. For the RCV1 dataset, we followed previous works (Johnson & Zhang, 2015b) and we conducted a single topic classification task on the second level topics. We used the same division into training, test and unlabeled sets as Johnson & Zhang (2015b). Regarding pre-processing, we treated any punctuation as spaces. We converted all words to lower-case on the Rotten Tomatoes, DBpedia, and RCV1 datasets. We removed words which appear in only one document on all datasets. On RCV1, we also removed words in the English stop-words list provided by Lewis et al. (2004)5."
    }, {
      "heading" : "4.1 RECURRENT LANGUAGE MODEL PRE-TRAINING",
      "text" : "Following Dai & Le (2015), we initialized the word embedding matrix and LSTM weights with a pre-trained recurrent language model (Bengio et al., 2006; Mikolov et al., 2010) that was trained on both labeled and unlabeled examples. We used a unidirectional single-layer LSTM with 1024 hidden units. The word embedding dimension D was 256 on IMDB and 512 on the other datasets. We used a sampled softmax loss with 1024 candidate samples for training. For the optimization, we used the Adam optimizer (Kingma & Ba, 2015), with batch size 256, an initial learning rate of 0.001, and a 0.9999 learning rate exponential decay factor at each training step. We trained for 100,000 steps. We applied gradient clipping with norm set to 1.0 on all the parameters except word embeddings. To reduce runtime on GPU, we used truncated backpropagation up to 400 words from each end of the sequence. For regularization of the recurrent language model, we applied dropout (Srivastava et al., 2014) on the word embedding layer with 0.5 dropout rate.\n1http://ai.stanford.edu/~amaas/data/sentiment/ 2http://riejohnson.com/cnn_data.html 3There are some duplicated reviews in the original Elec dataset, and we used the dataset with removal of the duplicated reviews, provided by Johnson & Zhang (2015b), thus there are slightly fewer examples shown in Table 1 than the ones in previous works(Johnson & Zhang, 2015b; 2016b).\n4http://snap.stanford.edu/data/web-Amazon.html 5http://www.ai.mit.edu/projects/jmlr/papers/volume5/lewis04a/lyrl2004_rcv1v2_README.htm\nFor the bidirectional LSTM model, we used 512 hidden units LSTM for both the standard order and reversed order sequences, and we used 256 dimensional word embeddings which are shared with both of the LSTMs. The other hyperparameters are the same as for the unidirectional LSTM. We tested the bidirectional LSTM model on IMDB, Elec and RCV because there are relatively long sentences in the datasets.\nPretraining with a recurrent language model was very effective on classification performance on all the datasets we tested on and so our results in Section 5 are with this pretraining."
    }, {
      "heading" : "4.2 TRAINING CLASSIFICATION MODELS",
      "text" : "After pre-training, we trained the text classification model shown in Figure 1a with adversarial and virtual adversarial training as described in Section 3. Between the softmax layer for the target y and the final output of the LSTM, we added a hidden layer, which has dimension 30 on IMDB, Elec and Rotten Tomatoes, and 128 on DBpedia and RCV1. The activation function on the hidden layer was ReLU(Jarrett et al., 2009; Nair & Hinton, 2010; Glorot et al., 2011). For optimization, we again used the Adam optimizer, with 0.0005 initial learning rate 0.9998 exponential decay. Batch sizes are 64 on IMDB, Elec, RCV1, and 128 on DBpedia. For the Rotten Tomatoes dataset, for each step, we take a batch of size 64 for calculating the loss of the negative log-likelihood and adversarial training, and 512 for calculating the loss of virtual adversarial training. Also for Rotten Tomatoes, we used texts with lengths T less than 25 in the unlabeled dataset. We iterated 10,000 training steps on all datasets except IMDB and DBpedia, for which we used 15,000 and 20,000 training steps respectively. We again applied gradient clipping with the norm as 1.0 on all the parameters except the word embedding. We also used truncated backpropagation up to 400 words, and also generated the adversarial and virtual adversarial perturbation up to 400 words from each end of the sequence.\nWe found the bidirectional LSTM to converge more slowly, so we iterated for 15,000 training steps when training the bidirectional LSTM classification model.\nFor each dataset, we divided the original training set into training set and validation set, and we roughly optimized some hyperparameters shared with all of the methods; (model architecture, batchsize, training steps) with the validation performance of the base model with embedding dropout. For each method, we optimized two scalar hyperparameters with the validation set. These were the dropout rate on the embeddings and the norm constraint of adversarial and virtual adversarial training. Note that for adversarial and virtual adversarial training, we generate the perturbation after applying embedding dropout, which we found performed the best. We did not do early stopping with these methods. The method with only pretraining and embedding dropout is used as the baseline (referred to as Baseline in each table)."
    }, {
      "heading" : "5 RESULTS",
      "text" : ""
    }, {
      "heading" : "5.1 TEST PERFORMANCE ON IMDB DATASET AND MODEL ANALYSIS",
      "text" : "Figure 2 shows the learning curves on the IMDB test set with the baseline method (only embedding dropout and pretraining), adversarial training, and virtual adversarial training. We can see in Figure 2a that adversarial and virtual adversarial training achieved lower negative log likelihood than the baseline. Furthermore, virtual adversarial training, which can utilize unlabeled data, maintained this low negative log-likelihood while the other methods began to overfit later in training. Regarding adversarial and virtual adversarial loss in Figure 2b and 2c, we can see the same tendency as for negative log likelihood; virtual adversarial training was able to keep these values lower than other methods. Because adversarial training operates only on the labeled subset of the training data, it eventually overfits even the task of resisting adversarial perturbations.\nTable 2 shows the test performance on IMDB with each training method. ‘Adversarial + Virtual Adversarial’ means the method with both adversarial and virtual adversarial loss with the shared norm constraint . With only embedding dropout, our model achieved a 7.39% error rate. Adversarial and virtual adversarial training improved the performance relative to our baseline, and virtual adversarial training achieved performance on par with the state of the art, 5.91% error rate. This is despite the fact that the state of the art model requires training a bidirectional LSTM whereas our model only\nuses a unidirectional LSTM. We also show results with a bidirectional LSTM. Our bidirectional LSTM model has the same performance as a unidirectional LSTM with virtual adversarial training.\nA common misconception is that adversarial training is equivalent to training on noisy examples. Noise is actually a far weaker regularizer than adversarial perturbations because, in high dimensional input spaces, an average noise vector is approximately orthogonal to the cost gradient. Adversarial perturbations are explicitly chosen to consistently increase the cost. To demonstrate the superiority of adversarial training over the addition of noise, we include control experiments which replaced adversarial perturbations with random perturbations from a multivariate Gaussian with scaled norm, on each embedding in the sequence. In Table 2, ‘Random perturbation with labeled examples’ is the method in which we replace radv with random perturbations, and ‘Random perturbation with labeled and unlabeled examples’ is the method in which we replace rv-adv with random perturbations. Every adversarial training method outperformed every random perturbation method.\n‘good’ ‘bad’\nBaseline Random Adversarial Virtual Adversarial\nBaseline Random Adversarial Virtual Adversarial\n1 great great decent decent terrible terrible terrible terrible 2 decent decent great great awful awful awful awful 3 ×bad excellent nice nice horrible horrible horrible horrible 4 excellent nice fine fine ×good ×good poor poor 5 Good Good entertaining entertaining Bad poor BAD BAD 6 fine ×bad interesting interesting BAD BAD stupid stupid 7 nice fine Good Good poor Bad Bad Bad 8 interesting interesting excellent cool stupid stupid laughable laughable 9 solid entertaining solid enjoyable Horrible Horrible lame lame 10 entertaining solid cool excellent horrendous horrendous Horrible Horrible\nWe also investigated the 15 nearest neighbors to ‘great’ and its cosine distances with the trained embeddings. We saw that cosine distance on adversarial and virtual adversarial training (0.159–0.331) were much smaller than ones on the baseline and random perturbation method (0.244–0.399). The much weaker positive word ‘good’ also moved from the 3rd nearest neighbor to the 15th after virtual adversarial training."
    }, {
      "heading" : "5.2 TEST PERFORMANCE ON ELEC, RCV1 AND ROTTEN TOMATOES DATASET",
      "text" : "Table 4 shows the test performance on the Elec and RCV1 datasets. We can see our proposed method improved test performance on the baseline method and achieved state of the art performance on both datasets, even though the state of the art method uses a combination of CNN and bidirectional LSTM models. Our unidirectional LSTM model improves on the state of the art method and our method with a bidirectional LSTM further improves results on RCV1. The reason why the bidirectional models have better performance on the RCV1 dataset would be that, on the RCV1 dataset, there are some very long sentences compared with the other datasets, and the bidirectional model could better handle such long sentences with the shorter dependencies from the reverse order sentences.\nTable 5 shows test performance on the Rotten Tomatoes dataset. Adversarial training was able to improve over the baseline method, and with both adversarial and virtual adversarial cost, achieved almost the same performance as the current state of the art method. However the test performance of only virtual adversarial training was worse than the baseline. We speculate that this is because the Rotten Tomatoes dataset has very few labeled sentences and the labeled sentences are very short. In this case, the virtual adversarial loss on unlabeled examples overwhelmed the supervised loss, so the model prioritized being robust to perturbation rather than obtaining the correct answer."
    }, {
      "heading" : "5.3 PERFORMANCE ON THE DBPEDIA PURELY SUPERVISED CLASSIFICATION TASK",
      "text" : "Table 6 shows the test performance of each method on DBpedia. The ‘Random perturbation’ is the same method as the ‘Random perturbation with labeled examples’ explained in Section 5.1. Note that\nDBpedia has only labeled examples, as we explained in Section 4, so this task is purely supervised learning. We can see that the baseline method has already achieved nearly the current state of the art performance, and our proposed method improves from the baseline method."
    }, {
      "heading" : "6 RELATED WORKS",
      "text" : "Dropout (Srivastava et al., 2014) is a regularization method widely used for many domains including text. There are some previous works adding random noise to the input and hidden layer during training, to prevent overfitting (e.g. (Sietsma & Dow, 1991; Poole et al., 2013)). However, in our experiments and in previous works (Miyato et al., 2016), training with adversarial and virtual adversarial perturbations outperformed the method with random perturbations.\nFor semi-supervised learning with neural networks, a common approach, especially in the image domain, is to train a generative model whose latent features may be used as features for classification (e.g. (Hinton et al., 2006; Maaløe et al., 2016)). These models now achieve state of the art performance on the image domain. However, these methods require numerous additional hyperparameters with generative models, and the conditions under which the generative model will provide good supervised learning performance are poorly understood. By comparison, adversarial and virtual adversarial training requires only one hyperparameter, and has a straightforward interpretation as robust optimization.\nAdversarial and virtual adversarial training resemble some semi-supervised or transductive SVM approaches (Joachims, 1999; Chapelle & Zien, 2005; Collobert et al., 2006; Belkin et al., 2006) in that both families of methods push the decision boundary far from training examples (or in the case of transductive SVMs, test examples). However, adversarial training methods insist on margins on the input space , while SVMs insist on margins on the feature space defined by the kernel function. This property allows adversarial training methods to achieve the models with a more flexible function on the space where the margins are imposed. In our experiments (Table 2, 4) and Miyato et al. (2016), adversarial and virtual adversarial training achieve better performance than SVM based methods.\nThere has also been semi-supervised approaches applied to text classification with both CNNs and RNNs. These approaches utilize ‘view-embeddings’(Johnson & Zhang, 2015b; 2016b) which use the window around a word to generate its embedding. When these are used as a pretrained model for the classification model, they are found to improve generalization performance. These methods and our method are complementary as we showed that our method improved from a recurrent pretrained language model."
    }, {
      "heading" : "7 CONCLUSION",
      "text" : "In our experiments, we found that adversarial and virtual adversarial training have good regularization performance in sequence models on text classification tasks. On all datasets, our proposed method exceeded or was on par with the state of the art performance. We also found that adversarial and virtual adversarial training improved not only classification performance but also the quality of word embeddings. These results suggest that our proposed method is promising for other text domain tasks, such as machine translation(Sutskever et al., 2014), learning distributed representations of words or paragraphs(Mikolov et al., 2013; Le & Mikolov, 2014) and question answering tasks. Our approach could also be used for other general sequential tasks, such as for video or speech."
    }, {
      "heading" : "ACKNOWLEDGMENTS",
      "text" : "We thank the developers of Tensorflow. We thank the members of Google Brain team for their warm support and valuable comments. This work is partly supported by NEDO."
    } ],
    "references" : [ {
      "title" : "Tensorflow: Large-scale machine learning on heterogeneous distributed systems",
      "author" : [ "Martın Abadi", "Ashish Agarwal", "Paul Barham", "Eugene Brevdo", "Zhifeng Chen", "Craig Citro", "Greg S Corrado", "Andy Davis", "Jeffrey Dean", "Matthieu Devin" ],
      "venue" : "arXiv preprint arXiv:1603.04467,",
      "citeRegEx" : "Abadi et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Abadi et al\\.",
      "year" : 2016
    }, {
      "title" : "Manifold regularization: A geometric framework for learning from labeled and unlabeled examples",
      "author" : [ "Mikhail Belkin", "Partha Niyogi", "Vikas Sindhwani" ],
      "venue" : "The Journal of Machine Learning Research,",
      "citeRegEx" : "Belkin et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Belkin et al\\.",
      "year" : 2006
    }, {
      "title" : "Neural probabilistic language models",
      "author" : [ "Yoshua Bengio", "Holger Schwenk", "Jean-Sébastien Senécal", "Fréderic Morin", "Jean-Luc Gauvain" ],
      "venue" : "In Innovations in Machine Learning,",
      "citeRegEx" : "Bengio et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Bengio et al\\.",
      "year" : 2006
    }, {
      "title" : "Semi-supervised classification by low density separation",
      "author" : [ "Olivier Chapelle", "Alexander Zien" ],
      "venue" : "In AISTATS,",
      "citeRegEx" : "Chapelle and Zien.,? \\Q2005\\E",
      "shortCiteRegEx" : "Chapelle and Zien.",
      "year" : 2005
    }, {
      "title" : "Large scale transductive svms",
      "author" : [ "Ronan Collobert", "Fabian Sinz", "Jason Weston", "Léon Bottou" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "Collobert et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Collobert et al\\.",
      "year" : 2006
    }, {
      "title" : "Semi-supervised sequence learning",
      "author" : [ "Andrew M Dai", "Quoc V Le" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Dai and Le.,? \\Q2015\\E",
      "shortCiteRegEx" : "Dai and Le.",
      "year" : 2015
    }, {
      "title" : "Deep sparse rectifier neural networks",
      "author" : [ "Xavier Glorot", "Antoine Bordes", "Yoshua Bengio" ],
      "venue" : "In AISTATS,",
      "citeRegEx" : "Glorot et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Glorot et al\\.",
      "year" : 2011
    }, {
      "title" : "Explaining and harnessing adversarial examples",
      "author" : [ "Ian J Goodfellow", "Jonathon Shlens", "Christian Szegedy" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Goodfellow et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Goodfellow et al\\.",
      "year" : 2015
    }, {
      "title" : "Framewise phoneme classification with bidirectional lstm and other neural network architectures",
      "author" : [ "Alex Graves", "Jürgen Schmidhuber" ],
      "venue" : "Neural Networks,",
      "citeRegEx" : "Graves and Schmidhuber.,? \\Q2005\\E",
      "shortCiteRegEx" : "Graves and Schmidhuber.",
      "year" : 2005
    }, {
      "title" : "A fast learning algorithm for deep belief nets",
      "author" : [ "Geoffrey E. Hinton", "Simon Osindero", "Yee Whye Teh" ],
      "venue" : "Neural Computation,",
      "citeRegEx" : "Hinton et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Hinton et al\\.",
      "year" : 2006
    }, {
      "title" : "What is the best multi-stage architecture for object recognition",
      "author" : [ "Kevin Jarrett", "Koray Kavukcuoglu", "Marc’Aurelio Ranzato", "Yann LeCun" ],
      "venue" : "In ICCV,",
      "citeRegEx" : "Jarrett et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Jarrett et al\\.",
      "year" : 2009
    }, {
      "title" : "Transductive inference for text classification using support vector machines",
      "author" : [ "Thorsten Joachims" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Joachims.,? \\Q1999\\E",
      "shortCiteRegEx" : "Joachims.",
      "year" : 1999
    }, {
      "title" : "Effective use of word order for text categorization with convolutional neural networks",
      "author" : [ "Rie Johnson", "Tong Zhang" ],
      "venue" : "NAACL HLT,",
      "citeRegEx" : "Johnson and Zhang.,? \\Q2015\\E",
      "shortCiteRegEx" : "Johnson and Zhang.",
      "year" : 2015
    }, {
      "title" : "Semi-supervised convolutional neural networks for text categorization via region embedding",
      "author" : [ "Rie Johnson", "Tong Zhang" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Johnson and Zhang.,? \\Q2015\\E",
      "shortCiteRegEx" : "Johnson and Zhang.",
      "year" : 2015
    }, {
      "title" : "Convolutional neural networks for text categorization: Shallow word-level vs. deep character-level",
      "author" : [ "Rie Johnson", "Tong Zhang" ],
      "venue" : "arXiv preprint arXiv:1609.00718,",
      "citeRegEx" : "Johnson and Zhang.,? \\Q2016\\E",
      "shortCiteRegEx" : "Johnson and Zhang.",
      "year" : 2016
    }, {
      "title" : "Supervised and semi-supervised text categorization using LSTM for region embeddings",
      "author" : [ "Rie Johnson", "Tong Zhang" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Johnson and Zhang.,? \\Q2016\\E",
      "shortCiteRegEx" : "Johnson and Zhang.",
      "year" : 2016
    }, {
      "title" : "Convolutional neural networks for sentence classification",
      "author" : [ "Yoon Kim" ],
      "venue" : "In EMNLP,",
      "citeRegEx" : "Kim.,? \\Q2014\\E",
      "shortCiteRegEx" : "Kim.",
      "year" : 2014
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "Diederik Kingma", "Jimmy Ba" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Kingma and Ba.,? \\Q2015\\E",
      "shortCiteRegEx" : "Kingma and Ba.",
      "year" : 2015
    }, {
      "title" : "Distributed representations of sentences and documents",
      "author" : [ "Quoc V Le", "Tomas Mikolov" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Le and Mikolov.,? \\Q2014\\E",
      "shortCiteRegEx" : "Le and Mikolov.",
      "year" : 2014
    }, {
      "title" : "Dbpedia–a large-scale, multilingual knowledge base extracted from wikipedia",
      "author" : [ "Jens Lehmann", "Robert Isele", "Max Jakob", "Anja Jentzsch", "Dimitris Kontokostas", "Pablo N Mendes", "Sebastian Hellmann", "Mohamed Morsey", "Patrick van Kleef", "Sören Auer" ],
      "venue" : "Semantic Web,",
      "citeRegEx" : "Lehmann et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Lehmann et al\\.",
      "year" : 2015
    }, {
      "title" : "Rcv1: A new benchmark collection for text categorization research",
      "author" : [ "David D Lewis", "Yiming Yang", "Tony G Rose", "Fan Li" ],
      "venue" : "The Journal of Machine Learning Research,",
      "citeRegEx" : "Lewis et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Lewis et al\\.",
      "year" : 2004
    }, {
      "title" : "Auxiliary deep generative models",
      "author" : [ "Lars Maaløe", "Casper Kaae Sønderby", "Søren Kaae Sønderby", "Ole Winther" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Maaløe et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Maaløe et al\\.",
      "year" : 2016
    }, {
      "title" : "Learning word vectors for sentiment analysis",
      "author" : [ "Andrew L Maas", "Raymond E Daly", "Peter T Pham", "Dan Huang", "Andrew Y Ng", "Christopher Potts" ],
      "venue" : "In ACL: Human Language Technologies-Volume",
      "citeRegEx" : "Maas et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Maas et al\\.",
      "year" : 2011
    }, {
      "title" : "Hidden factors and hidden topics: understanding rating dimensions with review text",
      "author" : [ "Julian McAuley", "Jure Leskovec" ],
      "venue" : "In ACM conference on Recommender systems,",
      "citeRegEx" : "McAuley and Leskovec.,? \\Q2013\\E",
      "shortCiteRegEx" : "McAuley and Leskovec.",
      "year" : 2013
    }, {
      "title" : "Recurrent neural network based language model",
      "author" : [ "Tomas Mikolov", "Martin Karafiát", "Lukas Burget", "Jan Cernockỳ", "Sanjeev Khudanpur" ],
      "venue" : "In INTERSPEECH,",
      "citeRegEx" : "Mikolov et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2010
    }, {
      "title" : "Distributed representations of words and phrases and their compositionality",
      "author" : [ "Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Mikolov et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2013
    }, {
      "title" : "Distributional smoothing with virtual adversarial training",
      "author" : [ "Takeru Miyato", "Shin-ichi Maeda", "Masanori Koyama", "Ken Nakae", "Shin Ishii" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Miyato et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Miyato et al\\.",
      "year" : 2016
    }, {
      "title" : "Rectified linear units improve restricted boltzmann machines",
      "author" : [ "Vinod Nair", "Geoffrey E Hinton" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Nair and Hinton.,? \\Q2010\\E",
      "shortCiteRegEx" : "Nair and Hinton.",
      "year" : 2010
    }, {
      "title" : "Seeing stars: Exploiting class relationships for sentiment categorization with respect to rating scales",
      "author" : [ "Bo Pang", "Lillian Lee" ],
      "venue" : "In ACL,",
      "citeRegEx" : "Pang and Lee.,? \\Q2005\\E",
      "shortCiteRegEx" : "Pang and Lee.",
      "year" : 2005
    }, {
      "title" : "Analyzing noise in autoencoders and deep networks",
      "author" : [ "Ben Poole", "Jascha Sohl-Dickstein", "Surya Ganguli" ],
      "venue" : "In Deep Leanring Workshop on NIPS,",
      "citeRegEx" : "Poole et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Poole et al\\.",
      "year" : 2013
    }, {
      "title" : "Creating artificial neural networks that generalize",
      "author" : [ "J. Sietsma", "R. Dow" ],
      "venue" : "Neural Networks,",
      "citeRegEx" : "Sietsma and Dow.,? \\Q1991\\E",
      "shortCiteRegEx" : "Sietsma and Dow.",
      "year" : 1991
    }, {
      "title" : "Dropout: A simple way to prevent neural networks from overfitting",
      "author" : [ "Nitish Srivastava", "Geoffrey Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov" ],
      "venue" : "The Journal of Machine Learning Research,",
      "citeRegEx" : "Srivastava et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Srivastava et al\\.",
      "year" : 2014
    }, {
      "title" : "Sequence to sequence learning with neural networks",
      "author" : [ "Ilya Sutskever", "Oriol Vinyals", "Quoc V Le" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Sutskever et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Sutskever et al\\.",
      "year" : 2014
    }, {
      "title" : "Intriguing properties of neural networks",
      "author" : [ "Christian Szegedy", "Wojciech Zaremba", "Ilya Sutskever", "Joan Bruna", "Dumitru Erhan", "Ian Goodfellow", "Rob Fergus" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Szegedy et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Szegedy et al\\.",
      "year" : 2014
    }, {
      "title" : "Baselines and bigrams: Simple, good sentiment and topic classification",
      "author" : [ "Sida Wang", "Christopher D Manning" ],
      "venue" : "In ACL: Short Papers,",
      "citeRegEx" : "Wang and Manning.,? \\Q2012\\E",
      "shortCiteRegEx" : "Wang and Manning.",
      "year" : 2012
    }, {
      "title" : "Adversarial perturbations of deep neural networks",
      "author" : [ "David Warde-Farley", "Ian Goodfellow" ],
      "venue" : null,
      "citeRegEx" : "Warde.Farley and Goodfellow.,? \\Q2016\\E",
      "shortCiteRegEx" : "Warde.Farley and Goodfellow.",
      "year" : 2016
    }, {
      "title" : "Character-level convolutional networks for text classification",
      "author" : [ "Xiang Zhang", "Junbo Zhao", "Yann LeCun" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Zhang et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Zhang et al\\.",
      "year" : 2015
    }, {
      "title" : "Self-adaptive hierarchical sentence model",
      "author" : [ "Han Zhao", "Zhengdong Lu", "Pascal Poupart" ],
      "venue" : "In IJCAI,",
      "citeRegEx" : "Zhao et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Zhao et al\\.",
      "year" : 2015
    } ],
    "referenceMentions" : [ {
      "referenceID" : 33,
      "context" : "Adversarial examples are examples that are created by making small perturbations to the input designed to significantly increase the loss incurred by a machine learning model (Szegedy et al., 2014; Goodfellow et al., 2015).",
      "startOffset" : 175,
      "endOffset" : 222
    }, {
      "referenceID" : 7,
      "context" : "Adversarial examples are examples that are created by making small perturbations to the input designed to significantly increase the loss incurred by a machine learning model (Szegedy et al., 2014; Goodfellow et al., 2015).",
      "startOffset" : 175,
      "endOffset" : 222
    }, {
      "referenceID" : 26,
      "context" : "Virtual adversarial training (Miyato et al., 2016) extends the idea of adversarial training to the semi-supervised regime and unlabeled examples.",
      "startOffset" : 29,
      "endOffset" : 50
    }, {
      "referenceID" : 33,
      "context" : "Traditional adversarial and virtual adversarial training can be interpreted both as a regularization strategy (Szegedy et al., 2014; Goodfellow et al., 2015; Miyato et al., 2016) and as defense against an adversary who can supply malicious inputs (Szegedy et al.",
      "startOffset" : 110,
      "endOffset" : 178
    }, {
      "referenceID" : 7,
      "context" : "Traditional adversarial and virtual adversarial training can be interpreted both as a regularization strategy (Szegedy et al., 2014; Goodfellow et al., 2015; Miyato et al., 2016) and as defense against an adversary who can supply malicious inputs (Szegedy et al.",
      "startOffset" : 110,
      "endOffset" : 178
    }, {
      "referenceID" : 26,
      "context" : "Traditional adversarial and virtual adversarial training can be interpreted both as a regularization strategy (Szegedy et al., 2014; Goodfellow et al., 2015; Miyato et al., 2016) and as defense against an adversary who can supply malicious inputs (Szegedy et al.",
      "startOffset" : 110,
      "endOffset" : 178
    }, {
      "referenceID" : 33,
      "context" : ", 2016) and as defense against an adversary who can supply malicious inputs (Szegedy et al., 2014; Goodfellow et al., 2015).",
      "startOffset" : 76,
      "endOffset" : 123
    }, {
      "referenceID" : 7,
      "context" : ", 2016) and as defense against an adversary who can supply malicious inputs (Szegedy et al., 2014; Goodfellow et al., 2015).",
      "startOffset" : 76,
      "endOffset" : 123
    }, {
      "referenceID" : 7,
      "context" : "Adversarial training (Goodfellow et al., 2015) is a novel regularization method for classifiers to improve robustness to small, approximately worst case perturbations.",
      "startOffset" : 21,
      "endOffset" : 46
    }, {
      "referenceID" : 26,
      "context" : "Virtual adversarial training (Miyato et al., 2016) is a regularization method closely related to adversarial training.",
      "startOffset" : 29,
      "endOffset" : 50
    }, {
      "referenceID" : 7,
      "context" : "Goodfellow et al. (2015) proposed to approximate this value by linearizing log p(y | x; θ̂) around x.",
      "startOffset" : 0,
      "endOffset" : 25
    }, {
      "referenceID" : 26,
      "context" : "Although we also in general cannot analytically calculate the virtual adversarial loss, Miyato et al. (2016) proposed to calculate the approximated Eq.",
      "startOffset" : 88,
      "endOffset" : 109
    }, {
      "referenceID" : 26,
      "context" : "(3) as in previous work (Miyato et al., 2016).",
      "startOffset" : 24,
      "endOffset" : 45
    }, {
      "referenceID" : 0,
      "context" : "All experiments used TensorFlow (Abadi et al., 2016) on GPUs.",
      "startOffset" : 32,
      "endOffset" : 52
    }, {
      "referenceID" : 22,
      "context" : "IMDB (Maas et al., 2011)1 is a standard benchmark movie review dataset for sentiment classification.",
      "startOffset" : 5,
      "endOffset" : 24
    }, {
      "referenceID" : 19,
      "context" : "DBpedia (Lehmann et al., 2015; Zhang et al., 2015) is a dataset of Wikipedia pages for category classification.",
      "startOffset" : 8,
      "endOffset" : 50
    }, {
      "referenceID" : 36,
      "context" : "DBpedia (Lehmann et al., 2015; Zhang et al., 2015) is a dataset of Wikipedia pages for category classification.",
      "startOffset" : 8,
      "endOffset" : 50
    }, {
      "referenceID" : 20,
      "context" : "RCV1 (Lewis et al., 2004) consists of news articles from the Reuters Corpus.",
      "startOffset" : 5,
      "endOffset" : 25
    }, {
      "referenceID" : 0,
      "context" : "All experiments used TensorFlow (Abadi et al., 2016) on GPUs. Code will be available at https: //github.com/tensorflow/models/tree/master/adversarial_text. To compare our method with other text classification methods, we tested on 5 different text datasets. We summarize information about each dataset in Table 1. IMDB (Maas et al., 2011)1 is a standard benchmark movie review dataset for sentiment classification. Elec (Johnson & Zhang, 2015b)2 3 is an Amazon electronic product review dataset. Rotten Tomatoes (Pang & Lee, 2005) consists of short snippets of movie reviews, for sentiment classification. The Rotten Tomatoes dataset does not come with separate test sets, thus we divided all examples randomly into 90% for the training set, and 10% for the test set. We repeated training and evaluation five times with different random seeds for the division. For the Rotten Tomatoes dataset, we also collected unlabeled examples using movie reviews from the Amazon Reviews dataset (McAuley & Leskovec, 2013) 4. DBpedia (Lehmann et al., 2015; Zhang et al., 2015) is a dataset of Wikipedia pages for category classification. Because the DBpedia dataset has no additional unlabeled examples, the results on DBpedia are for the supervised learning task only. RCV1 (Lewis et al., 2004) consists of news articles from the Reuters Corpus. For the RCV1 dataset, we followed previous works (Johnson & Zhang, 2015b) and we conducted a single topic classification task on the second level topics. We used the same division into training, test and unlabeled sets as Johnson & Zhang (2015b). Regarding pre-processing, we treated any punctuation as spaces.",
      "startOffset" : 33,
      "endOffset" : 1580
    }, {
      "referenceID" : 0,
      "context" : "All experiments used TensorFlow (Abadi et al., 2016) on GPUs. Code will be available at https: //github.com/tensorflow/models/tree/master/adversarial_text. To compare our method with other text classification methods, we tested on 5 different text datasets. We summarize information about each dataset in Table 1. IMDB (Maas et al., 2011)1 is a standard benchmark movie review dataset for sentiment classification. Elec (Johnson & Zhang, 2015b)2 3 is an Amazon electronic product review dataset. Rotten Tomatoes (Pang & Lee, 2005) consists of short snippets of movie reviews, for sentiment classification. The Rotten Tomatoes dataset does not come with separate test sets, thus we divided all examples randomly into 90% for the training set, and 10% for the test set. We repeated training and evaluation five times with different random seeds for the division. For the Rotten Tomatoes dataset, we also collected unlabeled examples using movie reviews from the Amazon Reviews dataset (McAuley & Leskovec, 2013) 4. DBpedia (Lehmann et al., 2015; Zhang et al., 2015) is a dataset of Wikipedia pages for category classification. Because the DBpedia dataset has no additional unlabeled examples, the results on DBpedia are for the supervised learning task only. RCV1 (Lewis et al., 2004) consists of news articles from the Reuters Corpus. For the RCV1 dataset, we followed previous works (Johnson & Zhang, 2015b) and we conducted a single topic classification task on the second level topics. We used the same division into training, test and unlabeled sets as Johnson & Zhang (2015b). Regarding pre-processing, we treated any punctuation as spaces. We converted all words to lower-case on the Rotten Tomatoes, DBpedia, and RCV1 datasets. We removed words which appear in only one document on all datasets. On RCV1, we also removed words in the English stop-words list provided by Lewis et al. (2004)5.",
      "startOffset" : 33,
      "endOffset" : 1896
    }, {
      "referenceID" : 2,
      "context" : "Following Dai & Le (2015), we initialized the word embedding matrix and LSTM weights with a pre-trained recurrent language model (Bengio et al., 2006; Mikolov et al., 2010) that was trained on both labeled and unlabeled examples.",
      "startOffset" : 129,
      "endOffset" : 172
    }, {
      "referenceID" : 24,
      "context" : "Following Dai & Le (2015), we initialized the word embedding matrix and LSTM weights with a pre-trained recurrent language model (Bengio et al., 2006; Mikolov et al., 2010) that was trained on both labeled and unlabeled examples.",
      "startOffset" : 129,
      "endOffset" : 172
    }, {
      "referenceID" : 31,
      "context" : "For regularization of the recurrent language model, we applied dropout (Srivastava et al., 2014) on the word embedding layer with 0.",
      "startOffset" : 71,
      "endOffset" : 96
    }, {
      "referenceID" : 10,
      "context" : "The activation function on the hidden layer was ReLU(Jarrett et al., 2009; Nair & Hinton, 2010; Glorot et al., 2011).",
      "startOffset" : 52,
      "endOffset" : 116
    }, {
      "referenceID" : 6,
      "context" : "The activation function on the hidden layer was ReLU(Jarrett et al., 2009; Nair & Hinton, 2010; Glorot et al., 2011).",
      "startOffset" : 52,
      "endOffset" : 116
    }, {
      "referenceID" : 22,
      "context" : "02% Full+Unlabeled+BoW (Maas et al., 2011) 11.",
      "startOffset" : 23,
      "endOffset" : 42
    }, {
      "referenceID" : 16,
      "context" : "6% CNN*(Kim, 2014) 18.",
      "startOffset" : 7,
      "endOffset" : 18
    }, {
      "referenceID" : 37,
      "context" : "5% AdaSent*(Zhao et al., 2015) 16.",
      "startOffset" : 11,
      "endOffset" : 30
    }, {
      "referenceID" : 36,
      "context" : "76% Bag-of-words(Zhang et al., 2015) 3.",
      "startOffset" : 16,
      "endOffset" : 36
    }, {
      "referenceID" : 36,
      "context" : "57% Large-CNN(character-level) (Zhang et al., 2015) 1.",
      "startOffset" : 31,
      "endOffset" : 51
    }, {
      "referenceID" : 36,
      "context" : "41% N-grams TFIDF (Zhang et al., 2015) 1.",
      "startOffset" : 18,
      "endOffset" : 38
    }, {
      "referenceID" : 31,
      "context" : "Dropout (Srivastava et al., 2014) is a regularization method widely used for many domains including text.",
      "startOffset" : 8,
      "endOffset" : 33
    }, {
      "referenceID" : 29,
      "context" : "(Sietsma & Dow, 1991; Poole et al., 2013)).",
      "startOffset" : 0,
      "endOffset" : 41
    }, {
      "referenceID" : 26,
      "context" : "However, in our experiments and in previous works (Miyato et al., 2016), training with adversarial and virtual adversarial perturbations outperformed the method with random perturbations.",
      "startOffset" : 50,
      "endOffset" : 71
    }, {
      "referenceID" : 9,
      "context" : "(Hinton et al., 2006; Maaløe et al., 2016)).",
      "startOffset" : 0,
      "endOffset" : 42
    }, {
      "referenceID" : 21,
      "context" : "(Hinton et al., 2006; Maaløe et al., 2016)).",
      "startOffset" : 0,
      "endOffset" : 42
    }, {
      "referenceID" : 11,
      "context" : "Adversarial and virtual adversarial training resemble some semi-supervised or transductive SVM approaches (Joachims, 1999; Chapelle & Zien, 2005; Collobert et al., 2006; Belkin et al., 2006) in that both families of methods push the decision boundary far from training examples (or in the case of transductive SVMs, test examples).",
      "startOffset" : 106,
      "endOffset" : 190
    }, {
      "referenceID" : 4,
      "context" : "Adversarial and virtual adversarial training resemble some semi-supervised or transductive SVM approaches (Joachims, 1999; Chapelle & Zien, 2005; Collobert et al., 2006; Belkin et al., 2006) in that both families of methods push the decision boundary far from training examples (or in the case of transductive SVMs, test examples).",
      "startOffset" : 106,
      "endOffset" : 190
    }, {
      "referenceID" : 1,
      "context" : "Adversarial and virtual adversarial training resemble some semi-supervised or transductive SVM approaches (Joachims, 1999; Chapelle & Zien, 2005; Collobert et al., 2006; Belkin et al., 2006) in that both families of methods push the decision boundary far from training examples (or in the case of transductive SVMs, test examples).",
      "startOffset" : 106,
      "endOffset" : 190
    }, {
      "referenceID" : 1,
      "context" : ", 2006; Belkin et al., 2006) in that both families of methods push the decision boundary far from training examples (or in the case of transductive SVMs, test examples). However, adversarial training methods insist on margins on the input space , while SVMs insist on margins on the feature space defined by the kernel function. This property allows adversarial training methods to achieve the models with a more flexible function on the space where the margins are imposed. In our experiments (Table 2, 4) and Miyato et al. (2016), adversarial and virtual adversarial training achieve better performance than SVM based methods.",
      "startOffset" : 8,
      "endOffset" : 532
    }, {
      "referenceID" : 32,
      "context" : "These results suggest that our proposed method is promising for other text domain tasks, such as machine translation(Sutskever et al., 2014), learning distributed representations of words or paragraphs(Mikolov et al.",
      "startOffset" : 116,
      "endOffset" : 140
    }, {
      "referenceID" : 25,
      "context" : ", 2014), learning distributed representations of words or paragraphs(Mikolov et al., 2013; Le & Mikolov, 2014) and question answering tasks.",
      "startOffset" : 68,
      "endOffset" : 110
    } ],
    "year" : 2017,
    "abstractText" : "Adversarial training provides a means of regularizing supervised learning algorithms while virtual adversarial training is able to extend supervised learning algorithms to the semi-supervised setting. However, both methods require making small perturbations to numerous entries of the input vector, which is inappropriate for sparse high-dimensional inputs such as one-hot word representations. We extend adversarial and virtual adversarial training to the text domain by applying perturbations to the word embeddings in a recurrent neural network rather than to the original input itself. The proposed method achieves state of the art results on multiple benchmark semi-supervised and purely supervised tasks. We provide visualizations and analysis showing that the learned word embeddings have improved in quality and that while training, the model is less prone to overfitting.",
    "creator" : "LaTeX with hyperref package"
  }
}