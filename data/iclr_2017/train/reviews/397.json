{"conference": "ICLR 2017 conference submission", "title": "Variational Lossy Autoencoder", "abstract": "Representation learning seeks to expose certain aspects of observed data in a learned representation that's amenable to downstream tasks like classification.  For instance, a good representation for 2D images might be one that describes only global structure and discards information about detailed texture.  In this paper, we present a simple but principled method to learn such global representations by combining Variational Autoencoder (VAE) with neural autoregressive models such as RNN, MADE and PixelRNN/CNN.  Our proposed VAE model allows us to have control over what the global latent code can learn and , by designing the architecture accordingly, we can force the global latent code to discard irrelevant information such as texture in 2D images, and hence the code only ``autoencodes'' data in a lossy fashion. In addition, by leveraging autoregressive models as both prior distribution $p(z)$ and decoding distribution $p(x|z)$, we can greatly improve generative modeling performance of VAEs, achieving new state-of-the-art results on MNIST, OMNIGLOT and Caltech-101 as well as competitive results on CIFAR10.", "histories": [], "reviews": [{"IS_META_REVIEW": true, "comments": "This paper motivates the combination of autoregressive models with Variational Auto-Encoders and how to control the amount the amount of information stored in the latent code. The authors provide state-of-the-art results on MNIST, OMNIGLOT and Caltech-101.\nI find that the insights provided in the paper, e.g. with respect to the effect of having a more powerful decoder on learning the latent code, the bit-back coding, and the lossy decoding are well-written but are not novel.\nThe difference between an auto-regressive prior and the inverse auto-regressive posterior is new and interesting though.\nThe model presented combines the recent technique of PixelRNN/PixelCNN and Variational Auto-Encoders with Inverse Auto-Regressive Flows, which enables the authors to obtain state-of-the-art results on MNIST, OMNIGLOT and Caltech-101. Given the insights provided in the paper, the authors are also able to control the amount of information contained in the latent code to an extent.\nThis paper gather several insight on Variational Auto-Encoders scattered through several publications in a well-written way. From these, the authors are able to obtain state-of-the-art models on small complexity datasets. Larger scale experiments will be necessary."}, {"DATE": "06 Feb 2017", "TITLE": "ICLR committee final decision", "IS_META_REVIEW": false, "comments": "The reviewers agree that this is a well executed paper, and should be accepted and will make a positive contribution to the conference. In any final version please try to make a connection to the other paper at this conference with the same aims and execution.", "OTHER_KEYS": "ICLR 2017 pcs"}, {"DATE": "14 Jan 2017 (modified: 17 Jan 2017)", "TITLE": "Rebuttal & revision", "IS_META_REVIEW": false, "comments": "Dear Reviewers & AC:\n\nWe'd like to thank all the reviewers & commenters for their useful suggestions. By taking into account discussion so far, we have significantly updated the manuscript to address questions/concerns.\n\nMinor clarification questions have been answered in discussion below. Here we summarize the main concerns of reviewers and subsequently explain how our latest revision address these concerns:\n\n*** Larger scale experiments (Reviewer1, Reviewer3)\nThis is the main focus of the latest revision. In Section 4.3 of the latest revision, we have shown:\n1. VLAE has the current best density estimation performance on CIFAR10 among latent-code models. It also outperforms PixelCNN/PixelRNN [1] and is only second to PixelCNN++ [2].\n2. We show several different ways to encode different kinds of information into latent code to demonstrate that one can similarly control information placement on CIFAR10.\n\n*** \"the necessity of \"crippling\" the decoder ... has already been pointed out\" (Reviewer1)\nThanks for making the distinction clear. We have revised relevant text (last paragraph of introduction for example) to highlight that the analysis of \"why crippling is necessary\" is our main contribution as opposed to \"pointing out it's necessary\" [3].\n\n*** \"However, they never actually showed how a VAE without AF prior but that has a PixelCNN decoder performs. What would be the impact on the latent code is no AF prior is used?\" (Reviewer2)\nThanks for your suggestion and we have added related experiments in Appendix. C (edit: should be Appendix. D) of the latest revision of the paper. These experiments show removing AF prior will result in worse performance and make the latent code carry less information.\n\nNext we briefly summarize additional contributions in the latest revision.\n\nIn the initial revision, we hypothesized that by improving VAE training procedure, VLAE's modelling performance can be improved. In initial experiments, we used the \u201cfree-bits\u201d technique [5] and this turned out to create optimization challenges. In the latest revision, we proposed a new technique \"soft free-bits\" (described in Appendix.C) which has resulted in more robust optimization. \n\nWe also investigated replacing ResNet VAEs [4,5] with DenseNet [6] VAEs and this change reduces overfitting. \u201cSoft free-bits\u201d and DenseNet VAEs are novel changes and enable VLAE models to outperform previous latent-code models like ResNet VAE w/ IAF [5] as well as competitive autoregressive density estimators like PixelRNN [1] on CIFAR10. These techniques are not unique to VLAE and we suspect they will also be useful to other types of VAEs.\n\nWe also have added one more way to separate information -- by restricting the PixelCNN decoder to condition only on grayscale image, a lossy latent code can be forced to learn color information.\n\nWe believe we have addressed reviewers' concerns and overall strengthened this submission. We hope reviewers can take a look at the latest revision and possibly adjust rating in light of new evidence.\n\nWe are happy to answer any additional questions!\n\n---------------------------------------------------------\n\nPS: We also plan to include experiments with 64x64 datasets but due to time constraints we haven't been able to finish them in time for inclusion in the current revision. We will include them in a later version and release all code when experiments are finished.\n\n[1]: van den Oord, Aaron, Nal Kalchbrenner, and Koray Kavukcuoglu. \"Pixel Recurrent Neural Networks.\" arXiv preprint arXiv:1601.06759 (2016).\n[2]: ", "OTHER_KEYS": "Xi Chen"}, {"TITLE": "Important contribution to the ongoing research on rich VAE posteriors. Timely demo of the equivalence of certain rich posteriors to rich priors. Disputable theoretical suppositions but they are a tiny hole in a strong armor!", "OTHER_KEYS": "Galin Georgiev", "comments": "The AR prior and its equivalent - the inverse AR posterior - is one of the more elegant ways to improve the unfortunately poor generative qualities of VAE-s. It is only an incremental but important step. Incremental, because, judging by the lack of, say, CIFAR10 pictures of the VLAE in its \"creative\" regime ( i.e., when sampling from prior), it will not answer many of the questions hanging over. We hope to see the paper accepted: in relative terms, the paper shines in the landscape of the other papers which are rich on engineering hacks but lacking on theoretical insights.\n\nSome disagreements with the theoretical suppositions in the paper:\n\ni) The VAE-s posterior converges to the prior faster than we would like because the gradients of the \"generative\" error (the KL divergence of prior and posterior) w.r.t. mu & sigma are simple, inf differentiable functions and their magnitude far exceeds the magnitude of the resp. gradients of the reconstruction error. Especially when more \"hairy\" decoders like pixelCNN are used. We always considered this obvious and certainly not worthy of one page of CS mumbo-jumbo to explain. Dumbing-down the decoder via variations of dropout or \"complexifying\" the sampler as in here, or slapping the generative error with a \"DeepMind\" constant (beta_VAE), are the natural band-aids, but seem to fail in the \"creative\" regime, for real-life sets like CIFAR10 or more complex ones. Other conceptual solutions are needed, some are discussed in [2].\n\nii) The claim near the end of section 2.2 that \"the extra coding cost a.k.a. variational error will exist and will not be negligible\" is a speculation, which, in our empirical experience at least, is incorrect. The variational error is quantifiable for the Gibbs/exponential family of priors/posteriors, as described in [1], section 3.8, and as Tim Salimans knows from his own previous work. In the case of CIFAR10 for example, the variational error is negligible, even for simple sampling families like Gaussian, Laplacian, etc. Moreover, in hindsight, using the closed-form for generative error (the KL divergence of prior and posterior) in the pioneering VAE papers, was likely a mistake inherited by the unnecessary Bayseanism which inspired them (beautiful but a mistake nonetheless): The combo of generative and variational error should together be approximated by the same naive Monte Carlo used for the reconstruction error (easily follows from equation (3.13) in [1]) i.e. arithmetic average over observations.\n\nOn the lighter side, guys, please do not recycle ridiculous terms like \"optimizationally challenged\", as in section 2.2! The English language has recently acquired \"mentally-challenged\", \"emotionally-challenged\", etc, and now political correctness has sadly found its way to machines?\n\n[1] ", "IS_META_REVIEW": false, "RECOMMENDATION": 9, "DATE": "05 Jan 2017 (modified: 07 Jan 2017)", "REVIEWER_CONFIDENCE": 4}, {"DATE": "20 Dec 2016", "TITLE": "Very nice work with the bits-back interpretation, autoregressive priors might need work on presentation", "IS_META_REVIEW": false, "comments": "I greatly enjoyed the bits-back interpretation and the implied design principles for lossy coding.\n\nThe second half of the contribution with autoregressive flow priors seems less appealing. If I understood it correctly, it seems you are effectively performing empirical Bayes estimation over a very complex part of a model instead of more properly Bayesian variational inference. Instead of blindly taking this as an improvement, I would recommend you to also discuss the costs and potential drawbacks of this approach. Being open about what the approach really does would also seem useful.", "OTHER_KEYS": "Antti Honkela"}, {"OTHER_KEYS": "ICLR 2017 conference AnonReviewer2", "TITLE": "Having control over the kind of information learned is interesting and would be useful in several applications", "comments": "This paper proposes a Variational Autoencoder model that can discard information found irrelevant, in order to learn interesting global representations of the data. This can be seen as a lossy compression algorithm, hence the name Variational Lossy Autoencoder. To achieve such model, the authors combine VAEs with neural autoregressive models resulting in a model that has both a latent variable structure and a powerful recurrence structure.\n\nThe authors first present an insightful Bits-Back interpretation of VAE to show when and how the latent code is ignored. As it was also mentioned in the literature, they say that the autoregressive part of the model ends up explaining all structure in the data, while the latent variables are not used. Then, they propose two complementary approaches to force the latent variables to be used by the decoder. The first one is to make sure the autoregressive decoder only uses small local receptive field so the model has to use the latent code to learn long-range dependency. The second is to parametrize the prior distribution over the latent code with an autoregressive model.\n\nThey also report new state-of-the-art results on binarized MNIST (both dynamical and statically binarization), OMNIGLOT and Caltech-101 Silhouettes.\n\nReview:\nThe bits-Back interpretation of VAE is a nice contribution to the community. Having novel interpretations for a model helps to better understand it and sometimes, like in this paper, highlights how it can be improved.\n\nHaving a fine-grained control over the kind of information that gets included in the learned representation can be useful for a lot of applications. For instance, in image retrieval, such learned representation could be used to retrieve objects that have similar shape no matter what texture they have.\n\nHowever, the authors say they propose two complementary classes of improvements to VAE, that is the lossy code via explicit information placement (Section 3.1) and learning the prior with autoregressive flow (Section 3.2). However, they never actually showed how a VAE without AF prior but that has a PixelCNN decoder performs. What would be the impact on the latent code is no AF prior is used?\n\nAlso, it is not clear if WindowAround(i) represents only a subset of x_{", "SOUNDNESS_CORRECTNESS": 5, "ORIGINALITY": 1, "IS_ANNOTATED": true, "IS_META_REVIEW": false, "RECOMMENDATION": 7, "DATE": "17 Dec 2016 (modified: 19 Jan 2017)", "CLARITY": 5, "REVIEWER_CONFIDENCE": 4}, {"IMPACT": 4, "OTHER_KEYS": "ICLR 2017 conference AnonReviewer3", "TITLE": "Interesting ideas, weak evaluation.", "comments": "This paper introduces the notion of a \"variational lossy autoencoder\", where a powerful autoregressive conditional distribution on the inputs x given the latent code z is crippled in a way that forces it to use z in a meaningful way. Its three main contributions are:\n\n(1) It gives an interesting information-theoretical insight as to why VAE-type models don't tend to take advantage of their latent representation when the conditional distribution on x given z is powerful enough.\n\n(2) It shows that this insight can be used to efficiently train VAEs with powerful autoregressive conditional distributions such that they make use of the latent code.\n\n(3) It presents a powerful way to parametrize the prior in the form of an autoregressive flow transformation which is equivalent to using an inverse autoregressive flow transformation on the approximate posterior.\n\nBy itself, I think the information-theoretical explanation of why VAEs do not use their latent code when the conditional distribution on x given z is powerful enough constitutes an excellent addition to our understanding of VAE-related approaches.\n\nHowever, the way this intuition is empirically evaluated is a bit weak. The \"crippling\" method used feels hand-crafted and very task-dependent, and the qualitative evaluation of the \"lossyness\" of the learned representation is carried out on three datasets (MNIST, OMNIGLOT and Caltech-101 Silhouettes) which feature black-and-white images with little-to-no texture. Figures 1a and 2a do show that reconstructions discard low-level information, as observed in the slight variations in strokes between the input and the reconstruction, but such an analysis would have been more compelling with more complex image datasets. Have the authors tried applying VLAE to such datasets?\n\nI think the Caltech101 Silhouettes benchmark should be treated with caution, as no comparison is made against other competitive approaches like IAF VAE, PixelRNN and Conv DRAW. This means that VLAE significantly outperforms the state-of-the-art in only one of the four settings examined.\n\nA question which is very relevant to this paper is \"Does a latent representation on top of an autoregressive model help improve the density modeling performance?\" The paper touches this question, but very briefly: the only setting in which VLAE is compared against recent autoregressive approaches shows that it wins against PixelRNN by a small margin.\n\nThe proposal to transform the latent code with an autoregressive flow which is equivalent to parametrizing the approximate posterior with an inverse autoregressive flow transformation is also interesting. There is, however, one important distinction to be made between the two approaches: in the former, the prior over the latent code can potentially be very complex whereas in the latter the prior is limited to be a simple, factorized distribution.\n\nIt is not clear to me that having a very powerful prior is necessarily a good thing from a representation learning point of view: oftentimes we are interested in learning a representation of the data distribution which is untangled and composed of roughly independent factors of variation. The degree to which this can be achieved using something as simple as a spherical gaussian prior is up for discussion, but finding a good balance between the ability of the prior to fit the data and its usefulness as a high-level representation certainly warrants some thought. I would be interested in hearing the authors' opinion on this.\n\nOverall, the paper introduces interesting ideas despite the flaws outlined above, but weaknesses in the empirical evaluation prevent me from recommending its acceptance.\n\nUPDATE: The rating has been revised to a 7 following the authors' reply.", "SOUNDNESS_CORRECTNESS": 4, "ORIGINALITY": 3, "IS_ANNOTATED": true, "IS_META_REVIEW": false, "RECOMMENDATION": 7, "DATE": "16 Dec 2016 (modified: 19 Jan 2017)", "CLARITY": 4, "REVIEWER_CONFIDENCE": 4}, {"TITLE": "No Title", "MEANINGFUL_COMPARISON": 4, "OTHER_KEYS": "ICLR 2017 conference AnonReviewer1", "comments": "This paper motivates the combination of autoregressive models with Variational Auto-Encoders and how to control the amount the amount of information stored in the latent code. The authors provide state-of-the-art results on MNIST, OMNIGLOT and Caltech-101.\nI find that the insights provided in the paper, e.g. with respect to the effect of having a more powerful decoder on learning the latent code, the bit-back coding, and the lossy decoding are well-written but are not novel.\nThe difference between an auto-regressive prior and the inverse auto-regressive posterior is new and interesting though.\nThe model presented combines the recent technique of PixelRNN/PixelCNN and Variational Auto-Encoders with Inverse Auto-Regressive Flows, which enables the authors to obtain state-of-the-art results on MNIST, OMNIGLOT and Caltech-101. Given the insights provided in the paper, the authors are also able to control the amount of information contained in the latent code to an extent.\nThis paper gather several insight on Variational Auto-Encoders scattered through several publications in a well-written way. From these, the authors are able to obtain state-of-the-art models on small complexity datasets. Larger scale experiments will be necessary.", "SOUNDNESS_CORRECTNESS": 5, "IS_ANNOTATED": true, "IS_META_REVIEW": false, "RECOMMENDATION": 6, "DATE": "16 Dec 2016 (modified: 17 Jan 2017)", "CLARITY": 5, "REVIEWER_CONFIDENCE": 4}, {"DATE": "13 Dec 2016", "TITLE": "lossy autoencoder", "IS_META_REVIEW": false, "comments": "Hi, I have a few questions:\n\n1) The main argument of the paper is using autoregressive decoder with in variational AE leads to the problem of code part is completely is ignored because the decoder is too powerful. The solution is to depend on a small window instead of all previous data. However, the experiment section does not support this claim: Did you try combining PixelRNN with VAE and find the code has no information (KL near 0)?\n(Although this has been verified in text, text and image are very different and the finding in text does not generalize to image.)\n\nEven for PixelCNN, although it uses a small convolution window, it has a very deep architecture, the x_i may end up depending on all previous x_{", "OTHER_KEYS": "(anonymous)"}, {"DATE": "12 Dec 2016", "TITLE": "\"Optimization challenges\"", "IS_META_REVIEW": false, "comments": "Hi, I'm one of the authors of Bowman et al. 2016, and I wanted to point out that while our description of the difficulties in training RNN type models with global latent variables occurs in a section called \"Optimization Challenges,\" we make similar observations as you do in your paper, namely that having a very powerful decoder model like an RNN can result in the model ignoring the global latent variable even at the optimum (perhaps the section should have more generally been called \"Learning Challenges\"). \n\nSpecifically, we found that without using \"word dropout\" in the decoder, which effectively weakens the decoder model and forces the global variable to encode more information, we would not learn a useful latent variable. In our Figure 3, we show the results of using different amounts of word dropout and how the proportional split between the global latent code KL and the p(x|z) likelihood changes, even though the total lower bound always gets worse. This indicates that the word dropout is not simply optimizing the same model better, but is giving us a tradeoff between global and local coding.\n\nWe also note that the factorized p(x|z) used in the independent pixel decoding models of previous work forces the model to use the latent variable to achieve good likelihoods, as you mention in Section 2.2. In fact, because a word-dropout decoder models some things as (randomly) conditionally independent, this is sort of a semi-factored decoding distribution.", "OTHER_KEYS": "Luke Vilnis"}, {"OTHER_KEYS": "ICLR 2017 conference AnonReviewer2", "TITLE": "Latent code dimensions and interpretability", "comments": "", "SOUNDNESS_CORRECTNESS": 5, "ORIGINALITY": 1, "IS_ANNOTATED": true, "IS_META_REVIEW": false, "DATE": "01 Dec 2016", "CLARITY": 5}, {"IMPACT": 4, "OTHER_KEYS": "ICLR 2017 conference AnonReviewer3", "TITLE": "Table 1 question", "comments": "", "SOUNDNESS_CORRECTNESS": 4, "ORIGINALITY": 3, "IS_ANNOTATED": true, "IS_META_REVIEW": false, "DATE": "01 Dec 2016", "CLARITY": 4}, {"DATE": "11 Nov 2016", "TITLE": "A comment on table 1 in the paper", "IS_META_REVIEW": false, "comments": "Dear authors,\n\nI liked the paper very much and particularly enjoyed the section involving Bits-Back interpretation of VAE.\n\nI just wanted to point out a very minor stuff with your paper. It appears as if you have placed results for dynamically binarized MNIST for \"Discrete VAE\" model in the table for statically binarized MNIST e.g. table 1 in your paper.\n\nThanks,\nKundan", "OTHER_KEYS": "Kundan Kumar"}, {"IS_META_REVIEW": true, "comments": "This paper motivates the combination of autoregressive models with Variational Auto-Encoders and how to control the amount the amount of information stored in the latent code. The authors provide state-of-the-art results on MNIST, OMNIGLOT and Caltech-101.\nI find that the insights provided in the paper, e.g. with respect to the effect of having a more powerful decoder on learning the latent code, the bit-back coding, and the lossy decoding are well-written but are not novel.\nThe difference between an auto-regressive prior and the inverse auto-regressive posterior is new and interesting though.\nThe model presented combines the recent technique of PixelRNN/PixelCNN and Variational Auto-Encoders with Inverse Auto-Regressive Flows, which enables the authors to obtain state-of-the-art results on MNIST, OMNIGLOT and Caltech-101. Given the insights provided in the paper, the authors are also able to control the amount of information contained in the latent code to an extent.\nThis paper gather several insight on Variational Auto-Encoders scattered through several publications in a well-written way. From these, the authors are able to obtain state-of-the-art models on small complexity datasets. Larger scale experiments will be necessary."}, {"DATE": "06 Feb 2017", "TITLE": "ICLR committee final decision", "IS_META_REVIEW": false, "comments": "The reviewers agree that this is a well executed paper, and should be accepted and will make a positive contribution to the conference. In any final version please try to make a connection to the other paper at this conference with the same aims and execution.", "OTHER_KEYS": "ICLR 2017 pcs"}, {"DATE": "14 Jan 2017 (modified: 17 Jan 2017)", "TITLE": "Rebuttal & revision", "IS_META_REVIEW": false, "comments": "Dear Reviewers & AC:\n\nWe'd like to thank all the reviewers & commenters for their useful suggestions. By taking into account discussion so far, we have significantly updated the manuscript to address questions/concerns.\n\nMinor clarification questions have been answered in discussion below. Here we summarize the main concerns of reviewers and subsequently explain how our latest revision address these concerns:\n\n*** Larger scale experiments (Reviewer1, Reviewer3)\nThis is the main focus of the latest revision. In Section 4.3 of the latest revision, we have shown:\n1. VLAE has the current best density estimation performance on CIFAR10 among latent-code models. It also outperforms PixelCNN/PixelRNN [1] and is only second to PixelCNN++ [2].\n2. We show several different ways to encode different kinds of information into latent code to demonstrate that one can similarly control information placement on CIFAR10.\n\n*** \"the necessity of \"crippling\" the decoder ... has already been pointed out\" (Reviewer1)\nThanks for making the distinction clear. We have revised relevant text (last paragraph of introduction for example) to highlight that the analysis of \"why crippling is necessary\" is our main contribution as opposed to \"pointing out it's necessary\" [3].\n\n*** \"However, they never actually showed how a VAE without AF prior but that has a PixelCNN decoder performs. What would be the impact on the latent code is no AF prior is used?\" (Reviewer2)\nThanks for your suggestion and we have added related experiments in Appendix. C (edit: should be Appendix. D) of the latest revision of the paper. These experiments show removing AF prior will result in worse performance and make the latent code carry less information.\n\nNext we briefly summarize additional contributions in the latest revision.\n\nIn the initial revision, we hypothesized that by improving VAE training procedure, VLAE's modelling performance can be improved. In initial experiments, we used the \u201cfree-bits\u201d technique [5] and this turned out to create optimization challenges. In the latest revision, we proposed a new technique \"soft free-bits\" (described in Appendix.C) which has resulted in more robust optimization. \n\nWe also investigated replacing ResNet VAEs [4,5] with DenseNet [6] VAEs and this change reduces overfitting. \u201cSoft free-bits\u201d and DenseNet VAEs are novel changes and enable VLAE models to outperform previous latent-code models like ResNet VAE w/ IAF [5] as well as competitive autoregressive density estimators like PixelRNN [1] on CIFAR10. These techniques are not unique to VLAE and we suspect they will also be useful to other types of VAEs.\n\nWe also have added one more way to separate information -- by restricting the PixelCNN decoder to condition only on grayscale image, a lossy latent code can be forced to learn color information.\n\nWe believe we have addressed reviewers' concerns and overall strengthened this submission. We hope reviewers can take a look at the latest revision and possibly adjust rating in light of new evidence.\n\nWe are happy to answer any additional questions!\n\n---------------------------------------------------------\n\nPS: We also plan to include experiments with 64x64 datasets but due to time constraints we haven't been able to finish them in time for inclusion in the current revision. We will include them in a later version and release all code when experiments are finished.\n\n[1]: van den Oord, Aaron, Nal Kalchbrenner, and Koray Kavukcuoglu. \"Pixel Recurrent Neural Networks.\" arXiv preprint arXiv:1601.06759 (2016).\n[2]: ", "OTHER_KEYS": "Xi Chen"}, {"TITLE": "Important contribution to the ongoing research on rich VAE posteriors. Timely demo of the equivalence of certain rich posteriors to rich priors. Disputable theoretical suppositions but they are a tiny hole in a strong armor!", "OTHER_KEYS": "Galin Georgiev", "comments": "The AR prior and its equivalent - the inverse AR posterior - is one of the more elegant ways to improve the unfortunately poor generative qualities of VAE-s. It is only an incremental but important step. Incremental, because, judging by the lack of, say, CIFAR10 pictures of the VLAE in its \"creative\" regime ( i.e., when sampling from prior), it will not answer many of the questions hanging over. We hope to see the paper accepted: in relative terms, the paper shines in the landscape of the other papers which are rich on engineering hacks but lacking on theoretical insights.\n\nSome disagreements with the theoretical suppositions in the paper:\n\ni) The VAE-s posterior converges to the prior faster than we would like because the gradients of the \"generative\" error (the KL divergence of prior and posterior) w.r.t. mu & sigma are simple, inf differentiable functions and their magnitude far exceeds the magnitude of the resp. gradients of the reconstruction error. Especially when more \"hairy\" decoders like pixelCNN are used. We always considered this obvious and certainly not worthy of one page of CS mumbo-jumbo to explain. Dumbing-down the decoder via variations of dropout or \"complexifying\" the sampler as in here, or slapping the generative error with a \"DeepMind\" constant (beta_VAE), are the natural band-aids, but seem to fail in the \"creative\" regime, for real-life sets like CIFAR10 or more complex ones. Other conceptual solutions are needed, some are discussed in [2].\n\nii) The claim near the end of section 2.2 that \"the extra coding cost a.k.a. variational error will exist and will not be negligible\" is a speculation, which, in our empirical experience at least, is incorrect. The variational error is quantifiable for the Gibbs/exponential family of priors/posteriors, as described in [1], section 3.8, and as Tim Salimans knows from his own previous work. In the case of CIFAR10 for example, the variational error is negligible, even for simple sampling families like Gaussian, Laplacian, etc. Moreover, in hindsight, using the closed-form for generative error (the KL divergence of prior and posterior) in the pioneering VAE papers, was likely a mistake inherited by the unnecessary Bayseanism which inspired them (beautiful but a mistake nonetheless): The combo of generative and variational error should together be approximated by the same naive Monte Carlo used for the reconstruction error (easily follows from equation (3.13) in [1]) i.e. arithmetic average over observations.\n\nOn the lighter side, guys, please do not recycle ridiculous terms like \"optimizationally challenged\", as in section 2.2! The English language has recently acquired \"mentally-challenged\", \"emotionally-challenged\", etc, and now political correctness has sadly found its way to machines?\n\n[1] ", "IS_META_REVIEW": false, "RECOMMENDATION": 9, "DATE": "05 Jan 2017 (modified: 07 Jan 2017)", "REVIEWER_CONFIDENCE": 4}, {"DATE": "20 Dec 2016", "TITLE": "Very nice work with the bits-back interpretation, autoregressive priors might need work on presentation", "IS_META_REVIEW": false, "comments": "I greatly enjoyed the bits-back interpretation and the implied design principles for lossy coding.\n\nThe second half of the contribution with autoregressive flow priors seems less appealing. If I understood it correctly, it seems you are effectively performing empirical Bayes estimation over a very complex part of a model instead of more properly Bayesian variational inference. Instead of blindly taking this as an improvement, I would recommend you to also discuss the costs and potential drawbacks of this approach. Being open about what the approach really does would also seem useful.", "OTHER_KEYS": "Antti Honkela"}, {"OTHER_KEYS": "ICLR 2017 conference AnonReviewer2", "TITLE": "Having control over the kind of information learned is interesting and would be useful in several applications", "comments": "This paper proposes a Variational Autoencoder model that can discard information found irrelevant, in order to learn interesting global representations of the data. This can be seen as a lossy compression algorithm, hence the name Variational Lossy Autoencoder. To achieve such model, the authors combine VAEs with neural autoregressive models resulting in a model that has both a latent variable structure and a powerful recurrence structure.\n\nThe authors first present an insightful Bits-Back interpretation of VAE to show when and how the latent code is ignored. As it was also mentioned in the literature, they say that the autoregressive part of the model ends up explaining all structure in the data, while the latent variables are not used. Then, they propose two complementary approaches to force the latent variables to be used by the decoder. The first one is to make sure the autoregressive decoder only uses small local receptive field so the model has to use the latent code to learn long-range dependency. The second is to parametrize the prior distribution over the latent code with an autoregressive model.\n\nThey also report new state-of-the-art results on binarized MNIST (both dynamical and statically binarization), OMNIGLOT and Caltech-101 Silhouettes.\n\nReview:\nThe bits-Back interpretation of VAE is a nice contribution to the community. Having novel interpretations for a model helps to better understand it and sometimes, like in this paper, highlights how it can be improved.\n\nHaving a fine-grained control over the kind of information that gets included in the learned representation can be useful for a lot of applications. For instance, in image retrieval, such learned representation could be used to retrieve objects that have similar shape no matter what texture they have.\n\nHowever, the authors say they propose two complementary classes of improvements to VAE, that is the lossy code via explicit information placement (Section 3.1) and learning the prior with autoregressive flow (Section 3.2). However, they never actually showed how a VAE without AF prior but that has a PixelCNN decoder performs. What would be the impact on the latent code is no AF prior is used?\n\nAlso, it is not clear if WindowAround(i) represents only a subset of x_{", "SOUNDNESS_CORRECTNESS": 5, "ORIGINALITY": 1, "IS_ANNOTATED": true, "IS_META_REVIEW": false, "RECOMMENDATION": 7, "DATE": "17 Dec 2016 (modified: 19 Jan 2017)", "CLARITY": 5, "REVIEWER_CONFIDENCE": 4}, {"IMPACT": 4, "OTHER_KEYS": "ICLR 2017 conference AnonReviewer3", "TITLE": "Interesting ideas, weak evaluation.", "comments": "This paper introduces the notion of a \"variational lossy autoencoder\", where a powerful autoregressive conditional distribution on the inputs x given the latent code z is crippled in a way that forces it to use z in a meaningful way. Its three main contributions are:\n\n(1) It gives an interesting information-theoretical insight as to why VAE-type models don't tend to take advantage of their latent representation when the conditional distribution on x given z is powerful enough.\n\n(2) It shows that this insight can be used to efficiently train VAEs with powerful autoregressive conditional distributions such that they make use of the latent code.\n\n(3) It presents a powerful way to parametrize the prior in the form of an autoregressive flow transformation which is equivalent to using an inverse autoregressive flow transformation on the approximate posterior.\n\nBy itself, I think the information-theoretical explanation of why VAEs do not use their latent code when the conditional distribution on x given z is powerful enough constitutes an excellent addition to our understanding of VAE-related approaches.\n\nHowever, the way this intuition is empirically evaluated is a bit weak. The \"crippling\" method used feels hand-crafted and very task-dependent, and the qualitative evaluation of the \"lossyness\" of the learned representation is carried out on three datasets (MNIST, OMNIGLOT and Caltech-101 Silhouettes) which feature black-and-white images with little-to-no texture. Figures 1a and 2a do show that reconstructions discard low-level information, as observed in the slight variations in strokes between the input and the reconstruction, but such an analysis would have been more compelling with more complex image datasets. Have the authors tried applying VLAE to such datasets?\n\nI think the Caltech101 Silhouettes benchmark should be treated with caution, as no comparison is made against other competitive approaches like IAF VAE, PixelRNN and Conv DRAW. This means that VLAE significantly outperforms the state-of-the-art in only one of the four settings examined.\n\nA question which is very relevant to this paper is \"Does a latent representation on top of an autoregressive model help improve the density modeling performance?\" The paper touches this question, but very briefly: the only setting in which VLAE is compared against recent autoregressive approaches shows that it wins against PixelRNN by a small margin.\n\nThe proposal to transform the latent code with an autoregressive flow which is equivalent to parametrizing the approximate posterior with an inverse autoregressive flow transformation is also interesting. There is, however, one important distinction to be made between the two approaches: in the former, the prior over the latent code can potentially be very complex whereas in the latter the prior is limited to be a simple, factorized distribution.\n\nIt is not clear to me that having a very powerful prior is necessarily a good thing from a representation learning point of view: oftentimes we are interested in learning a representation of the data distribution which is untangled and composed of roughly independent factors of variation. The degree to which this can be achieved using something as simple as a spherical gaussian prior is up for discussion, but finding a good balance between the ability of the prior to fit the data and its usefulness as a high-level representation certainly warrants some thought. I would be interested in hearing the authors' opinion on this.\n\nOverall, the paper introduces interesting ideas despite the flaws outlined above, but weaknesses in the empirical evaluation prevent me from recommending its acceptance.\n\nUPDATE: The rating has been revised to a 7 following the authors' reply.", "SOUNDNESS_CORRECTNESS": 4, "ORIGINALITY": 3, "IS_ANNOTATED": true, "IS_META_REVIEW": false, "RECOMMENDATION": 7, "DATE": "16 Dec 2016 (modified: 19 Jan 2017)", "CLARITY": 4, "REVIEWER_CONFIDENCE": 4}, {"TITLE": "No Title", "MEANINGFUL_COMPARISON": 4, "OTHER_KEYS": "ICLR 2017 conference AnonReviewer1", "comments": "This paper motivates the combination of autoregressive models with Variational Auto-Encoders and how to control the amount the amount of information stored in the latent code. The authors provide state-of-the-art results on MNIST, OMNIGLOT and Caltech-101.\nI find that the insights provided in the paper, e.g. with respect to the effect of having a more powerful decoder on learning the latent code, the bit-back coding, and the lossy decoding are well-written but are not novel.\nThe difference between an auto-regressive prior and the inverse auto-regressive posterior is new and interesting though.\nThe model presented combines the recent technique of PixelRNN/PixelCNN and Variational Auto-Encoders with Inverse Auto-Regressive Flows, which enables the authors to obtain state-of-the-art results on MNIST, OMNIGLOT and Caltech-101. Given the insights provided in the paper, the authors are also able to control the amount of information contained in the latent code to an extent.\nThis paper gather several insight on Variational Auto-Encoders scattered through several publications in a well-written way. From these, the authors are able to obtain state-of-the-art models on small complexity datasets. Larger scale experiments will be necessary.", "SOUNDNESS_CORRECTNESS": 5, "IS_ANNOTATED": true, "IS_META_REVIEW": false, "RECOMMENDATION": 6, "DATE": "16 Dec 2016 (modified: 17 Jan 2017)", "CLARITY": 5, "REVIEWER_CONFIDENCE": 4}, {"DATE": "13 Dec 2016", "TITLE": "lossy autoencoder", "IS_META_REVIEW": false, "comments": "Hi, I have a few questions:\n\n1) The main argument of the paper is using autoregressive decoder with in variational AE leads to the problem of code part is completely is ignored because the decoder is too powerful. The solution is to depend on a small window instead of all previous data. However, the experiment section does not support this claim: Did you try combining PixelRNN with VAE and find the code has no information (KL near 0)?\n(Although this has been verified in text, text and image are very different and the finding in text does not generalize to image.)\n\nEven for PixelCNN, although it uses a small convolution window, it has a very deep architecture, the x_i may end up depending on all previous x_{", "OTHER_KEYS": "(anonymous)"}, {"DATE": "12 Dec 2016", "TITLE": "\"Optimization challenges\"", "IS_META_REVIEW": false, "comments": "Hi, I'm one of the authors of Bowman et al. 2016, and I wanted to point out that while our description of the difficulties in training RNN type models with global latent variables occurs in a section called \"Optimization Challenges,\" we make similar observations as you do in your paper, namely that having a very powerful decoder model like an RNN can result in the model ignoring the global latent variable even at the optimum (perhaps the section should have more generally been called \"Learning Challenges\"). \n\nSpecifically, we found that without using \"word dropout\" in the decoder, which effectively weakens the decoder model and forces the global variable to encode more information, we would not learn a useful latent variable. In our Figure 3, we show the results of using different amounts of word dropout and how the proportional split between the global latent code KL and the p(x|z) likelihood changes, even though the total lower bound always gets worse. This indicates that the word dropout is not simply optimizing the same model better, but is giving us a tradeoff between global and local coding.\n\nWe also note that the factorized p(x|z) used in the independent pixel decoding models of previous work forces the model to use the latent variable to achieve good likelihoods, as you mention in Section 2.2. In fact, because a word-dropout decoder models some things as (randomly) conditionally independent, this is sort of a semi-factored decoding distribution.", "OTHER_KEYS": "Luke Vilnis"}, {"OTHER_KEYS": "ICLR 2017 conference AnonReviewer2", "TITLE": "Latent code dimensions and interpretability", "comments": "", "SOUNDNESS_CORRECTNESS": 5, "ORIGINALITY": 1, "IS_ANNOTATED": true, "IS_META_REVIEW": false, "DATE": "01 Dec 2016", "CLARITY": 5}, {"IMPACT": 4, "OTHER_KEYS": "ICLR 2017 conference AnonReviewer3", "TITLE": "Table 1 question", "comments": "", "SOUNDNESS_CORRECTNESS": 4, "ORIGINALITY": 3, "IS_ANNOTATED": true, "IS_META_REVIEW": false, "DATE": "01 Dec 2016", "CLARITY": 4}, {"DATE": "11 Nov 2016", "TITLE": "A comment on table 1 in the paper", "IS_META_REVIEW": false, "comments": "Dear authors,\n\nI liked the paper very much and particularly enjoyed the section involving Bits-Back interpretation of VAE.\n\nI just wanted to point out a very minor stuff with your paper. It appears as if you have placed results for dynamically binarized MNIST for \"Discrete VAE\" model in the table for statically binarized MNIST e.g. table 1 in your paper.\n\nThanks,\nKundan", "OTHER_KEYS": "Kundan Kumar"}], "authors": "Xi Chen, Diederik P. Kingma, Tim Salimans, Yan Duan, Prafulla Dhariwal, John Schulman, Ilya Sutskever, Pieter Abbeel", "accepted": true, "id": "397"}