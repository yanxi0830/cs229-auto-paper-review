{"conference": "ICLR 2017 conference submission", "title": "Recursive Regression with Neural Networks: Approximating the HJI PDE Solution", "abstract": "Most machine learning applications using neural networks seek to approximate some function g(x) by minimizing some cost criterion. In the simplest case, if one has access to pairs of the form (x, y) where y = g(x), the problem can be framed as a regression problem. Beyond this family of problems, we find many cases where the unavailability of data pairs makes this approach unfeasible. However, similar to what we find in the reinforcement learning literature, if we have some known properties of the function we are seeking to approximate, there is still hope to frame the problem as a regression problem. In this context, we present an algorithm that approximates the solution to a partial differential equation known as the Hamilton-Jacobi-Isaacs PDE and compare it to current state of the art tools. This PDE, which is found in the fields of control theory and robotics, is of particular importance in safety critical systems where guarantees of performance are a must.", "histories": [], "reviews": [{"IS_META_REVIEW": true, "comments": "I have no familiarity with the HJI PDE (I've only dealt with parabolic PDE's such as diffusion in the past). So the details of transforming this problem into a supervised loss escape me. Therefore, as indicated below, my review should be taken as an \"educated guess\". I imagine that many readers of ICLR will face a similar problem as me, and so, if this paper is accepted, at the least the authors should prepare an appendix that provides an introduction to the HJI PDE. At a high level, my comments are:\n\n1. It seems that another disadvantage of this approach is that a new network must be trained for each new domain (including domain size), system function f(x) or boundary condition. If that is correct, I wonder if it's worth the trouble when existing tools already solve these PDE's. Can the authors shed light on a more \"unifying approach\" that would require minimal changes to generalize across PDE's?\n\n2. How sensitive is the network's result to domains of different sizes? It seems only a single size 51 x 51 was tested. Do errors increase with domain size?\n\n3. How general is this approach to PDE's of other types e.g. diffusion?"}, {"DATE": "06 Feb 2017", "TITLE": "ICLR committee final decision", "IS_META_REVIEW": false, "comments": "The basic approach of this paper is to use a neural net to sequentially generate points that can be used as the basis points in a PDE solver. The idea is definitely an interesting one, and all three reviewers are in agreement that the approach does seem to have a lot of potential.\n \n The main drawback of the paper, simply, is that it's unclear whether this result would be of sufficient interest for the ICLR audience. Ultimately, it seems as though the authors are simply training a neural network to generate this points, and the interesting contribution here comes from the application to PDE solving, not really from any advance in the NN/ML side itself. As such, it seems like the paper would be better appreciated (as a full conference paper or journal paper), within the control community, rather than ICLR. However, I do think that as an application, many at ICLR would be interested in seeing this work, even if its likely to have relatively low impact on the community. Thus, I think the best avenue for this paper is probably as a workshop post at ICLR, hopefully with further submission and exposure in the controls community.\n \n Pros:\n + Nice application of ML to a fun problem, generating sample points for PDE solutions\n + Overall well-written and clearly presented\n \n Cons:\n - Unclear contribution to the actual ML side of things\n - Probably better suited to controls conferences", "OTHER_KEYS": "ICLR 2017 pcs"}, {"DATE": "13 Jan 2017", "TITLE": "Extra Experiment Appended", "IS_META_REVIEW": false, "comments": "We appended a 3D experiment in the paper.", "OTHER_KEYS": "Vicen\u00e7 Rubies Royo"}, {"TITLE": "Good Work, Preliminary Results", "OTHER_KEYS": "ICLR 2017 conference AnonReviewer2", "comments": "This paper presents an algorithm for approximating the solution of certain time-evolution PDEs. The paper presents an interesting learning-based approach to solve such PDEs. The idea is to alternate between:\n1. sampling points in space-time\n2. generating solution to PDE at \"those\" sampled points\n3. regressing a space-time function to satisfy the latter solutions at the sampled points (and hopefully generalize beyond those points).\n\nI actually find the proposed algorithm interesting, and potentially useful in practice. The classic grid-based simulation of PDEs is often too expensive to be practical, due to the curse of dimensionality. Hence, learning the solution of PDEs makes a lot of sense for practical settings. On the other hand, as the authors point out, simply running gradient descent on the regression loss function does not work, because of the non-differentiablity of the \"min\" that shows up in the studied PDEs.\n\nTherefore, I think the proposed idea is actually very interesting approach to learning the PDE solution in presence of non-differentability, which is indeed a \"challenging\" setup for numerically solving PDEs.\n\nThe paper motivates the problem (time-evolution PDE with \"min\" operator applied to the spatial derivatives) by applications in control thery, but I think there is more direct interest in such problems for the machine learning community, and even deep learning community. For example ", "IS_META_REVIEW": false, "RECOMMENDATION": 7, "DATE": "20 Dec 2016 (modified: 26 Jan 2017)", "REVIEWER_CONFIDENCE": 3}, {"TITLE": "somewhat interesting paper, wrong conference", "OTHER_KEYS": "ICLR 2017 conference AnonReviewer3", "comments": "Approximating solutions to PDEs with NN approximators is very hard. In particular the HJB and HJI eqs have in general discontinuous and non-differentiable solutions making them particularly tricky (unless the underlying process is a diffusion in which case the Ito term makes everything smooth, but this paper doesn't do that). What's worse, there is no direct correlation between a small PDE residual and a well performing-policy [tsitsiklis? beard? todorov?, I forget]. There's been lots of work on this which is not properly cited. \n\nThe 2D toy examples are inadequate. What reason is there to think this will scale to do anything useful? \n\nThere are a bunch of typos (\"Range-Kutta\"?) .\n\nMore than anything, this paper is submitted to the wrong venue. There are no learned representations here. You're just using a NN. That's not what ICLR is about. Resubmit to ACC, ADPRL or CDC.\n\nSorry for terseness. Despite rough review, I absolutely love this direction of research. More than anything, you have to solve harder control problems for people to take notice...", "IS_META_REVIEW": false, "RECOMMENDATION": 3, "DATE": "18 Dec 2016", "REVIEWER_CONFIDENCE": 5}, {"TITLE": "Hard to follow; unclear about contribution", "OTHER_KEYS": "ICLR 2017 conference AnonReviewer1", "comments": "I have no familiarity with the HJI PDE (I've only dealt with parabolic PDE's such as diffusion in the past). So the details of transforming this problem into a supervised loss escape me. Therefore, as indicated below, my review should be taken as an \"educated guess\". I imagine that many readers of ICLR will face a similar problem as me, and so, if this paper is accepted, at the least the authors should prepare an appendix that provides an introduction to the HJI PDE. At a high level, my comments are:\n\n1. It seems that another disadvantage of this approach is that a new network must be trained for each new domain (including domain size), system function f(x) or boundary condition. If that is correct, I wonder if it's worth the trouble when existing tools already solve these PDE's. Can the authors shed light on a more \"unifying approach\" that would require minimal changes to generalize across PDE's?\n\n2. How sensitive is the network's result to domains of different sizes? It seems only a single size 51 x 51 was tested. Do errors increase with domain size?\n\n3. How general is this approach to PDE's of other types e.g. diffusion? \n", "IS_META_REVIEW": false, "RECOMMENDATION": 5, "DATE": "14 Dec 2016", "REVIEWER_CONFIDENCE": 1}, {"IS_META_REVIEW": true, "comments": "I have no familiarity with the HJI PDE (I've only dealt with parabolic PDE's such as diffusion in the past). So the details of transforming this problem into a supervised loss escape me. Therefore, as indicated below, my review should be taken as an \"educated guess\". I imagine that many readers of ICLR will face a similar problem as me, and so, if this paper is accepted, at the least the authors should prepare an appendix that provides an introduction to the HJI PDE. At a high level, my comments are:\n\n1. It seems that another disadvantage of this approach is that a new network must be trained for each new domain (including domain size), system function f(x) or boundary condition. If that is correct, I wonder if it's worth the trouble when existing tools already solve these PDE's. Can the authors shed light on a more \"unifying approach\" that would require minimal changes to generalize across PDE's?\n\n2. How sensitive is the network's result to domains of different sizes? It seems only a single size 51 x 51 was tested. Do errors increase with domain size?\n\n3. How general is this approach to PDE's of other types e.g. diffusion?"}, {"DATE": "06 Feb 2017", "TITLE": "ICLR committee final decision", "IS_META_REVIEW": false, "comments": "The basic approach of this paper is to use a neural net to sequentially generate points that can be used as the basis points in a PDE solver. The idea is definitely an interesting one, and all three reviewers are in agreement that the approach does seem to have a lot of potential.\n \n The main drawback of the paper, simply, is that it's unclear whether this result would be of sufficient interest for the ICLR audience. Ultimately, it seems as though the authors are simply training a neural network to generate this points, and the interesting contribution here comes from the application to PDE solving, not really from any advance in the NN/ML side itself. As such, it seems like the paper would be better appreciated (as a full conference paper or journal paper), within the control community, rather than ICLR. However, I do think that as an application, many at ICLR would be interested in seeing this work, even if its likely to have relatively low impact on the community. Thus, I think the best avenue for this paper is probably as a workshop post at ICLR, hopefully with further submission and exposure in the controls community.\n \n Pros:\n + Nice application of ML to a fun problem, generating sample points for PDE solutions\n + Overall well-written and clearly presented\n \n Cons:\n - Unclear contribution to the actual ML side of things\n - Probably better suited to controls conferences", "OTHER_KEYS": "ICLR 2017 pcs"}, {"DATE": "13 Jan 2017", "TITLE": "Extra Experiment Appended", "IS_META_REVIEW": false, "comments": "We appended a 3D experiment in the paper.", "OTHER_KEYS": "Vicen\u00e7 Rubies Royo"}, {"TITLE": "Good Work, Preliminary Results", "OTHER_KEYS": "ICLR 2017 conference AnonReviewer2", "comments": "This paper presents an algorithm for approximating the solution of certain time-evolution PDEs. The paper presents an interesting learning-based approach to solve such PDEs. The idea is to alternate between:\n1. sampling points in space-time\n2. generating solution to PDE at \"those\" sampled points\n3. regressing a space-time function to satisfy the latter solutions at the sampled points (and hopefully generalize beyond those points).\n\nI actually find the proposed algorithm interesting, and potentially useful in practice. The classic grid-based simulation of PDEs is often too expensive to be practical, due to the curse of dimensionality. Hence, learning the solution of PDEs makes a lot of sense for practical settings. On the other hand, as the authors point out, simply running gradient descent on the regression loss function does not work, because of the non-differentiablity of the \"min\" that shows up in the studied PDEs.\n\nTherefore, I think the proposed idea is actually very interesting approach to learning the PDE solution in presence of non-differentability, which is indeed a \"challenging\" setup for numerically solving PDEs.\n\nThe paper motivates the problem (time-evolution PDE with \"min\" operator applied to the spatial derivatives) by applications in control thery, but I think there is more direct interest in such problems for the machine learning community, and even deep learning community. For example ", "IS_META_REVIEW": false, "RECOMMENDATION": 7, "DATE": "20 Dec 2016 (modified: 26 Jan 2017)", "REVIEWER_CONFIDENCE": 3}, {"TITLE": "somewhat interesting paper, wrong conference", "OTHER_KEYS": "ICLR 2017 conference AnonReviewer3", "comments": "Approximating solutions to PDEs with NN approximators is very hard. In particular the HJB and HJI eqs have in general discontinuous and non-differentiable solutions making them particularly tricky (unless the underlying process is a diffusion in which case the Ito term makes everything smooth, but this paper doesn't do that). What's worse, there is no direct correlation between a small PDE residual and a well performing-policy [tsitsiklis? beard? todorov?, I forget]. There's been lots of work on this which is not properly cited. \n\nThe 2D toy examples are inadequate. What reason is there to think this will scale to do anything useful? \n\nThere are a bunch of typos (\"Range-Kutta\"?) .\n\nMore than anything, this paper is submitted to the wrong venue. There are no learned representations here. You're just using a NN. That's not what ICLR is about. Resubmit to ACC, ADPRL or CDC.\n\nSorry for terseness. Despite rough review, I absolutely love this direction of research. More than anything, you have to solve harder control problems for people to take notice...", "IS_META_REVIEW": false, "RECOMMENDATION": 3, "DATE": "18 Dec 2016", "REVIEWER_CONFIDENCE": 5}, {"TITLE": "Hard to follow; unclear about contribution", "OTHER_KEYS": "ICLR 2017 conference AnonReviewer1", "comments": "I have no familiarity with the HJI PDE (I've only dealt with parabolic PDE's such as diffusion in the past). So the details of transforming this problem into a supervised loss escape me. Therefore, as indicated below, my review should be taken as an \"educated guess\". I imagine that many readers of ICLR will face a similar problem as me, and so, if this paper is accepted, at the least the authors should prepare an appendix that provides an introduction to the HJI PDE. At a high level, my comments are:\n\n1. It seems that another disadvantage of this approach is that a new network must be trained for each new domain (including domain size), system function f(x) or boundary condition. If that is correct, I wonder if it's worth the trouble when existing tools already solve these PDE's. Can the authors shed light on a more \"unifying approach\" that would require minimal changes to generalize across PDE's?\n\n2. How sensitive is the network's result to domains of different sizes? It seems only a single size 51 x 51 was tested. Do errors increase with domain size?\n\n3. How general is this approach to PDE's of other types e.g. diffusion? \n", "IS_META_REVIEW": false, "RECOMMENDATION": 5, "DATE": "14 Dec 2016", "REVIEWER_CONFIDENCE": 1}], "authors": "Vicen\u00e7 Rubies Royo, Claire Tomlin", "accepted": false, "id": "511"}