{
  "name" : "486.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Thomas N. Kipf" ],
    "emails" : [ "T.N.Kipf@uva.nl", "M.Welling@uva.nl" ],
    "sections" : [ {
      "heading" : null,
      "text" : "We present a scalable approach for semi-supervised learning on graph-structured data that is based on an efficient variant of convolutional neural networks which operate directly on graphs. We motivate the choice of our convolutional architecture via a localized first-order approximation of spectral graph convolutions. Our model scales linearly in the number of graph edges and learns hidden layer representations that encode both local graph structure and features of nodes. In a number of experiments on citation networks and on a knowledge graph dataset we demonstrate that our approach outperforms related methods by a significant margin."
    }, {
      "heading" : "1 INTRODUCTION",
      "text" : "We consider the problem of classifying nodes (such as documents) in a graph (such as a citation network), where labels are only available for a small subset of nodes. This problem can be framed as graph-based semi-supervised learning, where label information is smoothed over the graph via some form of explicit graph-based regularization (Zhu et al., 2003; Zhou et al., 2004; Belkin et al., 2006; Weston et al., 2012), e.g. by using a graph Laplacian regularization term in the loss function:\nL = L0 + λLreg , with Lreg = ∑ i,j Aij‖f(Xi)− f(Xj)‖2 = f(X)>∆f(X) . (1)\nHere, L0 denotes the supervised loss w.r.t. the labeled part of the graph, f(·) can be a neural networklike differentiable function, λ is a weighing factor and X is a matrix of node feature vectors Xi. ∆ = D − A denotes the unnormalized graph Laplacian of an undirected graph G = (V, E) with N nodes vi ∈ V , edges (vi, vj) ∈ E , an adjacency matrix A ∈ RN×N (binary or weighted) and a degree matrix Dii = ∑ j Aij . The formulation of Eq. 1 relies on the assumption that connected nodes in the graph are likely to share the same label. This assumption, however, might restrict modeling capacity, as graph edges need not necessarily encode node similarity, but could contain additional information.\nIn this work, we encode the graph structure directly using a neural network model f(X,A) and train on a supervised target L0 for all nodes with labels, thereby avoiding explicit graph-based regularization in the loss function. Conditioning f(·) on the adjacency matrix of the graph will allow the model to distribute gradient information from the supervised loss L0 and will enable it to learn representations of nodes both with and without labels.\nOur contributions are two-fold. Firstly, we introduce a simple and well-behaved layer-wise propagation rule for neural network models which operate directly on graphs and show how it can be motivated from a first-order approximation of spectral graph convolutions (Hammond et al., 2011). Secondly, we demonstrate how this form of a graph-based neural network model can be used for fast and scalable semi-supervised classification of nodes in a graph. Experiments on a number of datasets demonstrate that our model compares favorably both in classification accuracy and efficiency (measured in wall-clock time) against state-of-the-art methods for semi-supervised learning."
    }, {
      "heading" : "2 FAST APPROXIMATE CONVOLUTIONS ON GRAPHS",
      "text" : "In this section, we provide theoretical motivation for a specific graph-based neural network model f(X,A) that we will use in the rest of this paper. We consider a multi-layer Graph Convolutional Network (GCN) with the following layer-wise propagation rule:\nH(l+1) = σ ( D̃− 1 2 ÃD̃− 1 2H(l)W (l) ) . (2)\nHere, Ã = A + IN is the adjacency matrix of the undirected graph G with added self-connections. IN is the identity matrix, D̃ii = ∑ j Ãij and W\n(l) is a layer-specific trainable weight matrix. σ(·) denotes an activation function, such as the ReLU(·) = max(0, ·). H(l) ∈ RN×D is the matrix of activations in the lth layer; H(0) = X . In the following, we show that the form of this propagation rule can be motivated1 via a first-order approximation of localized spectral filters on graphs (Hammond et al., 2011; Defferrard et al., 2016)."
    }, {
      "heading" : "2.1 SPECTRAL GRAPH CONVOLUTIONS",
      "text" : "We consider spectral convolutions on graphs defined as the multiplication of a signal x ∈ RN (a scalar for every node) with a filter gθ = diag(θ) parameterized by θ ∈ RN in the Fourier domain, i.e.:\ngθ ? x = UgθU >x , (3)\nwhere U is the matrix of eigenvectors of the normalized graph Laplacian L = IN −D− 1 2AD− 1 2 = UΛU>, with a diagonal matrix of its eigenvalues Λ and U>x being the graph Fourier transform of x. We can understand gθ as a function of the eigenvalues of L, i.e. gθ(Λ). Evaluating Eq. 3 is computationally expensive, as multiplication with the eigenvector matrix U isO(N2). Furthermore, computing the eigendecomposition of L in the first place might be prohibitively expensive for large graphs. To circumvent this problem, it was suggested in Hammond et al. (2011) that gθ(Λ) can be well-approximated by a truncated expansion in terms of Chebyshev polynomials Tk(x) up to K th order:\ngθ′(Λ) ≈ K∑ k=0 θ′kTk(Λ̃) , (4)\nwith a rescaled Λ̃ = 2λmax Λ − IN . λmax denotes the largest eigenvalue of L. θ ′ ∈ RK is now a vector of Chebyshev coefficients. The Chebyshev polynomials are recursively defined as Tk(x) = 2xTk−1(x) − Tk−2(x), with T0(x) = 1 and T1(x) = x. The reader is referred to Hammond et al. (2011) for an in-depth discussion of this approximation.\nGoing back to our definition of a convolution of a signal x with a filter gθ′ , we now have:\ngθ′ ? x ≈ K∑ k=0 θ′kTk(L̃)x , (5)\nwith L̃ = 2λmaxL − IN ; as can easily be verified by noticing that (UΛU >)k = UΛkU>. Note that this expression is nowK-localized since it is aK th-order polynomial in the Laplacian, i.e. it depends only on nodes that are at maximum K steps away from the central node (K th-order neighborhood). The complexity of evaluating Eq. 5 is O(|E|), i.e. linear in the number of edges. Defferrard et al. (2016) use this K-localized convolution to define a convolutional neural network on graphs."
    }, {
      "heading" : "2.2 LAYER-WISE LINEAR MODEL",
      "text" : "A neural network model based on graph convolutions can therefore be built by stacking multiple convolutional layers of the form of Eq. 5, each layer followed by a point-wise non-linearity. Now, imagine we limited the layer-wise convolution operation to K = 1 (see Eq. 5), i.e. a function that is linear w.r.t. L and therefore a linear function on the graph Laplacian spectrum.\n1We provide an alternative interpretation of this propagation rule based on the Weisfeiler-Lehman algorithm (Weisfeiler & Lehmann, 1968) in Appendix A.\nIn this way, we can still recover a rich class of convolutional filter functions by stacking multiple such layers, but we are not limited to the explicit parameterization given by, e.g., the Chebyshev polynomials. We intuitively expect that such a model can alleviate the problem of overfitting on local neighborhood structures for graphs with very wide node degree distributions, such as social networks, citation networks, knowledge graphs and many other real-world graph datasets. Additionally, for a fixed computational budget, this layer-wise linear formulation allows us to build deeper models, a practice that is known to improve modeling capacity on a number of domains (He et al., 2016).\nIn this linear formulation of a GCN we further approximate λmax ≈ 2, as we can expect that neural network parameters will adapt to this change in scale during training. Under these approximations Eq. 5 simplifies to:\ngθ′ ? x ≈ θ′0x+ θ′1 (L− IN )x = θ′0x− θ′1D− 1 2AD− 1 2x , (6)\nwith two free parameters θ′0 and θ ′ 1. The filter parameters can be shared over the whole graph. Successive application of filters of this form then effectively convolve the kth-order neighborhood of a node, where k is the number of successive filtering operations or convolutional layers in the neural network model.\nIn practice, it can be beneficial to constrain the number of parameters further to address overfitting and to minimize the number of operations (such as matrix multiplications) per layer. This leaves us with the following expression:\ngθ ? x ≈ θ ( IN +D − 12AD− 1 2 ) x , (7)\nwith a single parameter θ = θ′0 = −θ′1. Note that IN + D− 1 2AD− 1 2 now has eigenvalues in the range [0, 2]. Repeated application of this operator can therefore lead to numerical instabilities and exploding/vanishing gradients when used in a deep neural network model. To alleviate this problem, we introduce the following renormalization trick: IN +D− 1 2AD− 1 2 → D̃− 12 ÃD̃− 12 , with\nÃ = A+ IN and D̃ii = ∑ j Ãij .\nWe can generalize this definition to a signalX ∈ RN×C withC input channels (i.e. aC-dimensional feature vector for every node) and F filters or feature maps as follows:\nZ = D̃− 1 2 ÃD̃− 1 2XΘ , (8)\nwhere Θ ∈ RC×F is now a matrix of filter parameters and Z ∈ RN×F is the convolved signal matrix. This filtering operation has complexity O(|E|FC), as ÃX can be efficiently implemented as a product of a sparse matrix with a dense matrix."
    }, {
      "heading" : "3 SEMI-SUPERVISED NODE CLASSIFICATION",
      "text" : "Having introduced a simple, yet flexible model f(X,A) for efficient information propagation on graphs, we can return to the problem of semi-supervised node classification. As outlined in the introduction, we can relax certain assumptions typically made in graph-based semi-supervised learning by conditioning our model f(X,A) both on the data X and on the adjacency matrix A of the underlying graph structure. We expect this setting to be especially powerful in scenarios where the adjacency matrix contains information not present in the data X , such as citation links between documents in a citation network or relations in a knowledge graph. The overall model, a multi-layer GCN for semi-supervised learning, is schematically depicted in Figure 1."
    }, {
      "heading" : "3.1 EXAMPLE",
      "text" : "In the following, we consider a two-layer GCN for semi-supervised node classification on a graph with a symmetric adjacency matrix A (binary or weighted). We first calculate Â = D̃− 1 2 ÃD̃− 1 2 in a pre-processing step. Our forward model then takes the simple form:\nZ = f(X,A) = softmax ( Â ReLU ( ÂXW (0) ) W (1) ) . (9)\n1\n30\nHere, W (0) ∈ RC×H is an input-to-hidden weight matrix for a hidden layer with H feature maps. W (1) ∈ RH×F is a hidden-to-output weight matrix. The softmax activation function, defined as softmax(xi) = 1 Z exp(xi) with Z = ∑ i exp(xi), is applied row-wise. For semi-supervised multiclass classification, we then evaluate the cross-entropy error over all labeled examples:\nL = − ∑ l∈YL F∑ f=1 Ylf lnZlf , (10)\nwhere YL is the set of node indices that have labels. The neural network weights W (0) and W (1) are trained using gradient descent. In this work, we perform batch gradient descent using the full dataset for every training iteration, which is a viable option as long as datasets fit in memory. Using a sparse representation for A, memory requirement is O(|E|), i.e. linear in the number of edges. Stochasticity in the training process is introduced via dropout (Srivastava et al., 2014). We leave memory-efficient extensions with mini-batch stochastic gradient descent for future work."
    }, {
      "heading" : "3.2 IMPLEMENTATION",
      "text" : "In practice, we make use of TensorFlow (Abadi et al., 2015) for an efficient GPU-based implementation2 of Eq. 9 using sparse-dense matrix multiplications. The computational complexity of evaluating Eq. 9 is then O(|E|CHF ), i.e. linear in the number of graph edges."
    }, {
      "heading" : "4 RELATED WORK",
      "text" : "Our model draws inspiration both from the field of graph-based semi-supervised learning and from recent work on neural networks that operate on graphs. In what follows, we provide a brief overview on related work in both fields."
    }, {
      "heading" : "4.1 GRAPH-BASED SEMI-SUPERVISED LEARNING",
      "text" : "A large number of approaches for semi-supervised learning using graph representations have been proposed in recent years, most of which fall into two broad categories: methods that use some form of explicit graph Laplacian regularization and graph embedding-based approaches. Prominent examples for graph Laplacian regularization include label propagation (Zhu et al., 2003), manifold regularization (Belkin et al., 2006) and deep semi-supervised embedding (Weston et al., 2012).\n2Code to reproduce our experiments is available at https://github.com/tkipf/gcn.\nRecently, attention has shifted to models that learn graph embeddings with methods inspired by the skip-gram model (Mikolov et al., 2013). DeepWalk (Perozzi et al., 2014) learns embeddings via the prediction of the local neighborhood of nodes, sampled from random walks on the graph. LINE (Tang et al., 2015) and node2vec (Grover & Leskovec, 2016) extend DeepWalk with more sophisticated random walk or breadth-first search schemes. For all these methods, however, a multistep pipeline including random walk generation and semi-supervised training is required where each step has to be optimized separately. Planetoid (Yang et al., 2016) alleviates this by injecting label information in the process of learning embeddings."
    }, {
      "heading" : "4.2 NEURAL NETWORKS ON GRAPHS",
      "text" : "Neural networks that operate on graphs have previously been introduced in Gori et al. (2005); Scarselli et al. (2009) as a form of recurrent neural network. Their framework requires the repeated application of contraction maps as propagation functions until node representations reach a stable fixed point. This restriction was later alleviated in Li et al. (2016) by introducing modern practices for recurrent neural network training to the original graph neural network framework. Duvenaud et al. (2015) introduced a convolution-like propagation rule on graphs and methods for graph-level classification. Their approach requires to learn node degree-specific weight matrices which does not scale to large graphs with wide node degree distributions. Our model instead uses a single weight matrix per layer and deals with varying node degrees through an appropriate normalization of the adjacency matrix (see Section 3.1).\nA related approach to node classification with a graph-based neural network was recently introduced in Atwood & Towsley (2016). They report O(N2) complexity, limiting the range of possible applications. In a different yet related model, Niepert et al. (2016) convert graphs locally into sequences that are fed into a conventional 1D convolutional neural network, which requires the definition of a node ordering in a pre-processing step.\nOur method is based on spectral graph convolutional neural networks, introduced in Bruna et al. (2014) and later extended by Defferrard et al. (2016) with fast localized convolutions. In contrast to these works, we consider here the task of transductive node classification within networks of significantly larger scale. We show that in this setting, a number of simplifications (see Section 2.2) can be introduced to the original frameworks of Bruna et al. (2014) and Defferrard et al. (2016) that improve scalability and classification performance in large-scale networks."
    }, {
      "heading" : "5 EXPERIMENTS",
      "text" : "We test our model in a number of experiments: semi-supervised document classification in citation networks, semi-supervised entity classification in a bipartite graph extracted from a knowledge graph, an evaluation of various graph propagation models and a run-time analysis on random graphs."
    }, {
      "heading" : "5.1 DATASETS",
      "text" : "We closely follow the experimental setup in Yang et al. (2016). Dataset statistics are summarized in Table 1. In the citation network datasets—Citeseer, Cora and Pubmed (Sen et al., 2008)—nodes are documents and edges are citation links. Label rate denotes the number of labeled nodes that are used for training divided by the total number of nodes in each dataset. NELL (Carlson et al., 2010; Yang et al., 2016) is a bipartite graph dataset extracted from a knowledge graph with 55,864 relation nodes and 9,891 entity nodes.\nCitation networks We consider three citation network datasets: Citeseer, Cora and Pubmed (Sen et al., 2008). The datasets contain sparse bag-of-words feature vectors for each document and a list of citation links between documents. We treat the citation links as (undirected) edges and construct a binary, symmetric adjacency matrix A. Each document has a class label. For training, we only use 20 labels per class, but all feature vectors.\nNELL NELL is a dataset extracted from the knowledge graph introduced in (Carlson et al., 2010). A knowledge graph is a set of entities connected with directed, labeled edges (relations). We follow the pre-processing scheme as described in Yang et al. (2016). We assign separate relation nodes r1 and r2 for each entity pair (e1, r, e2) as (e1, r1) and (e2, r2). Entity nodes are described by sparse feature vectors. We extend the number of features in NELL by assigning a unique one-hot representation for every relation node, effectively resulting in a 61,278-dim sparse feature vector per node. The semi-supervised task here considers the extreme case of only a single labeled example per class in the training set. We construct a binary, symmetric adjacency matrix from this graph by setting entries Aij = 1, if one or more edges are present between nodes i and j.\nRandom graphs We simulate random graph datasets of various sizes for experiments where we measure training time per epoch. For a dataset with N nodes we create a random graph assigning 2N edges uniformly at random. We take the identity matrix IN as input feature matrix X , thereby implicitly taking a featureless approach where the model is only informed about the identity of each node, specified by a unique one-hot vector. We add dummy labels Yi = 1 for every node."
    }, {
      "heading" : "5.2 EXPERIMENTAL SET-UP",
      "text" : "Unless otherwise noted, we train a two-layer GCN as described in Section 3.1 and evaluate prediction accuracy on a test set of 1,000 labeled examples. We provide additional experiments using deeper models with up to 10 layers in Appendix B. We choose the same dataset splits as in Yang et al. (2016) with an additional validation set of 500 labeled examples for hyperparameter optimization (dropout rate for all layers, L2 regularization factor for the first GCN layer and number of hidden units). We do not use the validation set labels for training.\nFor the citation network datasets, we optimize hyperparameters on Cora only and use the same set of parameters for Citeseer and Pubmed. We train all models for a maximum of 200 epochs (training iterations) using Adam (Kingma & Ba, 2015) with a learning rate of 0.01 and early stopping with a window size of 10, i.e. we stop training if the validation loss does not decrease for 10 consecutive epochs. We initialize weights using the initialization described in Glorot & Bengio (2010) and accordingly (row-)normalize input feature vectors. On the random graph datasets, we use a hidden layer size of 32 units and omit regularization (i.e. neither dropout nor L2 regularization)."
    }, {
      "heading" : "5.3 BASELINES",
      "text" : "We compare against the same baseline methods as in Yang et al. (2016), i.e. label propagation (LP) (Zhu et al., 2003), semi-supervised embedding (SemiEmb) (Weston et al., 2012), manifold regularization (ManiReg) (Belkin et al., 2006) and skip-gram based graph embeddings (DeepWalk) (Perozzi et al., 2014). We omit TSVM (Joachims, 1999), as it does not scale to the large number of classes in one of our datasets.\nWe further compare against the iterative classification algorithm (ICA) proposed in Lu & Getoor (2003) in conjunction with two logistic regression classifiers, one for local node features alone and one for relational classification using local features and an aggregation operator as described in Sen et al. (2008). We first train the local classifier using all labeled training set nodes and use it to bootstrap class labels of unlabeled nodes for relational classifier training. We run iterative classification (relational classifier) with a random node ordering for 10 iterations on all unlabeled nodes (bootstrapped using the local classifier). L2 regularization parameter and aggregation operator (count vs. prop, see Sen et al. (2008)) are chosen based on validation set performance for each dataset separately.\nLastly, we compare against Planetoid (Yang et al., 2016), where we always choose their bestperforming model variant (transductive vs. inductive) as a baseline."
    }, {
      "heading" : "6 RESULTS",
      "text" : ""
    }, {
      "heading" : "6.1 SEMI-SUPERVISED NODE CLASSIFICATION",
      "text" : "Results are summarized in Table 2. Reported numbers denote classification accuracy in percent. For ICA, we report the mean accuracy of 100 runs with random node orderings. Results for all other baseline methods are taken from the Planetoid paper (Yang et al., 2016). Planetoid* denotes the best model for the respective dataset out of the variants presented in their paper.\nWe further report wall-clock training time in seconds until convergence (in brackets) for our method (incl. evaluation of validation error) and for Planetoid. For the latter, we used an implementation provided by the authors3 and trained on the same hardware (with GPU) as our GCN model. We trained and tested our model on the same dataset splits as in Yang et al. (2016) and report mean accuracy of 100 runs with random weight initializations. We used the following sets of hyperparameters for Citeseer, Cora and Pubmed: 0.5 (dropout rate), 5 · 10−4 (L2 regularization) and 16 (number of hidden units); and for NELL: 0.1 (dropout rate), 1 · 10−5 (L2 regularization) and 64 (number of hidden units).\nIn addition, we report performance of our model on 10 randomly drawn dataset splits of the same size as in Yang et al. (2016), denoted by GCN (rand. splits). Here, we report mean and standard error of prediction accuracy on the test set split in percent."
    }, {
      "heading" : "6.2 EVALUATION OF PROPAGATION MODEL",
      "text" : "We compare different variants of our proposed per-layer propagation model on the citation network datasets. We follow the experimental set-up described in the previous section. Results are summarized in Table 3. The propagation model of our original GCN model is denoted by renormalization trick (in bold). In all other cases, the propagation model of both neural network layers is replaced with the model specified under propagation model. Reported numbers denote mean classification accuracy for 100 repeated runs with random weight matrix initializations. In case of multiple variables Θi per layer, we impose L2 regularization on all weight matrices of the first layer.\n6.3 TRAINING TIME PER EPOCH\nHere, we report results for the mean training time per epoch (forward pass, cross-entropy calculation, backward pass) for 100 epochs on simulated random graphs, measured in seconds wall-clock time. See Section 5.1 for a detailed description of the random graph dataset used in these experiments. We compare results on a GPU and on a CPU-only implementation4 in TensorFlow (Abadi et al., 2015). Figure 2 summarizes the results."
    }, {
      "heading" : "7 DISCUSSION",
      "text" : ""
    }, {
      "heading" : "7.1 SEMI-SUPERVISED MODEL",
      "text" : "In the experiments demonstrated here, our method for semi-supervised node classification outperforms recent related methods by a significant margin. Methods based on graph-Laplacian regularization (Zhu et al., 2003; Belkin et al., 2006; Weston et al., 2012) are most likely limited due to their assumption that edges encode mere similarity of nodes. Skip-gram based methods on the other hand are limited by the fact that they are based on a multi-step pipeline which is difficult to optimize. Our proposed model can overcome both limitations, while still comparing favorably in terms of efficiency (measured in wall-clock time) to related methods. Propagation of feature information from neighboring nodes in every layer improves classification performance in comparison to methods like ICA (Lu & Getoor, 2003), where only label information is aggregated.\nWe have further demonstrated that the proposed renormalized propagation model (Eq. 8) offers both improved efficiency (fewer parameters and operations, such as multiplication or addition) and better predictive performance on a number of datasets compared to a naı̈ve 1st-order model (Eq. 6) or higher-order graph convolutional models using Chebyshev polynomials (Eq. 5)."
    }, {
      "heading" : "7.2 LIMITATIONS AND FUTURE WORK",
      "text" : "Here, we describe several limitations of our current model and outline how these might be overcome in future work.\nMemory requirement In the current setup with full-batch gradient descent, memory requirement grows linearly in the size of the dataset. We have shown that for large graphs that do not fit in GPU memory, training on CPU can still be a viable option. Mini-batch stochastic gradient descent can alleviate this issue. The procedure of generating mini-batches, however, should take into account the number of layers in the GCN model, as the K th-order neighborhood for a GCN with K layers has to be stored in memory for an exact procedure. For very large and densely connected graph datasets, further approximations might be necessary.\nDirected edges and edge features Our framework currently does not naturally support edge features and is limited to undirected graphs (weighted or unweighted). Results on NELL however show that it is possible to handle both directed edges and edge features by representing the original directed graph as an undirected bipartite graph with additional nodes that represent edges in the original graph (see Section 5.1 for details).\nLimiting assumptions Through the approximations introduced in Section 2, we implicitly assume locality (dependence on the K th-order neighborhood for a GCN with K layers) and equal importance of self-connections vs. edges to neighboring nodes. For some datasets, however, it might be beneficial to introduce a trade-off parameter λ in the definition of Ã:\nÃ = A+ λIN . (11) 4Hardware used: 16-core Intel R© Xeon R© CPU E5-2640 v3 @ 2.60GHz, GeForce R© GTX TITAN X\nThis parameter now plays a similar role as the trade-off parameter between supervised and unsupervised loss in the typical semi-supervised setting (see Eq. 1). Here, however, it can be learned via gradient descent."
    }, {
      "heading" : "8 CONCLUSION",
      "text" : "We have introduced a novel approach for semi-supervised classification on graph-structured data. Our GCN model uses an efficient layer-wise propagation rule that is based on a first-order approximation of spectral convolutions on graphs. Experiments on a number of network datasets suggest that the proposed GCN model is capable of encoding both graph structure and node features in a way useful for semi-supervised classification. In this setting, our model outperforms several recently proposed methods by a significant margin, while being computationally efficient."
    }, {
      "heading" : "ACKNOWLEDGMENTS",
      "text" : "We would like to thank Christos Louizos, Taco Cohen, Joan Bruna, Zhilin Yang, Dave Herman, Pramod Sinha and Abdul-Saboor Sheikh for helpful discussions. This research was funded by SAP."
    }, {
      "heading" : "A RELATION TO WEISFEILER-LEHMAN ALGORITHM",
      "text" : "A neural network model for graph-structured data should ideally be able to learn representations of nodes in a graph, taking both the graph structure and feature description of nodes into account. A well-studied framework for the unique assignment of node labels given a graph and (optionally) discrete initial node labels is provided by the 1-dim Weisfeiler-Lehman (WL-1) algorithm (Weisfeiler & Lehmann, 1968):\nAlgorithm 1: WL-1 algorithm (Weisfeiler & Lehmann, 1968)\nInput: Initial node coloring (h(0)1 , h (0) 2 , ..., h (0) N ) Output: Final node coloring (h(T )1 , h (T ) 2 , ..., h (T ) N ) t← 0; repeat\nfor vi ∈ V do h (t+1) i ← hash (∑ j∈Ni h (t) j ) ;\nt← t+ 1; until stable node coloring is reached;\nHere, h(t)i denotes the coloring (label assignment) of node vi (at iteration t) and Ni is its set of neighboring node indices (irrespective of whether the graph includes self-connections for every node or not). hash(·) is a hash function. For an in-depth mathematical discussion of the WL-1 algorithm see, e.g., Douglas (2011).\nWe can replace the hash function in Algorithm 1 with a neural network layer-like differentiable function with trainable parameters as follows:\nh (l+1) i = σ ∑ j∈Ni 1 cij h (l) j W (l)  , (12) where cij is an appropriately chosen normalization constant for the edge (vi, vj). Further, we can take h(l)i now to be a vector of activations of node i in the l\nth neural network layer. W (l) is a layer-specific weight matrix and σ(·) denotes a differentiable, non-linear activation function.\nBy choosing cij = √ didj , where di = |Ni| denotes the degree of node vi, we recover the propagation rule of our Graph Convolutional Network (GCN) model in vector form (see Eq. 2)5.\nThis—loosely speaking—allows us to interpret our GCN model as a differentiable and parameterized generalization of the 1-dim Weisfeiler-Lehman algorithm on graphs.\nA.1 NODE EMBEDDINGS WITH RANDOM WEIGHTS\nFrom the analogy with the Weisfeiler-Lehman algorithm, we can understand that even an untrained GCN model with random weights can serve as a powerful feature extractor for nodes in a graph. As an example, consider the following 3-layer GCN model:\nZ = tanh ( Â tanh ( Â tanh ( ÂXW (0) ) W (1) ) W (2) ) , (13)\nwith weight matricesW (l) initialized at random using the initialization described in Glorot & Bengio (2010). Â, X and Z are defined as in Section 3.1.\nWe apply this model on Zachary’s karate club network (Zachary, 1977). This graph contains 34 nodes, connected by 154 (undirected and unweighted) edges. Every node is labeled by one of four classes, obtained via modularity-based clustering (Brandes et al., 2008). See Figure 3a for an illustration.\n5Note that we here implicitly assume that self-connections have already been added to every node in the graph (for a clutter-free notation).\nWe take a featureless approach by setting X = IN , where IN is the N by N identity matrix. N is the number of nodes in the graph. Note that nodes are randomly ordered (i.e. ordering contains no information). Furthermore, we choose a hidden layer dimensionality6 of 4 and a two-dimensional output (so that the output can immediately be visualized in a 2-dim plot).\nFigure 3b shows a representative example of node embeddings (outputs Z) obtained from an untrained GCN model applied to the karate club network. These results are comparable to embeddings obtained from DeepWalk (Perozzi et al., 2014), which uses a more expensive unsupervised training procedure.\nA.2 SEMI-SUPERVISED NODE EMBEDDINGS\nOn this simple example of a GCN applied to the karate club network it is interesting to observe how embeddings react during training on a semi-supervised classification task. Such a visualization (see Figure 4) provides insights into how the GCN model can make use of the graph structure (and of features extracted from the graph structure at later layers) to learn embeddings that are useful for a classification task.\nWe consider the following semi-supervised learning setup: we add a softmax layer on top of our model (Eq. 13) and train using only a single labeled example per class (i.e. a total number of 4 labeled nodes). We train for 300 training iterations using Adam (Kingma & Ba, 2015) with a learning rate of 0.01 on a cross-entropy loss.\nFigure 4 shows the evolution of node embeddings over a number of training iterations. The model succeeds in linearly separating the communities based on minimal supervision and the graph structure alone. A video of the full training process can be found on our website7.\n6We originally experimented with a hidden layer dimensionality of 2 (i.e. same as output layer), but observed that a dimensionality of 4 resulted in less frequent saturation of tanh(·) units and therefore visually more pleasing results.\n7http://tkipf.github.io/graph-convolutional-networks/"
    }, {
      "heading" : "B EXPERIMENTS ON MODEL DEPTH",
      "text" : "In these experiments, we investigate the influence of model depth (number of layers) on classification performance. We report results on a 5-fold cross-validation experiment on the Cora, Citeseer and Pubmed datasets (Sen et al., 2008) using all labels. In addition to the standard GCN model (Eq. 2), we report results on a model variant where we use residual connections (He et al., 2016) between hidden layers to facilitate training of deeper models by enabling the model to carry over information from the previous layer’s input:\nH(l+1) = σ ( D̃− 1 2 ÃD̃− 1 2H(l)W (l) ) +H(l) . (14)\nOn each cross-validation split, we train for 400 epochs (without early stopping) using the Adam optimizer (Kingma & Ba, 2015) with a learning rate of 0.01. Other hyperparameters are chosen as follows: 0.5 (dropout rate, first and last layer), 5 · 10−4 (L2 regularization, first layer), 16 (number of units for each hidden layer) and 0.01 (learning rate). Results are summarized in Figure 5.\nFor the datasets considered here, best results are obtained with a 2- or 3-layer model. We observe that for models deeper than 7 layers, training without the use of residual connections can become difficult, as the effective context size for each node increases by the size of its K th-order neighborhood (for a model with K layers) with each additional layer. Furthermore, overfitting can become an issue as the number of parameters increases with model depth."
    } ],
    "references" : [ {
      "title" : "TensorFlow: Large-scale machine learning on heterogeneous systems",
      "author" : [ "Martı́n Abadi" ],
      "venue" : null,
      "citeRegEx" : "Abadi,? \\Q2015\\E",
      "shortCiteRegEx" : "Abadi",
      "year" : 2015
    }, {
      "title" : "Diffusion-convolutional neural networks. In Advances in neural information processing systems (NIPS), 2016",
      "author" : [ "James Atwood", "Don Towsley" ],
      "venue" : null,
      "citeRegEx" : "Atwood and Towsley.,? \\Q2016\\E",
      "shortCiteRegEx" : "Atwood and Towsley.",
      "year" : 2016
    }, {
      "title" : "Manifold regularization: A geometric framework for learning from labeled and unlabeled examples",
      "author" : [ "Mikhail Belkin", "Partha Niyogi", "Vikas Sindhwani" ],
      "venue" : "Journal of machine learning research (JMLR),",
      "citeRegEx" : "Belkin et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Belkin et al\\.",
      "year" : 2006
    }, {
      "title" : "On modularity clustering",
      "author" : [ "Ulrik Brandes", "Daniel Delling", "Marco Gaertler", "Robert Gorke", "Martin Hoefer", "Zoran Nikoloski", "Dorothea Wagner" ],
      "venue" : "IEEE Transactions on Knowledge and Data Engineering,",
      "citeRegEx" : "Brandes et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Brandes et al\\.",
      "year" : 2008
    }, {
      "title" : "Spectral networks and locally connected networks on graphs",
      "author" : [ "Joan Bruna", "Wojciech Zaremba", "Arthur Szlam", "Yann LeCun" ],
      "venue" : "In International Conference on Learning Representations (ICLR),",
      "citeRegEx" : "Bruna et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Bruna et al\\.",
      "year" : 2014
    }, {
      "title" : "Toward an architecture for never-ending language learning",
      "author" : [ "Andrew Carlson", "Justin Betteridge", "Bryan Kisiel", "Burr Settles", "Estevam R. Hruschka Jr.", "Tom M. Mitchell" ],
      "venue" : "In AAAI,",
      "citeRegEx" : "Carlson et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Carlson et al\\.",
      "year" : 2010
    }, {
      "title" : "Convolutional neural networks on graphs with fast localized spectral filtering. In Advances in neural information processing systems (NIPS), 2016",
      "author" : [ "Michaël Defferrard", "Xavier Bresson", "Pierre Vandergheynst" ],
      "venue" : null,
      "citeRegEx" : "Defferrard et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Defferrard et al\\.",
      "year" : 2016
    }, {
      "title" : "The Weisfeiler-Lehman method and graph isomorphism testing",
      "author" : [ "Brendan L. Douglas" ],
      "venue" : "arXiv preprint arXiv:1101.5211,",
      "citeRegEx" : "Douglas.,? \\Q2011\\E",
      "shortCiteRegEx" : "Douglas.",
      "year" : 2011
    }, {
      "title" : "Convolutional networks on graphs for learning molecular fingerprints. In Advances in neural information processing systems",
      "author" : [ "David K. Duvenaud", "Dougal Maclaurin", "Jorge Iparraguirre", "Rafael Bombarell", "Timothy Hirzel", "Alán Aspuru-Guzik", "Ryan P. Adams" ],
      "venue" : null,
      "citeRegEx" : "Duvenaud et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Duvenaud et al\\.",
      "year" : 2015
    }, {
      "title" : "Understanding the difficulty of training deep feedforward neural networks",
      "author" : [ "Xavier Glorot", "Yoshua Bengio" ],
      "venue" : "In AISTATS,",
      "citeRegEx" : "Glorot and Bengio.,? \\Q2010\\E",
      "shortCiteRegEx" : "Glorot and Bengio.",
      "year" : 2010
    }, {
      "title" : "A new model for learning in graph domains",
      "author" : [ "Marco Gori", "Gabriele Monfardini", "Franco Scarselli" ],
      "venue" : "In Proceedings",
      "citeRegEx" : "Gori et al\\.,? \\Q2005\\E",
      "shortCiteRegEx" : "Gori et al\\.",
      "year" : 2005
    }, {
      "title" : "node2vec: Scalable feature learning for networks",
      "author" : [ "Aditya Grover", "Jure Leskovec" ],
      "venue" : "In Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining",
      "citeRegEx" : "Grover and Leskovec.,? \\Q2016\\E",
      "shortCiteRegEx" : "Grover and Leskovec.",
      "year" : 2016
    }, {
      "title" : "Wavelets on graphs via spectral graph theory",
      "author" : [ "David K. Hammond", "Pierre Vandergheynst", "Rémi Gribonval" ],
      "venue" : "Applied and Computational Harmonic Analysis,",
      "citeRegEx" : "Hammond et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Hammond et al\\.",
      "year" : 2011
    }, {
      "title" : "Deep residual learning for image recognition",
      "author" : [ "Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun" ],
      "venue" : "In IEEE Conference on Computer Vision and Pattern Recognition",
      "citeRegEx" : "He et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2016
    }, {
      "title" : "Transductive inference for text classification using support vector machines",
      "author" : [ "Thorsten Joachims" ],
      "venue" : "In International Conference on Machine Learning (ICML),",
      "citeRegEx" : "Joachims.,? \\Q1999\\E",
      "shortCiteRegEx" : "Joachims.",
      "year" : 1999
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "Diederik P. Kingma", "Jimmy Lei Ba" ],
      "venue" : "In International Conference on Learning Representations (ICLR),",
      "citeRegEx" : "Kingma and Ba.,? \\Q2015\\E",
      "shortCiteRegEx" : "Kingma and Ba.",
      "year" : 2015
    }, {
      "title" : "Gated graph sequence neural networks",
      "author" : [ "Yujia Li", "Daniel Tarlow", "Marc Brockschmidt", "Richard Zemel" ],
      "venue" : "In International Conference on Learning Representations (ICLR),",
      "citeRegEx" : "Li et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Li et al\\.",
      "year" : 2016
    }, {
      "title" : "Link-based classification",
      "author" : [ "Qing Lu", "Lise Getoor" ],
      "venue" : "In International Conference on Machine Learning (ICML),",
      "citeRegEx" : "Lu and Getoor.,? \\Q2003\\E",
      "shortCiteRegEx" : "Lu and Getoor.",
      "year" : 2003
    }, {
      "title" : "Visualizing data using t-sne",
      "author" : [ "Laurens van der Maaten", "Geoffrey Hinton" ],
      "venue" : "Journal of Machine Learning Research (JMLR),",
      "citeRegEx" : "Maaten and Hinton.,? \\Q2008\\E",
      "shortCiteRegEx" : "Maaten and Hinton.",
      "year" : 2008
    }, {
      "title" : "Distributed representations of words and phrases and their compositionality",
      "author" : [ "Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S. Corrado", "Jeff Dean" ],
      "venue" : "In Advances in neural information processing systems (NIPS),",
      "citeRegEx" : "Mikolov et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2013
    }, {
      "title" : "Learning convolutional neural networks for graphs",
      "author" : [ "Mathias Niepert", "Mohamed Ahmed", "Konstantin Kutzkov" ],
      "venue" : "In International Conference on Machine Learning (ICML),",
      "citeRegEx" : "Niepert et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Niepert et al\\.",
      "year" : 2016
    }, {
      "title" : "Deepwalk: Online learning of social representations",
      "author" : [ "Bryan Perozzi", "Rami Al-Rfou", "Steven Skiena" ],
      "venue" : "In Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining,",
      "citeRegEx" : "Perozzi et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Perozzi et al\\.",
      "year" : 2014
    }, {
      "title" : "The graph neural network model",
      "author" : [ "Franco Scarselli", "Marco Gori", "Ah Chung Tsoi", "Markus Hagenbuchner", "Gabriele Monfardini" ],
      "venue" : "IEEE Transactions on Neural Networks,",
      "citeRegEx" : "Scarselli et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Scarselli et al\\.",
      "year" : 2009
    }, {
      "title" : "Collective classification in network data",
      "author" : [ "Prithviraj Sen", "Galileo Namata", "Mustafa Bilgic", "Lise Getoor", "Brian Galligher", "Tina Eliassi-Rad" ],
      "venue" : "AI magazine,",
      "citeRegEx" : "Sen et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Sen et al\\.",
      "year" : 2008
    }, {
      "title" : "Dropout: a simple way to prevent neural networks from overfitting",
      "author" : [ "Nitish Srivastava", "Geoffrey E. Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov" ],
      "venue" : "Journal of Machine Learning Research (JMLR),",
      "citeRegEx" : "Srivastava et al\\.,? \\Q1929\\E",
      "shortCiteRegEx" : "Srivastava et al\\.",
      "year" : 1929
    }, {
      "title" : "Line: Large-scale information network embedding",
      "author" : [ "Jian Tang", "Meng Qu", "Mingzhe Wang", "Ming Zhang", "Jun Yan", "Qiaozhu Mei" ],
      "venue" : "In Proceedings of the 24th International Conference on World Wide Web,",
      "citeRegEx" : "Tang et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Tang et al\\.",
      "year" : 2015
    }, {
      "title" : "A reduction of a graph to a canonical form and an algebra arising during this reduction",
      "author" : [ "Boris Weisfeiler", "A.A. Lehmann" ],
      "venue" : "Nauchno-Technicheskaya Informatsia,",
      "citeRegEx" : "Weisfeiler and Lehmann.,? \\Q1968\\E",
      "shortCiteRegEx" : "Weisfeiler and Lehmann.",
      "year" : 1968
    }, {
      "title" : "Deep learning via semisupervised embedding",
      "author" : [ "Jason Weston", "Frédéric Ratle", "Hossein Mobahi", "Ronan Collobert" ],
      "venue" : "In Neural Networks: Tricks of the Trade,",
      "citeRegEx" : "Weston et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Weston et al\\.",
      "year" : 2012
    }, {
      "title" : "Revisiting semi-supervised learning with graph embeddings",
      "author" : [ "Zhilin Yang", "William Cohen", "Ruslan Salakhutdinov" ],
      "venue" : "In International Conference on Machine Learning (ICML),",
      "citeRegEx" : "Yang et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Yang et al\\.",
      "year" : 2016
    }, {
      "title" : "An information flow model for conflict and fission in small groups",
      "author" : [ "Wayne W. Zachary" ],
      "venue" : "Journal of anthropological research,",
      "citeRegEx" : "Zachary.,? \\Q1977\\E",
      "shortCiteRegEx" : "Zachary.",
      "year" : 1977
    }, {
      "title" : "Learning with local and global consistency",
      "author" : [ "Dengyong Zhou", "Olivier Bousquet", "Thomas Navin Lal", "Jason Weston", "Bernhard Schölkopf" ],
      "venue" : "In Advances in neural information processing systems (NIPS),",
      "citeRegEx" : "Zhou et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Zhou et al\\.",
      "year" : 2004
    }, {
      "title" : "Semi-supervised learning using gaussian fields and harmonic functions",
      "author" : [ "Xiaojin Zhu", "Zoubin Ghahramani", "John Lafferty" ],
      "venue" : "In International Conference on Machine Learning (ICML),",
      "citeRegEx" : "Zhu et al\\.,? \\Q2003\\E",
      "shortCiteRegEx" : "Zhu et al\\.",
      "year" : 2003
    } ],
    "referenceMentions" : [ {
      "referenceID" : 31,
      "context" : "This problem can be framed as graph-based semi-supervised learning, where label information is smoothed over the graph via some form of explicit graph-based regularization (Zhu et al., 2003; Zhou et al., 2004; Belkin et al., 2006; Weston et al., 2012), e.",
      "startOffset" : 172,
      "endOffset" : 251
    }, {
      "referenceID" : 30,
      "context" : "This problem can be framed as graph-based semi-supervised learning, where label information is smoothed over the graph via some form of explicit graph-based regularization (Zhu et al., 2003; Zhou et al., 2004; Belkin et al., 2006; Weston et al., 2012), e.",
      "startOffset" : 172,
      "endOffset" : 251
    }, {
      "referenceID" : 2,
      "context" : "This problem can be framed as graph-based semi-supervised learning, where label information is smoothed over the graph via some form of explicit graph-based regularization (Zhu et al., 2003; Zhou et al., 2004; Belkin et al., 2006; Weston et al., 2012), e.",
      "startOffset" : 172,
      "endOffset" : 251
    }, {
      "referenceID" : 27,
      "context" : "This problem can be framed as graph-based semi-supervised learning, where label information is smoothed over the graph via some form of explicit graph-based regularization (Zhu et al., 2003; Zhou et al., 2004; Belkin et al., 2006; Weston et al., 2012), e.",
      "startOffset" : 172,
      "endOffset" : 251
    }, {
      "referenceID" : 12,
      "context" : "Firstly, we introduce a simple and well-behaved layer-wise propagation rule for neural network models which operate directly on graphs and show how it can be motivated from a first-order approximation of spectral graph convolutions (Hammond et al., 2011).",
      "startOffset" : 232,
      "endOffset" : 254
    }, {
      "referenceID" : 12,
      "context" : "In the following, we show that the form of this propagation rule can be motivated1 via a first-order approximation of localized spectral filters on graphs (Hammond et al., 2011; Defferrard et al., 2016).",
      "startOffset" : 155,
      "endOffset" : 202
    }, {
      "referenceID" : 6,
      "context" : "In the following, we show that the form of this propagation rule can be motivated1 via a first-order approximation of localized spectral filters on graphs (Hammond et al., 2011; Defferrard et al., 2016).",
      "startOffset" : 155,
      "endOffset" : 202
    }, {
      "referenceID" : 12,
      "context" : "To circumvent this problem, it was suggested in Hammond et al. (2011) that gθ(Λ) can be well-approximated by a truncated expansion in terms of Chebyshev polynomials Tk(x) up to K th order: gθ′(Λ) ≈ K ∑",
      "startOffset" : 48,
      "endOffset" : 70
    }, {
      "referenceID" : 12,
      "context" : "The reader is referred to Hammond et al. (2011) for an in-depth discussion of this approximation.",
      "startOffset" : 26,
      "endOffset" : 48
    }, {
      "referenceID" : 6,
      "context" : "Defferrard et al. (2016) use this K-localized convolution to define a convolutional neural network on graphs.",
      "startOffset" : 0,
      "endOffset" : 25
    }, {
      "referenceID" : 13,
      "context" : "Additionally, for a fixed computational budget, this layer-wise linear formulation allows us to build deeper models, a practice that is known to improve modeling capacity on a number of domains (He et al., 2016).",
      "startOffset" : 194,
      "endOffset" : 211
    }, {
      "referenceID" : 23,
      "context" : "Right: t-SNE (Maaten & Hinton, 2008) visualization of hidden layer activations of a two-layer GCN trained on the Cora dataset (Sen et al., 2008) using 5% of labels.",
      "startOffset" : 126,
      "endOffset" : 144
    }, {
      "referenceID" : 31,
      "context" : "Prominent examples for graph Laplacian regularization include label propagation (Zhu et al., 2003), manifold regularization (Belkin et al.",
      "startOffset" : 80,
      "endOffset" : 98
    }, {
      "referenceID" : 2,
      "context" : ", 2003), manifold regularization (Belkin et al., 2006) and deep semi-supervised embedding (Weston et al.",
      "startOffset" : 33,
      "endOffset" : 54
    }, {
      "referenceID" : 27,
      "context" : ", 2006) and deep semi-supervised embedding (Weston et al., 2012).",
      "startOffset" : 43,
      "endOffset" : 64
    }, {
      "referenceID" : 19,
      "context" : "Recently, attention has shifted to models that learn graph embeddings with methods inspired by the skip-gram model (Mikolov et al., 2013).",
      "startOffset" : 115,
      "endOffset" : 137
    }, {
      "referenceID" : 21,
      "context" : "DeepWalk (Perozzi et al., 2014) learns embeddings via the prediction of the local neighborhood of nodes, sampled from random walks on the graph.",
      "startOffset" : 9,
      "endOffset" : 31
    }, {
      "referenceID" : 25,
      "context" : "LINE (Tang et al., 2015) and node2vec (Grover & Leskovec, 2016) extend DeepWalk with more sophisticated random walk or breadth-first search schemes.",
      "startOffset" : 5,
      "endOffset" : 24
    }, {
      "referenceID" : 28,
      "context" : "Planetoid (Yang et al., 2016) alleviates this by injecting label information in the process of learning embeddings.",
      "startOffset" : 10,
      "endOffset" : 29
    }, {
      "referenceID" : 7,
      "context" : "Neural networks that operate on graphs have previously been introduced in Gori et al. (2005); Scarselli et al.",
      "startOffset" : 74,
      "endOffset" : 93
    }, {
      "referenceID" : 7,
      "context" : "Neural networks that operate on graphs have previously been introduced in Gori et al. (2005); Scarselli et al. (2009) as a form of recurrent neural network.",
      "startOffset" : 74,
      "endOffset" : 118
    }, {
      "referenceID" : 7,
      "context" : "Neural networks that operate on graphs have previously been introduced in Gori et al. (2005); Scarselli et al. (2009) as a form of recurrent neural network. Their framework requires the repeated application of contraction maps as propagation functions until node representations reach a stable fixed point. This restriction was later alleviated in Li et al. (2016) by introducing modern practices for recurrent neural network training to the original graph neural network framework.",
      "startOffset" : 74,
      "endOffset" : 365
    }, {
      "referenceID" : 6,
      "context" : "Duvenaud et al. (2015) introduced a convolution-like propagation rule on graphs and methods for graph-level classification.",
      "startOffset" : 0,
      "endOffset" : 23
    }, {
      "referenceID" : 6,
      "context" : "Duvenaud et al. (2015) introduced a convolution-like propagation rule on graphs and methods for graph-level classification. Their approach requires to learn node degree-specific weight matrices which does not scale to large graphs with wide node degree distributions. Our model instead uses a single weight matrix per layer and deals with varying node degrees through an appropriate normalization of the adjacency matrix (see Section 3.1). A related approach to node classification with a graph-based neural network was recently introduced in Atwood & Towsley (2016). They report O(N) complexity, limiting the range of possible applications.",
      "startOffset" : 0,
      "endOffset" : 567
    }, {
      "referenceID" : 6,
      "context" : "Duvenaud et al. (2015) introduced a convolution-like propagation rule on graphs and methods for graph-level classification. Their approach requires to learn node degree-specific weight matrices which does not scale to large graphs with wide node degree distributions. Our model instead uses a single weight matrix per layer and deals with varying node degrees through an appropriate normalization of the adjacency matrix (see Section 3.1). A related approach to node classification with a graph-based neural network was recently introduced in Atwood & Towsley (2016). They report O(N) complexity, limiting the range of possible applications. In a different yet related model, Niepert et al. (2016) convert graphs locally into sequences that are fed into a conventional 1D convolutional neural network, which requires the definition of a node ordering in a pre-processing step.",
      "startOffset" : 0,
      "endOffset" : 698
    }, {
      "referenceID" : 4,
      "context" : "Our method is based on spectral graph convolutional neural networks, introduced in Bruna et al. (2014) and later extended by Defferrard et al.",
      "startOffset" : 83,
      "endOffset" : 103
    }, {
      "referenceID" : 4,
      "context" : "Our method is based on spectral graph convolutional neural networks, introduced in Bruna et al. (2014) and later extended by Defferrard et al. (2016) with fast localized convolutions.",
      "startOffset" : 83,
      "endOffset" : 150
    }, {
      "referenceID" : 4,
      "context" : "Our method is based on spectral graph convolutional neural networks, introduced in Bruna et al. (2014) and later extended by Defferrard et al. (2016) with fast localized convolutions. In contrast to these works, we consider here the task of transductive node classification within networks of significantly larger scale. We show that in this setting, a number of simplifications (see Section 2.2) can be introduced to the original frameworks of Bruna et al. (2014) and Defferrard et al.",
      "startOffset" : 83,
      "endOffset" : 465
    }, {
      "referenceID" : 4,
      "context" : "Our method is based on spectral graph convolutional neural networks, introduced in Bruna et al. (2014) and later extended by Defferrard et al. (2016) with fast localized convolutions. In contrast to these works, we consider here the task of transductive node classification within networks of significantly larger scale. We show that in this setting, a number of simplifications (see Section 2.2) can be introduced to the original frameworks of Bruna et al. (2014) and Defferrard et al. (2016) that improve scalability and classification performance in large-scale networks.",
      "startOffset" : 83,
      "endOffset" : 494
    }, {
      "referenceID" : 23,
      "context" : "In the citation network datasets—Citeseer, Cora and Pubmed (Sen et al., 2008)—nodes are documents and edges are citation links.",
      "startOffset" : 59,
      "endOffset" : 77
    }, {
      "referenceID" : 5,
      "context" : "NELL (Carlson et al., 2010; Yang et al., 2016) is a bipartite graph dataset extracted from a knowledge graph with 55,864 relation nodes and 9,891 entity nodes.",
      "startOffset" : 5,
      "endOffset" : 46
    }, {
      "referenceID" : 28,
      "context" : "NELL (Carlson et al., 2010; Yang et al., 2016) is a bipartite graph dataset extracted from a knowledge graph with 55,864 relation nodes and 9,891 entity nodes.",
      "startOffset" : 5,
      "endOffset" : 46
    }, {
      "referenceID" : 26,
      "context" : "We closely follow the experimental setup in Yang et al. (2016). Dataset statistics are summarized in Table 1.",
      "startOffset" : 44,
      "endOffset" : 63
    }, {
      "referenceID" : 28,
      "context" : "Table 1: Dataset statistics, as reported in Yang et al. (2016). Dataset Type Nodes Edges Classes Features Label rate Citeseer Citation network 3,327 4,732 6 3,703 0.",
      "startOffset" : 44,
      "endOffset" : 63
    }, {
      "referenceID" : 23,
      "context" : "Citation networks We consider three citation network datasets: Citeseer, Cora and Pubmed (Sen et al., 2008).",
      "startOffset" : 89,
      "endOffset" : 107
    }, {
      "referenceID" : 5,
      "context" : "NELL NELL is a dataset extracted from the knowledge graph introduced in (Carlson et al., 2010).",
      "startOffset" : 72,
      "endOffset" : 94
    }, {
      "referenceID" : 5,
      "context" : "NELL NELL is a dataset extracted from the knowledge graph introduced in (Carlson et al., 2010). A knowledge graph is a set of entities connected with directed, labeled edges (relations). We follow the pre-processing scheme as described in Yang et al. (2016). We assign separate relation nodes r1 and r2 for each entity pair (e1, r, e2) as (e1, r1) and (e2, r2).",
      "startOffset" : 73,
      "endOffset" : 258
    }, {
      "referenceID" : 28,
      "context" : "We choose the same dataset splits as in Yang et al. (2016) with an additional validation set of 500 labeled examples for hyperparameter optimization (dropout rate for all layers, L2 regularization factor for the first GCN layer and number of hidden units).",
      "startOffset" : 40,
      "endOffset" : 59
    }, {
      "referenceID" : 28,
      "context" : "We choose the same dataset splits as in Yang et al. (2016) with an additional validation set of 500 labeled examples for hyperparameter optimization (dropout rate for all layers, L2 regularization factor for the first GCN layer and number of hidden units). We do not use the validation set labels for training. For the citation network datasets, we optimize hyperparameters on Cora only and use the same set of parameters for Citeseer and Pubmed. We train all models for a maximum of 200 epochs (training iterations) using Adam (Kingma & Ba, 2015) with a learning rate of 0.01 and early stopping with a window size of 10, i.e. we stop training if the validation loss does not decrease for 10 consecutive epochs. We initialize weights using the initialization described in Glorot & Bengio (2010) and accordingly (row-)normalize input feature vectors.",
      "startOffset" : 40,
      "endOffset" : 795
    }, {
      "referenceID" : 31,
      "context" : "label propagation (LP) (Zhu et al., 2003), semi-supervised embedding (SemiEmb) (Weston et al.",
      "startOffset" : 23,
      "endOffset" : 41
    }, {
      "referenceID" : 27,
      "context" : ", 2003), semi-supervised embedding (SemiEmb) (Weston et al., 2012), manifold regularization (ManiReg) (Belkin et al.",
      "startOffset" : 45,
      "endOffset" : 66
    }, {
      "referenceID" : 2,
      "context" : ", 2012), manifold regularization (ManiReg) (Belkin et al., 2006) and skip-gram based graph embeddings (DeepWalk) (Perozzi et al.",
      "startOffset" : 43,
      "endOffset" : 64
    }, {
      "referenceID" : 21,
      "context" : ", 2006) and skip-gram based graph embeddings (DeepWalk) (Perozzi et al., 2014).",
      "startOffset" : 56,
      "endOffset" : 78
    }, {
      "referenceID" : 14,
      "context" : "We omit TSVM (Joachims, 1999), as it does not scale to the large number of classes in one of our datasets.",
      "startOffset" : 13,
      "endOffset" : 29
    }, {
      "referenceID" : 28,
      "context" : "Lastly, we compare against Planetoid (Yang et al., 2016), where we always choose their bestperforming model variant (transductive vs.",
      "startOffset" : 37,
      "endOffset" : 56
    }, {
      "referenceID" : 23,
      "context" : "We compare against the same baseline methods as in Yang et al. (2016), i.",
      "startOffset" : 51,
      "endOffset" : 70
    }, {
      "referenceID" : 2,
      "context" : ", 2012), manifold regularization (ManiReg) (Belkin et al., 2006) and skip-gram based graph embeddings (DeepWalk) (Perozzi et al., 2014). We omit TSVM (Joachims, 1999), as it does not scale to the large number of classes in one of our datasets. We further compare against the iterative classification algorithm (ICA) proposed in Lu & Getoor (2003) in conjunction with two logistic regression classifiers, one for local node features alone and one for relational classification using local features and an aggregation operator as described in Sen et al.",
      "startOffset" : 44,
      "endOffset" : 347
    }, {
      "referenceID" : 2,
      "context" : ", 2012), manifold regularization (ManiReg) (Belkin et al., 2006) and skip-gram based graph embeddings (DeepWalk) (Perozzi et al., 2014). We omit TSVM (Joachims, 1999), as it does not scale to the large number of classes in one of our datasets. We further compare against the iterative classification algorithm (ICA) proposed in Lu & Getoor (2003) in conjunction with two logistic regression classifiers, one for local node features alone and one for relational classification using local features and an aggregation operator as described in Sen et al. (2008). We first train the local classifier using all labeled training set nodes and use it to bootstrap class labels of unlabeled nodes for relational classifier training.",
      "startOffset" : 44,
      "endOffset" : 559
    }, {
      "referenceID" : 2,
      "context" : ", 2012), manifold regularization (ManiReg) (Belkin et al., 2006) and skip-gram based graph embeddings (DeepWalk) (Perozzi et al., 2014). We omit TSVM (Joachims, 1999), as it does not scale to the large number of classes in one of our datasets. We further compare against the iterative classification algorithm (ICA) proposed in Lu & Getoor (2003) in conjunction with two logistic regression classifiers, one for local node features alone and one for relational classification using local features and an aggregation operator as described in Sen et al. (2008). We first train the local classifier using all labeled training set nodes and use it to bootstrap class labels of unlabeled nodes for relational classifier training. We run iterative classification (relational classifier) with a random node ordering for 10 iterations on all unlabeled nodes (bootstrapped using the local classifier). L2 regularization parameter and aggregation operator (count vs. prop, see Sen et al. (2008)) are chosen based on validation set performance for each dataset separately.",
      "startOffset" : 44,
      "endOffset" : 985
    }, {
      "referenceID" : 28,
      "context" : "Results for all other baseline methods are taken from the Planetoid paper (Yang et al., 2016).",
      "startOffset" : 74,
      "endOffset" : 93
    }, {
      "referenceID" : 28,
      "context" : "We trained and tested our model on the same dataset splits as in Yang et al. (2016) and report mean accuracy of 100 runs with random weight initializations.",
      "startOffset" : 65,
      "endOffset" : 84
    }, {
      "referenceID" : 28,
      "context" : "We trained and tested our model on the same dataset splits as in Yang et al. (2016) and report mean accuracy of 100 runs with random weight initializations. We used the following sets of hyperparameters for Citeseer, Cora and Pubmed: 0.5 (dropout rate), 5 · 10−4 (L2 regularization) and 16 (number of hidden units); and for NELL: 0.1 (dropout rate), 1 · 10−5 (L2 regularization) and 64 (number of hidden units). In addition, we report performance of our model on 10 randomly drawn dataset splits of the same size as in Yang et al. (2016), denoted by GCN (rand.",
      "startOffset" : 65,
      "endOffset" : 538
    }, {
      "referenceID" : 31,
      "context" : "Methods based on graph-Laplacian regularization (Zhu et al., 2003; Belkin et al., 2006; Weston et al., 2012) are most likely limited due to their assumption that edges encode mere similarity of nodes.",
      "startOffset" : 48,
      "endOffset" : 108
    }, {
      "referenceID" : 2,
      "context" : "Methods based on graph-Laplacian regularization (Zhu et al., 2003; Belkin et al., 2006; Weston et al., 2012) are most likely limited due to their assumption that edges encode mere similarity of nodes.",
      "startOffset" : 48,
      "endOffset" : 108
    }, {
      "referenceID" : 27,
      "context" : "Methods based on graph-Laplacian regularization (Zhu et al., 2003; Belkin et al., 2006; Weston et al., 2012) are most likely limited due to their assumption that edges encode mere similarity of nodes.",
      "startOffset" : 48,
      "endOffset" : 108
    } ],
    "year" : 2017,
    "abstractText" : "We present a scalable approach for semi-supervised learning on graph-structured data that is based on an efficient variant of convolutional neural networks which operate directly on graphs. We motivate the choice of our convolutional architecture via a localized first-order approximation of spectral graph convolutions. Our model scales linearly in the number of graph edges and learns hidden layer representations that encode both local graph structure and features of nodes. In a number of experiments on citation networks and on a knowledge graph dataset we demonstrate that our approach outperforms related methods by a significant margin.",
    "creator" : "TeX"
  }
}