{
  "name" : "330.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "MENTS THROUGH CORRUPTION",
    "authors" : [ "Minmin Chen" ],
    "emails" : [ "m.chen@criteo.com" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "Text understanding starts with the challenge of finding machine-understandable representation that captures the semantics of texts. Bag-of-words (BoW) and its N-gram extensions are arguably the most commonly used document representations. Despite its simplicity, BoW works surprisingly well for many tasks (Wang & Manning, 2012). However, by treating words and phrases as unique and discrete symbols, BoW often fails to capture the similarity between words or phrases and also suffers from sparsity and high dimensionality.\nRecent works on using neural networks to learn distributed vector representations of words have gained great popularity. The well celebrated Word2Vec (Mikolov et al., 2013a), by learning to predict the target word using its neighboring words, maps words of similar meanings to nearby points in the continuous vector space. The surprisingly simple model has succeeded in generating high-quality word embeddings for tasks such as language modeling, text understanding and machine translation. Word2Vec naturally scales to large datasets thanks to its simple model architecture. It can be trained on billions of words per hour on a single machine.\nParagraph Vectors (Le & Mikolov, 2014) generalize the idea to learn vector representation for documents. A target word is predicted by the word embeddings of its neighbors in together with a unique document vector learned for each document. It outperforms established document representations, such as BoW and Latent Dirichlet Allocation (Blei et al., 2003), on various text understanding tasks (Dai et al., 2015). However, two caveats come with this approach: 1) the number of parameters grows with the size of the training corpus, which can easily go to billions; and 2) it is expensive to generate vector representations for unseen documents at test time.\nWe propose an efficient model architecture, referred to as Document Vector through Corruption (Doc2VecC), to learn vector representations for documents. It is motivated by the observation that linear operations on the word embeddings learned by Word2Vec can sustain substantial amount of syntactic and semantic meanings of a phrase or a sentence (Mikolov et al., 2013b). For example, vec(“Russia”) + vec(“river”) is close to vec(“Volga River”) (Mikolov & Dean, 2013), and\nvec(“king”) - vec(“man”) + vec(“women”) is close to vec(“queen”) (Mikolov et al., 2013b). In Doc2VecC, we represent each document as a simple average of the word embeddings of all the words in the document. In contrast to existing approaches which post-process learned word embeddings to form document representation (Socher et al., 2013; Mesnil et al., 2014), Doc2VecC enforces a meaningful document representation can be formed by averaging the word embeddings during learning. Furthermore, we include a corruption model that randomly remove words from a document during learning, a mechanism that is critical to the performance and learning speed of our algorithm.\nDoc2VecC has several desirable properties: 1. The model complexity of Doc2VecC is decoupled from the size of the training corpus, depending only on the size of the vocabulary; 2. The model architecture of Doc2VecC resembles that of Word2Vec, and can be trained very efficiently; 3. The new framework implicitly introduces a data-dependent regularization, which favors rare or informative words and suppresses words that are common but not discriminative; 4. Vector representation of a document can be generated by simply averaging the learned word embeddings of all the words in the document, which significantly boost test efficiency; 5. The vector representation generated by Doc2VecC matches or beats the state-of-the-art for sentiment analysis, document classification as well as semantic relatedness tasks."
    }, {
      "heading" : "2 RELATED WORKS AND NOTATIONS",
      "text" : "Text representation learning has been extensively studied. Popular representations range from the simplest BoW and its term-frequency based variants (Salton & Buckley, 1988), language model based methods (Croft & Lafferty, 2013; Mikolov et al., 2010; Kim et al., 2015), topic models (Deerwester et al., 1990; Blei et al., 2003), Denoising Autoencoders and its variants (Vincent et al., 2008; Chen et al., 2012), and distributed vector representations (Mesnil et al., 2014; Le & Mikolov, 2014; Kiros et al., 2015). Another prominent line of work includes learning task-specific document representation with deep neural networks, such as CNN (Zhang & LeCun, 2015) or LSTM based approaches (Tai et al., 2015; Dai & Le, 2015).\nIn this section, we briefly introduce Word2Vec and Paragraph Vectors, the two approaches that are most similar to ours. There are two well-know model architectures used for both methods, referred to as Continuous Bag-of-Words (CBoW) and Skipgram models (Mikolov et al., 2013a). In this work, we focus on CBoW. Extending to Skipgram is straightforward. Here are the notations we are going to use throughout the paper:\nD = {D1, · · · , Dn}: a training corpus of size n, in which each document Di contains a variablelength sequence of words w1i , · · · , w Ti i ;\nV : the vocabulary used in the training corpus, of sizes v;\nx ∈ Rv×1: BoW of a document, where xj = 1 iff word j does appear in the document. ct ∈ Rv×1: BoW of the local context wt−k, · · · , wt−1, wt+1, · · · , wt+k at the target position t. ctj = 1 iff word j appears within the sliding window of the target;\nU ∈ Rh×v: the projection matrix from the input space to a hidden space of size h. We use uw to denote the column in U for word w, i.e., the “input“ vector of word w;\nV> ∈ Rv×h: the projection matrix from the hidden space to output. Similarly, we use vw to denote the column in V for word w, i.e., the “output“ vector of word w.\nWord2Vec. Word2Vec proposed a neural network architecture of an input layer, a projection layer parameterized by the matrix U and an output layer by V>. It defines the probability of observing the target word wt in a document D given its local context ct as\nP (wt|ct) = exp(v>wtUc t)∑ w′∈V exp(v > w′Uc t)\nThe word vectors are then learned to maximize the log likelihood of observing the target word at each position of the document. Various techniques (Mitchell & Lapata, 2010; Zanzotto et al., 2010; Yessenalina & Cardie, 2011; Grefenstette et al., 2013; Socher et al., 2013; Kusner et al., 2015)\nhave been studied to generate vector representations of documents from word embeddings, among which the simplest approach is to use weighted average of word embeddings. Similarly, our method forms document representation by averaging word embeddings of all the words in the document. Differently, as our model encodes the compositionality of words in the learned word embeddings, heuristic weighting at test time is not required.\nParagraph Vectors. Paragraph Vectors, on the other hands, explicitly learns a document vector with the word embeddings. It introduces another projection matrix D ∈ Rh×n. Each column of D acts as a memory of the global topic of the corresponding document. It then defines the probability of observing the target word wt in a document D given its local context ct as\nP (wt|ct,d) = exp(v>wt(Uc t + d))∑ w′∈V exp(v > w′(Uc t + d))\nwhere d ∈ D is the vector representation of the document. As we can see from this formula, the complexity of Paragraph Vectors grows with not only the size of the vocabulary, but also the size of the training corpus. While we can reasonably limit the size of a vocabulary to be within a million for most datasets, the size of a training corpus can easily go to billions. What is more concerning is that, in order to come up with the vector representations of unseen documents, we need to perform an expensive inference by appending more columns to D and gradient descent on D while fixing other parameters of the learned model."
    }, {
      "heading" : "3 METHOD",
      "text" : "Several works (Mikolov & Dean, 2013; Mikolov et al., 2013b) showcased that syntactic and semantic regularities of phrases and sentences are reasonably well preserved by adding or subtracting word embeddings learned through Word2Vec. It prompts us to explore the option of simply representing a document as an average of word embeddings. Figure 1 illustrates the new model architecture.\nSimilar to Word2Vec or Paragraph Vectors, Doc2VecC consists of an input layer, a projection layer as well as an output layer to predict the target word, “ceremony” in this example. The embeddings of neighboring words (“opening”, “for”, “the”) provide local context while the vector representation of the entire document (shown in grey) serves as the global context. In contrast to Paragraph Vectors, which directly learns a unique vector for each document, Doc2VecC represents each document as an average of the embeddings of words randomly sampled from the document (“performance” at position p, “praised” at position q, and “brazil” at position r).\nHuang et al. (2012) also proposed the idea of using average of word embeddings to represent the global context of a document. Different from their work, we choose to corrupt the original document by randomly removing significant portion of words, and represent the document using only the embeddings of the words remained. This corruption mechanism offers us great speedup during training as it significantly reduces the number of parameters to update in back propagation. At the same time, as we are going to detail in the next section, it introduces a special form of regularization, which brings great performance improvement.\nHere we describe the stochastic process we used to generate a global context at each update. The global context, which we denote as x̃, is generated through a unbiased mask-out/drop-out corruption, in which we randomly overwrites each dimension of the original document x with probability q. To make the corruption unbiased, we set the uncorrupted dimensions to 1/(1 − q) times its original value. Formally,\nx̃d = { 0, with probability q xd 1−q , otherwise\n(1)\nDoc2VecC then defines the probability of observing a target word wt given its local context ct as well as the global context x̃ as\nP (wt|ct, x̃) = exp(v>wt(\nlocal context︷︸︸︷ Uct + global context︷ ︸︸ ︷ 1\nT Ux̃ ))∑\nw′∈V exp(v > w′ ( Uct + 1T Ux̃) ) (2) Here T is the length of the document. Exactly computing the probability is impractical, instead we approximate it with negative sampling (Mikolov et al., 2013a).\nf(w, c, x̃) ≡ logP (wt|ct, x̃) ≈ log σ ( v>w(Uc + 1\nT Ux̃)\n) + ∑\nw′∼Pv\nlog σ ( −v>w′(Uc + 1\nT Ux̃)\n) (3)\nhere Pv stands for a uniform distribution over the terms in the vocabulary. The two projection matrices U and V are then learned to minimize the loss:\n` = − n∑\ni=1 Ti∑ t=1 f(wti , c t i, x̃ t i) (4)\nGiven the learned projection matrix U, we then represent each document simply as an average of the embeddings of the words in the document,\nd = 1\nT ∑ w∈D uw. (5)\nWe are going to elaborate next why we choose to corrupt the original document with the corruption model in eq.(1) during learning, and how it enables us to simply use the average word embeddings as the vector representation for documents at test time."
    }, {
      "heading" : "3.1 CORRUPTION AS DATA-DEPENDENT REGULARIZATION",
      "text" : "We approximate the log likelihood for each instance f(w, c, x̃) in eq.(4) with its Taylor expansion with respect to x̃ up to the second-order (Van Der Maaten et al., 2013; Wager et al., 2013; Chen et al., 2014). Concretely, we choose to expand at the mean of the corruption µx = Ep(x̃|x)[x̃]:\nf(w, c, x̃) ≈ f(w, c, µx) + (x̃− µx)>∇x̃f + 1\n2 (x̃− µx)>∇2x̃f(x̃− µx)\nwhere ∇x̃f and ∇2x̃f are the first-order (i.e., gradient) and second-order (i.e., Hessian) of the log likelihood with respect to x̃. Expansion at the mean µx is crucial as shown in the following steps. Let us assume that for each instance, we are going to sample the global context x̃ infinitely many times, and thus compute the expected log likelihood with respect to the corrupted x̃.\nEp(x̃|x)[f(w, c, x̃)] ≈ f(w, c, µx) + 1 2 tr ( E[(x̃− x)(x̃− x)>]∇2x̃f ) The linear term disappears as Ep(x̃|x)[x̃ − µx] = 0. We substitute in x for the mean µx of the corrupting distribution (unbiased corruption) and the matrix Σx = E[(x̃ − µx)(x̃ − µx)>] for the variance, and obtain\nEp(x̃|x)[f(w, c, x̃)] ≈ f(w, c,x) + 1 2 tr ( Σx∇2x̃f ) (6)\nAs each word in a document is corrupted independently of others, the variance matrix Σx is simplified to a diagonal matrix with jth element equals q1−qx 2 j . As a result, we only need to compute the diagonal terms of the Hessian matrix∇2x̃f .\nThe jth dimension of the Hessian’s diagonal evaluated at the mean x is given by\n∂2f ∂x2j = −σw,c,x(1− σw,c,x)( 1 T v>wuj)\n2 − ∑\nw′∼Pv\nσw′,c,x(1− σw′,c,x)( 1\nT v>w′uj) 2\nPlug the Hessian matrix and the variance matrix back into eq.(6), and then back to the loss defined in eq.(4), we can see that Doc2VecC intrinsically minimizes\n` = − n∑\ni=1 Ti∑ t=1 f(wti , c t i,xi) + q 1− q v∑ j=1 R(uj) (7)\nEach f(wti , c t i,xi) in the first term measures the log likelihood of observing the target word w t i given its local context cti and the document vector di = 1 T Uxi. As such, Doc2VecC enforces that a document vector generated by averaging word embeddings can capture the global semantics of the document, and fill in information missed in the local context.\nThe second term here is a data-dependent regularization. The regularization on the embedding uj of each word j takes the following form, R(uj) ∝ n∑\ni=1 Ti∑ t=1 x2ij [ σwti ,cti,xi(1− σwti ,cti,xi)( 1 T v>wti uj) 2 + ∑ w′∼Pv σw′,cti,xi(1− σw′,cti,xi)( 1 T v>w′uj) 2 ] where σw,c,x = σ(v>w(Uc+ 1 T Ux)) prescribes the confidence of predicting the target wordw given its neighboring context c as well as the document vector d = 1T Ux.\nClosely examining R(uj) leads to several interesting findings: 1. the regularizer penalizes more on the embeddings of common words. A word j that frequently appears across the training corpus, i.e, xij = 1 often, will have a bigger regularization than a rare word; 2. on the other hand, the regularization is modulated by σw,c,x(1 − σw,c,x), which is small if σw,c,x → 1 or 0. In other words, if uj is critical to a confident prediction σw,c,x when it is active, then the regularization is diminished. Similar effect was observed for dropout training for logistic regression model (Wager et al., 2013) and denoising autoencoders (Chen et al., 2014)."
    }, {
      "heading" : "4 EXPERIMENTS",
      "text" : "We evaluate Doc2VecC on a sentiment analysis task, a document classification task and a semantic relatedness task, along with several document representation learning algorithms. All experiments can be reproduced using the code available at https://github.com/mchen24/iclr2017"
    }, {
      "heading" : "4.1 BASELINES",
      "text" : "We compare against the following document representation baselines: bag-of-words (BoW); Denoising Autoencoders (DEA) (Vincent et al., 2008), a representation learned from reconstructing original document x using corrupted one x̃. SDAs have been shown to be the state-of-the-art for sentiment analysis tasks (Glorot et al., 2011). We used Kullback-Liebler divergence as the reconstruction error and an affine encoder. To scale up the algorithm to large vocabulary, we only take into account the non-zero elements of x in the reconstruction error and employed negative sampling for the remainings; Word2Vec (Mikolov et al., 2013a)+IDF, a representation generated through weighted average of word vectors learned using Word2Vec; Doc2Vec (Le & Mikolov, 2014); Skip-thought Vectors(Kiros et al., 2015), a generic, distributed sentence encoder that extends the Word2Vec skipgram model to sentence level. It has been shown to produce highly generic sentence representations that apply to various natural language processing tasks. We also include RNNLM (Mikolov et al., 2010), a recurrent neural network based language model in the comparison. In the semantic relatedness task, we further compare to LSTM-based methods (Tai et al., 2015) that have been reported on this dataset."
    }, {
      "heading" : "4.2 SENTIMENT ANALYSIS",
      "text" : "For sentiment analysis, we use the IMDB movie review dataset. It contains 100,000 movies reviews categorized as either positive or negative. It comes with predefined train/test split (Maas et al., 2011): 25,000 reviews are used for training, 25,000 for testing, and the rest as unlabeled data. The two classes are balanced in the training and testing sets. We remove words that appear less than 10 times in the training set, resulting in a vocabulary of 43,375 distinct words and symbols.\nSetup. We test the various representation learning algorithms under two settings: one follows the same protocol proposed in (Mesnil et al., 2014), where representation is learned using all the available data, including the test set; another one where the representation is learned using training and unlabeled set only. For both settings, a linear support vector machine (SVM) (Fan et al., 2008) is trained afterwards on the learned representation for classification. For Skip-thought Vectors, we used the generic model1 trained on a much bigger book corpus to encode the documents. A vector of 4800 dimensions, first 2400 from the uni-skip model, and the last 2400 from the bi-skip model, are generated for each document. In comparison, all the other algorithms produce a vector representation of size 100. The supervised RNN-LM is learned on the training set only. The hyper-parameters are tuned on a validation set subsampled from the training set.\nAccuracy. Comparing the two columns in Table 1, we can see that all the representation learning algorithms benefits from including the testing data during the representation learning phrase. Doc2VecC achieved similar or even better performance than Paragraph Vectors. Both methods outperforms the other baselines, beating the BOW representation by 15%. In comparison with Word2Vec+IDF, which applies post-processing on learned word embeddings to form document representation, Doc2VecC naturally enforces document semantics to be captured by averaged word embeddings during training. This leads to better performance. Doc2VecC reduces to Denoising Autoencoders (DEA) if the local context words are removed from the paradigm shown in Figure 1. By including the context words, Doc2VecC allows the document vector to focus more on capturing the global context. Skip-thought vectors perform surprisingly poor on this dataset comparing to other methods. We hypothesized that it is due to the length of paragraphs in this dataset. The average length of paragraphs in the IMDB movie review dataset is 296.5, much longer than the ones used for training and testing in the original paper, which is in the order of 10. As noted in (Tai et al., 2015), the performance of LSTM based method (similarly, the gated RNN used in Skip-thought vectors) drops significantly with increasing paragraph length, as it is hard to preserve state over long sequences of words.\nTime. Table 2 summarizes the time required by these algorithms to learn and generate the document representation. Word2Vec is the fastest one to train. Denoising Autoencoders and Doc2VecC second that. The number of parameters that needs to be back-propagated in each update was increased by the number of surviving words in x̃. We found that both models are not sensitive to the corruption rate q in the noise model. Since the learning time decreases with higher corruption rate, we used q = 0.9 throughout the experiments. Paragraph Vectors takes longer time to train as there are more parameters (linear to the number of document in the learning set) to learn. At test time, Word2Vec+IDF, DEA and Doc2VecC all use (weighted) averaging of word embeddings as document\n1available at https://github.com/ryankiros/skip-thoughts\nrepresentation. Paragraph Vectors, on the other hand, requires another round of inference to produce the vector representation of unseen test documents. It takes Paragraph Vectors 4 minutes and 17 seconds to infer the vector representations for the 25,000 test documents, in comparison to 7 seconds for the other methods. As we did not re-train the Skip-thought vector models on this dataset, the training time2 reported in the table is the time it takes to generate the embeddings for the 25,000 training documents. Due to repeated high-dimensional matrix operations required for encoding long paragraphs, it takes fairly long time to generate the representations for these documents. Similarly for testing. The experiments were conducted on a desktop with Intel i7 2.2Ghz cpu.\nData dependent regularization. As explained in Section 3.1, the corruption introduced in Doc2VecC acts as a data-dependent regularization that suppresses the embeddings of frequent but uninformative words. Here we conduct an experiment to exam the effect. We used a cutoff of 100 in this experiment. Table 3 lists the words having the smallest l2 norm of embeddings found by different algorithms. The number inside the parenthesis after each word is the number of times this word appears in the learning set. In word2Vec or Paragraph Vectors, the least frequent words have embeddings that are close to zero, despite some of them being indicative of sentiment such as debacle, bliss and shabby. In contrast, Doc2VecC manages to clamp down the representation of words frequently appear in the training set, but are uninformative, such as symbols and stop words.\nSubsampling frequent words. Note that for all the numbers reported, we applied the trick of subsampling of frequent words introduced in (Mikolov & Dean, 2013) to counter the imbalance between frequent and rare words. It is critical to the performance of simple Word2Vec+AVG as the sole remedy to diminish the contribution of common words in the final document representation. If we were to remove this step, the error rate of Word2Vec+AVG will increases from 12.1% to 13.2%. Doc2VecC on the other hand naturally exerts a stronger regularization toward embeddings of words that are frequent but uninformative, therefore does not rely on this trick."
    }, {
      "heading" : "4.3 WORD ANALOGY",
      "text" : "In table 3, we demonstrated that the corruption model introduced in Doc2VecC dampens the embeddings of words which are common and non-discriminative (stop words). In this experiment, we are going to quantatively compare the word embeddings generated by Doc2VecC to the ones generated by Word2Vec, or Paragraph Vectors on the word analogy task introduced by Mikolov et al. (2013a). The dataset contains five types of semantic questions, and nine types of syntactic questions, with a total of 8,869 semantic and 10,675 syntactic questions. The questions are answered through simple linear algebraic operations on the word embeddings generated by different methods. Please refer to the original paper for more details on the evaluation protocol.\n2As reported in the original paper, training of the skip-thought vector model on the book corpus dataset takes around 2 weeks on GPU.\nWe trained the word embeddings of different methods using the English news dataset released under the ACL workshop on statistical machine translation. The training set includes close to 15M paragraphs with 355M tokens. We compare the performance of word embeddings trained by different methods with increasing embedding dimensionality as well as increasing training data.\nWe observe similar trends as in Mikolov et al. (2013a). Increasing embedding dimensionality as well as training data size improves performance of the word embeddings on this task. However, the improvement is diminishing. Doc2VecC produces word embeddings which performs significantly better than the ones generated by Word2Vec. We observe close to 20% uplift when we train on the full training corpus. Paragraph vectors on the other hand performs surprisingly bad on this dataset. Our hypothesis is that due to the large capacity of the model architecture, Paragraph Vectors relies mostly on the unique document vectors to capture the information in a text document instead of learning the word semantic or syntactic similarities. This also explains why the PV-DBOW Le & Mikolov (2014) model architecture proposed in the original work, which completely removes word embedding layers, performs comparable to the distributed memory version.\nIn table 5, we list a detailed comparison of the performance of word embeddings generated by Word2Vec and Doc2VecC on the 14 subtasks, when trained on the full dataset with embedding of size 100. We can see that Doc2VecC significantly outperforms the word embeddings produced by Word2Vec across almost all the subtasks."
    }, {
      "heading" : "4.4 DOCUMENT CLASSIFICATION",
      "text" : "For the document classification task, we use a subset of the wikipedia dump, which contains over 300,000 wikipedia pages in 100 categories. The 100 categories includes categories under sports,\nTable 5: Classification error (%) of a linear classifier trained on various document representations on the Wikipedia dataset.\nModel BOW DEA Word2Vec + AVG Word2Vec + IDF ParagraphVectors Doc2VecC h = 100 36.03 32.30 33.2 33.16 35.78 31.92 h = 200 36.03 31.36 32.46 32.48 34.92 30.84 h = 500 36.03 31.10 32.02 32.13 33.93 30.43 h = 1000 36.03 31.13 31.78 32.06 33.02 30.24\n(a) Doc2Vec (b) Doc2VecC\nFigure 3: Visualization of document vectors on Wikipedia dataset using t-SNE.\nentertainment, literature, and politics etc. Examples of categories include American drama films, Directorial debut films, Major League Baseball pitchers and Sydney Swans players. Body texts (the second paragraph) were extracted for each page as a document. For each category, we select 1,000 documents with unique category label, and 100 documents were used for training and 900 documents for testing. The remaining documents are used as unlabeled data. The 100 classes are balanced in the training and testing sets. For this data set, we learn the word embedding and document representation for all the algorithms using all the available data. We apply a cutoff of 10, resulting in a vocabulary of size 107, 691.\nTable 5 summarizes the classification error of a linear SVM trained on representations of different sizes. We can see that most of the algorithms are not sensitive to the size of the vector representation. Doc2Vec benefits most from increasing representation size. Across all sizes of representations, Doc2VecC outperform the existing algorithms by a significant margin. In fact, Doc2VecC can achieve same or better performance with a much smaller representation vector.\nFigure 3 visualizes the document representations learned by Doc2Vec (left) and Doc2VecC (right) using t-SNE (Maaten & Hinton, 2008). We can see that documents from the same category are nicely clustered using the representation generated by Doc2VecC. Doc2Vec, on the other hand, does not produce a clear separation between different categories, which explains its worse performance reported in Table 5.\nFigure 4 visualizes the vector representation generated by Doc2VecC w.r.t. coarser categorization. we manually grouped the 100 categories into 7 coarse categories, television, albums, writers, musicians, athletes, species and actors. Categories that do no belong to any of these 7 groups are not included in the figure.\nWe can see that documents belonging to a coarser category are grouped together. This subset includes is a wide range of sports descriptions, ranging from football, crickets, baseball, and cycling etc., which explains why the athletes category are less concentrated. In the projection, we can see documents belonging to the musician category are closer to those belonging to albums category than those of athletes or species."
    }, {
      "heading" : "4.5 SEMANTIC RELATEDNESS",
      "text" : "We test Doc2VecC on the SemEval 2014 Task 1: semantic relatedness SICK dataset (Marelli et al., 2014). Given two sentences, the task is to determine how closely they are semantically related. The set contains 9,927 pairs of sentences with human annotated relatedness score, ranging from 1 to 5. A score of 1 indicates that the two sentences are not related, while 5 indicates high relatedness. The set is splitted into a training set of 4,500 instances, a validation set of 500, and a test set of 4,927.\nWe compare Doc2VecC with several winning solutions of the competition as well as several more recent techniques reported on this dataset, including bi-directional LSTM and Tree-LSTM3 trained from scratch on this dataset, Skip-thought vectors learned a large book corpus 4 (Zhu et al., 2015) and produced sentence embeddings of 4,800 dimensions on this dataset. We follow the same protocol as in skip-thought vectors, and train Doc2VecC on the larger book corpus dataset. Contrary to the vocabulary expansion technique used in (Kiros et al., 2015) to handle out-of-vocabulary words, we extend the vocabulary of the learned model directly on the target dataset in the following way: we use the pre-trained word embedding as an initialization, and fine-tune the word and sentence representation on the SICK dataset. Notice that the fine-tuning is done for sentence representation learning only, and we did not use the relatedness score in the learning. This step brings small improvement to the performance of our algorithm. Given the sentence embeddings, we used the exact same training and testing protocol as in (Kiros et al., 2015) to score each pair of sentences: with two sentence embedding u1 and u2, we concatenate their component-wise product, u1 ·u2 and their absolute difference, |u1 − u2| as the feature representation. Table 6 summarizes the performance of various algorithms on this dataset. Despite its simplicity, Doc2VecC significantly out-performs the winning solutions of the competition, which are heavily feature engineered toward this dataset and several baseline methods, noticeably the dependency-tree RNNs introduced in (Socher et al., 2014), which relies on expensive dependency parsers to compose sentence vectors from word embeddings. The performance of Doc2VecC is slightly worse than the LSTM based methods or skip-thought vectors on this dataset, while it significantly outperforms skip-thought vectors on the IMDB movie review dataset (11.70% error rate vs 17.42%). As we hypothesized in previous section, while Doc2VecC is better at handling longer paragraphs, LSTMbased methods are superior for relatively short sentences (of length in the order of 10s). We would like to point out that Doc2VecC is much faster to train and test comparing to skip-thought vectors. It takes less than 2 hours to learn the embeddings on the large book corpus for Doc2VecC on a desktop with Intel i7 2.2Ghz cpu, in comparison to the 2 weeks on GPU required by skip-thought vectors."
    }, {
      "heading" : "5 CONCLUSION",
      "text" : "We introduce a new model architecture Doc2VecC for document representation learning. It is very efficient to train and test thanks to its simple model architecture. Doc2VecC intrinsically makes sure document representation generated by averaging word embeddings capture semantics of document during learning. It also introduces a data-dependent regularization which favors informative or rare words while dampening the embeddings of common and non-discriminative words. As such, each document can be efficiently represented as a simple average of the learned word embeddings. In comparison to several existing document representation learning algorithms, Doc2VecC outperforms not only in testing efficiency, but also in the expressiveness of the generated representations.\n3The word representation was initialized using publicly available 300-dimensional Glove vectors trained on 840 billion tokens of Common Crawl data\n4The dataset contains 11,038 books with over one billion words"
    } ],
    "references" : [ {
      "title" : "Latent dirichlet allocation",
      "author" : [ "David M Blei", "Andrew Y Ng", "Michael I Jordan" ],
      "venue" : "Journal of machine Learning research,",
      "citeRegEx" : "Blei et al\\.,? \\Q2003\\E",
      "shortCiteRegEx" : "Blei et al\\.",
      "year" : 2003
    }, {
      "title" : "Marginalized denoising autoencoders for domain adaptation",
      "author" : [ "Minmin Chen", "Zhixiang Xu", "Kilian Weinberger", "Fei Sha" ],
      "venue" : "arXiv preprint arXiv:1206.4683,",
      "citeRegEx" : "Chen et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Chen et al\\.",
      "year" : 2012
    }, {
      "title" : "Marginalized denoising autoencoders for nonlinear representations",
      "author" : [ "Minmin Chen", "Kilian Q Weinberger", "Fei Sha", "Yoshua Bengio" ],
      "venue" : "In ICML, pp",
      "citeRegEx" : "Chen et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Chen et al\\.",
      "year" : 2014
    }, {
      "title" : "Language modeling for information retrieval, volume 13",
      "author" : [ "Bruce Croft", "John Lafferty" ],
      "venue" : "Springer Science & Business Media,",
      "citeRegEx" : "Croft and Lafferty.,? \\Q2013\\E",
      "shortCiteRegEx" : "Croft and Lafferty.",
      "year" : 2013
    }, {
      "title" : "Semi-supervised sequence learning",
      "author" : [ "Andrew M Dai", "Quoc V Le" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Dai and Le.,? \\Q2015\\E",
      "shortCiteRegEx" : "Dai and Le.",
      "year" : 2015
    }, {
      "title" : "Document embedding with paragraph vectors",
      "author" : [ "Andrew M Dai", "Christopher Olah", "Quoc V Le" ],
      "venue" : "arXiv preprint arXiv:1507.07998,",
      "citeRegEx" : "Dai et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Dai et al\\.",
      "year" : 2015
    }, {
      "title" : "Indexing by latent semantic analysis",
      "author" : [ "Scott Deerwester", "Susan T Dumais", "George W Furnas", "Thomas K Landauer", "Richard Harshman" ],
      "venue" : "Journal of the American society for information science,",
      "citeRegEx" : "Deerwester et al\\.,? \\Q1990\\E",
      "shortCiteRegEx" : "Deerwester et al\\.",
      "year" : 1990
    }, {
      "title" : "Liblinear: A library for large linear classification",
      "author" : [ "Rong-En Fan", "Kai-Wei Chang", "Cho-Jui Hsieh", "Xiang-Rui Wang", "Chih-Jen Lin" ],
      "venue" : "JMLR, 9(Aug):1871–1874,",
      "citeRegEx" : "Fan et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Fan et al\\.",
      "year" : 2008
    }, {
      "title" : "Domain adaptation for large-scale sentiment classification: A deep learning approach",
      "author" : [ "Xavier Glorot", "Antoine Bordes", "Yoshua Bengio" ],
      "venue" : "In ICML, pp",
      "citeRegEx" : "Glorot et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Glorot et al\\.",
      "year" : 2011
    }, {
      "title" : "Multi-step regression learning for compositional distributional semantics",
      "author" : [ "Edward Grefenstette", "Georgiana Dinu", "Yao-Zhong Zhang", "Mehrnoosh Sadrzadeh", "Marco Baroni" ],
      "venue" : "arXiv preprint arXiv:1301.6939,",
      "citeRegEx" : "Grefenstette et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Grefenstette et al\\.",
      "year" : 2013
    }, {
      "title" : "Improving word representations via global context and multiple word prototypes",
      "author" : [ "Eric H Huang", "Richard Socher", "Christopher D Manning", "Andrew Y Ng" ],
      "venue" : "In ACL,",
      "citeRegEx" : "Huang et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Huang et al\\.",
      "year" : 2012
    }, {
      "title" : "Character-aware neural language models",
      "author" : [ "Yoon Kim", "Yacine Jernite", "David Sontag", "Alexander M Rush" ],
      "venue" : "arXiv preprint arXiv:1508.06615,",
      "citeRegEx" : "Kim et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Kim et al\\.",
      "year" : 2015
    }, {
      "title" : "Skip-thought vectors. In Advances in neural information processing",
      "author" : [ "Ryan Kiros", "Yukun Zhu", "Ruslan R Salakhutdinov", "Richard Zemel", "Raquel Urtasun", "Antonio Torralba", "Sanja Fidler" ],
      "venue" : null,
      "citeRegEx" : "Kiros et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Kiros et al\\.",
      "year" : 2015
    }, {
      "title" : "From word embeddings to document distances",
      "author" : [ "Matt J Kusner", "Yu Sun", "Nicholas I Kolkin", "Kilian Q Weinberger" ],
      "venue" : "In Proceedings of the 32nd International Conference on Machine Learning (ICML",
      "citeRegEx" : "Kusner et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Kusner et al\\.",
      "year" : 2015
    }, {
      "title" : "Distributed representations of sentences and documents",
      "author" : [ "Quoc V Le", "Tomas Mikolov" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Le and Mikolov.,? \\Q2014\\E",
      "shortCiteRegEx" : "Le and Mikolov.",
      "year" : 2014
    }, {
      "title" : "Learning word vectors for sentiment analysis",
      "author" : [ "Andrew L Maas", "Raymond E Daly", "Peter T Pham", "Dan Huang", "Andrew Y Ng", "Christopher Potts" ],
      "venue" : "In ACL,",
      "citeRegEx" : "Maas et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Maas et al\\.",
      "year" : 2011
    }, {
      "title" : "Visualizing data using t-sne",
      "author" : [ "Laurens van der Maaten", "Geoffrey Hinton" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "Maaten and Hinton.,? \\Q2008\\E",
      "shortCiteRegEx" : "Maaten and Hinton.",
      "year" : 2008
    }, {
      "title" : "Semeval-2014 task 1: Evaluation of compositional distributional semantic models on full sentences through semantic relatedness and textual entailment",
      "author" : [ "Marco Marelli", "Luisa Bentivogli", "Marco Baroni", "Raffaella Bernardi", "Stefano Menini", "Roberto Zamparelli" ],
      "venue" : null,
      "citeRegEx" : "Marelli et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Marelli et al\\.",
      "year" : 2014
    }, {
      "title" : "Ensemble of generative and discriminative techniques for sentiment analysis of movie reviews",
      "author" : [ "Grégoire Mesnil", "Tomas Mikolov", "Marc’Aurelio Ranzato", "Yoshua Bengio" ],
      "venue" : "arXiv preprint arXiv:1412.5335,",
      "citeRegEx" : "Mesnil et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Mesnil et al\\.",
      "year" : 2014
    }, {
      "title" : "Distributed representations of words and phrases and their compositionality",
      "author" : [ "T Mikolov", "J Dean" ],
      "venue" : "Advances in neural information processing systems,",
      "citeRegEx" : "Mikolov and Dean.,? \\Q2013\\E",
      "shortCiteRegEx" : "Mikolov and Dean.",
      "year" : 2013
    }, {
      "title" : "Recurrent neural network based language model",
      "author" : [ "Tomas Mikolov", "Martin Karafiát", "Lukas Burget", "Jan Cernockỳ", "Sanjeev Khudanpur" ],
      "venue" : "In Interspeech,",
      "citeRegEx" : "Mikolov et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2010
    }, {
      "title" : "Efficient estimation of word representations in vector space",
      "author" : [ "Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean" ],
      "venue" : "arXiv preprint arXiv:1301.3781,",
      "citeRegEx" : "Mikolov et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2013
    }, {
      "title" : "Linguistic regularities in continuous space word representations",
      "author" : [ "Tomas Mikolov", "Wen-tau Yih", "Geoffrey Zweig" ],
      "venue" : "In HLT-NAACL,",
      "citeRegEx" : "Mikolov et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2013
    }, {
      "title" : "Composition in distributional models of semantics",
      "author" : [ "Jeff Mitchell", "Mirella Lapata" ],
      "venue" : "Cognitive science,",
      "citeRegEx" : "Mitchell and Lapata.,? \\Q2010\\E",
      "shortCiteRegEx" : "Mitchell and Lapata.",
      "year" : 2010
    }, {
      "title" : "Term-weighting approaches in automatic text retrieval",
      "author" : [ "Gerard Salton", "Christopher Buckley" ],
      "venue" : "Information processing & management,",
      "citeRegEx" : "Salton and Buckley.,? \\Q1988\\E",
      "shortCiteRegEx" : "Salton and Buckley.",
      "year" : 1988
    }, {
      "title" : "Recursive deep models for semantic compositionality over a sentiment treebank",
      "author" : [ "Richard Socher", "Alex Perelygin", "Jean Y Wu", "Jason Chuang", "Christopher D Manning", "Andrew Y Ng", "Christopher Potts" ],
      "venue" : "In EMNLP,",
      "citeRegEx" : "Socher et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Socher et al\\.",
      "year" : 2013
    }, {
      "title" : "Grounded compositional semantics for finding and describing images with sentences",
      "author" : [ "Richard Socher", "Andrej Karpathy", "Quoc V Le", "Christopher D Manning", "Andrew Y Ng" ],
      "venue" : "Transactions of the Association for Computational Linguistics,",
      "citeRegEx" : "Socher et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Socher et al\\.",
      "year" : 2014
    }, {
      "title" : "Improved semantic representations from tree-structured long short-term memory networks",
      "author" : [ "Kai Sheng Tai", "Richard Socher", "Christopher D Manning" ],
      "venue" : "arXiv preprint arXiv:1503.00075,",
      "citeRegEx" : "Tai et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Tai et al\\.",
      "year" : 2015
    }, {
      "title" : "Extracting and composing robust features with denoising autoencoders",
      "author" : [ "Pascal Vincent", "Hugo Larochelle", "Yoshua Bengio", "Pierre-Antoine Manzagol" ],
      "venue" : "In Proceedings of the 25th international conference on Machine learning,",
      "citeRegEx" : "Vincent et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Vincent et al\\.",
      "year" : 2008
    }, {
      "title" : "Dropout training as adaptive regularization",
      "author" : [ "Stefan Wager", "Sida Wang", "Percy S Liang" ],
      "venue" : "In Advances in neural information processing systems,",
      "citeRegEx" : "Wager et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Wager et al\\.",
      "year" : 2013
    }, {
      "title" : "Baselines and bigrams: Simple, good sentiment and topic classification",
      "author" : [ "Sida Wang", "Christopher D Manning" ],
      "venue" : "In Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics: Short Papers-Volume",
      "citeRegEx" : "Wang and Manning.,? \\Q2012\\E",
      "shortCiteRegEx" : "Wang and Manning.",
      "year" : 2012
    }, {
      "title" : "Compositional matrix-space models for sentiment analysis",
      "author" : [ "Ainur Yessenalina", "Claire Cardie" ],
      "venue" : "In Proceedings of the Conference on Empirical Methods in Natural Language Processing,",
      "citeRegEx" : "Yessenalina and Cardie.,? \\Q2011\\E",
      "shortCiteRegEx" : "Yessenalina and Cardie.",
      "year" : 2011
    }, {
      "title" : "Estimating linear models for compositional distributional semantics",
      "author" : [ "Fabio Massimo Zanzotto", "Ioannis Korkontzelos", "Francesca Fallucchi", "Suresh Manandhar" ],
      "venue" : "In Proceedings of the 23rd International Conference on Computational Linguistics,",
      "citeRegEx" : "Zanzotto et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Zanzotto et al\\.",
      "year" : 2010
    }, {
      "title" : "Text understanding from scratch",
      "author" : [ "Xiang Zhang", "Yann LeCun" ],
      "venue" : "arXiv preprint arXiv:1502.01710,",
      "citeRegEx" : "Zhang and LeCun.,? \\Q2015\\E",
      "shortCiteRegEx" : "Zhang and LeCun.",
      "year" : 2015
    }, {
      "title" : "Aligning books and movies: Towards story-like visual explanations by watching movies and reading books",
      "author" : [ "Yukun Zhu", "Ryan Kiros", "Richard Zemel", "Ruslan Salakhutdinov", "Raquel Urtasun", "Antonio Torralba", "Sanja Fidler" ],
      "venue" : "In arXiv preprint arXiv:1506.06724,",
      "citeRegEx" : "Zhu et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Zhu et al\\.",
      "year" : 2015
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "It outperforms established document representations, such as BoW and Latent Dirichlet Allocation (Blei et al., 2003), on various text understanding tasks (Dai et al.",
      "startOffset" : 97,
      "endOffset" : 116
    }, {
      "referenceID" : 5,
      "context" : ", 2003), on various text understanding tasks (Dai et al., 2015).",
      "startOffset" : 45,
      "endOffset" : 63
    }, {
      "referenceID" : 25,
      "context" : "In contrast to existing approaches which post-process learned word embeddings to form document representation (Socher et al., 2013; Mesnil et al., 2014), Doc2VecC enforces a meaningful document representation can be formed by averaging the word embeddings during learning.",
      "startOffset" : 110,
      "endOffset" : 152
    }, {
      "referenceID" : 18,
      "context" : "In contrast to existing approaches which post-process learned word embeddings to form document representation (Socher et al., 2013; Mesnil et al., 2014), Doc2VecC enforces a meaningful document representation can be formed by averaging the word embeddings during learning.",
      "startOffset" : 110,
      "endOffset" : 152
    }, {
      "referenceID" : 20,
      "context" : "Popular representations range from the simplest BoW and its term-frequency based variants (Salton & Buckley, 1988), language model based methods (Croft & Lafferty, 2013; Mikolov et al., 2010; Kim et al., 2015), topic models (Deerwester et al.",
      "startOffset" : 145,
      "endOffset" : 209
    }, {
      "referenceID" : 11,
      "context" : "Popular representations range from the simplest BoW and its term-frequency based variants (Salton & Buckley, 1988), language model based methods (Croft & Lafferty, 2013; Mikolov et al., 2010; Kim et al., 2015), topic models (Deerwester et al.",
      "startOffset" : 145,
      "endOffset" : 209
    }, {
      "referenceID" : 6,
      "context" : ", 2015), topic models (Deerwester et al., 1990; Blei et al., 2003), Denoising Autoencoders and its variants (Vincent et al.",
      "startOffset" : 22,
      "endOffset" : 66
    }, {
      "referenceID" : 0,
      "context" : ", 2015), topic models (Deerwester et al., 1990; Blei et al., 2003), Denoising Autoencoders and its variants (Vincent et al.",
      "startOffset" : 22,
      "endOffset" : 66
    }, {
      "referenceID" : 28,
      "context" : ", 2003), Denoising Autoencoders and its variants (Vincent et al., 2008; Chen et al., 2012), and distributed vector representations (Mesnil et al.",
      "startOffset" : 49,
      "endOffset" : 90
    }, {
      "referenceID" : 1,
      "context" : ", 2003), Denoising Autoencoders and its variants (Vincent et al., 2008; Chen et al., 2012), and distributed vector representations (Mesnil et al.",
      "startOffset" : 49,
      "endOffset" : 90
    }, {
      "referenceID" : 18,
      "context" : ", 2012), and distributed vector representations (Mesnil et al., 2014; Le & Mikolov, 2014; Kiros et al., 2015).",
      "startOffset" : 48,
      "endOffset" : 109
    }, {
      "referenceID" : 12,
      "context" : ", 2012), and distributed vector representations (Mesnil et al., 2014; Le & Mikolov, 2014; Kiros et al., 2015).",
      "startOffset" : 48,
      "endOffset" : 109
    }, {
      "referenceID" : 27,
      "context" : "Another prominent line of work includes learning task-specific document representation with deep neural networks, such as CNN (Zhang & LeCun, 2015) or LSTM based approaches (Tai et al., 2015; Dai & Le, 2015).",
      "startOffset" : 173,
      "endOffset" : 207
    }, {
      "referenceID" : 32,
      "context" : "Various techniques (Mitchell & Lapata, 2010; Zanzotto et al., 2010; Yessenalina & Cardie, 2011; Grefenstette et al., 2013; Socher et al., 2013; Kusner et al., 2015)",
      "startOffset" : 19,
      "endOffset" : 164
    }, {
      "referenceID" : 9,
      "context" : "Various techniques (Mitchell & Lapata, 2010; Zanzotto et al., 2010; Yessenalina & Cardie, 2011; Grefenstette et al., 2013; Socher et al., 2013; Kusner et al., 2015)",
      "startOffset" : 19,
      "endOffset" : 164
    }, {
      "referenceID" : 25,
      "context" : "Various techniques (Mitchell & Lapata, 2010; Zanzotto et al., 2010; Yessenalina & Cardie, 2011; Grefenstette et al., 2013; Socher et al., 2013; Kusner et al., 2015)",
      "startOffset" : 19,
      "endOffset" : 164
    }, {
      "referenceID" : 13,
      "context" : "Various techniques (Mitchell & Lapata, 2010; Zanzotto et al., 2010; Yessenalina & Cardie, 2011; Grefenstette et al., 2013; Socher et al., 2013; Kusner et al., 2015)",
      "startOffset" : 19,
      "endOffset" : 164
    }, {
      "referenceID" : 10,
      "context" : "Huang et al. (2012) also proposed the idea of using average of word embeddings to represent the global context of a document.",
      "startOffset" : 0,
      "endOffset" : 20
    }, {
      "referenceID" : 29,
      "context" : "(4) with its Taylor expansion with respect to x̃ up to the second-order (Van Der Maaten et al., 2013; Wager et al., 2013; Chen et al., 2014).",
      "startOffset" : 72,
      "endOffset" : 140
    }, {
      "referenceID" : 2,
      "context" : "(4) with its Taylor expansion with respect to x̃ up to the second-order (Van Der Maaten et al., 2013; Wager et al., 2013; Chen et al., 2014).",
      "startOffset" : 72,
      "endOffset" : 140
    }, {
      "referenceID" : 29,
      "context" : "Similar effect was observed for dropout training for logistic regression model (Wager et al., 2013) and denoising autoencoders (Chen et al.",
      "startOffset" : 79,
      "endOffset" : 99
    }, {
      "referenceID" : 2,
      "context" : ", 2013) and denoising autoencoders (Chen et al., 2014).",
      "startOffset" : 35,
      "endOffset" : 54
    }, {
      "referenceID" : 28,
      "context" : "We compare against the following document representation baselines: bag-of-words (BoW); Denoising Autoencoders (DEA) (Vincent et al., 2008), a representation learned from reconstructing original document x using corrupted one x̃.",
      "startOffset" : 117,
      "endOffset" : 139
    }, {
      "referenceID" : 8,
      "context" : "SDAs have been shown to be the state-of-the-art for sentiment analysis tasks (Glorot et al., 2011).",
      "startOffset" : 77,
      "endOffset" : 98
    }, {
      "referenceID" : 12,
      "context" : ", 2013a)+IDF, a representation generated through weighted average of word vectors learned using Word2Vec; Doc2Vec (Le & Mikolov, 2014); Skip-thought Vectors(Kiros et al., 2015), a generic, distributed sentence encoder that extends the Word2Vec skipgram model to sentence level.",
      "startOffset" : 156,
      "endOffset" : 176
    }, {
      "referenceID" : 20,
      "context" : "We also include RNNLM (Mikolov et al., 2010), a recurrent neural network based language model in the comparison.",
      "startOffset" : 22,
      "endOffset" : 44
    }, {
      "referenceID" : 27,
      "context" : "In the semantic relatedness task, we further compare to LSTM-based methods (Tai et al., 2015) that have been reported on this dataset.",
      "startOffset" : 75,
      "endOffset" : 93
    }, {
      "referenceID" : 15,
      "context" : "It comes with predefined train/test split (Maas et al., 2011): 25,000 reviews are used for training, 25,000 for testing, and the rest as unlabeled data.",
      "startOffset" : 42,
      "endOffset" : 61
    }, {
      "referenceID" : 18,
      "context" : "We test the various representation learning algorithms under two settings: one follows the same protocol proposed in (Mesnil et al., 2014), where representation is learned using all the available data, including the test set; another one where the representation is learned using training and unlabeled set only.",
      "startOffset" : 117,
      "endOffset" : 138
    }, {
      "referenceID" : 7,
      "context" : "For both settings, a linear support vector machine (SVM) (Fan et al., 2008) is trained afterwards on the learned representation for classification.",
      "startOffset" : 57,
      "endOffset" : 75
    }, {
      "referenceID" : 27,
      "context" : "As noted in (Tai et al., 2015), the performance of LSTM based method (similarly, the gated RNN used in Skip-thought vectors) drops significantly with increasing paragraph length, as it is hard to preserve state over long sequences of words.",
      "startOffset" : 12,
      "endOffset" : 30
    }, {
      "referenceID" : 20,
      "context" : "In this experiment, we are going to quantatively compare the word embeddings generated by Doc2VecC to the ones generated by Word2Vec, or Paragraph Vectors on the word analogy task introduced by Mikolov et al. (2013a). The dataset contains five types of semantic questions, and nine types of syntactic questions, with a total of 8,869 semantic and 10,675 syntactic questions.",
      "startOffset" : 194,
      "endOffset" : 217
    }, {
      "referenceID" : 20,
      "context" : "We observe similar trends as in Mikolov et al. (2013a). Increasing embedding dimensionality as well as training data size improves performance of the word embeddings on this task.",
      "startOffset" : 32,
      "endOffset" : 55
    }, {
      "referenceID" : 20,
      "context" : "We observe similar trends as in Mikolov et al. (2013a). Increasing embedding dimensionality as well as training data size improves performance of the word embeddings on this task. However, the improvement is diminishing. Doc2VecC produces word embeddings which performs significantly better than the ones generated by Word2Vec. We observe close to 20% uplift when we train on the full training corpus. Paragraph vectors on the other hand performs surprisingly bad on this dataset. Our hypothesis is that due to the large capacity of the model architecture, Paragraph Vectors relies mostly on the unique document vectors to capture the information in a text document instead of learning the word semantic or syntactic similarities. This also explains why the PV-DBOW Le & Mikolov (2014) model architecture proposed in the original work, which completely removes word embedding layers, performs comparable to the distributed memory version.",
      "startOffset" : 32,
      "endOffset" : 786
    }, {
      "referenceID" : 17,
      "context" : "We test Doc2VecC on the SemEval 2014 Task 1: semantic relatedness SICK dataset (Marelli et al., 2014).",
      "startOffset" : 79,
      "endOffset" : 101
    }, {
      "referenceID" : 34,
      "context" : "We compare Doc2VecC with several winning solutions of the competition as well as several more recent techniques reported on this dataset, including bi-directional LSTM and Tree-LSTM3 trained from scratch on this dataset, Skip-thought vectors learned a large book corpus 4 (Zhu et al., 2015) and produced sentence embeddings of 4,800 dimensions on this dataset.",
      "startOffset" : 272,
      "endOffset" : 290
    }, {
      "referenceID" : 12,
      "context" : "Contrary to the vocabulary expansion technique used in (Kiros et al., 2015) to handle out-of-vocabulary words, we extend the vocabulary of the learned model directly on the target dataset in the following way: we use the pre-trained word embedding as an initialization, and fine-tune the word and sentence representation on the SICK dataset.",
      "startOffset" : 55,
      "endOffset" : 75
    }, {
      "referenceID" : 12,
      "context" : "Given the sentence embeddings, we used the exact same training and testing protocol as in (Kiros et al., 2015) to score each pair of sentences: with two sentence embedding u1 and u2, we concatenate their component-wise product, u1 ·u2 and their absolute difference, |u1 − u2| as the feature representation.",
      "startOffset" : 90,
      "endOffset" : 110
    }, {
      "referenceID" : 26,
      "context" : "Despite its simplicity, Doc2VecC significantly out-performs the winning solutions of the competition, which are heavily feature engineered toward this dataset and several baseline methods, noticeably the dependency-tree RNNs introduced in (Socher et al., 2014), which relies on expensive dependency parsers to compose sentence vectors from word embeddings.",
      "startOffset" : 239,
      "endOffset" : 260
    }, {
      "referenceID" : 27,
      "context" : "The first group of results are from the submission to the 2014 SemEval competition; the second group includes several baseline methods reported in (Tai et al., 2015); the third group are methods based on LSTM reported in (Tai et al.",
      "startOffset" : 147,
      "endOffset" : 165
    }, {
      "referenceID" : 27,
      "context" : ", 2015); the third group are methods based on LSTM reported in (Tai et al., 2015) as well as the skip-thought vectors (Kiros et al.",
      "startOffset" : 63,
      "endOffset" : 81
    }, {
      "referenceID" : 12,
      "context" : ", 2015) as well as the skip-thought vectors (Kiros et al., 2015).",
      "startOffset" : 44,
      "endOffset" : 64
    } ],
    "year" : 2017,
    "abstractText" : "We present an efficient document representation learning framework, Document Vector through Corruption (Doc2VecC). Doc2VecC represents each document as a simple average of word embeddings. It ensures a representation generated as such captures the semantic meanings of the document during learning. A corruption model is included, which introduces a data-dependent regularization that favors informative or rare words while forcing the embeddings of common and non-discriminative ones to be close to zero. Doc2VecC produces significantly better word embeddings than Word2Vec. We compare Doc2VecC with several state-of-the-art document representation learning algorithms. The simple model architecture introduced by Doc2VecC matches or out-performs the state-of-the-art in generating high-quality document representations for sentiment analysis, document classification as well as semantic relatedness tasks. The simplicity of the model enables training on billions of words per hour on a single machine. At the same time, the model is very efficient in generating representations of unseen documents at test time.",
    "creator" : "LaTeX with hyperref package"
  }
}