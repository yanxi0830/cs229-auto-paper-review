{
  "name" : "383.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "DESIGNING NEURAL NETWORK ARCHITECTURES",
    "authors" : [ "REINFORCEMENT LEARNING", "Bowen Baker", "Otkrist Gupta", "Nikhil Naik", "Ramesh Raskar" ],
    "emails" : [ "raskar}@mit.edu" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "Deep convolutional neural networks (CNNs) have seen great success in the past few years on a variety of machine learning problems (LeCun et al., 2015). A typical CNN architecture consists of several convolution, pooling, and fully connected layers. While constructing a CNN, a network designer has to make numerous design choices: the number of layers of each type, the ordering of layers, and the hyperparameters for each type of layer, e.g., the receptive field size, stride, and number of receptive fields for a convolution layer. The number of possible choices makes the design space of CNN architectures extremely large and hence, infeasible for an exhaustive manual search. While there has been some work (Pinto et al., 2009; Bergstra et al., 2013; Domhan et al., 2015) on automated or computer-aided neural network design, new CNN architectures or network design elements are still primarily developed by researchers using new theoretical insights or intuition gained from experimentation.\nIn this paper, we seek to automate the process of CNN architecture selection through a metamodeling procedure based on reinforcement learning. We construct a novel Q-learning agent whose goal is to discover CNN architectures that perform well on a given machine learning task with no human intervention. The learning agent is given the task of sequentially picking layers of a CNN model. By discretizing and limiting the layer parameters to choose from, the agent is left with a finite but large space of model architectures to search from. The agent learns through random exploration and slowly begins to exploit its findings to select higher performing models using the - greedy strategy (Mnih et al., 2015). The agent receives the validation accuracy on the given machine learning task as the reward for selecting an architecture. We expedite the learning process through repeated memory sampling using experience replay (Lin, 1993). We refer to this Q-learning based meta-modeling method as MetaQNN, which is summarized in Figure 1.1\nWe conduct experiments with a space of model architectures consisting of only standard convolution, pooling, and fully connected layers using three standard image classification datasets: CIFAR-10,\n1For more information, model files, and code, please visit https://bowenbaker.github.io/metaqnn/\nSVHN, and MNIST. The learning agent discovers CNN architectures that beat all existing networks designed only with the same layer types (e.g., Springenberg et al. (2014); Srivastava et al. (2015)). In addition, their performance is competitive against network designs that include complex layer types and training procedures (e.g., Clevert et al. (2015); Lee et al. (2016)). Finally, the MetaQNN selected models comfortably outperform previous automated network design methods (Stanley & Miikkulainen, 2002; Bergstra et al., 2013). The top network designs discovered by the agent on one dataset are also competitive when trained on other datasets, indicating that they are suited for transfer learning tasks. Moreover, we can generate not just one, but several varied, well-performing network designs, which can be ensembled to further boost the prediction performance."
    }, {
      "heading" : "2 RELATED WORK",
      "text" : "Designing neural network architectures: Research on automating neural network design goes back to the 1980s when genetic algorithm-based approaches were proposed to find both architectures and weights (Schaffer et al., 1992). However, to the best of our knowledge, networks designed with genetic algorithms, such as those generated with the NEAT algorithm (Stanley & Miikkulainen, 2002), have been unable to match the performance of hand-crafted networks on standard benchmarks (Verbancsics & Harguess, 2013). Other biologically inspired ideas have also been explored; motivated by screening methods in genetics, Pinto et al. (2009) proposed a high-throughput network selection approach where they randomly sample thousands of architectures and choose promising ones for further training. In recent work, Saxena & Verbeek (2016) propose to sidestep the architecture selection process through densely connected networks of layers, which come closer to the performance of hand-crafted networks.\nBayesian optimization has also been used (Shahriari et al., 2016) for automatic selection of network architectures (Bergstra et al., 2013; Domhan et al., 2015) and hyperparameters (Snoek et al., 2012; Swersky et al., 2013). Notably, Bergstra et al. (2013) proposed a meta-modeling approach based on Tree of Parzen Estimators (TPE) (Bergstra et al., 2011) to choose both the type of layers and hyperparameters of feed-forward networks; however, they fail to match the performance of handcrafted networks.\nReinforcement Learning: Recently there has been much work at the intersection of reinforcement learning and deep learning. For instance, methods using CNNs to approximate theQ-learning utility function (Watkins, 1989) have been successful in game-playing agents (Mnih et al., 2015; Silver et al., 2016) and robotic control (Lillicrap et al., 2015; Levine et al., 2016). These methods rely on phases of exploration, where the agent tries to learn about its environment through sampling, and exploitation, where the agent uses what it learned about the environment to find better paths. In traditional reinforcement learning settings, over-exploration can lead to slow convergence times, yet over-exploitation can lead to convergence to local minima (Kaelbling et al., 1996). However, in the case of large or continuous state spaces, the -greedy strategy of learning has been empirically shown to converge (Vermorel & Mohri, 2005). Finally, when the state space is large or exploration is costly,\nthe experience replay technique (Lin, 1993) has proved useful in experimental settings (Adam et al., 2012; Mnih et al., 2015). We incorporate these techniques—Q-learning, the -greedy strategy and experience replay—in our algorithm design."
    }, {
      "heading" : "3 BACKGROUND",
      "text" : "Our method relies on Q-learning, a type of reinforcement learning. We now summarize the theoretical formulation of Q-learning, as adopted to our problem. Consider the task of teaching an agent to find optimal paths as a Markov Decision Process (MDP) in a finite-horizon environment. Constraining the environment to be finite-horizon ensures that the agent will deterministically terminate in a finite number of time steps. In addition, we restrict the environment to have a discrete and finite state space S as well as action space U . For any state si ∈ S , there is a finite set of actions, U(si) ⊆ U , that the agent can choose from. In an environment with stochastic transitions, an agent in state si taking some action u ∈ U(si) will transition to state sj with probability ps′|s,u(sj |si, u), which may be unknown to the agent. At each time step t, the agent is given a reward rt, dependent on the transition from state s to s′ and action u. rt may also be stochastic according to a distribution pr|s′,s,u. The agent’s goal is to maximize the total expected reward over all possible trajectories, i.e., maxTi∈T RTi , where the total expected reward for a trajectory Ti is\nRTi = ∑ (s,u,s′)∈Ti Er|s,u,s′ [r|s, u, s ′]. (1)\nThough we limit the agent to a finite state and action space, there are still a combinatorially large number of trajectories, which motivates the use of reinforcement learning. We define the maximization problem recursively in terms of subproblems as follows. For any state si ∈ S and subsequent action u ∈ U(si), we define the maximum total expected reward to be Q∗(si, u). Q∗(·) is known as the action-value function and individual Q∗(si, u) are know as Q-values. The recursive maximization equation, which is known as Bellman’s Equation, can be written as\nQ∗(si, u) = Esj |si,u [ Er|si,u,sj [r|si, u, sj ] + γmaxu′∈U(sj)Q∗(sj , u′) ] . (2)\nIn many cases, it is impossible to analytically solve Bellman’s Equation (Bertsekas, 2015), but it can be formulated as an iterative update\nQt+1(si, u) = (1− α)Qt(si, u) + α [ rt + γmaxu′∈U(sj)Qt(sj , u ′) ] . (3)\nEquation 3 is the simplest form of Q-learning proposed by Watkins (1989). For well formulated problems, limt→∞Qt(s, u) = Q∗(s, u), as long as each transition is sampled infinitely many times (Bertsekas, 2015). The update equation has two parameters: (i) α is a Q-learning rate which determines the weight given to new information over old information, and (ii) γ is the discount factor which determines the weight given to short-term rewards over future rewards. The Q-learning algorithm is model-free, in that the learning agent can solve the task without ever explicitly constructing an estimate of environmental dynamics. In addition, Q-learning is off policy, meaning it can learn about optimal policies while exploring via a non-optimal behavioral distribution, i.e. the distribution by which the agent explores its environment.\nWe choose the behavior distribution using an -greedy strategy (Mnih et al., 2015). With this strategy, a random action is taken with probability and the greedy action, maxu∈U(si)Qt(si, u), is chosen with probability 1− . We anneal from 1→ 0 such that the agent begins in an exploration phase and slowly starts moving towards the exploitation phase. In addition, when the exploration cost is large (which is true for our problem setting), it is beneficial to use the experience replay technique for faster convergence (Lin, 1992). In experience replay, the learning agent is provided with a memory of its past explored paths and rewards. At a given interval, the agent samples from the memory and updates its Q-values via Equation 3.\n4 DESIGNING NEURAL NETWORK ARCHITECTURES WITH Q-LEARNING\nWe consider the task of training a learning agent to sequentially choose neural network layers. Figure 2 shows feasible state and action spaces (a) and a potential trajectory the agent may take along with the CNN architecture defined by this trajectory (b). We model the layer selection process as a Markov Decision Process with the assumption that a well-performing layer in one network should\nalso perform well in another network. We make this assumption based on the hierarchical nature of the feature representations learned by neural networks with many hidden layers (LeCun et al., 2015). The agent sequentially selects layers via the -greedy strategy until it reaches a termination state. The CNN architecture defined by the agent’s path is trained on the chosen learning problem, and the agent is given a reward equal to the validation accuracy. The validation accuracy and architecture description are stored in a replay memory, and experiences are sampled periodically from the replay memory to update Q-values via Equation 3. The agent follows an schedule which determines its shift from exploration to exploitation.\nOur method requires three main design choices: (i) reducing CNN layer definitions to simple state tuples, (ii) defining a set of actions the agent may take, i.e., the set of layers the agent may pick next given its current state, and (iii) balancing the size of the state-action space—and correspondingly, the model capacity—with the amount of exploration needed by the agent to converge. We now describe the design choices and the learning process in detail."
    }, {
      "heading" : "4.1 THE STATE SPACE",
      "text" : "Each state is defined as a tuple of all relevant layer parameters. We allow five different types of layers: convolution (C), pooling (P), fully connected (FC), global average pooling (GAP), and softmax (SM), though the general method is not limited to this set. Table 1 shows the relevant parameters for each layer type and also the discretization we chose for each parameter. Each layer has a parameter layer depth (shown as Layer 1, 2, ... in Figure 2). Adding layer depth to the state space allows us to constrict the action space such that the state-action graph is directed and acyclic (DAG) and also allows us to specify a maximum number of layers the agent may select before terminating.\nEach layer type also has a parameter called representation size (R-size). Convolutional nets progressively compress the representation of the original signal through pooling and convolution. The presence of these layers in our state space may lead the agent on a trajectory where the intermediate signal representation gets reduced to a size that is too small for further processing. For example, five 2× 2 pooling layers each with stride 2 will reduce an image of initial size 32× 32 to size 1× 1. At this stage, further pooling, or convolution with receptive field size greater than 1, would be meaningless and degenerate. To avoid such scenarios, we add the R-size parameter to the state tuple s, which allows us to restrict actions from states with R-size n to those that have a receptive field size less than or equal to n. To further constrict the state space, we chose to bin the representation sizes into three discrete buckets. However, binning adds uncertainty to the state transitions: depending on the true underlying representation size, a pooling layer may or may not change the R-size bin. As a result, the action of pooling can lead to two different states, which we model as stochasticity in state transitions. Please see Figure A1 in appendix for an illustrated example."
    }, {
      "heading" : "4.2 THE ACTION SPACE",
      "text" : "We restrict the agent from taking certain actions to both limit the state-action space and make learning tractable. First, we allow the agent to terminate a path at any point, i.e. it may choose a termination state from any non-termination state. In addition, we only allow transitions for a state with layer depth i to a state with layer depth i + 1, which ensures that there are no loops in the graph. This constraint ensures that the state-action graph is always a DAG. Any state at the maximum layer depth, as prescribed in Table 1, may only transition to a termination layer.\nNext, we limit the number of fully connected (FC) layers to be at maximum two, because a large number of FC layers can lead to too may learnable parameters. The agent at a state with type FC may transition to another state with type FC if and only if the number of consecutive FC states is less than the maximum allowed. Furthermore, a state s of type FC with number of neurons d may only transition to either a termination state or a state s′ of type FC with number of neurons d′ ≤ d. An agent at a state of type convolution (C) may transition to a state with any other layer type. An agent at a state with layer type pooling (P) may transition to a state with any other layer type other than another P state because consecutive pooling layers are equivalent to a single, larger pooling layer which could lie outside of our chosen state space. Furthermore, only states with representation size in bins (8, 4] and (4, 1] may transition to an FC layer, which ensures that the number of weights does not become unreasonably huge. Note that a majority of these constraints are in place to enable faster convergence on our limited hardware (see Section 5) and not a limitation of the method in itself.\n4.3 Q-LEARNING TRAINING PROCEDURE\nFor the iterativeQ-learning updates (Equation 3), we set theQ-learning rate (α) to 0.01. In addition, we set the discount factor (γ) to 1 to not over-prioritize short-term rewards. We decrease from 1.0 to 0.1 in steps, where the step-size is defined by the number of unique models trained (Table 2). At = 1.0, the agent samples CNN architecture with a random walk along a uniformly weighted Markov chain. Every topology sampled by the agent is trained using the procedure described in Section 5, and the prediction performance of this network topology on the validation set is recorded. We train a larger number of models at = 1.0 as compared to other values of to ensure that the agent has adequate time to explore before it begins to exploit. We stop the agent at = 0.1 (and not at = 0) to obtain a stochastic final policy, which generates perturbations of the global minimum.2 Ideally, we want to identify several well-performing model topologies, which can then be ensembled to improve prediction performance.\nDuring the entire training process (starting at = 1.0), we maintain a replay dictionary which stores (i) the network topology and (ii) prediction performance on a validation set, for all of the sampled\n2 = 0 indicates a completely deterministic policy. Because we would like to generate several good models for ensembling and analysis, we stop at = 0.1, which represents a stochastic final policy.\nmodels. If a model that has already been trained is re-sampled, it is not re-trained, but instead the previously found validation accuracy is presented to the agent. After each model is sampled and trained, the agent randomly samples 100 models from the replay dictionary and applies the Q-value update defined in Equation 3 for all transitions in each sampled sequence. The Q-value update is applied to the transitions in temporally reversed order, which has been shown to speed up Q-values convergence (Lin, 1993)."
    }, {
      "heading" : "5 EXPERIMENT DETAILS",
      "text" : "During the model exploration phase, we trained each network topology with a quick and aggressive training scheme. For each experiment, we created a validation set by randomly taking 5,000 samples from the training set such that the resulting class distributions were unchanged. For every network, a dropout layer was added after every two layers. The ith dropout layer, out of a total n dropout layers, had a dropout probability of i2n . Each model was trained for a total of 20 epochs with the Adam optimizer (Kingma & Ba, 2014) with β1 = 0.9, β2 = 0.999, ε = 10−8. The batch size was set to 128, and the initial learning rate was set to 0.001. If the model failed to perform better than a random predictor after the first epoch, we reduced the learning rate by a factor of 0.4 and restarted training, for a maximum of 5 restarts. For models that started learning (i.e., performed better than a random predictor), we reduced the learning rate by a factor of 0.2 every 5 epochs. All weights were initialized with Xavier initialization (Glorot & Bengio, 2010). Our experiments using Caffe (Jia et al., 2014) took 8-10 days to complete for each dataset with a hardware setup consisting of 10 NVIDIA GPUs.\nAfter the agent completed the schedule (Table 2), we selected the top ten models that were found over the course of exploration. These models were then finetuned using a much longer training schedule, and only the top five were used for ensembling. We now provide details of the datasets and the finetuning process.\nThe Street View House Numbers (SVHN) dataset has 10 classes with a total of 73,257 samples in the original training set, 26,032 samples in the test set, and 531,131 additional samples in the extended training set. During the exploration phase, we only trained with the original training set, using 5,000 random samples as validation. We finetuned the top ten models with the original plus extended training set, by creating preprocessed training and validation sets as described by Lee et al. (2016). Our final learning rate schedule after tuning on validation set was 0.025 for 5 epochs, 0.0125 for 5 epochs, 0.0001 for 20 epochs, and 0.00001 for 10 epochs.\nCIFAR-10, the 10 class tiny image dataset, has 50,000 training samples and 10,000 testing samples. During the exploration phase, we took 5,000 random samples from the training set for validation. The maximum layer depth was increased to 18. After the experiment completed, we used the same validation set to tune hyperparameters, resulting in a final training scheme which we ran on the entire training set. In the final training scheme, we set a learning rate of 0.025 for 40 epochs, 0.0125 for 40 epochs, 0.0001 for 160 epochs, and 0.00001 for 60 epochs, with all other parameters unchanged. During this phase, we preprocess using global contrast normalization and use moderate data augmentation, which consists of random mirroring and random translation by up to 5 pixels.\nMNIST, the 10 class handwritten digits dataset, has 60,000 training samples and 10,000 testing samples. We preprocessed each image with global mean subtraction. In the final training scheme, we trained each model for 40 epochs and decreased learning rate every 5 epochs by a factor of 0.2. For further tuning details please see Appendix C."
    }, {
      "heading" : "6 RESULTS",
      "text" : "Model Selection Analysis: From Q-learning principles, we expect the learning agent to improve in its ability to pick network topologies as reduces and the agent enters the exploitation phase. In\nFigure 3, we plot the rolling mean of prediction accuracy over 100 models and the mean accuracy of models sampled at different values, for the CIFAR-10 and SVHN experiments. The plots show that, while the prediction accuracy remains flat during the exploration phase ( = 1) as expected, the agent consistently improves in its ability to pick better-performing models as reduces from 1 to 0.1. For example, the mean accuracy of models in the SVHN experiment increases from 52.25% at = 1 to 88.02% at = 0.1. Furthermore, we demonstrate the stability of the Q-learning procedure with 10 independent runs on a subset of the SVHN dataset in Section D.1 of the Appendix. Additional analysis of Q-learning results can be found in Section D.2.\nThe top models selected by the Q-learning agent vary in the number of parameters but all demonstrate high performance (see Appendix Tables 1-3). For example, the number of parameters for the top five CIFAR-10 models range from 11.26 million to 1.10 million, with only a 2.32% decrease in test error. We find design motifs common to the top hand-crafted network architectures as well. For example, the agent often chooses a layer of type C(N, 1, 1) as the first layer in the network. These layers generate N learnable linear transformations of the input data, which is similar in spirit to preprocessing of input data from RGB to a different color spaces such as YUV, as found in prior work (Sermanet et al., 2012; 2013).\nPrediction Performance: We compare the prediction performance of the MetaQNN networks discovered by theQ-learning agent with state-of-the-art methods on three datasets. We report the accuracy of our best model, along with an ensemble of top five models. First, we compare MetaQNN with six existing architectures that are designed with standard convolution, pooling, and fully-connected layers alone, similar to our designs. As seen in Table 3, our top model alone, as well as the committee ensemble of five models, outperforms all similar models. Next, we compare our results with six top networks overall, which contain complex layer types and design ideas, including generalized pooling functions, residual connections, and recurrent modules. Our results are competitive with these methods as well (Table 4). Finally, our method outperforms existing automated network de-\nsign methods. MetaQNN obtains an error of 6.92% as compared to 21.2% reported by Bergstra et al. (2011) on CIFAR-10; and it obtains an error of 0.32% as compared to 7.9% reported by Verbancsics & Harguess (2013) on MNIST.\nThe difference in validation error between the top 10 models for MNIST was very small, so we also created an ensemble with all 10 models. This ensemble achieved a test error of 0.28%—which beats the current state-of-the-art on MNIST without data augmentation.\nThe best CIFAR-10 model performs 1-2% better than the four next best models, which is why the ensemble accuracy is lower than the best model’s accuracy. We posit that the CIFAR-10 MetaQNN did not have adequate exploration time given the larger state space compared to that of the SVHN experiment, causing it to not find more models with performance similar to the best model. Furthermore, the coarse training scheme could have been not as well suited for CIFAR-10 as it was for SVHN, causing some models to under perform.\nTransfer Learning Ability: Network designs such as VGGnet (Simonyan & Zisserman, 2014) can be adopted to solve a variety of computer vision problems. To check if the MetaQNN networks provide similar transfer learning ability, we use the best MetaQNN model on the CIFAR-10 dataset for training other computer vision tasks. The model performs well (Table 5) both when training from random initializations, and finetuning from existing weights."
    }, {
      "heading" : "7 CONCLUDING REMARKS",
      "text" : "Neural networks are being used in an increasingly wide variety of domains, which calls for scalable solutions to produce problem-specific model architectures. We take a step towards this goal and show that a meta-modeling approach using reinforcement learning is able to generate tailored CNN designs for different image classification tasks. Our MetaQNN networks outperform previous metamodeling methods as well as hand-crafted networks which use the same types of layers.\nWhile we report results for image classification problems, our method could be applied to different problem settings, including supervised (e.g., classification, regression) and unsupervised (e.g., autoencoders). The MetaQNN method could also aid constraint-based network design, by optimizing parameters such as size, speed, and accuracy. For instance, one could add a threshold in the state-action space barring the agent from creating models larger than the desired limit. In addition,\n∗Results in this column obtained with the top MetaQNN architecture for CIFAR-10, trained from random initialization with CIFAR-100 data.\none could modify the reward function to penalize large models for constraining memory or penalize slow forward passes to incentivize quick inference.\nThere are several future avenues for research in reinforcement learning-driven network design as well. In our current implementation, we use the same set of hyperparameters to train all network topologies during the Q-learning phase and further finetune the hyperparameters for top models selected by the MetaQNN agent. However, our approach could be combined with hyperparameter optimization methods to further automate the network design process. Moreover, we constrict the state-action space using coarse, discrete bins to accelerate convergence. It would be possible to move to larger state-action spaces using methods for Q-function approximation (Bertsekas, 2015; Mnih et al., 2015)."
    }, {
      "heading" : "ACKNOWLEDGMENTS",
      "text" : "We thank Peter Downs for creating the project website and contributing to illustrations. We acknowledge Center for Bits and Atoms at MIT for their help with computing resources. Finally, we thank members of Camera Culture group at MIT Media Lab for their help and support."
    }, {
      "heading" : "A ALGORITHM",
      "text" : "We first describe the main components of the MetaQNN algorithm. Algorithm 1 shows the main loop, where the parameter M would determine how many models to run for a given and the parameter K would determine how many times to sample the replay database to update Q-values on each iteration. The function TRAIN refers to training the specified network and returns a validation accuracy. Algorithm 2 details the method for sampling a new network using the -greedy strategy, where we assume we have a function TRANSITION that returns the next state given a state and action. Finally, Algorithm 3 implements theQ-value update detailed in Equation 3, with discounting factor set to 1, for an entire state sequence in temporally reversed order.\nAlgorithm 1 Q-learning For CNN Topologies Initialize:\nreplay memory← [ ] Q← {(s, u) ∀s ∈ S, u ∈ U(s) : 0.5}\nfor episode = 1 to M do S, U ← SAMPLE NEW NETWORK( , Q) accuracy← TRAIN(S) replay memory.append((S, U, accuracy)) for memory = 1 to K do\nSSAMPLE , USAMPLE , accuracySAMPLE ← Uniform{replay memory} Q← UPDATE Q VALUES(Q, SSAMPLE , USAMPLE , accuracySAMPLE)\nend for end for\nAlgorithm 2 SAMPLE NEW NETWORK( , Q) Initialize:\nstate sequence S = [sSTART] action sequence U = [ ]\nwhile U [−1] 6= terminate do α ∼ Uniform[0, 1) if α > then\nu = argmaxu∈U(S[−1])Q[(S[−1], u)] s′ = TRANSITION(S[−1], u)\nelse u ∼ Uniform{U(S[−1])} s′ = TRANSITION(S[−1], u) end if U.append(u) if u != terminate then\nS.append(s′) end if\nend while return S, U\nAlgorithm 3 UPDATE Q VALUES(Q, S, U , accuracy) Q[S[−1], U [−1]] = (1− α)Q[S[−1], U [−1]] + α · accuracy for i = length(S)− 2 to 0 do\nQ[S[i], U [i]] = (1− α)Q[S[i], U [i]] + αmaxu∈U(S[i+1])Q[S[i+ 1], u] end for return Q"
    }, {
      "heading" : "B REPRESENTATION SIZE BINNING",
      "text" : "As mentioned in Section 4.1 of the main text, we introduce a parameter called representation size to prohibit the agent from taking actions that can reduce the intermediate signal representation to a size that is too small for further processing. However, this process leads to uncertainties in state transitions, as illustrated in Figure A1, which is handled by the standard Q-learning formulation.\nP(2,2)\nR-size: 18 R-size bin: 1\nR-size: 9 R-size bin: 1\n(a)\nP(2,2)\nR-size: 7 R-size bin: 2\nR-size: 14 R-size bin: 1\n(b)\nStates Actions\np 1 2 p\nR-size bin: 1\nR-size bin: 1 R-size bin: 2\nP(2,2)\n(c)\nFigure A1: Representation size binning: In this figure, we show three example state transitions. The true representation size (R-size) parameter is included in the figure to show the true underlying state. Assuming there are two R-size bins, R-size Bin1: [8,∞) and R-size Bin2: (0, 7], Figure A1a shows the case where the initial state is in R-size Bin1 and true representation size is 18. After the agent chooses to pool with a 2×2 filter with stride 2, the true representation size reduces to 9 but the R-size bin does not change. In Figure A1b, the same 2 × 2 pooling layer with stride 2 reduces the actual representation size of 14 to 7, but the bin changes to R-size Bin2. Therefore, in figures A1a and A1b, the agent ends up in different final states, despite originating in the same initial state and choosing the same action. Figure A1c shows that in our state-action space, when the agent takes an action that reduces the representation size, it will have uncertainty in which state it will transition to."
    }, {
      "heading" : "C MNIST EXPERIMENT",
      "text" : "We noticed that the final MNIST models were prone to overfitting, so we increased dropout and did a small grid search for the weight regularization parameter. For both tuning and final training, we warmed the model with the learned weights from after the first epoch of initial training. The final models and solvers can be found on our project website https://bowenbaker.github.io/metaqnn/ . Figure A2 shows the Q-Learning performance for the MNIST experiment.\nD FURTHER ANALYSIS OF Q-LEARNING\nFigure 3 of the main text and Figure A2 show that as the agent begins to exploit, it improves in architecture selection. It is also informative to look at the distribution of models chosen at each . Figure A4 gives further insight into the performance achieved at each for both experiments.\nD.1 Q-LEARNING STABILITY\nBecause the Q-learning agent explores via a random or semi-random distribution, it is natural to ask whether the agent can consistently improve architecture performance. While the success of the three independent experiments described in the main text allude to stability, here we present further evidence. We conduct 10 independent runs of the Q-learning procedure on 10% of the SVHN dataset (which corresponds to ∼7,000 training examples). We use a smaller dataset to reduce the computation time of each independent run to 10GPU-days, as opposed to the 100GPU-days it would take on the full dataset. As can be seen in Figure A3, the Q-learning procedure with the exploration schedule detailed in Table 2 is fairly stable. The standard deviation at = 1 is notably smaller than at other stages, which we attribute to the large difference in number of samples at each stage.\n0 500 1000 1500 2000 2500 3000 3500 Iterations\n0.00\n0.10\n0.20\n0.30\n0.40\n0.50\n0.60\n0.70\n0.80\n0.90\n1.00\nA cc\nu ra\ncy\nEpsilon = 1.0 .9.8.7 .6 .5 .4 .3 .2 .1\nMNIST Q-Learning Performance\nAverage Accuracy Per Epsilon Rolling Mean Model Accuracy\nFigure A2: MNIST Q-Learning Performance. The blue line shows a rolling mean of model accuracy versus iteration, where in each iteration of the algorithm the agent is sampling a model. Each bar (in light blue) marks the average accuracy over all models that were sampled during the exploration phase with the labeled . As decreases, the average accuracy goes up, demonstrating that the agent learns to select better-performing CNN architectures.\n0.10.20.30.40.50.60.70.80.91.0 Epsilon\n0.45\n0.50\n0.55\n0.60\n0.65\n0.70\n0.75\n0.80\nM ea\nn Ac\ncu ra\ncy\nQ-Learning Stability (Across 10 Runs)\n(a)\n0.10.20.30.40.50.60.70.80.91.0 Epsilon\n0.45\n0.50\n0.55\n0.60\n0.65\n0.70\n0.75 0.80 M ea n Ac cu ra cy\nQ-Learning Individual Runs\n(b)\nFigure A3: Figure A3a shows the mean model accuracy and standard deviation at each over 10 independent runs of the Q-learning procedure on 10% of the SVHN dataset. Figure A3b shows the mean model accuracy at each for each independent experiment. Despite some variance due to a randomized exploration strategy, each independent run successfully improves architecture performance.\nFurthermore, the best model found during each run had remarkably similar performance with a mean accuracy of 88.25% and standard deviation of 0.58%, which shows that each run successfully found at least one very high performing model. Note that we did not use an extended training schedule to improve performance in this experiment.\nD.2 Q-VALUE ANALYSIS\nWe now analyze the actualQ-values generated by the agent during the training process. The learning agent iteratively updates the Q-values of each path during the -greedy exploration. Each Q-value is initialized at 0.5. After the -schedule is complete, we can analyze the final Q-value associated with each path to gain insights into the layer selection process. In the left column of Figure A5, we plot the average Q-value for each layer type at different layer depths (for both SVHN and CIFAR10) datasets. Roughly speaking, a higher Q-value associated with a layer type indicates a higher probability that the agent will pick that layer type. In Figure A5, we observe that, while the average Q-value is higher for convolution and pooling layers at lower layer depths, the Q-values for fullyconnected and termination layers (softmax and global average pooling) increase as we go deeper into the network. This observation matches with traditional network designs.\nWe can also plot the averageQ-values associated with different layer parameters for further analysis. In the right column of Figure A5, we plot the averageQ-values for convolution layers with receptive\nfield sizes 1, 3, and 5 at different layer depths. The plots show that layers with receptive field size of 5 have a higher Q-value as compared to sizes 1 and 3 as we go deeper into the networks. This indicates that it might be beneficial to use larger receptive field sizes in deeper networks.\nIn summary, the Q-learning method enables us to perform analysis on the relative benefits of different design parameters of our state space, and possibly gain insights for new CNN designs."
    }, {
      "heading" : "E TOP TOPOLOGIES SELECTED BY ALGORITHM",
      "text" : "In Tables A1 through A3, we present the top five model architectures selected with Q-learning for each dataset, along with their prediction error reported on the test set, and their total number of parameters. To download the Caffe solver and prototext files, please visit https://bowenbaker.github.io/metaqnn/ .\nModel Architecture Test Error (%) # Params (106) [C(512,5,1), C(256,3,1), C(256,5,1), C(256,3,1), P(5,3), C(512,3,1), C(512,5,1), P(2,2), SM(10)] 6.92 11.18 [C(128,1,1), C(512,3,1), C(64,1,1), C(128,3,1), P(2,2), C(256,3,1), P(2,2), C(512,3,1), P(3,2), SM(10)] 8.78 2.17 [C(128,3,1), C(128,1,1), C(512,5,1), P(2,2), C(128,3,1), P(2,2), C(64,3,1), C(64,5,1), SM(10)] 8.88 2.42 [C(256,3,1), C(256,3,1), P(5,3), C(256,1,1), C(128,3,1), P(2,2), C(128,3,1), SM(10)] 9.24 1.10 [C(128,5,1), C(512,3,1), P(2,2), C(128,1,1), C(128,5,1), P(3,2), C(512,3,1), SM(10)] 11.63 1.66\nTable A1: Top 5 model architectures: CIFAR-10.\nModel Architecture Test Error (%) # Params (106) [C(128,3,1), P(2,2), C(64,5,1), C(512,5,1), C(256,3,1), C(512,3,1), P(2,2), C(512,3,1), C(256,5,1), C(256,3,1), C(128,5,1), C(64,3,1), SM(10)] 2.24 9.81 [C(128,1,1), C(256,5,1), C(128,5,1), P(2,2), C(256,5,1), C(256,1,1), C(256,3,1), C(256,3,1), C(256,5,1), C(512,5,1), C(256,3,1), C(128,3,1), SM(10)] 2.28 10.38 [C(128,5,1), C(128,3,1), C(64,5,1), P(5,3), C(128,3,1), C(512,5,1), C(256,5,1), C(128,5,1), C(128,5,1), C(128,3,1), SM(10)] 2.32 6.83 [C(128,1,1), C(256,5,1), C(128,5,1), C(256,3,1), C(256,5,1), P(2,2), C(128,1,1), C(512,3,1), C(256,5,1), P(2,2), C(64,5,1), C(64,1,1), SM(10)] 2.35 6.99 [C(128,1,1), C(256,5,1), C(128,5,1), C(256,5,1), C(256,5,1), C(256,1,1), P(3,2), C(128,1,1), C(256,5,1), C(512,5,1), C(256,3,1), C(128,3,1), SM(10)] 2.36 10.05\nTable A2: Top 5 model architectures: SVHN. Note that we do not report the best accuracy on test set from the above models in Tables 3 and 4 from the main text. This is because the model that achieved 2.28% on the test set performed the best on the validation set.\nModel Architecture Test Error (%) # Params (106) [C(64,1,1), C(256,3,1), P(2,2), C(512,3,1), C(256,1,1), P(5,3), C(256,3,1), C(512,3,1), FC(512), SM(10)] 0.35 5.59 [C(128,3,1), C(64,1,1), C(64,3,1), C(64,5,1), P(2,2), C(128,3,1), P(3,2), C(512,3,1), FC(512), FC(128), SM(10)] 0.38 7.43 [C(512,1,1), C(128,3,1), C(128,5,1), C(64,1,1), C(256,5,1), C(64,1,1), P(5,3), C(512,1,1), C(512,3,1), C(256,3,1), C(256,5,1), C(256,5,1), SM(10)] 0.40 8.28 [C(64,3,1), C(128,3,1), C(512,1,1), C(256,1,1), C(256,5,1), C(128,3,1), P(5,3), C(512,1,1), C(512,3,1), C(128,5,1), SM(10)] 0.41 6.27 [C(64,3,1), C(128,1,1), P(2,2), C(256,3,1), C(128,5,1), C(64,1,1), C(512,5,1), C(128,5,1), C(64,1,1), C(512,5,1), C(256,5,1), C(64,5,1), SM(10)] 0.43 8.10 [C(64,1,1), C(256,5,1), C(256,5,1), C(512,1,1), C(64,3,1), P(5,3), C(256,5,1), C(256,5,1), C(512,5,1), C(64,1,1), C(128,5,1), C(512,5,1), SM(10)] 0.44 9.67 [C(128,3,1), C(512,3,1), P(2,2), C(256,3,1), C(128,5,1), C(64,1,1), C(64,5,1), C(512,5,1), GAP(10), SM(10)] 0.44 3.52 [C(256,3,1), C(256,5,1), C(512,3,1), C(256,5,1), C(512,1,1), P(5,3), C(256,3,1), C(64,3,1), C(256,5,1), C(512,3,1), C(128,5,1), C(512,5,1), SM(10)] 0.46 12.42 [C(512,5,1), C(128,5,1), C(128,5,1), C(128,3,1), C(256,3,1), C(512,5,1), C(256,3,1), C(128,3,1), SM(10)] 0.55 7.25 [C(64,5,1), C(512,5,1), P(3,2), C(256,5,1), C(256,3,1), C(256,3,1), C(128,1,1), C(256,3,1), C(256,5,1), C(64,1,1), C(256,3,1), C(64,3,1), SM(10)] 0.56 7.55\nTable A3: Top 10 model architectures: MNIST. We report the top 10 models for MNIST because we included all 10 in our final ensemble. Note that we do not report the best accuracy on test set from the above models in Tables 3 and 4 from the main text. This is because the model that achieved 0.44% on the test set performed the best on the validation set.\n0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\nValidation Accuracy\n0\n10\n20\n30\n40\n50\n60\n% M\no d e ls\nModel Accuracy Distribution (SVHN)\nepsilon\n0.1 0.2 0.3 0.4 0.5\n0.6 0.7 0.8 0.9 1.0\n(a)\n0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\nValidation Accuracy\n0\n10\n20\n30\n40\n50\n60\n% M\no d e ls\nModel Accuracy Distribution (SVHN)\nepsilon\n0.1 1.0\n(b)\n0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9\nValidation Accuracy\n0\n5\n10\n15\n20\n% M\no d e ls\nModel Accuracy Distribution (CIFAR-10)\nepsilon\n0.1 0.2 0.3 0.4 0.5\n0.6 0.7 0.8 0.9 1.0\n(c)\n0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9\nValidation Accuracy\n0\n5\n10\n15 20 % M o d e ls\nModel Accuracy Distribution (CIFAR-10)\nepsilon\n0.1 1.0\n(d)\n0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 Validation Accuracy\n0\n20\n40\n60\n80\n100\n% M\nod el\ns\nModel Accuracy Distribution (MNIST)\nepsilon 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n(e)\n0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 Validation Accuracy\n0\n20\n40\n60\n80\n100\n% M\nod el\ns\nModel Accuracy Distribution (MNIST)\nepsilon 0.1 1.0\n(f)\nFigure A4: Accuracy Distribution versus : Figures A4a, A4c, and A4e show the accuracy distribution for each for the SVHN, CIFAR-10, and MNIST experiments, respectively. Figures A4b, A4d, and A4f show the accuracy distributions for the initial = 1 and the final = 0.1. One can see that the accuracy distribution becomes much more peaked in the high accuracy ranges at small for each experiment.\n0 2 4 6 8 10 12 14 Layer Depth\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\nA ve\nra ge\nQ -V\nal ue\nAverage Q-Value vs. Layer Depth (SVHN)\nConvolution Fully Connected Pooling Global Average Pooling Softmax\n(a)\n0 2 4 6 8 10 12 Layer Depth\n0.5\n0.6\n0.7\n0.8\n0.9\n1.0\nA ve\nra ge\nQ -V\nal ue\nAverage Q-Value vs. Layer Depth for Convolution Layers (SVHN)\nReceptive Field Size 1 Receptive Field Size 3 Receptive Field Size 5\n(b)\n0 5 10 15 20 Layer Depth\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\nA ve\nra ge\nQ -V\nal ue\nAverage Q-Value vs. Layer Depth (CIFAR10)\nConvolution Fully Connected Pooling Global Average Pooling Softmax\n(c)\n0 2 4 6 8 10 12 14 16 18 Layer Depth\n0.5\n0.6\n0.7\n0.8\n0.9 1.0 A ve ra ge Q -V al ue\nAverage Q-Value vs. Layer Depth for Convolution Layers (CIFAR10)\nReceptive Field Size 1 Receptive Field Size 3 Receptive Field Size 5\n(d)\n0 2 4 6 8 10 12 14 Layer Depth\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\nA ve\nra ge\nQ -V\nal ue\nAverage Q-Value vs. Layer Depth (MNIST)\nConvolution Fully Connected Pooling Global Average Pooling Softmax\n(e)\n0 2 4 6 8 10 12 Layer Depth\n0.5\n0.6\n0.7\n0.8\n0.9\n1.0\nA ve\nra ge\nQ -V\nal ue\nAverage Q-Value vs. Layer Depth for Convolution Layers (MNIST)\nReceptive Field Size 1 Receptive Field Size 3 Receptive Field Size 5\n(f)\nFigure A5: Average Q-Value versus Layer Depth for different layer types are shown in the left column. Average Q-Value versus Layer Depth for different receptive field sizes of the convolution layer are shown in the right column."
    } ],
    "references" : [ {
      "title" : "Experience replay for real-time reinforcement learning control",
      "author" : [ "Sander Adam", "Lucian Busoniu", "Robert Babuska" ],
      "venue" : "IEEE Transactions on Systems, Man, and Cybernetics, Part C (Applications and Reviews),",
      "citeRegEx" : "Adam et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Adam et al\\.",
      "year" : 2012
    }, {
      "title" : "Making a science of model search: Hyperparameter optimization in hundreds of dimensions for vision architectures",
      "author" : [ "James Bergstra", "Daniel Yamins", "David D Cox" ],
      "venue" : "ICML (1),",
      "citeRegEx" : "Bergstra et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Bergstra et al\\.",
      "year" : 2013
    }, {
      "title" : "Algorithms for hyper-parameter optimization",
      "author" : [ "James S Bergstra", "Rémi Bardenet", "Yoshua Bengio", "Balázs Kégl" ],
      "venue" : "NIPS, pp. 2546–2554,",
      "citeRegEx" : "Bergstra et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Bergstra et al\\.",
      "year" : 2011
    }, {
      "title" : "Convex optimization algorithms",
      "author" : [ "Dimitri P Bertsekas" ],
      "venue" : "Athena Scientific Belmont,",
      "citeRegEx" : "Bertsekas.,? \\Q2015\\E",
      "shortCiteRegEx" : "Bertsekas.",
      "year" : 2015
    }, {
      "title" : "Fast and accurate deep network learning by exponential linear units (ELUs)",
      "author" : [ "Djork-Arné Clevert", "Thomas Unterthiner", "Sepp Hochreiter" ],
      "venue" : "arXiv preprint arXiv:1511.07289,",
      "citeRegEx" : "Clevert et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Clevert et al\\.",
      "year" : 2015
    }, {
      "title" : "Speeding up automatic hyperparameter optimization of deep neural networks by extrapolation of learning curves",
      "author" : [ "Tobias Domhan", "Jost Tobias Springenberg", "Frank Hutter" ],
      "venue" : null,
      "citeRegEx" : "Domhan et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Domhan et al\\.",
      "year" : 2015
    }, {
      "title" : "Understanding the difficulty of training deep feedforward neural networks",
      "author" : [ "Xavier Glorot", "Yoshua Bengio" ],
      "venue" : "AISTATS, 9:249–256,",
      "citeRegEx" : "Glorot and Bengio.,? \\Q2010\\E",
      "shortCiteRegEx" : "Glorot and Bengio.",
      "year" : 2010
    }, {
      "title" : "Deep residual learning for image recognition",
      "author" : [ "Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun" ],
      "venue" : "arXiv preprint arXiv:1512.03385,",
      "citeRegEx" : "He et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2015
    }, {
      "title" : "Identity mappings in deep residual networks",
      "author" : [ "Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun" ],
      "venue" : "In European Conference on Computer Vision,",
      "citeRegEx" : "He et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2016
    }, {
      "title" : "Caffe: Convolutional architecture for fast feature embedding",
      "author" : [ "Yangqing Jia", "Evan Shelhamer", "Jeff Donahue", "Sergey Karayev", "Jonathan Long", "Ross Girshick", "Sergio Guadarrama", "Trevor Darrell" ],
      "venue" : "arXiv preprint arXiv:1408.5093,",
      "citeRegEx" : "Jia et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Jia et al\\.",
      "year" : 2014
    }, {
      "title" : "Reinforcement learning: A survey",
      "author" : [ "Leslie Pack Kaelbling", "Michael L Littman", "Andrew W Moore" ],
      "venue" : "Journal of Artificial Intelligence Research,",
      "citeRegEx" : "Kaelbling et al\\.,? \\Q1996\\E",
      "shortCiteRegEx" : "Kaelbling et al\\.",
      "year" : 1996
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "Diederik Kingma", "Jimmy Ba" ],
      "venue" : "arXiv preprint arXiv:1412.6980,",
      "citeRegEx" : "Kingma and Ba.,? \\Q2014\\E",
      "shortCiteRegEx" : "Kingma and Ba.",
      "year" : 2014
    }, {
      "title" : "Generalizing pooling functions in convolutional neural networks: Mixed",
      "author" : [ "Chen-Yu Lee", "Patrick W Gallagher", "Zhuowen Tu" ],
      "venue" : "gated, and tree. International Conference on Artificial Intelligence and Statistics,",
      "citeRegEx" : "Lee et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Lee et al\\.",
      "year" : 2016
    }, {
      "title" : "End-to-end training of deep visuomotor policies",
      "author" : [ "Sergey Levine", "Chelsea Finn", "Trevor Darrell", "Pieter Abbeel" ],
      "venue" : null,
      "citeRegEx" : "Levine et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Levine et al\\.",
      "year" : 2016
    }, {
      "title" : "Recurrent convolutional neural network for object recognition",
      "author" : [ "Ming Liang", "Xiaolin Hu" ],
      "venue" : "CVPR, pp. 3367–3375,",
      "citeRegEx" : "Liang and Hu.,? \\Q2015\\E",
      "shortCiteRegEx" : "Liang and Hu.",
      "year" : 2015
    }, {
      "title" : "Continuous control with deep reinforcement learning",
      "author" : [ "Timothy P Lillicrap", "Jonathan J Hunt", "Alexander Pritzel", "Nicolas Heess", "Tom Erez", "Yuval Tassa", "David Silver", "Daan Wierstra" ],
      "venue" : "arXiv preprint arXiv:1509.02971,",
      "citeRegEx" : "Lillicrap et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Lillicrap et al\\.",
      "year" : 2015
    }, {
      "title" : "Self-improving reactive agents based on reinforcement learning, planning and teaching",
      "author" : [ "Long-Ji Lin" ],
      "venue" : "Machine Learning,",
      "citeRegEx" : "Lin.,? \\Q1992\\E",
      "shortCiteRegEx" : "Lin.",
      "year" : 1992
    }, {
      "title" : "Reinforcement learning for robots using neural networks",
      "author" : [ "Long-Ji Lin" ],
      "venue" : "Technical report, DTIC Document,",
      "citeRegEx" : "Lin.,? \\Q1993\\E",
      "shortCiteRegEx" : "Lin.",
      "year" : 1993
    }, {
      "title" : "Human-level control through deep reinforcement learning",
      "author" : [ "Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Andrei A Rusu", "Joel Veness", "Marc G Bellemare", "Alex Graves", "Martin Riedmiller", "Andreas K Fidjeland", "Georg Ostrovski" ],
      "venue" : "Nature, 518(7540):529–533,",
      "citeRegEx" : "Mnih et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Mnih et al\\.",
      "year" : 2015
    }, {
      "title" : "A high-throughput screening approach to discovering good forms of biologically inspired visual representation",
      "author" : [ "Nicolas Pinto", "David Doukhan", "James J DiCarlo", "David D Cox" ],
      "venue" : "PLoS Computational Biology,",
      "citeRegEx" : "Pinto et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Pinto et al\\.",
      "year" : 2009
    }, {
      "title" : "Fitnets: Hints for thin deep nets",
      "author" : [ "Adriana Romero", "Nicolas Ballas", "Samira Ebrahimi Kahou", "Antoine Chassang", "Carlo Gatta", "Yoshua Bengio" ],
      "venue" : "arXiv preprint arXiv:1412.6550,",
      "citeRegEx" : "Romero et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Romero et al\\.",
      "year" : 2014
    }, {
      "title" : "Convolutional neural fabrics",
      "author" : [ "Shreyas Saxena", "Jakob Verbeek" ],
      "venue" : "In Advances in Neural Information Processing Systems",
      "citeRegEx" : "Saxena and Verbeek.,? \\Q2016\\E",
      "shortCiteRegEx" : "Saxena and Verbeek.",
      "year" : 2016
    }, {
      "title" : "Combinations of genetic algorithms and neural networks: A survey of the state of the art",
      "author" : [ "J David Schaffer", "Darrell Whitley", "Larry J Eshelman" ],
      "venue" : "International Workshop on Combinations of Genetic Algorithms and Neural Networks,",
      "citeRegEx" : "Schaffer et al\\.,? \\Q1992\\E",
      "shortCiteRegEx" : "Schaffer et al\\.",
      "year" : 1992
    }, {
      "title" : "Convolutional neural networks applied to house numbers digit classification",
      "author" : [ "Pierre Sermanet", "Soumith Chintala", "Yann LeCun" ],
      "venue" : "ICPR, pp. 3288–3291,",
      "citeRegEx" : "Sermanet et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Sermanet et al\\.",
      "year" : 2012
    }, {
      "title" : "Pedestrian detection with unsupervised multi-stage feature learning",
      "author" : [ "Pierre Sermanet", "Koray Kavukcuoglu", "Soumith Chintala", "Yann LeCun" ],
      "venue" : "CVPR, pp",
      "citeRegEx" : "Sermanet et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Sermanet et al\\.",
      "year" : 2013
    }, {
      "title" : "Taking the human out of the loop: A review of bayesian optimization",
      "author" : [ "Bobak Shahriari", "Kevin Swersky", "Ziyu Wang", "Ryan P Adams", "Nando de Freitas" ],
      "venue" : "Proceedings of the IEEE,",
      "citeRegEx" : "Shahriari et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Shahriari et al\\.",
      "year" : 2016
    }, {
      "title" : "Mastering the game of go with deep neural networks and tree",
      "author" : [ "David Silver", "Aja Huang", "Chris J Maddison", "Arthur Guez", "Laurent Sifre", "George Van Den Driessche", "Julian Schrittwieser", "Ioannis Antonoglou", "Veda Panneershelvam", "Marc Lanctot" ],
      "venue" : "search. Nature,",
      "citeRegEx" : "Silver et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Silver et al\\.",
      "year" : 2016
    }, {
      "title" : "Very deep convolutional networks for large-scale image recognition",
      "author" : [ "Karen Simonyan", "Andrew Zisserman" ],
      "venue" : "arXiv preprint arXiv:1409.1556,",
      "citeRegEx" : "Simonyan and Zisserman.,? \\Q2014\\E",
      "shortCiteRegEx" : "Simonyan and Zisserman.",
      "year" : 2014
    }, {
      "title" : "Practical bayesian optimization of machine learning algorithms",
      "author" : [ "Jasper Snoek", "Hugo Larochelle", "Ryan P Adams" ],
      "venue" : "NIPS, pp. 2951–2959,",
      "citeRegEx" : "Snoek et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Snoek et al\\.",
      "year" : 2012
    }, {
      "title" : "Striving for simplicity: The all convolutional net",
      "author" : [ "Jost Tobias Springenberg", "Alexey Dosovitskiy", "Thomas Brox", "Martin Riedmiller" ],
      "venue" : "arXiv preprint arXiv:1412.6806,",
      "citeRegEx" : "Springenberg et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Springenberg et al\\.",
      "year" : 2014
    }, {
      "title" : "Evolving neural networks through augmenting topologies",
      "author" : [ "Kenneth O Stanley", "Risto Miikkulainen" ],
      "venue" : "Evolutionary Computation,",
      "citeRegEx" : "Stanley and Miikkulainen.,? \\Q2002\\E",
      "shortCiteRegEx" : "Stanley and Miikkulainen.",
      "year" : 2002
    }, {
      "title" : "Multi-task bayesian optimization",
      "author" : [ "Kevin Swersky", "Jasper Snoek", "Ryan P Adams" ],
      "venue" : null,
      "citeRegEx" : "Swersky et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Swersky et al\\.",
      "year" : 2004
    }, {
      "title" : "Generative neuroevolution for deep learning",
      "author" : [ "Phillip Verbancsics", "Josh Harguess" ],
      "venue" : "arXiv preprint arXiv:1312.5355,",
      "citeRegEx" : "Verbancsics and Harguess.,? \\Q2013\\E",
      "shortCiteRegEx" : "Verbancsics and Harguess.",
      "year" : 2013
    }, {
      "title" : "Multi-armed bandit algorithms and empirical evaluation",
      "author" : [ "Joannes Vermorel", "Mehryar Mohri" ],
      "venue" : "European Conference on Machine Learning,",
      "citeRegEx" : "Vermorel and Mohri.,? \\Q2005\\E",
      "shortCiteRegEx" : "Vermorel and Mohri.",
      "year" : 2005
    }, {
      "title" : "Regularization of neural networks using dropconnect",
      "author" : [ "Li Wan", "Matthew Zeiler", "Sixin Zhang", "Yann L Cun", "Rob Fergus" ],
      "venue" : null,
      "citeRegEx" : "Wan et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Wan et al\\.",
      "year" : 2013
    }, {
      "title" : "Learning from delayed rewards",
      "author" : [ ],
      "venue" : "PhD thesis,",
      "citeRegEx" : "Watkins.,? \\Q1989\\E",
      "shortCiteRegEx" : "Watkins.",
      "year" : 1989
    } ],
    "referenceMentions" : [ {
      "referenceID" : 19,
      "context" : "While there has been some work (Pinto et al., 2009; Bergstra et al., 2013; Domhan et al., 2015) on automated or computer-aided neural network design, new CNN architectures or network design elements are still primarily developed by researchers using new theoretical insights or intuition gained from experimentation.",
      "startOffset" : 31,
      "endOffset" : 95
    }, {
      "referenceID" : 1,
      "context" : "While there has been some work (Pinto et al., 2009; Bergstra et al., 2013; Domhan et al., 2015) on automated or computer-aided neural network design, new CNN architectures or network design elements are still primarily developed by researchers using new theoretical insights or intuition gained from experimentation.",
      "startOffset" : 31,
      "endOffset" : 95
    }, {
      "referenceID" : 5,
      "context" : "While there has been some work (Pinto et al., 2009; Bergstra et al., 2013; Domhan et al., 2015) on automated or computer-aided neural network design, new CNN architectures or network design elements are still primarily developed by researchers using new theoretical insights or intuition gained from experimentation.",
      "startOffset" : 31,
      "endOffset" : 95
    }, {
      "referenceID" : 18,
      "context" : "The agent learns through random exploration and slowly begins to exploit its findings to select higher performing models using the greedy strategy (Mnih et al., 2015).",
      "startOffset" : 147,
      "endOffset" : 166
    }, {
      "referenceID" : 17,
      "context" : "We expedite the learning process through repeated memory sampling using experience replay (Lin, 1993).",
      "startOffset" : 90,
      "endOffset" : 101
    }, {
      "referenceID" : 1,
      "context" : "Finally, the MetaQNN selected models comfortably outperform previous automated network design methods (Stanley & Miikkulainen, 2002; Bergstra et al., 2013).",
      "startOffset" : 102,
      "endOffset" : 155
    }, {
      "referenceID" : 25,
      "context" : ", Springenberg et al. (2014); Srivastava et al.",
      "startOffset" : 2,
      "endOffset" : 29
    }, {
      "referenceID" : 25,
      "context" : ", Springenberg et al. (2014); Srivastava et al. (2015)).",
      "startOffset" : 2,
      "endOffset" : 55
    }, {
      "referenceID" : 2,
      "context" : ", Clevert et al. (2015); Lee et al.",
      "startOffset" : 2,
      "endOffset" : 24
    }, {
      "referenceID" : 2,
      "context" : ", Clevert et al. (2015); Lee et al. (2016)).",
      "startOffset" : 2,
      "endOffset" : 43
    }, {
      "referenceID" : 22,
      "context" : "Designing neural network architectures: Research on automating neural network design goes back to the 1980s when genetic algorithm-based approaches were proposed to find both architectures and weights (Schaffer et al., 1992).",
      "startOffset" : 201,
      "endOffset" : 224
    }, {
      "referenceID" : 25,
      "context" : "Bayesian optimization has also been used (Shahriari et al., 2016) for automatic selection of network architectures (Bergstra et al.",
      "startOffset" : 41,
      "endOffset" : 65
    }, {
      "referenceID" : 1,
      "context" : ", 2016) for automatic selection of network architectures (Bergstra et al., 2013; Domhan et al., 2015) and hyperparameters (Snoek et al.",
      "startOffset" : 57,
      "endOffset" : 101
    }, {
      "referenceID" : 5,
      "context" : ", 2016) for automatic selection of network architectures (Bergstra et al., 2013; Domhan et al., 2015) and hyperparameters (Snoek et al.",
      "startOffset" : 57,
      "endOffset" : 101
    }, {
      "referenceID" : 28,
      "context" : ", 2015) and hyperparameters (Snoek et al., 2012; Swersky et al., 2013).",
      "startOffset" : 28,
      "endOffset" : 70
    }, {
      "referenceID" : 2,
      "context" : "(2013) proposed a meta-modeling approach based on Tree of Parzen Estimators (TPE) (Bergstra et al., 2011) to choose both the type of layers and hyperparameters of feed-forward networks; however, they fail to match the performance of handcrafted networks.",
      "startOffset" : 82,
      "endOffset" : 105
    }, {
      "referenceID" : 35,
      "context" : "For instance, methods using CNNs to approximate theQ-learning utility function (Watkins, 1989) have been successful in game-playing agents (Mnih et al.",
      "startOffset" : 79,
      "endOffset" : 94
    }, {
      "referenceID" : 18,
      "context" : "For instance, methods using CNNs to approximate theQ-learning utility function (Watkins, 1989) have been successful in game-playing agents (Mnih et al., 2015; Silver et al., 2016) and robotic control (Lillicrap et al.",
      "startOffset" : 139,
      "endOffset" : 179
    }, {
      "referenceID" : 26,
      "context" : "For instance, methods using CNNs to approximate theQ-learning utility function (Watkins, 1989) have been successful in game-playing agents (Mnih et al., 2015; Silver et al., 2016) and robotic control (Lillicrap et al.",
      "startOffset" : 139,
      "endOffset" : 179
    }, {
      "referenceID" : 15,
      "context" : ", 2016) and robotic control (Lillicrap et al., 2015; Levine et al., 2016).",
      "startOffset" : 28,
      "endOffset" : 73
    }, {
      "referenceID" : 13,
      "context" : ", 2016) and robotic control (Lillicrap et al., 2015; Levine et al., 2016).",
      "startOffset" : 28,
      "endOffset" : 73
    }, {
      "referenceID" : 10,
      "context" : "In traditional reinforcement learning settings, over-exploration can lead to slow convergence times, yet over-exploitation can lead to convergence to local minima (Kaelbling et al., 1996).",
      "startOffset" : 163,
      "endOffset" : 187
    }, {
      "referenceID" : 12,
      "context" : "Other biologically inspired ideas have also been explored; motivated by screening methods in genetics, Pinto et al. (2009) proposed a high-throughput network selection approach where they randomly sample thousands of architectures and choose promising ones for further training.",
      "startOffset" : 103,
      "endOffset" : 123
    }, {
      "referenceID" : 12,
      "context" : "Other biologically inspired ideas have also been explored; motivated by screening methods in genetics, Pinto et al. (2009) proposed a high-throughput network selection approach where they randomly sample thousands of architectures and choose promising ones for further training. In recent work, Saxena & Verbeek (2016) propose to sidestep the architecture selection process through densely connected networks of layers, which come closer to the performance of hand-crafted networks.",
      "startOffset" : 103,
      "endOffset" : 319
    }, {
      "referenceID" : 1,
      "context" : ", 2016) for automatic selection of network architectures (Bergstra et al., 2013; Domhan et al., 2015) and hyperparameters (Snoek et al., 2012; Swersky et al., 2013). Notably, Bergstra et al. (2013) proposed a meta-modeling approach based on Tree of Parzen Estimators (TPE) (Bergstra et al.",
      "startOffset" : 58,
      "endOffset" : 198
    }, {
      "referenceID" : 17,
      "context" : "the experience replay technique (Lin, 1993) has proved useful in experimental settings (Adam et al.",
      "startOffset" : 32,
      "endOffset" : 43
    }, {
      "referenceID" : 0,
      "context" : "the experience replay technique (Lin, 1993) has proved useful in experimental settings (Adam et al., 2012; Mnih et al., 2015).",
      "startOffset" : 87,
      "endOffset" : 125
    }, {
      "referenceID" : 18,
      "context" : "the experience replay technique (Lin, 1993) has proved useful in experimental settings (Adam et al., 2012; Mnih et al., 2015).",
      "startOffset" : 87,
      "endOffset" : 125
    }, {
      "referenceID" : 3,
      "context" : "(2) In many cases, it is impossible to analytically solve Bellman’s Equation (Bertsekas, 2015), but it can be formulated as an iterative update Qt+1(si, u) = (1− α)Qt(si, u) + α [ rt + γmaxu′∈U(sj)Qt(sj , u ′) ] .",
      "startOffset" : 77,
      "endOffset" : 94
    }, {
      "referenceID" : 3,
      "context" : "For well formulated problems, limt→∞Qt(s, u) = Q∗(s, u), as long as each transition is sampled infinitely many times (Bertsekas, 2015).",
      "startOffset" : 117,
      "endOffset" : 134
    }, {
      "referenceID" : 18,
      "context" : "We choose the behavior distribution using an -greedy strategy (Mnih et al., 2015).",
      "startOffset" : 62,
      "endOffset" : 81
    }, {
      "referenceID" : 16,
      "context" : "In addition, when the exploration cost is large (which is true for our problem setting), it is beneficial to use the experience replay technique for faster convergence (Lin, 1992).",
      "startOffset" : 168,
      "endOffset" : 179
    }, {
      "referenceID" : 3,
      "context" : "(2) In many cases, it is impossible to analytically solve Bellman’s Equation (Bertsekas, 2015), but it can be formulated as an iterative update Qt+1(si, u) = (1− α)Qt(si, u) + α [ rt + γmaxu′∈U(sj)Qt(sj , u ′) ] . (3) Equation 3 is the simplest form of Q-learning proposed by Watkins (1989). For well formulated problems, limt→∞Qt(s, u) = Q∗(s, u), as long as each transition is sampled infinitely many times (Bertsekas, 2015).",
      "startOffset" : 78,
      "endOffset" : 291
    }, {
      "referenceID" : 17,
      "context" : "The Q-value update is applied to the transitions in temporally reversed order, which has been shown to speed up Q-values convergence (Lin, 1993).",
      "startOffset" : 133,
      "endOffset" : 144
    }, {
      "referenceID" : 9,
      "context" : "Our experiments using Caffe (Jia et al., 2014) took 8-10 days to complete for each dataset with a hardware setup consisting of 10 NVIDIA GPUs.",
      "startOffset" : 28,
      "endOffset" : 46
    }, {
      "referenceID" : 9,
      "context" : "Our experiments using Caffe (Jia et al., 2014) took 8-10 days to complete for each dataset with a hardware setup consisting of 10 NVIDIA GPUs. After the agent completed the schedule (Table 2), we selected the top ten models that were found over the course of exploration. These models were then finetuned using a much longer training schedule, and only the top five were used for ensembling. We now provide details of the datasets and the finetuning process. The Street View House Numbers (SVHN) dataset has 10 classes with a total of 73,257 samples in the original training set, 26,032 samples in the test set, and 531,131 additional samples in the extended training set. During the exploration phase, we only trained with the original training set, using 5,000 random samples as validation. We finetuned the top ten models with the original plus extended training set, by creating preprocessed training and validation sets as described by Lee et al. (2016). Our final learning rate schedule after tuning on validation set was 0.",
      "startOffset" : 29,
      "endOffset" : 959
    }, {
      "referenceID" : 20,
      "context" : "68 FitNet (Romero et al., 2014) 8.",
      "startOffset" : 10,
      "endOffset" : 31
    }, {
      "referenceID" : 29,
      "context" : "25 - All-CNN (Springenberg et al., 2014) 7.",
      "startOffset" : 13,
      "endOffset" : 40
    }, {
      "referenceID" : 23,
      "context" : "These layers generate N learnable linear transformations of the input data, which is similar in spirit to preprocessing of input data from RGB to a different color spaces such as YUV, as found in prior work (Sermanet et al., 2012; 2013).",
      "startOffset" : 207,
      "endOffset" : 236
    }, {
      "referenceID" : 34,
      "context" : "Method CIFAR-10 SVHN MNIST CIFAR-100 DropConnect (Wan et al., 2013) 9.",
      "startOffset" : 49,
      "endOffset" : 67
    }, {
      "referenceID" : 7,
      "context" : "14∗ Resnet(110) (He et al., 2015) 6.",
      "startOffset" : 16,
      "endOffset" : 33
    }, {
      "referenceID" : 8,
      "context" : "61 - Resnet(1001) (He et al., 2016) 4.",
      "startOffset" : 18,
      "endOffset" : 35
    }, {
      "referenceID" : 4,
      "context" : "71 ELU (Clevert et al., 2015) 6.",
      "startOffset" : 7,
      "endOffset" : 29
    }, {
      "referenceID" : 12,
      "context" : "28 Tree+Max-Avg (Lee et al., 2016) 6.",
      "startOffset" : 16,
      "endOffset" : 34
    }, {
      "referenceID" : 6,
      "context" : "14∗ Resnet(110) (He et al., 2015) 6.61 - Resnet(1001) (He et al.",
      "startOffset" : 17,
      "endOffset" : 54
    }, {
      "referenceID" : 4,
      "context" : "28 (Clevert et al., 2015) 1.",
      "startOffset" : 3,
      "endOffset" : 25
    }, {
      "referenceID" : 12,
      "context" : "69 (Lee et al., 2016) 0.",
      "startOffset" : 3,
      "endOffset" : 21
    }, {
      "referenceID" : 12,
      "context" : "31 (Lee et al., 2016) Table 5: Prediction Error for the top MetaQNN (CIFAR-10) model trained for other tasks.",
      "startOffset" : 3,
      "endOffset" : 21
    }, {
      "referenceID" : 1,
      "context" : "2% reported by Bergstra et al. (2011) on CIFAR-10; and it obtains an error of 0.",
      "startOffset" : 15,
      "endOffset" : 38
    }, {
      "referenceID" : 1,
      "context" : "2% reported by Bergstra et al. (2011) on CIFAR-10; and it obtains an error of 0.32% as compared to 7.9% reported by Verbancsics & Harguess (2013) on MNIST.",
      "startOffset" : 15,
      "endOffset" : 146
    }, {
      "referenceID" : 3,
      "context" : "It would be possible to move to larger state-action spaces using methods for Q-function approximation (Bertsekas, 2015; Mnih et al., 2015).",
      "startOffset" : 102,
      "endOffset" : 138
    }, {
      "referenceID" : 18,
      "context" : "It would be possible to move to larger state-action spaces using methods for Q-function approximation (Bertsekas, 2015; Mnih et al., 2015).",
      "startOffset" : 102,
      "endOffset" : 138
    } ],
    "year" : 2017,
    "abstractText" : "At present, designing convolutional neural network (CNN) architectures requires both human expertise and labor. New architectures are handcrafted by careful experimentation or modified from a handful of existing networks. We introduce MetaQNN, a meta-modeling algorithm based on reinforcement learning to automatically generate high-performing CNN architectures for a given learning task. The learning agent is trained to sequentially choose CNN layers using Qlearning with an -greedy exploration strategy and experience replay. The agent explores a large but finite space of possible architectures and iteratively discovers designs with improved performance on the learning task. On image classification benchmarks, the agent-designed networks (consisting of only standard convolution, pooling, and fully-connected layers) beat existing networks designed with the same layer types and are competitive against the state-of-the-art methods that use more complex layer types. We also outperform existing meta-modeling approaches for network design on image classification tasks.",
    "creator" : "LaTeX with hyperref package"
  }
}