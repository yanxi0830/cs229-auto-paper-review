{
  "name" : "1610.05394.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Sequential Learning without Feedback∗",
    "authors" : [ "Manjesh Hanawal", "Csaba Szepesvari", "Venkatesh Saligrama" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Sequential sensor acquisition arises in many security and healthcare diagnostic systems. In these applications we have a diverse collection of sensor-based-tests with differing costs and accuracy. In these applications (see Fig. 1) inexpensive tests are first conducted and based on their outcomes a decision for acquiring more (expensive) tests are made. The goal in these systems is to maximize overall accuracy for an available cost-budget. Generally, the components that can be optimized include sensor classifiers (to improve test accuracy), sensor ordering, and decision strategies for sequential sensor selection. Nevertheless, sensor classifiers and sensor ordering are typically part of the infrastructure and generally harder to control/modify in both security and medical systems. To this end we focus here on the sequential sensor selection problem and use the terms sensor and test interchangeably. The need for systematically learning optimal decision strategies for balancing accuracy & costs arises from the fact that these applications involve legacy systems where sensor/test selection strategies are local; often managed under institutional, rather than national guidelines [?]. While it is possible to learn such decision strategies given sufficient annotated training data, what makes these applications challenging is that it is often difficult to acquire in-situ ground truth labels.\nThese observations leads us to the problem of learning decision strategies for optimal sensor selection in situations where we do not have the benefit of ground-truth annotations, and what we\n∗Manjesh Hanawal is with the Department of Industrial Engineering at IIT Bombay. His research was conducted while he was a post-doctoral associate at Boston University. Csaba Szepesvari is with the Department of Computer Science at University of Alberta. Venkatesh Saligrama is with the Department of Electrical and Computer Engineering at Boston University.\nar X\niv :1\n61 0.\n05 39\n4v 1\n[ cs\n.L G\n] 1\n8 O\nct 2\n01 6\nSensor 1 (Cost c1)\nSensor 2 (Cost c2)\nSensor K (Cost cK)\nrefer to as the Unsupervised Sensor Selection (USS) problem. In Sec. 3 we pose our problem as a version of stochastic partial monitoring problem [2] with atypical reward structure, where tests are viewed as actions and sequential observations serves as side information. As is common, we pose the problem in terms of competitive optimality. We consider a competitor who can choose an optimal test with the benefit of hindsight. Our goal is to minimize cummulative regret based on learning the optimal test based on observations in multiple rounds of play. Recall that in a stochastic partial monitoring problem a decision maker needs to choose the action with the lowest expected cost by repeatedly trying the actions and observing some feedback. The decision maker lacks the knowledge of some key information, such as in our case, the misclassification error rates of the classifiers, but had this information been available, the decision maker could calculate the expected costs of all the actions (sensor acquisitions) and could choose the best action (test). The feedback received by the decision maker in a given round depends stochastically on the unknown information and the action chosen. Bandit problems [3] are a special case of partial monitoring, where the key missing information is the expected cost for each action, and the feedback is the noisy version of the expected cost of the action chosen. In the USS problem the learner only observes the outputs of the classifiers, but not the label to be predicted over multiple rounds in a stochastic, stationary environment.\nIn Sec. 3 we first show that, unsurprisingly that no learner can achieve sublinear regret without further assumptions. To this end we propose the notions of weak and strong dominance on tests, which correspond to constraints on joint probability distributions over the latent state and testoutcomes. Strong dominance (SD) is a property arising in many Engineered systems and says that whenever a test is accurate on an example, a later test in the sequence is almost surely accurate on that example. Weak dominance is a relaxed notion that allows for errors in these predictions. We empirically demonstrate that weak dominance appears to hold by evaluating it on several real datasets. We also show that in a sense weak dominance is fundamental, namely, without this condition there exist problem instances that result in linear regret. On the other hand whenever this condition is satisfied there exist polynomial time algorithms that lead to sublinear regret.\nOur proof of sublinear regret in Sec. 5 is based on reducing USS to a version of multi-armed bandit problem (MAB) with side-observation. The latter problem has already been shown to have sub-linear regret in the literature. In our reduction, we identify tests as bandit arms. The payoff of an arm is given by marginal losses relative to the root test, and the side observation structure is\ndefined by the feedback graph induced by the directed graph. We then formally show that there is a one-to-one mapping between algorithms for USS and algorithms for MAB with side-observation. In particular, under weak dominance, the regret bounds for MAB with side-observation then imply corresponding regret bounds for USS."
    }, {
      "heading" : "1.1 Related Work",
      "text" : "In contrast to our USS setup there exists a wide body of literature dealing with sensor acquisition (see[4, 5, 6]). Like us they also deal with cascade models with costs for features/tests but their method is based on training decision strategies with fully supervised data for prediction-time use. There are also several methods that work in an online bandit setting and train prediction models with feature costs [12] but again they require ground-truth labels as reward-feedback. A somewhat more general version of [12] is developed in [13] where in addition the learner can choose to acquire ground-truth labels for a cost.\nOur paper bears some similarity with the concept of active classification, which deals with learning stopping policies[7, 8] among a given sequence of tests. Like us these works also consider costs for utilizing tests and the goal is to learn when to stop to make decisions. Nevertheless, unlike our setup the loss associated with the decision is observed in their context.\nOur paper is related to the framework of finite partial monitoring problems[2], which deals with how to infer unknown key information and where tests/actions reveal different types of information about the unknown information. In this context [14] consider special cases where payoff/rewards for a subset of actions are observed. This is further studied as a side-observation problem in [15] and as graph-structured feedback [16, 17, 18]). Our work is distinct from these setups because we are unable to observe rewards for our chosen actions or any other actions."
    }, {
      "heading" : "2 Background",
      "text" : "In this section we will introduce a number of sequential decision making problems, namely stochastic partial monitoring, bandits and bandits with side-observations, which we will build upon later.\nFirst, a few words about our notation: We will use upper case letters to denote random variables. The set of real numbers is denoted by R. For positive integer n, we let [n] = {1, . . . , n}. We let M1(X ) to denote the set of probability distributions over some set X . When X is finite with a cardinality of d .= |X |, M1(X ) can be identified with the d-dimensional probability simplex.\nIn a stochastic partial monitoring problem (SPM) a learner interacts with a stochastic environment in a sequential manner. In round t = 1, 2, . . . the learner chooses an action At from an action set A, and receives a feedback Yt ∈ Y from a distribution p which depends on the action chosen and also on the environment instance identified with a “parameter” θ ∈ Θ: Yt ∼ p(·;At, θ). The learner also incurs a reward Rt, which is a function of the action chosen and the unknown parameter θ: Rt = r(At, θ). The reward may or may not be part of the feedback for round t. The learner’s goal is to maximize its total expected reward. The family of distributions (p(·; a, θ))a,θ and the family of rewards (r(a, θ))a,θ and the set of possible parameters Θ are known to the learner, who uses this knowledge to judiciously choose its next action to reduce its uncertainty about θ so that it is able to eventually converge on choosing only an optimal action a∗(θ), achieving the best possible reward per round, r∗(θ) = maxa∈A r(a, θ). The quantification of the learning speed is given by the expected regret Rn = nr∗(θ)− E [ ∑n t=1Rt], which, for brevity and when it does not cause confusion, we will just call regret. A sublinear expected regret, i.e., Rn/n→ 0 as n→∞ means that the learner in\nthe long run collects almost as much reward on expectation as if the optimal action was known to it. In some cases it is more natural to define the problems in terms of costs as opposed to rewards; in such cases the definition of regret is modified appropriately by flipping the sign of rewards and costs.\nBandit Problems are a special case of SPMs where Y is the set of real numbers, r(a, θ) is the mean of distribution p(·; a, θ) and thus the learner in every round the learner upon choosing an action At receives the noisy reward Yt ∼ p(·;At, θ) as feedback. A finite armed bandit with side-observations [15] is also a special case of SPMs, where the learner upon choosing an action a ∈ A receives noisy reward observations, namely, Yt = (Yt,a)a∈N(At), Yt,a ∼ pr(·; a, θ), E [Yt,a] = r(a, θ), from a neighbor-set N (a) ⊂ A, which is a priori known to the learner. To cast this setting as an SPM we let Y as the set ∪Ki=0Ri and define the family of distributions (p(·; a, θ))a,θ such that Yt ∼ p(·;At, θ). The framework of SPM is quite general and allows for parametric and non-parametric sets Θ. In what follows we identify Θ with set of instances (p(·; a, θ), r(a, θ))θ∈Θ. In other words we view elements of Θ as a pair p, r where p(·; a) is a probability distribution over Y for each a ∈ A and r is a map from A to the reals."
    }, {
      "heading" : "3 Unsupervised Sensor Selection",
      "text" : "Preliminaries and Notation: Proofs for formal statements appears in the Appendix. We will use upper case letters to denote random variables. The set of real numbers is denoted by R. For positive integer n, we let [n] = {1, . . . , n}. We let M1(X ) to denote the set of probability distributions over some set X . When X is finite with a cardinality of d .= |X |, M1(X ) can be identified with the d-dimensional probability simplex.\nWe first consider the unsupervised, stochastic, cascaded sensor selection problem. We cast it as a special case of stochastic partial monitoring problem (SPM), which is described in the appendix. Later we will briefly describe extensions to tree-structures and contextual cases. Formally, a problem instance is specified by a pair θ = (P, c), where P is a distribution over the K + 1 dimensional hypercube, and c is a K-dimensional, nonnegative valued vector of costs. While c is known to the learner from the start, P is initially unknown. Henceforth we identify problem instance θ by P . The instance parameters specify the learner-environment interaction as follows: In each round for t = 1, 2, . . . , the environment generates a K + 1-dimensional binary vector Y = (Yt, Y 1t , . . . , Y Kt ) chosen at random from P . Here, Y it is the output of sensor i, while Yt is a (hidden) label to be guessed by the learner. Simultaneously, the learner chooses an index It ∈ [K] and observes the sensor outputs Y 1t , . . . , Y It t . The sensors are known to be ordered from least accurate to most accurate, i.e., γk(θ) . = P ( Yt 6= Y kt ) is decreasing with k increasing. Knowing this, the learner’s\nchoice of It also indicates that he/she chooses It to predict the unknown label Yt. Observing sensors is costly: The cost of choosing It is CIt . = c1 + · · · + cIt . The total cost suffered by the learner in round t is thus CIt + I{Yt 6= Y Itt }. The goal of the learner is to compete with the best choice\ngiven the hindsight of the values (γk)k. The expected regret of learner up to the end of round n is Rn = ( ∑n t=1 E [ CIt + I{Yt 6= Y Itt } ] )− nmink(Ck + γk). Sublinear Regret: The quantification of the learning speed is given by the expected regret Rn = nr ∗(θ)− E [ ∑n\nt=1Rt], which, for brevity and when it does not cause confusion, we will just call regret. A sublinear expected regret, i.e., Rn/n → 0 as n → ∞ means that the learner in the long run collects almost as much reward on expectation as if the optimal action was known to it.\nFor future reference, we let c(k, θ) = E [ Ck + I{Yt 6= Y kt } ] (= Ck + γk) and c∗(θ) = mink c(k, θ).\nThus, Rn = ( ∑n\nt=1 E [c(It, θ)])−nc∗(θ). In what follows, we shall denote by A∗(θ) the set of optimal actions of θ and we let a∗(θ) denote the optimal action that has the smallest index 1. Thus, in particular, a∗(θ) = minA∗(θ). Next, for future reference note that one can express optimal actions from the viewpoint of marginal costs and marginal error. In particular an action i is optimal if for all j > i the marginal increase in cost, Cj −Ci, is larger than the marginal decrease in error, γi − γj : ∀ j ≥ i\nCj − Ci︸ ︷︷ ︸ Marginal Cost\n≥ E [ I{Yt 6= Y it } − I{Yt 6= Y j t } ]\n︸ ︷︷ ︸ Marginal Error = γi − γj . (1)"
    }, {
      "heading" : "4 When is USS Learnable?",
      "text" : "Let ΘSA be the set of all stochastic, cascaded sensor acquisition problems. Thus, θ ∈ ΘSA such that if Y ∼ θ then γk(θ) := P ( Y 6= Y k ) is a decreasing sequence. Given a subset Θ ⊂ ΘSA, we say that Θ is learnable if there exists a learning algorithm A such that for any θ ∈ Θ, the expected regret E [Rn(A, θ)] of algorithm A on instance θ is sublinear. A subset Θ is said to be a maximal learnable problem class if it is learnable and for any Θ′ ⊂ ΘSA superset of Θ, Θ′ is not learnable. In this section we study two special learnable problem classes, ΘSD ⊂ ΘWD, where the regularity properties of the instances in ΘSD are more intuitive, while ΘWD can be seen as a maximal extension of ΘSD.\nLet us start with some definitions. Given an instance θ ∈ ΘSA, we can decompose θ (or P ) into the joint distribution PS of the sensor outputs S = (Y 1, . . . , Y k) and the conditional distribution of the state of the environment, given the sensor outputs, PY |S . Specifically, letting (Y, S) ∼ P , for s ∈ {0, 1}K and y ∈ {0, 1}, PS(s) = P (S = s) and PY |S(y|s) = P (Y = y|S = s). We denote this by P = PS ⊗ PY |S . A learner who observes the output of all sensors for long enough is able to identify PS with arbitrary precision, while PY |S remains hidden from the learner. This leads to the following statement:\nProposition 1. A subset Θ ⊂ ΘSA is learnable if and only if there exists a map a : M1({0, 1}K)→ [K] such that for any θ ∈ Θ with decomposition P = PS ⊗ PY |S, a(PS) is an optimal action in θ.\nAn action selection map a : M1({0, 1}K) → [K] is said to be sound for an instance θ ∈ ΘSA with θ = PS ⊗ PY |S if a(PS) selects an optimal action in θ. With this terminology, the previous proposition says that a set of instances Θ is learnable if and only if there exists a sound action selection map for all the instances in Θ.\nA class of sensor acquisition problems that contains instances that satisfy the so-called strong dominance condition will be shown to be learnable:\n1Note that even if i < j are optimal actions, there can be suboptimal actions in the interval [i, j](= [i, j] ∩ N) (e.g., γ1 = 0.3, C1 = 0, γ2 = 0.25, C2 = 0.1, γ3 = 0, C3 = 0.3.\nDefinition 1 (Strong Dominance (SD)). An instance θ ∈ ΘSA is said to satisfy the strong dominance property if it holds in the instance that if a sensor predicts correctly then all the sensors in the subsequent stages of the cascade also predict correctly, i.e., for any i ∈ [K],\nY i = Y ⇒ Y i+1 = · · · = Y K = Y (2)\nalmost surely (a.s.) where (Y, Y 1, . . . , Y K) ∼ P .\nBefore we develop this concept further we will motivate strong dominance based on experiments on a few real-world datasets. SD property naturally arises in the context of error-correcting codes (see [?, ?]), where one sequentially corrects for errors, and thus whenever a decoder is accurate the following decoders are also accurate. On the other hand for real-datasets SD holds only approximately. Table 4 lists the error probabilities of the classifiers (sensors) for the heart and diabetic datasets from UCI repository. We split features into two sets based on provided costs (cheap tests are based on patient history and costly tests include all the features). We then trained an SVM classifier with 5-fold cross-validation and report scores based on held-out test data. The last column lists the\nprobability that second sensor misclassifies an instance that is correctly classified by the first sensor. SD is the notion that suggests that this probability is zero. We find in these datasets that δ12 is small thus justifying our notion. In general we have found this behavior is representative of other cost-associated datasets.\nWe next show that strong dominance conditions ensures learnability. To this end, let ΘSD = {θ ∈ ΘSA : θ satisfies the strong dominance condition }.\nTheorem 1. The set ΘSD is learnable.\nWe start with a proposition that will be useful beyond the proof of this result. In this proposition, γi = γi(θ) for θ ∈ ΘSA and (Y, Y 1, . . . , Y K) ∼ θ.\nProposition 2. For any i, j ∈ [K], γi − γj = P ( Y i 6= Y j ) − 2P ( Y j 6= Y, Y i = Y ) .\nThe proof motivates the definition of weak dominance, a concept that we develop next through a series of smaller propositions. In these propositions, as before (Y, Y 1, . . . , Y K) ∼ P where P ∈M1({0, 1}K+1), γi = P ( Y i 6= Y ) , i ∈ [K], and Ci = c1 + · · ·+ ci. We start with a corollary of Proposition 2\nCorollary 1. Let i < j. Then 0 ≤ γi − γj ≤ P ( Y i 6= Y j ) .\nProposition 3. Let i < j. Assume\nCj − Ci 6∈ [γi − γj ,P ( Y i 6= Y j ) ) . (3)\nThen γi + Ci ≤ γj + Cj if and only if Cj − Ci ≥ P ( Y i 6= Y j ) .\nProof. ⇒: From the premise, it follows that Cj−Ci ≥ γi−γj . Thus, by (3), Cj−Ci ≥ P ( Y i 6= Y j ) .\n⇐: We have Cj − Ci ≥ P ( Y i 6= Y j ) ≥ γi − γj , where the last inequality is by Corollary 1.\nProposition 4. Let j < i. Assume\nCi − Cj 6∈ (γj − γi,P ( Y i 6= Y j ) ] . (4)\nThen, γi + Ci ≤ γj + Cj if and only if Ci − Cj ≤ P ( Y i 6= Y j ) . Proof. ⇒: The condition γi + Ci ≤ γj + Cj implies that γj − γi ≥ Ci − Cj . By Corollary 1 we get P ( Y i 6= Y j ) ≥ Ci − Cj . ⇐: Let Ci − Cj ≤ P ( Y i 6= Y j ) . Then, by (4), Ci − Cj ≤ γj − γi.\nThese results motivate the following definition:\nDefinition 2 (Weak Dominance). An instance θ ∈ ΘSA is said to satisfy the weak dominance property if for i = a∗(θ),\n∀j > i : Cj − Ci ≥ P ( Y i 6= Y j ) . (5)\nWe denote the set of all instances in ΘSA that satisfies this condition by ΘWD.\nNote that ΘSD ⊂ ΘWD since for any θ ∈ ΘSD, any j > i = a∗(θ), on the one hand Cj−Ci ≥ γi−γj , while on the other hand, by the strong dominance property, P ( Y i 6= Y j ) = γi − γj .\nWe now relate weak dominance to the optimality condition described in Eq. (1). Weak dominance can be viewed as a more stringent condition for optimal actions. Namely, for an action to be optimal we also require that the marginal cost be larger than marginal absolute error:\nCj − Ci︸ ︷︷ ︸ Marginal Cost ≥ E [∣∣∣I{Yt 6= Y it } − I{Yt 6= Y jt }∣∣∣]︸ ︷︷ ︸\nMarginal Absolute Error\n, ∀ j ≥ i . (6)\nThe difference between marginal error in Eq. (1) and marginal absolute error is the presence of the absolute value. We will show later that weak-dominant set is a maximal learnable set, namely, the set cannot be expanded while ensuring learnability.\nWe propose the following action selector awd : M1({0, 1}K)→ [K]:\nDefinition 3. For PS ∈M1({0, 1}K) let awd(PS) denote the smallest index i ∈ [K] such that\n∀j < i : Ci − Cj < P ( Y i 6= Y j ) , (7a)\n∀j > i : Cj − Ci ≥ P ( Y i 6= Y j ) , (7b)\nwhere Ci = c1 + · · ·+ ci, i ∈ [K] and (Y 1, . . . , Y K) ∼ PS. (If no such index exists, awd is undefined, i.e., awd is a partial function.)\nProposition 5. For any θ ∈ ΘWD with θ = PS ⊗ PY |S, awd(PS) is well-defined.\nProposition 6. The map awd is sound over ΘWD: In particular, for any θ ∈ ΘWD with θ = PS ⊗ PY |S, awd(PS) = a∗(θ).\nCorollary 2. The set ΘWD is learnable.\nProof. By Proposition 5, awd is well-defined over ΘWD, while by Proposition 6, awd is sound over ΘWD. By Proposition 1, ΘWD is learnable, as witnessed by awd.\nProposition 7. Let θ ∈ ΘSA and θ = PS ⊗ PY |S be such that awd is defined for PS and awd(PS) = a∗(θ). Then θ ∈ ΘWD.\nProof. Immediate from the definitions.\nAn immediate corollary of the previous proposition is as follows:\nCorollary 3. Let θ ∈ ΘSA and θ = PS ⊗ PY |S. Assume that awd is defined for PS and θ 6∈ ΘWD. Then awd(PS) 6= a∗(θ).\nThe next proposition states that awd is essentially the only sound action selector map defined for all instances derived from instances of ΘWD:\nProposition 8. Take any action selector map a : M1({0, 1}K) → [K] which is sound over ΘWD. Then, for any PS such that θ = PS ⊗ PY |S ∈ ΘWD with some PY |S, a(PS) = awd(PS).\nThe next result shows that the set ΘWD is essentially a maximal learnable set in dom(awd):\nTheorem 2. Let a : M1({0, 1}K) → [K] be an action selector map such that a is sound over the instances of ΘWD. Then there is no instance θ = PS ⊗PY |S ∈ ΘSA \\ΘWD such that PS ∈ dom(awd), the optimal action of θ is unique and a(PS) = a∗(θ).\nNote that dom(awd) \\ {PS : ∃PY |S s.t. PS ⊗ PY |S ∈ ΘWD} 6= ∅, i.e., the theorem statement is non-vacuous. In particular, for K = 2, consider (Y, Y 1, Y 2) such that Y and Y 1 are independent and Y 2 = 1− Y 1, we can see that the resulting instance gives rise to PS which is in the domain of awd for any c ∈ RK+ (because here γ1 = γ2 = 1/2, thus γ1 − γ2 = 0 while P ( Y 1 6= Y 2 ) = 1).\nProof. Let a as in the theorem statement. By Proposition 8, awd is the unique sound action-selector map over ΘWD. Thus, for any θ = PS ⊗ PY |S ∈ ΘWD, awd(PS) = a(PS). Hence, the result follows from Corollary 3.\nWhile ΘWD is learnable, it is not uniformly learnable, i.e., the minimax regret R∗n(ΘWD) = infA supθ∈ΘWD Rn(A, θ) over ΘWD grows linearly: Theorem 3. ΘWD is not uniformly learnable: R∗n(ΘWD) = Ω(n).\nExtensions: We describe a few extensions here but omit details due to lack of space. Tree-Architectures: We can deal with trees in an analogous fashion. Like for cascades we keep track of disagreements along each path. Under SD these disagreements in turn approximate marginal error. This fact is sufficient to identify the optimal sensor (see Eqn. 1). Similarly our results also generalize to trees under WD condition. Context-Dependent Sensor Selection: Each example has a context x ∈ Rd. A test is a mapping that takes (partial) context and maps to an output space. We briefly describe how to extend to context-dependent sensor selection. Analogous to the context-independent case we impose context dependent notions for SD and WD, namely, Eq. 2 and Eq. 5 hold conditioned on each x ∈ X . To handle these cases we let γi(x) , Pr(Y i 6= Y ) and γij(x) , Pr(Y i 6= Y j) denote the conditional error probability for the ith sensor and the conditional marginal error probability between sensor i and j respectively. Then the results can be generalized under a parameterized GLM model for disagreement, namely, the log-odds ratio log γij(x)1−γij(x) can be written as θ ′ ijx for some unknown θij ∈ Rd."
    }, {
      "heading" : "5 Regret Equivalence",
      "text" : "In this section we establish that USS with SD property is ‘regret equivalent’ to an instance of multi-armed-bandit (MAB) with side-information. The corresponding MAB algorithm can then be suitably imported to solve USS efficiently.\nLet PUSS be the set of USSs with action set A = [K]. The corresponding bandit problems will have the same action set, while for action k ∈ [K] the neighborhood set is N (k) = [k]. Take any instance (P, c) ∈ PUSS and let (Y, Y 1, . . . , Y K) ∼ P be the unobserved state of environment. We let the reward distribution for arm k in the corresponding bandit problem be a shifted Bernoulli distribution. In particular, the cost of arm k follows the distribution of I{Y k 6=Y 1} − Ck (we use costs here to avoid flipping signs).\nThe costs for different arms are defined to be independent of each other. Let Pside denote the set of resulting bandit problems and let f : PUSS → Pside be the map that transforms USS instances to bandit instances by following the transformation that was just described.\nNow let π ∈ Π(Pside) be a policy for Pside. Policy π can also be used on any (P, c) instance in PUSS in an obvious way: In particular, given the history of actions and states A1, U1, . . . , At, Ut in θ = (P, c) where Us = (Ys, Y 1s , . . . , Y Ks ) such that the distribution of Us given that As = a is P marginalized to Ya, the next action to be taken is At+1 ∼ π(·|A1, V1, . . . , At, Vt), where Vs = (I{Y 1s 6=Y 1s }−C1, . . . , I{Y 1s 6=Y Ass }−CAs). Let the resulting policy be denoted by π\n′. The following can be checked by simple direct calculation:\nProposition 9. If θ ∈ ΘSD, then the regret of π on f(θ) ∈ Pside is the same as the regret of π′ on θ.\nThis implies that R∗T (ΘSD) ≤ R∗T (f(ΘSD)). Now note that this reasoning can also be repeated in the other “direction”: For this, first note that the map f has a right inverse g (thus, f ◦ g is the identity over Pside) and if π′ is a policy for PUSS, then π′ can be “used” on any instance θ ∈ Pside via the “inverse” of the above policy-transformation: Given the sequence (A1, V1, . . . , At, Vt) where Vs = (B 1 s + C1, . . . , B K s + Cs) is the vector of costs for round s with Bks being a Bernoulli with parameter γk, let At+1 ∼ π′(·|A1,W1, . . . , At,Wt) where Ws = (B1s , . . . , BAss ). Let the resulting policy be denoted by π. Then the following holds:\nProposition 10. Let θ ∈ f(ΘSD). Then the regret of policy π on θ ∈ f(ΘSD) is the same as the regret of policy π′ on instance f−1(θ).\nHence, R∗T (f(ΘSD)) ≤ R∗T (ΘSD). In summary, we get the following result:\nCorollary 4. R∗T (ΘSD) = R ∗ T (f(ΘSD)).\nLower Bounds: Note that as a consequence of the reduction and the one-to-one correspondence between the two problems, lower bounds for MAB with side-information is a lower bound for USS problem."
    }, {
      "heading" : "6 Algorithms",
      "text" : "The reduction of the previous section suggests that one can utilize an algorithm developed for stochastic bandits with side-observation to solve a USS satisfying SD property. In this paper we make use of Algorithm 1 of [18] that was proposed for stochastic bandits with Gaussian side observations. As noted in the same paper, the algorithm is also suitable for problems where the payoff distributions\nare sub-Gaussian. As Bernoulli random variables are σ2 = 1/4-sub-Gaussian (after centering), the algorithm is also applicable in our case.\nFor the convenience of the reader, we give the algorithm resulting from applying the reduction to Algorithm 1 of [18] in an explicit form. For specifying the algorithm we need some extra notation. Recall that given a USS instance θ = (P, c), we let γk = P ( Y 6= Y k ) where (Y, Y 1, . . . , Y K) ∼ P and k ∈ [K]. Let k∗ = arg mink γk + Ck denote the optimal action and ∆k(θ) = γk + Ck − (γk∗ + Ck∗) the sub-optimality gap of arm k. Further, let ∆∗(θ) = min{∆k(θ), k 6= k∗} denote the smallest positive sub-optimality gap and define ∆∗k(θ) = max{∆k(θ),∆∗(θ)}.\nSince cost vector c is fixed, in the following we use parameter γ in place of θ to denote the problem instance. A (fractional) allocation count u ∈ [0,∞)K determines for each action i how many times the action is selected. Thanks to the cascade structure, using an action i implies observing the output of all the sensors with index j less than equal to i. Hence, a sensor j gets observed uj+uj+1 + · · ·+uK times. We call an allocation count “sufficiently informative” if (with some level of confidence) it holds that (i) for each suboptimal choice, the number of observations for the corresponding sensor is sufficiently large to distinguish it from the optimal choice; and (ii) the optimal choice is also distinguishable from the second best choice. We collect these counts into the set C(γ) for a given parameter γ: C(γ) = {u ∈ [0,∞)K : uj + uj+1 + · · ·+ uK ≥ 2σ 2\n(∆∗j (θ)) 2 , j ∈ [K]} (note that σ2 = 1/4).\nFurther, let u∗(γ) be the allocation count that minimizes the total expected excess cost over the set of sufficiently informative allocation counts: In particular, we let u∗(γ) = argminu∈C(γ)〈u,∆(θ)〉 with the understanding that for any optimal action k, u∗k(γ) = min{uk : u ∈ C(γ)} (here, 〈x, y〉 = ∑ i xiyi is the standard inner product of vectors x, y). For an allocation count u ∈ [0,∞)K let m(u) ∈ NK denote total sensor observations, where mj(u) = ∑j i=1 ui corresponds to observations of sensor j.\nAlgorithm 1 Algorithm for USS under SD property 1: Play action K and observe Y 1, . . . , Y K . 2: Set γ̂1i ← I{Y 1 6=Y i} for all i ∈ [K]. 3: Initialize the exploration count: ne ← 0. 4: Initialize the allocation counts: NK(1)← 1.\n5: for t = 2, 3, ... do 6: if N(t−1)4α log t ∈ C(γ̂\nt−1) then 7: Set It ← argmink∈[K] c(k, γ̂t−1). 8: else 9: if NK(t− 1) < β(ne)/K then\n10: Set It = K. 11: else 12: Set It to some i for which Ni(t− 1) < u∗i (γ̂t−1)4α log t. 13: end if 14: Increment exploration count: ne ← ne+ 1. 15: end if 16: Play It and observe Y 1, . . . , Y It . 17: For i ∈ [It], set\nγ̂ti ← (1− 1t )γ̂ t−1 i + 1 t I{Y 1 6=Y i}.\n18: end for\nThe idea of Algorithm 1 is as follows: The algorithm keeps track of an estimate γ̂t := (γ̂ti )i∈[K] of γ in each round, which is initialized by pulling arm K as this arm gives information about all the other arms. In each round, the algorithm first checks whether given the current estimate γ̂t and the current confidence level (where the confidence level is gradually increased over time), the current allocation count N(t) ∈ NK is sufficiently informative (cf. line 6). If this holds, the action that is optimal under γ̂(t) is chosen (cf. line 7). If the check fails, we need to explore. The idea of the exploration is that it tries to ensure that the “optimal plan” – assuming γ̂ is the “correct” parameter – is followed (line 12). However, this is only reasonable, if all components of γ are relatively well-estimated. Thus, first the algorithm checks whether any of the components of γ has a chance of being extremely poorly estimated (line 9). Note that the requirement here is that a significant, but still altogether diminishing fraction of the exploration rounds is spent on estimating each components: In the long run, the fraction of exploration rounds amongst all rounds itself is diminishing; hence the forced exploration of line 10 overall has a small impact on the regret, while it allows to stabilize the algorithm.\nFor θ ∈ ΘSD, let γ(θ) be the error probabilities for the various sensors. The following result follows from Theorem 6 of [18]:\nTheorem 4. Let > 0, α > 2 arbitrary and choose any non-decreasing β(n) that satisfies 0 ≤ β(n) ≤ n/2 and β(m + n) ≤ β(m) + β(n) for m,n ∈ N. Then, for any θ ∈ ΘSD, letting γ = γ(θ)\nthe expected regret of Algorithm 1 after T steps satisfies\nRT (θ) ≤ ( 2K + 2 + 4K\nα− 2\n) + 4K T∑ s=0 exp (−8β(s) 2 2K ) + 2β ( 4α log T\n∑ i∈[K] u∗i (γ, ) +K ) + 4α log T ∑ i∈[K] u∗i (γ, )∆i(θ) ,\nwhere u∗i (γ, ) = sup{u∗i (γ′) : ‖γ′ − γ‖∞ ≤ }.\nFurther specifying β(n) and using the continuity of u∗(·) at θ, it immediately follows that Algorithm 1 achieves asymptotically optimal performance:\nCorollary 5. Suppose the conditions of Theorem 4 hold. Assume, furthermore, that β(n) satisfies β(n) = o(n) and ∑∞ s=0 exp ( −β(s) 2 2Kσ2 ) <∞ for any > 0, then for any θ such that u∗(θ) is unique, lim supT→∞RT (θ, c)/ log T ≤ 4α infu∈Cθ〈u,∆(θ)〉 .\nNote that any β(n) = anb with a ∈ (0, 12 ], b ∈ (0, 1) satisfies the requirements in Theorem 4 and Corollary 5.\nThe algorithm in 1 only estimates the disagreements P{Y 1 6= Y j} for all j ∈ [K] which suffices to identify the optimal arm when SD property (see Sec 5) holds. Clearly, one can estimate pairwise disagreements probabilities P{Y i 6= Y j} for i 6= j and use them to order the arms. We next develop a heuristic algorithm that uses this information and works for USS under WD."
    }, {
      "heading" : "6.1 Algorithm for Weak Dominance",
      "text" : "The reduction scheme described above is optimal under SD property and can fail under the more relaxed WD property. This is because, under SD, marginal error is equal to marginal disagreement (see Prop. 2); it follows for any two sensors i < j, γi − γj = (γi − γ1)− (γj − γ1) = P ( Y i 6= Y 1 ) −\nP ( Y i 6= Y 1 ) ; and so we can compute marginal error between any two sensors by only keeping track of disagreements relative to sensor 1. Under WD, marginal error is a lower bound and keeping track only of disagreements relative to sensor 1 no longer suffices because P ( Y i 6= Y 1 ) −P ( Y i 6= Y 1 ) is no longer\na good estimate for P ( Y i 6= Y j ) . Our key insight is based on the fact that, under WD, for a given set of the disagreement probabilities, for all i 6= j, the set {i ∈ [K−1] : Cj−Ci ≥ P{Y i 6= Y j} for all j > i} includes the optimal arm. We use this idea in Algorithm 2 to identify the optimal arm when an instance of USS satisfies WD. We will experimentally validate its performance on real datasets in the next section.\nAlgorithm 2 Algorithm for USS with WD property 1: Play action K and observe Y 1, . . . , Y K\n2: Set γ̂1ij ← I{Y i 6=Y j} for all i, j ∈ [K] and i < j. 3: ni(1)← I{i=K} ∀i ∈ [K]. 4: for t = 2, 3, ... do 5: U tij = γ̂ t−1 ij + √ 1.5 log(t) nj(t−1) ∀ i, j ∈ [K] and i < j 6: St = {i ∈ [K − 1] : Cj −Ci ≥ U tij ∀ j > i}\n7: Set It = arg minSt ∪ {K} 8: Play It and observe Y 1, . . . , Y It . 9: for i ∈ [It] do\n10: ni(t)← ni(t− 1) + 1 11: γ̂tij ← ( 1− 1nj(t) ) γ̂t−1ij +\n1 nj(t) I{Y j 6=Y i}∀ i < j ≤ It 12: end for 13: end for\nThe algorithm works as follows. At each round, t, based on history, we keep track of estimates, γ̂tij , of disagreements between sensor i and sensor j. In the first round, the algorithm plays arm K and initializes its values. In each subsequent round, the algorithm computes the upper confidence value of γ̂tij denoted as U t ij (5) for all pairs (i, j) and orders the arms: i is considered better than arm j if Cj − Ci ≥ U tij . Specifically, the algorithm plays an arm i that satisfies Cj − Ci ≥ U tij for all j > i 6. If no such arm is found, then it plays arm K. nj(t), j ∈ [K] counts the total number of observation of pairs (Y i, Y j), for all i < j, till round t and uses it to update the estimates γ̂tij (11). Regret guarantees analogous to Thm 4 under SD for this new scheme can also be derived but requires additional conditions. Nevertheless, no such guarantee can be provided under WD because it is not uniformly learnable (Thm 3)."
    }, {
      "heading" : "6.2 Extensions",
      "text" : "We describe briefly a few extensions here, which we will elaborate on in a longer version of the paper. Tree Structures: We can deal with trees, where now the sensors are organized as a tree with root node corresponding to sensor 1 and we can select any path starting from the root node. To see this, note that the marginal error condition of Eqn. 1 still characterizes optimal sensor selection. Under a modified variant of SD, namely, Eq. 2 is in terms of the children of an optimal sensor, it follows that it is again sufficient to keep track of disagreements. In an analogous fashion Eq. ?? can be suitably modified as well. This leads to sublinear regret algorithm for tree-structures. Context-Dependent Sensor Selection: Each example has a context x ∈ Rd and a test maps (partial) context to the output space. Analogous to the context-independent case we impose context dependent notions for SD and WD, namely, Eq. 2 and Eq. ?? hold conditioned on each x ∈ X . To handle these cases we let γi(x) , Pr(Y i 6= Y | x) and γij(x) , Pr(Y i 6= Y j | x) denote the corresponding\nFig. 3 depicts regret of USS (Alg. 1). Under SD it is always sublinear regardless of costs/probability. Fig. 4 demonstrates phase-transition effect for USS (Alg. 2). Alg. 1 is not plotted here because it fails in this case. As ρ→ 1 (from the right) regret-per-round drastically increases thus validating our theory that WD is a maximal learnable set.\ncontextual error and disagreement probabilities. Our sublinear regret guarantees can be generalized for a parameterized GLM model for disagreement, namely, when the log-odds ratio log γij(x)1−γij(x) can be written as θ′ijx for some unknown θij ∈ Rd."
    }, {
      "heading" : "7 Experiments",
      "text" : "In this section we evaluate performance of Algorithms 1 and 2 on synthetic and real datasets (PIMA-Diabetes) and Heart Disease (Cleveland). Both of these datasets have accompanying costs for individual features.\nSynthetic: We generate data as follows. The input, Yt, is generated IID Ber(0.7). Outputs for channels 1, 2, 3 have an overall error statistic, γ1 = 0.4, γ2 = 0.1, γ3 = 0.05 respectively. To ensure SD we enforce Defn. 2 during the generation process. To relax SD requirement we introduce errors upto 10% during data generation for sensor outputs 2 and 3 when sensor 1 predicts correctly.\nReal Datasets: We split the features into three “sensors” based on their costs. For PIMADiabetes dataset (size=768) the first sensor is associated with patient history/profile with cost ($6), the 2nd sensor in addition utilizes insulin test (cost $ 22) and the 3rd sensor uses all attributes (cost $46). For the Heart dataset (size=297) we use the first 7 attributes that includes cholestrol readings, blood-sugar, and rest-ECG (Cost $27), the 2nd sensor utilizes in addition thalach, exang, oldpeak attributes that cost $300 and the 3rd sensor utilizes more extensive tests at a total cost of $601.\nWe train three linear SVM classifiers with 5-fold cross-validation and have verified that our results match known state-of-art. Note that Table 4 shows that the resulting classifiers/tests on these datasets approximately satisfies SD condition and thus our setup should apply to these datasets. The size of these datasets is relatively small and limits our ability to experiment. To run the online algorithm we therefore generate an instance randomly from the dataset (with replacement) in each round. We repeat the experiments 20 times and averages are shown with 95% confidence bounds.\nTesting Learnability: We experiment with different USS algorithms on the synthetic dataset. Our purpose is twofold: (a) verify sublinear regret reduction scheme (Alg 1) under SD (b) verify that\n0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 time T\n0\n20\n40\n60\n80\n100\n120\n140\n160\ncu m\nul at\niv e\nre gr\net\nDiabetes\nunsupervised (high cost) supervised (high cost)\nFigure 5: Regret Curves on PIMA Diabetes 0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 time T\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\ncu m\nul at\niv e\nre gr\net\nHeart\nunsupervised (low cost) supervised (low cost)\nFigure 6: Regret Curves on Heart Disease\nFig. 5 and Fig. 6 depict performance for real-datasets and presents comparisons against supervised (bandit with ground-truth feedback) scenario. Typically (but not in the worst-case (see Thm 5)), under WD, the unsupervised learning rate is within a constant factor of supervised setting.\nWD condition is a maximal learnable set. Fig. 3 depicts the results of Alg. 1 when SD condition is satisfied and shows that we obtain sublinear regret regardless of costs/probabilities. To test WD requirement we parameterize the problem by varying costs. Without loss of generality we fix the cost of sensor 1 to be zero and the total cost of the entire system to be Ctot. We then vary cost of sensors 2 and 3. We test the hypothesis that WD is a maximal learnable set. We enforce Sensor 2 as the optimal sensor and vary the costs so that we continuously pass from the situation where WD holds (ρ ≥ 1) to the case where WD does not hold (ρ < 1). Fig. 4 depicts regret-per-round for Alg. 2 and as we can verify there is indeed a transition at ρ = 1 . Unsupervised vs. Supervised Learning: The real datasets provide an opportunity to understand how different types of information can impact performance. We compare USS algorithm (Alg. 2) against a corresponding bandit algorithm where the learner receives feedback. In particular, for each action in each round, in the bandit setting, the learner knows whether or not the corresponding sensor output is correct. We implement the supervised bandit setting by replacing Step 5 in Alg. 2 with estimated marginal error rates.\nWe scale costs by means of a tuning parameter (since the costs of features are all greater than one) and consider minimizing a combined objective (λ Cost + Error) as stated in Sec. 2. High (low)-values for λ correspond to low (high)-budget constraint. If we set a fixed budget of ($ 50), this corresponds to high-budget (small λ) and low budget (large λ) for PIMA Diabetes (3rd test optimal) and Heart Disease (1st test optimal) respectively. Figs 5 and 6 depicts performance for typical scenarios. We notice that for both high as well as low cost scenarios, while supervised does have lower regret, the USS cummulative regret is also sublinear and within a constant fraction of the supervised case. This is qualititively interesting because these plots demonstrate that (although under WD we do not have uniform learnability), in typical cases, we learn as well as the supervised setting."
    }, {
      "heading" : "8 Conclusions",
      "text" : "The paper describes a novel approach for unsupervised sensor selection. These types of problems arise in a number of healthcare and security applications. In these applications we have a collection of tests that are typically organized in a hierarchical architecture wherein test results are acquired in a sequential fashion. The goal is to identify the best balance between accuracy & test-costs. The main challenge in these applications is that ground-truth annotated examples are unavailable and it is often difficult to acquire them in-situ. We proposed a novel approach for sensor selection based on a novel notion of weak and strong dominance properties. We showed that weak dominance condition is maximal in that violation of this condition leads to loss of learnability. Our experiments demonstrate that weak dominance does hold in practice for real datasets and typically for these datasets, unsupervised selection can be as effective as a supervised (bandit) setting. Acknowledgements: The authors thank Dr. Joe Wang for helpful discussions and in particular suggesting the concept of strong dominance."
    }, {
      "heading" : "9 Appendix",
      "text" : ""
    }, {
      "heading" : "Stochastic Partial Monitoring Problem 3",
      "text" : "In an SPM a learner interacts with a stochastic environment in a sequential manner. In round t = 1, 2, . . . the learner chooses an action At from an action set A, and receives a feedback Yt ∈ Y from a distribution p which depends on the action chosen and also on the environment instance identified with a “parameter” θ ∈ Θ: Yt ∼ p(·;At, θ). The learner also incurs a reward Rt, which is a function of the action chosen and the unknown parameter θ: Rt = r(At, θ). The reward may or may not be part of the feedback for round t. The learner’s goal is to maximize its total expected reward. The family of distributions (p(·; a, θ))a,θ and the family of rewards (r(a, θ))a,θ and the set of possible parameters Θ are known to the learner, who uses this knowledge to judiciously choose its next action to reduce its uncertainty about θ so that it is able to eventually converge on choosing only an optimal action a∗(θ), achieving the best possible reward per round, r∗(θ) = maxa∈A r(a, θ). Bandit problems are a special case of SPMs where Y is the set of real numbers, r(a, θ) is the mean of distribution p(·; a, θ)."
    }, {
      "heading" : "Proof of Proposition 1",
      "text" : "Proof. ⇒: Let A be an algorithm that achieves sublinear regret and pick an instance θ ∈ Θ. Let P = PS ⊗ PY |S . The regret Rn(A, θ) of A on instance θ can be written in the form\nRn(A, θ) = ∑ k∈[K] EPS [Nk(n)] ∆k(θ) ,\nwhere Nk(n) is the number of times action k is chosen by A during the n rounds while A interacts with θ, ∆k(θ) = c(k, θ)− c∗(θ) is the immediate regret and EPS [·] denotes the expectation under the distribution induced by PS . In particular, Nk(n) hides dependence on the iid sequence Y1, . . . , Yn ∼ PS that we are taking the expectation over here. Since the regret is sublinear, for any k suboptimal action, EPS [Nk(n)] = o(n). Define a(PS) = min{k ∈ [K] ; EPS [Nk(n)] = Ω(n) }. Then, a is well-defined as the distribution of Nk(n) for any k depends only on PS (and c). Furthermore, a(PS) selects an optimal action. ⇐: Let a be the map in the statement and let f : N+ → N+ be such that 1 ≤ f(n) ≤ n for any n ∈ N, f(n)/ log(n)→∞ as n→∞ and f(n)/n→ 0 as n→∞ (say, f(n) = d √ ne). Consider the algorithm that chooses It = K for the first f(n) steps, after which it estimates P̂S by frequency counting and then uses It = a(P̂S) in the remaining n − f(n) trials. Pick any θ ∈ Θ so that θ = PS ⊗ PY |S . Note that by Hoeffding’s inequality, supy∈{0,1}K |P̂S(y)− PS(y)| ≤ √ K log(4n) 2f(n) holds\nwith probability 1− 1/n. Let n0 be the first index such that for any n ≥ n0, √ K log(4n) 2f(n) ≤ ∆ ∗(θ) . = mink:∆k(θ)>0 ∆k(θ). Such an index n0 exists by our assumptions that f grows faster than n 7→ log(n). For n ≥ n0, the expected regret of A is at most n× 1/n+ f(n)(1− 1/n) ≤ 1 + f(n) = o(n)."
    }, {
      "heading" : "Proof of Corollary 2",
      "text" : "Proof. By Proposition 5, awd is well-defined over ΘWD, while by Proposition 6, awd is sound over ΘWD."
    }, {
      "heading" : "Proof of Proposition 2",
      "text" : "Proof. We construct a map as required by Proposition 1. Take an instance θ ∈ ΘWD and let θ = PS ⊗ PY |S be its decomposition as defined above. Let γi = P ( Y i 6= Y ) , (Y, Y 1, . . . , Y K) ∼ θ. For identifying an optimal action in θ, it clearly suffices to know the sign of γi + Ci − (γj + Cj) for all pairs i, j ∈ [K]2. Since Ci − Cj is known, it remains to study γi − γj . Without loss of generality (WLOG) let i < j. Then,\n0 ≤ γi − γj = P ( Y i 6= Y ) − P ( Y j 6= Y ) =\n(((( (((\n(((P ( Y i 6= Y, Y i = Y j ) + P ( Y i 6= Y, Y i 6= Y j ) −\n− { ((( (((( (((P ( Y j 6= Y, Y i = Y j ) + P ( Y j 6= Y, Y i 6= Y j )} = P ( Y i 6= Y, Y i 6= Y j ) + P ( Y i = Y, Y i 6= Y j\n) − { P ( Y j 6= Y, Y i 6= Y j ) + P ( Y i = Y, Y i 6= Y j\n)} (a) = P ( Y j 6= Y i ) − 2P ( Y j 6= Y, Y i = Y ) ,\nwhere in (a) we used that P ( Y j 6= Y, Y i 6= Y j ) = P ( Y j 6= Y, Y i = Y ) and also P ( Y i = Y, Y i 6= Y j ) =\nP ( Y j 6= Y, Y i = Y ) which hold because Y, Y i, Y j only take on two possible values."
    }, {
      "heading" : "Proof of Proposition 3",
      "text" : "Proof. ⇒: From the premise, it follows that Cj−Ci ≥ γi−γj . Thus, by (3), Cj−Ci ≥ P ( Y i 6= Y j ) .\n⇐: We have Cj − Ci ≥ P ( Y i 6= Y j ) ≥ γi − γj , where the last inequality is by Corollary 1."
    }, {
      "heading" : "Proof of proposition 4",
      "text" : "Proof. ⇒: The condition γi + Ci ≤ γj + Cj implies that γj − γi ≥ Ci − Cj . By Corollary 1 we get P ( Y i 6= Y j ) ≥ Ci − Cj . ⇐: Let Ci − Cj ≤ P ( Y i 6= Y j ) . Then, by (4), Ci − Cj ≤ γj − γi."
    }, {
      "heading" : "Proof of Theorem ??",
      "text" : "Proof. Let a as in the theorem statement. By Proposition 8, awd is the unique sound action-selector map over ΘWD. Thus, for any θ = PS ⊗ PY |S ∈ ΘWD, awd(PS) = a(PS). Hence, the result follows from Corollary 3."
    }, {
      "heading" : "Proof of Proposition 5",
      "text" : "Proof. Let θ ∈ ΘWD, i = a∗(θ). Obviously, (7b) holds by the definition of ΘWD. Thus, the only question is whether (7a) also holds. We prove this by contradiction: Thus, assume that (7a) does not hold, i.e., for some j < i, Ci − Cj ≥ P ( Y i 6= Y j ) . Then, by Corollary 1, P ( Y i 6= Y j ) ≥ γj − γi, hence γj + Cj ≤ γi + Ci, which contradicts the definition of i, thus finishing the proof."
    }, {
      "heading" : "Proof of Proposition 6",
      "text" : "Proof. Take any θ ∈ ΘWD with θ = PS ⊗ PY |S , i = awd(PS), j = a∗(θ). If i = j, there is nothing to be proven. Hence, first assume that j > i. Then, by (7b), Cj − Ci ≥ P ( Y i 6= Y j ) . By Corollary 1,\nP ( Y i 6= Y j ) ≥ γi − γj . Combining these two inequalities we get that γi + Ci ≤ γj + Cj , which\ncontradicts with the definition of j. Now, assume that j < i. Then, by (5), Ci − Cj ≥ P ( Y i 6= Y j ) .\nHowever, by (7a), Ci−Cj < P ( Y i 6= Y j ) , thus j < i cannot hold either and we must have i = j."
    }, {
      "heading" : "Proof of Proposition 8",
      "text" : "Proof. Pick any θ = PS ⊗ PY |S ∈ ΘWD. If A∗(θ) is a singleton, then clearly a(PS) = awd(PS) since both are sound over ΘWD. Hence, assume that A∗(θ) is not a singleton. Let i = a∗(θ) = minA∗(θ) and let j = minA∗(θ) \\ {i}. We argue that PY |S can be changed so that on the new instance i is still an optimal action, while j is not an optimal action, while the new instance θ′ = PS ⊗ P ′Y |S is in ΘWD.\nThe modification is as follows: Consider any y−j .= (y1, . . . , yj−1, yj+1, . . . , yK) ∈ {0, 1}K−1. For y, yj ∈ {0, 1}, define q(y|yj) = PY |S(y|y1, . . . , yj−1, yj , yj+1, . . . , yK) and similarly let q′(y|yj) = P ′Y |S(y|y\n1, . . . , yj−1, yj , yj+1, . . . , yK) Then, we let q′(0|0) = 0 and q′(0|1) = q(0|0) + q(0|1), while we let q′(1|1) = 0 and q′(1|0) = q(1|1) + q(1|0). This makes P ′Y |S well-defined (P ′ Y |S(·|y\n1, . . . , yK) is a distribution for any y1, . . . , yK). Further, we claim that the transformation has the property that it\nleaves γp unchanged for p 6= j, while γj is guaranteed to decrease. To see why γp is left unchanged for p 6= j note that γp = ∑ yp PY p(y\np)PY |Y p(1− yp|yp). Clearly, PY p is left unchanged. Introducing y−k to denote a tuple where the kth component is left out, PY |Y p(1− yp|yp) = ∑ y−p,−j PY |Y 1,...,Y K (1− yp|y1, . . . , yj−1, 0, yj+1, . . . , yK) + PY |Y 1,...,Y K (1− yp|y1, . . . , yj−1, 1, yj+1, . . . , yK) and by definition,\nPY |Y 1,...,Y K (1− yp|y1, . . . , yj−1, 0, yj+1, . . . , yK) + PY |Y 1,...,Y K (1− yp|y1, . . . , yj−1, 1, yj+1, . . . , yK)\n= P ′Y |Y 1,...,Y K (1− y p|y1, . . . , yj−1, 0, yj+1, . . . , yK)\n+ P ′Y |Y 1,...,Y K (1− y p|y1, . . . , yj−1, 1, yj+1, . . . , yK) ,\nwhere the equality holds because “q′(y|0) + q′(y|1) = q(y|0) + q(y|1)”. Thus, PY |Y p(1 − yp|yp) = P ′Y |Y p(1− y\np|yp) as claimed. That γj is non-increasing follows with an analogue calculation. In fact, this shows that γj is strictly decreased if for any (y1, . . . , yj−1, yj+1, . . . , yK) ∈ {0, 1}K−1, either q(0|0) or q(1|1) was positive. If these are never positive, this means that γj = 1. But then j cannot be optimal since cj > 0. Since j was optimal, γj is guaranteed to decrease.\nFinally, it is clear that the new instance is still in ΘWD since a∗(θ) is left unchanged."
    }, {
      "heading" : "Proof of Theorem 1",
      "text" : "Proof of Theorem 1. We construct a map as required by Proposition 1. Take an instance θ ∈ ΘSD and let θ = PS ⊗ PY |S be its decomposition as before. Let γi = P ( Y i 6= Y ) , (Y, Y 1, . . . , Y K) ∼ θ, Ci = c1 + · · · + ci. For identifying an optimal action in θ, it clearly suffices to know the sign of γi +Ci− (γj +Cj) = γi− γj + (Ci−Cj) for all pairs i, j ∈ [K]2. Without loss of generality (WLOG) let i < j. By Proposition 2, γi − γj = P ( Y i 6= Y j ) − 2P ( Y j 6= Y, Y i = Y ) . Now, since θ satisfies\nthe strong dominance condition, P ( Y j 6= Y, Y i = Y ) = 0. Thus, γi − γj = P ( Y i 6= Y j ) which is a function of PS only. Since (Ci)i are known, a map as required by Proposition 1 exists."
    }, {
      "heading" : "Proof of Theorem 3",
      "text" : "Proof. We first consider the case when K = 2 and arbitrarily choose C2−C1 = 1/4. We will consider two instances, θ, θ′ ∈ ΘWD such that for instance θ, action k = 1 is optimal with an action gap of c(2, θ)− c(1, θ) = 1/4 between the cost of the second and the first action, while for instance θ′, k = 2 is the optimal action and the action gap is c(1, θ)− c(2, θ) = where 0 < < 3/8. Further, the entries in PS(θ) and PS(θ′) differ by at most . From this, a standard reasoning gives that no algorithm can achieve sublinear minimax regret over ΘWD because any algorithm is only able to identify PS .\nThe constructions of θ and θ′ are shown in Table 2: The entry in a cell gives the probability of the event as specified by the column and row labels. For example, in instance θ, 3/8 is the probability of Y = Y 1 = Y 2, while the probability of Y 1 = Y 6= Y 2 is 1/8. Note that the cells with zero actually correspond to impossible events, i.e., these cannot be assigned a positive probability. The rationale of a redundant (and hence sparse) table is so that probabilities of certain events of interest, such as Y 1 6= Y 2 are easier to determine based on the table. The reader should also verify that the positive probabilities correspond to events that are possible.\nWe need to verify the following: (i) θ, θ′ ∈ ΘWD; (ii) the optimality of the respective actions in the respective instances; (iii) the claim concerning the size of the action gaps; (iv) that PS(θ) and PS(θ′) are close. Details of the calculations to support (i)–(iii) can be found in Table 3. The row marked by (∗) supports that the instances are proper USS instances. In the row marked by (∗∗), there is no requirement for θ′ because in θ′ action two is optimal, and hence there is no action with larger index than the optimal action, hence θ′ ∈ ΘWD automatically holds. To verify the closeness of PS(θ) and PS(θ′) we actually would need to first specify PS (the tables do not fully specify these). However, it is clear the only restriction we put on PS is the value of P ( Y 1 6= Y 2\n) (and that of P ( Y 1 = Y 2 ) ) and these values are within an distance of each other. Hence, PS can also be specified to satisfy this. In particular, one possibility for P and PS are given in Table 4."
    }, {
      "heading" : "Proof of Proposition 9",
      "text" : "Proof. First note that the mapping of the policies is such that number of pull of arm k after n rounds by policy π on problem instance f(θ) is the same as the number of pulls of arm k by π′ on\nproblem instance θ. Recall that mean value of arm k in problem instance θ isγk + Ck and that of corresponding arm in problem instance f(θ) is γ1 − (γi + Ci). We have\nRn(π ′, θ) = ∑ k∈[K] EPS [Nk(n)] (γk + Ck − γk∗ − Ck∗) ,\nand\nRn(π, f(θ)) = ∑ k∈[K] EPS [Nk(n)] ( max i∈[K] {γ1 − γi − Ci} − (γ1 − γk − Ck) )\n= ∑ k∈[K] EPS [Nk(n)] ( γk + Ck − min i∈[K] {γi + Ci} ) = Rn(π ′, θ)."
    } ],
    "references" : [ {
      "title" : "Multi-stage classifier design",
      "author" : [ "K. Trapeznikov", "V. Saligrama", "D.A. Castanon" ],
      "venue" : "Machine Learning, vol. 39, pp. 1–24, 2014.",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Partial monitoring – classification, regret bounds, and algorithms",
      "author" : [ "G. Bartók", "D. Foster", "D. Pál", "A. Rakhlin", "C. Szepesvári" ],
      "venue" : "Mathematics of Operations Research, vol. 39, pp. 967–997, 2014.",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "On the likelihood that one unknown probability exceeds another in view of the evidence of two samples",
      "author" : [ "W. Thompson" ],
      "venue" : "Biometrika, vol. 25, pp. 285–294, 1933.",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 1933
    }, {
      "title" : "Supervised sequential classification under budget constraints",
      "author" : [ "K. Trapeznikov", "V. Saligrama" ],
      "venue" : "AISTATS, 2013, pp. 235–242.",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Directed acyclic graph for resource constrained prediction",
      "author" : [ "J. Wang", "K. Trapeznikov", "V. Saligrama" ],
      "venue" : "Proceeding of Conference on Neural Information Processing Systems, NIPS, 2015.",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Feature-budgeted random forest",
      "author" : [ "F. Nan", "J. Wang", "V. Saligrama" ],
      "venue" : "Proceedings of the International Conference on Machine Learning, 2015.",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Learning when to stop thinking and do something!",
      "author" : [ "B. Póczos", "Y. Abbasi-Yadkori", "C. Szepesvári", "R. Greiner", "N. Sturtevant" ],
      "venue" : "in ICML,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2009
    }, {
      "title" : "Learning cost-sensitive active classifiers",
      "author" : [ "R. Greiner", "A. Grove", "D. Roth" ],
      "venue" : "Artificial Intelligence, vol. 139, pp. 137–174, 2002.",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "Learning and classifying under hard budgets",
      "author" : [ "A. Kapoor", "R. Greiner" ],
      "venue" : "ECML, 2005.",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "Adore: Adaptive object recognition",
      "author" : [ "B. Draper", "J. Bins", "K. Baek" ],
      "venue" : "International Conference on Vision Systems, 1999, pp. 522–537.",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 1999
    }, {
      "title" : "Efficient interpretation policies",
      "author" : [ "R. Isukapalli", "R. Greiner" ],
      "venue" : "International Joint Conference on Artificial Intelligence, 2001, pp. 1381–1387. 16",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "Prediction with limited advice and multiarmed bandits with paid observations",
      "author" : [ "Y. Seldin", "P. Bartlett", "K. Crammer", "Y. Abbasi-Yadkori" ],
      "venue" : "Proceeding of International Conference on Machine Learning, ICML, 2014, pp. 208–287.",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Online learning with costly features and labels",
      "author" : [ "N. Zolghadr", "G. Bartók", "R. Greiner", "A. György", "C. Szepesvári" ],
      "venue" : "NIPS, 2013, pp. 1241–1249.",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Asymptotically efficient adaptive allocation schemes for controlled i.i.d. processes: Finite parameter space",
      "author" : [ "R. Agrawal", "D. Teneketzis", "V. Anantharam" ],
      "venue" : "IEEE Transaction on Automatic Control, vol. 34, pp. 258–267, 1989.",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 1989
    }, {
      "title" : "From bandits to experts: On the value of side-observations",
      "author" : [ "S. Mannor", "O. Shamir" ],
      "venue" : "NIPS, 2011.",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Online learning with feedback graphs:beyond bandits",
      "author" : [ "N. Alon", "N. Cesa-Biancbi", "O. Dekel", "T. Koren" ],
      "venue" : "Proceeding of Conference on Learning Theory, 2015, pp. 23–35.",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "From bandits to experts: A tale of domination and independence",
      "author" : [ "N. Alon", "N. Cesa-Biancbi", "C. Gentile", "Y. Mansour" ],
      "venue" : "Proceeding of Conference on Neural Information Processing Systems, NIPS, 2013, pp. 1610–1618.",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Online learning with gaussian payoffs and side observations",
      "author" : [ "Y. Wu", "A. György", "C. Szepesvári" ],
      "venue" : "NIPS, September 2015, pp. 1360–1368.",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2015
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "A number of different imaging and non-imaging tests are sequentially processed (see [1]).",
      "startOffset" : 84,
      "endOffset" : 87
    }, {
      "referenceID" : 1,
      "context" : "3 we pose our problem as a version of stochastic partial monitoring problem [2] with atypical reward structure, where tests are viewed as actions and sequential observations serves as side information.",
      "startOffset" : 76,
      "endOffset" : 79
    }, {
      "referenceID" : 2,
      "context" : "Bandit problems [3] are a special case of partial monitoring, where the key missing information is the expected cost for each action, and the feedback is the noisy version of the expected cost of the action chosen.",
      "startOffset" : 16,
      "endOffset" : 19
    }, {
      "referenceID" : 3,
      "context" : "In contrast to our USS setup there exists a wide body of literature dealing with sensor acquisition (see[4, 5, 6]).",
      "startOffset" : 104,
      "endOffset" : 113
    }, {
      "referenceID" : 4,
      "context" : "In contrast to our USS setup there exists a wide body of literature dealing with sensor acquisition (see[4, 5, 6]).",
      "startOffset" : 104,
      "endOffset" : 113
    }, {
      "referenceID" : 5,
      "context" : "In contrast to our USS setup there exists a wide body of literature dealing with sensor acquisition (see[4, 5, 6]).",
      "startOffset" : 104,
      "endOffset" : 113
    }, {
      "referenceID" : 11,
      "context" : "There are also several methods that work in an online bandit setting and train prediction models with feature costs [12] but again they require ground-truth labels as reward-feedback.",
      "startOffset" : 116,
      "endOffset" : 120
    }, {
      "referenceID" : 11,
      "context" : "A somewhat more general version of [12] is developed in [13] where in addition the learner can choose to acquire ground-truth labels for a cost.",
      "startOffset" : 35,
      "endOffset" : 39
    }, {
      "referenceID" : 12,
      "context" : "A somewhat more general version of [12] is developed in [13] where in addition the learner can choose to acquire ground-truth labels for a cost.",
      "startOffset" : 56,
      "endOffset" : 60
    }, {
      "referenceID" : 6,
      "context" : "Our paper bears some similarity with the concept of active classification, which deals with learning stopping policies[7, 8] among a given sequence of tests.",
      "startOffset" : 118,
      "endOffset" : 124
    }, {
      "referenceID" : 7,
      "context" : "Our paper bears some similarity with the concept of active classification, which deals with learning stopping policies[7, 8] among a given sequence of tests.",
      "startOffset" : 118,
      "endOffset" : 124
    }, {
      "referenceID" : 1,
      "context" : "Our paper is related to the framework of finite partial monitoring problems[2], which deals with how to infer unknown key information and where tests/actions reveal different types of information about the unknown information.",
      "startOffset" : 75,
      "endOffset" : 78
    }, {
      "referenceID" : 13,
      "context" : "In this context [14] consider special cases where payoff/rewards for a subset of actions are observed.",
      "startOffset" : 16,
      "endOffset" : 20
    }, {
      "referenceID" : 14,
      "context" : "This is further studied as a side-observation problem in [15] and as graph-structured feedback [16, 17, 18]).",
      "startOffset" : 57,
      "endOffset" : 61
    }, {
      "referenceID" : 15,
      "context" : "This is further studied as a side-observation problem in [15] and as graph-structured feedback [16, 17, 18]).",
      "startOffset" : 95,
      "endOffset" : 107
    }, {
      "referenceID" : 16,
      "context" : "This is further studied as a side-observation problem in [15] and as graph-structured feedback [16, 17, 18]).",
      "startOffset" : 95,
      "endOffset" : 107
    }, {
      "referenceID" : 17,
      "context" : "This is further studied as a side-observation problem in [15] and as graph-structured feedback [16, 17, 18]).",
      "startOffset" : 95,
      "endOffset" : 107
    }, {
      "referenceID" : 14,
      "context" : "A finite armed bandit with side-observations [15] is also a special case of SPMs, where the learner upon choosing an action a ∈ A receives noisy reward observations, namely, Yt = (Yt,a)a∈N(At), Yt,a ∼ pr(·; a, θ), E [Yt,a] = r(a, θ), from a neighbor-set N (a) ⊂ A, which is a priori known to the learner.",
      "startOffset" : 45,
      "endOffset" : 49
    }, {
      "referenceID" : 17,
      "context" : "In this paper we make use of Algorithm 1 of [18] that was proposed for stochastic bandits with Gaussian side observations.",
      "startOffset" : 44,
      "endOffset" : 48
    }, {
      "referenceID" : 17,
      "context" : "For the convenience of the reader, we give the algorithm resulting from applying the reduction to Algorithm 1 of [18] in an explicit form.",
      "startOffset" : 113,
      "endOffset" : 117
    }, {
      "referenceID" : 17,
      "context" : "The following result follows from Theorem 6 of [18]:",
      "startOffset" : 47,
      "endOffset" : 51
    } ],
    "year" : 2016,
    "abstractText" : "In many security and healthcare systems a sequence of features/sensors/tests are used for detection and diagnosis. Each test outputs a prediction of the latent state, and carries with it inherent costs. Our objective is to learn strategies for selecting tests to optimize accuracy & costs. Unfortunately it is often impossible to acquire-in-situ ground truth annotations and we are left with the problem of unsupervised sensor selection (USS). We pose USS as a version of stochastic partial monitoring problem with an unusual reward structure (even noisy annotations are unavailable). Unsurprisingly no learner can achieve sublinear regret without further assumptions. To this end we propose the notion of weak-dominance. This is a condition on the joint probability distribution of test outputs and latent state and says that whenever a test is accurate on an example, a later test in the sequence is likely to be accurate as well.We empirically verify that weak dominance holds on real datasets and prove that it is a maximal condition for achieving sublinear regret. We reduce USS to a special case of multi-armed bandit problem with side information and develop polynomial time algorithms that achieve sublinear regret.",
    "creator" : "LaTeX with hyperref package"
  }
}