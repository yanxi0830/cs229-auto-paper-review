{
  "name" : "1609.04747.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "An overview of gradient descent optimization algorithms∗",
    "authors" : [ "Sebastian Ruder" ],
    "emails" : [ "ruder.sebastian@gmail.com" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Gradient descent is one of the most popular algorithms to perform optimization and by far the most common way to optimize neural networks. At the same time, every state-of-the-art Deep Learning library contains implementations of various algorithms to optimize gradient descent (e.g. lasagne’s2, caffe’s3, and keras’4 documentation). These algorithms, however, are often used as black-box optimizers, as practical explanations of their strengths and weaknesses are hard to come by.\nThis article aims at providing the reader with intuitions with regard to the behaviour of different algorithms for optimizing gradient descent that will help her put them to use. In Section 2, we are first going to look at the different variants of gradient descent. We will then briefly summarize challenges during training in Section 3. Subsequently, in Section 4, we will introduce the most common optimization algorithms by showing their motivation to resolve these challenges and how this leads to the derivation of their update rules. Afterwards, in Section 5, we will take a short look at algorithms and architectures to optimize gradient descent in a parallel and distributed setting. Finally, we will consider additional strategies that are helpful for optimizing gradient descent in Section 6.\nGradient descent is a way to minimize an objective function J(θ) parameterized by a model’s parameters θ ∈ Rd by updating the parameters in the opposite direction of the gradient of the objective function ∇θJ(θ) w.r.t. to the parameters. The learning rate η determines the size of the steps we take to reach a (local) minimum. In other words, we follow the direction of the slope of the surface created by the objective function downhill until we reach a valley.5\n∗This paper originally appeared as a blog post at http://sebastianruder.com/ optimizing-gradient-descent/index.html on 19 January 2016.\n2http://lasagne.readthedocs.org/en/latest/modules/updates.html 3http://caffe.berkeleyvision.org/tutorial/solver.html 4http://keras.io/optimizers/ 5If you are unfamiliar with gradient descent, you can find a good introduction on optimizing neural networks\nat http://cs231n.github.io/optimization-1/.\nar X\niv :1\n60 9.\n04 74\n7v 1\n[ cs\n.L G\n] 1\n5 Se\np 20"
    }, {
      "heading" : "2 Gradient descent variants",
      "text" : "There are three variants of gradient descent, which differ in how much data we use to compute the gradient of the objective function. Depending on the amount of data, we make a trade-off between the accuracy of the parameter update and the time it takes to perform an update."
    }, {
      "heading" : "2.1 Batch gradient descent",
      "text" : "Vanilla gradient descent, aka batch gradient descent, computes the gradient of the cost function w.r.t. to the parameters θ for the entire training dataset:\nθ = θ − η · ∇θJ(θ) (1)\nAs we need to calculate the gradients for the whole dataset to perform just one update, batch gradient descent can be very slow and is intractable for datasets that do not fit in memory. Batch gradient descent also does not allow us to update our model online, i.e. with new examples on-the-fly.\nIn code, batch gradient descent looks something like this:\nfor i in range(nb_epochs ): params_grad = evaluate_gradient(loss_function , data , params) params = params - learning_rate * params_grad\nFor a pre-defined number of epochs, we first compute the gradient vector params_grad of the loss function for the whole dataset w.r.t. our parameter vector params. Note that state-of-the-art deep learning libraries provide automatic differentiation that efficiently computes the gradient w.r.t. some parameters. If you derive the gradients yourself, then gradient checking is a good idea.6\nWe then update our parameters in the direction of the gradients with the learning rate determining how big of an update we perform. Batch gradient descent is guaranteed to converge to the global minimum for convex error surfaces and to a local minimum for non-convex surfaces."
    }, {
      "heading" : "2.2 Stochastic gradient descent",
      "text" : "Stochastic gradient descent (SGD) in contrast performs a parameter update for each training example x(i) and label y(i):\nθ = θ − η · ∇θJ(θ;x(i); y(i)) (2)\nBatch gradient descent performs redundant computations for large datasets, as it recomputes gradients for similar examples before each parameter update. SGD does away with this redundancy by performing one update at a time. It is therefore usually much faster and can also be used to learn online. SGD performs frequent updates with a high variance that cause the objective function to fluctuate heavily as in Figure 1.\nWhile batch gradient descent converges to the minimum of the basin the parameters are placed in, SGD’s fluctuation, on the one hand, enables it to jump to new and potentially better local minima. On the other hand, this ultimately complicates convergence to the exact minimum, as SGD will keep overshooting. However, it has been shown that when we slowly decrease the learning rate, SGD shows the same convergence behaviour as batch gradient descent, almost certainly converging to a local or the global minimum for non-convex and convex optimization respectively. Its code fragment simply adds a loop over the training examples and evaluates the gradient w.r.t. each example. Note that we shuffle the training data at every epoch as explained in Section 6.1.\nfor i in range(nb_epochs ): np.random.shuffle(data) for example in data:\nparams_grad = evaluate_gradient(loss_function , example , params) params = params - learning_rate * params_grad\n6Refer to http://cs231n.github.io/neural-networks-3/ for some great tips on how to check gradients properly."
    }, {
      "heading" : "2.3 Mini-batch gradient descent",
      "text" : "Mini-batch gradient descent finally takes the best of both worlds and performs an update for every mini-batch of n training examples:\nθ = θ − η · ∇θJ(θ;x(i:i+n); y(i:i+n)) (3)\nThis way, it a) reduces the variance of the parameter updates, which can lead to more stable convergence; and b) can make use of highly optimized matrix optimizations common to state-of-the-art deep learning libraries that make computing the gradient w.r.t. a mini-batch very efficient. Common mini-batch sizes range between 50 and 256, but can vary for different applications. Mini-batch gradient descent is typically the algorithm of choice when training a neural network and the term SGD usually is employed also when mini-batches are used. Note: In modifications of SGD in the rest of this post, we leave out the parameters x(i:i+n); y(i:i+n) for simplicity.\nIn code, instead of iterating over examples, we now iterate over mini-batches of size 50:\nfor i in range(nb_epochs ): np.random.shuffle(data) for batch in get_batches(data , batch_size =50):\nparams_grad = evaluate_gradient(loss_function , batch , params) params = params - learning_rate * params_grad"
    }, {
      "heading" : "3 Challenges",
      "text" : "Vanilla mini-batch gradient descent, however, does not guarantee good convergence, but offers a few challenges that need to be addressed:\n• Choosing a proper learning rate can be difficult. A learning rate that is too small leads to painfully slow convergence, while a learning rate that is too large can hinder convergence and cause the loss function to fluctuate around the minimum or even to diverge.\n• Learning rate schedules [17] try to adjust the learning rate during training by e.g. annealing, i.e. reducing the learning rate according to a pre-defined schedule or when the change in objective between epochs falls below a threshold. These schedules and thresholds, however, have to be defined in advance and are thus unable to adapt to a dataset’s characteristics [4].\n• Additionally, the same learning rate applies to all parameter updates. If our data is sparse and our features have very different frequencies, we might not want to update all of them to the same extent, but perform a larger update for rarely occurring features.\n• Another key challenge of minimizing highly non-convex error functions common for neural networks is avoiding getting trapped in their numerous suboptimal local minima. Dauphin et al. [5] argue that the difficulty arises in fact not from local minima but from saddle points, i.e. points where one dimension slopes up and another slopes down. These saddle points are usually surrounded by a plateau of the same error, which makes it notoriously hard for SGD to escape, as the gradient is close to zero in all dimensions."
    }, {
      "heading" : "4 Gradient descent optimization algorithms",
      "text" : "In the following, we will outline some algorithms that are widely used by the Deep Learning community to deal with the aforementioned challenges. We will not discuss algorithms that are infeasible to compute in practice for high-dimensional data sets, e.g. second-order methods such as Newton’s method7."
    }, {
      "heading" : "4.1 Momentum",
      "text" : "SGD has trouble navigating ravines, i.e. areas where the surface curves much more steeply in one dimension than in another [19], which are common around local optima. In these scenarios, SGD oscillates across the slopes of the ravine while only making hesitant progress along the bottom towards the local optimum as in Figure 2a.\nMomentum [16] is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in Figure 2b. It does this by adding a fraction γ of the update vector of the past time step to the current update vector8\nvt = γvt−1 + η∇θJ(θ) θ = θ − vt\n(4)\nThe momentum term γ is usually set to 0.9 or a similar value.\nEssentially, when using momentum, we push a ball down a hill. The ball accumulates momentum as it rolls downhill, becoming faster and faster on the way (until it reaches its terminal velocity, if there is air resistance, i.e. γ < 1). The same thing happens to our parameter updates: The momentum term increases for dimensions whose gradients point in the same directions and reduces updates for dimensions whose gradients change directions. As a result, we gain faster convergence and reduced oscillation."
    }, {
      "heading" : "4.2 Nesterov accelerated gradient",
      "text" : "However, a ball that rolls down a hill, blindly following the slope, is highly unsatisfactory. We would like to have a smarter ball, a ball that has a notion of where it is going so that it knows to slow down before the hill slopes up again.\nNesterov accelerated gradient (NAG) [13] is a way to give our momentum term this kind of prescience. We know that we will use our momentum term γvt−1 to move the parameters θ. Computing θ−γvt−1 thus gives us an approximation of the next position of the parameters (the gradient is missing for the full update), a rough idea where our parameters are going to be. We can now effectively look ahead by calculating the gradient not w.r.t. to our current parameters θ but w.r.t. the approximate future position of our parameters:\nvt = γ vt−1 + η∇θJ(θ − γvt−1) θ = θ − vt\n(5)\n7https://en.wikipedia.org/wiki/Newton%27s_method_in_optimization 8Some implementations exchange the signs in the equations.\nAgain, we set the momentum term γ to a value of around 0.9. While Momentum first computes the current gradient (small blue vector in Figure 3) and then takes a big jump in the direction of the updated accumulated gradient (big blue vector), NAG first makes a big jump in the direction of the previous accumulated gradient (brown vector), measures the gradient and then makes a correction (green vector). This anticipatory update prevents us from going too fast and results in increased responsiveness, which has significantly increased the performance of RNNs on a number of tasks [2].9\nNow that we are able to adapt our updates to the slope of our error function and speed up SGD in turn, we would also like to adapt our updates to each individual parameter to perform larger or smaller updates depending on their importance."
    }, {
      "heading" : "4.3 Adagrad",
      "text" : "Adagrad [7] is an algorithm for gradient-based optimization that does just this: It adapts the learning rate to the parameters, performing larger updates for infrequent and smaller updates for frequent parameters. For this reason, it is well-suited for dealing with sparse data. Dean et al. [6] have found that Adagrad greatly improved the robustness of SGD and used it for training large-scale neural nets at Google, which – among other things – learned to recognize cats in Youtube videos10. Moreover, Pennington et al. [15] used Adagrad to train GloVe word embeddings, as infrequent words require much larger updates than frequent ones.\nPreviously, we performed an update for all parameters θ at once as every parameter θi used the same learning rate η. As Adagrad uses a different learning rate for every parameter θi at every time step t, we first show Adagrad’s per-parameter update, which we then vectorize. For brevity, we set gt,i to be the gradient of the objective function w.r.t. to the parameter θi at time step t:\ngt,i = ∇θJ(θi) (6)\nThe SGD update for every parameter θi at each time step t then becomes:\nθt+1,i = θt,i − η · gt,i (7)\nIn its update rule, Adagrad modifies the general learning rate η at each time step t for every parameter θi based on the past gradients that have been computed for θi:\nθt+1,i = θt,i − η√\nGt,ii + · gt,i (8)\nGt ∈ Rd×d here is a diagonal matrix where each diagonal element i, i is the sum of the squares of the gradients w.r.t. θi up to time step t11, while is a smoothing term that avoids division by zero (usually on the order of 1e− 8). Interestingly, without the square root operation, the algorithm performs much worse.\n9Refer to http://cs231n.github.io/neural-networks-3/ for another explanation of the intuitions behind NAG, while Ilya Sutskever gives a more detailed overview in his PhD thesis [18].\n10http://www.wired.com/2012/06/google-x-neural-network/ 11Duchi et al. [7] give this matrix as an alternative to the full matrix containing the outer products of all previous gradients, as the computation of the matrix square root is infeasible even for a moderate number of parameters d.\nAs Gt contains the sum of the squares of the past gradients w.r.t. to all parameters θ along its diagonal, we can now vectorize our implementation by performing an element-wise matrix-vector multiplication between Gt and gt:\nθt+1 = θt − η√\nGt + gt. (9)\nOne of Adagrad’s main benefits is that it eliminates the need to manually tune the learning rate. Most implementations use a default value of 0.01 and leave it at that.\nAdagrad’s main weakness is its accumulation of the squared gradients in the denominator: Since every added term is positive, the accumulated sum keeps growing during training. This in turn causes the learning rate to shrink and eventually become infinitesimally small, at which point the algorithm is no longer able to acquire additional knowledge. The following algorithms aim to resolve this flaw."
    }, {
      "heading" : "4.4 Adadelta",
      "text" : "Adadelta [21] is an extension of Adagrad that seeks to reduce its aggressive, monotonically decreasing learning rate. Instead of accumulating all past squared gradients, Adadelta restricts the window of accumulated past gradients to some fixed size w.\nInstead of inefficiently storing w previous squared gradients, the sum of gradients is recursively defined as a decaying average of all past squared gradients. The running average E[g2]t at time step t then depends (as a fraction γ similarly to the Momentum term) only on the previous average and the current gradient:\nE[g2]t = γE[g 2]t−1 + (1− γ)g2t (10)\nWe set γ to a similar value as the momentum term, around 0.9. For clarity, we now rewrite our vanilla SGD update in terms of the parameter update vector ∆θt:\n∆θt = −η · gt,i θt+1 = θt + ∆θt\n(11)\nThe parameter update vector of Adagrad that we derived previously thus takes the form:\n∆θt = − η√\nGt + gt (12)\nWe now simply replace the diagonal matrix Gt with the decaying average over past squared gradients E[g2]t:\n∆θt = − η√\nE[g2]t + gt (13)\nAs the denominator is just the root mean squared (RMS) error criterion of the gradient, we can replace it with the criterion short-hand:\n∆θt = − η\nRMS[g]t gt (14)\nThe authors note that the units in this update (as well as in SGD, Momentum, or Adagrad) do not match, i.e. the update should have the same hypothetical units as the parameter. To realize this, they first define another exponentially decaying average, this time not of squared gradients but of squared parameter updates:\nE[∆θ2]t = γE[∆θ 2]t−1 + (1− γ)∆θ2t (15)\nThe root mean squared error of parameter updates is thus:\nRMS[∆θ]t = √ E[∆θ2]t + (16)\nSince RMS[∆θ]t is unknown, we approximate it with the RMS of parameter updates until the previous time step. Replacing the learning rate η in the previous update rule with RMS[∆θ]t−1 finally yields the Adadelta update rule:\n∆θt = − RMS[∆θ]t−1 RMS[g]t gt\nθt+1 = θt + ∆θt\n(17)\nWith Adadelta, we do not even need to set a default learning rate, as it has been eliminated from the update rule."
    }, {
      "heading" : "4.5 RMSprop",
      "text" : "RMSprop is an unpublished, adaptive learning rate method proposed by Geoff Hinton in Lecture 6e of his Coursera Class12.\nRMSprop and Adadelta have both been developed independently around the same time stemming from the need to resolve Adagrad’s radically diminishing learning rates. RMSprop in fact is identical to the first update vector of Adadelta that we derived above:\nE[g2]t = 0.9E[g 2]t−1 + 0.1g 2 t\nθt+1 = θt − η√\nE[g2]t + gt\n(18)\nRMSprop as well divides the learning rate by an exponentially decaying average of squared gradients. Hinton suggests γ to be set to 0.9, while a good default value for the learning rate η is 0.001."
    }, {
      "heading" : "4.6 Adam",
      "text" : "Adaptive Moment Estimation (Adam) [9] is another method that computes adaptive learning rates for each parameter. In addition to storing an exponentially decaying average of past squared gradients vt like Adadelta and RMSprop, Adam also keeps an exponentially decaying average of past gradients mt, similar to momentum:\nmt = β1mt−1 + (1− β1)gt vt = β2vt−1 + (1− β2)g2t\n(19)\nmt and vt are estimates of the first moment (the mean) and the second moment (the uncentered variance) of the gradients respectively, hence the name of the method. As mt and vt are initialized as vectors of 0’s, the authors of Adam observe that they are biased towards zero, especially during the initial time steps, and especially when the decay rates are small (i.e. β1 and β2 are close to 1).\nThey counteract these biases by computing bias-corrected first and second moment estimates:\nm̂t = mt\n1− βt1 v̂t =\nvt 1− βt2\n(20)\n12http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf\nThey then use these to update the parameters just as we have seen in Adadelta and RMSprop, which yields the Adam update rule:\nθt+1 = θt − η√ v̂t + m̂t (21)\nThe authors propose default values of 0.9 for β1, 0.999 for β2, and 10−8 for . They show empirically that Adam works well in practice and compares favorably to other adaptive learning-method algorithms."
    }, {
      "heading" : "4.7 Visualization of algorithms",
      "text" : "The following two figures provide some intuitions towards the optimization behaviour of the presented optimization algorithms.13\nIn Figure 4a, we see the path they took on the contours of a loss surface. All started at the same point and took different paths to reach the minimum. Note that Adagrad, Adadelta, and RMSprop headed off immediately in the right direction and converged similarly fast, while Momentum and NAG were led off-track, evoking the image of a ball rolling down the hill. NAG, however, was able to correct its course sooner due to its increased responsiveness by looking ahead and headed to the minimum.\nFigure 4b shows the behaviour of the algorithms at a saddle point, i.e. a point where one dimension has a positive slope, while the other dimension has a negative slope, which pose a difficulty for SGD as we mentioned before. Notice here that SGD, Momentum, and NAG find it difficulty to break symmetry, although the latter two eventually manage to escape the saddle point, while Adagrad, RMSprop, and Adadelta quickly head down the negative slope, with Adadelta leading the charge.\nAs we can see, the adaptive learning-rate methods, i.e. Adagrad, Adadelta, RMSprop, and Adam are most suitable and provide the best convergence for these scenarios."
    }, {
      "heading" : "4.8 Which optimizer to use?",
      "text" : "So, which optimizer should you use? If your input data is sparse, then you likely achieve the best results using one of the adaptive learning-rate methods. An additional benefit is that you will not need to tune the learning rate but will likely achieve the best results with the default value.\nIn summary, RMSprop is an extension of Adagrad that deals with its radically diminishing learning rates. It is identical to Adadelta, except that Adadelta uses the RMS of parameter updates in the numinator update rule. Adam, finally, adds bias-correction and momentum to RMSprop. Insofar, RMSprop, Adadelta, and Adam are very similar algorithms that do well in similar circumstances. Kingma et al. [9] show that its bias-correction helps Adam slightly outperform RMSprop towards the end of optimization as gradients become sparser. Insofar, Adam might be the best overall choice.\n13Also have a look at http://cs231n.github.io/neural-networks-3/ for a description of the same images by Karpathy and another concise overview of the algorithms discussed.\nInterestingly, many recent papers use vanilla SGD without momentum and a simple learning rate annealing schedule. As has been shown, SGD usually achieves to find a minimum, but it might take significantly longer than with some of the optimizers, is much more reliant on a robust initialization and annealing schedule, and may get stuck in saddle points rather than local minima. Consequently, if you care about fast convergence and train a deep or complex neural network, you should choose one of the adaptive learning rate methods."
    }, {
      "heading" : "5 Parallelizing and distributing SGD",
      "text" : "Given the ubiquity of large-scale data solutions and the availability of low-commodity clusters, distributing SGD to speed it up further is an obvious choice. SGD by itself is inherently sequential: Step-by-step, we progress further towards the minimum. Running it provides good convergence but can be slow particularly on large datasets. In contrast, running SGD asynchronously is faster, but suboptimal communication between workers can lead to poor convergence. Additionally, we can also parallelize SGD on one machine without the need for a large computing cluster. The following are algorithms and architectures that have been proposed to optimize parallelized and distributed SGD."
    }, {
      "heading" : "5.1 Hogwild!",
      "text" : "Niu et al. [14] introduce an update scheme called Hogwild! that allows performing SGD updates in parallel on CPUs. Processors are allowed to access shared memory without locking the parameters. This only works if the input data is sparse, as each update will only modify a fraction of all parameters. They show that in this case, the update scheme achieves almost an optimal rate of convergence, as it is unlikely that processors will overwrite useful information."
    }, {
      "heading" : "5.2 Downpour SGD",
      "text" : "Downpour SGD is an asynchronous variant of SGD that was used by Dean et al. [6] in their DistBelief framework (the predecessor to TensorFlow) at Google. It runs multiple replicas of a model in parallel on subsets of the training data. These models send their updates to a parameter server, which is split across many machines. Each machine is responsible for storing and updating a fraction of the model’s parameters. However, as replicas don’t communicate with each other e.g. by sharing weights or updates, their parameters are continuously at risk of diverging, hindering convergence."
    }, {
      "heading" : "5.3 Delay-tolerant Algorithms for SGD",
      "text" : "McMahan and Streeter [11] extend AdaGrad to the parallel setting by developing delay-tolerant algorithms that not only adapt to past gradients, but also to the update delays. This has been shown to work well in practice."
    }, {
      "heading" : "5.4 TensorFlow",
      "text" : "TensorFlow14 [1] is Google’s recently open-sourced framework for the implementation and deployment of large-scale machine learning models. It is based on their experience with DistBelief and is already used internally to perform computations on a large range of mobile devices as well as on large-scale distributed systems. The distributed version, which was released in April 2016 recently in April 201615 relies on a computation graph that is split into a subgraph for every device, while communication takes place using Send/Receive node pairs."
    }, {
      "heading" : "5.5 Elastic Averaging SGD",
      "text" : "Zhang et al. [22] propose Elastic Averaging SGD (EASGD), which links the parameters of the workers of asynchronous SGD with an elastic force, i.e. a center variable stored by the parameter server. This allows the local variables to fluctuate further from the center variable, which in theory allows for more exploration of the parameter space. They show empirically that this increased capacity for exploration leads to improved performance by finding new local optima.\n14https://www.tensorflow.org/ 15http://googleresearch.blogspot.ie/2016/04/announcing-tensorflow-08-now-with.html"
    }, {
      "heading" : "6 Additional strategies for optimizing SGD",
      "text" : "Finally, we introduce additional strategies that can be used alongside any of the previously mentioned algorithms to further improve the performance of SGD. For a great overview of some other common tricks, refer to [10]."
    }, {
      "heading" : "6.1 Shuffling and Curriculum Learning",
      "text" : "Generally, we want to avoid providing the training examples in a meaningful order to our model as this may bias the optimization algorithm. Consequently, it is often a good idea to shuffle the training data after every epoch.\nOn the other hand, for some cases where we aim to solve progressively harder problems, supplying the training examples in a meaningful order may actually lead to improved performance and better convergence. The method for establishing this meaningful order is called Curriculum Learning [3].\nZaremba and Sutskever [20] were only able to train LSTMs to evaluate simple programs using Curriculum Learning and show that a combined or mixed strategy is better than the naive one, which sorts examples by increasing difficulty."
    }, {
      "heading" : "6.2 Batch normalization",
      "text" : "To facilitate learning, we typically normalize the initial values of our parameters by initializing them with zero mean and unit variance. As training progresses and we update parameters to different extents, we lose this normalization, which slows down training and amplifies changes as the network becomes deeper.\nBatch normalization [8] reestablishes these normalizations for every mini-batch and changes are backpropagated through the operation as well. By making normalization part of the model architecture, we are able to use higher learning rates and pay less attention to the initialization parameters. Batch normalization additionally acts as a regularizer, reducing (and sometimes even eliminating) the need for Dropout."
    }, {
      "heading" : "6.3 Early stopping",
      "text" : "According to Geoff Hinton: “Early stopping (is) beautiful free lunch”16. You should thus always monitor error on a validation set during training and stop (with some patience) if your validation error does not improve enough."
    }, {
      "heading" : "6.4 Gradient noise",
      "text" : "Neelakantan et al. [12] add noise that follows a Gaussian distribution N(0, σ2t ) to each gradient update:\ngt,i = gt,i +N(0, σ 2 t ) (22)\nThey anneal the variance according to the following schedule:\nσ2t = η\n(1 + t)γ (23)\nThey show that adding this noise makes networks more robust to poor initialization and helps training particularly deep and complex networks. They suspect that the added noise gives the model more chances to escape and find new local minima, which are more frequent for deeper models.\n16NIPS 2015 Tutorial slides, slide 63, http://www.iro.umontreal.ca/~bengioy/talks/ DL-Tutorial-NIPS2015.pdf"
    }, {
      "heading" : "7 Conclusion",
      "text" : "In this blog post, we have initially looked at the three variants of gradient descent, among which mini-batch gradient descent is the most popular. We have then investigated algorithms that are most commonly used for optimizing SGD: Momentum, Nesterov accelerated gradient, Adagrad, Adadelta, RMSprop, Adam, as well as different algorithms to optimize asynchronous SGD. Finally, we’ve considered other strategies to improve SGD such as shuffling and curriculum learning, batch normalization, and early stopping."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2016,
    "abstractText" : "Gradient descent optimization algorithms, while increasingly popular, are often used as black-box optimizers, as practical explanations of their strengths and weaknesses are hard to come by. This article aims to provide the reader with intuitions with regard to the behaviour of different algorithms that will allow her to put them to use. In the course of this overview, we look at different variants of gradient descent, summarize challenges, introduce the most common optimization algorithms, review architectures in a parallel and distributed setting, and investigate additional strategies for optimizing gradient descent.",
    "creator" : "LaTeX with hyperref package"
  }
}