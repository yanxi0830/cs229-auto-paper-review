{
  "name" : "1611.08002.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Semantic Compositional Networks for Visual Captioning",
    "authors" : [ "Zhe Gan", "Chuang Gan", "Xiaodong He", "Yunchen Pu", "Kenneth Tran", "Jianfeng Gao", "Lawrence Carin", "Li Deng" ],
    "emails" : [ "lcarin}@duke.edu,", "ganchuang1990@gmail.com", "deng}@microsoft.com" ],
    "sections" : [ {
      "heading" : "1. Introduction",
      "text" : "There has been a recent surge of interest in developing models that can generate captions for images or videos, termed visual captioning. Most of these approaches learn a probabilistic model of the caption, conditioned on an image or a video [25, 40, 11, 16, 41, 45, 9, 39, 28, 49]. Inspired by the successful use of the encoder-decoder framework employed in machine translation [1, 7, 34], most recent work on visual captioning employs a convolutional neural network (CNN) as an encoder, obtaining a fixed-length vector representation of a given image or video. A recurrent neural network (RNN), typically implemented with long short-term memory (LSTM) units [13], is then employed as a decoder to generate a caption.\nRecent work shows that adding explicit high-level semantic concepts (i.e., tags) of the input image/video can further improve visual captioning. As shown in [42, 47], detecting explicit semantic concepts encoded in an image, and adding\nthis high-level semantic information into the CNN-LSTM framework, has improved performance significantly. Specifically, [42] feeds the semantic concepts as an initialization step into the LSTM decoder. In [47], a model of semantic attention is proposed which selectively attends to semantic concepts through a soft attention mechanism [1]. On the other hand, although significant performance improvements were achieved, integration of semantic concepts into the LSTM-based caption generation process is constrained in these methods; e.g., only through soft attention or initialization of the first step of the LSTM.\n1\nar X\niv :1\n61 1.\n08 00\n2v 1\n[ cs\n.C V\n] 2\n3 N\nov 2\nIn this paper, we propose the Semantic Compositional Network (SCN) to more effectively assemble the meanings of individual tags to generate the caption that describes the overall meaning of the image, as illustrated in Figure 1a. Similar to the conventional CNN-LSTM-based image captioning framework, a CNN is used to extract the visual feature vector, which is then fed into a LSTM for generating the image caption (for simplicity, in this discussion we refer to images, but the method is also applicable to video). However, unlike the conventional LSTM, the SCN extends each weight matrix of the conventional LSTM to an ensemble of tag-dependent weight matrices, subject to the probabilities that the tags are present in the image. These tag-dependent weight matrices form a weight tensor with a large number of parameters. In order to make learning feasible, we factorize that tensor to be a three-way matrix product, which dramatically reduces the number of free parameters to be learned, while also yielding excellent performance.\nFigure 1b illustrates the semantic composition manifested in the SCN model. Specifically, a set of semantic concepts, such as “baby, holding, toothbrush, mouth”, are detected with high probabilities. If only one semantic concept is turned on, the model will generate a description covering only part of the input image, as shown in sentences 1-5 of Figure 1b; however, by assembling all these semantic concepts, the SCN is able to generate a comprehensive description “a baby holding a toothbrush in its mouth”. More interestingly, as shown in sentences 6-8 of Figure 1b, the SCN also has great flexibility to adjust the generation of the caption by changing certain semantic concepts.\nThe main contributions of this paper are as follows: (i) We propose the SCN to effectively compose individual semantic concepts for image captioning. (ii) We perform comprehensive evaluations on two image captioning benchmarks, demonstrating that the proposed method outperforms previous state-of-the-art approaches by a substantial margin. For example, as reported by the COCO official test server, we achieve a BLEU-4 of 33.1, an improvement of 1.5 points over the current published state-of-the-art [47]. (iii) We extend the proposed framework from image captioning to video captioning, demonstrating the versatility of the proposed model. (iv) We also perform a detailed analysis to study the SCN, showing that the model can adjust the caption smoothly by modifying the tags."
    }, {
      "heading" : "2. Related work",
      "text" : "We focus on recent neural-network-based literature for caption generation, as these are most relevant to our work. Such models typically extract a visual feature vector via a CNN, and then send that vector to a language model for caption generation. Representative works include [6, 8, 9, 16, 19, 20, 25, 41] for image captioning and [9, 39, 40, 49, 2] for video captioning. The differences of the various methods\nmainly lie in the types of CNN architectures and language models. For example, the vanilla RNN [10] was used in [25, 16], while the LSTM [13] was used in [41, 39, 40]. The visual feature vector was only fed into the RNN once at the first time step in [41, 16], while it was used at each time step of the RNN in [25].\nMost recently, [45] utilized an attention-based mechanism to learn where to focus in the image during caption generation. This work was followed by [46] which introduced a review module to improve the attention mechanism and [24] which proposed a method to improve the correctness of visual attention. In addition, a variational autoencoder was developed in [30] for image captioning. Other related work for video captioning includes [28], which learned a joint embedding of visual features and associated captions.\nAnother class of models uses semantic information for caption generation. Specifically, [14] applied retrieved sentences as additional semantic information to guide the LSTM when generating captions, while [11, 42, 47] applied a semantic-concept-detection process before generating sentences. This line of methods represents the current state of the art for image captioning. Our proposed model also lies in this category; however, distinct from the aforementioned approaches, our model uses weight tensors in LSTM units. This allows learning an ensemble of semantic-conceptdependent weight matrices for generating the caption.\nThe tensor factorization method is used to make the SCN compact and simplify learning. Similar ideas have been exploited in [21, 26, 32, 33, 35, 43]. In [9, 15, 19] the authors also briefly discussed using the tensor factorization method for image captioning. Specifically, visual features extracted from CNNs are utilized in [9, 19], and an inferred scene vector is used in [15] for tensor factorization. In contrast to these works, we use the semantic-concept vector that is formed by the probabilities of all tags to weight the basis LSTM weight matrices in the ensemble. Our semantic-concept vector is more powerful than the visual-feature vector [9, 19] and the scene vector [15] in terms of providing explicit semantic information of an image, hence leading to significantly better performance, as shown in our quantitative evaluation. In addition, the usage of semantic concepts also makes the proposed SCN more interpretable than [9, 15, 19], as shown in our qualitative analysis, since each unit in the semanticconcept vector corresponds to an explicit tag."
    }, {
      "heading" : "3. Semantic compositional networks",
      "text" : ""
    }, {
      "heading" : "3.1. Review of RNN for image captioning",
      "text" : "Consider an image I, with associated caption X. We first extract feature vector v(I), which is often the top-layer features of a pretrained CNN. Henceforth, for simplicity, we omit the explicit dependence on I, and represent the visual feature vector as v. The length-T caption is represented as\nX = (x1, . . . ,xT ), with xt a 1-of-V (“one hot”) encoding vector, with V the size of the vocabulary. The length T typically varies among different captions.\nThe t-th word in a caption, xt, is linearly embedded into an nx-dimensional real-valued vector wt = Wext, where We ∈ Rnx×V is a word embedding matrix (learned), i.e., wt is a column of We chosen by the one-hot xt. The probability of caption X given image feature vector v is defined as\np(X|I) = ∏T\nt=1p(xt|x0, . . . ,xt−1,v) , (1)\nwhere x0 is defined as a special start-of-the-sentence token. All the words in the caption are sequentially generated using a RNN, until the end-of-the-sentence symbol is generated. Specifically, each conditional p(xt|x<t,v) is specified as softmax(Vht), where ht is recursively updated through ht = H(wt−1,ht−1,v), and h0 is defined as a zero vector (h0 is not updated during training). V is the weight matrix connecting the RNN’s hidden state, used for computing a distribution over words. Bias terms are omitted for simplicity throughout the paper.\nWithout loss of generality, we begin by discussing an RNN with a simple transition functionH(·); this is generalized in Section 3.4 to the LSTM. Specifically,H(·) is defined as\nht = σ(Wxt−1 +Uht−1 + 1(t = 1) ·Cv) , (2)\nwhere σ(·) is a logistic sigmoid function, and 1(·) represents an indicator function. Feature vector v is fed into the RNN at the beginning, i.e., at t = 1. W is defined as the input matrix, and U is termed the recurrent matrix. The model in (2) is illustrated in Figure 2(a)."
    }, {
      "heading" : "3.2. Semantic concept detection",
      "text" : "The SCN developed below is based on the detection of semantic concepts, i.e., tags, in the image under test. In order to detect such from an image, we first select a set of tags from the caption text in the training set. Following [11], we use the K most common words in the training captions to determine the vocabulary of tags, which includes the most frequent nouns, verbs, or adjectives.\nIn order to predict semantic concepts given a test image, motivated by [42], we treat this problem as a multi-label classification task. Suppose that there are N training examples, and yi = [yi1, . . . , yiK ] ∈ {0, 1}K is the label vector of the i-th image, where yik = 1 if the image is annotated with tag k, and yik = 0 otherwise. Let vi and si represent the image feature vector and the semantic feature vector for the i-th image, the cost function to be minimized is\n1\nN N∑ i=1 K∑ k=1 ( yik log sik + (1− yik) log(1− sik) ) , (3)\nwhere si = σ ( f(vi) ) is a K-dimensional vector with si = [si1, . . . , siK ], σ(·) is the logistic sigmoid function and f(·) is implemented as a multilayer perceptron (MLP).\nIn testing, for each input image, we compute a semanticconcept vector s, formed by the probabilities of all tags, computed by the semantic-concept detection model."
    }, {
      "heading" : "3.3. SCN-RNN",
      "text" : "The SCN extends each weight matrix of the conventional RNN to be an ensemble of a set of tag-dependent weight matrices, subjective to the probabilities that the tags are present in the image. Specifically, the SCN-RNN computes the hidden states as follows\nht = σ(W(s)xt−1 +U(s)ht−1 + z) , (4)\nwhere z = 1(t = 1) · Cv, and W(s) and U(s) are ensembles of tag-dependent weight matrices, subjective to the probabilities that the tags are present in the image, according to the semantic-concept vector s.\nGiven s ∈ RK , we define two weight tensors WT ∈ Rnh×nx×K and UT ∈ Rnh×nh×K , where nh is the number of hidden units and nx is the dimension of word embedding. W(s) ∈ Rnh×nx and U(s) ∈ Rnh×nh can be specified as\nW(s) = K∑ k=1 skWT [k], U(s) = K∑ k=1 skUT [k] , (5)\nwhere sk is the k-th element in s; WT [k] and UT [k] denote the k-th 2D “slice” of WT and UT , respectively. The probability of the k-th semantic concept, sk, is associated with a pair of RNN weight matrices WT [k] and UT [k], implicitly specifying K RNNs in total. Consequently, training such a model as defined in (4) and (5) can be interpreted as jointly training an ensemble of K RNNs.\nThough appealing, the number of parameters is proportional toK, which is prohibitive for largeK (e.g.,K = 1000 for COCO). In order to remedy this problem, we adopt ideas from [26] to factorize W(s) and U(s) defined in (5) as\nW(s) = Wa · diag(Wbs) ·Wc , (6) U(s) = Ua · diag(Ubs) ·Uc , (7)\nwhere Wa ∈ Rnh×nf , Wb ∈ Rnf×K and Wc ∈ Rnf×nx . Similiarly, Ua ∈ Rnh×nf , Ub ∈ Rnf×K and Uc ∈ Rnf×nh . nf is the number of factors. Substituting (6) and (7) into (4), we obtain our SCN with an RNN as\nx̃t−1 = Wbs Wcxt−1 , (8) h̃t−1 = Ubs Ucht−1 , (9)\nz = 1(t = 1) ·Cv , (10) ht = σ(Wax̃t−1 +Uah̃t−1 + z) . (11)\nwhere denotes the element-wise multiply (Hadamard) operator.\nWa and Wc are shared among all the captions, effectively capturing common linguistic patterns; while the diagonal term, diag(Wbs), accounts for semantic aspects of the image under test, captured by s. The same analysis also holds true for Ua,b,c. In this factorized model, the RNN weight matrices that correspond to each semantic concept share “structure.” This factorized model (termed SCN-RNN) is illustrated in Figure 2(b).\nTo provide further motivation for and insight into the decompositions in (6) and (7), let wbk represent the kth column of Wb, then\nW(s) = K∑ k=1 sk[Wa · diag(wbk) ·Wc] . (12)\nA similar decomposition is manifested for U(s). The matrix Wa ·diag(wbk)·Wc may be interpreted as the k-th “slice” of a weight tensor, with each slice corresponding to one of the K semantic concepts (K total tensor “slices,” each of size nh × nx). Hence, via the decomposition in (6) and (7), we effectively learn an ensemble of K sets of RNN parameters, one for each semantic concept. This is efficiently done by sharing Wa and Wc when composing each member of the ensemble. The weight with which the k-th slice of this tensor contributes to the RNN parameters for a given image is dependent on the respective probability sk with which the k-th semantic concept is inferred to be associated with image I."
    }, {
      "heading" : "3.4. SCN-LSTM",
      "text" : "RNNs with LSTM units [13] have emerged as a popular architecture, due to their representational power and effectiveness at capturing long-term dependencies. We generalize the SCN-RNN model by using LSTM units. Specifically, we define ht = H(xt−1,ht−1,v, s) as\nit = σ(Wiax̃i,t−1 +Uiah̃i,t−1 + z) , (13)\nf t = σ(Wfax̃f,t−1 +Ufah̃f,t−1 + z) , (14)\not = σ(Woax̃o,t−1 +Uoah̃o,t−1 + z) , (15)\nc̃t = σ(Wcax̃c,t−1 +Ucah̃c,t−1 + z) , (16) ct = it c̃t + f t ct−1 , (17) ht = ot tanh(ct) , (18)\nwhere z = 1(t = 1) ·Cv. For ? = i, f, o, c, we define\nx̃?,t−1 = W?bs W?cxt−1 , (19) h̃?,t−1 = U?bs U?cht−1 . (20)\nSince we implement the SCN with LSTM units, we name this model SCN-LSTM. In experiments, since LSTM is more powerful than classifical RNN, we only report results using SCN-LSTM.\nIn summary, distinct from previous image-captioning methods, our model has a unique way to utilize and combine the visual feature v and semantic-concept vector s extracted from an image I. v is fed into the LSTM to initialize the first step, which is expected to provide the LSTM an overview of the image content. While the LSTM state is initialized with the overall visual context v, an ensemble of K sets of LSTM parameters is utilized when decoding, weighted by the semantic-concept vector s, to generate the caption.\nModel learning Given the image I and associated caption X, the objective function is the sum of the log-likelihood of the caption conditioned on the image representation:\nlog p(X|I) = ∑T\nt=1p(xt|x0, . . . ,xt−1,v, s) . (21)\nThe above objective corresponds to a single image-caption pair. In training, we average over all training pairs."
    }, {
      "heading" : "3.5. Extension to video captioning",
      "text" : "The above framework can be readily extended to the task of video captioning [9, 39, 40, 49, 2, 44]. In order to effectively represent the spatiotemporal visual content of a video, we use a two-dimensional (2D) and a threedimensional (3D) CNN to extract visual features of video frames/clips. We then perform a mean pooling process [40] over all 2D CNN features and 3D CNN features, to generate two feature vectors (one from 2D CNN features and the other from 3D CNN features). The representation of each\nvideo, v, is produced by concatenating these two features. Similarly, we also obtain the semantic-concept vector s by running the semantic-concept detector based on the video representation v. After v and s are obtained, we employ the same model proposed above directly for video-caption generation, as described in Figure 2(b)."
    }, {
      "heading" : "4. Experiments",
      "text" : ""
    }, {
      "heading" : "4.1. Datasets",
      "text" : "We present results on three benchmark datasets: COCO [23], Flickr30k [48] and Youtube2Text [4]. COCO and Flickr30k are for image captioning, containing 123287 and 31783 images, respectively. Each image is annotated with at least 5 captions. We use the same pre-defined splits as [16] for all the datasets: on Flickr30k, 1000 images for validation, 1000 for test, and the rest for training; and for COCO, 5000 images are used for both validation and testing. We further tested our model on the official COCO test set consisting of 40775 images (human-generated captions for this split are not publicly available), and evaluated our model on the COCO evaluation server. We also follow the publicly available code [16] to preprocess the captions, yielding vocabulary sizes of 8791 and 7414 for COCO and Flickr30k, respectively.\nYoutube2Text is used for video captioning, which contains 1970 Youtube clips, and each video is annotated with around 40 sentences. We use the same splits as provided in [40], with 1200 videos for training, 100 videos for validation, and 670 videos for testing. We convert all captions to lower case and remove the punctuation, yielding vocabulary size of 12594 for Youtube2Text."
    }, {
      "heading" : "4.2. Training procedure",
      "text" : "For image representation, we take the output of the 2048- way pool5 layer from ResNet-152 [12], pretrained on the\nImageNet dataset [31]. For video representation, in addition to using the 2D ResNet-152 to extract features on each video frame, we also utilize a 3D CNN (C3D) [37] to extract features on each video. The C3D is pretrained on Sports-1M video dataset [17], and we take the output of the 4096-way fc7 layer from C3D as the video representation. We consider the RGB frames of videos as input, with 2 frames per second. Each video frame is resized as 112× 112 and 224× 224 for the C3D and ResNet-152 feature extractor, respectively. The C3D feature extractor is applied on video clips of length 16 frames (as in [17]) with an overlap of 8 frames.\nWe use the procedure described in Section 3.2 for semantic concept detection. We set the semantic-concept vocabulary size to 1000, 200 and 300 for COCO, Flickr30k and Youtube2Text, respectively. Since Youtube2Text is a relatively small dataset, we found that it is very difficult to train a reliable semantic-concept detector using the Youtube2Text dataset alone, due to its limited amount of data. In experiments, we utilize additional training data from COCO.\nFor model training, all the parameters in the SCN-LSTM are initialized from a uniform distribution in [-0.01,0.01]. All bias terms are initialized to zero. Word embedding vectors are initialized with the publicly available word2vec vectors [27]. The embedding vectors of words not present in the pretrained set are initialzied randomly. The number of hidden units and the number of factors in SCN-LSTM are both set to 512 and we use mini-batches of size 64. The maximum number of epochs we run for all the three datasets is 20. Gradients are clipped if the norm of the parameter vector exceeds 5 [34]. We do not perform any dataset-specific tuning and regularization other than dropout [50] and early stopping on validation sets. The Adam algorithm [18] with learning rate 2× 10−4 is utilized for optimization. All experiments are implemented in Theano [36].\nIn testing, we use beam search for caption generation, which selects the top-k best sentences at each time step and\nconsiders them as the candidates to generate new top-k best sentences at the next time step. We set the beam size to k = 5 in experiments."
    }, {
      "heading" : "4.3. Evaluation",
      "text" : "The widely used BLEU [29], METEOR [3], ROUGEL [22], and CIDEr-D [38] metrics are reported in our quantitative evaluation of the performance of the proposed model and baselines in the literature. All the metrics are computed by using the code released by the COCO evaluation server [5]. For COCO and Flickr30k datasets, besides comparing to results reported in previous work, we also reimplemented strong baselines for comparison. The results of image captioning are presented in Table 1. The models we implemented are as follows.\n1. LSTM-R / LSTM-T / LSTM-RT: R, T, RT denotes using different features. Specifically, R denotes ResNet visual feature vector, T denotes Tags (i.e., the semanticconcept vector), and RT denotes the concatenation of R and T. The features are fed into a standard LSTM decoder only at the initial time step. In particular, LSTM-T is the model proposed in [42].\n2. LSTM-RT2: The ResNet feature vector is sent to a standard LSTM decoder at the first time step, while the tag vector is sent to the LSTM decoder at every time step in addition to the input word. This model is similar to [47]\nwithout using semantic attention. This is the model closest to ours, which provides a direct comparison to our proposed model.\n3. SCN-LSTM: This is the model presented in Section 3.4.\nFor video captioning experiments, we use the same notation. For example, LSTM-C means we leverage the C3D feature for caption generation."
    }, {
      "heading" : "4.4. Quantitative results",
      "text" : "Performance on COCO and Flickr30k We first present results on the task of image captioning, summarized in Table 1. The use of tags (LSTM-T) provides better performance than leveraging visual features alone (LSTM-R). Combining both tags and visual features further enhances performance, as expected. Compared with only feeding the tags into the LSTM at the initial time step (LSTM-RT), LSTM-RT2 yields better results, since it takes as input the tag feature at each time step. Further, the direct comparison between LSTM-RT2 and SCN-LSTM demonstrates the advantage of our proposed model, indicating that our approach is a better method to fuse semantic concepts into the LSTM.\nWe also report results averaging an ensemble of 5 identical SCN-LSTM models trained with different initializations, which is a common strategy adopted widely [47] (note that now we employ ensembles in two ways: an ensemble of LSTM parameters linked to tags, and an overaching ensemble atop the entire model). We obtain state-of-the-art results on both COCO and Flickr30k datasets. Remarkably, we improve the state-of-the-art BLEU-4 score by 3.1 points on COCO.\nPerformance on COCO test server We also evaluate the proposed SCN-LSTM model by uploading results to the online COCO test server. Table 2 shows the comparison to the published state-of-the-art image captioning models on the blind test set as reported by the COCO test server. We include the models that have been published and perform at top-3 in the table. Compared to these methods, our proposed SCN-LSTM model achieves the best performance across all the evaluation metrics on both c5 and c40 testing sets.\nPerformance on Youtube2Text Results on video captioning are presented in Table 3. The SCN-LSTM achieves\nsignificantly better results over all competing methods in all metrics, especially in CIDEr-D. For self-comparison, it is also worth noting that our model improves over LSTMCRT2 by a substantial margin. Again, using an overaching ensemble further enhances performance."
    }, {
      "heading" : "4.5. Qualitative analysis",
      "text" : "Figure 3 shows three examples to illustrate the semantic composition on caption generation. Our model properly describes the image content by using the correctly detected tags. By manually replacing specific tags, our model can adjust the caption smoothly. For example, in the left image, by\nreplacing the tag “grass” with “bed”, our model imagines “a dog laying on top of a bed”. Our model is also able to generate novel captions that are highly unlikely to occur in real life. For instance, in the middle image, by replacing the tag “road” and “street” with “ocean”, our model imagines “a bus driving in the ocean”; in the right image, by replacing the tag “field” with “snow”, our model dreams “a group of zebras standing in the snow”.\nSCN not only picks up the tags well (and imagines the corresponding scenes), but also selects the right functional words for different concepts to form syntactically correct caption. As illustrated in sentence 6 of Figure 1b, by re-\nplacing the tag “baby” with “girl”, the generated captions not only changes “a baby” to “a little girl”, but more importantly, changes “in its mouth” to “in her mouth”. In addition, the SCN also infers the underlying semantic relatedness between different tags. As illustrated in sentence 4 of Figure 1b, when only switching on the tag “mouth”, the generated caption becomes “a man with a toothbrush”, indicating the semantic closeness between “mouth”, “man” and “toothbrush”. By further switching on “baby”, we generate a more detailed description “a baby brushing its teeth”.\nIn order to demonstrate the advantage of our model, we present examples of generated captions on COCO with various methods in Figure 4, along with the detected tags. As can be seen, our model often generates more reasonable captions than LSTM-R, due to the use of high-level semantic concepts. For example, in the first image, LSTM-R outputs an irrelevant caption to the image, while the detection of “table” and “library” helps our model to generate more sensible caption. Further, although both our model and LSTM-RT2 utilize detected tags for caption generation, our model often depicts the image content more comprehensively; LSTM-\nRT2 has a larger potential to miss important details in the image. For instance, in the 3rd image, the tag “red” appears in the caption generated by our model, which is missed by LSTM-RT2. This observation might be due to the fact that the SCN provides a better approach to fuse tag information into the process of caption generation. Similiar observations can also be found in the video captioning experiments, as demonstrated in Figure 5."
    }, {
      "heading" : "5. Conclusion",
      "text" : "We have presented Semantic Compositional Network (SCN), a new framework to effectively compose the individual semantic meaning of tags for visual captioning. The SCN extends each weight matrix of the conventional LSTM to be a three-way matrix product, with one of these matrices dependent on the inferred tags. Consequently, the SCN can be viewed an ensemble of tag-dependent LSTM bases, with the contribution of each LSTM basis unit proportional to the likelihood that the tag is present in the image. Experiments conducted on three visual captioning datasets validate the superiority of the proposed approach.\nAcknowledgements Most of this work was done when the first author was an intern at Microsoft Research. This work was also supported in part by ARO, DARPA, DOE, NGA, ONR and NSF."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2016,
    "abstractText" : "A Semantic Compositional Network (SCN) is developed<lb>for image captioning, in which semantic concepts (i.e., tags)<lb>are detected from the image, and the probability of each tag<lb>is used to compose the parameters in a long short-term mem-<lb>ory (LSTM) network. The SCN extends each weight matrix of<lb>the LSTM to an ensemble of tag-dependent weight matrices.<lb>The degree to which each member of the ensemble is used<lb>to generate an image caption is tied to the image-dependent<lb>probability of the corresponding tag. In addition to caption-<lb>ing images, we also extend the SCN to generate captions for<lb>video clips. We qualitatively analyze semantic composition<lb>in SCNs, and quantitatively evaluate the algorithm on three<lb>benchmark datasets: COCO, Flickr30k, and Youtube2Text.<lb>Experimental results show that the proposed method signifi-<lb>cantly outperforms prior state-of-the-art approaches, across<lb>multiple evaluation metrics.",
    "creator" : "LaTeX with hyperref package"
  }
}