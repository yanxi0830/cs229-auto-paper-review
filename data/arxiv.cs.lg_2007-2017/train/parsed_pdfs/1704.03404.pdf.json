{
  "name" : "1704.03404.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "ENWalk: Learning Network Features for Spam Detection in Twitter",
    "authors" : [ "Santosh K C", "Suman Kalyan Maity", "Arjun Mukherjee" ],
    "emails" : [ "skc@uh.edu,", "sumankalyan.maity@cse.iitkgp.ernet.in,", "arjun@uh.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Keywords: Social Network; Spam Detection; Feature Learning"
    }, {
      "heading" : "1 Introduction",
      "text" : "Social medias are increasing their influence tremendously. Twitter is one of the popular platforms where people post information in the form of tweets and share the tweets. Twitter is available from wide range of web-enabled services to all the people. So, the real time reflection of a society can be viewed in twitter. Celebrities, governments, politicians, businesses are active in twitter to provide their updates and to listen to the views of the people. Thus, the bidirectional flow of information is high. The openness of the online platforms and reliance on users facilitates the spammers to easily penetrate the platform and overwhelm the users with malicious intent and content. This work attempts to detect the spammers in social network using a case study of twitter.\nSpammers in social networks constantly adapt to avoid the detection. Moreover, they follow reflexive reciprocity [6, 17] (users following back when they are followed by someone to show courtesy) to establish social influence and act normal. So, it is becoming difficult for traditional spam detection methods to detect the spammers. Such\nspammers have widespread impacts. There are several reports of army of fake Twitter accounts1 being used to troll2 and promote political agendas3. Even US President Donald Trump has been accused of fake followers4.\nIn this paper, we present ENWalk, a framework that uses the content information to bias a random walk of the network and obtain the latent feature embedding of the nodes in the network. ENWalk generates the biased random walks and uses them to maximize the likelihood of obtaining similar nodes in the neighborhood of the network. We study the twitter content dynamics that could be important to bias those random walks. We found that there are two types of spammers: follow-flood and vigilant. We found that success rate, activity window, fraudulence and mentioning behaviors can be used to compare the equivalence of users in the twitter. We calculate the network equivalence using these four behavioral features between pairs of nodes and try to bias the random walks with interaction proximity of the pair of nodes. Experimental results on 17 million user network from twitter show that the combination of behavioral features with the underlying network structure significantly outperform the existing state-of-the-art approaches for deception detection."
    }, {
      "heading" : "2 Related Work",
      "text" : "There have been several works on spam detection in general, especially review spam [7], and opinion spam. However, in Twitter there are limited attempts. One of the earliest works was done by Benevenuto et al. [1]. They manually labeled and trained a traditional classifier using the features extracted from user contents and behaviors. Lee et al. leveraged profile-based features and deployed social honeypots to detect new social spammers [9]. Stringhini et al. also studied spam detection using honey profiles [14]. Ghosh et al. studied the problem of link farming in Twitter [4] and introduced a ranking methodology to penalize the link farmers. Abuse of online social networks was studied in [16]. Campaign spams was studied on [3, 10, 19].\nSkip-gram model [12] has been popular to learn the features from a large corpus of data. It inspired to establish an analogy for networks by representing a network as a “document”. Similar to document being an ordered sequence of words, we can create an ordered sequence of nodes from a network using sampling techniques. DeepWalk [13] learns d-dimensional feature representations by simulating uniform random walks. LINE [15] learns the d-dimensional features into two phases: d/2 BFS-style simulations and another d/2 2-hop distant nodes. Node2vec [5] creates the ordered sequence simulating the BFS and DFS approaches. All these feature learning approaches don’t use the data associated with node which are important to learn the behaviors of the nodes.\n1 http://theatln.tc/2m8g3eA 2 http://bzfd.it/2m8rlja 3 http://bit.ly/2kJiMKu 4 http://bit.ly/1ViorHd, http://53eig.ht/2kzrhfL"
    }, {
      "heading" : "3 Dataset",
      "text" : "For this work, we use the Twitter dataset used in [18]. It contains 17 million users having 467 million Twitter posts covering a seven month period from June 1 2009 to December 31 2009. To extract the network graph for those 17 million users, we extracted the follower-following topology of Twitter from [8] which contains all the entire twitter user profiles and their social relationships till July 2009. We pruned the users so that they have social relationship in [8] and tweets in [18] and are left with 4,405,698 users. Twitter suspends the accounts involved in the malicious activity (https://support.twitter.com/articles/18311). To obtain the suspend status of accounts, we re-crawled the profile pages of all the 17 million users. This yielded a total of 100,758 accounts that had been suspended (the profile page redirects to the page https://twitter.com/account/suspended). We use this suspension signal as the primary signal for evaluating our models as the primary reason for account suspension is the involvement in the spam activity. However, there might be other reasons like inactivity. So, to ensure the suspended accounts are spammers, we further checked for malicious activities for those users. For this, we examined various URLs from the account’s timeline and checked them against a list of blacklisted URLs. We use three blacklists: Google Safebrowsing (http://code.google.com/apis/safebrowsing/), URIBL (http://uribl.com/) and Joewein (http://www.joewein.net/). We found that 75% of suspended accounts posted at least one shortened URL blacklisted. We also looked for duplicate tweets enforced for promotion. After applying these additional criteria, our final data comprised of 86,652 spammers and 4,319,046 non-spammers, which was used for evaluating our model."
    }, {
      "heading" : "4 Spam Analysis",
      "text" : "Characterizing the dominant spammer types is important as it is the first step in understanding the dynamics of spamming. We studied the follower-following network creation strategies of the spammers. We found that there are two main types of spamming based on the follow-following strategies: (1) follow-flood spammers and (2) vigilant spammers. So, the question arises why some spammers are more successful? In this section, we study the behavioral aspects of tweet dynamics of spammers. We later leverage them in model building."
    }, {
      "heading" : "4.1 Spammer Type",
      "text" : "To analyze the strategies of follower-following, we calculated the number of followers (users that are following the current user) and the number of followings (users that the current user is following) for each spammer. Figure 1 shows the plot in log scale count. It shows that the follower and following count differ for each spammers. The users with more followers than followings tend to be more successful as they have been able to “earn” a lot of users who are following them. So, we define success rate as:\n\uD835\uDC60\uD835\uDC5F\uD835\uDC62 = # of followers of \uD835\uDC62 # of followings of \uD835\uDC62\n(1)\nBased on the network expansion success rate, we find that there are two dominant spamming strategies:\n4.2 Activity Window We compute the activity window as the number of days a user is active in the twitter network. Since, we don’t have the exact time when a user was suspended, we approximate the time of suspension as the date of the last tweet tweeted by the user. We found that the average activity window of a vigilant spammer is 138 days with a standard deviation of 19 days compared to the average of 35 days and standard deviation of 12 days for follow-flood spammers. Although, the basic strategy of any spammer is to inject itself into the network and emit the spam contents, the success rate also depends how long it can remain undetected in the network. So, vigilant spammers have a higher success rate."
    }, {
      "heading" : "4.3 Fraudulence",
      "text" : "One of the primary reason to spam is to inject constant fraudulence information. So, we analyzed the fraudulence behavior of the two types of spammers. We labeled the tweets containing promotional, adult words or the blacklisted urls as fraud tweets. So, we compute fraudulence as:\n\uD835\uDC53\uD835\uDC5F\uD835\uDC62 = # of fraud tweets of \uD835\uDC62 total # of tweets of \uD835\uDC62\n(2)\nWe found that the average fraudulence of vigilant spammers is 0.34 compared to 0.86 of follow-flood spammers. So, the follow-flood spammers are more involved in spam."
    }, {
      "heading" : "4.4 Mentioning Celebrities and Popular Hashtags",
      "text" : "Mentioning the popular celebrities or hashtags empowers a tweet. So, one of the common strategies of spammers is to include the popular ones in their tweets. We studied mentioning phenomenon and found that vigilant spammers mention half the celebrities per tweets compared to the follow-flood spammers."
    }, {
      "heading" : "5 Learning Latent Features for Spam Detection",
      "text" : "Having characterized the dynamics of spamming in Twitter, can we improve spam detection beyond the existing state-of-the-art approaches? To answer this we used our Twitter data to setup a latent feature learning problem in networks. Our analysis is general and can be used to any social network."
    }, {
      "heading" : "5.1 Overview",
      "text" : "As discussed in the previous section, the dynamics of Twitter are interesting and can be leveraged to catch the spammers. So, we use the spam dynamics to formulate the latent feature learning in social networks. Let \uD835\uDC3A = (\uD835\uDC49 , \uD835\uDC38,\uD835\uDC4B) be a given network with vertices, edges and the social network data of users in the social network. We aim to learn a mapping function \uD835\uDC53 ∶ \uD835\uDC49 → ℝ\uD835\uDC51 from nodes to a d-dimensional feature representations which can be used for prediction. The parameter specifies the number of dimensions of the latent features such that the size of \uD835\uDC53 is |\uD835\uDC49 | × \uD835\uDC51.\nWe present a novel sampling strategy that samples nodes in network exploiting the spam dynamics such that the equivalent neighborhood \uD835\uDC38\uD835\uDC41(\uD835\uDC62) ⊂ \uD835\uDC49 contains the node having similar tweeting behaviors with the node \uD835\uDC62. We generate \uD835\uDC38\uD835\uDC41(\uD835\uDC62) for each nodes in the network and predict which nodes are the members of \uD835\uDC62’s equivalent neighbors based on the learnt latent features \uD835\uDC53 . The basic rationale is that we wish to learn latent feature representations for nodes that respect equivalent neighborhoods (which are based on the spamming dynamics) so that classification/ranking using the learned representation yields results that leverage the spamming dynamics."
    }, {
      "heading" : "5.2 The Optimization Problem",
      "text" : "As our goal is to learn the latent features \uD835\uDC53 that best describe the equivalent neighborhood \uD835\uDC38\uD835\uDC41(\uD835\uDC62) of node \uD835\uDC62, we define the optimization problem as follows:\n∑ \uD835\uDC59\uD835\uDC5C\uD835\uDC54 \uD835\uDC43 \uD835\uDC5F(\uD835\uDC38\uD835\uDC41(\uD835\uDC62)∣\uD835\uDC53(\uD835\uDC62)) \uD835\uDC62 ∈\uD835\uDC49 \uD835\uDC53 \uD835\uDC5A\uD835\uDC4E\uD835\uDC65 (3)\nTo solve the optimization problem, we extend the SkipGram architecture [5, 13, 15] which approximates the conditional probability using an independence assumption that the likelihood of observing an equivalent neighborhood node is independent of observing any other equivalent neighborhood given the latent features of the source node.\n\uD835\uDC43 \uD835\uDC5F(\uD835\uDC38\uD835\uDC41(\uD835\uDC62)∣\uD835\uDC53(\uD835\uDC62)) = ∏ Pr (\uD835\uDC63|\uD835\uDC53(\uD835\uDC62) \uD835\uDC63 ∈\uD835\uDC38\uD835\uDC41(\uD835\uDC62)\n(4)\nSince, the source node and the equivalent neighborhood node have symmetric equivalence, the conditional likelihood can be modeled as softmax unit parameterized by a dot product of their features.\n\uD835\uDC43\uD835\uDC5F(\uD835\uDC63∣\uD835\uDC53(\uD835\uDC62)) = \uD835\uDC52\uD835\uDC65\uD835\uDC5D( \uD835\uDC53(\uD835\uDC63). \uD835\uDC53(\uD835\uDC62)) ∑ \uD835\uDC52\uD835\uDC65\uD835\uDC5D (\uD835\uDC53(\uD835\uDC61). \uD835\uDC53(\uD835\uDC62))\uD835\uDC61∈\uD835\uDC49\n(5)\nThe optimization problem now becomes:\n∑ [−\uD835\uDC59\uD835\uDC5C\uD835\uDC54 \uD835\uDC4D\uD835\uDC62 + ∑ \uD835\uDC53(\uD835\uDC61). \uD835\uDC53(\uD835\uDC62) \uD835\uDC61 ∈\uD835\uDC38\uD835\uDC41(\uD835\uDC62) ] \uD835\uDC62 ∈\uD835\uDC49 \uD835\uDC53 \uD835\uDC5A\uD835\uDC4E\uD835\uDC65 (6)\nFor large networks, the partition function \uD835\uDC4D\uD835\uDC62 = ∑ exp (\uD835\uDC53(\uD835\uDC61). \uD835\uDC53(\uD835\uDC62))\uD835\uDC61∈\uD835\uDC49 is expensive to compute. So, we use negative sampling [12] to approximate it. We use stochastic gradient descent over the model parameters defining the features \uD835\uDC53 . Feature learning methods based on Skip-gram architecture are developed for natural language [11]. Since natural language texts are linear, the notion of a neighborhood can be naturally defined using a sliding window over consecutive words in sentences. Networks are not linear, and thus a richer notion of a neighborhood is needed. To mitigate this problem, we use multiple biased random walks each one in principle exploring a different neighborhood [5]."
    }, {
      "heading" : "5.3 Equivalent Neighborhood Generation",
      "text" : "The analyses of spam dynamics leads to an important inference that the nodes are similar if they have similar spam dynamics. So, we want to exploit those dynamics to generate the equivalent neighborhood \uD835\uDC38\uD835\uDC41(\uD835\uDC62) for the node \uD835\uDC62. Nodes in a network are equivalent if they share similar behaviors. We use the random walk procedure which can be biased to generate the equivalent neighborhood.\nWe bias the random walks based on the four dynamics: common time of activity (\uD835\uDC50\uD835\uDC61\uD835\uDC61\uD835\uDC63), success rate difference (\uD835\uDC60\uD835\uDC5F\uD835\uDC61\uD835\uDC63), fraudulence commonalities (\uD835\uDC53\uD835\uDC5F\uD835\uDC61\uD835\uDC63) and common mentioning in tweets (\uD835\uDC5A\uD835\uDC52\uD835\uDC61\uD835\uDC63). We calculate each dynamics as follows:\n\uD835\uDC50\uD835\uDC61\uD835\uDC61\uD835\uDC63 = # of days with common activity # of days either \uD835\uDC61 or \uD835\uDC63 is active\n(7)\n\uD835\uDC60\uD835\uDC5F\uD835\uDC61\uD835\uDC63 = 1 − ∣max (1, # of followers of \uD835\uDC61 # of followings of \uD835\uDC61 ) − max (1, # of followers of \uD835\uDC63 # of followings of \uD835\uDC63 )∣ (8)\n\uD835\uDC53\uD835\uDC5F\uD835\uDC61\uD835\uDC63 = 1 − ∣ # of fraud tweets of \uD835\uDC61 # of tweets of \uD835\uDC61 − # of fraud tweets of \uD835\uDC63 # of tweets of \uD835\uDC63 ∣ (9)\n\uD835\uDC5A\uD835\uDC52\uD835\uDC61\uD835\uDC63 = common mentions between \uD835\uDC61 and \uD835\uDC63\ntotal mentions of \uD835\uDC61 and \uD835\uDC63 (10)\nFor all the above four features, a higher value represents a closer connection between the pair of nodes. For a source node \uD835\uDC62, we generate a random walk of fixed length \uD835\uDC58. The \uD835\uDC56\uD835\uDC61ℎ node \uD835\uDC50\uD835\uDC56 of a random walk starting at node \uD835\uDC500 is generated with the distribution:\n\uD835\uDC43(c\uD835\uDC56 = \uD835\uDC61 | c\uD835\uDC56−1 = \uD835\uDC63) = {ℬ\uD835\uDC63\uD835\uDC61, \uD835\uDC56\uD835\uDC53(\uD835\uDC63, \uD835\uDC61) ∈ \uD835\uDC380, \uD835\uDC5C\uD835\uDC61ℎ\uD835\uDC52\uD835\uDC5F\uD835\uDC64\uD835\uDC56\uD835\uDC60\uD835\uDC52 (11)\nwhere ℬ\uD835\uDC63\uD835\uDC61 is the normalized transition probability between nodes \uD835\uDC63 and \uD835\uDC61. The transition probability are computed based on the spam dynamics so that the source node has equivalent spam dynamics with its neighborhood nodes.\nWe define four parameters which guide the random walk. Consider that a random walk just traversed edge (\uD835\uDC61, \uD835\uDC63) to now reside at node \uD835\uDC63. The walk now needs to decide on the next step so it evaluates the transition probabilities on edges (\uD835\uDC63, \uD835\uDC65) leading from \uD835\uDC63. We set the transition probability to ℬ\uD835\uDC63\uD835\uDC65 = \uD835\uDEFC\uD835\uDC5D\uD835\uDC5E\uD835\uDC5F\uD835\uDC60(\uD835\uDC61, \uD835\uDC63, \uD835\uDC65).\uD835\uDC64\uD835\uDC63\uD835\uDC65, where\n\uD835\uDEFC\uD835\uDC5D\uD835\uDC5E\uD835\uDC5F\uD835\uDC60(\uD835\uDC61, \uD835\uDC63, \uD835\uDC65) = \uD835\uDC5D. (\uD835\uDC50\uD835\uDC61\uD835\uDC61\uD835\uDC63 + \uD835\uDC50\uD835\uDC61\uD835\uDC63\uD835\uDC65) + \uD835\uDC5E. (\uD835\uDC60\uD835\uDC5F\uD835\uDC61\uD835\uDC63 + \uD835\uDC60\uD835\uDC5F\uD835\uDC63\uD835\uDC65) + \uD835\uDC5F. (\uD835\uDC53\uD835\uDC5F\uD835\uDC61\uD835\uDC63 + \uD835\uDC53\uD835\uDC5F\uD835\uDC63\uD835\uDC65) + \uD835\uDC60. (\uD835\uDC5A\uD835\uDC52\uD835\uDC61\uD835\uDC63 + \uD835\uDC5A\uD835\uDC52\uD835\uDC63\uD835\uDC65) (12)\nwhere the parameters \uD835\uDC5D, \uD835\uDC5E, \uD835\uDC5F , \uD835\uDC60 are used to prioritize the tweet dynamics. To select the next node, the random walk is biased towards the nodes which have similar tweet dynamics to both the current node and the previous node in the random walk."
    }, {
      "heading" : "5.4 Algorithm: ENWalk",
      "text" : "Algorithm 1 details our entire scheme. We start with \uD835\uDF06 fixed length random walks at each node \uD835\uDC59 times. To obtain each walk, we use GetEquivalentNeighbor, the random sampler that samples the node based on the transition probabilities computed in equation 12. It is worth noting that the tweet dynamics between the nodes (\uD835\uDC36\uD835\uDC47 ,\uD835\uDC46\uD835\uDC45, \uD835\uDC39\uD835\uDC45, \uD835\uDC40\uD835\uDC38) defined in equation 7, 8, 9, 10 respectively can be pre-computed. Once, we have random walks we can obtain \uD835\uDC51 dimensional numeric features using the optimization function in equation 6 with a window size of \uD835\uDC58. The three phases preprocessing, random sampling and optimization are asynchronous so that ENWalk is scalable."
    }, {
      "heading" : "6 Experiment",
      "text" : "We applied ENWalk to twitter dataset to evaluate its effectiveness. In this section, we discuss the baseline methods and compare with ENWalk for classification and ranking."
    }, {
      "heading" : "6.1 Baseline Methods",
      "text" : "For classification, we compare our model with two graph embedding methods: Deepwalk and node2vec. We use PageRank and Markov Random Field (MRF) approaches\nAlgorithm 1: ENWalk \uD835\uDC3A, \uD835\uDC51, \uD835\uDF06, \uD835\uDC59, \uD835\uDC58, [\uD835\uDC5D, \uD835\uDC5E, \uD835\uDC5F, \uD835\uDC60] Input: graph \uD835\uDC3A(\uD835\uDC49 , \uD835\uDC38,\uD835\uDC4A,\uD835\uDC4B) embedding dimensions \uD835\uDC85 walks per node \uD835\uDF06 walk length \uD835\uDC59 context size \uD835\uDC58 tweet parameters \uD835\uDC91, \uD835\uDC92, \uD835\uDC93, \uD835\uDC94 Output: matrix of latent features \uD835\uDC6D\n1. ( , , , ) = Preprocess \uD835\uDC6E,\uD835\uDC91, \uD835\uDC92, \uD835\uDC93, \uD835\uDC94) 2. Initialize \uD835\uDC98\uD835\uDC82\uD835\uDC8D\uD835\uDC8C\uD835\uDC94 to empty 3. for \uD835\uDC56 = \uD835\uDFCF to \uD835\uDF40 do 4. for each \uD835\uDC63\uD835\uDC56 \uD835\uDF3A \uD835\uDC7D do 5. Initialize \uD835\uDC98\uD835\uDC82\uD835\uDC8D\uD835\uDC8C to \uD835\uDC63\uD835\uDC56 6. for \uD835\uDC57 = \uD835\uDFCF to \uD835\uDC8D do 7. \uD835\uDC99 = GetEquivalentNeighbor(\uD835\uDC3A,\uD835\uDC36\uD835\uDC47 , \uD835\uDC46\uD835\uDC45,\uD835\uDC39\uD835\uDC45, \uD835\uDC40\uD835\uDC38, \uD835\uDC64\uD835\uDC4E\uD835\uDC59\uD835\uDC58[\uD835\uDC57], \uD835\uDC4A ) 8. Append \uD835\uDC99 to \uD835\uDC98\uD835\uDC82\uD835\uDC8D\uD835\uDC8C 9. Append \uD835\uDC98\uD835\uDC82\uD835\uDC8D\uD835\uDC8C to \uD835\uDC98\uD835\uDC82\uD835\uDC8D\uD835\uDC8C\uD835\uDC94 10. \uD835\uDC6D = StochasticGradientDescent \uD835\uDC8C , \uD835\uDC85 , \uD835\uDC98\uD835\uDC82\uD835\uDC8D\uD835\uDC8C\uD835\uDC94\nnodes in the network. It extends the language model of random walks employing a flexible notion of neighborhood. It designs a biased random walk using BFS and DFS neighborhood discovery. PageRank Models. PageRank is a popular ranking algorithm that exploits the linkbased structure of a network graph to rank the nodes of the graph.\n\uD835\uDC43\uD835\uDC45 = (1 − α) ∗ \uD835\uDC40 ∗ \uD835\uDC43\uD835\uDC45 + α ∗ \uD835\uDC5D (13)\nwhere \uD835\uDC40 is transition probability matrix, \uD835\uDC5D represents the prior probability with which a random surfer surfs to a random page and \uD835\uDEFC is damping factor. For variations of PageRank, we vary the values of \uD835\uDC40 and \uD835\uDC5D using trustworthiness of a user. Trustworthiness (\uD835\uDC53\uD835\uDC47\uD835\uDC5F\uD835\uDC62\uD835\uDC60\uD835\uDC61) is using a set of features (# of Blacklist URL, # of tweets, # of mentions, # of duplicate tweets, # of tweets containing adult/bad words, # of tweets containing violent words, # of tweets containing promotional words and the total time of activity for the user). We manually labeled \uD835\uDC53\uD835\uDC47\uD835\uDC5F\uD835\uDC62\uD835\uDC60\uD835\uDC61score of 800 users (400 non-suspended and 400 suspended). We gave a real-valued trustworthiness score between 0 and 1. A value closer to 0 means the user is most likely a spammer. We then obtain the weight of the features by learning linear regression model on the users.  Traditional PageRank We use the default PageRank settings for \uD835\uDC40and \uD835\uDC5D.  Trust Induced and Trust Prior: Transition matrix \uD835\uDC40 is modified as \uD835\uDC40\uD835\uDC62\uD835\uDC63 = M\uD835\uDC62\uD835\uDC63 ∗\n\uD835\uDC53\uD835\uDC47\uD835\uDC5F\uD835\uDC62\uD835\uDC60\uD835\uDC61(\uD835\uDC63), ∀\uD835\uDC62, ∀\uD835\uDC63 and \uD835\uDC53\uD835\uDC47\uD835\uDC5F\uD835\uDC62\uD835\uDC60\uD835\uDC61(\uD835\uDC63) is used as prior probability. Markov Random Field Models. Markov Random Fields are undirected graphs (and can be cyclic) that satisfy the three conditional independence properties (Pairwise, Local, and Global). For the inference, we use the Loopy Belief Propagation algorithm. Inspired by spam detection in [2], we define 3 hidden states {Spammer, Mixed, NonSpammer} and the Propagation Matrix is used as in Table 1. Logically, spammers follow other spammers more (hence 0.8 probability) and non-spammers tend to follow other non- spammers. We also include the mixed state to include those users who are difficult to categorize spammers or non-spammers."
    }, {
      "heading" : "6.2 Node Classification",
      "text" : "We obtained the feature representations from three different algorithms: ENWalk, node2vec and DeepWalk using the settings used in node2vec and DeepWalk. All the feature learnings are unsupervised. Similar to node2vec and DeepWalk, we used \uD835\uDC51 = 128, \uD835\uDF06 = 10, \uD835\uDC59 = 80, \uD835\uDC58 = 10. We found that the parameters \uD835\uDC51, \uD835\uDF06, \uD835\uDC59, \uD835\uDC58 are sensitive in a similar style to node2vec and DeepWalk. We used each feature representation as an example for standard SVM classifier. We used 10-fold cross-validation using balanced\nS M N S 0.80 0.40 0.025 M 0.15 0.50 0.125 N 0.05 0.10 0.850\nis effective to screen the nodes that are probable being spammers. To evaluate the ranking performance of ENWalk, we use Logistic Regression on the features obtained from the model. We compare our model with PageRank and Markov Random Field models. We present the CDF in Fig 2. We can see that ENWalk outperforms all the baseline models. We also computed the AUC and precision@100 (Table 3). A higher AUC and precision@100 signifies the ability to profile the top spammers."
    }, {
      "heading" : "7 Conclusion",
      "text" : "We studied the problem of identifying spammers in Twitter who are involved in malicious attacks. This is very much important as it has many practical applications in today’s world where almost everyone is actively social online. This paper proposed a method of spam detection in Twitter that makes use of the online network structure and information shared. This data driven approach is important as there is a lot of data of social medias online these days. We demonstrated the helpfulness of biased random walks in learning node embedding that can be used for classification and ranking tasks. Acknowledgements: This work is supported in part by NSF 1527364. We also thank anonymous reviewers for their helpful feedbacks.\nFigure 2. Cumulative Distribution Function of Suspended Nodes\nTable 3. Ranking Results: Area Under CDF Curve (AUC) and Precision@100(P@100)\nModel AUC P@100 PR-T 0.4059 0.02 PR-TITP 0.4181 0.03 MRF 0.4944 0.02 DeepWalk 0.5502 0.05 node2vec 0.5836 0.05 ENWalk 0.6335 0.12"
    }, {
      "heading" : "8 References",
      "text" : "[1] Benevenuto, F., Magno, G., Rodrigues, T. and Almeida, V. 2010. Detecting spammers on\ntwitter. Collaboration, electronic messaging, anti-abuse and spam conference (CEAS). 6, (2010), 12. [2] Fei, G., Mukherjee, A., Liu, B., Hsu, M., Castellanos, M. and Ghosh, R. 2013. Exploiting\nBurstiness in Reviews for Review Spammer Detection. Proceedings of the Seventh International Conference on Weblogs and Social Media, {ICWSM} 2013, Cambridge, Massachusetts, USA, July 8-11, 2013. (2013). [3] Gao, H., Hu, J., Wilson, C., Li, Z., Chen, Y. and Zhao, B.Y. 2010. Detecting and characterizing social spam campaigns. Proceedings of the 10th ACM SIGCOMM conference on Internet measurement. (2010), 35–47. [4] Ghosh, S., Viswanath, B., Kooti, F., Sharma, N.K., Korlam, G., Benevenuto, F., Ganguly, N. and Gummadi, K.P. 2012. Understanding and combating link farming in the twitter social network. Proceedings of the 21st …. (2012), 61–70. [5] Grover, A. and Leskovec, J. 2016. node2vec: Scalable feature learning for networks. Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (2016), 855–864. [6] Hu, X., Tang, J., Zhang, Y. and Liu, H. 2013. Social Spammer Detection in Microblogging. IJCAI (2013), 2633–2639. [7] K C, S. and Mukherjee, A. 2016. On the Temporal Dynamics of Opinion Spamming: Case Studies on Yelp. 25th International World Wide Web Conference, {WWW} ’16, Montréal, Québec, Canada, April 11-15, 2016 (2016). [8] Kwak, H., Lee, C., Park, H. and Moon, S. 2010. What is Twitter , a Social Network or a News Media? The International World Wide Web Conference Committee (IW3C2). (2010), 1–10. [9] Lee, K., Caverlee, J. and Webb, S. 2010. Uncovering social spammers: social honeypots+ machine learning. Proceedings of the 33rd international ACM SIGIR conference on Research and development in information retrieval (2010), 435–442. [10] Li, H., Mukherjee, A., Liu, B., Kornfield, R. and Emery, S. 2014. Detecting Campaign Promoters on Twitter Using Markov Random Fields. 2014 {IEEE} International Conference on Data Mining, {ICDM} 2014, Shenzhen, China, December 14-17, 2014 (2014), 290–299. [11] Mikolov, T., Chen, K., Corrado, G. and Dean, J. 2013. Distributed Representations of Words and Phrases and their Compositionality. Nips. (2013), 1–9. [12] Mikolov, T., Corrado, G., Chen, K. and Dean, J. 2013. Efficient Estimation of Word Representations in Vector Space. Proceedings of the International Conference on Learning Representations (ICLR 2013). (2013), 1–12. [13] Perozzi, B., Al-Rfou, R. and Skiena, S. 2014. Deepwalk: Online learning of social representations. Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining (2014), 701–710. [14] Stringhini, G., Kruegel, C. and Vigna, G. 2010. Detecting spammers on social networks. Proceedings of the 26th annual computer security applications conference (2010), 1–9. [15] Tang, J., Qu, M., Wang, M., Zhang, M., Yan, J. and Mei, Q. 2015. Line: Large-scale information network embedding. Proceedings of the 24th International Conference on World Wide Web (2015), 1067–1077. [16] Thomas, K., Grier, C., Song, D. and Paxson, V. 2011. Suspended accounts in retrospect: an analysis of twitter spam. Proceedings of the 2011 ACM …. (2011), 243–258. [17] Weng, J., Lim, E.P., Jiang, J. and He, Q. 2010. Twitterrank: Finding topic-sensitive influential twitterers. Proceedings of the 3rd ACM International Conference on Web Search and Data Mining (WSDM 2010). (2010), 261–270. [18] Yang, J. and Leskovec, J. 2011. Patterns of temporal variation in online media. WSDM (2011), 177. [19] Zhang, X., Zhu, S. and Liang, W. 2012. Detecting spam and promoting campaigns in the\nTwitter social network. Proceedings - IEEE International Conference on Data Mining, ICDM (2012), 1194–1199."
    } ],
    "references" : [ {
      "title" : "Detecting spammers on twitter. Collaboration, electronic messaging, anti-abuse and spam conference (CEAS)",
      "author" : [ "F. Benevenuto", "G. Magno", "T. Rodrigues", "V. Almeida" ],
      "venue" : null,
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2010
    }, {
      "title" : "Exploiting Burstiness in Reviews for Review Spammer Detection",
      "author" : [ "G. Fei", "A. Mukherjee", "B. Liu", "M. Hsu", "M. Castellanos", "R. Ghosh" ],
      "venue" : "Proceedings of the Seventh International Conference on Weblogs and Social Media,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2013
    }, {
      "title" : "Detecting and characterizing social spam campaigns",
      "author" : [ "H. Gao", "J. Hu", "C. Wilson", "Z. Li", "Y. Chen", "B.Y. Zhao" ],
      "venue" : "Proceedings of the 10th ACM SIGCOMM conference on Internet measurement",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2010
    }, {
      "title" : "Understanding and combating link farming in the twitter social network",
      "author" : [ "S. Ghosh", "B. Viswanath", "F. Kooti", "N.K. Sharma", "G. Korlam", "F. Benevenuto", "N. Ganguly", "K.P. Gummadi" ],
      "venue" : "Proceedings of the 21st ...",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2012
    }, {
      "title" : "node2vec: Scalable feature learning for networks",
      "author" : [ "A. Grover", "J. Leskovec" ],
      "venue" : "Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2016
    }, {
      "title" : "Social Spammer Detection in Microblogging",
      "author" : [ "X. Hu", "J. Tang", "Y. Zhang", "H. Liu" ],
      "venue" : "IJCAI",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2013
    }, {
      "title" : "On the Temporal Dynamics of Opinion Spamming: Case Studies on Yelp",
      "author" : [ "S. K C", "A. Mukherjee" ],
      "venue" : "25th International World Wide Web Conference,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2016
    }, {
      "title" : "What is Twitter , a Social Network or a News Media",
      "author" : [ "H. Kwak", "C. Lee", "H. Park", "S. Moon" ],
      "venue" : "The International World Wide Web Conference Committee",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2010
    }, {
      "title" : "Uncovering social spammers: social honeypots+ machine learning",
      "author" : [ "K. Lee", "J. Caverlee", "S. Webb" ],
      "venue" : "Proceedings of the 33rd international ACM SIGIR conference on Research and development in information retrieval",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2010
    }, {
      "title" : "Detecting Campaign Promoters on Twitter",
      "author" : [ "H. Li", "A. Mukherjee", "B. Liu", "R. Kornfield", "S. Emery" ],
      "venue" : "Using Markov Random Fields. 2014 {IEEE} International Conference on Data Mining,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2014
    }, {
      "title" : "Distributed Representations of Words and Phrases and their Compositionality. Nips",
      "author" : [ "T. Mikolov", "K. Chen", "G. Corrado", "J. Dean" ],
      "venue" : null,
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2013
    }, {
      "title" : "Efficient Estimation of Word Representations in Vector Space",
      "author" : [ "T. Mikolov", "G. Corrado", "K. Chen", "J. Dean" ],
      "venue" : "Proceedings of the International Conference on Learning Representations (ICLR",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2013
    }, {
      "title" : "Deepwalk: Online learning of social representations",
      "author" : [ "B. Perozzi", "R. Al-Rfou", "S. Skiena" ],
      "venue" : "Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2014
    }, {
      "title" : "Detecting spammers on social networks. Proceedings of the 26th annual computer security applications conference",
      "author" : [ "G. Stringhini", "C. Kruegel", "G. Vigna" ],
      "venue" : null,
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2010
    }, {
      "title" : "Line: Large-scale information network embedding",
      "author" : [ "J. Tang", "M. Qu", "M. Wang", "M. Zhang", "J. Yan", "Q. Mei" ],
      "venue" : "Proceedings of the 24th International Conference on World Wide Web",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2015
    }, {
      "title" : "Suspended accounts in retrospect: an analysis of twitter spam",
      "author" : [ "K. Thomas", "C. Grier", "D. Song", "V. Paxson" ],
      "venue" : "Proceedings of the 2011 ACM ...",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2011
    }, {
      "title" : "Twitterrank: Finding topic-sensitive influential twitterers",
      "author" : [ "J. Weng", "E.P. Lim", "J. Jiang", "Q. He" ],
      "venue" : "Proceedings of the 3rd ACM International Conference on Web Search and Data Mining (WSDM",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2010
    }, {
      "title" : "Patterns of temporal variation in online media",
      "author" : [ "J. Yang", "J. Leskovec" ],
      "venue" : null,
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2011
    }, {
      "title" : "Detecting spam and promoting campaigns in the Twitter social network",
      "author" : [ "X. Zhang", "S. Zhu", "W. Liang" ],
      "venue" : "Proceedings - IEEE International Conference on Data Mining,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2012
    } ],
    "referenceMentions" : [ {
      "referenceID" : 5,
      "context" : "Moreover, they follow reflexive reciprocity [6, 17] (users following back when they are followed by someone to show courtesy) to establish social influence and act normal.",
      "startOffset" : 44,
      "endOffset" : 51
    }, {
      "referenceID" : 16,
      "context" : "Moreover, they follow reflexive reciprocity [6, 17] (users following back when they are followed by someone to show courtesy) to establish social influence and act normal.",
      "startOffset" : 44,
      "endOffset" : 51
    }, {
      "referenceID" : 6,
      "context" : "There have been several works on spam detection in general, especially review spam [7], and opinion spam.",
      "startOffset" : 83,
      "endOffset" : 86
    }, {
      "referenceID" : 0,
      "context" : "[1].",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 8,
      "context" : "leveraged profile-based features and deployed social honeypots to detect new social spammers [9].",
      "startOffset" : 93,
      "endOffset" : 96
    }, {
      "referenceID" : 13,
      "context" : "also studied spam detection using honey profiles [14].",
      "startOffset" : 49,
      "endOffset" : 53
    }, {
      "referenceID" : 3,
      "context" : "studied the problem of link farming in Twitter [4] and introduced a ranking methodology to penalize the link farmers.",
      "startOffset" : 47,
      "endOffset" : 50
    }, {
      "referenceID" : 15,
      "context" : "Abuse of online social networks was studied in [16].",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 2,
      "context" : "Campaign spams was studied on [3, 10, 19].",
      "startOffset" : 30,
      "endOffset" : 41
    }, {
      "referenceID" : 9,
      "context" : "Campaign spams was studied on [3, 10, 19].",
      "startOffset" : 30,
      "endOffset" : 41
    }, {
      "referenceID" : 18,
      "context" : "Campaign spams was studied on [3, 10, 19].",
      "startOffset" : 30,
      "endOffset" : 41
    }, {
      "referenceID" : 11,
      "context" : "Skip-gram model [12] has been popular to learn the features from a large corpus of data.",
      "startOffset" : 16,
      "endOffset" : 20
    }, {
      "referenceID" : 12,
      "context" : "DeepWalk [13] learns d-dimensional feature representations by simulating uniform random walks.",
      "startOffset" : 9,
      "endOffset" : 13
    }, {
      "referenceID" : 14,
      "context" : "LINE [15] learns the d-dimensional features into two phases: d/2 BFS-style simulations and another d/2 2-hop distant nodes.",
      "startOffset" : 5,
      "endOffset" : 9
    }, {
      "referenceID" : 4,
      "context" : "Node2vec [5] creates the ordered sequence simulating the BFS and DFS approaches.",
      "startOffset" : 9,
      "endOffset" : 12
    }, {
      "referenceID" : 17,
      "context" : "For this work, we use the Twitter dataset used in [18].",
      "startOffset" : 50,
      "endOffset" : 54
    }, {
      "referenceID" : 7,
      "context" : "To extract the network graph for those 17 million users, we extracted the follower-following topology of Twitter from [8] which contains all the entire twitter user profiles and their social relationships till July 2009.",
      "startOffset" : 118,
      "endOffset" : 121
    }, {
      "referenceID" : 7,
      "context" : "We pruned the users so that they have social relationship in [8] and tweets in [18] and are left with 4,405,698 users.",
      "startOffset" : 61,
      "endOffset" : 64
    }, {
      "referenceID" : 17,
      "context" : "We pruned the users so that they have social relationship in [8] and tweets in [18] and are left with 4,405,698 users.",
      "startOffset" : 79,
      "endOffset" : 83
    }, {
      "referenceID" : 4,
      "context" : "To solve the optimization problem, we extend the SkipGram architecture [5, 13, 15] which approximates the conditional probability using an independence assumption that the likelihood of observing an equivalent neighborhood node is independent of observing any other equivalent neighborhood given the latent features of the source node.",
      "startOffset" : 71,
      "endOffset" : 82
    }, {
      "referenceID" : 12,
      "context" : "To solve the optimization problem, we extend the SkipGram architecture [5, 13, 15] which approximates the conditional probability using an independence assumption that the likelihood of observing an equivalent neighborhood node is independent of observing any other equivalent neighborhood given the latent features of the source node.",
      "startOffset" : 71,
      "endOffset" : 82
    }, {
      "referenceID" : 14,
      "context" : "To solve the optimization problem, we extend the SkipGram architecture [5, 13, 15] which approximates the conditional probability using an independence assumption that the likelihood of observing an equivalent neighborhood node is independent of observing any other equivalent neighborhood given the latent features of the source node.",
      "startOffset" : 71,
      "endOffset" : 82
    }, {
      "referenceID" : 11,
      "context" : "So, we use negative sampling [12] to approximate it.",
      "startOffset" : 29,
      "endOffset" : 33
    }, {
      "referenceID" : 10,
      "context" : "Feature learning methods based on Skip-gram architecture are developed for natural language [11].",
      "startOffset" : 92,
      "endOffset" : 96
    }, {
      "referenceID" : 4,
      "context" : "To mitigate this problem, we use multiple biased random walks each one in principle exploring a different neighborhood [5].",
      "startOffset" : 119,
      "endOffset" : 122
    }, {
      "referenceID" : 0,
      "context" : "We did not use feature extraction techniques like [1] as they only use the node features without using the graph structure.",
      "startOffset" : 50,
      "endOffset" : 53
    }, {
      "referenceID" : 12,
      "context" : "Deepwalk [13].",
      "startOffset" : 9,
      "endOffset" : 13
    }, {
      "referenceID" : 12,
      "context" : "Node2vec [13].",
      "startOffset" : 9,
      "endOffset" : 13
    }, {
      "referenceID" : 1,
      "context" : "Inspired by spam detection in [2], we define 3 hidden states {Spammer, Mixed, NonSpammer} and the Propagation Matrix is used as in Table 1.",
      "startOffset" : 30,
      "endOffset" : 33
    } ],
    "year" : 2017,
    "abstractText" : null,
    "creator" : "PScript5.dll Version 5.2.2"
  }
}