{
  "name" : "1602.07393.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Domain Specific Author Attribution Based on Feedforward Neural Network Language Models",
    "authors" : [ "Zhenhao Ge", "Yufang Sun" ],
    "emails" : [ "zhenhao.ge@gmail.com,", "sun361@purdue.edu" ],
    "sections" : [ {
      "heading" : "1 INTRODUCTION",
      "text" : "Authorship attribution refers to the task of identifying the text author from a given text sample, by finding the author’s unique textual features. It is possible to do this because the author’s profile or style embodies many characteristics, including personality, cultural and educational background, language origin, life experience and knowledge basis, etc. Every person has his/her own style, and sometimes the author’s identity can be easily recognized. However, most often identifying the author is challenging, because author’s style can vary significantly by topics, mood, environment and experience. Seeking consistency or consistent evolution out of variation is not always an easy task.\nThere has been much research in this area. Juola (Juola, 2006) and Stamatatos (Stamatatos, 2009) for example, have surveyed the state of the art and proposed a set of recommendations to move forward. As more text data become available from the Web and computational linguistic models using statistical methods mature, more opportunities and challenges arise in this area (Koppel et al., 2009). Many statistical models have been successfully applied in this area, such as Latent Dirichlet Allocation (LDA) for topic\nmodeling and dimension reduction (Seroussi et al., 2011), Naive Bayes for text classification (CoyotlMorales et al., 2006), Multiple Discriminant Analysis (MDA) and Support Vector Machines (SVM) for feature selection and classification (Ebrahimpour et al., 2013). Methods based on language modeling are also among the most popular methods for authorship attribution (Kešelj et al., 2003).\nNeural networks with deep learning have been successfully applied in many applications, such as speech recognition (Hinton et al., 2012), object detection (Krizhevsky et al., 2012), natural language processing (Socher et al., 2011), and other pattern recognition and classification tasks (Bishop, 1995), (Ge and Sun, 2015). Neural Network based Language Models (NNLM) have surpassed the performance of traditional N-gram LMs (Bengio et al., 2003), (Mnih and Hinton, 2007) and are purported to generalize better in smaller datasets (Mnih, 2010). In this paper, we propose a similar NNLM setup for authorship attribution. The performance of the proposed method depends highly on the settings of the experiment, in particular the experimental design, author set size and data size (Luyckx, 2011). In this work, we focused on small datasets within one specific text domain, where the sizes of the training and test datasets for ar X iv :1\n60 2.\n07 39\n3v 1\n[ cs\n.C L\n] 2\n4 Fe\nb 20\n16\neach author are limited. This often leads to contextbiased models, where the accuracy of author detection is highly dependent on the degree to which the topics in training and test sets match each other (Luyckx and Daelemans, 2008). The experiments we conceive are based on a closed dataset, i.e. each test author also appears in the training set, so the task is simplified to author classification rather than detection.\nThe paper is organized as follows. Sec. 2 introduces the database used for this project. Sec. 3 explains the methodology of the NNLM, including cost function definition, forward-backward propagation, and weight and bias updates. Sec. 4 describes the implementation of the NNLM, provides the classification metrics, and compares results with conventional baseline N-gram models. Finally, Sec. 5 presents the conclusion and suggests future work."
    }, {
      "heading" : "2 DATA PREPARATION",
      "text" : "The database is a selection of course transcripts from Coursera, one of the largest Massive Open Online Course (MOOC) platforms. To ensure the author detection less replying on the domain information, 16 courses were selected from one specific text domain of the technical science and engineering fields, covering 8 areas: Algorithm, Data Mining, Information Technologies (IT), Machine Learning, Mathematics, Natural Language Processing (NLP), Programming and Digital Signal Processing (DSP). Table 1 lists more details for each course in the database, such as the number of sentences and words, the number of words per sentence, and vocabulary sizes in multiple stages. For privacy reason, the exact course titles and instructor (author) names are concealed. However, for the purpose of detecting the authors, it is necessary to point out that all courses are taught by different instructors, except for the courses with IDs 7 and 16. This was done intentionally to allow us to investigate how the topic variation affects performance.\nThe transcripts for each course were originally collected in short phrases with various lengths, shown one at a time at the bottom of the video lectures. They were first concatenated and then segmented into sentences, using straight-forward boundary determination by punctuations. The sentence-wise datasets are then stemmed using the Porter Stemming algorithm (Porter, 1980). To further control the vocabulary size, words occurring only once in the entire course or with frequency less than 1/100,000 are considered to have negligible influence on the outcome and are pruned by mapping them to an Out-Of-Vocabulary (OOV) mark 〈unk〉. The first top bar graph in Fig-\nTable 1: Subtitle database from selected Coursera courses\nID Field No. of No. of Words / Vocab. size (original sentences words sentences / stemmed / pruned)\n1 Algorithm 5,672 121,675 21.45 3,972 / 2,702 / 1,809 2 Algorithm 14,902 294055 20.87 6,431 / 4,222 / 2,378"
    }, {
      "heading" : "3 DSP 8,126 129,665 15.96 3,815 / 2,699 / 1,869",
      "text" : "4 Data Mining 7,392 129,552 17.53 4,531 / 3,140 / 2,141 5 Data Mining 6,906 129,068 18.69 3,008 / 2,041 / 1,475"
    }, {
      "heading" : "6 DSP 20,271 360,508 17.78 8,878 / 5,820 / 2,687",
      "text" : ""
    }, {
      "heading" : "7 IT 9,103 164,812 18.11 4,369 / 2,749 / 1,979",
      "text" : "8 Mathematics 5,736 101,012 17.61 3,095 / 2,148 / 1,500 9 Machine Learning 11,090 224,504 20.24 6,293 / 4,071 / 2,259 10 Programming 8,185 160,390 19.60 4,045 / 2,771 / 1,898"
    }, {
      "heading" : "11 NLP 7,095 111,154 15.67 3,691 / 2,572 / 1,789",
      "text" : ""
    }, {
      "heading" : "12 NLP 4,395 100,408 22.85 3,973 / 2,605 / 1,789",
      "text" : ""
    }, {
      "heading" : "13 NLP 4,382 96,948 22.12 4,730 / 3,467 / 2,071",
      "text" : "14 Machine Learning 6,174 116,344 18.84 5,844 / 4,127 / 2,686 15 Mathematics 5,895 152,100 25.80 3,933 / 2,697 / 1,918 16 Programming 6,400 136,549 21.34 4,997 / 3,322 / 2,243\nure 1 shows how the vocabulary size of each course dataset shrinks after stemming and pruning. There are only 0.5 ∼ 1.5% words among all datasets mapped to 〈unk〉, however, the vocabulary sizes are significantly reduced to an average of 2000. The bottom bar graph provides a profile of each instructor in terms of word frequency, i.e. the database coverage of the most frequent k words after stemming and pruning, where k = 500,1000,2000. For example, the most frequent 500 words cover at least 85% of the words in all datasets."
    }, {
      "heading" : "3 NEURAL NETWORK LANGUAGE MODEL",
      "text" : "The language model is trained using a feed-forward neural network illustrated in Figure 2. Given a sequence of N words W1,W2, . . . ,Wi, . . . ,WN from training text, the network trains weights to predict the word Wt , t ∈ [1,N] in a designated target word position in sequence, using the information provided from the rest of words, as it is formulated in Eq. (1).\nW ∗ = argmax t P(Wt |W1W2 · · ·Wi · · ·WN), i 6= t (1)\nIt is similar to the classic N-gram language model, where the primary task is to predict the next word given N− 1 previous words. However, here the network can be trained to predict the target word in any position, given the neighboring words.\nThe network contains 4 different types of layers: the word layer, the embedding layer, the hidden layer, and the output (softmax) layer. The weights between adjacent layers, i.e. word-to-embedding weights Wword−emb, embedding-to-hidden weights Wemb−hid, and hidden-to-output weights Whid−out, need to be trained in order to transform the input words to the predicted output word. The following 3 sub-sections briefly introduce the NNLM training procedure, first defining the cost function to be minimized, then describing the forward and backward weight and bias propagation. The implementation details regarding parameter settings and tuning are discussed in Sec. 4."
    }, {
      "heading" : "3.1 Cost Function",
      "text" : "Given vocabulary size V , it is a multinomial classification problem to predict a single word out of V op-\ntions. So the cost function to be minimized can be formulated as\nC =−∑ V t j logy j. (2)\nC is the cross-entropy, and y j, where j ∈ V and ∑ j∈V y j = 1, is the output of node j in the final output layer of the network, i.e. the probability of selecting the jth word as the predicted word. The parameter t j is the target label and t j ∈ {0,1}. As a 1-of-V multiclass classification problem, there is only one target value 1, and the rest are 0s."
    }, {
      "heading" : "3.2 Forward Propagation",
      "text" : "Forward propagation is a process to compute the outputs y j of each layer L j with a) its neural function (i.e. sigmoid, linear, rectified, binary, etc.), and b) the inputs z j, computed using the outputs of the previous layer yi, weights Wi j from layer Li to layer L j, and bias b j of the current layer L j. After weight and bias initialization, the neural network training starts from forward propagating the word inputs to the outputs in the final layer.\nFor the word layer, given word context size N and target word position t, each of the N− 1 input words wi is represented by a binary index column vector xi with length equal to the vocabulary size V . It contains all 0s but only one 1 in a particular position to differentiate it from all other words. The word xi is transformed to its distributed representation in the socalled embedding layer via the equation\nzemb(i) =W Tword−emb · xi, (3)\nwhere Wword−emb is the word-to-embedding weights with size [V ×Nemb], which is used in the computation of zemb(i) for different words xi, and Nemb is the dimension of the embedding space. Because zemb(i) is one column in W Tword−emb, representing the word xi, this process is simply a table look up.\nFor the embedding layer, the output yemb is just the concatenation of the representation of the input words zemb(i),\nyemb = [zTemb(1),z T emb(2), · · · ,zTemb(i), · · · ,zTemb(N)]T ,\n(4) where i∈V , i 6= t, and t is the index for the target word wt . So yemb is a column vector with length Nemb× (N−1).\nFor the hidden layer, the input zhid is firstly computed with weights Wemb−hid, embedding output yemb, and hidden bias bhid using\nzhid =W Temb−hid · yemb +bhid, (5)\nThen, the logistic function, which is a type of Sigmoid function, is used to compute the output yhid from zhid:\nyhid = 1\n1+ e−zhid . (6)\nFor the output layer, the input zout is given by\nzout =W Thid−out · yhid +bout, (7)\nThis output layer is a Softmax layer which incorporates the constraint ∑V yout = 1 using the Softmax function\nyout = ezout\n∑V ezout . (8)"
    }, {
      "heading" : "3.3 Backward Propagation",
      "text" : "After forward propagating the input words xi to the final output yout of the network, through Eq. (3) to Eq. (8), the next task is to backward propagate error derivatives from the output layer to the input, so that we know the directions and magnitudes to update weights between layers.\nIt starts from the derivative ∂C∂zout(i) of node i in the output layer, i.e.\n∂C ∂zout(i) = ∑ j∈V ∂C ∂yout( j) ∂yout( j) zout(i) = yout(i)− ti. (9)\nThe further derivation of Eq. (9) requires splitting ∂yout( j) zout(i)\ninto cases of i = j and i 6= j, i.e. ∂yout(i)∂zout(i) = yout(i)(1−yout(i)) vs. ∂yout(i)∂zout( j) =−yout(i)yout( j) and is omitted here. For simplicity of presentation, the following equations omit the indices i, j.\nTo back-propagate derivatives from the output layer to the hidden layer, we follow the order ∂C∂zout → ∂C∂Whid−out , ∂C ∂bout → ∂C ∂yhid\n→ ∂C∂Zhid . Since Zout = W Thid−out ·yhid, then ∂zout ∂whid−out = yhid and ∂zout∂yhid =whid−out. In addition, since Eq. (7), then ∂zout∂bout = 1. Thus,\n∂C ∂whid−out = ∂zout ∂whid−out · ∂C ∂zout = yhid ∂C ∂zout , (10)\n∂C ∂bout = ∂C ∂zout · ∂zout ∂bout = ∂C ∂zout , (11)\nand\n∂C ∂yhid = ∑ Nout ∂zout ∂yhid · ∂C ∂zout = ∑ Nout whid−out ∂C ∂zout . (12)\nAlso, ∂C\n∂zhid = ∂C ∂yhid · dyhid dzhid , (13)\nwhere dyhiddzhid = yhid(1− yhid), derived using Eq. (6).\nTo back propagate derivatives from the hidden layer to the embedding layer, the derivations of\n∂C ∂wemb−hid , ∂C∂bhid and ∂C ∂yemb are very similar to Eq. (10) through Eq. (12), so that\n∂C ∂wemb−hid = ∂zhid ∂wemb−hid · ∂C ∂zhid = yemb ∂C ∂zhid , (14)\n∂C ∂bhid = ∂C ∂zhid · ∂zhid ∂bhid = ∂C ∂zhid , (15)\nand ∂C\n∂yemb = ∑\nNhid\n∂zhid ∂yemb · ∂C ∂zhid = ∑ Nhid wemb−hid ∂C ∂zhid . (16)\nHowever, since the embedding layer is linear rather than sigmoid, then dyembdzemb = 1. Thus,\n∂C ∂zemb = ∂C ∂yemb · dyemb dzemb = ∂C ∂yemb . (17)\nIn the back propagation from the embedding layer to the word layer, since Wword−emb is shared among all words, to obtain ∂C∂Wword−emb ,\n∂C ∂zemb needs to be segmented into ∂C∂zemb(i) , such as [( ∂C∂zemb(1) )T · · ·( ∂C∂zemb(i) ) T · · · ∂C∂zemb(N) ) T ]T , where i ∈ N, i 6= t is the index for each input word. From Eq. (3), ∂zemb∂wword−emb = xi, and then\n∂C ∂wword−emb = ∑ i∈N,i 6=t xi · ∂C ∂zemb(i) . (18)"
    }, {
      "heading" : "3.4 Weight and Bias Update",
      "text" : "After each iteration of forward-backward propagation, the weights and biases are updated to reduce cost. Denote W as a general form of the weight matrices Wword−emb, Wemb−hid and Whid−out, and ∆ as an averaged version of the weight gradient, which carries information from previous iterations and is initialized with zeros, the weights are updated with:{\n∆i+1 = α∆i + ∂C∂Wi Wi+1 =Wi− ε∆i+1\n(19)\nwhere α is the momentum which determines the percentage of weight gradients carried from the previous iteration, and ε is the learning rate which determine the step size to update weights towards the direction of descent. The biases are updated similarly by just replacing W with b in Eq. (19)."
    }, {
      "heading" : "3.5 Summary of NNLM",
      "text" : "In the NNLM training, the whole training dataset is segmented into mini-batches with batch size M. The\nneural network in terms of weights and biases gets updated through each iteration of mini-batch training. The gradient ∂C∂Wi in Eq. (19) should be normalized by M. One cycle of feeding all data is called an epoch, and given appropriate training parameters such as learning rate ε and momentum α, it normally requires 10 to 20 epochs to get a well-trained network.\nNext we present a procedure for training the NNLM. It includes all the key components described before, has the flexibility to change the training parameters through different epochs, and includes an early termination criterion. 1. Set up general parameters such as the mini-batch\nsize M, the number of epochs and model parameters such as the word context size N, the target word position t, the number of nodes in each layer, etc.;\n2. Split the training data into mini-batches; 3. Initialize networks, such as weights and biases; 4. For each epoch:\na. Set up parameters for current epoch, such as the learning rate ε, the momentum α, etc.;\nb. For each iteration of mini-batch training: i. Compute weight and bias gradients\nthrough forward-backward propagation; ii. Update weights and biases with current ε\nand α. c. Check the cost reduction of the validation set,\nand terminate the training early, if it goes up."
    }, {
      "heading" : "4 IMPLEMENTATION AND RESULTS",
      "text" : "This section covers the implementation details of the authorship attribution system as a N-way classification problem using NNLM. The results are compared with baseline N-gram language models trained using the SRILM toolkit (Stolcke et al., 2002)."
    }, {
      "heading" : "4.1 NNLM Implementation and Optimization",
      "text" : "The database for each of the 16 courses is randomly split into training, validation and test sets with ratio 8:1:1. To compensate for the model variation due to the limited data size, the segmentation is performed 10 times with different randomization seeds, so the mean and variation of performance can be measured.\nFor each course in this project, we trained a different 4-gram NNLM, i.e. context size N = 4, to predict the 4th word using the 3 preceding words. These\nmodels share the same general parameters, such as a) the number of epochs (15), b) the epoch in which the learning rate decay starts (10), c) the learning rate decay factor (0.9). However, the other model parameters are searched and optimized within certain ranges using a multi-resolutional optimization scheme, with a) the dimension of embedding space Nemb (25 ∼ 200), b) the nodes of the hidden layer Nhid (100 ∼ 800), c) the learning rate ε (0.05 ∼ 0.3), d) the momentum α (0.8∼ 0.99), and e) mini-batch size M (100∼ 400). This optimization process is time consuming but worthwhile, since each course has a unique profile, in terms of vocabulary size, word distribution, database size, etc., so a model adapted to its profile can perform better in later classification."
    }, {
      "heading" : "4.2 Classification with Perplexity Measurement",
      "text" : "Statistical language models provide a tool to compute the probability of the target word Wt given N−1 context words W1,W2, . . . ,Wi, . . . ,WN , i∈N, i 6= t. Normally, the target word is the Nth word and the context words are the preceding N−1 words. Denote W n1 as a word sequence (W1,W2, . . . ,Wn). Using the chain rule of probability, the probability of sequence W n1 can be formulated as\nP(W n1 ) = P(W1)P(W2|W1) . . .P(Wn|W n−11 )\n= n\n∏ k=1\nP(Wk|W k−11 ). (20)\nUsing a Markov chain, which approximates the probability of a word sequence with arbitrary length n to the probability of a sequence with the closest N words, the shortened probabilities can be provided by the LM with context size N, i.e. N-gram language model. Eq. (20) can then be simplified to\nP(W n1 )≈ P(W nn−N+1) = n\n∏ k=1 P(Wk|W k−1k−N+1) (21)\nPerplexity is an intrinsic measurement to evaluate the fitness of the LM to the test word sequence W N1 , which is defined as\nPP(W n1 ) = P(W n1 )− 1 n (22)\nIn practical use, it normally converts the probability multiplication to the summation of log probabilities. Therefore, using Eq. (21), Eq. (22) can be reformulated as\nPP(W n1 )≈\n( n\n∏ k=1 P(Wk|W k−1k−N+1)\n)− 1n\n= 10 −\n∑nk=1 log10 P(Wk|W k−1 k−N+1)\nn\n(23)\nIn this project, the classification is performed by measuring the perplexity of the test word sequences in terms of sentences, using the trained NNLM of each course. Denote C as the candidate courses/instructors and C ∗ as the selected one from the classifier. C ∗ can then be expressed as\nC ∗ = argmax C PP(W n1 |LMC ) (24)\nThe classification performance with NNLM is also compared with baselines from an SRI N-gram backoff model with Kneser-Ney Smoothing. The perplexities are computed without insertions of start-ofsentence and end-of-sentence tokens in both SRILM and NNLM. To evaluate the LM fitness with different training methods, Table 2 lists the training-to-test perplexities for each of the 16 courses, averaged from 10 different database segmentations. Each line in Table\n2 shows the mean perplexities with standard deviation for the SRI N-gram methods with N from 1 to 4, plus the NNLM 4-gram method. It illustrates that among the SRI N-gram methods, 4-gram is slightly better than the tri-gram, and for the 4-gram NNLM method, it achieves even lower perplexities on average."
    }, {
      "heading" : "4.3 Classification Accuracy and Confusion Matrix",
      "text" : "To test the classification accuracy for a particular course instructor, the sentence-wise perplexity is computed with the trained NNLMs from different classes. The sentences are randomly selected from the\ntest set. Figure 3(a) shows graphically the accuracy vs. number of sentences for a particular course with ID 3. The accuracies are obtained from 3 different methods, SRI uniqram, 4-gram and NNLM 4-gram. The number of randomly selected sentences is in the range of 1 to 20, and for each particular number of sentences, 100 trials were performed and the mean accuracies with standard deviations are shown in the figure. As mentioned earlier in Sec. 2, courses with ID 7 and 16 were taught by the same instructor, so these two courses are excluded and 14 courses/instructors are used to compute their 16-way classification accuracies. Figure 3(b) demonstrates the mean accuracy over these 14 courses. SRI 4-gram and NNLM 4-gram achieve similar accuracy and variation. However, the NNLM 4-gram is slightly more accurate than the SRI 4-gram.\nFigure 4 again compares the accuracies from these two models. It provides the accuracies of 3 difficulty stages, given 1, 5, or 10 test sentences. Both LMs perform differently along all course/instructor datasets. However, NNLM 4-gram is on average slightly better than SRI 4-gram, especially when the number of sentences is less.\nBesides classification accuracy, the confusion between different course/instructors is also investigated. Figure 5 shows the confusion matrices for all 16 courses/instructors, computed with only one randomly picked test sentence for both methods. The probabilities are all in log scale for better visualization. The confusion value for the ith row and jth column is the log probability of assigning the ith course/instructor as the jth one. Since course 7 and 16 were taught by the same instructor, it is not surprising that the values for (7,16) and (16,7) are larger than the others in the same row. In addition, instruc-\ntors who taught the courses in the same field, such as courses 1,2 (Algorithm) and courses 11,12,13 (NLP) are more likely to be confused with each other. So the topic of the text does play a big role in authorship attribution. Since the NNLM 4-gram assigns higher values than the SRI the 4-gram for (7,16) and (16,7), it is more biased towards the author rather than the content in that sense."
    }, {
      "heading" : "5 CONCLUSION AND FUTURE WORK",
      "text" : "This paper investigates authorship attribution using NNLM. The experimental setup for NNLM is detailed with mathematical elaboration. The results in terms of LM fitness in perplexity, classification accuracies, and confusion scores are promising, compared with the baseline N-gram methods. The performance is very competitive to the state-of-the-art, in terms of classification accuracy and testing sensitivity, i.e. the length of test text used in order to achieve confident results. From the previous work listed in Sec. 1, the best reported results to date achieved either 95% accuracy on a similar author pool size, or 50% ∼ 60% with 100+ authors and limited training date per author. As it is shown in Figure 4, our work achieves nearly perfect accuracies if more than 10 test sentences are given.\nHowever, since both the SRI baseline and NNLM methods achieves nearly perfect accuracies with only limited test data, the current database may not be sufficiently large and challenging, probably due to the consistency between the training and the test sets and the contribution from the topic distinction. In the future, the algorithm should be tested using datasets with larger author set sizes and greater styling simi-\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1 ‐0.4 ‐2.6 ‐3.5 ‐4.7 ‐4.2 ‐4.5 ‐3.6 ‐3.9 ‐4.2 ‐3.6 ‐3.8 ‐3.7 ‐3.9 ‐4.3 ‐4.9 ‐3.6 2 ‐3.2 ‐0.3 ‐4.3 ‐4.8 ‐4.6 ‐4.9 ‐3.9 ‐4.1 ‐3.9 ‐3.9 ‐4.5 ‐4.3 ‐4.2 ‐4.5 ‐3.8 ‐3.7 3 ‐4.3 ‐4.5 ‐0.2 ‐5.6 ‐4.4 ‐3.8 ‐4.7 ‐5.1 ‐3.7 ‐4.5 ‐5.2 ‐5.0 ‐4.4 ‐5.3 ‐4.5 ‐3.8 4 ‐4.9 ‐5.5 ‐4.7 ‐0.1 ‐4.4 ‐5.4 ‐6.1 ‐5.5 ‐4.8 ‐4.4 ‐4.7 ‐5.8 ‐4.6 ‐5.6 ‐5.9 ‐3.9 5 ‐4.5 ‐4.8 ‐4.2 ‐4.5 ‐0.2 ‐5.0 ‐5.5 ‐5.1 ‐5.1 ‐4.3 ‐4.5 ‐4.7 ‐4.5 ‐5.0 ‐5.0 ‐3.8 6 ‐5.1 ‐5.1 ‐4.0 ‐5.5 ‐4.9 ‐0.1 ‐5.7 ‐4.4 ‐4.7 ‐4.2 ‐4.7 ‐5.2 ‐4.2 ‐5.3 ‐5.1 ‐4.3 7 ‐3.3 ‐3.0 ‐3.8 ‐4.5 ‐4.5 ‐4.3 ‐0.6 ‐4.4 ‐3.8 ‐3.4 ‐3.8 ‐4.1 ‐4.7 ‐4.3 ‐3.4 ‐2.1 8 ‐5.1 ‐4.7 ‐4.7 ‐5.5 ‐4.8 ‐4.7 ‐5.1 ‐0.1 ‐4.4 ‐4.2 ‐5.1 ‐4.8 ‐4.7 ‐4.9 ‐5.3 ‐4.2 9 ‐5.4 ‐5.3 ‐4.6 ‐5.5 ‐5.4 ‐5.7 ‐5.7 ‐4.5 ‐0.1 ‐4.4 ‐4.8 ‐5.2 ‐4.3 ‐5.4 ‐5.1 ‐3.6\n10 ‐4.1 ‐4.7 ‐4.0 ‐4.5 ‐5.4 ‐5.4 ‐4.4 ‐4.2 ‐4.3 ‐0.2 ‐4.9 ‐5.2 ‐4.6 ‐4.8 ‐4.3 ‐3.3 11 ‐4.4 ‐5.0 ‐4.5 ‐4.3 ‐4.0 ‐5.8 ‐4.9 ‐5.8 ‐4.2 ‐4.5 ‐0.2 ‐4.7 ‐4.2 ‐4.5 ‐5.8 ‐4.0 12 ‐4.0 ‐5.0 ‐3.9 ‐5.1 ‐4.0 ‐4.7 ‐5.4 ‐4.4 ‐4.1 ‐4.0 ‐4.0 ‐0.2 ‐4.0 ‐4.7 ‐4.5 ‐3.7 13 ‐5.4 ‐4.7 ‐4.4 ‐4.2 ‐4.8 ‐4.9 ‐5.5 ‐4.7 ‐4.8 ‐4.8 ‐4.7 ‐5.5 ‐0.1 ‐5.3 ‐5.1 ‐3.9 14 ‐4.5 ‐5.0 ‐4.7 ‐6.2 ‐4.7 ‐5.5 ‐5.6 ‐4.9 ‐4.6 ‐4.0 ‐4.2 ‐4.7 ‐4.7 ‐0.1 ‐5.6 ‐4.1 15 ‐4.5 ‐4.6 ‐3.9 ‐4.8 ‐4.8 ‐5.1 ‐4.7 ‐4.3 ‐4.7 ‐4.1 ‐4.7 ‐4.7 ‐4.5 ‐5.1 ‐0.2 ‐3.9 16 ‐3.4 ‐3.3 ‐3.4 ‐5.0 ‐4.6 ‐5.6 ‐2.5 ‐4.9 ‐3.6 ‐2.7 ‐3.8 ‐4.2 ‐3.8 ‐4.6 ‐3.9 ‐0.5\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1 ‐0.4 ‐2.3 ‐4.3 ‐5.2 ‐3.7 ‐4.5 ‐3.8 ‐4.2 ‐4.0 ‐3.7 ‐4.5 ‐4.1 ‐4.0 ‐4.2 ‐4.4 ‐3.3 2 ‐3.1 ‐0.3 ‐3.8 ‐4.9 ‐4.3 ‐4.5 ‐4.0 ‐4.0 ‐4.0 ‐3.7 ‐4.0 ‐4.5 ‐4.0 ‐4.4 ‐3.7 ‐3.5 3 ‐4.2 ‐4.1 ‐0.4 ‐3.5 ‐3.9 ‐4.1 ‐4.1 ‐4.2 ‐4.1 ‐3.4 ‐4.3 ‐4.4 ‐4.0 ‐4.1 ‐4.8 ‐2.9 4 ‐4.0 ‐3.9 ‐3.9 ‐0.3 ‐3.5 ‐4.3 ‐4.4 ‐4.7 ‐3.8 ‐4.2 ‐4.5 ‐4.6 ‐3.9 ‐4.1 ‐4.2 ‐3.8 5 ‐3.9 ‐3.9 ‐4.0 ‐3.8 ‐0.3 ‐4.0 ‐3.8 ‐4.7 ‐4.0 ‐4.5 ‐3.4 ‐3.9 ‐3.6 ‐4.2 ‐4.0 ‐4.3 6 ‐4.4 ‐4.0 ‐3.8 ‐4.2 ‐4.2 ‐0.3 ‐4.5 ‐3.9 ‐3.8 ‐4.7 ‐4.4 ‐4.9 ‐4.1 ‐4.3 ‐3.9 ‐4.9 7 ‐4.2 ‐3.9 ‐3.5 ‐4.2 ‐4.6 ‐4.9 ‐0.3 ‐4.7 ‐4.4 ‐3.6 ‐3.9 ‐5.0 ‐4.3 ‐4.3 ‐4.8 ‐2.8 8 ‐3.7 ‐3.0 ‐4.4 ‐5.1 ‐4.6 ‐3.7 ‐3.9 ‐0.4 ‐3.3 ‐3.6 ‐3.9 ‐4.6 ‐4.1 ‐3.8 ‐3.7 ‐4.0 9 ‐4.5 ‐3.4 ‐4.4 ‐5.5 ‐4.8 ‐4.4 ‐4.1 ‐4.3 ‐0.3 ‐3.5 ‐4.4 ‐4.7 ‐3.9 ‐4.1 ‐4.5 ‐3.8\n10 ‐3.3 ‐3.1 ‐3.7 ‐4.7 ‐4.3 ‐4.7 ‐3.5 ‐3.8 ‐3.4 ‐0.5 ‐4.2 ‐4.1 ‐4.5 ‐4.0 ‐3.5 ‐2.6 11 ‐3.9 ‐3.2 ‐4.1 ‐4.8 ‐3.0 ‐4.7 ‐3.8 ‐4.9 ‐3.4 ‐4.5 ‐0.5 ‐3.0 ‐3.0 ‐3.4 ‐4.3 ‐3.8 12 ‐3.5 ‐3.2 ‐4.2 ‐4.4 ‐3.3 ‐4.3 ‐4.0 ‐4.5 ‐3.5 ‐4.1 ‐2.8 ‐0.5 ‐3.4 ‐3.6 ‐3.7 ‐3.7 13 ‐4.3 ‐3.5 ‐4.4 ‐5.0 ‐3.8 ‐4.2 ‐4.7 ‐5.0 ‐3.6 ‐4.9 ‐3.4 ‐4.1 ‐0.3 ‐4.3 ‐3.8 ‐4.2 14 ‐3.9 ‐3.0 ‐4.8 ‐4.7 ‐4.0 ‐4.0 ‐3.8 ‐4.6 ‐3.3 ‐4.0 ‐3.7 ‐3.8 ‐3.8 ‐0.4 ‐4.0 ‐4.4 15 ‐4.2 ‐3.4 ‐4.5 ‐4.6 ‐4.3 ‐4.4 ‐3.7 ‐4.5 ‐4.1 ‐4.1 ‐4.2 ‐4.2 ‐4.2 ‐4.5 ‐0.3 ‐4.2 16 ‐4.4 ‐4.5 ‐4.1 ‐4.2 ‐4.5 ‐6.0 ‐3.7 ‐4.9 ‐4.7 ‐3.7 ‐4.4 ‐5.2 ‐4.8 ‐5.2 ‐5.2 ‐0.2\n(a)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1 ‐0.4 ‐2.6 ‐3.5 ‐4.7 ‐4.2 ‐4.5 ‐3.6 ‐3.9 ‐4.2 ‐3.6 ‐3.8 ‐3.7 ‐3.9 ‐4.3 ‐4.9 ‐3.6 2 ‐3.2 ‐0.3 ‐4.3 ‐4.8 ‐4.6 ‐4.9 ‐3.9 ‐4.1 ‐3.9 ‐3.9 ‐4.5 ‐4.3 ‐4.2 ‐4.5 ‐3.8 ‐3.7 3 ‐4.3 ‐4.5 ‐0.2 ‐5.6 ‐4.4 ‐3.8 ‐4.7 ‐5.1 ‐3.7 ‐4.5 ‐5.2 ‐5.0 ‐4.4 ‐5.3 ‐4.5 ‐3.8 4 ‐4.9 ‐5.5 ‐4.7 ‐0.1 ‐4.4 ‐5.4 ‐6.1 ‐5.5 ‐4.8 ‐4.4 ‐4.7 ‐5.8 ‐4.6 ‐5.6 ‐5.9 ‐3.9 5 ‐4.5 ‐4.8 ‐4.2 ‐4.5 ‐0.2 ‐5.0 ‐5.5 ‐5.1 ‐5.1 ‐4.3 ‐4.5 ‐4.7 ‐4.5 ‐5.0 ‐5.0 ‐3.8 6 ‐5.1 ‐5.1 ‐4.0 ‐5.5 ‐4.9 ‐0.1 ‐5.7 ‐4.4 ‐4.7 ‐4.2 ‐4.7 ‐5.2 ‐4.2 ‐5.3 ‐5.1 ‐4.3 7 ‐3.3 ‐3.0 ‐3.8 ‐4.5 ‐4.5 ‐4.3 ‐0.6 ‐4.4 ‐3.8 ‐3.4 ‐3.8 ‐4.1 ‐4.7 ‐4.3 ‐3.4 ‐2.1 8 ‐5.1 ‐4.7 ‐4.7 ‐5.5 ‐4.8 ‐4.7 ‐5.1 ‐0.1 ‐4.4 ‐4.2 ‐5.1 ‐4.8 ‐4.7 ‐4.9 ‐5.3 ‐4.2 9 ‐5.4 ‐5.3 ‐4.6 ‐5.5 ‐5.4 ‐5.7 ‐5.7 ‐4.5 ‐0.1 ‐4.4 ‐4.8 ‐5.2 ‐4.3 ‐5.4 ‐5.1 ‐3.6\n10 ‐4.1 ‐4.7 ‐4.0 ‐4.5 ‐5.4 ‐5.4 ‐4.4 ‐4.2 ‐4.3 ‐0.2 ‐4.9 ‐5.2 ‐4.6 ‐4.8 ‐4.3 ‐3.3 11 ‐4.4 ‐5.0 ‐4.5 ‐4.3 ‐4.0 ‐5.8 ‐4.9 ‐5.8 ‐4.2 ‐4.5 ‐0.2 ‐4.7 ‐4.2 ‐4.5 ‐5.8 ‐4.0 12 ‐4.0 ‐5.0 ‐3.9 ‐5.1 ‐4.0 ‐4.7 ‐5.4 ‐4.4 ‐4.1 ‐4.0 ‐4.0 ‐0.2 ‐4.0 ‐4.7 ‐4.5 ‐3.7 13 ‐5.4 ‐4.7 ‐4.4 ‐4.2 ‐4.8 ‐4.9 ‐5.5 ‐4.7 ‐4.8 ‐4.8 ‐4.7 ‐5.5 ‐0.1 ‐5.3 ‐5.1 ‐3.9 14 ‐4.5 ‐5.0 ‐4.7 ‐6.2 ‐4.7 ‐5.5 ‐5.6 ‐4.9 ‐4.6 ‐4.0 ‐4.2 ‐4.7 ‐4.7 ‐0.1 ‐5.6 ‐4.1 15 ‐4.5 ‐4.6 ‐3.9 ‐4.8 ‐4.8 ‐5.1 ‐4.7 ‐4.3 ‐4.7 ‐4.1 ‐4.7 ‐4.7 ‐4.5 ‐5.1 ‐0.2 ‐3.9 16 ‐3.4 ‐3.3 ‐3.4 ‐5.0 ‐4.6 ‐5.6 ‐2.5 ‐4.9 ‐3.6 ‐2.7 ‐3.8 ‐4.2 ‐3.8 ‐4.6 ‐3.9 ‐0.5\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n1 ‐0.4 ‐2.3 ‐4.3 ‐5.2 ‐3.7 ‐4.5 ‐3.8 ‐4.2 ‐4.0 ‐3.7 ‐4.5 ‐4.1 ‐4.0 ‐4.2 ‐4.4 ‐3.3\n2 ‐3.1 ‐0.3 ‐3.8 ‐4.9 ‐4.3 ‐4.5 ‐4.0 ‐4.0 ‐4.0 ‐3.7 ‐4.0 ‐4.5 ‐4.0 ‐4.4 ‐3.7 ‐3.5\n3 ‐4.2 ‐4.1 ‐0.4 ‐3.5 ‐3.9 ‐4.1 ‐4.1 ‐4.2 ‐4.1 ‐3.4 ‐4.3 ‐4.4 ‐4.0 ‐4.1 ‐4.8 ‐2.9\n4 ‐4.0 ‐3.9 ‐3.9 ‐0.3 ‐3.5 ‐4.3 ‐4.4 ‐4.7 ‐3.8 ‐4.2 ‐4.5 ‐4.6 ‐3.9 ‐4.1 ‐4.2 ‐3.8 5 ‐3.9 ‐3.9 ‐4.0 ‐3.8 ‐0.3 ‐4.0 ‐3.8 ‐4.7 ‐4.0 ‐4.5 ‐3.4 ‐3.9 ‐3.6 ‐4.2 ‐4.0 ‐4.3 6 ‐4.4 ‐4.0 ‐3.8 ‐4.2 ‐4.2 ‐0.3 ‐4.5 ‐3.9 ‐3.8 ‐4.7 ‐4.4 ‐4.9 ‐4.1 ‐4.3 ‐3.9 ‐4.9 7 ‐4.2 ‐3.9 ‐3.5 ‐4.2 ‐4.6 ‐4.9 ‐0.3 ‐4.7 ‐4.4 ‐3.6 ‐3.9 ‐5.0 ‐4.3 ‐4.3 ‐4.8 ‐2.8 8 ‐3.7 ‐3.0 ‐4.4 ‐5.1 ‐4.6 ‐3.7 ‐3.9 ‐0.4 ‐3.3 ‐3.6 ‐3.9 ‐4.6 ‐4.1 ‐3.8 ‐3.7 ‐4.0 9 ‐4.5 ‐3.4 ‐4.4 ‐5.5 ‐4.8 ‐4.4 ‐4.1 ‐4.3 ‐0.3 ‐3.5 ‐4.4 ‐4.7 ‐3.9 ‐4.1 ‐4.5 ‐3.8\n10 ‐3.3 ‐3.1 ‐3.7 ‐4.7 ‐4.3 ‐4.7 ‐3.5 ‐3.8 ‐3.4 ‐0.5 ‐4.2 ‐4.1 ‐4.5 ‐4.0 ‐3.5 ‐2.6 11 ‐3.9 ‐3.2 ‐4.1 ‐4.8 ‐3.0 ‐4.7 ‐3.8 ‐4.9 ‐3.4 ‐4.5 ‐0.5 ‐3.0 ‐3.0 ‐3.4 ‐4.3 ‐3.8 12 ‐3.5 ‐3.2 ‐4.2 ‐4.4 ‐3.3 ‐4.3 ‐4.0 ‐4.5 ‐3.5 ‐4.1 ‐2.8 ‐0.5 ‐3.4 ‐3.6 ‐3.7 ‐3.7 13 ‐4.3 ‐3.5 ‐4.4 ‐5.0 ‐3.8 ‐4.2 ‐4.7 ‐5.0 ‐3.6 ‐4.9 ‐3.4 ‐4.1 ‐0.3 ‐4.3 ‐3.8 ‐4.2 14 ‐3.9 ‐3.0 ‐4.8 ‐4.7 ‐4.0 ‐4.0 ‐3.8 ‐4.6 ‐3.3 ‐4.0 ‐3.7 ‐3.8 ‐3.8 ‐0.4 ‐4.0 ‐4.4 15 ‐4.2 ‐3.4 ‐4.5 ‐4.6 ‐4.3 ‐4.4 ‐3.7 ‐4.5 ‐4.1 ‐4.1 ‐4.2 ‐4.2 ‐4.2 ‐4.5 ‐0.3 ‐4.2 16 ‐4.4 ‐4.5 ‐4.1 ‐4.2 ‐4.5 ‐6.0 ‐3.7 ‐4.9 ‐4.7 ‐3.7 ‐4.4 ‐5.2 ‐4.8 ‐5.2 ‐5.2 ‐0.2\n(b)\nFigure 5: Course/instructor confusion matrices (16×16) for SRI 4-gram (a) and NNLM 4-gram (b).\nlarities. Since purely topic-neutral text data may not even exist (Luyckx, 2011), developing general author LMs with mixed-topic data, and then adapting them to particular topics may also be desirable. It could be particularly helpful when the topics of text data is available. To compensate the relatively small size of the training set, LMs may also be trained with a group of authors and then adapt to the individuals.\nBecause the NNLM assigns a unique representation for a single word, it is difficult to model words with multiple meanings (Mnih, 2010). Thus, combining the NNLM and N-gram models might be beneficial. The recurrent NNLM, which captures more context size than the current feed-forward model (Mikolov et al., 2010), may also be worth exploring."
    }, {
      "heading" : "ACKNOWLEDGEMENTS",
      "text" : "The authors would like to thank Coursera Incorporation for providing the course transcript datasets for the research in this paper."
    } ],
    "references" : [ {
      "title" : "A neural probabilistic language model",
      "author" : [ "Y. Bengio", "R. Ducharme", "P. Vincent", "C. Janvin" ],
      "venue" : "The Journal of Machine Learning Research, 3:1137–1155.",
      "citeRegEx" : "Bengio et al\\.,? 2003",
      "shortCiteRegEx" : "Bengio et al\\.",
      "year" : 2003
    }, {
      "title" : "Neural networks for pattern recognition",
      "author" : [ "C.M. Bishop" ],
      "venue" : "Oxford university press.",
      "citeRegEx" : "Bishop,? 1995",
      "shortCiteRegEx" : "Bishop",
      "year" : 1995
    }, {
      "title" : "Authorship attribution using word sequences",
      "author" : [ "R.M. Coyotl-Morales", "L. Villaseñor-Pineda", "M. Montes-y Gómez", "P. Rosso" ],
      "venue" : "Progress in Pattern Recognition, Image Analysis and Applications, pages 844–853. Springer.",
      "citeRegEx" : "Coyotl.Morales et al\\.,? 2006",
      "shortCiteRegEx" : "Coyotl.Morales et al\\.",
      "year" : 2006
    }, {
      "title" : "Automated authorship attribution using advanced signal classification techniques",
      "author" : [ "M. Ebrahimpour", "T.J. Putniņš", "M.J. Berryman", "A. Allison", "Ng", "B.W.-H.", "D. Abbott" ],
      "venue" : "PloS one, 8(2):e54998.",
      "citeRegEx" : "Ebrahimpour et al\\.,? 2013",
      "shortCiteRegEx" : "Ebrahimpour et al\\.",
      "year" : 2013
    }, {
      "title" : "Sleep stages classification using neural networks with multi-channel neural data",
      "author" : [ "Z. Ge", "Y. Sun" ],
      "venue" : "Brain Informatics and Health, pages 306–316. Springer.",
      "citeRegEx" : "Ge and Sun,? 2015",
      "shortCiteRegEx" : "Ge and Sun",
      "year" : 2015
    }, {
      "title" : "Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups",
      "author" : [ "G. Hinton", "L. Deng", "D. Yu", "G.E. Dahl", "Mohamed", "A.r", "N. Jaitly", "A. Senior", "V. Vanhoucke", "P. Nguyen", "Sainath", "T. N" ],
      "venue" : "Signal Processing",
      "citeRegEx" : "Hinton et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Hinton et al\\.",
      "year" : 2012
    }, {
      "title" : "Authorship attribution",
      "author" : [ "P. Juola" ],
      "venue" : "Foundations and Trends in information Retrieval, 1(3):233–334.",
      "citeRegEx" : "Juola,? 2006",
      "shortCiteRegEx" : "Juola",
      "year" : 2006
    }, {
      "title" : "N-gram-based author profiles for authorship attribution",
      "author" : [ "V. Kešelj", "F. Peng", "N. Cercone", "C. Thomas" ],
      "venue" : "Proceedings of the conference pacific association for computational linguistics, PACLING, volume 3, pages 255–264.",
      "citeRegEx" : "Kešelj et al\\.,? 2003",
      "shortCiteRegEx" : "Kešelj et al\\.",
      "year" : 2003
    }, {
      "title" : "Computational methods in authorship attribution",
      "author" : [ "M. Koppel", "J. Schler", "S. Argamon" ],
      "venue" : "Journal of the American Society for information Science and Technology, 60(1):9–26.",
      "citeRegEx" : "Koppel et al\\.,? 2009",
      "shortCiteRegEx" : "Koppel et al\\.",
      "year" : 2009
    }, {
      "title" : "Imagenet classification with deep convolutional neural networks",
      "author" : [ "A. Krizhevsky", "I. Sutskever", "G.E. Hinton" ],
      "venue" : "Advances in neural information processing systems, pages 1097–1105.",
      "citeRegEx" : "Krizhevsky et al\\.,? 2012",
      "shortCiteRegEx" : "Krizhevsky et al\\.",
      "year" : 2012
    }, {
      "title" : "Scalability issues in authorship attribution",
      "author" : [ "K. Luyckx" ],
      "venue" : "ASP/VUBPRESS/UPA.",
      "citeRegEx" : "Luyckx,? 2011",
      "shortCiteRegEx" : "Luyckx",
      "year" : 2011
    }, {
      "title" : "Authorship attribution and verification with many authors and limited data",
      "author" : [ "K. Luyckx", "W. Daelemans" ],
      "venue" : "Proceedings of the 22nd International Conference on Computational Linguistics-Volume 1, pages 513–520. Association for Computational Linguistics.",
      "citeRegEx" : "Luyckx and Daelemans,? 2008",
      "shortCiteRegEx" : "Luyckx and Daelemans",
      "year" : 2008
    }, {
      "title" : "Recurrent neural network based language model",
      "author" : [ "T. Mikolov", "M. Karafiát", "L. Burget", "J. Cernockỳ", "S. Khudanpur" ],
      "venue" : "INTERSPEECH 2010, Makuhari, Chiba, Japan, September 26-30, 2010, pages 1045–1048.",
      "citeRegEx" : "Mikolov et al\\.,? 2010",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2010
    }, {
      "title" : "Learning Distributed Representations for Statistical Language Modelling and Collaborative Filtering",
      "author" : [ "A. Mnih" ],
      "venue" : "PhD thesis, University of Toronto.",
      "citeRegEx" : "Mnih,? 2010",
      "shortCiteRegEx" : "Mnih",
      "year" : 2010
    }, {
      "title" : "Three new graphical models for statistical language modelling",
      "author" : [ "A. Mnih", "G. Hinton" ],
      "venue" : "Proceedings of the 24th international conference on Machine learning, pages 641–648. ACM.",
      "citeRegEx" : "Mnih and Hinton,? 2007",
      "shortCiteRegEx" : "Mnih and Hinton",
      "year" : 2007
    }, {
      "title" : "An algorithm for suffix stripping",
      "author" : [ "M.F. Porter" ],
      "venue" : "Program, 14(3):130–137.",
      "citeRegEx" : "Porter,? 1980",
      "shortCiteRegEx" : "Porter",
      "year" : 1980
    }, {
      "title" : "Authorship attribution with latent dirichlet allocation",
      "author" : [ "Y. Seroussi", "I. Zukerman", "F. Bohnert" ],
      "venue" : "Proceedings of the fifteenth conference on computational natural language learning, pages 181–189. Association for Computational Linguistics.",
      "citeRegEx" : "Seroussi et al\\.,? 2011",
      "shortCiteRegEx" : "Seroussi et al\\.",
      "year" : 2011
    }, {
      "title" : "Parsing natural scenes and natural language with recursive neural networks",
      "author" : [ "R. Socher", "C.C. Lin", "C. Manning", "A.Y. Ng" ],
      "venue" : "Proceedings of the 28th international conference on machine learning (ICML11), pages 129–136.",
      "citeRegEx" : "Socher et al\\.,? 2011",
      "shortCiteRegEx" : "Socher et al\\.",
      "year" : 2011
    }, {
      "title" : "A survey of modern authorship attribution methods",
      "author" : [ "E. Stamatatos" ],
      "venue" : "Journal of the American Society for information Science and Technology, 60(3):538–556.",
      "citeRegEx" : "Stamatatos,? 2009",
      "shortCiteRegEx" : "Stamatatos",
      "year" : 2009
    }, {
      "title" : "Srilm-an extensible language modeling toolkit",
      "author" : [ "A Stolcke" ],
      "venue" : "INTERSPEECH.",
      "citeRegEx" : "Stolcke,? 2002",
      "shortCiteRegEx" : "Stolcke",
      "year" : 2002
    } ],
    "referenceMentions" : [ {
      "referenceID" : 6,
      "context" : "Juola (Juola, 2006) and Stamatatos (Stamatatos, 2009) for example, have surveyed the state of the art and proposed a set of recommendations to move forward.",
      "startOffset" : 6,
      "endOffset" : 19
    }, {
      "referenceID" : 18,
      "context" : "Juola (Juola, 2006) and Stamatatos (Stamatatos, 2009) for example, have surveyed the state of the art and proposed a set of recommendations to move forward.",
      "startOffset" : 35,
      "endOffset" : 53
    }, {
      "referenceID" : 8,
      "context" : "As more text data become available from the Web and computational linguistic models using statistical methods mature, more opportunities and challenges arise in this area (Koppel et al., 2009).",
      "startOffset" : 171,
      "endOffset" : 192
    }, {
      "referenceID" : 16,
      "context" : "Many statistical models have been successfully applied in this area, such as Latent Dirichlet Allocation (LDA) for topic modeling and dimension reduction (Seroussi et al., 2011), Naive Bayes for text classification (CoyotlMorales et al.",
      "startOffset" : 154,
      "endOffset" : 177
    }, {
      "referenceID" : 3,
      "context" : ", 2006), Multiple Discriminant Analysis (MDA) and Support Vector Machines (SVM) for feature selection and classification (Ebrahimpour et al., 2013).",
      "startOffset" : 121,
      "endOffset" : 147
    }, {
      "referenceID" : 7,
      "context" : "Methods based on language modeling are also among the most popular methods for authorship attribution (Kešelj et al., 2003).",
      "startOffset" : 102,
      "endOffset" : 123
    }, {
      "referenceID" : 5,
      "context" : "Neural networks with deep learning have been successfully applied in many applications, such as speech recognition (Hinton et al., 2012), object detection (Krizhevsky et al.",
      "startOffset" : 115,
      "endOffset" : 136
    }, {
      "referenceID" : 9,
      "context" : ", 2012), object detection (Krizhevsky et al., 2012), natural language processing (Socher et al.",
      "startOffset" : 26,
      "endOffset" : 51
    }, {
      "referenceID" : 17,
      "context" : ", 2012), natural language processing (Socher et al., 2011), and other pattern recognition and classification tasks (Bishop, 1995), (Ge and Sun, 2015).",
      "startOffset" : 37,
      "endOffset" : 58
    }, {
      "referenceID" : 1,
      "context" : ", 2011), and other pattern recognition and classification tasks (Bishop, 1995), (Ge and Sun, 2015).",
      "startOffset" : 64,
      "endOffset" : 78
    }, {
      "referenceID" : 4,
      "context" : ", 2011), and other pattern recognition and classification tasks (Bishop, 1995), (Ge and Sun, 2015).",
      "startOffset" : 80,
      "endOffset" : 98
    }, {
      "referenceID" : 0,
      "context" : "Neural Network based Language Models (NNLM) have surpassed the performance of traditional N-gram LMs (Bengio et al., 2003), (Mnih and Hinton, 2007) and are purported to generalize better in smaller datasets (Mnih, 2010).",
      "startOffset" : 101,
      "endOffset" : 122
    }, {
      "referenceID" : 14,
      "context" : ", 2003), (Mnih and Hinton, 2007) and are purported to generalize better in smaller datasets (Mnih, 2010).",
      "startOffset" : 9,
      "endOffset" : 32
    }, {
      "referenceID" : 13,
      "context" : ", 2003), (Mnih and Hinton, 2007) and are purported to generalize better in smaller datasets (Mnih, 2010).",
      "startOffset" : 92,
      "endOffset" : 104
    }, {
      "referenceID" : 10,
      "context" : "The performance of the proposed method depends highly on the settings of the experiment, in particular the experimental design, author set size and data size (Luyckx, 2011).",
      "startOffset" : 158,
      "endOffset" : 172
    }, {
      "referenceID" : 11,
      "context" : "This often leads to contextbiased models, where the accuracy of author detection is highly dependent on the degree to which the topics in training and test sets match each other (Luyckx and Daelemans, 2008).",
      "startOffset" : 178,
      "endOffset" : 206
    }, {
      "referenceID" : 15,
      "context" : "The sentence-wise datasets are then stemmed using the Porter Stemming algorithm (Porter, 1980).",
      "startOffset" : 80,
      "endOffset" : 94
    }, {
      "referenceID" : 10,
      "context" : "Since purely topic-neutral text data may not even exist (Luyckx, 2011), developing general author LMs with mixed-topic data, and then adapting them to particular topics may also be desirable.",
      "startOffset" : 56,
      "endOffset" : 70
    }, {
      "referenceID" : 13,
      "context" : "Because the NNLM assigns a unique representation for a single word, it is difficult to model words with multiple meanings (Mnih, 2010).",
      "startOffset" : 122,
      "endOffset" : 134
    }, {
      "referenceID" : 12,
      "context" : "The recurrent NNLM, which captures more context size than the current feed-forward model (Mikolov et al., 2010), may also be worth exploring.",
      "startOffset" : 89,
      "endOffset" : 111
    } ],
    "year" : 2016,
    "abstractText" : "Authorship attribution refers to the task of automatically determining the author based on a given sample of text. It is a problem with a long history and has a wide range of application. Building author profiles using language models is one of the most successful methods to automate this task. New language modeling methods based on neural networks alleviate the curse of dimensionality and usually outperform conventional N-gram methods. However, there have not been much research applying them to authorship attribution. In this paper, we present a novel setup of a Neural Network Language Model (NNLM) and apply it to a database of text samples from different authors. We investigate how the NNLM performs on a task with moderate author set size and relatively limited training and test data, and how the topics of the text samples affect the accuracy. NNLM achieves nearly 2.5% reduction in perplexity, a measurement of fitness of a trained language model to the test data. Given 5 random test sentences, it also increases the author classification accuracy by 3.43% on average, compared with the N-gram methods using SRILM tools. An open source implementation of our methodology is freely available at https://github.com/zge/authorship-attribution/.",
    "creator" : "LaTeX with hyperref package"
  }
}