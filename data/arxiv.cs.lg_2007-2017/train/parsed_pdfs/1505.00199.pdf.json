{
  "name" : "1505.00199.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Optimizing Pseudo-Linear Performance Measures: Application to F-measure",
    "authors" : [ "Shameem A. Puthiya Parambath", "Nicolas Usunier", "Yves Grandvalet" ],
    "emails" : [ "shameem.puthiya-parambath@utc.fr", "nusunier@utc.fr", "yves.grandvalet@utc.fr" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Keywords: machine learning, cost-sensitive classification, pseudo-linear performance measures, F -score, Jaccard index"
    }, {
      "heading" : "1. Introduction",
      "text" : "Different performance measures exist to assess the efficiency of learning algorithms. Misclassification rate is the most commonly used performance measure in classification systems. Like many other measures; which we will investigate in this paper, it is defined over the set of classification outcomes. The four possible outcomes of a classifier are True Positive (tp), True Negative (tn), False Negative (fn) and False Positive (fp). Misclassification rate is a linear function of these outcomes, defined as the sum of fp and fn. Conceptually, classification algorithms solve optimization problems where we optimize a loss function corresponding\nc©2015 Shameem A. Puthiya Parambath, Nicolas Usunier and Yves Grandvalet.\nar X\niv :1\n50 5.\n00 19\n9v 3\n[ cs\n.L G\n] 1\n7 A\nto the performance measure (see ??). For example, the loss function that corresponds to misclassfication rate is 0-1 loss.\nAs mentioned, misclassification rate is a commonly used performance measure, albeit unsuitable for specific class of problems. For example, consider the classification (binary) of an imbalanced dataset of size 100 with 95 being samples of one specific class (let us say negative) and 5 being other class (say positive). A trivial classifier of the form ‘always predict negative’ results in a high accuracy albeit useless classifier. In this specific example, Fβ (?) can be considered as a more meaningful performance measure than misclassification rate. In general, performance measures, like Fβ, are extensively used in practical problems (??). One of the striking characteristics of these performance measures is the non-linearity with respect to the in-class false negatives and false positives; whereas misclassification rate is a linear function of false negatives and false positives. Moreover, there is no convex surrogate loss function that exists for such non-linear measures; specifically, there is no surrogate loss function that exists for F -measure. Another interesting property specific to F -measure and Jaccard index is: it is a sample level measure and does not decompose over individual examples. These three aspects makes the optimization problem a difficult and interesting one.\nIn the current paper, we study the theoretical and algorithmic aspects pertaining to the optimization of a set of non-linear performance measures called pseudo-linear performance measures. The commonly used performance measure F1 is an example of pseudo-linear performance measure. Less commonly used measures like Jaccard index also come under this title; among many others. Here, we focus primarily on pseudo-linear notions of F - measure. We consider the setting in which a dataset, given as a set of feature vectors, is to be classified such that the F -measure (restricted to pseudo-linear functions) of the resulting classification is (approximately) optimal. In the literature, F -measures are also often called F -scores. Here we will stick to the first terminology, which refers to the measurement of performance, in order to avoid any confusion with classification scores, that is, the realvalued scores that may be provided by classifiers and that are thresholded to produce decisions. Unless otherwise explicitly stated, all the discussion in this paper refers to F - measure optimization. At a later point, we generalize the results to other pseudo-linear measures.\nOur principle goal is to study the algorithms for empirical optimality of pseudo-linear F -measures. Given a training set, our analysis proves that Optimal F Classifier for pseudolinear F -measures can be found by minimizing the total misclassification cost of a costsensitive classification for each value of cost in an inner loop and select the best among the set of costs. Optimality in the state of the art algorithms for pseudo-linear F -measures are asymptotic whereas our results are valid in the non-asymptotic regime also. Furthermore, our analysis can be linked to the weighted-sum approach used in the multi-objective optimization. Additionally, in case of binary Fβ and multilabel-macro-Fβ, our experimental results suggest that selecting a classifier based on minimizing the total misclassification cost is same as selecting the optimal F -measure a posteriori. Our experiments also reveals the importance of thresholding classification scores to optimize F -measures.\nThis article is an extended version of an already published conference paper (?). The article is organized as follows. Section 2 introduces basic definitions and notations used throughout the paper. It also present earlier works in F -measure optimization. Section 3\npresents the theoretical analysis, where we establish the pseudo-linearity of different practical F -measures, and prove that Optimal F Classifier can be found by minimizing the total misclassification cost of a cost-sensitive classification for a specific cost value. We derive the values for the cost vector for many pseudo-linear F -measures. We establish the multi-objective view of the F -measure optimization problem and link our cost-minimization approach to the popular weighted-sum approach for solving multi-objective optimization problems. Section 5 presents the experimental results. We study the importance of thresholding for finding optimal solutions. We conclude the paper in Section 6. The proofs of all the propositions stated in Section 3 are deferred to Appendix A."
    }, {
      "heading" : "2. Background and Related Work",
      "text" : "Here we give a brief review of the state-of-the-art methods for F -measure maximization. We start by introducing the notations used throughout in the paper; we also give the definitions of some basic quantities like Fβ-measure."
    }, {
      "heading" : "2.1 Notation and Basic Definitions",
      "text" : "We are given (i) a measurable space X×Y, where X is the feature space and Y is the (finite) prediction set, (ii) a probability measure µ over X × Y, and (iii) a set of (measurable) classifiers H from the feature space X to Y. We distinguish here the prediction set Y from the label space L = {1, ..., L}: in binary or single-label multiclass classification, the prediction set Y is the label set L, but in multilabel classification, Y = 2L is the powerset of the set of possible labels. In that framework, we assume that we have an i.i.d. sample drawn from an underlying data distribution P on X ×Y. The empirical distribution of this finite training (or test) sample will be denoted by P̂. Then, we may take P as measure µ to get results at the population level (concerning expected errors), or we may take µ = P̂ to get results on a finite sample. Likewise, the set of classifiers H can be a restricted set of functions such as linear classifiers if X is a finite-dimensional vector space, or may be the set of all measurable classifiers from X to Y to get results in terms of Bayes-optimal classifiers. Finally, when required, we will use bold characters for vectors and normal font with subscript for indexing.\nMost of the previous work on pseudo-linear metric is centered around Fβ-measure in binary settings. Fβ-measure is defined as the weighted harmonic mean of precision and recall. Precision is defined as the fraction of predicted positive instances that are indeed positive and recall is defined as the fraction of positive instances that are correctly predicted as positive. Formally, we can define these metrics using classifier outcomes. Given a binary dataset and classifier, tp corresponds to the correct prediction of a positive label, tn corresponds to the correct prediction of a negative label, fn corresponds to the incorrect prediction of a positive label as a negative label, and fp corresponds to the incorrect prediction of the negative label as positive. In general, these outcomes are depicted using a confusion matrix, also called contingency table (See Table 2). In terms of the classification outcomes (tp, tn, fn, fp), we formally define precision, recall and Fβ associated with a binary classifier h ∈ H for a given sample (x,y) ∈ (X × Y)n as:\n(precision) Precision(h(x),y) = ∑n i=1 tp(h(xi))∑n\ni=1[tp(h(xi)) + fp(h(xi))\n(recall) Recall(h(x),y) = ∑n i=1 tp(h(xi))∑n\ni=1[tp(h(xi)) + fn(h(xi))]\n(binary−Fβ) Fβ(h(x),y) = (1 + β2) ∑n i=1 tp(h(xi))∑n\ni=1[(1 + β 2)tp(h(xi)) + β2fn(h(xi)) + fp(h(xi))]\nIn the above, dependence of label vector y on classification outcome is omitted for convenience. The parameter β weights precision and recall in Fβ: F0 corresponds to precision, F∞ corresponds to recall, and F1, the most widely used, corresponds to equal weights. In case of the example mentioned in the introduction, classifying a sample of 100 instances, the trivial classifier gives precision, recall and F1 values to 0. Precision does not consider false negatives, and recall does not consider false positives. So in practical problems, Fβ is preferred. One thing to note: unlike misclassification rate, F -measure is not invariant under label switching i.e. if we change the positive label to negative, we get a different F -measure. Hence it is used in problems where correct classification of minority label is of vital importance. In multilabel and multiclass settings, three different definitions of F - measure can be found; namely instance-wise, macro and micro F -measures. We will give formal definition of these in Section 3 in connection with our theoretical framework."
    }, {
      "heading" : "2.2 Related Work",
      "text" : "F -measure optimization had been studied on a limited basis in the past (?????). Last couple of years witnessed an increasing interest in this domain (?????????). Majority of the work was confined to F -measure maximization in binary classification settings, whereas very little work was done on multilabel and multiclass F -measure maximization tasks (??). ? suggested an algorithm for finding locally maximal F1-measure for binary classification problems by approximating the classification outcomes using logistic models. Since the objective function used is non-convex, the algorithm does not guarantee optimality. This issue is addressed by running the procedure multiple times and selecting the best in hand. The orthogonal problem of infering the hypothesis with optimal F1 from a probabilistic model is discussed by (?). In the scientific literature, the two problem formulation has been referred to as empirical utility maximization (EUM) and decision-theoretic aproach (DTA) respectively (?).\nThe two formulations differ with respect to the definition of the expected F -measure. In case of the EUM based approach, population F -measure is defined as the F -measure of the expected tp,fp and fn. Formally, In EUM, expected F -measure is defined as,\nF EUMβ (h) = (1 + β2)E[tp(h(x))]\n(1 + β2)E[tp(h(x))] + β2E[fn(h(x))] + E[fp(h(x))]\nAn optimal EUM classifier can be defined as,\nh∗ = argmax h∈H F EUMβ (h)\nIn DTA, assuming a probability distribution p(Y ) on {0, 1}n, expected F -measure is formally defined as,\nFDTAβ (h) = Ey∼p(Y )[Fβ(h(x),y)] An optimal DTA classifier is of the form\nh∗ = argmax h∈H ∑ y∈{0,1}n Fβ(h(x),y)p(y)\nFrom an algorithmic point of view, DTA based algorithms are computationally more expensive than EUM algorithms. DTA based algorithms require an efficient method to estimate the joint probability and iterate over exponentially many combinations of h and y; and the problem of estimating exact probabilities is as hard as the original problem. But assuming i.i.d samples and considering the functional properties of F -measure (it is a function of integer counts (tp, fp, fn)), the above problem can be solved more efficiently. The algorithm given by ? runs in O(n4), where n is the number of examples. ? improved the efficiency of this algorithm, leading to a complexity in O(n3), using dynamic programming methodology. They also remark that the optimal classifier for binary F1 is of the form sign(p(y = 1|x)−δ∗), where δ∗ is a threshold score dependent on the underlying distribution. ? extended the algorithm given by ? with dependence assumption and given a method to calculate optimal F classifier with O(n3) complexity in time, given n2 +1 parameters of the joint distribution p(y). This algorithm was used in a multilabel setting for instance-wise F -measure (see Remark 3). In addition to the high computational footprint, there is no optimality guarantee on finite samples. In general, optimality in DTA algorithms are asymptotic in nature (?).\nOn the other hand, EUM based approaches are computationally less demanding, and are based on structured risk minimization (SRM) principle. Here we minimize an approximate surrogate loss function, and select the hypothesis with minimal error on the validation set. The most commonly employed EUM approach is to threshold the score obtained using linear classifiers like logistic regression or support vector machines (SVM) such that F1 is maximized. An approximate surrogate function based approach named SVMperf is given by ?, based on the observation that F1 is a sample level measure. In the suggested method, the discriminant function is defined over the linear combination of the feature vectors, where the scalar multiplier is the label associated with each feature vector in the training sample. Even though the reported experimental results were promising, the method does not offer any theoretical optimality guarantee. Moreover, our experiments establish that SVMperf is a sub-optimal method. ? also advocated for SVMs with asymmetric costs (that is, with different costs for false negatives and false positives) for F1-measure optimization in binary classification. However, their argument, specific to SVMs, is not methodological but technical (relaxation of the maximization problem).\nIn case of multilabel classification, ? argued that the multilabel-micro-F -measure can be optimized by thresholding the class confidence score, one label at a time. ? used knearest neighbours and SVM to generate scores. In general, thresholding cost-insensitive SVM scores does not guarantee empirical optimality, and the paper does not address the issue of hyperparameter selection of the backend algorithm (k of k-nearest neighbor and regularization co-efficient of SVM).\n? tackle the problem by combining different classification models. They combined two logistic models, (i) maximum likelihood logistic regression and (ii) approximate logistic\napproximation (see ?) to maximize multilabel micro, macro and instance-wise F -measure. This line of work comes under multiple classifier systems. Multiple classifier systems are not widely used for F -measure maximization, and are still in nascent stages. In our knowledge, no proper statistical study regarding the optimality of the multiple classifier systems for F -measure maximization is done so far.\nApart from F -measure, some of the most recent work discusses non-linear performance measures like Jaccard index (???). Following the footsteps of ?, ?? proposed algorithms to maximize linear-fractional performance performance measure by thresholding the class confidence score. But as mentioned earlier, results hold only asymptotically.\nIn this work, we aim to perform empirical risk minimization-type learning, that is, to find a classifier with highest population level F -measure by maximizing its empirical counterpart. In that sense, we follow the EUM framework. Nonetheless, regardless of how we define the generalization performance, our results can be used to maximize the empirical value of the Fβ-measure."
    }, {
      "heading" : "3. Theoretical Framework and Analysis",
      "text" : "In this section, we present the theoretical framework which is at the heart of this work. Our results are mainly motivated by the maximization of F -measures for binary, multiclass, and multilabel classification. They rely on a general property of these performance measures, namely their pseudo-linearity with respect to the false negative and false positive probabilities.\nFor binary classification, we prove that, in order to optimize the F -measure, it is sufficient to solve a binary classification problem with different costs allocated to false positive and false negative errors (Proposition 4). However, these costs are not known a priori, so in practice we propose to learn several classifiers with different costs, and to select the best one according to the F -measure in a second step. Propositions 5 and 6 provide approximation guarantees on the F -measure we can obtain by following this principle depending on the granularity of the search in the cost interval.\nWe first establish the results for the Fβ-measures in binary classification, and then extend to other cases of F -measures with similar functional forms that are used in multiclass and multilabel classification. We also briefly describe pseudo-linear notions of Jaccard index, which can also be solved using our framework. For that reason, we present the results and proofs for the binary case, succeeded by multiclass and multilabel F -measures."
    }, {
      "heading" : "3.1 Error Profiles and Pseudo-Linearity",
      "text" : ""
    }, {
      "heading" : "3.1.1 Error Profiles",
      "text" : "The performance of a classifier h on distribution µ can be summarized by the elements of the contingency table (See Table 2) which contains the summary of errors. For all classification tasks (binary, multiclass and multilabel), the F -measures we consider here are functions of this non-diagonal elements of contingency table, which themselves are defined in terms of the marginal probabilities of classes and the per-class false negative/false positive probabilities. The marginal probabilities of label k will be denoted by Pk, and the per-class false negative/false positive probabilities of a classifier h are denoted by FNk(h) and FPk(h).\nTheir definitions are given below:\n( binary/multiclass) Pk = µ({(x, y)|y = k}), FNk(h) = µ({(x, y)|y = k and h(x) 6= k}) , FPk(h) = µ({(x, y)|y 6= k and h(x) = k}) .\n(multilabel) Pk = µ({(x, y)|y ∈ k}), FNk(h) = µ({(x, y)|k ∈ y and k 6∈ h(x)}) , FPk(h) = µ({(x, y)|y 6∈ k and k ∈ h(x)}) .\nThese probabilities of a classifier h are then summarized by the error profile E(h):\nE(h) = ( FN1(h) , FP1(h) , ..., FNL(h) , FPL(h) ) ∈ R2L ."
    }, {
      "heading" : "3.1.2 Pseudo-Linear Functions",
      "text" : "Throughout the paper, we rely on the notion of pseudo-linearity of a function, which is itself defined from the notion of pseudo-convexity (See ?, Definition 3.2.1): a differentiable function F : D ⊂ Rd → R, defined on a convex open subset of Rd, is pseudo-convex if\n∀e, e′ ∈ D , F (e) > F (e′) ⇒ 〈 ∇F (e), e′ − e 〉 < 0 ,\nwhere 〈., .〉 is the canonical dot product on Rd. Moreover, F is pseudo-linear if both F and −F are pseudo-convex. In practice, working with gradients of non-linear functions may be cumbersome, so we will use the following characterization, which is a rephrasing of ?, Theorem 3.3.9, basically stating that level sets of pseudo-linear functions are hyperplanes:\nTheorem 1 (?) A non-constant function F : D → R, defined and differentiable on the open convex set D ⊆ Rd, is pseudo-linear on D if and only if ∀e ∈ D , ∇F (e) 6= 0 , and: ∃a : R→ Rd and ∃b : R→ R such that, for any t in the image of F :\nF (e) ≥ t ⇔ 〈a(t), e〉+ b(t) ≤ 0 and F (e) ≤ t ⇔ 〈a(t) , e〉+ b(t) ≥ 0 .\nPseudo-linearity is the main property of linear-fractional functions (ratios of linear functions).\nProposition 2 (Linear-fractional function) A linear-fractional function F : D ⊆ Rd → R is the ratio of linear functions, F (e) = α0+〈γ,e〉α1+〈δ,e〉 . A non-constant linear-fractional function is pseudo-linear on the open half-space D = { e ∈ Rd|α1 + 〈δ, e〉 > 0, α1 6= 0 } ."
    }, {
      "heading" : "3.2 Pseudo-Linearity of F -measures",
      "text" : "Several notions of F -measures used in practical problems are pseudo-linear. Here, we establish that binary Fβ and multiclass/multilabel macro/micro F -measures are pseudo-linear functions."
    }, {
      "heading" : "3.2.1 Binary Classification",
      "text" : "In binary classification, we have FN2 = FP1 and we can write F -measures only by reference to class 1. Then, for any β > 0 and any binary classifier h, the Fβ-measure is\nFβ(h) = (1 + β2)(P1 − FN1(h))\n(1 + β2)P1 + FP1(h)− FN1(h) .\nWe can immediately notice that Fβ is linear-fractional and hence by Proposition 2 it is pseudo-linear in FN1 and FP1. Thus, with a slight (yet convenient) abuse of notation, we write the Fβ-measure for binary classification as a function of vectors in R4 = R2L:\n(binary) ∀e ∈ R4, Fβ(e) = (1 + β2)(P1 − e1)\n(1 + β2)P1 + e2 − e1\nwhere ei represents the i th element of the error profile e. A surface plot of F1 as a function of FN1 and FP1 with level sets is given in Figure 1. As the Theorem 1 states, it can be easily verified from the plot that level sets are hyperplanes.\nIn the above, ei represents the i th element of the error profile e ∈ E. A surface plot of F1 as a function of FN1 and FP1 is given in Figure 1. It can be easily verified from the plot that level sets are hyperplanes."
    }, {
      "heading" : "3.2.2 Multilabel Classification",
      "text" : "In multilabel classification, there are several definitions of F -measures. For those based on the error profiles, we first have the macro-F -measure (denoted by MFβ), which is the average over class labels of the Fβ-measure of each binary classification problem associated to the prediction of the presence/absence of a given class:\n(multilabel–Macro) MFβ(e) = 1\nL L∑ k=1 (1 + β2)(Pk − e2k−1) (1 + β2)Pk + e2k − e2k−1 .\nMFβ is not a pseudo-linear function of an error profile e. However, if the multilabel classification algorithm learns independent binary classifiers for each class (a method known as one-vs-rest or binary relevance, see e.g. ?), then the k-th binary problem depends only\non e2k−1 and e2k. The maximization of the macro-F -measure with respect to all binary classifiers is then a separable problem which boils down to independently maximizing the Fβ-measure for L binary classification problems. In other words, optimizing MFβ consists in maximizing the pseudo-linear functions in e2k−1 and e2k that correspond to each Fβ optimization. There are also micro-F -measures for multilabel classification. They correspond to Fβ-measures for a new binary classification problem over X × L, in which one maps a multilabel classifier h : X → Y (Y is here the power set of L) to the following binary classifier h̃ : X × L → {0, 1}: we have h̃(x, k) = 1 if k ∈ h(x), and 0 otherwise. The micro-Fβ-measure, written as a function of an error profile e and denoted by mFβ(e), is the Fβ-measure of h̃ and can be written as:\n(multilabel–micro) mFβ(e) = (1 + β2)\n∑L k=1(Pk − e2k−1)\n(1 + β2) ∑L k=1 Pk + ∑L k=1(e2k − e2k−1) .\nThis function is also linear-fractional, and thus pseudo-linear in e."
    }, {
      "heading" : "3.2.3 Multiclass Classification",
      "text" : "The last example we take is from multiclass classification. It differs from multilabel classification in that a single class must be predicted for each example. This restriction imposes strong global constraints that make the multiclass classification significantly harder. As for the multilabel case, there are many definitions of F -measures for multiclass classification, and in fact several definitions for the micro-F -measure itself. We will focus on the following one, which is used in information extraction (e.g in the BioNLP Challenge ?). Given L class labels, we will assume that label 1 corresponds to a “default” class, the prediction of which is considered as not important. In information extraction, the default class corresponds to the (majority) case where no information should be extracted. Then, a false negative is an example (x, y) such that y 6= 1 and h(x) 6= y, while a false positive is an example (x, y) such that y = 1 and h(x) 6= y. This micro-F -measure, denoted mcFβ can be written as:\n(multiclass–micro) mcFβ(e) = (1 + β2)(1− P1 −\n∑L k=2 e2k−1)\n(1 + β2)(1− P1)− ∑L k=2 e2k−1 + e1 .\nOnce again, this kind of micro-Fβ-measure is linear-fractional and hence pseudo-linear in e.\nRemark 3 (Non-pseudo-linear F-measures) In multilabel settings, notion of instancewise Fβ has been used in the past (??????). It is similar to the micro-F -measure (mFβ) for multilabel case defined above, but defined over samples (instances) instead of labels. It is defined as the average of the per-instance F -measure. Hence, we calculate the F - measures for each instance independently (i.e. estimate mFβ for each individual example by calculating tp, fp, fn for each example in the sample) and take the average (arithmetic mean) over the number of samples. This measure can not be written as a linear-fractional function of “error profile” terms, hence it can not be solved using our framework."
    }, {
      "heading" : "3.3 Optimizing F -Measure by Reduction to Cost-Sensitive Classification",
      "text" : "The Fβ-measures presented above are non-linear aggregations of false negative/positive propotions that can not be written in the usual expected loss minimization framework;\nusual learning algorithms are thus, intrinsically, not designed to optimize this kind of performance measures. We show in Proposition 4 that the optimal classifier for a cost-sensitive classification problem with label dependent costs (??) is also an optimal classifier for the pseudo-linear F -measures (within a specific, yet arbitrary classifier set H). In cost-sensitive classification, each entry of the error profile is weighted asymmetrically by a non-negative cost, and the goal is to minimize the weighted average error. Efficient, consistent algorithms exist for such cost-sensitive problems (???). Even though the costs corresponding to the optimal F -measure are not known a priori, we show in Proposition 5 that we can approximate the optimal classifier with approximate costs. These costs, explicitly expressed in terms of the optimal F -measure, motivate a practical algorithm. Even though the discussion in this section is more general and applies to any pseudo-linear functions, we start with the discussion in binary settings. We give the proofs and results for binary Fβ and extend the results to multilabel and multiclass F -measures in Section 3.4."
    }, {
      "heading" : "3.3.1 Reduction to Cost-Sensitive Classification",
      "text" : "Let F : D ⊂ Rd → R be a fixed pseudo-linear function. We denote by a : R → Rd the function mapping values of F to the corresponding level set of Theorem 1. We assume that the distribution µ is fixed, as well as the (arbitrary) set of classifier H. We denote by E (H) the closure of the image of H under E, i.e. E (H) = cl({E(h) , h ∈ H}) (the closure ensures that E (H) is compact and that minima/maxima are well-defined), and we assume E (H) ⊆ D. Finally, for the sake of discussion with cost-sensitive classification, we assume that a(t) ∈ Rd+ for any e ∈ E (H), that is, lower values of errors entail higher values of F .\nProposition 4 Let F ? = max e∈E(H) F (e). We have: e? ∈ argmin e∈E(H)\n〈 a ( F ? ) , e 〉 ⇔ F (e?) = F ?.\nThis proposition shows that a ( F ? )\nare the cost vectors, which are orthogonal to the level set of F at F ? and may not need to be unique, that should be assigned to the error profile in order to find the optimal classifier in H with respect to the measure F . Hence maximizing F amounts to minimizing 〈 a ( F ? ) ,E(h) 〉 with respect to h, that is, amounts to solving a cost-sensitive classification problem. This observation suggests that the optimization of pseudo-linear measures could be a wrapper of cost-sensitive classification algorithms. The costs a ( F ? )\nare, however, not known a priori. The following result shows that having only approximate costs is sufficient to have an approximately optimal solution, which gives us the main step towards a practical solution.\nProposition 5 Let ε0 ≥ 0 and ε1 ≥ 0, and assume that there exists Φ > 0 such that for all e, e′ ∈ E (H) satisfying F (e′) > F (e), we have:\nF ( e′ ) − F (e) ≤ Φ 〈 a ( F (e′) ) , e− e′ 〉 .\nThen, let us take e? ∈ argmaxe′∈E(H) F (e′), and denote a? = a(F (e?)). Let furthermore â ∈ Rd+ and h ∈ H satisfying the following conditions:\n(i) ‖â− a?‖2 ≤ ε0 , (ii) 〈â, e〉 ≤ min e′∈E(H)\n〈 â, e′ 〉 + ε1 .\nWe have: ∀e ∈ E (H) , F (e) ≥ F (e?)− Φ · (2ε0M + ε1) , where M = max e′∈E(H)\n∥∥e′∥∥ 2 .\nThe above proposition suggests that pseudo-linear measures could be optimized by wrapping cost-sensitive classification in an inner loop with an outer loop setting the appropriate costs. This proposition also gives an upper bound on the achievable optimal F -score. This value depends on the size of the maximum error associated with the given hypothesis space,M , measured in `2 sense and the constant Φ. The value of M depends on the selected hypothesis class (E (H)). We call Φ as discretization factor as it defines the granularity of the approximation. It depends on the specific form of F -measure and training sample. We can find an approximately optimal classifier using a procedure, where we search for an approximately optimal cost and associated error profile by iterating through the preselected cost interval in small steps. Thus searching for a cost such that ε0 is close to zero, we can find an approximately optimal F classifier. ε1 can be regarded as the approximation guarantee provided by the underlying cost-sensitive classification algorithm. Practical implementations use convex surrogate loss instead of the non-convex 0-1 loss. A discussion on convex approxmiation of 0-1 loss can be found in (?). Φ, the discretization factor gives the magnitude of the step size. A larger value of Φ indicates more fine-grained discretization (very small step size), and a smaller value of Φ indicates coarse- grained discretization. Later, we will derive the exact values of Φ and the cost interval for specific F -measures."
    }, {
      "heading" : "3.3.2 Discretization Factor and Cost Interval for Fβ",
      "text" : "Here, we derive the values of the discretization factor (Φ) and the range of the cost interval (a) for binary Fβ-measure.\nProposition 6 Fβ defined in Section 3.2.1 satisfy the conditions of Proposition 5 with:\n(binary) Fβ : Φ = 1\nβ2P1 and a : t ∈ [0, 1] 7→ (1+β2−t, t, 0, 0) .\nThis proposition gives the exact values of Φ and the range for a in binary settings. Here the discretization factor depends on the marginal probability of the positive class (assume label 1 represents positive class). A larger value of the discretization factor demands smaller step size in the cost interval. Looking at the approximation guarantee in proposition 5, with a larger value of Φ, reasonable approximation can be obtained by taking ε0 close to zero. Intuitively, we can think of this as follows, higher values of Φ indicates a highly imbalanced data with very few positive examples, hence to eliminate the influence of class-imbalance, we need to discretize in smaller step through cost interval. Given the error profile (in the form of contingency table) and associated costs as a matrix, as shown in in Figure 2, corresponding Fβ-measure is the sum of the elements of the Hadamard product of the two matrices.\nCorollary 7 For the F1-measure, the optimal classifier is the solution to the cost-sensitive binary classifier with costs ( 1− F ?2 , F ? 2 ) This proposition extends the result obtained by ? to the non-asymptotic regime. If we take H as the set of all measurable functions, the Bayes-optimal classifier for this cost is to predict class 1 when µ(y = 1|x) ≥ F ?2 (see ??)."
    }, {
      "heading" : "3.3.3 Algorithm for Fβ Maximization",
      "text" : "Based on the above results, we give a practical algorithm to find optimal Fβ. In case of Fβ, the cost function a : [0, 1] → Rd, which assigns costs to probabilities of error, is Lipschitzcontinuous with Lipschitz constant (φ) = max(1, β2). Hence it is sufficient to discretize the interval [0, 1] to have a set of evenly spaced values {t1, ..., tC} (say, tj+1 − tj = ε0/φ) to obtain an ε0-cover {a(t1), ...,a(tC)} of the possible costs. Using the approximate guarantee of Proposition 5, learning a cost-sensitive classifier (hi) for each a(ti) and selecting the one with minimum total misclassification cost(〈a(ti), hi(e)〉) on a validation set is sufficient to obtain a Φ(2ε0M + ε1)-optimal solution. Our experimental results suggest that, in binary classification choosing a classifier by our proposed method is same as selecting a classifier with optimal F -measure a posteriori. Hence our final algorithm consists of selecting a cost-sensitive classifier with optimal F -score.Our suggested algorithm is presented in Algorithm 1.\nAlgorithm 1 Optimization of the Fβ-measure\n1: procedure Optimize Fβ(D,β) . D = Data, β = β in Fβ 2: bF = 0 3: Split Training Data into two Dtra, Dval 4: for t = (0 . . . 1 + β2) do . approximate cost 5: φ, θ, F = F cs learner(Dtra, Dval, t); . learn cost-sensitive model 6: if F > bF then 7: Φ = φ, Θ = θ, bF = F ; 8: end if 9: end for\n10: return (Φ, Θ) 11: end procedure\nThe cost-sensitive classification algorithms that are used in the inner loop (step 5) returns the trained model. The predict score method in the meta-algorithm simply returns the scores (score can be posterior probability, or geometric margin etc) on the validation set and computeFβ returns the optimal F -measure and a score threshold (if any) on the validation data. Even though our theoretical results do not suggest thresholding the scores\nAlgorithm 2 Cost-Sensitive Learner for Fβ\n1: procedure F cs learner(Dtra, Dval, t) . Dtra = Training Data, Dval = Validation Data, t=cost 2: bF = 0 3: for ψ ∈ Ψ do . Ψ = set of tunable cost-sensitive algorithm hyper-parameter 4: φ = cost sensitive learner(Dtra, t, ψ); . generic cost-sensitive learner 5: θ, F= computeFβ(φ,Dval, β) . get optimal threshold and Fβ 6: if F > bF then 7: Φ = φ, Θ = θ, bF = F ; 8: end if 9: end for\n10: return (Φ, Θ, F ) 11: end procedure\na posteriori, experimental results indicate the need for a posterior thresholding of the scores. We will elaborate on this point in Section 5. This meta-algorithm can be instantiated with any cost-sensitive learning algorithm. The actual algorithm may simply consist of adjusting the hyper-parameters of a cost-insensitive classifier so as to optimize cost-sensitive classification, as in many practical implementation of cost-sensitive algorithm. This rudimentary approach results in considerable savings in computation time."
    }, {
      "heading" : "3.4 Beyond Binary F -measure",
      "text" : "As mentioned earlier, many notions of F -measures in multiclass and multilabel problems are pseudo-linear and can be solved using our framework. Here, we derive the values of cost vector (a) and discretization factor (Φ), and give optimal F -measure algorithm for pseudo-linear F -measures described in Sections 3.2.2 and 3.2.3.\n3.4.1 Multilabel micro-F -measure\nProposition 8 multilabel micro-F (mFβ) defined in Section 3.2.2 satisfies the conditions of Proposition 5 with:\n(multilabel–micro) mFβ : Φ = 1 β2 ∑L k=1 Pk and ai(t) = { 1 + β2 − t if i is odd t if i is even .\nHere the discretization factor depends on the sum of marginal probabilities of each label. A large value of Φ indicates that majority of the labels are rare, and smaller value of Φ indicates that few labels are rare. Since the impact of misclassification of rare labels does not influence the micro-F -measure to a greater extend (F -score is independent of true negatives), we have to discretize in a smaller step only if the majority of the classes are rare. Given the above result on cost vector a and discretization factor Φ, and following the arguments given for Fβ (here also the cost function a is Lipschitz-continuous with Lipschitz constant taking value max(1, β2)), we can develop an algorithm for finding optimal classifier formFβ. Unlike in binary case, here we run cost-sensitive learner with discretized cost values\nto find the classifier with lowest total misclassification cost(〈a(ti), hi(e)〉). Our proposed algorithm is given in Algorithm 3. The algorithm is similar to the Fβ algorithm given in Algorithm 1, except for the fact that here we minimize the total misclassification cost instead of maximixing empirical Fβ in the inner loop. Also, here we need the cardinality of the label space as an additional input parameter. Here the outer loop calculates the cost (a(t)) for each value of t as given in proposition 8. The selected threshold is the one which minimizes the total misclassification cost (〈a(t), e〉) over all possible values of a(t) and e.\nAlgorithm 3 Optimization of the mFβ-measure\n1: procedure Optimize mFβ(D,L,β) . D = Data, L = |L|, β = β in Fβ 2: bC = +∞ 3: bmF = 0 4: Split Training Data into two Dtra, Dval 5: for t = (0 . . . 1 + β2) do . Approximate Cost 6: Π = gen mFβ cost vector(L, t, β) . Cost Vector 7: φ, θ = mF cs learner(Dtra, Dval,Π) . learn cost-sensitive model 8: θ,mF = computemFβ(φ,Dval, θ, β) . get the optimal threshold and mFβ 9: if (mF > bmF ) then\n10: bmF = mF, Φ = φ, Θ = θ; 11: end if 12: end for 13: return (Φ,Θ) 14: end procedure\nAlgorithm 4 Cost-Sensitive Learner for mFβ\n1: procedure mF cs learner(Dtra, Dval,Π) . Dtra = Training Data, Dval = Validation Data, Π=cost 2: bC = +∞ 3: for ψ ∈ Ψ do . Ψ = set of tunable cost-sensitive algorithm hyper-parameter 4: φ = cost sensitive learner(Dtra,Π, ψ); . generic cost-sensitive learner 5: θ, C= compute cost(φ,Dval,Π) . get optimal threshold and total\nmisclassification cost 6: if (C < bC) then 7: Φ = φ, Θ = θ; 8: end if 9: end for\n10: return (Φ, Θ) 11: end procedure\n3.4.2 Multiclass micro-F -measure\nProposition 9 multiclass micro-F (mcFβ) defined in Section 3.2.3 satisfies the conditions of Proposition 5 with:\n(multiclass–micro) mcFβ : Φ = 1\nβ2(1− P1) and ai(t) =  1 + β2 − t if i is odd and i 6= 1 t if i = 1\n0 otherwise\n.\nFollowing the arguments given for multilabel micro-F -measure, we can use the Algorithm 3 for finding optimal mcFβ with a small modification to the gen mFβ cost vector method. The new cost generation method for multiclass micro-F -measure follows result of proposition 9.\nRemark 10 (Beyond F -Measures) Jaccard index is a set-based similarity measure. Given two sets, Jaccard index is defined as the ratio of intersection to union. Like F1-measure, it ranges from 0 to 1, where 0 indicates distinct sets and 1 indicates identical sets (?). It is used in cluster analysis and co-citation analysis to name a few. Some recent work ((??)) examined the use of Jaccard index as a performance measure in classification problems. The Jaccard index is a pseudo-linear performance function of per-class false negatives and false positives. We can define Jaccard indexes for binary, multiclass and multilabel problems in terms of the error profile entries,\n(binary) ∀e ∈ R4, Jac(e) = P1 − e1 P1 + e2\n(multilabel–micro) ∀e ∈ R2L, mJac(e) = ∑L\nk=1(Pk − e2k−1)∑L k=1 Pk + ∑L k=1 e2k\n(multiclass–micro) ∀e ∈ R2L, mcJac(e) = 1− P1 −\n∑L k=2 e2k−1\n(1− P1) + e1\nAs we can infer from the above equations, these quantities are pseudo-linear and hence, we can use the methodology developed in Section 3.3.1,thresholding cost-sensitive scores, to find optimal Jaccard index classifier. Our analysis proves the remark of ? “We also see that algorithms maximizing the F-measure perform the best for Jaccard index”."
    }, {
      "heading" : "4. Relationship to Multi-Objective Optimization",
      "text" : "Finding “good” classifiers amounts to find good trade-offs between the different types of errors. In any case, it is a natural requirement that the chosen classifier has an error profile that is a minimal element of E (H) according to the partial order of Pareto dominance, which is denoted by and is defined as:\n∀e, e′ ∈ Rd , e e′ ⇔ ∀k ∈ {1, ..., d} , ek ≤ e′k .\nThe set of optimal solutions defines the Pareto front. error profile that is a minimal element of E (H) according to Pareto-dominance (where e e′ iff ek ≥ e′k for all k). This set of optimal solutions defines the Pareto front.\nMulti-objective optimization defines methods for finding the Pareto front, or approximations of it (?), and one of the motivations is to find (approximately) optimal solutions of a vector function that is hard to optimize. The process is to generate candidate points in the Pareto front, and take the candidate with optimal value of the vector function. The advantage is generating candidate points is faster than the direct optimization of the vector function. In our case, goal is to find h ∈ E (H) that achieves small values of 〈a, e(h)〉 for a predefined cost vector a.\nThe reduction from pseudo-linear functions to solving a series of cost-sensitive classification problems exactly corresponds to this Pareto front method. In fact, a general way of finding Pareto-optimal solutions of a multi-objective problems is called the weighted-sum method (see e.g. ??). Applied to error profiles, the weighted-sum method would minimize positive weighted combinations of the elements of the error profiles, which corresponds to solving a cost-sensitive classification problem. In usual multi-objective optimization settings, such a Pareto set method is not useful for pseudo-linear aggregation functions, because most such functions are linear-fractional, and single-objective problems with a linear-fractional objective function can be rewritten in terms of a linear objective with linear constraints (see e.g. ?). In our context however, the linearization would not help because it would introduce constraints involving values of the error profiles, which are not linear in general. What we gain with the reduction to cost-sensitive classification (or, equivalently, with the weighted-sum method), is that efficient algorithms for cost-sensitive classification, which are known to work in practice and are asymptotically optimal, are already known. In addition, weighted-sum method require the users to know the relative preferences of the objectives in advance, which is not known in general. Hence the weight components are unbounded. Our reduction clearly defines a bound on the possible weights (a(t)).\nThe relationship between the reduction to cost-sensitive classification and the weightedsum method allows us to discuss pseudo-linear F-measures in terms of Pareto-optimal solutions. It is well-known that in general, not all Pareto-optimal solutions can be found by the weighted-sum method; in fact, only those that are on the boundary of the convex hull of the feasible set can be reached. In general however, many classification problems have Pareto-optimal solutions that do not lie on this boundary, especially if the input space is finite (as is the case on any finite dataset). Figure 3 gives the example of the Pareto front of a binary classification problem with 3 examples. The pareto front can be depicted on a 2D plane where the axis are false positives and false negatives; up to a change of basis, this Pareto front is the ROC curve (??) for the problem. In the figure, the blue points on the left plot correspond to Pareto-optimal classifiers (none of them can be improved both in terms of proportion of false positives and false negatives), while the red curve is the Pareto set of the convex hull of the error profiles of the 8 classifiers. Our result of reduction to cost-sensitive classification proves that only the classifiers whose error profile is both Pareto-optimal and on the boundary of the convex hull are candidates as optimal classifiers for any pseudo-linear aggregation function (here, the candidates are cA, cD, cF ), even though all classifiers are optimal for some trade-off rule. For instance, cB is the optimal classifier for the rule ”‘minimize the proportion of false negatives under the constraint that the proportion of false positives is smaller than 0.1”’."
    }, {
      "heading" : "5. Experiments",
      "text" : "This section illustrates of the accuracy of the algorithms suggested by our theoretical framework, using the F1-measure, in binary and multilabel classification. Our experimental results for binary and multilabel-macro F -measure (using binary relevance) shows that (i) choosing Optimal F Classifier by minimizing 〈a, e〉 is same as choosing classifier with optimal F -measure a posteriori (ii) selecting a classifier by thresholding cost-sensitive scores is preferable to algorithms based on thresholding cost-insensitive classification scores: to maximize F -measure (iii) In case of multilabel-micro F -measure, Optimal F Classifier is the one with lowest 〈a, e〉 value.\nWe compare thresholded cost-sensitive classification, as implemented by SVMs and logistic regression (LR), with asymmetric costs, to thresholded linear classifiers (SVMs and logistic regression, with a decision threshold set a posteriori by maximizing the F1-score on the validation set). Besides, the structured SVM approach to F1-measure maximization of ?, SVMperf, provides another baseline. For completeness, we also report results for nonthresholded cost-sensitive SVMs, non-thresholded cost-sensitive logistic regression, and for the thresholded versions of SVMperf.\nSince the practical cost-sensitive algorithms are based on convex surrogate loss optimization (?), the approximate cost approximation we presented in proposition 5 will not hold in general. We call the cost given in proposition 5 as actual cost and cost used in the practical surrogate loss based algorithm as surrogate cost. Since there is no one-to-one mapping between actual cost and surrogate cost, in practical implementations we have to iterate over the convex surrogate loss for each value of the actual cost.\nSVM and LR differ in the loss they optimize (weighted hinge loss for SVMs, weighted log-loss for LR), and even though both losses are calibrated in the cost-sensitive setting\n(that is, converging toward a Bayes-optimal classifier as the number of examples and the capacity of the class of function grow to infinity) (?), they behave differently on finite datasets or with restricted classes of functions. We may also note that asymptotically, the Bayes-classifier for a cost-sensitive binary classification problem is a classifier which thresholds the posterior probability of being class 1. Thus, all methods but SVMperf are asymptotically equivalent, and our goal here is to analyze their non-asymptotic behavior on a restricted class of functions.\nFor each experiment, the training set was split at random, keeping 1/3 for the validation set used to select all hyper-parameters, based on the maximization of the F1-measure on this set. For datasets that do not come with a separate test set, the data was first split to keep 1/4 for test. All results are averaged over five random splits i.e. hold-out validation with five random splits. The algorithms have from one to four hyper-parameters: (i) all algorithms are run with L2 regularization, with a regularization parameter C ∈ {2−6, 2−5, ..., 26}; (ii) for the cost-sensitive algorithms, the cost for false negatives is chosen in {2−tt , t ∈ {0.1, 0.2, ..., 1.9}} of Proposition 4 1; (iii) for the thresholded algorithms, the threshold is chosen among all the scores of the validation examples; (iv) for kernel based SVM, we used radial basis function (RBF) kernel with γ (measure of influence of a single training example) value γ ∈ {2−6, 2−5, ..., 26}.\nThe library LIBLINEAR (?) was used to implement non-kernel SVMs2 and logistic regression. LIBSVM (?) library was used for the kernel SVM. A constant feature with value 100 (to simulate an unregularized offset) was added to each dataset."
    }, {
      "heading" : "5.1 Importance of Thresholding",
      "text" : "Although our theoretical developments do not indicate any need to threshold the scores of classifiers, the practical benefits of a post-hoc adjustment of these scores can be important in terms of F1-measure maximization, as already noted in cost-sensitive learning scenarios (??). We study the importance thresholding clasification scores a posteriori using a didactic data called “Galaxy”. The data can be visualized as given in Figure 4. The data distribution consist in four clusters of 2D-examples, indexed by z ∈ {1, 2, 3, 4}, with prior probability µ(z = 1) = 0.01, µ(z = 2) = 0.1, µ(z = 3) = 0.001, and µ(z = 4) = 0.889, with respective class prior probabilities µ(y = 1|z = 1) = 0.9, µ(y = 1|z = 2) = 0.09, µ(y = 1|z = 3) = 0.9, and µ(y = 1|z = 4) = 0. “Galaxy” is an example of highly imbalanced dataset.\nWe drew a very large sample (100,000 examples) from the distribution, whose optimal F1-measure is 67.5%. Without thresholding the scores of the classifiers, the best F1-measure among the classifiers is 58.0%, obtained by cost-sensitive SVM, whereas tuning thresholds enables to reach the optimal F1-measure for SVM\nperf and cost-sensitive SVM. On the other hand, LR is severely affected by the non-linearity of the level sets of the posterior probability distribution, and does not reach this limit (best F1-measure of 56.5%). Note also that, even with this very large sample size, the SVM and LR classifiers are very different. This result suggests that thresholding the classification scores a posteriori may improve the optimal F -scores, especially thresholding the cost-sensitive classifier scores.\n1. We take t greater than 1 in case the training asymmetry would be different from the true asymmetry (?). 2. The maximum number of iteration for SVMs was set to 50,000 instead of the default 1,000."
    }, {
      "heading" : "5.2 Binary Fβ and Multilabel MFβ",
      "text" : "The other datasets we use are Adult, RCV1, Scene, Siam and Yeast. In addition, we used a subsample from the Galaxy data to demonstrate the empirical validity of the algorithm. Adult, RCV1 and Yeast are obtained from the UCI repository3, and Scene and Siam from the Libsvm repository4. The attributes of the data used in our empirical study are given in Table 1.\nThe results for binary-Fβ and multilabel-macro-F (MFβ) are reported in Table 2 and 3 respectively. As it is evident from the experimental results, cost-sensitive learning and thresholded cost-sensitive learning give optimal results, whereas other methods performs suboptimally. But the difference between methods is less extreme than on the artificial Galaxy dataset. The Adult dataset is an example where all methods perform nearly iden-\n3. https://archive.ics.uci.edu/ml/datasets.html 4. http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html\ntical; the surrogate loss used in practice seems unimportant. On the other datasets, we observe that thresholding has relatively large impact, especially for SVMperf and costinsensitive classifiers. The unthresholded and cost-insensitive SVM and LR results are very poor compared to thresholded and cost-sensitive versions. The cost-sensitive classifiers (thresholded and unthresholded) outperforms all other methods, as suggested by the theory. Te cost-sensitive SVM is probably the method of choice to optimize binary-Fβ or multilabelmacro-F(MFβ) when predictive performance is a must. On these datasets, thresholded LR still performs reasonably well considering its relatively low computational cost. In general, on the computational cost front, LR converges faster than SVM or SVMperf.\nTable 4 presents the optimal MFβ-measure with kernel SVM. We used Radial Basis Function (RBF) as the kernel function and trained RBF SVM without a bias term. Our experiments exemplify our theoretical findings in kernel settings. In case of Scene, thresholding the cost-sensitive scores marginally improves the MF1-score whereas in case of Yeast data, cost-sensitive kernel SVM outperforms other methods. In both cases, thresholding the cost-insensitive scores deteriorates the MF1-scores."
    }, {
      "heading" : "5.3 Multilabel mFβ",
      "text" : "In case of multilabel-micro-F-measure, we compare our algorithm with a commonly used method to find best mFβ-score suggested by ?. In the proposed method, one assumes that an optimal classifier for macro-F-measure is an optimal classifier for micro-F-measure.\nHence, the micro-F-score corresponds to optimal macro-F-score is deemed as the optimal micro-F-score. We compare our algorithm for micro-F-score against the micro-F-score corresponds to the optimal macro-F-score obtained by running binary relevance as explained in section 3.2.2.\nTable 5 contains the multilabel-micro-F (mcFβ) results for the multilabel datasets. The results clearly demonstrates that selecting micro-F corresponds to maximal macro-F (correspond to Fmaxin table) always return suboptimal results. So in practice, algorithms based on per-label macro-F optimization should be avoided for micro-F optimization. In case of micro-F, effect due to thresholding is not very significant, except for RCV1 data. The unthresholded classifiers performs nearly as good as the thresholded versions. This is true for SVMperf also. As suggested by theory, cost-sensitive classification is the preferred method to optimize multilabel-micro-F. Here also, thresholded LR can be considered as an alternate option considering the computational cost.\nTable 6 presents the optimal mcFβ-measure with RBF kernel SVM. Similar to the MFβ results, thresholding the cost-sensitive score gives better mFbeta results for kernel SVM."
    }, {
      "heading" : "5.4 Cost Space Search Overhead",
      "text" : "Since the actual cost associated misclassification differs from the cost associated with surrogate loss, it introduces an extra loop in our algorithm. Hence searching for optimal cost vector in the discretized cost interval might not be a good idea, especially when the value of Φ is large. Here we do an empirical analysis of the functional dependencies between the actual cost and corresponding F -measure, and devise an improved version of the algorithms discussed in Section 3.4.\nFigure 5 contains the plot of micro-F -measure against false negative cost. From the plot, it is evident that micro-F -measure is a quasi-concave function of false negative cost. A function is quasi-concave, if every superlevel set of the function is convex (?). Formally, a function g : D ⊂ Rd → R, is quasi-concave if {x ∈ D | g(x) ≥ a} is convex. It can be verified from the plot that superlevel sets are convex. Bracketing methods (?) are extensively used to find global maxima of unimodal functions like quasi-concave function. We will not be able to use the exact bracketing algorithm to find the optimal cost, since it requires the\nknowledge of error profile associated with each value of F -measure). But we can use the idea of bracketing to limit the discretization interval.\nHere, we find three points (p, q, r), such that g(p) < g(q) > g(r), then instead of discretizing the whole interval, we can limit the discretization only to the sub-interval (p, r). We start with two intervals defined by the three points: start of the interval (0), median of the interval (1+β 2\n2 ) and the end of the interval (1 + β 2). Then we search for the\ntriplets (p, q, r) of given minimum sub-interval size inside the two intervals. In the simplest case, we find F -measure values corresponding to five points, two start points, midpoint (1+β 2\n2 ) and two midpoints of the intervals (0, 1+β2 2 ) and ( 1+β2 2 , 1 + β 2). Since the function is quasi-concave, the global maxima can be either on the mid point or on left or right of the mid point. Depending up on the F -measure values at the five points, we can limit the discretization only to one half. This way we can reduce the discretization space at least by half."
    }, {
      "heading" : "6. Conclusion",
      "text" : "We presented an analysis of F -measures, leveraging the property of pseudo-linearity of specific notions of F -measures to obtain a strong non-asymptotic reduction to cost-sensitive classification. The results hold on any dataset, for any class of function and on any data distribution assumptions (label dependent or label independent). We suggested algorithms for F -measure optimization based on minimizing the total misclassification cost of the costsensitive classification. We demonstrated experiments on linear classifiers, showing the theoretical interest of using cost-sensitive classification algorithms rather than probability thresholding. It is also shown that for F -measure maximization, thresholding even the cost-sensitive algorithms helps to achieve good performances.\nEmpirically and algorithmically, we only explored the simplest case of our result (Fβmeasure in binary classification and macro-Fβ-measure and micro-Fβ-measure in multilabel classification), but much more remains to be done. Algorithms for the optimization of the non-pseudo-linear notions of F -measures like instance-wise-Fβ-measure in multilabel classification received interest recently as well (??), but are for now limited. We also believe that our result can lead to progresses towards optimizing the micro-Fβ measure in multiclass classification."
    }, {
      "heading" : "Acknowledgments",
      "text" : "This work was carried out and funded in the framework of the Labex MS2T. It was supported by the Picardy Region and the French Government, through the program “Investments for the future” managed by the National Agency for Research (Reference ANR-11IDEX-0004-02)"
    }, {
      "heading" : "Appendix A. Proofs of Propositions and Corollaries",
      "text" : "Proposition 2 A linear-fractional function F : D ⊆ Rd → R is the ratio of linear functions F (e) = α0+〈γ,e〉α1+〈δ,e〉 . A non-constant linear-fractional function is pseudo-linear on the open\nhalf-space D = { e ∈ Rd|α1 + 〈δ, e〉 > 0 } .\nProof A linear-fractional function F : e ∈ Rd 7→ α0+〈γ,e〉α1+〈δ,e〉 , α1 + 〈δ, e〉 > 0 is pseudo-linear.\nF (e) ≤ t⇔α0 + 〈γ, e〉 ≤ t(α1 + 〈δ, e〉) ⇒(α0 − tα1) + 〈γ − tδ, e〉 ≤ 0\nNow reversing the inequality, we obtain;\nF (e) ≥ t⇔ (α0 − tα1) + 〈γ − tδ, e〉 ≥ 0\nAbove equations represent open hyperplanes.\n∇F (e) = (α1 + 〈δ, e〉)γ − (α0 + 〈γ, e〉)δ (α1 + 〈δ, e〉)2 6= 0\nThe gradient term is constant if δ and γ are propotional and non-zero otherwise. The above conditions confirm the requirements for the pseudo-linearity given in Theorem 1 and hence the result.\nProposition 4 Let F ? = max e∈E(H) F (e), we have: e? ∈ argmin e∈E(H)\n〈 a ( F ? ) , e 〉 ⇔ F (e?) = F ? .\nProof Let e? ∈ argmaxe′∈E(H) F (e′), and let a? = a(F (e?)) = a ( F ? ) . We first notice that pseudo-linearity implies that the set of e ∈ D such that 〈a?, e〉 = 〈a?, e?〉 corresponds to the level set {e ∈ D|F (e) = F (e?) = F ?}. Thus, we only need to show that e? is a minimizer of e′ 7→ 〈a?, e′〉 in E (H). To see this, we notice that pseudo-linearity of F (see Theorem 1) implies\n∀e′ ∈ D, F (e?) ≥ F ( e′ ) ⇒ 〈a?, e?〉 ≤ 〈 a?, e′ 〉 ,\nand since e? maximizes F in E (H), we get e? ∈ argmine′∈E(H) 〈a?, e′〉 .\nProposition 5 Let ε0 ≥ 0 and ε1 ≥ 0, and assume that there exists Φ > 0 such that for all e, e′ ∈ E (H) satisfying F (e′) > F (e), we have:\nF ( e′ ) − F (e) ≤ Φ 〈 a ( F (e′) ) , e− e′ 〉 . (1)\nThen, let us take e? ∈ argmaxe′∈E(H) F (e′), and denote a? = a(F (e?)). Let furthermore â ∈ Rd+ and h ∈ H satisfying the following conditions:\n(i) ‖â− a?‖2 ≤ ε0 , (ii) 〈â, e〉 ≤ min e′∈E(H)\n〈 â, e′ 〉 + ε1 .\nWe have: ∀e ∈ E (H) , F (e) ≥ F (e?)− Φ · (2ε0M + ε1) , where M = max e′∈E(H)\n∥∥e′∥∥ 2 .\nProof Let e′ ∈ E (H), we can write 〈â, e′〉 = 〈a?, e′〉 + 〈â− a?, e′〉. Applying CauchySchwarz inequality and condition (i), we get〈\nâ, e′ 〉 ≤ 〈 a?, e′ 〉 + ‖â− a?‖2 ∥∥e′∥∥ 2\n≤ 〈 a?, e′ 〉 + ε0M .\nIn particular, we have:\nmin e′∈E(H)\n〈 â, e′ 〉 ≤ min\ne′∈E(H)\n〈 a?, e′ 〉 + ε0M\n≤ 〈a?, e?〉+ ε0M , (2)\nsince e? ∈ argmine′∈E(H) 〈a?, e′〉 as shown in Proposition 4. Similarly, we have 〈a?, e〉 = 〈â, e〉+〈a? − â, e〉; applying Cauchy-Schwarz and conditions (i) and (ii), we have:\n∀e ∈ E (H) , 〈a?, e〉 ≤ 〈â, e〉+ ‖a? − â‖2 ‖e‖2 ≤ 〈â, e〉+ ε0M ≤ min\ne′∈E(H)\n〈 â, e′ 〉 + ε1 + ε0M . (3)\nCombining Inequalities (2) and (3), we get\n∀e ∈ E (H) , 〈a?, e〉 ≤ 〈a?, e?〉+ ε1 + 2ε0M ∀e ∈ E (H) , 〈a?, e− e?〉 ≤ ε1 + 2ε0M ,\nand the final result follows from Assumption (1).\nProposition 6 Fβ-measures defined in Section 3.2.1 satisfy the conditions of Proposition 5 with:\n(binary) Fβ : Φ = 1\nβ2P1 and a : t ∈ [0, 1] 7→ (1+β2− t, t, 0, 0) .\nProof Since Fβ is linear-fractional as a function of the error profile, it is pseudo-linear on the open convex set {e ∈ Rd|(1+β2)P1−e1 +e2 > 0} (i.e. when the denominator is strictly positive). Moreover, for every set of classifiers H, we have E (H) ⊆ D0 = [O,P1] × [0, 1 − P1]× [1− P1]× [1, P1].\nNow, by the definition of Fβ, we have\n∀e ∈ D0, Fβ(e) ≤ t ⇔ (1 + β2 − t)e1 + te2 + (1 + β2)P1(t− 1) ≥ 0 ,\nand the equation still holds by reversing the inequalities. We thus have that a(t) = (1 + β2 − t, t, 0, 0) satisfy the condition of Theorem 1 (with b(t) = (1 + β2)P1(t− 1)).\nWe now show that the condition of Equation 1 is satisfied for a(t) = (1 + β2 − t, t, 0, 0) and all e, e′ ∈ D0 by taking Φ = 1β2P1 . To that end, let e and e ′ in E (H) and t and t′ in\nR such that t′ = Fβ(e′) > Fβ(e) = t. Denote by ε the quantity 〈a(t′), e− e′〉. Note that ε > 0 and that:\n0 = 〈a(t), e〉 + b(t) = (1 + β2 − t)e1 + te2 + (1 + β2)P1(t− 1) 0 = 〈a(t′), e′〉 + b(t′) = (1 + β2 − t′)e′1 + t′e′2 + (1 + β2)P1(t′ − 1) ε = 〈a(t′), e− e′〉 = (1 + β2 − t′)e1 + t′e2 + (1 + β2)P1(t′ − 1)\nwhere the first two equalities are given by the definition of hyperplane corresponds to Fβ(e) = t and Fβ(e\n′) = t′, and the last one is obtained from the definition of 〈a(t′), e− e′〉. Taking the difference of the third and first equality, we obtain:\nε = (t− t′)e1 + (t′ − t)e2 + (1 + β2)P1(t′ − t)\nFrom which we get, since (1 + β2)P1 − e1 + e2 > 0 for e ∈ D0:\nFβ(e ′)− Fβ(e) = t′ − t = ε ( (1 + β2)P1 − e1 + e2 )−1 ≤ ε β2P1 ,\nbecause β2P1 the minimum of (1 + β 2)P1 − e1 + e2 on D0 (taking e1 = P1 and e2 = 0). We obtain the result since ε = 〈a(t′), e− e′〉 by definition.\nCorollary 7 For the F1-measure, the optimal classifier is the solution to the cost-sensitive binary classifier with costs ( 1− F ?2 , F ? 2 ) Proof From Proposition 4, by putting β = 1, we have\n(2− F ?)e1 + e2F ? + 2P1(F ? − 1) ≥ 0\ndividing by 2, we get\n(1− F ?\n2 )e1 + e2\nF ?\n2 + P1(F\n? − 1) ≥ 0\nCost vector, a(t), according to Theorem 1 is (1− F ?2 , F ? 2 ).\nProposition 8 multilabel micro-F (mFβ) measures defined in Section 3.2.2 satisfy the conditions of Proposition 5 with:\n(multilabel–micro) mFβ : Φ = 1 β2 ∑L k=1 Pk and ai(t) = { 1 + β2 − t if i is odd t if i is even .\nProof\nmFβ(e) ≤ t =⇒ (1 + β2)\n∑L k=1(Pk − e2k−1)\n(1 + β2) ∑L k=1 Pk + ∑L k=1(e2k − e2k−1) ≤ t\n=⇒ (1 + β2 − t) L∑ k=1 e2k−1 + t L∑ k=1 e2k + (1 + β 2)(t− 1) L∑ k=1 Pk ≥ 0\nThus, we have that\nai(t) = { 1 + β2 − t if i is odd t if i is even\nFollowing the same arguments as in Proposition: 4, we get\nmFβ(e ′)−mFβ(e) = t′ − t = ε [ (1 + β2) L∑ k=1 Pk − L∑ k=1 e2k−1 + L∑ k=1 e2k ]−1 ≤ ε β2 ∑L k=1 Pk ,\nbecause β2 ∑L k=1 Pk the minimum of (1 + β 2) ∑L k=1 Pk − ∑L k=1 e2k−1 + ∑L\nk=1 e2k in the respective domain (taking e2k−1 = Pk and e2k = 0). We obtain the result since ε = 〈a(t′), e− e′〉 by definition.\nProposition 9 multiclass micro-F (mcFβ) defined in Section 3.2.3 satisfy the conditions of Proposition 5 with:\n(multiclass–micro) mcFβ : Φ = 1\nβ2(1− P1) and ai(t) =  1 + β2 − t if i is odd and i 6= 1 t if i = 1\n0 otherwise\n.\nProof\n(multiclass–micro) mcFβ : Φ = 1\nβ2(1− P1) and ai(t) =  1 + β2 − t if i is odd and i 6= 1 t if i = 1\n0 otherwise\n.\nmcFβ(e) ≤ t =⇒ (1 + β2)(1− P1 −\n∑L k=2 e2k−1)\n(1 + β2)(1− P1)− ∑L k=2 e2k−1 + e1 ≤ t\n=⇒ (1 + β2 − t) L∑ k=2 e2k−1 + te1 + (1 + β 2)(t− 1)(1− P1) ≥ 0\nThus, we have that\nai(t) =  1 + β2 − t if i is odd and i 6= 1 t if i = 1\n0 otherwise\nFollowing the same arguments as in Proposition:4, we get\nmcFβ(e ′)−mcFβ(e) = t′ − t = ε [ (1 + β2)(1− P1)− L∑ k=2 e2k−1 + e1 ]−1 ≤ ε β2(1− P1) ,\nbecause β2(1−P1) the minimum of (1+β2)(1−P1)− ∑L k=2 e2k−1+e1 in the respective domain\n(taking ∑L\nk=2 e2k−1 = 1− P1 and e1 = 0). We obtain the result since ε = 〈a(t′), e− e′〉 by definition."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2015,
    "abstractText" : "State of the art classification algorithms are designed to minimize the misclassification error of the system, which is a linear function of the per-class false negatives and false positives. Nonetheless non-linear performance measures are widely used for the evaluation of learning algorithms. For example, F -measure is a commonly used non-linear performance measure in classification problems. We study the theoretical properties of a subset of non-linear performance measures called pseudo-linear performance measures which includes F -measure, Jaccard index, among many others. We establish that many notions of F -measures and Jaccard index are pseudo-linear functions of the per-class false negatives and false positives for binary, multiclass and multilabel classification. Based on this observation, we present a general reduction of such performance measure optimization problem to cost-sensitive classification problem with unknown costs. We then propose an algorithm with provable guarantees to obtain an approximately optimal classifier for the F -measure by solving a series of cost-sensitive classification problems. The strength of our analysis is to be valid on any dataset and any class of classifiers, extending the existing theoretical results on binary F -score, which are asymptotic in nature. Our analysis shows that thresholding cost-insensitive scores, a common technique employed to optimize F -measure, yields sub-optimal results. We also establish the multi-objective nature of the F -measure maximization problem by linking the algorithm with the weighted-sum approach used in multi-objective optimization. We present numerical experiments to illustrate the relative importance of cost asymmetry and thresholding when learning linear classifiers on various F -measure optimization tasks.",
    "creator" : "LaTeX with hyperref package"
  }
}