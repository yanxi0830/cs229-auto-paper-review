{
  "name" : "1702.00763.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Natasha: Faster Stochastic Non-Convex Optimization Via Strongly Non-Convex Parameter",
    "authors" : [ "Zeyuan Allen-Zhu" ],
    "emails" : [ "zeyuan@csail.mit.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Our methods outperform the best known results for a wide range of σ, and can also be used to find approximate local minima.\nIn particular, we find an interesting dichotomy: there exists a threshold σ0 so that the fastest methods for σ > σ0 and for σ < σ0 have drastically different behaviors: the former scales with n2/3 and the latter scales with n3/4."
    }, {
      "heading" : "1 Introduction",
      "text" : "We study the fundamental problem of composite non-convex minimization:\nmin x∈Rd\n{ F (x) def = ψ(x) + f(x) def = ψ(x) + 1\nn\nn∑\ni=1\nfi(x) }\n(1.1)\nwhere each fi(x) is nonconvex but smooth, and ψ(·) is proper convex and relatively simple. We are interested in finding a point x that is an approximate local minimum of F (x).\n• The finite-sum structure f(x) = 1n ∑n\ni=1 fi(x) arises prominently in large-scale problems and especially in machine learning. In particular, when minimizing loss over a training set, each example i in the set can correspond to one loss function fi(·) in the summation. This finite-sum structure allows one to perform stochastic gradient descent with respect to a random ∇fi(x). • The additional term ψ(x), usually called the proximal term, adds more flexibility to the model.\nFor instance, if ψ(x) is the indicator function of a convex set, then problem (1.1) becomes constraint minimization; if ψ(x) = ‖x‖1, then we can allow problem (1.1) to perform feature selection. In general, ψ(x) has to be a simple function where the projection operation arg minx{ψ(x) + 12η‖x−x0‖2} is efficiently computable. At a first reading of this paper, one can assume ψ(x) ≡ 0 for simplicity.\nIn many interesting practical problems —such as training neural nets and classifications with sigmoid loss, see [3] for details— neither fi(x) or the overall f(x) is convex. However, there are very limited research for this challenging non-convex family of problems.\nar X\niv :1\n70 2.\n00 76\n3v 1\n[ m\nat h.\nO C\n] 2\nF eb"
    }, {
      "heading" : "1.1 Strongly Non-Convex Optimization",
      "text" : "We mainly focus on the case when each fi(x) is L-smooth, meaning all the eigenvalues of ∇2fi(x) lie in [−L,L], and their average f(x) = 1n ∑n i=1 fi(x) is σ-strongly nonconvex, meaning\nall the eigenvalues of ∇2f(x) lie in [−σ, L] for some σ ∈ [0, L].1\nWe emphasize here that this parameter σ is analogous to the strong-convexity parameter µ for convex optimization, where all the eigenvalues of ∇2f(x) lie in [µ,L] for some µ > 0.\nWe wish to find an ε-approximate stationary point (a.k.a. critical point) of F (x), that is any point x satisfying ‖Gη(x)‖ ≤ ε where G(x) is the so-called gradient mapping of F (x). Note that in the special case of ψ(·) ≡ 0, gradient mapping G(x) is the same as gradient ∇f(x), so x satisfies ‖∇f(x)‖ ≤ ε.\nSince f(·) is σ-strongly nonconvex, any ε-approximate stationary point is automatically also an (ε, σ)-approximate local minimum — meaning that the Hessian of the output point ∇2f(x) −σI is approximately positive semidefinite (PSD).\nMotivations and Remarks\n• We focus on strongly non-convex optimization because introducing this parameter σ allows us to perform a more refined study of non-convex optimization. If σ equals L then L-strongly nonconvex optimization is equivalent to the general non-convex optimization.\n• We focus only on finding stationary points as opposed to local minima, because in a recent study —see Appendix A— researchers have shown that finding (ε, δ)-approximate local minima reduces to finding ε-approximate stationary points in an O(δ)-strongly nonconvex function.\n• Parameter σ is usually not constant and can be much smaller than L. In particular, second-order literatures usually find (ε, √ ε)-approximate local minima [18], and this corresponds to σ = √ ε."
    }, {
      "heading" : "1.2 Known Results",
      "text" : "Despite the widespread use of nonconvex models in machine learning and related fields, our understanding to non-convex optimization is still very limited. Until recently, nearly all research papers have been mostly focusing on either σ = 0 so f(x) is convex, or σ = L so f(x) is simply L-smooth:\n• If σ = 0, the accelerated SVRG method [8, 21] find a point x satisfying F (x) − F (x∗) ≤ ε, in gradient complexity Õ ( n+ n3/4 √ L/ε ) .2\n• If σ = L, the SVRG method [3] finds an ε-approximate stationary point of F (x) with gradient complexity O(n+ n2/3L/ε2).\n• If σ = L, gradient descent finds an ε-approximate stationary point of F (x) with gradient complexity O(nL/ε2).\nThroughout this paper, we refer to gradient complexity as the total number of stochastic gradient computations ∇fi(x) and proximal computations y ← Proxψ,η(x) def= arg miny{ψ(y) + 12α‖y−x‖2}.3\nVery recently, it was observed by two independent groups [1, 9] —although implicitly, see Section 2.1— that for solving the σ-strongly nonconvex problem, one can repeatedly regularize F (x) to make it σ-strongly convex, and then apply the accelerated SVRG method to minimize this new regularized function. Under mild assumption σ ≥ ε2, this simple approach\n1This definition also applies to functions f(x) that are not twice differentiable, see Section 2 for details. 2We use the Õ notation to hide poly-logarithmic factors in n,L, 1/ε. 3Some authors also refer to them as incremental first-order oracle (IFO) and proximal oracle (PO) calls. In most machine learning applications, each IFO and PO call can be implemented to run in time O(d) where d is the dimension of the model, or even in time O(s) if s is the average sparsity of the data vectors.\n• finds an ε-approximate stationary point in gradient complexity Õ ( nσ+n3/4 √ Lσ\nε2\n) .\nWe call this method repeatSVRG in this paper. Unfortunately, repeatSVRG is even slower than the vanilla SVRG for σ = L by a factor n1/3.\n1.3 Our New Results\nIn this paper, we identify an interesting dichotomy with respect to the spectrum of the nonconvexity parameter σ ∈ [0, L]. In particular, we showed that if σ ≤ L/√n, then our new method Natasha finds an ε-approximate stationary point of F (x) in gradient complexity\nO ( n log 1\nε + n2/3(L2σ)1/3 ε2\n) .\nIn other words, together with repeatSVRG, we have improved the best known gradient complexity for σ-stringly nonconvex optimization to4\nÕ ( min {n3/4\n√ Lσ\nε2 , n2/3(L2σ)1/3 ε2\n})\nand the first term in the min is smaller if σ > L/ √ n and the second term is smaller if σ < L/ √ n. We illustrate our performance improvement in Figure 1. Note that our result matches that of SVRG [3] for σ = L, and has a much simpler analysis.\nAdditional Results. One can take a step further and ask what if each function fi(x) is (`1, `2)- smooth for parameters `1, `2 ≥ σ. This means all the eigenvalues of ∇2fi(x) lie in [−`2, `1].\nWe show that a variant of our method, which we call Natashafull, solves this more refined\nproblem of (1.1) with total gradient complexity O ( n log 1ε + n2/3(`1`2σ)1/3 ε2 ) as long as `1`2 σ2 ≤ n2. Remark 1.1. In many applications, `1 and `2 can be of different magnitudes. Perhaps the most influential example is finding the leading eigenvector of a symmetric matrix. Using the so-called shift-and-invert reduction [12], computing leading eigenvector reduces to a convex version of problem (1.1) where each fi(x) is (λ, 1)-smooth for some λ 1. Other examples include all the applications that are built on shift-and-invert, including high rank SVD/PCA [5], canonical component analysis [4], online matrix learning [6], and approximate local minima algorithms [1, 9]."
    }, {
      "heading" : "1.4 Our Techniques",
      "text" : "We first recall the main ideas of stochastic variance-reduced gradient methods, such as SVRG [14]. The SVRG method keeps a snapshot point x̃ for every epoch of n iterations, and compute the full gradient ∇f(x̃) only for snapshots. Then, for each iteration at point xt, SVRG defines gradient estimator ∇̃ = ∇fi(xt) −∇fi(x̃) +∇f(x̃) which satisfies Ei[∇̃] = ∇f(xt), and performs proximal update xt+1 ← Proxψ,α ( xt − α∇̃ ) for some learning rate α.5\nNote that the epoch length of SVRG is always n (or a constant multiple of n in practice), because this ensures the computation of ∇̃ is of amortized gradient complexity O(1). The per-iteration complexity of SVRG is thus the same as the traditional stochastic gradient descent (SGD).\n4We remark here that this is under mild assumptions for ε being sufficiently small. For instance, the result of [1, 9] requires ε2 ≤ σ. In our result, the term n log 1\nε disappears when ε6 ≤ L2σ/n.\n5Recall that if ψ(·) ≡ 0 then we would have xt+1 ← xt − α∇̃.\nIn nearly all the aforementioned results for strongly nonconvex optimization, researchers have either directly applied SVRG [3, 19] (for the case σ = L), or repeatedly applied SVRG [1, 9] (for general σ ∈ [0, L]). This puts some limitation in the algorithmic design, because SVRG requires each epoch to be of length exactly n.\nIn this paper, we propose Natasha and Natashafull, two methods that are no longer blackbox reductions to SVRG. Both of them still divide iterations into epochs of length n, and compute gradient estimators ∇̃ the same way as SVRG. However, we do not apply compute xt−α∇̃ directly.\n• In our base algorithm Natasha, we further divide each epoch into p sub-epochs, each with a starting vector x̂. Then, we replace the use of ∇̃ with ∇̃ + σ(xt − x̂). This is equivalent to saying that we replace f(x) with its regularized version f(x) + σ‖x− x̂‖2, with x̂ varying across sub-epochs. We provide pseudocode in Algorithm 1 and illustrate it in Figure 2.\nWe view this additional term σ(xt − x̂) as a type of retraction, which stabilizes the algorithm by moving the vector a bit in the backward direction towards x̂.\n• In our full algorithm Natashafull, we add one more ingredient on top of Natasha. That is, we perform updates zt+1 ← Proxψ,α(zt − α∇̃) with respect to a different sequence {zt}, and then define xt = 1 2zt + 1 2 x̃ and compute gradient estimators ∇̃ at points xt. We provide pseudocode\nin Algorithm 2 and illustrate it in Figure 3.\nWe view this averaging xt = 1 2zt + 1 2 x̃ as another type of retraction, which stabilizes the algorithm by moving the vector a bit in the backward direction towards x̃. The technique of having the gradients computed at a point xt but moving with respect to a different sequence zt is related to the Katyusha momentum recently developed for convex optimization [2]."
    }, {
      "heading" : "1.5 Other Related Work",
      "text" : "Methods based on variance-reduced stochastic gradients were first introduced for convex optimization. The first such method is SAG by Schmidt et al [20]. The two most popular choices for gradient estimators are the SVRG-like one we adopted in this paper (independently introduced by [14, 22], and the SAGA-like one introduced by [10]. In nearly all applications, the results proven for SVRG-like estimators and SAGA-like estimators are simply exchangeable (therefore, the results of this paper naturally generalize to SAGA-like estimators as well).\nThe first “non-convex use” of variance reduction is by Shalev-Shwartz [21] who assumes that each fi(x) is non-convex but their average f(x) is still convex. This result has been slightly improved to several more refined settings [8]. The first truly non-convex use of variance reduction (i.e., for f(x) being also non-convex) is independently by [3] and [19]. First-order algorithms only find stationary points (unless there is sufficient assumption on the randomness of the data), and converge no faster than 1/ε2.\nWhen the second-order Hessian information is used, one can (1) find local minima instead of stationary points, and (2) improve the 1/ε2 rate to 1/ε1.5. The first such result is by cubic regularized Newton’s method [18]; however, its per-iteration complexity is very slow. Very recently, two independent groups of authors tackled this problem from a somewhat similar viewpoint [1, 9]: if the computation of Hessian-vector multiplications (i.e., ( ∇2fi(x) ) v) is on the same order of the\ncomputation of gradients ∇fi(x),6 then one can obtain a (ε, √ ε)-approximate local minimum in gradient complexity Õ ( n ε1.5 + n 3/4 ε1.75 ) , if we use big-O to also hide dependencies on the smoothness\n6A lot of interesting problems satisfy this property, including training neural nets.\nparameters.7 Although Carmon et al. [9] only stated a complexity of Õ (\nn ε1.75\n) in the non-stochastic\nsetting, their result generalizes to our stated complexity in the stochastic setting. As we have argued in Appendix A, both these methods reduce the problem of finding (ε, √ ε)-approximate local minima to that of finding ε-approximate stationary points in √ ε-strongly nonconvex functions.\nOther related papers include Ge et al. [13] where the authors showed that a noise-injected version of SGD converges to local minima instead of critical points, as long as the underlying function is “strict-saddle.” Their theoretical running time is a large polynomial in the dimension. Lee et al. [15] showed that gradient descent, starting from a random point, almost surely converges to a local minimum of a “strict-saddle” function. The rate of convergence required is somewhat unknown."
    }, {
      "heading" : "2 Preliminaries",
      "text" : "Throughout this paper, we denote by ‖ · ‖ the Euclidean norm. We use i ∈R [n] to denote that i is generated from [n] = {1, 2, . . . , n} uniformly at random. We denote by ∇f(x) the full gradient of function f if it is differentiable, and ∂f(x) any subgradient if f is only Lipschitz continuous at point x. We let x∗ be any minimizer of F (x).\nRecall some definitions on strong convexity (SC), strongly nonconvexity, and smoothness.\nDefinition 2.1. For a function f : Rd → R, • f is σ-strongly convex if ∀x, y ∈ Rd, it satisfies f(y) ≥ f(x) + 〈∂f(x), y − x〉+ σ2 ‖x− y‖2. • f is σ-strongly nonconvex if ∀x, y ∈ Rd, it satisfies f(y) ≥ f(x) + 〈∂f(x), y − x〉 − σ2 ‖x− y‖2. • f is (`1, `2)-smooth if ∀x, y ∈ Rd, it satisfies\nf(x) + 〈∇f(x), y − x〉+ `12 ‖x− y‖2 ≥ f(y) ≥ f(x) + 〈∇f(x), y − x〉 − `22 ‖x− y‖2 . • f is L-smooth if it is (L,L)-smooth.\nThe (`1, `2)-smoothness parameters were introduced in [8] to tackle the convex setting of problem (1.1). The notion of strong nonconvexity is also known as “lower smoothness [8]” or “almost convexity [9]”. We refrain from using the name “almost convexity” because it coincides with several other definitions in optimization literatures.\nDefinition 2.2. Given a parameter η > 0, the gradient mapping of F (·) in (1.1) at point x is\nGη(x) def= 1\nη\n( x− x′ ) where x′ = arg min\ny\n{ ψ(y) + 〈∇f(x), y〉+ 1\n2η ‖y − x‖2\n}"
    }, {
      "heading" : "In particular, if ψ(·) ≡ 0, then Gη(x) ≡ ∇f(x).",
      "text" : "The following theorem for the SVRG method can be found for instance in [8], which is built on top of the results [11, 16, 21]:\nTheorem 2.3 (SVRG). Let G(y) def = ψ(y) + 1n ∑n i=1 gi(y) be σ-strongly convex, then the SVRG method finds a point y satisfying G(y)−G(y∗) ≤ ε • with gradient complexity is O ( (n+ L 2\nσ2 ) log 1ε ) , if each gi(·) is L-smooth (for L ≥ σ); or\n• with gradient complexity is O ( (n+ `1`2\nσ2 ) log 1ε ) , if each gi(·) is (`1, `2)-smooth (for `1, `2 ≥ σ).\nIf one performs acceleration the running times become Õ ( n+n3/4 √ L/σ ) and Õ ( n+n3/4(`1`2σ 2)1/4 ) .\n7More precisely, they obtain an (ε, √ L2ε)-approximate local minimum using gradient complexity Õ ( n √ L2\nε1.5 +\nn3/4L 1/4 2 L 1/2\nε1.75\n) where L2 is the second-order smoothness of f(·)."
    }, {
      "heading" : "2.1 RepeatSVRG",
      "text" : "We recall the idea behind a simple algorithm —that we call repeatSVRG— which finds the εapproximate stationary points for problem (1.1) when f(x) is σ-strongly nonconvex. The algorithm is divided into iterations. In each iteration t, consider a modified function Ft(x) def = F (x)+σ‖x−xt‖2. It is easy to see that Ft(x) is now σ-strongly convex, so one can apply the accelerated SVRG method to minimize Ft(x). Let xt+1 be any sufficiently accurate approximate minimizer for Ft(x). 8\nNow, one can prove (c.f. Section 4) that that xt+1 is an O(σ‖xt−xt+1‖)-approximate stationary point for F (x). Therefore, if σ‖xt−xt+1‖ ≤ ε we can stop the iterative process because we already have an O(ε)-approximate stationary point. If σ‖xt−xt+1‖ > ε , then it must satisfy that F (xt)− F (xt+1) ≥ σ‖xt− xt+1‖2 ≥ Ω(ε2/σ), but this cannot happen for more than T = O ( σ ε2\n(F (x0)−F ∗) times. Therefore, the total gradient complexity is T multiplied with the complexity of accelerated SVRG in each iteration (which is Õ(n+ n3/4 √ L/σ) according to Theorem 2.3).\nWe remark here that the above complexity of repeatSVRG can be inferred from papers [1, 9], but is not explicitly stated. For instance, the paper [9] does not allow F (x) to have a non-smooth proximal term ψ(x), and applies accelerated gradient descent instead of accelerated SVRG."
    }, {
      "heading" : "3 Our Algorithms",
      "text" : "We introduce two variants of our algorithms: (1) base method Natasha targets on the simple regime when f(x) and each fi(x) are both L-smooth, and (2) full method Natasha\nfull targets on the more refined regime when f(x) is L-smooth but each fi(x) is (`1, `2)-smooth.\nBoth methods follow the general idea of variance-reduced stochastic gradient descent: in each inner-most iteration, they compute a gradient estimator ∇̃ that is of the form ∇̃ = ∇f(x̃)−∇fi(x̃)+ ∇fi(x) and satisfies Ei∈R [∇̃] = ∇f(x). Here, x̃ is a snapshot point that is changed once every n iterations (i.e., for each different k = 1, 2, . . . , T ′), and we call it a full epoch for every distinct k. Notice that the amortized gradient complexity for computing ∇̃ is O(1) per-iteration.\nIn Natasha, as illustrated by Figure 2, we divide each full epoch into p sub-epochs s = 0, 1, . . . , p − 1, each of length m = n/p. In each sub-epoch s, we start with a point x0 = x̂, and replace f(x) with its regularized version fs(x) def = f(x) + σ‖x − x̂‖2. Then, in each iteration t of the sub-epoch s, we\n• compute gradient estimator ∇̃ with respect to fs(xt), and • perform update xt+1 = arg miny { ψ(y) + 〈∇̃, y〉+ 12α‖y − xt‖2 } with learning rate α.\n8Since the accelerated SVRG method has a linear convergence rate for strongly convex functions, the complexity to find such xt+1 only depends (poly-)logarithmically on its accuracy.\nEffectively, the introduction of the regularizer σ‖x− x̂‖2 makes sure that when performing update xt ← xt+1, we also move a bit towards point x̂ (i.e., retraction by regularization). Finally, when the sub-epoch is done, we define x̂ to be a random one from {x0, . . . , xm−1}.\nIn Natashafull, as illustrated by Figure 3, we also divide each full epoch into p sub-epochs. In each sub-epoch s, we start with a point x0 = z0 = x̂ and define f s(x) def = f(x)+σ‖x− x̂‖2. However, this time in each iteration t, we\n• compute gradient estimator ∇̃ with respect to fs(xt), • perform update zt+1 = arg miny { ψ(y) + 〈∇̃, y〉+ 12α‖y − zt‖2 } with learning rate α, and\n• choose xt+1 = 12zt+1 + 12 x̃. Effectively, the regularizer σ‖x − x̂‖2 makes sure that when performing updates, we move a bit towards point x̂ (i.e., retraction by regularization); at the same time, the choice xt+1 = 1 2zt+1 + 1 2 x̃ makes sure we also move a bit towards point x̃ (i.e., retraction by the so-called “Katyusha momentum”9). Finally, when the sub-epoch is over, we define x̂ to be a random one from the set {x0, . . . , xm−1}, and move to the next sub-epoch."
    }, {
      "heading" : "4 A Sufficient Stopping Criterion",
      "text" : "In this section, we present a sufficient condition for finding approximate stationary points in a σ-strongly nonconvex function. Lemma 4.1 below states that, if we regularize the original function with G(x) def = F (x)+σ‖x−x̂‖2 for some arbitrary point x̂, then any sufficiently accurate approximate minimizer of G(x) is an approximate saddle-point for F (x).\nLemma 4.1. Suppose G(y) = F (y)+σ‖y− x̂‖2 for some given point x̂, and let x∗ be the minimizer of G(y). If we minimize G(y) and obtain a point x satisfying\nG(x)−G(x∗) ≤ δ2σ , (4.1) then for every η ∈ (0, 1max{L,4σ}) we have the gradient mapping\n‖Gη(x)‖2 ≤ 12σ2‖x∗ − x̂‖2 +O ( δ2 ) .\n(Notice that when ψ(x) ≡ 0 this lemma is trivial, and can be found for instance in [9]). 9The idea for this second kind of retraction, and the idea of having the updates on a sequence zt but computing gradients at points xt, is largely motivated by our recent work on the Katyusha momentum and the Katyusha acceleration [2].\nAlgorithm 1 Natasha(x∅, p, T ′, α) Input: starting vector x∅, sub-epoch count p ∈ [n], epoch count T ′, learning rate α > 0. Output: vector xout.\n1: x̂← x∅; m← n/p; X ← []; 2: for k ← 1 to T ′ do T ′ full epochs 3: x̃← x̂; µ← ∇f(x̃); 4: for s← 0 to p− 1 do p sub-epochs in each epoch 5: x0 ← x̂; X ← [X, x̂]; 6: for t← 0 to m− 1 do m iterations in each sub-epoch 7: i← a random choice from {1, · · · , n}. 8: ∇̃ ← ∇fi(xt)−∇fi(x̃) + µ+ 2σ(xt − x̂) Ei[∇̃] = ∇ ( f(x) + σ‖x− x̂‖2 )∣∣ xt\n9: xt+1 = arg miny∈Rd { ψ(y) + 12α‖y − xt‖2 + 〈∇̃, y〉 }\n10: end for 11: x̂← a random choice from {x0, x1, . . . , xm−1}; for practitioners, choose the average 12: end for 13: end for 14: x̂← a random vector in X; for practitioners, choose the last 15: xout ← an approximate minimizer of G(y) def= F (y) + σ‖y − x̂‖2 using SVRG. 16: return xout. it suffices to run SVRG for O(n log 1\nε ) iterations.\nAlgorithm 2 Natashafull(x∅, p, T ′, α) Input: starting vector x∅, sub-epoch count p ∈ [n], epoch count T ′, learning rate α > 0. Output: vector xout.\n1: x̂← x∅; m← n/p; X ← []; 2: for k ← 1 to T ′ do T ′ full epochs 3: x̃← x̂; µ← ∇f(x̃); 4: for s← 0 to p− 1 do p sub-epochs in each epoch 5: z0 ← x̂; x0 ← x̂; X ← [X, x̂]; 6: for t← 0 to m− 1 do m iterations in each sub-epoch 7: i← a random choice from {1, · · · , n}; 8: ∇̃ ← ∇fi(xt)−∇fi(x̃) + µ+ 2σ(xt − x̂); Ei[∇̃] = ∇ ( f(x) + σ‖x− x̂‖2 )∣∣ xt\n9: zt+1 = arg miny∈Rd { ψ(y) + 12α‖y − zt‖2 + 〈∇̃, y〉 } ;\n10: xt+1 = 1 2zt+1 + 1 2 x̃; Katyusha momentum xt+1 = (1− β)zt+1 + βx̃\ntheory predicts β = Θ(σ(`1+`2) `1`2 ) gives the best performance\nβ = 1/2 however leads to the simplest proof 11: end for 12: x̂← a random choice from {x0, x1, . . . , xm−1}; for practitioners, choose the average 13: end for 14: end for 15: x̂← a random vector in X; for practitioners, choose the last 16: xout ← an approximate minimizer of G(y) def= F (y) + σ‖y − x̂‖2 using SVRG. 17: return xout. it suffices to run SVRG for O(n log 1\nε ) iterations.\nProof. Let x∗ be the (unique) minimizer of G(y). Define auxiliary functions:\nΦ(y) def = ψ(y) +\n1\n2η ‖y − x‖2 + 〈∇f(x), y − x〉 − ψ(x) and Φ(y) def= Φ(y) + σ‖y − x̂‖2 − σ‖x− x̂‖2\nand letting z = arg miny Φ(y) and z = arg miny Φ(y). Observe that\n• Φ(·) is 1η -strongly convex so −Φ(z) = Φ(x)− Φ(z) ≥ 12η‖z − x‖2; • Φ(·) is 1η -strongly convex so Φ(z) ≥ Φ(z) + 12η‖z − z‖2; • Φ(z) ≥ G(z)−G(x) ≥ G(x∗)−G(x) ≥ −δ2σ (because η ≤ 1/L and f(·) is L-smooth).\nSumming the three inequalities up we have\nσ‖z − x̂‖2 − σ‖x− x̂‖2 ≥ −δ2σ + 1 2η ‖z − x‖2 + 1 2η ‖z − z‖2 .\nSince we have inequality ‖z − x̂‖2 = ‖(z − z) + (z − x̂)‖2 ≤ (1 + 1/β)‖(z − z)‖2 + (1 + β)‖(z − x̂)‖2 for any β > 0, we can choose β = 4ησ and obtain\n(σ + 1 4η )‖(z − z)‖2 + (σ + 4ησ2)‖(z − x̂)‖2 − σ‖x− x̂‖2 ≥ −δ2σ + 1 2η ‖z − x‖2 + 1 2η ‖z − z‖2\n=⇒ (σ + 4ησ2)‖z − x̂‖2 − σ‖x− x̂‖2 ≥ −δ2σ + 1 2η ‖z − x‖2\n(4.2)\nwhere the implication uses the fact that 14η ≥ σ. At this point, notice that:\n• We have ‖x− x∗‖2 ≤ 2σ (G(x)−G(x∗)) ≤ 2δ2 by the strong convexity of G(·), and thus −σ‖x− x̂‖2 ≤ −(σ − ησ2)‖x∗ − x̂‖2 +O(δ2/η) .\n• We have ‖z − x∗‖2 ≤ 2σ (G(z)−G(x∗)) ≤ 2δ2 because G(z) ≤ G(x), and thus (σ + 4ησ2)‖z − x̂‖2 ≤ (σ + 5ησ2)‖x∗ − x̂‖2 +O(δ2/η) .\nPlugging them into (4.2), we have\n(σ + 5ησ2)‖x∗ − x̂‖2 − (σ − ησ2)‖x∗ − x̂‖2 ≥ 1 2η ‖z − x‖2 −O\n( δ2/η )\nand rearranging it we have\n‖Gη(x)‖2 = 1 η2 ‖x− z‖2 ≤ 12σ2‖x∗ − x̂‖2 +O\n( δ2 ) ."
    }, {
      "heading" : "5 Base Method: Analysis for One Full Epoch",
      "text" : "In this section, we consider problem (1.1) where each fi(x) is L-smooth and F (x) is σ-approximateconvex. We use our base method Natasha to minimize F (x), and analyze its behavior for one full epoch in this section. We assume σ ≤ L without loss of generality, because any L-smooth function is also L-strongly nonconvex.\nNotations. We introduce some notations for analysis purpose only.\n• Let x̂s be the value of x̂ at the beginning of sub-epoch s. • Let xst be the value of xt in sub-epoch s. • Let ist be the value of i ∈ [n] in sub-epoch s at iteration t.\n• Let fs(x) def= f(x) + σ‖x− x̂s‖2, F s(x) def= F (x) + σ‖x− x̂s‖2, and xs∗ def = arg minx{F s(x)}. • Let ∇̃f s(xst ) def = ∇fi(xst )−∇fi(x̃) +∇f(x̃) + 2σ(xt − x̂) where i = ist . • Let ∇̃f(xst ) def = ∇fi(xst )−∇fi(x̃) +∇f(x̃) where i = ist .\nWe obviously have that fs(x) and F s(x) are σ-strongly convex, and fs(x) is (L+ 2σ)-smooth."
    }, {
      "heading" : "5.1 Variance Upper Bound",
      "text" : "The following lemma gives an upper bound on the variance of the gradient estimator ∇̃fs(xst ): Lemma 5.1. We have Eist [ ‖∇̃f s(xst )−∇fs(xst )‖2 ] ≤ pL2‖xst − x̂s‖2 + pL2 ∑s−1 k=0 ‖x̂k − x̂k+1‖2 .\nProof. We have\nEist [ ‖∇̃fs(xst )−∇fs(xst )‖2 ] = Eist [ ‖∇̃f(xst )−∇f(xst )‖2 ]\n= Ei∈R[n] [∥∥(∇fi(xst )−∇fi(x̃) ) − ( ∇f(xst )−∇f(x̃)) )∥∥2] ¬ ≤ Ei∈R[n] [∥∥∇fi(xst )−∇fi(x̃) ∥∥2]  ≤ pEi∈R[n] [∥∥∇fi(xst )−∇fi(x̂s) ∥∥2]+ p∑s−1k=0 Ei∈R[n] [∥∥∇fi(x̂k)−∇fi(x̂k+1) ∥∥2] ® ≤ pL2‖xst − x̂s‖2 + pL2 ∑s−1 k=0 ‖x̂k − x̂k+1‖2 .\nAbove, inequality ¬ is because for any random vector ζ ∈ Rd, it holds that E‖ζ −Eζ‖2 = E‖ζ‖2 − ‖Eζ‖2; inequality  is because x̂0 = x̃ and for any p vectors a1, a2, . . . , ap ∈ Rd, it holds that ‖a1 + · · ·+ ap‖2 ≤ p‖a1‖2 + · · ·+ p‖ap‖2; and inequality ® is because each fi(·) is L-smooth."
    }, {
      "heading" : "5.2 Analysis for One Sub-Epoch",
      "text" : "The following inequality is classically known as the “regret inequality” for mirror descent [7].\nFact 5.2. 〈∇̃fs(xst ), xst+1−u〉+ψ(xst+1)−ψ(u) ≤ ‖xst−u‖2 2α − ‖xst+1−u‖2 2α − ‖xst+1−xst‖2 2α for every u ∈ Rd.\nProof. Recall that the minimality of xst+1 = arg miny∈Rd{ 12α‖y−xst‖2+ψ(y)+〈∇̃fs(xst ), y〉} implies the existence of some subgradient g ∈ ∂ψ(xst+1) which satisfies 1α(xst+1 − xst ) + ∇̃fs(xst ) + g = 0. Combining this with ψ(u) − ψ(xst+1) ≥ 〈g, u − xst+1〉, which is due to the convexity of ψ(·), we immediately have ψ(u)−ψ(xst+1)+ 〈 1α(xst+1−xst )+ ∇̃f s(xst ), u−xst+1〉 ≥ 〈 1α(xst+1−xst )+ ∇̃fs(xst )+ g, u− xst+1〉 = 0. Rearranging this inequality we have\n〈∇̃fs(xst ), xst+1 − u〉+ ψ(xst+1)− ψ(u) ≤ 〈− 1\nα (xst+1 − xst ), xst+1 − u〉\n= ‖xst − u‖2 2α − ‖x s t+1 − u‖2 2α − ‖x s t+1 − xst‖2 2α .\nThe following lemma is our main contribution for the base method Natasha.\nLemma 5.3. As long as α ≤ 12L+4σ , we have\nE [( F s(x̂s+1)− F s(xs∗) )] ≤ E [F s(x̂s)− F s(xs∗) σαm/2 + αpL2 ( s∑\nk=0\n‖x̂k − x̂k+1‖2 )] .\nProof. We first compute that\nF s(xst+1)− F s(u) = fs(xst+1)− f(u) + ψ(xst+1)− ψ(u) ¬ ≤ f s(xst ) + 〈∇fs(xst ), xst+1 − xst 〉+ L+ 2σ\n2 ‖xst − xst+1‖2 − f(u) + ψ(xst+1)− ψ(u)\n ≤ 〈∇fs(xst ), xst+1 − xst 〉+ L+ 2σ\n2 ‖xst − xst+1‖2 + 〈∇fs(xst ), xst − u〉+ ψ(xst+1)− ψ(u) . (5.1)\nAbove, inequality ¬ uses the fact that fs(·) is (L+2σ)-smooth; and inequality  uses the convexity of fs(·). Now, we take expectation with respect to ist on both sides of (5.1), and derive that:\nEist [ F s(xst+1) ] − F s(u)\n¬ ≤ Eist [ 〈∇̃fs(xst )−∇fs(xst ), xst − xst+1〉+ 〈∇̃fs(xst ), xst+1 − u〉+ L+ 2σ\n2 ‖xst − xst+1‖2 + ψ(xst+1)− ψ(u)\n]\n ≤ Eist [ 〈∇̃fs(xst )−∇f s(xst ), xst − xst+1〉+ ‖xst − u‖2 2α − ‖x s t+1 − u‖2 2α − ( 1 2α − L+ 2σ 2 ) ‖xst+1 − xst‖2 ] ® ≤ Eist [ α ∥∥∇̃fs(xst )−∇fs(xst ) ∥∥2 + ‖x s t − u‖2 2α − ‖x s t+1 − u‖2 2α ]\n¯ ≤ Eist [ αpL2‖xst − x̂s‖2 + αpL2 s−1∑\nk=0\n‖x̂k − x̂k+1‖2 + ‖x s t − u‖2 2α − ‖x s t+1 − u‖2 2α ] . (5.2)\nAbove, inequality ¬ is follows from (5.1) together with the fact that Eist [∇̃fs(xst )] = ∇fs(xst ) implies\nEist [ 〈∇f s(xst ), xst+1 − xst 〉+ 〈∇fs(xst ), xst − u〉 ]\n= Eist [ 〈∇̃fs(xst )−∇fs(xst ), xst − xst+1〉+ 〈∇̃fs(xst ), xst+1 − u〉 ] ;\ninequality  uses Fact 5.2; inequality ® uses α ≤ 12L+4σ together with Young’s inequality 〈a, b〉 ≤ 1 2‖a‖2 + 12‖b‖2; and inequality ¯ uses Lemma 5.1.\nFinally, choosing u = xs∗ to be the (unique) minimizer of F s(·) = fs(·) + ψ(·), and telescoping\ninequality (5.2) for t = 0, 1, . . . ,m− 1, we have\nE [m−1∑\nt=1\n( F s(xst )− F s(xs∗)\n)]\n≤ E [‖xs0 − xs∗‖2 2α + m−1∑\nt=0\n( αpL2‖xst − x̂s‖2 + αpL2 s−1∑\nk=0\n‖x̂k − x̂k+1‖2 )]\n≤ E [F s(x̂s)− F s(xs∗)\nσα + αpmL2\n( s∑\nk=0\n‖x̂k − x̂k+1‖2 )] .\nAbove, the second inequality uses the fact that x̂s+1 is chosen from {xs0, . . . , xsm−1} uniformly at random, as well as the σ-strong convexity of F s(·).\nDividing both sides by m and rearranging the terms (using 12σα ≥ 1), we have\nE [( F s(x̂s+1)− F s(xs∗) )] ≤ E [F s(x̂s)− F s(xs∗) σαm/2 + αpL2 ( s∑\nk=0\n‖x̂k − x̂k+1‖2 )] ."
    }, {
      "heading" : "5.3 Analysis for One Full Epoch",
      "text" : "We telescope Lemma 5.3 for an entire epoch and arrive at the following lemma:\nLemma 5.4. If α ≤ 12L+4σ , α ≥ 4σm and α ≤ σp2L2 , we have p−1∑\ns=0\nE [( F s(x̂s)− F s(xs∗) )] ≤ 2E [ F (x̂0)− F (x̂p) ] .\nProof. Telescoping Lemma 5.3 for all the subepochs s = 0, 1, . . . , p− 1, we have p−1∑\ns=0\nE [( F s(x̂s+1)− F s(xs∗) )] ≤ p−1∑\ns=0\nE [F s(x̂s)− F s(xs∗)\nσαm/2 + αp2L2‖x̂s − x̂s+1‖2\n]\n¬ ≤\np−1∑\ns=0\nE [F s(x̂s)− F s(xs∗)\nσαm/2 + σ · ‖x̂s+1 − x̂s‖2\n]\n =\np−1∑\ns=0\nE [F s(x̂s)− F s(xs∗) σαm/2 + ( F s(x̂s+1)− F s(x̂s) ) − ( F (x̂s+1)− F (x̂s) )]\nAbove, ¬ uses αp2L2 ≤ σ, and  uses the definition F s(y) = F (y)+σ‖y−x̂s‖2. Finally, rearranging both sides, and using the fact that 1σαm ≤ 14 , we have the desired inequality."
    }, {
      "heading" : "6 Base Method: Final Theorem",
      "text" : "We are now ready to state and prove our main convergence theorem for Natasha:\nTheorem 1. Suppose in (1.1), each fi(x) is L-smooth and F (x) is σ-approximate-convex for σ ≤ L. Then, if L2 σ2 ≤ n, p = Θ ( ( σ 2 L2 n)1/3 ) and α = Θ( σ p2L2 ), our base method Natasha outputs\na point xout satisfying E[‖Gη(xout)‖2] ≤ ε2 for every η ∈ ( 0, 1max{L,4σ} )\nwith total gradient complexity O ( n log 1ε + (L2σ)1/3n2/3 ε2 · (F (x∅)− F ∗) ) .\nIn the above theorem, we have assumed σ ≤ L without loss of generality because any L-smooth function is also L-strongly nonconvex. Also, we have assumed L 2\nσ2 ≤ n and if this inequality does\nnot hold, then one should apply repeatSVRG for a faster running time (see Figure 1). Proof of Theorem 6. We choose p = ( σ2 24L2 n )1/3 , m = n/p, and α = 4σm = σ 6p2L2 ≤ 12L+4σ , so we can apply Lemma 5.4. If we telescope Lemma 5.4 for the entire algorithm (which has T ′ full epochs), and use the fact that x̂p of the previous epoch equals x̂0 of the next epoch, we conclude that if we choose a random epoch and a random subepoch s, we will have\nE[F s(x̂s)− F s(xs∗)] ≤ 2 pT ′ (F (x∅)− F ∗) .\nBy the σ-strong convexity of F s(·), we have E[σ‖x̂s − xs∗‖2] ≤ 4pT ′ (F (x∅)− F ∗). Now, F s(x) = F (x) + σ‖x− x̂s‖2 satisfies the assumption of G(x) in Lemma 4.1. If we use the SVRG method (see Theorem 2.3) to minimize the convex function F s(x), we get an output xout satisfying F s(xout)− F s(xs∗) ≤ ε2σ in gradient complexity O ( (n+ L 2 σ2 ) log 1ε ) ≤ O(n log 1ε ).\nWe can therefore apply Lemma 4.1 and conclude that this output xout satisfies\nE[‖Gη(xout)‖2] ≤ O ( σ pT ′ ) · (F (x∅)− F ∗) = O ((L2σ)1/3n2/3 T ′n ) · (F (x∅)− F ∗) .\nIn other words, we obtain E[‖Gη(xout)‖2] ≤ ε2 with gradient complexity\nT ′n = O ( n+ (L2σ)1/3n2/3\nε2 · (F (x∅)− F ∗)\n) .\nHere, the additive term n is because the gradient complexity is T ′n but T ′ is at least 1."
    }, {
      "heading" : "7 Full Method: Analysis for One Full Epoch",
      "text" : "In this section, we study a more refined version of problem (1.1), where f(x) is L-smooth, each fi(x) is (`1, `2)-smooth, and F (x) is σ-approximate-convex. As later argued in Remark 8.1, we can assume σ ≤ min{`1, `2, L} almost without loss of generality.\nWe use our full method Natashafull to minimize F (x), and analyze its behavior for one full epoch in this section. Note that parameter L is not needed in the specification of Natashafull, but used only for analysis purpose.\nNotations. We use the same notations as in Section 5, with an additional one highlighted here:\n• Let x̂s be the value of x̂ at the beginning of sub-epoch s. • Let xst be the value of xt in sub-epoch s. • Let ist be the value of i ∈ [n] in sub-epoch s at iteration t. • Let F s(x) def= F (x) + σ‖x− x̂s‖2 and xs∗ def = arg minx{F s(x)}.\n• Let f s(x) def= f(x) + σ‖x− x̂s‖2 and fsi (x) def = fi(x) + σ‖x− x̂s‖2 .\n• Let ∇̃fs(xst ) def = ∇fi(xst )−∇fi(x̃) +∇f(x̃) + 2σ(xt − x̂) where i = ist . • Let ∇̃f(xst ) def = ∇fi(xst )−∇fi(x̃) +∇f(x̃) where i = ist .\nWe obviously have that fs(x) and F s(x) are σ-strongly convex, and fs(x) is (L+ 2σ)-smooth."
    }, {
      "heading" : "7.1 Variance Upper Bound",
      "text" : "In this subsection we derive a new upper bound on the variance of the gradient estimator ∇̃. This bound will be tighter than Lemma 5.1, and will make use of the asymmetry between parameters `1 and `2. To achieve so, we first need to introduce the following lemma: Lemma 7.1. If g(y) = 1n ∑n i=1 gi(y) is convex, and if each gi is (`1, `2)-smooth, then we have\nEi∈R[n] [ ‖∇gi(y1)−∇gi(y2)‖2 ]\n≤ 2(`1 + `2)(g(y2)− g(y1)− 〈∇g(y1), y2 − y1〉) ] + 6`1`2‖y2 − y1‖2 .\nProof. We consider two cases: `2 ≤ `1 and `2 ≥ `1.\n• In the first case, we define φi(z) def= gi(z) − 〈∇gi(y1), z〉 + `22 ‖z − y1‖2 for each i ∈ [n]. This function φi(z) is a convex, (`1 + `2)-smooth function that has a minimizer z = y1 (which can be seen by taking the derivative). For this reason, we claim that\n∀z : φi(y1) ≤ φi(z)− 1\n`1 + `2 ‖∇φi(z)‖2 , (7.1)\nand this inequality is classical for smooth functions (see for instance Theorem 2.1.5 in textbook [17]). By expanding out the definition of φi(·) in (7.1), we immediately have\ngi(y1)− 〈∇gi(y1), y1〉 ≤ gi(z)− 〈∇gi(y1), z〉+ `2 2 ‖z − y1‖2\n− 1 2(`1 + `2) ‖∇gi(z)−∇gi(y1) + `2(z − y1)‖2\nwhich then implies\n‖∇gi(z)−∇gi(y1)‖2 ≤ 2‖∇gi(z)−∇gi(y1) + `2(z − y1)‖2 + 2‖`2(z − y1)‖2\n≤ 2(`1 + `2)(gi(z)− gi(y1)− 〈∇gi(y1), z − y1〉) + (4`22 + 2`1`2)‖z − y1‖2 . (7.2)\nNow, by choosing z = y2 and taking expectation with i in (7.2), we have\nEi [∥∥∇gi(y2)−∇gi(y1) ∥∥2]\n≤ 2(`1 + `2) ( g(y2)− g(y1)− 〈∇g(y1), y2 − y1〉) ) + (4`22 + 2`1`2)‖y2 − y1‖2 (7.3)\n• In the second case, we define φi(z) def= −gi(z) + 〈∇gi(y2), z〉+ `12 ‖z − y2‖2 for each i ∈ [n]. It is clear that φi(z) is a convex, (`1 + `2)-smooth function that has a minimizer z = y2 (which can be seen by taking the derivative). For this reason, we have\n∀z : φi(y2) ≤ φi(z)− 1\n`1 + `2 ‖∇φi(z)‖2 . (7.4)\nBy expanding out the definition of φi(·) in (7.4), we immediately have\n− gi(y2) + 〈∇gi(y2), y2〉 ≤ −gi(z) + 〈∇gi(y2), z〉+ `1 2 ‖z − y2‖2\n− 1 2(`1 + `2) ‖∇gi(z)−∇gi(y2)− `1(z − y2)‖2\nwhich then implies that\n‖∇gi(z)−∇gi(y2)‖2 ≤ 2‖∇gi(z)−∇gi(y2)− `1(z − y2)‖2 + 2‖`2(z − y2)‖2\n≤ 2(`1 + `2)(gi(y2)− gi(z) + 〈∇gi(y2), z − y2〉) + (4`21 + 2`1`2)‖z − y2‖2 . (7.5)\nNow by choosing z = y1 and taking expectation over i in (7.5), we have\nEi [∥∥∇gi(y1)−∇gi(y2) ∥∥2]\n≤ 2(`1 + `2) ( g(y2)− g(y1) + 〈∇g(y2), y1 − y2〉 ) + (4`21 + 2`1`2)‖y1 − y2‖2 ≤ (4`21 + 2`1`2)‖y1 − y2‖2 ≤ 2(`1 + `2) ( g(y2)− g(y1)− 〈∇g(y1), y2 − y1〉) ) + (4`22 + 2`1`2)‖y2 − y1‖2 . (7.6)\nAbove, the second and third inequalities use the convexity of g(·).\nCombining (7.3) and (7.6) we finish the proof of the lemma. We are now ready to state our final variance upper bound:\nLemma 7.2 (variance bound). There exists constant C ≥ 1 such that, if we define • Φs(y) def= C(`1 + `2) · (fs(x̂s)− fs(y)− 〈∇f s(y), x̂s − y〉) ] + C(`1`2) · ‖y − x̂s‖2 ≥ 0;\n• Φst = Φs(xst ) and Φs = Φs(x̂s+1), then, we have Ei [ ‖∇̃fs(xst )−∇fs(xst )‖2 ] ≤ pΦst + p ∑s−1 k=0 Φ k where i = ist .\nBefore proceeding to the proof, we point out that if `1 = `2 = L like in the base setting, then we shall have Φs(y) ≤ O(L2)‖y − x̂s‖2 and Lemma 7.2 becomes identical to Lemma 5.1.\nProof. If we plug in g = f s and gi = f s i in Lemma 7.1, we have gi is (`1 + 2σ, `2 − 2σ)-smooth and thus each gi is also (3`1, `2)-smooth. Therefore, Lemma 7.1 implies there exists constant C ≥ 1 such that\nEi [∥∥∇fi(y)−∇fi(x̂s) ∥∥2] ≤ 2Ei [∥∥∇fsi (y)−∇fsi (x̂s) ∥∥2]+ 2 ∥∥2σ(y − x̂s) ∥∥2\n≤ C(`1 + `2) · (fs(x̂s)− fs(y)− 〈∇f s(y), x̂s − y〉) ]\n+ C(`1`2) · ‖y − x̂s‖2 = Φs(y) . (7.7)\nTherefore, the variance term:\nEi [ ‖∇̃f s(xst )−∇fs(xst )‖2 ] = Ei [ ‖∇̃f(xst )−∇f(xst )‖2 ]\n= Ei [∥∥(∇fi(xst )−∇fi(x̃) ) − ( ∇f(xst )−∇f(x̃)) )∥∥2] ¬ ≤ Ei [∥∥∇fi(xst )−∇fi(x̃) ∥∥2]  ≤ pEi [∥∥∇fi(xst )−∇fi(x̂s) ∥∥2]+ p∑s−1k=0 Ei [∥∥∇fi(x̂k)−∇fi(x̂k+1) ∥∥2] ® ≤ pΦst + p ∑s−1 k=0 Φ k . (7.8)\nAbove, inequality ¬ is because for any random vector ζ ∈ Rd, it holds that E‖ζ −Eζ‖2 = E‖ζ‖2 − ‖Eζ‖2; inequality  is because x̂0 = x̃ and for any p vectors a1, a2, . . . , ap ∈ Rd, it holds that ‖a1 + · · ·+ ap‖2 ≤ p‖a1‖2 + · · ·+ p‖ap‖2; and inequality ® is from repeatedly applying (7.7)."
    }, {
      "heading" : "7.2 Analysis for One Sub-Epoch",
      "text" : "The following fact is analogous to Fact 5.2, and the only difference is that in Natashafull we are applying proximal updates on the {zst }t sequence.\nFact 7.3. 〈∇̃f s(xst ), zst+1−u〉+ψ(zst+1)−ψ(u) ≤ ‖zst−u‖2 2α − ‖zst+1−u‖2 2α − ‖zst+1−zst ‖2 2α for every u ∈ Rd.\nProof. Recall that the minimality of zst+1 = arg miny∈Rd{ 12α‖y−zst ‖2 +ψ(y)+〈∇̃fs(xst ), y〉} implies the existence of some subgradient g ∈ ∂ψ(zst+1) which satisfies 1α(zst+1 − zst ) + ∇̃fs(xst ) + g = 0. Combining this with ψ(u) − ψ(zst+1) ≥ 〈g, u − zst+1〉, which is due to the convexity of ψ(·), we immediately have ψ(u)−ψ(zst+1) + 〈 1α(zst+1− zst ) + ∇̃fs(xst ), u− zst+1〉 ≥ 〈 1α(zst+1− zst ) + ∇̃fs(xst ) + g, u− zst+1〉 = 0. Rearranging this inequality we have\n〈∇̃fs(xst ), zst+1 − u〉+ ψ(zst+1)− ψ(u) ≤ 〈− 1\nα (zst+1 − zst ), zst+1 − u〉\n= ‖zst − u‖2 2α − ‖z s t+1 − u‖2 2α − ‖z s t+1 − zst ‖2 2α .\nThe following lemma is our technical main contribution for the full method Natashafull.\nLemma 7.4. If α ≤ 1L+2σ , then we have the following inequality for sub-epoch s:\nE [( F s(x̂s+1)− F s(xs∗) )]\n≤ E [F s(x̂s)− F s(xs∗)\nσαm/2 + αp\n( s∑\nk=0\nΦk ) + 〈∇fs(x̂s+1), x̂s − x̂s+1〉+ ( ψ(x̂s)− ψ(x̂s+1) )] .\nProof. We first compute that\n2F s(xst+1)− F s(xst )− F s(u) = 2fs(xst+1)− fs(xst )− f(u) + 2ψ(xst+1)− ψ(xst )− ψ(u) ¬ ≤ fs(xst ) + 2〈∇fs(xst ), xst+1 − xst 〉+ (L+ 2σ)‖xst − xst+1‖2 − f(u) + 2ψ(xst+1)− ψ(xst )− ψ(u)  = fs(xst ) + 〈∇fs(xst ), zst+1 − zst 〉+ L+ 2σ\n4 ‖zst − zst+1‖2 − f(u) + 2ψ(xst+1)− ψ(xst )− ψ(u)\n® ≤ 〈∇fs(xst ), zst+1 − zst 〉+ L+ 2σ\n4 ‖zst − zst+1‖2 + 〈∇fs(xst ), xst − u〉+ ψ(zst+1) + ψ(x̂s)− ψ(xst )− ψ(u)\n(7.9)\nAbove, inequality ¬ uses the fact that fs(·) is (L + 2σ)-smooth; equality  uses the fact that zst+1 − zst = 2(xst+1 − xst ); inequality ® uses the convexity of fs(·), the convexity of ψ(·), and the fact xst+1 = 1 2(z s t+1 + x̂\ns). Now, we take expectation with respect to ist on both sides of (7.9), and derive that:\n2Eist [ F s(xst+1) ] − F s(xst )− F s(u)\n¬ ≤ Eist [ 〈∇̃fs(xst )−∇fs(xst ), zst − zst+1〉+ 〈∇̃fs(xst ), zst+1 − u〉+ L+ 2σ\n4 ‖zst − zst+1‖2 + ψ(zst+1)− ψ(u)\n]\n+ 〈∇fs(xst ), xst − zst 〉+ ψ(x̂s)− ψ(xst )  ≤ Eist [ 〈∇̃fs(xst )−∇fs(xst ), zst − zst+1〉+ ‖zst − u‖2 2α − ‖z s t+1 − u‖2 2α − ( 1 2α − L+ 2σ 4 ) ‖zst+1 − zst ‖2 ] + 〈∇fs(xst ), xst − zst 〉+ ψ(x̂s)− ψ(xst ) ® ≤ Eist [ α ∥∥∇̃fs(xst )−∇f s(xst ) ∥∥2 + ‖z s t − u‖2 2α − ‖z s t+1 − u‖2 2α ] + 〈∇fs(xst ), xst − zst 〉+ ψ(x̂s)− ψ(xst )\n¯ ≤ Eist [ αpΦst + αp s−1∑\nk=0\nΦk + ‖zst − u‖2 2α − ‖z s t+1 − u‖2 2α ] + 〈∇fs(xst ), x̂s − xst 〉+ ψ(x̂s)− ψ(xst ) .\nAbove, inequality ¬ is from (7.9) together with the fact that Eist [∇̃fs(xst )] = ∇fs(xst ) implies\nEist [ 〈∇f s(xst ), zst+1 − zst 〉+ 〈∇f s(xst ), xst − u〉 ]\n= Eist [ 〈∇fs(xst ), xst − zst 〉+ 〈∇̃fs(xst )−∇fs(xst ), zst − zst+1〉+ 〈∇̃fs(xst ), zst+1 − u〉 ] ;\ninequality  uses Fact 7.3; inequality ® uses α ≤ 1L+2σ together with Young’s inequality 〈a, b〉 ≤ 1 2‖a‖2 + 12‖b‖2; and inequality ¯ uses Lemma 7.2.\nFinally, choosing u = xs∗ to be the (unique) minimizer of F s(·) = fs(·) + ψ(·), and telescoping\nthe above inequality for t = 0, 1, . . . ,m− 1, we have\nE [m−1∑\nt=1\n( F s(xst )− F s(xs∗)\n)]\n≤ E [‖zs0 − xs∗‖2 2α + m−1∑\nt=0\n( αpΦst + αp s−1∑\nk=0\nΦk + 〈∇fs(xst ), x̂s − xst 〉+ ψ(x̂s)− ψ(xst ) )] .\nUsing the fact x̂s+1 is chosen uniformly at random from {xs0, . . . , xsm−1}, the above inequality implies\nE [ m ( F s(x̂s+1)− F s(xs∗) ) − ( F s(x̂s)− F s(xs∗) )]\n≤ E [F s(x̂s)− F s(xs∗)\nσα + αpm\n( s∑\nk=0\nΦk ) +m〈∇f s(x̂s+1), x̂s − x̂s+1〉+m ( ψ(x̂s)− ψ(x̂s+1) )] .\nDividing both sides by m and rearranging the terms (using 1σα ≥ 1), we have\nE [( F s(x̂s+1)− F s(xs∗) )]\n≤ E [F s(x̂s)− F s(xs∗)\nσαm/2 + αp\n( s∑\nk=0\nΦk ) + 〈∇f s(x̂s+1), x̂s − x̂s+1〉+ ( ψ(x̂s)− ψ(x̂s+1) )] ."
    }, {
      "heading" : "7.3 Analysis for One Full Epoch",
      "text" : "We telescope Lemma 7.4 for an entire epoch and arrive at the following lemma:\nLemma 7.5. If α ≤ O( σ p2`1`2 ) and α ≥ Ω( 1σm), we have p−1∑\ns=0\nE [( F s(x̂s)− F s(xs∗) )] ≤ 3E [ F (x̂0)− F (x̂p) ] .\nProof. Telescoping Lemma 7.4 for all the subepochs s = 0, 1, . . . , p− 1, we have p−1∑\ns=0\nE [( F s(x̂s+1)− F s(xs∗) )]\n¬ ≤\np−1∑\ns=0\nE [F s(x̂s)− F s(xs∗)\nσαm/2 + αp2Φs + 〈∇f s(x̂s+1), x̂s − x̂s+1〉+\n( ψ(x̂s)− ψ(x̂s+1)\n)]\n ≤\np−1∑\ns=0\nE [F s(x̂s)− F s(xs∗)\nσαm/2 + 〈∇f s(x̂s+1), x̂s − x̂s+1〉+\n( ψ(x̂s)− ψ(x̂s+1) )\n+ αp2C(`1 + `2) · (fs(x̂s)− f s(x̂s+1)− 〈∇fs(x̂s+1), x̂s − x̂s+1〉) ] + αp2C(`1`2) · ‖x̂s+1 − x̂s‖2 ]\n® ≤\np−1∑\ns=0\nE [F s(x̂s)− F s(xs∗)\nσαm/2 + 〈∇f s(x̂s+1), x̂s − x̂s+1〉+\n( ψ(x̂s)− ψ(x̂s+1) )\n+ (fs(x̂s)− fs(x̂s+1)− 〈∇fs(x̂s+1), x̂s − x̂s+1〉) ] + 2σ · ‖x̂s+1 − x̂s‖2 ]\n=\np−1∑\ns=0\nE [F s(x̂s)− F s(xs∗) σαm/2 + ( F s(x̂s)− F s(x̂s+1) ) + 2σ · ‖x̂s+1 − x̂s‖2 ]\n¯ =\np−1∑\ns=0\nE [F s(x̂s)− F s(xs∗) σαm/2 + ( F s(x̂s+1)− F s(x̂s) ) − 2 ( F (x̂s+1)− F (x̂s) )]\nAbove, inequality ¬ uses Lemma 7.4 and Φs ≥ 0; inequality  uses the definition of Φs from Lemma 7.2; inequality ® uses αp2C(`1 + `2) ≤ 1 and αp2C(`1`2) ≤ 2σ; and equality ¯ uses the definition F s(y) = F (y) + σ‖y − x̂s‖2.\nFinally, rearranging both sides, and using the fact that 1σαm ≤ 16 , we have p−1∑\ns=0\nE [( F s(x̂s)− F s(xs∗) )] ≤ 3E [ F (x̂0)− F (x̂p) ] ."
    }, {
      "heading" : "8 Full Method: Final Theorem",
      "text" : "We are now ready to state and prove our main convergence theorem for Natashafull:\nTheorem 2. Suppose f(x) is L-smooth, each fi(x) is (`1, `2)-smooth, and F (x) is σ-strongly\nnonconvex, for σ ≤ min{`1, `2, L}. If `1`2σ2 ≤ n, p = Θ ( ( σ 2 `1`2 n)1/3 ) and Θ( σ p2`1`2 ), Natashafull outputs\na point xout satisfying E[‖Gη(xout)‖2] ≤ ε2 for every η ∈ ( 0, 1max{L,4σ} )\nwith total gradient complexity O ( n log 1ε + (`1`2σ)1/3n2/3 ε2 · (F (x∅)− F ∗) ) .\nRemark 8.1. One can assume σ ≤ L without loss of generality because any L-smooth function is also L-strongly nonconvex. One can assume σ ≤ `2 without loss of generality because f(x) is `2-strongly nonconvex if each fi(x) is (`1, `2)-smooth. Only σ ≤ `1 is a minor requirement for Theorem 2, but if this is not true, one can replace `1 with σ before applying Theorem 2. Remark 8.2. In Theorem 2 we have assumed `1`2 σ2 ≤ n2. If this inequality does not hold, one should apply repeatSVRG instead and it gives faster running time (see Figure 1). More specifically, repeatSVRG gives a refined complexity of Õ (nσ+n3/4(`1`2σ2)1/4\nε2\n) under a mild assumption of σ ≥ ε2.\nProof of Theorem 2. One can verify that our choices of p and α satisfy p ∈ [n], α ≤ O( σ p2`1`2 ) and α ≥ Ω( 1σm), so we can apply Lemma 7.5 and telescope it for the entire algorithm (which has T ′ full epochs). Use the fact that x̂p of the previous epoch equals x̂0 of the next epoch, we conclude that if we choose a random epoch and a random subepoch s, we will have\nE[F s(x̂s)− F s(xs∗)] ≤ 3 pT ′ (F (x∅)− F ∗) .\nBy the σ-strong convexity of F s(·), we have E[σ‖x̂s − xs∗‖2] ≤ 6pT ′ (F (x∅)− F ∗). Now, F s(x) = F (x) + σ‖x− x̂s‖2 satisfies the assumption of G(x) in Lemma 4.1. If we use the SVRG method (see Theorem 2.3) to minimize the convex function F s(x), we get an output xout satisfying F s(xout)− F s(xs∗) ≤ ε2σ in gradient complexity O ( (n+ `1`2 σ2 ) log 1ε ) ≤ O(n log 1ε ).\nWe can therefore apply Lemma 4.1 and conclude that this output xout satisfies\nE[‖Gη(xout)‖2] ≤ O ( σ pT ′ ) · (F (x∅)− F ∗) = O ((`1`2σ)1/3n2/3 T ′n ) · (F (x∅)− F ∗) .\nIn other words, we obtain E[‖Gη(xout)‖2] ≤ ε2 with gradient complexity\nT ′n = O ( n+ (`1`2σ) 1/3n2/3\nε2 · (F (x∅)− F ∗)\n) .\nHere, the additive term n is because the gradient complexity is T ′n but T ′ is at least 1."
    }, {
      "heading" : "Acknowledgements",
      "text" : "This paper is partially supported by a Microsoft Research Award, no. 0518584, and an NSF grant, no. CCF-1412958. We thank Yuanzhi Li for enlightening conversations.\nAppendix"
    }, {
      "heading" : "A From Stationary Points to Local Minima",
      "text" : "Recently, researchers have shown that the general problem of finding (ε, ρ)-approximate local minima, under mild conditions, reduces to (repeatedly) finding ε-approximate stationary points for an O(ρ)-strongly nonconvex function [1, 9]. We sketch the details here for the sake of completeness, in the special case of ψ(x) ≡ 0.10\nWe say that a point x is (ε, δ)-approximate local minimum, if ‖∇f(x)‖ ≤ ε and ∇2f(x) −δI. Carmon et al. [9] showed that an (ε, δ)-approximate minimum for the general problem (1.1) can be solved via the following iterative procedure. In every iteration at point xt, detect whether the smallest eigenvalue of ∇2f(xt) is below −δ: • if yes, find the smallest eigenvector of ∇2f(xt) approximately and move in this direction. (One\ncan use for instance the shift-and-invert method [12].)\n• if no, define ft(x) = f(x)+L ( max { 0, ‖x−xt‖− δL2 })2\nwhere L2 is the second-order smoothness of f(x) and ft(x) can be proven as 5L-smooth and 3δ-strongly nonconvex; we then find an ε-approximate stationary point of f ′(x) and move there.\nThe Trade-Off on δ. The final running time of the above algorithm depends on the maximum between (1) the eigenvector computation and (2) the stationary-point computation. The larger δ is, the faster (1) becomes and the slower (2) becomes; the smaller δ is, the faster (2) becomes and the slower (1) becomes.\nAs argued in [1, 9], if the Hessian-vector multiplication ( ∇2fi(x) ) v for an arbitrary vector runs in the same time as computing ∇fi(x) —which is the case for training neural nets— the optimum trade-off is δ = √ L2ε. This again confirms that in strongly non-convex optimization, the parameter δ can usually be much smaller than L."
    } ],
    "references" : [ {
      "title" : "Finding Approximate Local Minima for Nonconvex Optimization in Linear Time",
      "author" : [ "Naman Agarwal", "Zeyuan Allen-Zhu", "Brian Bullins", "Elad Hazan", "Tengyu Ma" ],
      "venue" : "ArXiv e-prints,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2016
    }, {
      "title" : "Katyusha: The First Direct Acceleration of Stochastic Gradient Methods",
      "author" : [ "Zeyuan Allen-Zhu" ],
      "venue" : "ArXiv e-prints,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2016
    }, {
      "title" : "Variance Reduction for Faster Non-Convex Optimization",
      "author" : [ "Zeyuan Allen-Zhu", "Elad Hazan" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2016
    }, {
      "title" : "Doubly Accelerated Methods for Faster CCA and Generalized Eigendecomposition",
      "author" : [ "Zeyuan Allen-Zhu", "Yuanzhi Li" ],
      "venue" : "ArXiv e-prints,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2016
    }, {
      "title" : "LazySVD: Even Faster SVD Decomposition Yet Without Agonizing Pain",
      "author" : [ "Zeyuan Allen-Zhu", "Yuanzhi Li" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2016
    }, {
      "title" : "Follow the Compressed Leader: Faster Algorithm for Matrix Multiplicative Weight Updates",
      "author" : [ "Zeyuan Allen-Zhu", "Yuanzhi Li" ],
      "venue" : "ArXiv e-prints,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2017
    }, {
      "title" : "Linear Coupling: An Ultimate Unification of Gradient and Mirror Descent",
      "author" : [ "Zeyuan Allen-Zhu", "Lorenzo Orecchia" ],
      "venue" : "In Proceedings of the 8th Innovations in Theoretical Computer Science, ITCS ’17,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2017
    }, {
      "title" : "Improved SVRG for Non-Strongly-Convex or Sum-of-Non- Convex Objectives",
      "author" : [ "Zeyuan Allen-Zhu", "Yang Yuan" ],
      "venue" : "In ICML,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2016
    }, {
      "title" : "Accelerated Methods for Non-Convex Optimization",
      "author" : [ "Yair Carmon", "John C. Duchi", "Oliver Hinder", "Aaron Sidford" ],
      "venue" : "ArXiv e-prints,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2016
    }, {
      "title" : "SAGA: A Fast Incremental Gradient Method With Support for Non-Strongly Convex Composite Objectives",
      "author" : [ "Aaron Defazio", "Francis Bach", "Simon Lacoste-Julien" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2014
    }, {
      "title" : "Un-regularizing: approximate proximal point and faster stochastic algorithms for empirical risk minimization",
      "author" : [ "Roy Frostig", "Rong Ge", "Sham M. Kakade", "Aaron Sidford" ],
      "venue" : "In ICML,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2015
    }, {
      "title" : "Robust shift-and-invert preconditioning: Faster and more sample efficient algorithms for eigenvector computation",
      "author" : [ "Dan Garber", "Elad Hazan", "Chi Jin", "Sham M. Kakade", "Cameron Musco", "Praneeth Netrapalli", "Aaron Sidford" ],
      "venue" : null,
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2016
    }, {
      "title" : "Escaping from saddle points—online stochastic gradient for tensor decomposition",
      "author" : [ "Rong Ge", "Furong Huang", "Chi Jin", "Yang Yuan" ],
      "venue" : "In Proceedings of the 28th Annual Conference on Learning",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2015
    }, {
      "title" : "Accelerating stochastic gradient descent using predictive variance reduction",
      "author" : [ "Rie Johnson", "Tong Zhang" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2013
    }, {
      "title" : "Gradient descent only converges to minimizers",
      "author" : [ "Jason D. Lee", "Max Simchowitz", "Michael I. Jordan", "Benjamin Recht" ],
      "venue" : "In Proceedings of the 29th Conference on Learning Theory, COLT 2016,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2016
    }, {
      "title" : "A Universal Catalyst for First-Order Optimization",
      "author" : [ "Hongzhou Lin", "Julien Mairal", "Zaid Harchaoui" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2015
    }, {
      "title" : "Introductory Lectures on Convex Programming Volume: A Basic course, volume I",
      "author" : [ "Yurii Nesterov" ],
      "venue" : "Kluwer Academic Publishers,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2004
    }, {
      "title" : "Accelerating the cubic regularization of newton’s method on convex problems",
      "author" : [ "Yurii Nesterov" ],
      "venue" : "Mathematical Programming,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2008
    }, {
      "title" : "Stochastic variance reduction for nonconvex optimization",
      "author" : [ "Sashank J. Reddi", "Ahmed Hefny", "Suvrit Sra", "Barnabas Poczos", "Alex Smola" ],
      "venue" : "ArXiv e-prints,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2016
    }, {
      "title" : "Minimizing finite sums with the stochastic average gradient",
      "author" : [ "Mark Schmidt", "Nicolas Le Roux", "Francis Bach" ],
      "venue" : "arXiv preprint arXiv:1309.2388,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2013
    }, {
      "title" : "SDCA without Duality, Regularization, and Individual Convexity",
      "author" : [ "Shai Shalev-Shwartz" ],
      "venue" : "In ICML,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2016
    }, {
      "title" : "Linear convergence with condition number independent access of full gradients",
      "author" : [ "Lijun Zhang", "Mehrdad Mahdavi", "Rong Jin" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2013
    } ],
    "referenceMentions" : [ {
      "referenceID" : 2,
      "context" : "In many interesting practical problems —such as training neural nets and classifications with sigmoid loss, see [3] for details— neither fi(x) or the overall f(x) is convex.",
      "startOffset" : 112,
      "endOffset" : 115
    }, {
      "referenceID" : 17,
      "context" : "In particular, second-order literatures usually find (ε, √ ε)-approximate local minima [18], and this corresponds to σ = √ ε.",
      "startOffset" : 87,
      "endOffset" : 91
    }, {
      "referenceID" : 7,
      "context" : "Until recently, nearly all research papers have been mostly focusing on either σ = 0 so f(x) is convex, or σ = L so f(x) is simply L-smooth: • If σ = 0, the accelerated SVRG method [8, 21] find a point x satisfying F (x) − F (x∗) ≤ ε, in gradient complexity Õ ( n+ n3/4 √ L/ε ) .",
      "startOffset" : 181,
      "endOffset" : 188
    }, {
      "referenceID" : 20,
      "context" : "Until recently, nearly all research papers have been mostly focusing on either σ = 0 so f(x) is convex, or σ = L so f(x) is simply L-smooth: • If σ = 0, the accelerated SVRG method [8, 21] find a point x satisfying F (x) − F (x∗) ≤ ε, in gradient complexity Õ ( n+ n3/4 √ L/ε ) .",
      "startOffset" : 181,
      "endOffset" : 188
    }, {
      "referenceID" : 2,
      "context" : "2 • If σ = L, the SVRG method [3] finds an ε-approximate stationary point of F (x) with gradient complexity O(n+ n2/3L/ε2).",
      "startOffset" : 30,
      "endOffset" : 33
    }, {
      "referenceID" : 0,
      "context" : "Very recently, it was observed by two independent groups [1, 9] —although implicitly, see Section 2.",
      "startOffset" : 57,
      "endOffset" : 63
    }, {
      "referenceID" : 8,
      "context" : "Very recently, it was observed by two independent groups [1, 9] —although implicitly, see Section 2.",
      "startOffset" : 57,
      "endOffset" : 63
    }, {
      "referenceID" : 2,
      "context" : "Note that our result matches that of SVRG [3] for σ = L, and has a much simpler analysis.",
      "startOffset" : 42,
      "endOffset" : 45
    }, {
      "referenceID" : 11,
      "context" : "Using the so-called shift-and-invert reduction [12], computing leading eigenvector reduces to a convex version of problem (1.",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 4,
      "context" : "Other examples include all the applications that are built on shift-and-invert, including high rank SVD/PCA [5], canonical component analysis [4], online matrix learning [6], and approximate local minima algorithms [1, 9].",
      "startOffset" : 108,
      "endOffset" : 111
    }, {
      "referenceID" : 3,
      "context" : "Other examples include all the applications that are built on shift-and-invert, including high rank SVD/PCA [5], canonical component analysis [4], online matrix learning [6], and approximate local minima algorithms [1, 9].",
      "startOffset" : 142,
      "endOffset" : 145
    }, {
      "referenceID" : 5,
      "context" : "Other examples include all the applications that are built on shift-and-invert, including high rank SVD/PCA [5], canonical component analysis [4], online matrix learning [6], and approximate local minima algorithms [1, 9].",
      "startOffset" : 170,
      "endOffset" : 173
    }, {
      "referenceID" : 0,
      "context" : "Other examples include all the applications that are built on shift-and-invert, including high rank SVD/PCA [5], canonical component analysis [4], online matrix learning [6], and approximate local minima algorithms [1, 9].",
      "startOffset" : 215,
      "endOffset" : 221
    }, {
      "referenceID" : 8,
      "context" : "Other examples include all the applications that are built on shift-and-invert, including high rank SVD/PCA [5], canonical component analysis [4], online matrix learning [6], and approximate local minima algorithms [1, 9].",
      "startOffset" : 215,
      "endOffset" : 221
    }, {
      "referenceID" : 13,
      "context" : "We first recall the main ideas of stochastic variance-reduced gradient methods, such as SVRG [14].",
      "startOffset" : 93,
      "endOffset" : 97
    }, {
      "referenceID" : 0,
      "context" : "For instance, the result of [1, 9] requires ε ≤ σ.",
      "startOffset" : 28,
      "endOffset" : 34
    }, {
      "referenceID" : 8,
      "context" : "For instance, the result of [1, 9] requires ε ≤ σ.",
      "startOffset" : 28,
      "endOffset" : 34
    }, {
      "referenceID" : 2,
      "context" : "In nearly all the aforementioned results for strongly nonconvex optimization, researchers have either directly applied SVRG [3, 19] (for the case σ = L), or repeatedly applied SVRG [1, 9] (for general σ ∈ [0, L]).",
      "startOffset" : 124,
      "endOffset" : 131
    }, {
      "referenceID" : 18,
      "context" : "In nearly all the aforementioned results for strongly nonconvex optimization, researchers have either directly applied SVRG [3, 19] (for the case σ = L), or repeatedly applied SVRG [1, 9] (for general σ ∈ [0, L]).",
      "startOffset" : 124,
      "endOffset" : 131
    }, {
      "referenceID" : 0,
      "context" : "In nearly all the aforementioned results for strongly nonconvex optimization, researchers have either directly applied SVRG [3, 19] (for the case σ = L), or repeatedly applied SVRG [1, 9] (for general σ ∈ [0, L]).",
      "startOffset" : 181,
      "endOffset" : 187
    }, {
      "referenceID" : 8,
      "context" : "In nearly all the aforementioned results for strongly nonconvex optimization, researchers have either directly applied SVRG [3, 19] (for the case σ = L), or repeatedly applied SVRG [1, 9] (for general σ ∈ [0, L]).",
      "startOffset" : 181,
      "endOffset" : 187
    }, {
      "referenceID" : 1,
      "context" : "The technique of having the gradients computed at a point xt but moving with respect to a different sequence zt is related to the Katyusha momentum recently developed for convex optimization [2].",
      "startOffset" : 191,
      "endOffset" : 194
    }, {
      "referenceID" : 19,
      "context" : "The first such method is SAG by Schmidt et al [20].",
      "startOffset" : 46,
      "endOffset" : 50
    }, {
      "referenceID" : 13,
      "context" : "The two most popular choices for gradient estimators are the SVRG-like one we adopted in this paper (independently introduced by [14, 22], and the SAGA-like one introduced by [10].",
      "startOffset" : 129,
      "endOffset" : 137
    }, {
      "referenceID" : 21,
      "context" : "The two most popular choices for gradient estimators are the SVRG-like one we adopted in this paper (independently introduced by [14, 22], and the SAGA-like one introduced by [10].",
      "startOffset" : 129,
      "endOffset" : 137
    }, {
      "referenceID" : 9,
      "context" : "The two most popular choices for gradient estimators are the SVRG-like one we adopted in this paper (independently introduced by [14, 22], and the SAGA-like one introduced by [10].",
      "startOffset" : 175,
      "endOffset" : 179
    }, {
      "referenceID" : 20,
      "context" : "The first “non-convex use” of variance reduction is by Shalev-Shwartz [21] who assumes that each fi(x) is non-convex but their average f(x) is still convex.",
      "startOffset" : 70,
      "endOffset" : 74
    }, {
      "referenceID" : 7,
      "context" : "This result has been slightly improved to several more refined settings [8].",
      "startOffset" : 72,
      "endOffset" : 75
    }, {
      "referenceID" : 2,
      "context" : ", for f(x) being also non-convex) is independently by [3] and [19].",
      "startOffset" : 54,
      "endOffset" : 57
    }, {
      "referenceID" : 18,
      "context" : ", for f(x) being also non-convex) is independently by [3] and [19].",
      "startOffset" : 62,
      "endOffset" : 66
    }, {
      "referenceID" : 17,
      "context" : "The first such result is by cubic regularized Newton’s method [18]; however, its per-iteration complexity is very slow.",
      "startOffset" : 62,
      "endOffset" : 66
    }, {
      "referenceID" : 0,
      "context" : "Very recently, two independent groups of authors tackled this problem from a somewhat similar viewpoint [1, 9]: if the computation of Hessian-vector multiplications (i.",
      "startOffset" : 104,
      "endOffset" : 110
    }, {
      "referenceID" : 8,
      "context" : "Very recently, two independent groups of authors tackled this problem from a somewhat similar viewpoint [1, 9]: if the computation of Hessian-vector multiplications (i.",
      "startOffset" : 104,
      "endOffset" : 110
    }, {
      "referenceID" : 8,
      "context" : "[9] only stated a complexity of Õ ( n ε1.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 12,
      "context" : "[13] where the authors showed that a noise-injected version of SGD converges to local minima instead of critical points, as long as the underlying function is “strict-saddle.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 14,
      "context" : "[15] showed that gradient descent, starting from a random point, almost surely converges to a local minimum of a “strict-saddle” function.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 7,
      "context" : "The (`1, `2)-smoothness parameters were introduced in [8] to tackle the convex setting of problem (1.",
      "startOffset" : 54,
      "endOffset" : 57
    }, {
      "referenceID" : 7,
      "context" : "The notion of strong nonconvexity is also known as “lower smoothness [8]” or “almost convexity [9]”.",
      "startOffset" : 69,
      "endOffset" : 72
    }, {
      "referenceID" : 8,
      "context" : "The notion of strong nonconvexity is also known as “lower smoothness [8]” or “almost convexity [9]”.",
      "startOffset" : 95,
      "endOffset" : 98
    }, {
      "referenceID" : 7,
      "context" : "The following theorem for the SVRG method can be found for instance in [8], which is built on top of the results [11, 16, 21]:",
      "startOffset" : 71,
      "endOffset" : 74
    }, {
      "referenceID" : 10,
      "context" : "The following theorem for the SVRG method can be found for instance in [8], which is built on top of the results [11, 16, 21]:",
      "startOffset" : 113,
      "endOffset" : 125
    }, {
      "referenceID" : 15,
      "context" : "The following theorem for the SVRG method can be found for instance in [8], which is built on top of the results [11, 16, 21]:",
      "startOffset" : 113,
      "endOffset" : 125
    }, {
      "referenceID" : 20,
      "context" : "The following theorem for the SVRG method can be found for instance in [8], which is built on top of the results [11, 16, 21]:",
      "startOffset" : 113,
      "endOffset" : 125
    }, {
      "referenceID" : 0,
      "context" : "We remark here that the above complexity of repeatSVRG can be inferred from papers [1, 9], but is not explicitly stated.",
      "startOffset" : 83,
      "endOffset" : 89
    }, {
      "referenceID" : 8,
      "context" : "We remark here that the above complexity of repeatSVRG can be inferred from papers [1, 9], but is not explicitly stated.",
      "startOffset" : 83,
      "endOffset" : 89
    }, {
      "referenceID" : 8,
      "context" : "For instance, the paper [9] does not allow F (x) to have a non-smooth proximal term ψ(x), and applies accelerated gradient descent instead of accelerated SVRG.",
      "startOffset" : 24,
      "endOffset" : 27
    }, {
      "referenceID" : 8,
      "context" : "(Notice that when ψ(x) ≡ 0 this lemma is trivial, and can be found for instance in [9]).",
      "startOffset" : 83,
      "endOffset" : 86
    }, {
      "referenceID" : 1,
      "context" : "The idea for this second kind of retraction, and the idea of having the updates on a sequence zt but computing gradients at points xt, is largely motivated by our recent work on the Katyusha momentum and the Katyusha acceleration [2].",
      "startOffset" : 230,
      "endOffset" : 233
    }, {
      "referenceID" : 6,
      "context" : "The following inequality is classically known as the “regret inequality” for mirror descent [7].",
      "startOffset" : 92,
      "endOffset" : 95
    }, {
      "referenceID" : 16,
      "context" : "5 in textbook [17]).",
      "startOffset" : 14,
      "endOffset" : 18
    }, {
      "referenceID" : 0,
      "context" : "Recently, researchers have shown that the general problem of finding (ε, ρ)-approximate local minima, under mild conditions, reduces to (repeatedly) finding ε-approximate stationary points for an O(ρ)-strongly nonconvex function [1, 9].",
      "startOffset" : 229,
      "endOffset" : 235
    }, {
      "referenceID" : 8,
      "context" : "Recently, researchers have shown that the general problem of finding (ε, ρ)-approximate local minima, under mild conditions, reduces to (repeatedly) finding ε-approximate stationary points for an O(ρ)-strongly nonconvex function [1, 9].",
      "startOffset" : 229,
      "endOffset" : 235
    }, {
      "referenceID" : 8,
      "context" : "[9] showed that an (ε, δ)-approximate minimum for the general problem (1.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 11,
      "context" : "(One can use for instance the shift-and-invert method [12].",
      "startOffset" : 54,
      "endOffset" : 58
    }, {
      "referenceID" : 0,
      "context" : "As argued in [1, 9], if the Hessian-vector multiplication ( ∇fi(x) ) v for an arbitrary vector runs in the same time as computing ∇fi(x) —which is the case for training neural nets— the optimum trade-off is δ = √ L2ε.",
      "startOffset" : 13,
      "endOffset" : 19
    }, {
      "referenceID" : 8,
      "context" : "As argued in [1, 9], if the Hessian-vector multiplication ( ∇fi(x) ) v for an arbitrary vector runs in the same time as computing ∇fi(x) —which is the case for training neural nets— the optimum trade-off is δ = √ L2ε.",
      "startOffset" : 13,
      "endOffset" : 19
    } ],
    "year" : 2017,
    "abstractText" : "Given a non-convex function f(x) that is an average of n smooth functions, we design stochastic first-order methods to find its approximate stationary points. The performance of our new methods depend on the smallest (negative) eigenvalue −σ of the Hessian. This parameter σ captures how strongly non-convex f(x) is, and is analogous to the strong convexity parameter for convex optimization. Our methods outperform the best known results for a wide range of σ, and can also be used to find approximate local minima. In particular, we find an interesting dichotomy: there exists a threshold σ0 so that the fastest methods for σ > σ0 and for σ < σ0 have drastically different behaviors: the former scales with n and the latter scales with n.",
    "creator" : "LaTeX with hyperref package"
  }
}