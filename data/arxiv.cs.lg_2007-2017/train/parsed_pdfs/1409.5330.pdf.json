{
  "name" : "1409.5330.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Jian Fang", "Shaobo Lin", "Zongben Xu" ],
    "emails" : [ "sblin1983@gmail.com" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n40 9.\n53 30\nv1 [\ncs .L\nG ]\n1 8\nSe p\nWe consider the approximation capability of orthogonal super greedy algorithms (OSGA) and its applications in supervised learning. OSGA is concerned with selecting more than one atoms in each iteration step, which, of course, greatly reduces the computational burden when compared with the conventional orthogonal greedy algorithm (OGA). We prove that even for function classes that are not the convex hull of the dictionary, OSGA does not degrade the approximation capability of OGA provided the dictionary is incoherent. Based on this, we deduce a tight generalization error bound for OSGA learning. Our results show that in the realm of supervised learning, OSGA provides a possibility to further reduce the computational burden of OGA in the premise of maintaining its prominent generalization capability. Keywords: supervised learning, nonlinear approximation, orthogonal super greedy algorithm, orthogonal greedy algorithm."
    }, {
      "heading" : "1. Introduction",
      "text" : "A greedy algorithm is a stepwise inference process that follows the problem solving heuristic of making the locally optimal choice at each stape with the hope of finding a global optimum. The use of greedy algorithms in the context of nonlinear approximation [1] is very appealing since it greatly reduces the computational burden when compared\n✩The research was supported by the National 973 Programming (2013CB329404), the Key Program of National Natural Science Foundation of China (Grant No. 11131006).\n∗Corresponding author: sblin1983@gmail.com\nPreprint submitted to Elsevier September 19, 2014\nwith standard model selection using general dictionaries. This property triggers avid research activities of greedy algorithms in signal processing [7, 16, 28], inverse problem [13, 29] and sparse approximation [12, 26].\nGreedy learning, or more specifically, applying greedy algorithms to tackle supervised learning problems, has been proved to possess charming generalization capability with lower computational burden than the widely used coefficient-based regularization methods [1]. From approximation to learning, greedy learning can be usually formulated as a four-stage stepwise learning strategy [32]. The first one is the “dictionary-selection” stage which constructs a suitable set of basis functions. The second one is the “greedydefinition” stage that sets the measurement criterion to choose new atoms (or elements) from the dictionary in each greedy step. The third one is the “iterative-rule” stage that defines the estimator based on the selected “greedy atoms” and the estimator obtained in the previous greedy step. The last one is the “stopping-criterion” stage which focuses on how to terminate the learning process.\nSince greedy learning’s inception in supervised learning [14], the aforementioned four stages were comprehensively studied for various purposes. For the “dictionary-selection” stage, Chen et al. [4] and Lin et al. [17] proposed that the kernel based dictionary is a good choice for greedy learning. For the “greedy-definition” stage, Xu et al. [32] pointed out that the metric of greedy-definition is not uniquely the greediest one. They provided a threshold to discriminate whether or not a selection is greedy and analyzed the feasibility of such a discrimination measurement. For the “iterative-rule stage”, Barron et al. [1] declared that both relaxed greedy iteration and orthogonal greedy iteration can achieve a fast learning rate for greedy learning. For the “stopping-criterion” stage, Barron et al. [1] provided an l0 complexity regularization strategy and Chen et al. [4] proposed an l1 complexity constraint strategy. All these results showed that as a new learning scheme, greedy learning deserves avid studying due to its stepwise learning character [14].\nAlthough the importance of a single stage of greedy learning was widely studied [1, 4, 17, 31], the relationship between these stages and their composite effects for learning also need classifying. In the recent work [32], Xu et al. established a relationship between the “greedy-definition” and “stopping-criterion” stages and successfully reduced the com-\nputational cost of greedy learning without sacrificing the generalization capability. This implies that the study of these relationships may bring additional benefits of greedy learning. In this paper, we aim to study the relationship between the “dictionary-selection” and “greedy-definition” stages of orthogonal greedy algorithms (OGA). Our idea mainly stems from an interesting observation. We observe that if the selected dictionary is an orthogonal basis, then it is not necessary to define greedy learning as a stepwise strategy. Indeed, due to the orthogonal property, we can select all required atoms from the dictionary simultaneously. Conversely, if the dictionary is redundant (or linear dependent), then greedy learning must be defined as a stepwise strategy due to the redundant property which usually causes a disorder of the learning process. This implies that specific features of a dictionary can be used to modify the greedy definition.\nTherefore, if the coherence, a specific feature of a dictionary, is utilized to describe the dictionary, we can improve the performance of OGA in the direction of either reducing the computational burden or enhancing the generalization capability. In this paper, we study the learning capability of orthogonal super greedy algorithm (OSGA) which was proposed by Liu and Temlyakov [18]. OSGA selects more than one atoms from a dictionary in each iteration step and hence reduces the computational burden of OGA. The aim of the present paper can be explained in two folds. The first one is to study the approximation capability of OSGA and the other is to pursue the pros and cons of OSGA in the context of supervised learning.\nFor OSGA approximation, it was shown in [18] (see also [19]) that for incoherent dictionaries, OSGA reduces the computational burden when compared with OGA. It can be found in [18, Theorem 2] that such a significant computational burden-reduction does not degrade the approximation capability if the target functions belong to the convex hull of the dictionary. However, such an assumption to the target functions is very stringent if the dimension of variable is large [1]. Our purpose is to circumvent the above problem by deducing convergence rates for functions not simply related to the convex hull of the dictionary. Interestingly, we find that, even for functions out of the convex hull of the dictionary, the approximation capability of OSGA is similar as that of OGA [1].\nFor OSGA learning, we find that if the dictionary is incoherent, then OSGA learning\nwith appropriate step-size can reduce the computational burden of OGA learning further. In particular, using the established approximation results of OSGA, we can deduce an almost same learning rate as that of OGA. This means that studying the relationship between the “dictionary-selection” and “greedy-definition” stages can build more efficient learning schemes with the same rate of convergence as OGA.\nThe paper is organized as follows. In Section 2, we review notations and preliminary results in greedy-type algorithms that are frequently referred to throughout the paper. In Section 3, we show the main result of this paper where a general approximation theorem for OSGA and its applications in supervised learning are established. In Section 4, we present a line of simulations to verify our viewpoints. In Section 5, we give proofs of the main results. In the last section, we further discuss the OSGA learning and draw a simple conclusion of this paper."
    }, {
      "heading" : "2. Greedy-type algorithms",
      "text" : "Let H be a Hilbert space endowed with norm and inner product ‖ · ‖ and 〈·, ·, 〉, respectively. Let D = {g}g∈D be a given dictionary. Define L1 = {f : f = ∑\ng∈D agg}. The norm of L1 is defined by ‖f‖L1 := inf { ∑ g∈D |ag| : f = ∑ g∈D agg } . We shall assume here and later that the elements of the dictionary are normalized according to ‖g‖ = 1. There exist several types of greedy algorithms [25]. The four most commonly used are the pure greedy, orthogonal greedy, relaxed greedy and stepwise projection algorithms, which are often denoted by their acronyms PGA, OGA, RGA and SPA, respectively. In all the above greedy algorithms, we begin by setting f0 := 0. The new approximation fk (k ≥ 1) is defined based on fk−1 and its residual rk−1 := f − fk−1. In OGA, fk is defined as\nfk = PVkf,\nwhere PVk is the orthogonal projection onto Vk = span{g1, . . . , gk} and gk is defined as\ngk = argmax g∈D\n|〈rk−1, g〉|.\nLet\nM = M(D) = sup g 6=h,g,h∈D |〈g, h〉|\nbe the coherence of the dictionary D. Let s ≥ 1 be a natural number. Initially, set f s0 = 0 and rs0 = f , then the OSGA proposed in [18] for each k ≥ 1 can be inductively define as the following.\n1) g(k−1)s+1, . . . , gks ∈ D are chosen according to\nmin i∈Ik |〈rsk−1, gi〉| ≥ sup g∈D,g 6=gi,i∈Ik |〈rsk−1, g〉|,\nwhere Ik = [(k − 1)s+ 1, ks]. 2) Let Vks = span{g1, . . . , gks} and define\nf sk := PVksf, (2.1)\nand\nrsk = f − f sk .\nThe following Lemma 2.1 proved in [18] shows that OSGA can achieve the optimal\napproximation rate of ks term nonlinear approximation [24].\nLemma 2.1. Let D be a dictionary with coherence M . Then, for s ≤ (2M)−1 + 1, the OSGA estimator (2.1) provides an approximation of f ∈ L1 with the following error bound:\n‖rsk‖2 ≤ 40.5‖f‖L1(sk)−1, k = 1, 2, . . . ."
    }, {
      "heading" : "3. Approximation and learning by OSGA",
      "text" : "In this section, after presenting some basic conceptions of the statistical learning theory, we deduce a general approximation theorem concerning OSGA and pursue its applications in supervised learning."
    }, {
      "heading" : "3.1. Statistical learning theory",
      "text" : "In most of machine learning problems, data are taken from two sets: the input space X ⊆ Rd and the output space Y ⊆ R. The relation between the variable x ∈ X and the variable y ∈ Y is not deterministic, and is described by a probability distribution ρ on Z := X × Y that admits the decomposition\nρ(x, y) = ρX(x)ρ(y|x),\nin which ρ(y|x) denotes the conditional (given x) probability measure on Y , and ρX(x) the marginal probability measure on X . Let z = (xi, yi) n i=1 be a set of finite random samples of size n, n ∈ N, drawn identically, independently according to ρ from Z. The set of examples z is called a training set. Without loss of generality, we assume that |yi| ≤ L for a prescribed (and fixed) L > 0. The goal of supervised learning is to derive a function f : X → Y from a training set such that f(x) is an effective and reliable estimate of y when x is given. A natural measurement of the error incurred by using f(x) for this purpose is the generalization error, given by\nE(f) := ∫\nZ\n(f(x)− y)2dρ,\nwhich is minimized by the regression function [6], defined by\nfρ(x) :=\n∫\nY\nydρ(y|x).\nThis ideal minimizer fρ exists in theory only. In practice, we do not know ρ, and we can only access random examples from X × Y sampled according to ρ. Let L2ρ\nX be the Hilbert space of ρX square integrable function onX , with norm denoted\nby ‖ · ‖ρ. With the assumption that fρ ∈ L2ρ X , it is well known [5] that, for every f ∈ L2ρX , there holds\nE(f)− E(fρ) = ‖f − fρ‖2ρ. (3.1)\nThe task of the least square regression problem is then to construct functions f z that approximates fρ, in the norm ‖ · ‖ρ, using finite samples."
    }, {
      "heading" : "3.2. Approximation capability of OSGA",
      "text" : "A consensus in the nonlinear approximation community is that greedy-type algorithms can break the “curse of dimensionality” [24]. Lemma 2.1 seems to verify this assertion, since a dimensional independent convergence rate was deduced. We find, however, this is not exactly true since, in practice, the condition that the target functions belong to the convex hull of the dictionary becomes more and more stringent as the dimension of variable grows [1]. The similar phenomenon concerning OGA approximation was successfully\ntackled in [1] by proving convergence results for a variety of function classes and not simply those are related to the convex hull of the dictionary.\nAlong the flavor of [1], we study the behavior of OSGA approximation when the target\nfunctions f ∈ H are more general. We consider the real interpolation spaces [3]\nRp = [H,L1]θ,∞, 0 < θ < 1,\nwith p defined by 1\np = θ + 1− θ 2 = 1 + θ 2 .\nRecall that f ∈ [X, Y ]θ,∞ if and only if for all t > 0, there holds [10]\nK(f, t) ≤ Ctθ, (3.2)\nwhere\nK(f, t) = K(f, t, X, Y ) = inf h∈Y\n{‖f − h‖X + t‖h‖Y }\nis the so-called K-functional. The smallest C satisfying (3.2) defines a norm for the interpolation space [X, Y ]θ,∞. Based on these preliminaries, we can obtain the following Theorem 3.1.\nTheorem 3.1. Let D be a dictionary with coherence M . Then for all f ∈ H, any h ∈ L1 and arbitrary s ≤ (2M)−1 + 1, the OSGA estimator (2.1) satisfies\n‖rsk‖2 ≤ ‖f − h‖2 + 27\n2 ‖h‖2L1(sk) −1, k = 1, 2, . . . , (3.3)\nand therefore,\n‖rsk‖ ≤ K ( f, 3 √ 6\n2 (sk)−1/2, H,L1\n)\n, k = 1, 2, . . . . (3.4)\nFrom the definition of the interpolation space Rp and (3.4), it follows that f ∈ Rp implies the rate of decay\n‖rsk‖ ≤ C1(ks)−θ/2.\nA similar error estimate for OGA has been provided in [1, Theorem 2.3], which says that for all f ∈ H and any h ∈ L1, the error of the OGA estimator satisfies\n‖rN‖2 ≤ ‖f − h‖2 + 4‖h‖2L1N−1, N = 1, 2, . . . . (3.5)\nWe note that OSGA adds s new atoms at each iteration and makes one orthogonal projection at each iteration. After k iterations of OSGA, there are totally sk atoms to build up the estimator. For comparison, OGA adds one atom at each iteration and makes one orthogonal projection at each iteration. While, it is obvious that there need sk iterations of OGA to deduce an estimator with sk atoms. Thus, the computational cost of OSGA is near s times lower than OGA. (3.3) together with (3.5) yields that such a computational burden reduction does not degenerate the approximation capability. The reason of this is that the specific feature of the dictionary, M-coherence, is used in OSGA. It can be found in Theorem 3.1 that if M > 1/2, OSGA coincides with OGA."
    }, {
      "heading" : "3.3. OSGA learning",
      "text" : "It was pointed out in [18] that OSGA can be applied in compressed sensing very well. In this subsection, we pursue its applications in supervised learning. It can also be found in [1, Theorem 3.1] that the error estimate formed as (3.3) plays an important role in analyzing the generalization capability of greedy-type algorithms. Based on this, we can deduce the generalization error of OSGA in the context of regression.\nGiven training samples z, we define the empirical norm and inner product as\n‖f‖2n = 1\nn\nn ∑\ni=1\n|f(xi)|2,\nand\n〈f, g〉n = 1\nn\nn ∑\ni=1\nf(xi)g(xi),\nrespectively. The OSGA learning scheme studied in this subsection is shown in the following Algorithm 1.\nAlgorithm 1 OSGA learning. Initialization: Data z = (xi, yi) n i=1, step-size s, iteration number m, inner product 〈·, ·〉n, f0 = 0, V0 = ∅, r s z,0(x) satisfies r0(xi) = yi, and y(x) satisfies y(xi) = yi. Stage1: Dictionary-selection: Select\nDN := {gi : i = 1, . . . , N}\nwith ‖gi‖n = 1. Stage2: Greedy definition: Choose g(k−1)s+1, . . . , gks ∈ DN according to\nmin i∈Ik\n|〈rs z,k−1, gi〉n| ≥ sup\ng∈D,g 6=gi,i∈Ik\n|〈rs z,k−1, g〉n|, (3.6)\nwhere rs z,k−1 is the residual defined by r s z,k−1 := y − f sz,k−1 and Ik = [(k − 1)s+ 1, ks]. Stage3. Iterative rule: Let Vks = Span(g1, ..., gks). Compute the k step approximation f s z,k as:\nf s z,k = Pz,Vks(y) (3.7)\nand the residual: rs z,k := y− f sz,k, where Pz,Vks is the orthogonal projection onto space Vks in the metric of 〈·, ·〉n.\nStage4. Stopping criterion : If k = m then stop and obtain the final estimator f s z,m, otherwise set k = k + 1 and repeat Stage 1-Stage 4.\nIt is shown in Algorithm 1 that the only difference between OSGA and OGA learning [1] is that in OSGA there are s atoms selected in the “greedy-definition” stage. Therefore the computational burden of OGA is further reduced. The first result in this subsection is to illustrate that such a reduction do not degrade the generalization capability of OGA learning, provided the dictionary is incoherent and the step-size is appropriated tuned.\nTheorem 3.2. Let f s z,m be defined as in Algorithm 1, and DN be a dictionary with coherence M . If s ≤ (2M)−1 + 1, then for all functions h in span(DN), there holds\nE(‖ΠLf sz,m − fρ‖2ρ) ≤ 8‖h− fρ‖2ρ + 108\nsm ‖h‖2L1,N + C\nms log n\nn ,\nwhere ΠLu := min{L, |u|}sgn(u) is the truncation operator at level L,\n‖f‖L1,N := inf{ N ∑\ni=1\n|ai| : f = N ∑\ni=1\naigi},\nand C is a constant depending only on fρ and L.\nIn Theorem 3.2, we propose a truncation operator on the OSGA estimator. It should be noted that such a truncation operator does not require any computation. Furthermore, as y ∈ [−L, L], it is easy to deduce [33] that\n‖ΠLf sz,m − fρ‖2ρ ≤ ‖f sz,m − fρ‖2ρ.\nTheorem 3.2 provides an oracle-type error estimate for the OSGA learning, since the final error estimate can only be deduced some oracle about the regression function. We further notice that up to the constant, the deduced oracle inequality is the same as that deduced in [1] with k in [1, Theorem 3.1] replaced by ms in Theorem 3.2. Therefore, as a computational burden reduction version of OGA learning, OSGA learning does not degrade the generalization capability of OGA learning in the sense that they can obtain the same learning rate.\nTo classify the learning rate, we should give some assumptions (oracle) to the regression function. Along [1]’s flavor, for r > 0, we define the space Lr1 as the set of all functions f such that, for all N , there exists h ∈ span{DN} satisfying\n‖h‖L1 ≤ B, and ‖f − h‖ρ ≤ BN−r. (3.8)\nThe infimum of all such B defines a norm (for f ) on Lr1. Furthermore, let a ≥ 1 is fixed we assume that the size of dictionary, N , satisfies N ∼ na. If fρ ∈ Lr1, we can deduce the following learning rate estimate of OSGA learning.\nCorollary 3.3. Suppose that the assumptions of Theorem 3.2 holds. If fρ ∈ Lr1, N ∼ na and a ≥ 1\n4r , then we can choose m satisfying m ∼ n1/2 s such that\nE(‖ΠLf sz,m − fρ‖2ρ) ≤ C (n/ log n)−1/2 .\nwhere C is a constant depending only on L and fρ.\nIt should be highlighted that the main difficulty of OSGA learning is to select an appropriate iteration number, m. Corollary 3.3 proposes a strategy of selecting the best m, but the main flaw is that such a choice depends heavily on the prior fρ ∈ Lr1. In practice, it is usually impossible to verified. Thus, we turn to pursue a universal strategy to fix m. Hence, we use the same l0 complexity regularization strategy as that in [1] to choose m.\nWe define the estimator f̂ = Πf z,m∗ , where m\n∗is chosen to minimize (over all m > 0)\nthe penalized empirical risk\n‖y − ΠLf sz,m‖2n + κ ms logn\nn , (3.9)\nwith κ a constant depending only on L and a.\nNoting Theorem 3.1, using the almost same method as that in [1, Theorem 3.1] we\ncan deduce the following Theorem 3.4.\nTheorem 3.4. If the assumptions in Theorem 3.2 hold, then there exists a κ depending only on L and a such that for all m > 0 and h ∈ span(DN), there holds\nE(‖f̂ − fρ‖2ρ) ≤ 8‖h− fρ‖2ρ + 108\nsm ‖h‖2L1,N + C\nms logn\nn ,\nwhere C is a constant depending only on κ and L.\nFor the sake of brevity, we omit the proof of Theorem 3.4. We refer the readers to the proof of Theorem 3.1 in [1] for the details. If some assumptions are added to the regression function fρ, then we can also deduce the following learning rate estimate.\nCorollary 3.5. If fρ ∈ Lr1, a ≥ 14r and the assumptions of Theorem 3.4 holds, there exists a κ depending only on L and a such that for all m > 0 and h ∈ span(DN),\nE(‖f̂ − fρ‖2ρ) ≤ C (n/ logn)−1/2 .\nwhere C is a constant depending only on κ, L and fρ.\nCorollary 3.5 together with [1, Corollary 3.6] shows that OSGA does not degenerate the learning performance when compared with OGA by using the l0 complexity regularization strategy to fix the iteration number. However, it has already been pointed out in [1, Remark 3.5] that κ should satisfy κ ≥ 2568L4(a + 5). Such a pessimistic estimate\nmakes the l0 complexity regularization strategy (3.9) always infeasible. In practice, this may result in selecting a too small value for m∗. Many of the programmers’ spirit will be dampened by this restriction, and shy away from running OSGA for large m. Therefore, the value of the previous results is only to classify the theoretical feasibility. To facilitate the use of OSGA, we need to find another strategy to choose m rather than the l0 complexity regularization (3.9). A widely used approach is the so-called “cross-validation” [15, Chapter 8], which has also proposed for OGA learning by Barron et al. in [1]."
    }, {
      "heading" : "4. Simulation Supports",
      "text" : "In this section, we present several toy simulations to illustrate the feasibility, effectiveness, and efficiency of OSGA learning. The main purpose can be divided into three aspects. The first one is to reveal that there exists a relationship between the “dictionaryselection” stage and “greedy-definition” stages for greedy learning. Since the incoherence assumption is too strict to describe the property of the dictionary and difficult to verify, especially for supervised learning [21], we do not implement the simulation for dictionaries with such a pessimistic assumption. Instead, we utilize two widely used dictionaries such as the trigonometric polynomial dictionary and Gaussian radial basis function dictionary to justify our viewpoint. The second one is to analyze the pros and cons of OSGA learning. In particular, we compare both the training time and test time between OSGA learning and OGA learning with different dictionaries for different regression functions. The last one is to compare the performance of OSGA with other typical dictionary learning strategy such as the OGA learning [1], Lasso [27], ridge regression [23], bridge regression [9] (for example, the half coefficient regularization [30]) and greedy boosting [14]. It should be noted that the aim of this simulation is to compare different learning strategies for fixed dictionaries, thus we only employ two fixed dictionaries rather than pursuing the best dictionary. Given the dictionary, we then analyze different performances of the aforementioned different learning schemes."
    }, {
      "heading" : "4.1. Experiment Setup",
      "text" : "Data sets: we employ two regression functions fρ as\nf1(x) = sinc(40x− 10) + sinc(60x− 30) + sinc(20x− 1) + cos(10x),\nwhere sinc(t) = sin t t , and\nf2(x) =\n    \n    1/3− x, if 0 ≤ x < 1/3, x2, if 1/3 ≤ x ≤ 2/3; −1, 2/3 < x ≤ 1.\nIt is easy to see that f1 is an infinitely differential function and f2 is a discontinuous function. We generated the training sample set z = {(xi, yi)}5000i=1 through independently and randomly sampling xi from U(0, 1) , and the corresponding y′is to be yi = fρ(xi) + ǫ, with ε ∼ N(0, 0.1) being the white noise. The learning performances of different algorithms were then tested by applying the resultant estimators to the test set ztest = {(x(t)i , y (t) i )}5000i=1 which was generated similarly to z but with a promise that y′is were always taken to be y (t) i = fρ(x (t) i ).\nDictionary: In each simulation, we adopt two types of dictionaries. The first one is constructed by the Gaussian radial basis function: exp{−σ|x − ti|2} with {ti}500i=1 being drawn identically and independently from U(0, 1) and appropriately selected σ. Indeed, we set σ = 200 for f1 and σ = 1000 for f2. The other one is constructed by the trigonometric polynomial: cos kt with k ∈ {1, 2, ..., 500}. Methods: For OSGA and OGA learning, we applied QR decomposition to acquired the least squared estimates [22]. For greedy boosting, we used the L2boost algorithm [14] with the step size 0.0005. For L2 coefficient regularization (or ridge regression), we use its analytic regularized least square solution [5]. For L1 (or lasso) and L1/2 coefficient regularization schemes, we utilize the iterative soft [8] and half [30] thresholding algorithms to obtain the corresponding estimators, respectively.\nMeasurements: Since the aim of the toy simulations is to justify the feasibility of OSGA, we don’t access any concrete parameter-selection strategies. Therefore, we draw our conclusion in the basis of the most appropriate parameters. Under this circumstance,\nwe do not divide the training set into training data and validation data and use validation data to choose parameters as in [15], instead, we use the test set to fix parameters directly. To be detailed, the iteration steps for OSGA, OGA and greedy boosting, and the regularization parameters λ ∈ {2−10, 2−9, ..., 210} for Lq coefficients regularization with q = 1/2, 1, 2 are selected when the prediction error on the test data is minimized. We recorded the rooted mean squared error (RMSE) of test error, the sparsity of the coefficients, and the training time under the selected parameters to measure the performances of the mentioned learning schemes.\nEnvironment: All the simulations and experiments were conducted in Matlab R2013a on a desktop computer with Windows 7/Intel(R)/Core(TM) i7-3770K RAM and 3.50GHz CPU, and the statistics were averaged based on 100 independent trials."
    }, {
      "heading" : "4.2. The relationship between dictionary-selection and greedy-definition",
      "text" : "Theorem 3.2 theoretically presents that if the relationship between the “dictionaryselection” and “greedy-definition” stages is considered, then the efficiency of greedy learning can be essentially improved. However, such a theoretical result is built on the incoherence property of the dictionary. As is shown in [21], the incoherence assumption in the background of supervised learning is too strict to describe the property of dictionaries. We guess that there may exist a much looser measurement than it within our purpose. To verify this conjecture, we employ both trigonometric polynomial dictionary (TPD) and Gaussian radial basis dictionary (GRD) to be the carriers of OSGA. It can be found in [2] that the TPD dictionary together with the random samples can develop a wellconditioned sampling matrix [2, Theorem 5.1], while the sampling matrix constructed by GRD is usually ill-conditioned [20]. We compare the TPD and GRD for OSGA learning, so as to experimentally study how the “dictionary-selection” stage influences the “greedydefinition” stage. Fig.1 and Fig.2 summarize the learning rate of OSGA for the continuous regression function f1 and the discontinuous regression function f2, respectively.\nIt is seen from Fig.1(a) that when the TPD is selected, the RMSE does not increase as the step-size s increases. However, Fig.1(b) shows that when the GRD is selected, the RMSE increases obviously. A similar trend can also be observed when applying\nthe OSGA on the discontinuous regression function f2, as shown in Fig.2. From an experimental viewpoint, such differences demonstrate that a dictionary with certain good properties do help to redefine what is greedy in the “greedy-definition” stage and improve the efficiency of greedy learning while a “bad” dictionary can not bring such benefits. All these simulations reveal that there does exist a relationship between the “dictionaryselection” and“greedy-definition” stages.\nIt should be noted from Fig.1 (b) and Fig.2 (b) that even for the GRD, OSGA does not degrade the generalization capability of OGA very much. Indeed, taking Fig.1 for example, from s = 1 to s = 10, the RMSE only increases from 0.0073 to 0.0097. This phenomenon shows that at the cost of a small loss of generalization capability, OSGA\nprovides a possibility to reduce the computation burden of OGA learning, even for some “bad” dictionaries. The main reason of this phenomenon, from our point of view, can be stated as follows. As s increases, due to the high-correlation of the atoms of GRD, the selected atoms via (3.6) are high-correlated to the residual rs z,k−1, so they are highcorrelated with each other. Therefore, the approximation capability of the spanned space Vsk are not much better than Vs(k−1)+1, where Vs(k−1)+1 denotes the span of dictionary in which only one atom is added to Vs(k−1) = {g1, . . . , gs(k−1)} according to the classical greedy definition. However, as the atoms of Vsk is more than that of Vs(k−1)+1, and the high-correlation of GRD, the capacity of Vsk is only larger than that of Vs(k−1)+1 to a limited extent. Thus, according to the known bias and variance trade-off principle [6], the bias decreases a little while the variance increases a little, which makes the final generalization error varies only a little. As a consequence, more atoms are required to reach a good prediction as compared with OGA."
    }, {
      "heading" : "4.3. The pros and cons of OSGA Learning",
      "text" : "The main motivation to introduce OSGA to tackle supervised learning problem is that OSGA can reduce the computational burden of OGA, provided the dictionary possess some prominent property. The main purpose of this series of simulations is to verify this pros of OSGA learning. Furthermore, we also experimentally analyze the cons of OSGA learning. To this end, we aim to compare both the training time and test time of OSGA learning with different step-size, s. As the test time only depends on the sparsity of the coefficients of the deduced estimator, we record both the training time (Fig.3) and sparsity of the estimator (4) as a function of s.\nIt can be found in Fig.3 that, to deduce the OSGA estimator, the training time monotonously decreases with respect to s. This implies that as far as the training time is concerned, OSGA learning outperforms than OGA learning. The reason is that OSGA learning can skip many least square estimation for a large s, as compared with the standard OGA. This conclusion is regarded as the main pros of OSGA learning. On the other hand, as shown in Fig.4, the number of the selected atoms of the OSGA estimator may be a bit larger than OGA, which is witnessed in Fig.4 (a), (b), (d). Under this circumstance, the\ntest cost of OSGA learning is larger than that of OGA learning, which can be considered as the main cons of OSGA learning.\nThe above two simulations only take the computational burden for OSGA into account.\nWe further do the following simulations to consider both the computational burden and generalization capability. Since the sparsity of the OSGA estimator is the product of the iteration number m and step-size s, the training time also depends heavily on the sparsity. Therefore, we employ a simulation by setting RMSE as a function of the sparsity, k. Such a simulation, shown in Fig.5 presents a summary of OSGA learning. It is seen that the number of atoms required for the smallest RMSE, may grow as the step-size s increases (see (a), (b), (d) in Fig.5). Furthermore, the obtained least RMSE for different s varies very little. These show that OSGA learning can reduce the computational burden of OSGA without sacrificing the generalization capability very much, and the price (or risk) to do such a reduction is that the test time may increase. It should be highlighted in Fig.5 that, for the well developed dictionary, TPD, and a suitable regression function, all the training time, test time and RMSE can be reduced by utilizing OSGA. The reason for these phenomenons is similar as that presented in the bottom of the last subsection. For “bad” dictionary such as GRD, the bias decreases a little while the variance increases a little as s increases. Due to the high-correlation of GRD, the quantity of decreased bias is smaller than that of increased variance. Thus, it requires more atoms and makes the generalization error a little larger. For a “good” dictionary such as TPD, and an appropriate regression function, the quantity of decreased bias can be larger than that of increased variance, which leads to both smaller sparsity of the estimator and less generalization error."
    }, {
      "heading" : "4.4. The generalization ability of OSGA Learning",
      "text" : "Finally, we assess the generalization capacity of OSGA learning as compared with some typical dictionary-based learning methods. As the purpose of this paper is not to pursue the best dictionary, we just employ two fixed dictionaries as GRD and TPD. Specifically, we run the OSGA-1 (or OGA), OSGA-2, OSGA-5, OSGA-10, Lasso, ridge regression, half regression, and greedy boosting on the same data and dictionaries. Here, OSGA-s denotes that there are s atoms selected in the “greedy-definition” stage of OSGA. The results are summarized in Tables 1 and 2. It can be found in Tables 1 and 2 that for GRD, the test error of OSGA-s increases as s increases, while for TPD, the test error of\nOSGA-s monotonously decreases with respect to s, which verifies our assertion proposed in Section 4.2 further. Moreover, it is shown in Tables 1 and 2 that the performance of OSGA is similar to other competitive methods. This shows that OSGA can reduce the computational burden without sacrificing the generalization capability very much.\nIt should be noted that the results of OSGA is searched in the whole finite discrete parameter space, and therefore it is easy for OSGA to select the best parameter. However, for both greedy boosting and Lq coefficient regularization, their main parameters are distributed in continuous (or infinite) spaces, which makes the best parameters be difficult to achieve. This phenomenon can be regarded as another advantage of OSGA, and also give a reason why Lq coefficient regularization and greedy boosting’s generalization capability seems worse than OSGA in the second column of Table 2. We believe that if a more elaborate parametric selection method is given, then the RMSE of these methods\ncan reduce."
    }, {
      "heading" : "5. Proofs",
      "text" : "can be found in [12] and [11], respectively.\nLemma 5.1. Assume a dictionary D has coherence M . Then we have for any distinct gj ∈ D, j = 1, 2, . . . , s and for any aj, j = 1, 2 . . . , s, the inequalities\n(1−M(s− 1)) s ∑\ni=1\na2i ≤ ∥ ∥ ∥ ∥\n∥\ns ∑\ni=1\naigi\n∥ ∥ ∥ ∥ ∥ 2 ≤ (1 +M(s− 1)) s ∑\ni=1\na2i .\nLemma 5.2. Assume a dictionary D has coherence M . Let {gi}si=1 ⊂ D and G(s) := span{g1, . . . , gs}. Then we have\n1\n1 +M(s− 1)\ns ∑\ni=1\n〈f, gi〉2 ≤ ‖PG(s)(f)‖2 ≤ 1\n1−M(s− 1)\ns ∑\ni=1\n〈f, gi〉2.\nProof. It follows from the definition of PG(s)(f) that\n‖PG(s)(f)‖ = max ψ∈G(s),‖ψ‖≤1 |〈f, ψ〉|.\nLet ψ = ∑s i=1 aigi. Then it follows form Lemma 5.1 that for arbitrary ψ ∈ G(s) and ‖ψ‖ ≤ 1, there holds |〈f, ψ〉|2 = ∣ ∣ ∣\n∣ ∣\n〈\nf, s ∑\ni=1\naigi\n〉∣\n∣ ∣ ∣ ∣\n2\n=\n∣ ∣ ∣ ∣ ∣ s ∑\ni=1\nai 〈f, gi〉 ∣ ∣ ∣ ∣\n∣\n2\n≤ s ∑\ni=1\na2i\ns ∑\ni=1\n〈f, gi〉2 ≤ 1\n1−M(s− 1)\ns ∑\ni=1\n〈f, gi〉2.\nTherefore, we get\n‖PG(s)(f)‖2 ≤ 1\n1−M(s− 1)\ns ∑\ni=1\n〈f, gi〉2.\nTo bound ‖PG(s)(f)‖2 from below, noting ∥\n∥ ∥ ∥ ∥\ns ∑\ni=1\n〈f, gi〉gi\n∥ ∥ ∥ ∥ ∥ 2 ≤ (1 +M(s− 1)) s ∑\ni=1\n〈f, gi〉2,\nwe have ∥\n∥ ∥ ∥ ∥\ns ∑\ni=1 〈f, gi〉 (1 +M(s− 1))1/2 |∑si=1〈f, gi〉2| 1/2 gi\n∥ ∥ ∥ ∥ ∥ ≤ 1.\nThus, there holds\n‖PG(s)(f)‖2 = max ψ∈G(s),‖ψ‖≤1\n|〈f, ψ〉| ≥ ∣ ∣ ∣\n∣ ∣\n〈\nf,\ns ∑\ni=1 〈f, gi〉 (1 +M(s− 1))1/2 |∑si=1〈f, gi〉2| 1/2 gi\n〉∣\n∣ ∣ ∣ ∣\n2\n=\n∣ ∣ ∣ ∣ ∣ s ∑\ni=1\n〈f, gi〉2\n(1 +M(s− 1))1/2 | ∑s i=1〈f, gi〉2| 1/2\n∣ ∣ ∣ ∣ ∣ 2\n=\n∣ ∣ ∣ ∣ ∣ ∣ (1 +M(s− 1))−1/2 ( s ∑\ni=1\n〈f, gi〉2 )1/2\n∣ ∣ ∣ ∣ ∣ ∣ 2\n= (1 +M(s− 1))−1 s ∑\ni=1\n〈f, gi〉2.\nThis finishes the proof of Lemma 5.2\nLemma 5.3. Let (an)n 6=0 be a set of decreasing nonnegative numbers that satisfy a0 ≤ R and ak ≤ ak−1 ( 1− ak−1 R ) for all k > 0. Then, for all n > 0, there holds an ≤ Rn+1 .\nBy the help of the above lemmas, we are in a position to give the proof of Theorem\n3.1.\nProof of Theorem 3.1. Let Pf be the projection of f onto L1. Noting that every element of L1 can be approximated arbitrarily well by elements of the form\nφ = ∞ ∑\nj=1\ncjgj, gj ∈ D, ∞ ∑\nj=1\n|cj | ≤ ‖Pf‖L1 + δ, |c1| ≥ |c2| ≥ . . . ,\nwhere δ > 0 is arbitrary positive number. It will be clear from the following argument that it is sufficient to consider elements Pf of the above form. Suppose v is such that\n|cv| ≥ 2(‖Pf‖L1 + δ)\ns ≥ |cv+1|.\nThen, the aforementioned assumption on the sequence {cj} yields that v ≤ s2 and |cs+1| < ‖Pf‖L1+δ\ns . We claim that elements g1, . . . , gv will be chosen among ϕ1, . . . , ϕs at the first\niteration. Indeed, for j ∈ [1, v], we have |〈Pf , gj〉| = ∣ ∣ ∣ ∣\n∣\n〈\n∞ ∑\nk=1\nckgk, gj\n〉∣\n∣ ∣ ∣ ∣ =\n∣ ∣ ∣ ∣ ∣ cj + ∑\nk 6=j\nck〈gk, gj〉 ∣ ∣ ∣ ∣\n∣\n≥ |cj| − ∣ ∣ ∣ ∣\n∣\n∑\nk 6=j\nck〈gk, gj〉 ∣ ∣ ∣ ∣\n∣\n≥ |cj | −M(‖Pf‖L1 + δ − |cj|)\n= |cj|(1 +M)−M((‖Pf‖L1 + δ) ≥ 2(‖Pf‖L1 + δ)\ns (1 +M)−M(‖Pf‖L1 + δ).\nFor all g distinct from g1, . . . , gs, we have\n|〈Pf , g〉| = ∣ ∣ ∣ ∣\n∣\n∞ ∑\nk=1\nck〈gk, g〉 ∣ ∣ ∣ ∣\n∣\n< (‖Pf‖L1 + δ)\ns +M(‖Pf‖L1 + δ) = (‖Pf‖L1 + δ)(M +\n1 s ).\nSince s ≤ 1 2M + 1, we obtain\n|〈Pf , gi〉| ≥ |〈Pf , g〉|\nfor all g distinct from g1, . . . , gs. This implies that\n|〈f, gi〉| ≥ |〈f, g〉|\nfor all g distinct from g1, . . . , gs. Thus, we do not pick any g ∈ D distinct from g1, . . . , gs until we have chosen all g1, . . . , gv.\nNow we proceed the proof of Theorem 3.1. Denote Fm = span(ϕi, i ∈ Im). Then, Hm−1, Fm ∈ Hm. Therefore,\nrsm = f − PHm(f) = rsm−1 + f sm−1 − PHm(rsm−1 + f sm−1) = rsm−1 − PHm(rsm−1).\nIt is clear that the inclusion Fm ⊂ Hm implies\n‖rsm‖ ≤ ‖rsm−1 − PFm(rsm−1)‖.\nUsing the notation pm = PFm(r s m−1). We continue\n‖rsm−1‖2 = ‖rsm−1 − pm‖2 + ‖pm‖2\nand\n‖rsm‖2 ≤ ‖rsm−1‖2 − ‖pm‖2.\nIt is obvious that for arbitrary h ∈ L1,\n‖rsm−1‖2 = 〈rsm−1, f〉 = 〈rsm−1, h+ f − h〉 = 〈rsm−1, h〉+ 〈rsm−1, f − h〉.\nThe known Cauchy-Schwarz inequality implies that\n〈rsm−1, f − h〉 ≤ ‖rsm−1‖ · ‖f − h‖. (5.1)\nNow we turn to bound 〈rsm−1, h〉. Denote Jl = [(l − 1)s + v + 1, ls + v], G(Jl) = span{gi}i∈Jl, and\nqs = qs(r s m−1) = sup\ngi∈D,i∈[1,s]\n‖PG(s)(rsm−1)‖,\nwe then write for m ≥ 2,\n〈rsm−1, h〉 = 〈 rsm−1, h− v ∑\nj=1\ncjgj\n〉\n=\n〈\nrsm−1, ∞ ∑\nj=v+1\ncjgj\n〉\n=\n∞ ∑\nl=1\n〈rsm−1, ∑\nj∈Jl\ncjgj〉 = ∞ ∑\nl=1\n∑\nj∈Jl\ncj〈rsm−1, gj〉\n≤ ∞ ∑\nl=1\n(\n∑\nj∈Jl\nc2j\n)1/2( ∑\nj∈Jl\n〈rsm−1, gj〉2 )1/2 .\nHence, Lemma 5.2 implies that\n〈rsm−1, h〉 ≤ ∞ ∑\nl=1\n(\n∑\nj∈Jl\nc2j\n)1/2\n(1 +M(s− 1))1/2PG(Jl)(rm−1)\n≤ ∞ ∑\nl=1\n(\n∑\nj∈Jl\nc2j\n)1/2\n(1 +M(s− 1))1/2qs.\nAs the sequence {cj} has the property\n|cv+1| ≥ |cv+2| ≥ · · · , ∞ ∑\nj=v+1\n|cj| ≤ ‖h‖L1 + δ, |cv+1| ≤ 2(‖h‖L1 + δ)\ns ,\nwe may apply the simple inequality\n(\n∑\nj∈Jl\nc2j\n)1/2\n≤ |c(l−1)s+v+1|s1/2\nso that we have\n∞ ∑\nl=1\n(\n∑\nj∈Jl\nc2j\n)1/2\n≤ s1/2 ∞ ∑\nl=1\n|c(l−1)s+v+1| ≤ s1/2  \n2(‖h‖L1 + δ) s +\n∞ ∑\nl=2\ns−1 ∑\nj∈Jl−1\n|cj|\n\n\n≤ 3(‖h‖L1 + δ)s−1/2.\nTherefore, we obtain\n〈rsm−1, h〉 ≤ qs(1 +M(s− 1))1/23(‖h‖L1 + δ)s−1/2. (5.2)\nIt follows from (5.1) and (5.2) that\n‖rsm−1‖2 ≤ ‖rsm−1‖‖f − h‖+ qs(1 +M(s− 1))1/23(‖h‖L1 + δ)s−1/2\n≤ 1 2 (‖rsm−1‖2 + ‖f − h‖2) + qs(1 +M(s− 1))1/23(‖h‖L1 + δ)s−1/2.\nDenote am = ‖rsm‖2 − ‖f − h‖2, then (5.2) implies that\nqs ≥ am−1s\n1/2\n3(‖h‖L1 + δ)(1 +M(s− 1))1/2 .\nNote that if for some k0, we have ‖rsk0−1‖ ≤ ‖f − h‖, then the theorem holds trivially for all N ≥ k0 − 1. We therefore assume that ak−1 is positive, so that we can write\nq2s ≥ a2m−1s\n9(‖h‖L1 + δ)2(1 +M(s− 1)) .\nThus, we obtain\n‖rsm‖2 ≤ ‖rsm−1‖2 − ‖pm‖2 ≤ ‖rsm−1‖2 − q2s ≤ ‖rsm−1‖2 − a2m−1s\n9(‖h‖L1 + δ)2(1 +M(s− 1)) ,\nwhich, by subtracting ‖f − h‖2 in the both sides, gives\nam ≤ am−1 ( 1− am−1s 9(‖h‖L1 + δ)2(1 +M(s− 1)) ) .\nThe above inequality together with Lemma 5.3 yields that\nam ≤ 9(‖h‖L1 + δ)2(1 +M(s− 1))\ns m−1, (5.3)\nprovided that\na1 ≤ 9(‖h‖L1 + δ)2(1 +M(s− 1))\ns . (5.4)\nTo prove (5.4), we remark that either a0 ≤ 9(‖h‖L1+δ) 2(1+M(s−1))\ns , so that the same holds\nfor a1, or a0 ≥ 9(‖h‖L1+δ) 2(1+M(s−1))\ns , in which case a1 < 0 by (5.3), which means that we\nare already in the trivial case ‖rs1‖ ≤ ‖f − h‖ for which there is noting to prove. As δ is arbitrary positive number and s ≤ 1\n2M + 1, we have\n‖rsm‖2 ≤ ‖f − h‖2 + 9(‖h‖L1 + δ)2(1 +M(s− 1))(sm)−1 ≤ ‖f − h‖2 + 27\n2 ‖h‖2L1(sm) −1.\nThis finishes the proof of Theorem 3.1.\nTo prove Theorem 3.2, we need the following lemma, which can be found in [15,\nTheorem 11.3]. Lemma 5.4. Suppose that Fn is a linear vector space of functions f : X → Y which may depend on x1, . . . , xn. Let µ = µ(x1, . . . , xn) be the vector space dimension of Fn. If we define f\nz,Fn as\nf z,Fn := arg min\nf∈Fn\n1 n\nn ∑\ni=1\n|f(xi)− yi|2,\nthen we have\nE(‖Πf z,Fn − fρ‖2ρ) ≤ CL2\nµ logn\nn + 8 min f∈Fn ‖fρ − f‖2ρ,\nwhere C is a universal constant.\nBased on Lemma 5.4, we give the proof of Theorem 3.2. Proof of Theorem 3.2. We divide the OSGA(s) into two parts. The one is to choose sm atoms from the dictionary using m steps and the other is to implement a least\nsquare algorithm on an sm-dimensional linear space Vsm. Once the sm-dimensional linear space is fixed, it follows from Lemma 5.4 that\nE(‖Πf s z,m − fρ‖2ρ) ≤ L2\nsm logn\nn + min f∈Vsm ‖fρ − f‖2ρ. (5.5)\nThus, we only need to give an upper bound of minf∈Vsm ‖fρ − f‖2ρ. By Theorem 3.1, we obtain for arbitrary h ∈ spanDN ,\n1 n\nn ∑\ni=1\n(yi − f sz,m(xi))2 − 1\nn\nn ∑\ni=1\n(yi − fρ(xi))2\n≤ 1 n\nn ∑\ni=1\n(yi − h(xi))2 − 1\nn\nn ∑\ni=1\n(yi − fρ(xi))2 + 27\n2 ‖h‖2L1,N (ms) −1.\nIt follows from (3.1) that\n‖f s z,m − fρ‖2ρ = E\n(\n1 n\nn ∑\ni=1\n(yi − f sz,m(xi))2 − 1\nn\nn ∑\ni=1\n(yi − fρ(xi))2 )\n= E(|y − f s z,m(x)|2)−E(|y − fρ(x)|2)\nand\n‖h− fρ‖2ρ = E ( 1\nn\nn ∑\ni=1\n(yi − h(xi))2 − 1\nn\nn ∑\ni=1\n(yi − fρ(xi))2 )\n= E(|y − h(x)|2)−E(|y − fρ(x)|2).\nThe above two equalities yield that\nmin f∈Vsm\n‖fρ − f‖2ρ ≤ ‖fρ − f sz,m‖2ρ ≤ ‖h− fρ‖2ρ + 27\n2sm ‖h‖2L1,N ,\nwhich together with (5.5) completes the proof of Theorem 3.2."
    }, {
      "heading" : "6. Concluding Remarks",
      "text" : "The main contributions of the present paper can be summarized as follows. Firstly, we have proposed that studying the relationship between the “dictionary-selection” and “greedy-definition” stages can improve the learning performance of greedy learning. In fact, we borrowed the idea of orthogonal super greedy algorithm (OSGA) for incoherent dictionaries from nonlinear approximation and compressive sensing [18] to the supervised\nlearning problem and analyze the pros and cons of OSGA learning. Secondly, we have established an approximation theorem of OSGA approximation and show that OSGA is also available to a variety of target function classes which is not simply related to the convex hull of the dictionary. Such an approximation theorem is the main tool to generalize the application of OSGA from approximation to learning. Thirdly, we have theoretically proved that, for incoherent dictionaries, OSGA learning can reduce the computational burden of OGA learning without sacrificing its generalization capability. Precisely, our error estimate for OSGA learning yields a learning rate as (n/ logn)−1/2, which is the same as that of OGA [1]. Finally, we have studied the numeral performance of OSGA. Our results show that when applied in supervised learning problem, OSGA yields a similar prediction accuracy as both OGA and other dictionary-based learning schemes, but has the potentials to reduce the price in both training and test time.\nTo make sense of the OSGA learning presented in this paper, we conclude this paper\nby the following remarks concerning some crucial issues of OSGA learning.\nRemark 6.1. In Theorem 3.2, we study the learning capability of OSGA under the assumption that the dictionary is incoherent. However, in Section 4, we employ the simulations by utilizing two fixed dictionaries: TPD and GRD. It is easy to see that neither TPD nor GRD satisfies the conditions of Theorem 3.2. However, the numerical results show that implementing OSGA in TPD can improve the learning performance compared with the classical OGA. This fact shows that the theoretical results about OSGA are a bit pessimistic and the incoherence constraint to the dictionary can be relaxed further. Thus, we are usually asked for an essentially constraint to the dictionary instead of the incoherence. Under this constraint, OSGA can essentially improve the learning performance in the sense that OSGA reduces the computational burden of OGA without sacrificing its generalization capability. Admittedly, this is a very difficult but important issue about OSGA learning. We will keep working on this interesting project, and report our progress in a future publication.\nRemark 6.2. Practitioners have asked us frequently the following question: How to choose the step-size parameter s for OSGA learning? This is a very good question. Admittedly, it is often unlikely to tackle only the dictionary with very small coherence. Thus, judiciously choosing a value for s is crucial. If s is chosen to be too large, although the training time is reduced, the generalization capability may be weakened. If s is selected to bee too small, then OSGA cannot essentially outperform the classical OGA. We think the best choice of s depends heavily on the essential condition developed in Remark 6.1. Once the essential condition is found, the best choice of s can be consequently determined. We will also keep working on this practical issue and report our progress in a future publication.\nRemark 6.3. In the simulations, we present an example that in the one-dimensional case, the TPD dictionary perfectly guarantees the effectiveness of OSGA learning. However, in high-dimensionally cases, there lack of such “good” and easy-implemented dictionaries, which more or less influences the application of OSGA learning. Therefore, how to develop generally “good” and easy-implemented dictionaries for OSGA learning deserves further studies."
    } ],
    "references" : [ {
      "title" : "Approximation and learning by greedy algorithms",
      "author" : [ "A.R. Barron", "A. Cohen", "W. Dahmen", "R. DeVore" ],
      "venue" : "Ann. Statist., 36 ",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Random sampling of multivariate trigonometric polynomials",
      "author" : [ "R.F. Bass", "K. Gröchenig" ],
      "venue" : "SIAM J. Math. Anal., 36 ",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "Interpolation of Operators",
      "author" : [ "C. Bennett", "R. Sharpley" ],
      "venue" : "Academic Press, Boston",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 1988
    }, {
      "title" : "Learning rates of multi-kernel regression by orthogonal greedy algorithm",
      "author" : [ "H. Chen", "L. Li", "Z. Pan" ],
      "venue" : "J. Statist. Plan. & Infer., 143 ",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "On the mathematical foundations of learning",
      "author" : [ "F. Cucker", "S. Smale" ],
      "venue" : "Bull. Amer. Math. Soc., 39 ",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "Learning Theory: An Approximation Theory Viewpoint",
      "author" : [ "F. Cucker", "D.X. Zhou" ],
      "venue" : "Cambridge University Press, Cambridge",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Subspace pursuit for compressive sensing signal recontruction",
      "author" : [ "W. Dai", "O. Milenkovic" ],
      "venue" : "IEEE Trans. Inf. Theory, 55 ",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "An iterative thresholding algorithm for linear inverse problems with a sparsity constraint",
      "author" : [ "I. Daubechies", "M. Defrise", "C. De Mol" ],
      "venue" : "Commun. Pure Appl. Math., 57 ",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "Iteratively re-weighted least squares minimization for sparse recovery",
      "author" : [ "I. Daubechies", "R. DeVore", "M. Fornasier", "C. Güntürk" ],
      "venue" : "Commun. Pure Appl. Math., 63 ",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Constructive Approximation",
      "author" : [ "R. DeVore", "G. Lorentz" ],
      "venue" : "Springer-Verlag, Berlin",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 1993
    }, {
      "title" : "Some remarks on greedy algorithms",
      "author" : [ "R. DeVore", "V. Temlyakov" ],
      "venue" : "Adv. Comput. Math., 5 ",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 1996
    }, {
      "title" : "On Lebesgue-type inequalities for greedy approximation",
      "author" : [ "D. Donoho", "M. Elad", "V. Temlyakov" ],
      "venue" : "J. Approx. Theory, 147 ",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Sparse solution of underdetermined systems of linear equations by stagewise orthogonal matching pursuit",
      "author" : [ "D.L. Donoho", "Y. Tsaig", "O. Drori", "J.L. Starck" ],
      "venue" : "IEEE Trans. Inf. Theory, 58 ",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Greedy function approximation: a gradient boosting machine",
      "author" : [ "J. Friedman" ],
      "venue" : "Ann. Statis., 29 ",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "A Distribution-Free Theory of Nonparametric Regression",
      "author" : [ "L. Györfy", "M. Kohler", "A. Krzyzak", "H. Walk" ],
      "venue" : "Springer, Berlin",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "Random sampling of sparse trigonometric polynomials II- Orthogonal matching pursuit versus basis pursit",
      "author" : [ "S. Kunis", "H. Rauhut" ],
      "venue" : "Found. Comput. Math., 8 ",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Learning capability of relaxed greedy algorithms",
      "author" : [ "S.B. Lin", "Y.H. Rong", "X.P. Sun", "Z.B. Xu" ],
      "venue" : "IEEE Trans. Neural Netw. & Learn. Syst., 24 ",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "The orthogonal super greedy algorithm and applications in compressed sensing",
      "author" : [ "E. Liu", "V. Temlyakov" ],
      "venue" : "IEEE. Trans. Inf. Theory, 58 ",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Super greedy type algorithms",
      "author" : [ "E. Liu", "V. Temlyakov" ],
      "venue" : "Adv. Comput. Math., 37 ",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Some properties of Gaussian reproducing kernel Hilbert spaces and their implications for function approximation and learning theory",
      "author" : [ "H. Minh" ],
      "venue" : "Constr. Approx., 32 ",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Learning out of leaders",
      "author" : [ "M. Mougeot", "D. Picard", "K. Tribouley" ],
      "venue" : "J. Royal Statis. Soc. Series B, 74 ",
      "citeRegEx" : "21",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Numerical Analysis",
      "author" : [ "T. Sauer" ],
      "venue" : "Addison-Wesley Longman, London",
      "citeRegEx" : "22",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "A generalized representer theorem",
      "author" : [ "B. Schölkopf", "R. Herbrich", "A.J. Smola" ],
      "venue" : "D. Helmbold and B.Williamson, edited, Proceedings of the 14th Annual Conference on Computational Learning Theory, pp 416-426. Springer, New York",
      "citeRegEx" : "23",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "Nonlinear methods of approximation",
      "author" : [ "V. Temlyakov" ],
      "venue" : "Found. Comput. Math., 3, ",
      "citeRegEx" : "24",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "Greedy approximation",
      "author" : [ "V. Temlakov" ],
      "venue" : "Acta Numer., 17 ",
      "citeRegEx" : "25",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "On performance of greedy algorithms",
      "author" : [ "V. Temlyakov", "P. Zheltov" ],
      "venue" : "J. Approx. Theory, 163 ",
      "citeRegEx" : "26",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Regression shrinkage and selection via the LASSO",
      "author" : [ "R. Tibshirani" ],
      "venue" : "J. ROY. Statist. Soc. Ser. B, 58 ",
      "citeRegEx" : "27",
      "shortCiteRegEx" : null,
      "year" : 1995
    }, {
      "title" : "Greed is good: algorithmic results for sparse approximation",
      "author" : [ "J.A. Tropp" ],
      "venue" : "IEEE Trans. Inf. Theory, 50 ",
      "citeRegEx" : "28",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "Computational methods for sparse solution of linear inverse problems",
      "author" : [ "J.A. Tropp", "S. Wright" ],
      "venue" : "in: Proceedings of the IEEE, 98: 948-958",
      "citeRegEx" : "29",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "L1/2 regularization: a thresholding representation theory and a fast solver",
      "author" : [ "Z.B. Xu", "X.Y. Chang", "F.M. Xu", "H. Zhang" ],
      "venue" : "IEEE. Trans. Neural netw & Learn. system., 23 ",
      "citeRegEx" : "30",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Efficient greedy learning for massive data",
      "author" : [ "C. Xu", "S.B. Lin", "J. Fan" ],
      "venue" : "Manuscript",
      "citeRegEx" : "31",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Greedy metrics in orthogonal greedy learning",
      "author" : [ "L. Xu", "S.B. Lin", "J.S. Zeng", "Z.B. Xu" ],
      "venue" : "Manuscript",
      "citeRegEx" : "32",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Approximation with polynomial kernels and SVM classifiers",
      "author" : [ "D.X. Zhou", "K. Jetter" ],
      "venue" : "Adv. Comput. Math., 25 ",
      "citeRegEx" : "33",
      "shortCiteRegEx" : null,
      "year" : 2006
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "The use of greedy algorithms in the context of nonlinear approximation [1] is very appealing since it greatly reduces the computational burden when compared The research was supported by the National 973 Programming (2013CB329404), the Key Program of National Natural Science Foundation of China (Grant No.",
      "startOffset" : 71,
      "endOffset" : 74
    }, {
      "referenceID" : 6,
      "context" : "This property triggers avid research activities of greedy algorithms in signal processing [7, 16, 28], inverse problem [13, 29] and sparse approximation [12, 26].",
      "startOffset" : 90,
      "endOffset" : 101
    }, {
      "referenceID" : 15,
      "context" : "This property triggers avid research activities of greedy algorithms in signal processing [7, 16, 28], inverse problem [13, 29] and sparse approximation [12, 26].",
      "startOffset" : 90,
      "endOffset" : 101
    }, {
      "referenceID" : 27,
      "context" : "This property triggers avid research activities of greedy algorithms in signal processing [7, 16, 28], inverse problem [13, 29] and sparse approximation [12, 26].",
      "startOffset" : 90,
      "endOffset" : 101
    }, {
      "referenceID" : 12,
      "context" : "This property triggers avid research activities of greedy algorithms in signal processing [7, 16, 28], inverse problem [13, 29] and sparse approximation [12, 26].",
      "startOffset" : 119,
      "endOffset" : 127
    }, {
      "referenceID" : 28,
      "context" : "This property triggers avid research activities of greedy algorithms in signal processing [7, 16, 28], inverse problem [13, 29] and sparse approximation [12, 26].",
      "startOffset" : 119,
      "endOffset" : 127
    }, {
      "referenceID" : 11,
      "context" : "This property triggers avid research activities of greedy algorithms in signal processing [7, 16, 28], inverse problem [13, 29] and sparse approximation [12, 26].",
      "startOffset" : 153,
      "endOffset" : 161
    }, {
      "referenceID" : 25,
      "context" : "This property triggers avid research activities of greedy algorithms in signal processing [7, 16, 28], inverse problem [13, 29] and sparse approximation [12, 26].",
      "startOffset" : 153,
      "endOffset" : 161
    }, {
      "referenceID" : 0,
      "context" : "Greedy learning, or more specifically, applying greedy algorithms to tackle supervised learning problems, has been proved to possess charming generalization capability with lower computational burden than the widely used coefficient-based regularization methods [1].",
      "startOffset" : 262,
      "endOffset" : 265
    }, {
      "referenceID" : 31,
      "context" : "From approximation to learning, greedy learning can be usually formulated as a four-stage stepwise learning strategy [32].",
      "startOffset" : 117,
      "endOffset" : 121
    }, {
      "referenceID" : 13,
      "context" : "Since greedy learning’s inception in supervised learning [14], the aforementioned four stages were comprehensively studied for various purposes.",
      "startOffset" : 57,
      "endOffset" : 61
    }, {
      "referenceID" : 3,
      "context" : "[4] and Lin et al.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 16,
      "context" : "[17] proposed that the kernel based dictionary is a good choice for greedy learning.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 31,
      "context" : "[32] pointed out that the metric of greedy-definition is not uniquely the greediest one.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 0,
      "context" : "[1] declared that both relaxed greedy iteration and orthogonal greedy iteration can achieve a fast learning rate for greedy learning.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 0,
      "context" : "[1] provided an l complexity regularization strategy and Chen et al.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 3,
      "context" : "[4] proposed an l complexity constraint strategy.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 13,
      "context" : "All these results showed that as a new learning scheme, greedy learning deserves avid studying due to its stepwise learning character [14].",
      "startOffset" : 134,
      "endOffset" : 138
    }, {
      "referenceID" : 0,
      "context" : "Although the importance of a single stage of greedy learning was widely studied [1, 4, 17, 31], the relationship between these stages and their composite effects for learning also need classifying.",
      "startOffset" : 80,
      "endOffset" : 94
    }, {
      "referenceID" : 3,
      "context" : "Although the importance of a single stage of greedy learning was widely studied [1, 4, 17, 31], the relationship between these stages and their composite effects for learning also need classifying.",
      "startOffset" : 80,
      "endOffset" : 94
    }, {
      "referenceID" : 16,
      "context" : "Although the importance of a single stage of greedy learning was widely studied [1, 4, 17, 31], the relationship between these stages and their composite effects for learning also need classifying.",
      "startOffset" : 80,
      "endOffset" : 94
    }, {
      "referenceID" : 30,
      "context" : "Although the importance of a single stage of greedy learning was widely studied [1, 4, 17, 31], the relationship between these stages and their composite effects for learning also need classifying.",
      "startOffset" : 80,
      "endOffset" : 94
    }, {
      "referenceID" : 31,
      "context" : "In the recent work [32], Xu et al.",
      "startOffset" : 19,
      "endOffset" : 23
    }, {
      "referenceID" : 17,
      "context" : "In this paper, we study the learning capability of orthogonal super greedy algorithm (OSGA) which was proposed by Liu and Temlyakov [18].",
      "startOffset" : 132,
      "endOffset" : 136
    }, {
      "referenceID" : 17,
      "context" : "For OSGA approximation, it was shown in [18] (see also [19]) that for incoherent dictionaries, OSGA reduces the computational burden when compared with OGA.",
      "startOffset" : 40,
      "endOffset" : 44
    }, {
      "referenceID" : 18,
      "context" : "For OSGA approximation, it was shown in [18] (see also [19]) that for incoherent dictionaries, OSGA reduces the computational burden when compared with OGA.",
      "startOffset" : 55,
      "endOffset" : 59
    }, {
      "referenceID" : 0,
      "context" : "However, such an assumption to the target functions is very stringent if the dimension of variable is large [1].",
      "startOffset" : 108,
      "endOffset" : 111
    }, {
      "referenceID" : 0,
      "context" : "Interestingly, we find that, even for functions out of the convex hull of the dictionary, the approximation capability of OSGA is similar as that of OGA [1].",
      "startOffset" : 153,
      "endOffset" : 156
    }, {
      "referenceID" : 24,
      "context" : "There exist several types of greedy algorithms [25].",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 17,
      "context" : "Initially, set f s 0 = 0 and r 0 = f , then the OSGA proposed in [18] for each k ≥ 1 can be inductively define as the following.",
      "startOffset" : 65,
      "endOffset" : 69
    }, {
      "referenceID" : 17,
      "context" : "1 proved in [18] shows that OSGA can achieve the optimal approximation rate of ks term nonlinear approximation [24].",
      "startOffset" : 12,
      "endOffset" : 16
    }, {
      "referenceID" : 23,
      "context" : "1 proved in [18] shows that OSGA can achieve the optimal approximation rate of ks term nonlinear approximation [24].",
      "startOffset" : 111,
      "endOffset" : 115
    }, {
      "referenceID" : 5,
      "context" : "Z (f(x)− y)dρ, which is minimized by the regression function [6], defined by fρ(x) := ∫",
      "startOffset" : 61,
      "endOffset" : 64
    }, {
      "referenceID" : 4,
      "context" : "With the assumption that fρ ∈ Lρ X , it is well known [5] that, for every f ∈ L2ρX , there holds E(f)− E(fρ) = ‖f − fρ‖ρ.",
      "startOffset" : 54,
      "endOffset" : 57
    }, {
      "referenceID" : 23,
      "context" : "Approximation capability of OSGA A consensus in the nonlinear approximation community is that greedy-type algorithms can break the “curse of dimensionality” [24].",
      "startOffset" : 157,
      "endOffset" : 161
    }, {
      "referenceID" : 0,
      "context" : "We find, however, this is not exactly true since, in practice, the condition that the target functions belong to the convex hull of the dictionary becomes more and more stringent as the dimension of variable grows [1].",
      "startOffset" : 214,
      "endOffset" : 217
    }, {
      "referenceID" : 0,
      "context" : "tackled in [1] by proving convergence results for a variety of function classes and not simply those are related to the convex hull of the dictionary.",
      "startOffset" : 11,
      "endOffset" : 14
    }, {
      "referenceID" : 0,
      "context" : "Along the flavor of [1], we study the behavior of OSGA approximation when the target functions f ∈ H are more general.",
      "startOffset" : 20,
      "endOffset" : 23
    }, {
      "referenceID" : 2,
      "context" : "We consider the real interpolation spaces [3] Rp = [H,L1]θ,∞, 0 < θ < 1, with p defined by 1 p = θ + 1− θ 2 = 1 + θ 2 .",
      "startOffset" : 42,
      "endOffset" : 45
    }, {
      "referenceID" : 9,
      "context" : "Recall that f ∈ [X, Y ]θ,∞ if and only if for all t > 0, there holds [10] K(f, t) ≤ Ct, (3.",
      "startOffset" : 69,
      "endOffset" : 73
    }, {
      "referenceID" : 17,
      "context" : "OSGA learning It was pointed out in [18] that OSGA can be applied in compressed sensing very well.",
      "startOffset" : 36,
      "endOffset" : 40
    }, {
      "referenceID" : 0,
      "context" : "It is shown in Algorithm 1 that the only difference between OSGA and OGA learning [1] is that in OSGA there are s atoms selected in the “greedy-definition” stage.",
      "startOffset" : 82,
      "endOffset" : 85
    }, {
      "referenceID" : 32,
      "context" : "Furthermore, as y ∈ [−L, L], it is easy to deduce [33] that ‖ΠLf s z,m − fρ‖ρ ≤ ‖f s z,m − fρ‖ρ.",
      "startOffset" : 50,
      "endOffset" : 54
    }, {
      "referenceID" : 0,
      "context" : "We further notice that up to the constant, the deduced oracle inequality is the same as that deduced in [1] with k in [1, Theorem 3.",
      "startOffset" : 104,
      "endOffset" : 107
    }, {
      "referenceID" : 0,
      "context" : "Along [1]’s flavor, for r > 0, we define the space L1 as the set of all functions f such that, for all N , there exists h ∈ span{DN} satisfying ‖h‖L1 ≤ B, and ‖f − h‖ρ ≤ BN.",
      "startOffset" : 6,
      "endOffset" : 9
    }, {
      "referenceID" : 0,
      "context" : "Hence, we use the same l complexity regularization strategy as that in [1] to choose m.",
      "startOffset" : 71,
      "endOffset" : 74
    }, {
      "referenceID" : 0,
      "context" : "1 in [1] for the details.",
      "startOffset" : 5,
      "endOffset" : 8
    }, {
      "referenceID" : 0,
      "context" : "in [1].",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 20,
      "context" : "Since the incoherence assumption is too strict to describe the property of the dictionary and difficult to verify, especially for supervised learning [21], we do not implement the simulation for dictionaries with such a pessimistic assumption.",
      "startOffset" : 150,
      "endOffset" : 154
    }, {
      "referenceID" : 0,
      "context" : "The last one is to compare the performance of OSGA with other typical dictionary learning strategy such as the OGA learning [1], Lasso [27], ridge regression [23], bridge regression [9] (for example, the half coefficient regularization [30]) and greedy boosting [14].",
      "startOffset" : 124,
      "endOffset" : 127
    }, {
      "referenceID" : 26,
      "context" : "The last one is to compare the performance of OSGA with other typical dictionary learning strategy such as the OGA learning [1], Lasso [27], ridge regression [23], bridge regression [9] (for example, the half coefficient regularization [30]) and greedy boosting [14].",
      "startOffset" : 135,
      "endOffset" : 139
    }, {
      "referenceID" : 22,
      "context" : "The last one is to compare the performance of OSGA with other typical dictionary learning strategy such as the OGA learning [1], Lasso [27], ridge regression [23], bridge regression [9] (for example, the half coefficient regularization [30]) and greedy boosting [14].",
      "startOffset" : 158,
      "endOffset" : 162
    }, {
      "referenceID" : 8,
      "context" : "The last one is to compare the performance of OSGA with other typical dictionary learning strategy such as the OGA learning [1], Lasso [27], ridge regression [23], bridge regression [9] (for example, the half coefficient regularization [30]) and greedy boosting [14].",
      "startOffset" : 182,
      "endOffset" : 185
    }, {
      "referenceID" : 29,
      "context" : "The last one is to compare the performance of OSGA with other typical dictionary learning strategy such as the OGA learning [1], Lasso [27], ridge regression [23], bridge regression [9] (for example, the half coefficient regularization [30]) and greedy boosting [14].",
      "startOffset" : 236,
      "endOffset" : 240
    }, {
      "referenceID" : 13,
      "context" : "The last one is to compare the performance of OSGA with other typical dictionary learning strategy such as the OGA learning [1], Lasso [27], ridge regression [23], bridge regression [9] (for example, the half coefficient regularization [30]) and greedy boosting [14].",
      "startOffset" : 262,
      "endOffset" : 266
    }, {
      "referenceID" : 21,
      "context" : "Methods: For OSGA and OGA learning, we applied QR decomposition to acquired the least squared estimates [22].",
      "startOffset" : 104,
      "endOffset" : 108
    }, {
      "referenceID" : 13,
      "context" : "For greedy boosting, we used the L2boost algorithm [14] with the step size 0.",
      "startOffset" : 51,
      "endOffset" : 55
    }, {
      "referenceID" : 4,
      "context" : "For L2 coefficient regularization (or ridge regression), we use its analytic regularized least square solution [5].",
      "startOffset" : 111,
      "endOffset" : 114
    }, {
      "referenceID" : 7,
      "context" : "For L1 (or lasso) and L1/2 coefficient regularization schemes, we utilize the iterative soft [8] and half [30] thresholding algorithms to obtain the corresponding estimators, respectively.",
      "startOffset" : 93,
      "endOffset" : 96
    }, {
      "referenceID" : 29,
      "context" : "For L1 (or lasso) and L1/2 coefficient regularization schemes, we utilize the iterative soft [8] and half [30] thresholding algorithms to obtain the corresponding estimators, respectively.",
      "startOffset" : 106,
      "endOffset" : 110
    }, {
      "referenceID" : 14,
      "context" : "we do not divide the training set into training data and validation data and use validation data to choose parameters as in [15], instead, we use the test set to fix parameters directly.",
      "startOffset" : 124,
      "endOffset" : 128
    }, {
      "referenceID" : 20,
      "context" : "As is shown in [21], the incoherence assumption in the background of supervised learning is too strict to describe the property of dictionaries.",
      "startOffset" : 15,
      "endOffset" : 19
    }, {
      "referenceID" : 1,
      "context" : "It can be found in [2] that the TPD dictionary together with the random samples can develop a wellconditioned sampling matrix [2, Theorem 5.",
      "startOffset" : 19,
      "endOffset" : 22
    }, {
      "referenceID" : 19,
      "context" : "1], while the sampling matrix constructed by GRD is usually ill-conditioned [20].",
      "startOffset" : 76,
      "endOffset" : 80
    }, {
      "referenceID" : 5,
      "context" : "Thus, according to the known bias and variance trade-off principle [6], the bias decreases a little while the variance increases a little, which makes the final generalization error varies only a little.",
      "startOffset" : 67,
      "endOffset" : 70
    }, {
      "referenceID" : 11,
      "context" : "The first and third lemmas can be found in [12] and [11], respectively.",
      "startOffset" : 43,
      "endOffset" : 47
    }, {
      "referenceID" : 10,
      "context" : "The first and third lemmas can be found in [12] and [11], respectively.",
      "startOffset" : 52,
      "endOffset" : 56
    }, {
      "referenceID" : 17,
      "context" : "In fact, we borrowed the idea of orthogonal super greedy algorithm (OSGA) for incoherent dictionaries from nonlinear approximation and compressive sensing [18] to the supervised 26",
      "startOffset" : 155,
      "endOffset" : 159
    }, {
      "referenceID" : 0,
      "context" : "Precisely, our error estimate for OSGA learning yields a learning rate as (n/ logn), which is the same as that of OGA [1].",
      "startOffset" : 118,
      "endOffset" : 121
    } ],
    "year" : 2014,
    "abstractText" : "We consider the approximation capability of orthogonal super greedy algorithms (OSGA) and its applications in supervised learning. OSGA is concerned with selecting more than one atoms in each iteration step, which, of course, greatly reduces the computational burden when compared with the conventional orthogonal greedy algorithm (OGA). We prove that even for function classes that are not the convex hull of the dictionary, OSGA does not degrade the approximation capability of OGA provided the dictionary is incoherent. Based on this, we deduce a tight generalization error bound for OSGA learning. Our results show that in the realm of supervised learning, OSGA provides a possibility to further reduce the computational burden of OGA in the premise of maintaining its prominent generalization capability.",
    "creator" : "LaTeX with hyperref package"
  }
}