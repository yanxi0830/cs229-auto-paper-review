{
  "name" : "1206.3099.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Sparse Distributed Learning Based on Diffusion Adaptation",
    "authors" : [ "Paolo Di Lorenzo" ],
    "emails" : [ "pubs-permissions@ieee.org.", "dilorenzo@infocom.uniroma1.it,", "sayed@ee.ucla.edu." ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n20 6.\n30 99\nv2 [\ncs .L\nG ]\n1 2\nN ov\n2 01\n2 1\nThis article proposes diffusion LMS strategies for distributed estimation over adaptive networks that are able to exploit sparsity in the underlying system model. The approach relies on convex regularization, common in compressive sensing, to enhance the detection of sparsity via a diffusive process over the network. The resulting algorithms endow networks with learning abilities and allow them to learn the sparse structure from the incoming data in real-time, and also to track variations in the sparsity of the model. We provide convergence and mean-square performance analysis of the proposed method and show under what conditions it outperforms the unregularized diffusion version. We also show how to adaptively select the regularization parameter. Simulation results illustrate the advantage of the proposed filters for sparse data recovery.\nIndex Terms\nDiffusion LMS, adaptive networks, compressive sensing, distributed estimation, sparse vector.\nI. INTRODUCTION\nWe consider the problem of distributed mean-square-error estimation, where a set of nodes is required to collectively estimate some vector parameter of interest from noisy measurements by relying solely on in-network processing. We consider an ad-hoc network consisting of N nodes that are distributed over some geographic region. At every time instant i, every node k collects a scalar measurement dk(i) of some random process dk(i) and a 1 × M regression vector uk,i of some random process uk,i with\nCopyright (c) 2012 IEEE. Personal use of this material is permitted. However, permission to use this material for any other purposes must be obtained from the IEEE by sending a request to pubs-permissions@ieee.org. Paolo Di Lorenzo is with the Department of Information, Electronics, and Telecommunications (DIET), Sapienza University of Rome, Via Eudossiana 18, 00184 Rome, Italy. Ali H. Sayed is with the Electrical Engineering Department, University of California, Los Angeles, CA 90095. e-mail: dilorenzo@infocom.uniroma1.it, sayed@ee.ucla.edu.\nThis work has been supported by FREEDOM Project, Nr. ICT-248891. The work of A.H. Sayed was supported in part by NSF grants CCF-1011918 and CCF-0942936. Part of this work was presented at the 2012 IEEE International Conference on Acoustic, Speech and Signal Processing, Kyoto, March 2012 [42].\nNovember 14, 2012 DRAFT\n2 covariance matrix Ru,k = Eu∗k,iuk,i > 0. The objective is for the nodes in the network to use the collected data {dk(i), uk,i} to estimate some M × 1 parameter vector wo in a distributed manner. There are a couple of distributed strategies that have been developed in the literature for such purposes. One typical strategy is the incremental approach [1]-[5], where each node communicates only with one neighbor at a time over a cyclic path. In the incremental strategy, information is processed in a cyclic manner across the nodes of the network until optimization is achieved. However, determining a cyclic path that covers all nodes is an NP-hard problem [6] and, in addition, cyclic trajectories are prone to link and node failures. When any of the edges along the path fails, the sharing of data through the cycle is interrupted and the algorithm stops performing. To address these difficulties, adaptive diffusion techniques were proposed and studied in [7], [8]. In diffusion implementations, the nodes exchange information locally and cooperate with each other without the need for a central processor. In this way, information is processed on the fly by all nodes and the data diffuse across the network by means of a real-time sharing mechanism. The resulting adaptive networks exploit the time and spatial-diversity of the data more fully, thus endowing networks with powerful learning and tracking abilities. In view of their robustness and adaptation properties, diffusion networks have been applied to model a variety of self-organized behavior encountered in nature, such as birds flying in formation [12], fish foraging for food [13] or bacteria motility [14]. Diffusion adaptation has also been used to solve dynamic resource allocation problems in cognitive radios [15], to perform robust system modeling [18], and to implement distributed learning over mixture models in pattern recognition applications [16].\nIn many situations, the parameter of interest, wo, is sparse, containing only a few relatively large coefficients among many negligible ones. Any prior information about the sparsity of wo can be exploited to help improve the estimation performance, as demonstrated in many recent efforts in the area of compressive sensing (CS) [27]-[29]. Nevertheless, most CS efforts so far have concentrated on batch recovery methods, where the estimation of the desired vector is achieved from a collection of a fixed number of measurements. In this paper, we are instead interested in adaptive (online) techniques that allow the recovery of the vector wo to be pursued both recursively and distributively as new data arrive at the nodes. More importantly, we are interested in schemes that allow the recovery process to track changes in the sparsity pattern of the vector over time. Such schemes are useful in several contexts such as in the analysis of prostate cancer data [28], [41], spectrum sensing in cognitive radio [45], and spectrum estimation in wireless sensor networks [46].\nSome of the early works that mix adaptation with sparsity-aware constructions include methods that rely on the heuristic selection of active taps [20]-[22], and on sequential partial updating techniques [23]-\nNovember 14, 2012 DRAFT\n3 [24]; some other methods assign proportional step-sizes to different taps according to their magnitudes, such as the proportionate normalized LMS (PNLMS) algorithm and its variations [25]-[26]. In subsequent studies, motivated by the LASSO technique [28] and by connections with compressive sensing [29], [30], several algorithms for sparse adaptive filtering have been proposed based on LMS [34]-[35], RLS [36], [37], and projection-based methods [38]-[39]. A couple of distributed algorithms implementing LASSO over ad-hoc networks have also been considered before, although their main purpose has been to use the network to solve a batch processing problem [40], [41]. One basic idea in all these previously developed sparsity-aware techniques is to introduce a convex penalty term into the cost function to favor sparsity.\nHowever, these earlier contributions did not consider the design of both adaptive and distributed solutions that are able to exploit and track sparsity while at the same time processing data in realtime and in a fully decentralized manner. Doing so would endow networks with learning abilities and would allow them to learn the sparse structure from the incoming data recursively and, therefore, to track variations in the sparsity pattern of the underlying vector as well. Investigations on adaptive and distributed solutions appear in [42],[43], and [44]. In [42], we employed diffusion techniques that are able to identify and track sparsity over networks in a distributed manner; the techniques relied on the use of convenient convex regularization terms. In the related work [43], the authors employ projection techniques onto hyperslabs and weighted ℓ1-balls to develop a useful sparsity-aware algorithm for distributed learning over diffusion networks. In [44], the authors use the same formulation of [42] and the techniques of [7]- [8] to independently arrive at useful diffusion strategies except that they limit the function f(·) in (2) to choices of the form ‖w‖p, for particular selections of p-vector norms; they also include the regularization factor into the combination step of their algorithm rather than in the adaptation step, as done further ahead in this work. The algorithms proposed here and in [42] are more general in a couple of respects: they allow for broader choices of the regularization function f(·), they allow for sharing of both data and weight estimates among the nodes (and not only estimates) by allowing for the use of two sets of combinations weights {al,k, cl,k} instead of only one set, and the resulting mean-square and stability analyses are more demanding due to these generalizations; see, e.g., Appendices A and B. We further use the results of the analysis to propose an adaptive method to adjust online the important regularization parameter γ in (2). This is an important step in order to endow the resulting diffusion strategies with full adaptation abilities: adaptation to nonstationarities in the data and to changes in the sparsity patterns of the data.\nThe approach we follow in this work is based on developing diffusion strategies that are stable in the mean-square-error sense, with guaranteed performance bounds. For this reason, a detailed mean-square-\nNovember 14, 2012 DRAFT\n4 error analysis is carried out in order to examine the behavior of the algorithm in the presence of noisy measurements and random regression data. The analysis ends up suggesting a convenient method for adapting the regularization parameter in a distributed manner as well. Doing so, enhances the sparsityawareness of the algorithm and adds another useful layer of adaptation to the operation of the network. In summary, in this paper we extend our preliminary work in [42] to develop adaptive networks running diffusion algorithms subject to constraints that enforce sparsity. We consider two convex regularization constraints. In one case, we consider an ℓ1-norm regularization term, which acts as a uniform zeroattractor. In another case, and in order to improve the estimation performance, we employ reweighted regularization to selectively promote sparsity on the zero elements of wo, rather than uniformly on all the elements. We provide detailed convergence analysis of the proposed methods, giving a closed form expression for the bias on the estimate due to regularization. We carry out a mean-square-error analysis, showing the conditions under which the sparse diffusion filter outperforms its unregularized version in terms of steady-state performance. It turns out that, if the system model is sufficiently sparse, it is possible to tune a single parameter to outperform the standard diffusion algorithm. Then, on the basis of this result, we propose a method to adaptively choose the regularization parameter. In this way, the network is able to learn the sparse structure from the incoming data recursively and to adjust its parameters for improved tracking. The main contributions of this paper are therefore: (a) exploitation of sparsity for distributed estimation over adaptive networks; (b) derivation of the mean-square properties of the sparse diffusion adaptive filter; (c) and adaptation of the regularization parameter to enhance performance under sparsity.\nThe paper is organized as follows. In Section II we develop the sparse diffusion algorithm for distributed adaptive estimation. Section III provides performance analysis, which includes mean stability, meansquare performance and adaptation of the regularization parameter. Section IV provides simulation results in support of the theoretical analysis, and section V draws some conclusions.\nNotation: we use bold face letters to denote random variables and normal font letters to denote their\nrealizations. Matrices and vectors are respectively denoted by capital and small letters."
    }, {
      "heading" : "II. SPARSE DISTRIBUTED ESTIMATION OVER ADAPTIVE NETWORKS",
      "text" : "We assume the data {dk(i),uk,i} collected by the various nodes are related to an unknown sparse vector wo via the linear model:\ndk(i) = uk,iw o + vk(i) (1)\nwhere vk(i) is a zero mean random variable with variance σ2v,k, independent of ul,j for all l and j, and independent of vl(j) for l 6= k and i 6= j. Linear models of the form (1) arise frequently in applications\nNovember 14, 2012 DRAFT\n5 and are able to represent many cases of interest. The cooperative sparse estimation problem is cast as the search for the optimal estimator that minimizes in a fully distributed manner the following cost function:\nJglob(w) =\nN ∑\nk=1\nE|dk(i)− uk,iw|2 + γf(w) (2)\nwhere E(·) denotes the expectation operator, and f(w) is a real-valued convex regularization function weighted by the parameter γ > 0, which is used to enforce sparsity of the solution. The optimization problem in (2) may be solved in a centralized fashion. In this approach, the nodes send their data to a central processor, or fusion center, where all computations can be performed. Centralized implementations of this type require transmitting data back and forth between the nodes and the central processor, which translates into requirements of power and bandwidth resources. Additionally, centralized solutions have a serious point of failure: if the central processor fails, then the network operation is adversely affected and operation comes to a halt. For these reasons, we are interested in distributed solutions, where each node communicates with its neighboring nodes, and processing is distributed among all nodes in the network. In this way, communications are localized, and even when individual nodes fail, the network can continue to operate."
    }, {
      "heading" : "A. Adaptive Diffusion Strategy",
      "text" : "We follow the approach proposed in [8], [11] to derive distributed strategies for the minimization of Jglob(w) in (2). We start by introducing an N ×N matrix C with non-negative entries {cl,k} such that\ncl,k > 0 if l ∈ Nk, C1 = 1, (3)\nwhere 1 denotes the N × 1 vector with unit entries and Nk denotes the neighborhood of node k. Each coefficient cl,k represents a weight value that node k assigns to information arriving from its neighbor l. Of course, the coefficient cl,k is equal to zero when nodes l and k are not connected. Furthermore, each row of C adds up to one so that the sum of all weights leaving each node l should be one. Using the coefficients in (3), the global cost function in (2) can be expressed as:\nJglob(w) = J lock (w) + ∑\nl 6=k\nJ locl (w) + γf(w) (4)\nwhere\nJ lock (w) ,\nN ∑\nl=1\ncl,kE|dl(i)− ul,iw|2 (5)\nThe function introduced in (5) is a local (neighborhood) cost for node k; it involves a weighted combination of the costs of its neighbors without considering the sparsity constraint. Assuming the processes\nNovember 14, 2012 DRAFT\n6 dk(i) and uk,i are jointly wide sense stationary, the minimization of the local cost function (5) over w leads to the optimal local solution:\nwlock =\n(\nN ∑\nl=1\ncl,kRu,l\n)−1( N ∑\nl=1\ncl,krdu,l\n)\n(6)\nwhere Ru,k = Eu∗k,iuk,i is assumed positive-definite (i.e., Ru,k > 0) and rdu,k = Edk(i)u ∗ k,i, where the operator ∗ denotes complex-conjugate transposition. Thus, the local estimate wlock is based solely on local covariance data {Ru,l, rdu,l}l∈Nk from the neighborhood of node k. If we multiply both sides of (1) by u∗k,i and take expectations and then add over the neighborhood of node k, it is easy to verify that the estimate wlock from (6) agrees with the desired vector w o. Therefore, in principle, each node k can estimate wo if it knows the moments {Ru,l, rdu,l}. Often, in practice, these moments are not available and nodes only sense realizations of data arising from these statistical distributions. In that case, cooperation among the nodes can help them improve their estimates of wo from the data realizations. To motivate the cooperative procedure, we start by noting that a completion of squares argument shows that (5) can be rewritten in terms of wlock as\nJ lock (w) = ‖w − wlock ‖2Γk + mmse (7)\nwhere mmse is a constant term that does not depend on w, the notation ‖a‖2Σ = a∗Σa, for any nonnegative definite matrix Σ, and\nΓk ,\nN ∑\nl=1\ncl,kRu,l. (8)\nThus, using (4), (5) and (7), and dropping the constant mmse terms, we can replace the original global cost (2) with the equivalent cost:\nJglob ′ (w) = ∑\nl∈Nk\ncl,kE|dl(i)− ul,iw|2 + ∑\nl 6=k\n‖w − wlocl ‖2Γl + γf(w) (9)\nExpression (9) shows how the local cost J lock (w) can be modified to approach the desired global cost; two correction terms appear on the right-hand side: the regularization term γf(w) and a sum involving the local estimates {wlocl }. Node k cannot minimize (9) directly. This is because the cost in (9) still requires the nodes to have access to global information, namely, the local estimates {wlocl }, and the matrices {Γl}, from all other nodes in the network. To enable a distributed and iterative procedure, we make three adjustments to (9).\nFirst, we limit the sum over l 6= k to a sum over the neighbors of node k, i.e., only over l ∈ Nk. This step is reasonable since node k can only rely on data that are available to it from its neighborhood.\nNovember 14, 2012 DRAFT\n7 Second, we replace the covariance matrices Γl with constant diagonal weighting matrices of the form Γl = bl,kIM , where bl,k is a set of non-negative real coefficients that give different weights to different neighbors, and IM is the M ×M identity matrix. Although the {Γl} from its neighbors are available to node k, this step is meant to simplify the structure of the resulting algorithm. This substitution is also reasonable in view of the fact that norms are equivalent and that each of the weighted norms in (9) can be bounded as\nλmin(Γl) · ‖w − wlocl ‖2 ≤ ‖w − wlocl ‖2Γl ≤ λmax(Γl) · ‖w − wlocl ‖2 (10)\nSubstitutions of this kind are common in the stochastic approximation literature where Hessian matrices, such as Γl, are replaced by multiples of the identity matrix; such approximations allow the use of simpler steepest-descent iterations in place of Newton-type iterations [11]. At this stage, we do not need to worry about the selection of the weights {bl,k} because they are going to be embedded into another set of coefficients that the designer can choose. Finally, while the nodes are attempting to estimate wo, they do not know what the optimal local estimates wlocl are during the iterative learning process. As the ensuing discussion will reveal, each node in the resulting distributed algorithm will be working on estimating the sparse vector wo and will have access to a local estimate for wo, which we denote by ψl at node l. Due to the diffusion process, this estimate will not be based solely on data from the neighborhood of node l but also on data from across the network. We are therefore motivated to replace wlocl in (9) by ψl. In this way, each node k can instead minimize the following modified local cost function:\nJdistk (w) = ∑\nl∈Nk\ncl,kE|dl(i)− ul,iw|2 + ∑\nl∈Nk/{k}\nbl,k‖w − ψl‖2 + γf(w). (11)\nThe cost in (11) is now defined in terms of information that is available to node k. Observe that while (11) is a local approximation for the global cost (9), it is nevertheless more general than the local cost (5). The node k can then proceed to optimize (11) by means of a steepest-descent procedure. Note that all functions in (11) are continuously differentiable except possibly f(w), which is only supposed to be convex. Thus, computing the sub-gradient of (11) we obtain\n[∇Jdistk (w)]∗ = ∑\nl∈Nk\ncl,k(Ru,lw − rdu,l) + ∑\nl∈Nk/{k}\nbl,k(w − ψl) + γ∂f(w) (12)\nwhere ∂f(w) is the sub-gradient of the convex function f(w). Then, we can use (12) to obtain a steepest descent recursion for the estimate of wo at node k at time i, denoted by wk,i, such as\nwk,i = wk,i−1 + µk ∑\nl∈Nk\ncl,k(rdu,l −Ru,lwk,i−1) + µk ∑\nl∈Nk/{k}\nbl,k(ψl − wk,i−1)− µkγ∂f(wk,i−1) (13)\nNovember 14, 2012 DRAFT\n8 for some sufficiently small positive step-sizes {µk}. The update (13) involves the sum of three terms and we can compute it in two steps by generating an intermediate estimate ψk,i, as follows:\nψk,i = wk,i−1 + µk ∑\nl∈Nk\ncl,k(rdu,l −Ru,lwk,i−1)− µkγ∂f(wk,i−1) (14)\nwk,i = ψk,i + µk ∑\nl∈Nk/{k}\nbl,k(ψl − wk,i−1) (15)\nSince every node in the network will be running recursions of the form (14)-(15), then the intermediate estimate of wo that is available to each node l at time i is ψl,i. Therefore, we replace ψl in (15) by ψl,i. Moreover, since ψk,i is an updated estimate relative to wk,i−1, as evidenced by (14), we are motivated to replace wk,i−1 in (15) by ψk,i, which generally leads to enhanced performance since ψk,i contains more information than wk,i−1. This step is reminiscent of an incremental-type substitution [1]-[5]. Performing these substitutions in (15), we get:\nwk,i = ψk,i + µk ∑\nl∈Nk/{k}\nbl,k(ψl,i − ψk,i) (16)\nIf we now introduce the entries of an N ×N matrix A = {al,k} such that\nal,k , µkbl,k (l 6= k), ak,k , 1− µk ∑\nl∈Nk\nbl,k, al,k = 0 if l /∈ Nk (17)\nthen, we can rewrite the update in (14)-(15) as: \n   \n   \nψk,i = wk,i−1 + µk ∑\nl∈Nk\ncl,k(rdu,l −Ru,lwk,i−1)− µkγ∂f(wk,i−1)\nwk,i = ∑\nl∈Nk\nal,kψl,i\n(18)\nwhere the weighting coefficients {al,k, cl,k} are real, non-negative and satisfy:\ncl,k > 0, al,k > 0 if l ∈ Nk, C1 = 1, AT1 = 1. (19)\nThe recursion in (18) requires knowledge of the second-order moments {Ru,k, rdu,k}. An adaptive implementation can be obtained by replacing these second-order moments by local instantaneous approximations, say, of the LMS type, as follows:\nRu,k ≃ u∗k,iuk,i, rdu,k ≃ dk(i)u∗k,i. (20)\nThus, substituting the approximations (20) into (18), we arrive at the following Adapt-then-Combine (ATC) strategy. We refer to the algorithm as the ATC sparse diffusion algorithm. The first step in (21) is an adaptation step, where the coefficients cl,k determine which nodes l ∈ Nk should share their\nNovember 14, 2012 DRAFT\n9 ATC sparse diffusion LMS\nStart with wk,−1 = 0 for all k. Given non-negative real coefficients {al,k, cl,k} satisfying (19), for each time i ≥ 0 and for each node k, repeat: \n   \n   \nψk,i = wk,i−1 + µk ∑\nl∈Nk\ncl,ku ∗ l,i[dl(i)− ul,iwk,i−1]− µkγ∂f(wk,i−1) (adaptation step)\nwk,i = ∑\nl∈Nk\nal,kψl,i (diffusion step) (21)\nmeasurements {dl(i), ul,i} with node k. The second step is a diffusion step where the intermediate estimates ψl,i, from the neighbors l ∈ Nk, are combined through the coefficients {al,k}. We remark that had we reversed the steps (14) and (15) to implement (13), we arrive at a similar but alternative strategy, known as the Combine-then-Adapt (CTA) strategy; in this implementation, the only difference is that data aggregation is performed before adaptation (see, e.g., [8]). The complexity of the sparse diffusion\nCTA sparse diffusion LMS\nStart with wk,−1 = 0 for all k. Given non-negative real coefficients {al,k, cl,k} satisfying (19), for each time i ≥ 0 and for each node k, repeat: \n   \n   \nψk,i−1 = ∑\nl∈Nk\nal,kwl,i−1 (diffusion step)\nwk,i = ψk,i−1 + µk ∑\nl∈Nk\ncl,ku ∗ l,i[dl(i)− ul,iψk,i−1]− µkρ∂f(ψk,i−1) (adaptation step)\n(22)\nschemes in (21)-(22) is O(3M), which is the same complexity as standard stand-alone LMS adaptation. It was argued in [8] that ATC strategies generally outperform CTA strategies. For this reason, we continue our discussion by focusing on the ATC algorithm (21); similar analysis applies to CTA.\nCompared with the strategies proposed in [43] and [44], the diffusion algorithm (21) exploits data in the neighborhood more fully; the adaptation step aggregates data {dl(i), ul,i} from the neighbors, and the diffusion step aggregates estimates {ψl,i} from the same neighbors. The implementation in [43] uses a different algorithmic structure with C = I so that data {dl(i), ul,i} from the neighbors are not directly used. Compared with [44], observe that the effect of the regularization factor in (21) influences the adaptation step, and not the combination step as in [44]. Observe also that the adaptation step allows\nNovember 14, 2012 DRAFT\n10\nfor the exchange of data {dl(i), ul,i} among the nodes through the use of the coefficients {cl,k}, whereas [44] uses C = I as well."
    }, {
      "heading" : "B. Sparse Regularization",
      "text" : "Before proceeding with the discussions, let us comment on the regularization function f(w) in (2). A sparse vector wo generally contains only a few relatively large coefficients interspersed among many negligible ones and the location of the non-zero elements is often unknown beforehand. However, in some applications, we may have available some upper bound on the number of nonzero elements. Thus, assume that wo satisfies\n‖wo‖0 ≤ τ, (23)\nwhere ‖ · ‖0 is the ℓ0-norm, denoting the number of non-zero entries of a vector, and τ is a known upper bound. Since the ℓ0-norm in (23) is not convex, we cannot use it directly. Thus, motivated by LASSO [28] and work on compressive sensing [29], we first consider the following ℓ1-norm convex choice for a regularization function:\nf1(w) = ‖w‖1 , M ∑\nm=1\n|wm| (24)\nwhich amounts to the sum of the absolute entries of the vectors. The ℓ1-norm works as a surrogate approximation for the ℓ0-norm. This choice leads to an algorithm update in (21) where the subgradient column vector is given by\n∂f1(w) = sign(w) (25)\nand the entries of the vector sign(w) are obtained by applying the following function to each entry of w:\nsign(wm) =\n  \n \nwm/|wm|, wm 6= 0\n0, wm = 0\n(26)\nThis update leads to what we shall refer to as the zero-attracting (ZA) diffusion algorithm. The ZA update uniformly shrinks all components of the vector, and does not distinguish between zero and nonzero elements [30], [34]. Since all the elements are forced toward zero uniformly, the performance would deteriorate for systems that are not sufficiently sparse. Motivated by the idea of reweighting in compressive sampling [30], [34],[38], we also consider the following approximation:\n‖w‖0 ≃ M ∑\nm=1\n|wm| ε+ |wm|\n(27)\nNovember 14, 2012 DRAFT\n11\nwhich, for very small positive values of ε, is a better approximation for the ℓ0-norm of a vector w than the ℓ1-norm [30], thus enhancing sparse recovery by the algorithm. Therefore, interpreting (27) as a weighted ℓ1-norm regularization, to update the algorithm in (21), we shall consider the following sub-gradient column vector:\n∂f2(w) = diag\n{\n1\nε+ |w1| ,\n1\nε+ |w2| , . . . ,\n1\nε+ |wM | ,\n}\n· sign(w) (28)\nThis choice leads to what we shall refer to as the reweighted zero-attracting (RZA) diffusion algorithm. The update in (28) selectively shrinks only the components whose magnitudes are comparable to ε, and there is little effect on components satisfying |wm| ≫ ε, see, e.g., [30], [34], [38], [42], [44]."
    }, {
      "heading" : "III. MEAN-SQUARE PERFORMANCE ANALYSIS",
      "text" : "From now on, we view the estimates wk,i as realizations of a random process wk,i and analyze the performance of the sparse diffusion algorithm in terms of its mean-square behavior. To do so, we introduce the error quantities w̃k,i = wo −wk,i, ψ̃k,i = wo −ψk,i, and the network vectors:\nwi =\n\n   \nw1,i ...\nwN,i\n\n    , w̃i =\n\n   \nw̃1,i ...\nw̃N,i\n\n    , ψ̃i =\n\n   \nψ̃1,i ...\nψ̃N,i\n\n   \n(29)\nWe also introduce the block diagonal matrix\nM = diag{µ1IM , . . . , µNIM} (30)\nand the extended block weighting matrices\nC = C ⊗ IM , A = A⊗ IM (31)\nwhere ⊗ denotes the Kronecker product operation. We further introduce the random block quantities:\nDi = diag\n{ N ∑\nl=1\ncl,1u ∗ l,iul,i, . . . ,\nN ∑\nl=1\ncl,Nu ∗ l,iul,i\n}\n(32)\ngi = CT col{u∗1,iv1(i), . . . ,u∗N,ivN (i)} (33)\nThen, we conclude from (21) that the following relations hold for the error vectors:\nψ̃i = w̃i−1 −M[Diw̃i−1 + gi] + γM∂f(wi−1) (34) w̃i = AT ψ̃i (35)\nNovember 14, 2012 DRAFT\n12\nwhere\n∂f(wi−1) , col{∂f(w1,i−1), . . . , ∂f(wN,i−1)} (36)\nWe can combine (34) and (35) into a single recursion:\nw̃i = AT [I −MDi]w̃i−1 −ATMgi + γATM∂f(wi−1) (37)\nThis relation tells us how the network weight-error vector evolves over time. The relation will be the launching point for our mean-square analysis. To proceed, we introduce the following independence assumption on the regression data. Assumption 1 (Independent regressors) The regressors uk,i are temporally white and spatially independent with Ru,k = Euk,iu∗k,i > 0.\nIt follows from Assumption 1 that uk,i is independent of {wl,j} for all l and j ≤ i− 1. Although not true in general, this assumption is common in the adaptive filtering literature since it helps simplify the analysis. Several studies in the literature, especially on stochastic approximation theory [47]–[48], indicate that the performance expressions obtained using this assumption match well the actual performance of stand-alone filters for sufficiently small step-sizes. Therefore, we shall also rely on the following condition. Assumption 2 (Small step-sizes) The step-sizes {µk} are sufficiently small so that terms that depend on higher-order powers of µk can be ignored."
    }, {
      "heading" : "A. Convergence in the Mean",
      "text" : "Let\nD , EDi = diag { N ∑\nl=1\ncl,1Ru,l, . . . ,\nN ∑\nl=1\ncl,NRu,l\n}\n(38)\nThen, taking expectations of both sides of (37) and calling upon Assumption 1, we conclude that the mean-error vector evolves according to the following dynamics:\nEw̃i = AT [I −MD]Ew̃i−1 + γATME∂f(wi−1) (39)\nThe following theorem guarantees the asymptotic mean stability of the diffusion strategy (21), and provides a closed form expression for the weight bias due to the use of the regularization term. Theorem 1 (Stability in the mean) Assume data model (1) and Assumption 1 hold. Then, for any initial condition and any choice of the matrices A and C satisfying (19), the diffusion strategy (21) asymptotically converges in the mean if the step-sizes are chosen to satisfy:\n0 < µk < 2\nλmax\n(\n∑N l=1 cl,kRu,l\n) k = 1, . . . , N (40)\nNovember 14, 2012 DRAFT\n13\nwhere λmax(X) denotes the maximum eigenvalue of a Hermitian positive semi-definite matrix X. Furthermore, as i → ∞, the estimators across all nodes have biases that are given by the corresponding entries in the following bias vector:\nbias , lim i→∞ Ew̃i = γ · B · lim i→∞ E∂f(wi−1) (41)\nwhere\nB = [ I −AT (I −MD) ]−1ATM. (42)\nMoreover, it holds that\n‖bias‖b,∞ ≤ γ · µmax · ∂fmax\n1− δ (43)\nwhere ‖ · ‖b,∞ is the block maximum norm of a vector (defined in Appendix A), µmax = max k=1,...,N µk, ∂fmax = maxi ‖∂f(wi−1)‖b,∞ and δ = ρ(I −MD) < 1, with ρ(X) denoting the spectral radius of a matrix X.\nProof: See Appendix A."
    }, {
      "heading" : "B. Convergence in Mean-Square",
      "text" : "We now examine the behavior of the steady-state mean-square deviation, E‖w̃k,i‖2 as i → ∞, for any of the nodes and derive conditions under which the sparse diffusion filter outperforms its unregularized version in terms of steady-state performance. In particular, we will show that, if the vector parameter wo is sufficiently sparse, then it is possible to tune the sparsity parameter γ to achieve better performance than the standard diffusion algorithm. Following the energy conservation framework of [7], [8] and under Assumption 1, we can establish the following variance relation:\nE‖w̃i‖2Σ = E‖w̃i−1‖2Σ′ + E[g∗iMAΣATMgi] + 2γE∂f(wi−1)TMAΣAT (I −MD) w̃i−1\n+ γ2E‖∂f(wi−1)‖2MAΣATM (44)\nwhere Σ is any Hermitian nonnegative-definite matrix that we are free to choose, and\nΣ′ = E(I −DiM)AΣAT (I −MDi) (45)\nRelations (44)-(45) can be derived directly from (37) if we compute the weighted norm of both sides of the equality and use the fact that gi is independent of w̃i−1 and wi−1. We can rewrite (44) more compactly if we collect the terms depending on γ as\nE‖w̃i‖2Σ = E‖w̃i−1‖2Σ′ + E[g∗iMAΣATMgi] + φΣ,i(γ) (46)\nNovember 14, 2012 DRAFT\n14\nwith\nφΣ,i(γ) , γβΣ,i\n(\nγ − αΣ,i βΣ,i\n)\n(47)\nβΣ,i = E‖∂f(wi−1)‖2MAΣATM ≥ 0 (48) αΣ,i = −2E∂f(wi−1)TMAΣAT (I −MD) w̃i−1 (49)\nMoreover, setting\nG = E[gig∗i ] = CT · diag{σ2v,1Ru,1, . . . , σ2v,NRu,N} · C (50)\nwe can rewrite (46) in the form\nE‖w̃i‖2Σ = E‖w̃i−1‖2Σ′ +Tr[ΣATMGMA] + φΣ,i(γ) (51)\nwhere Tr(·) denotes the trace operator. Let σ = vec(Σ) and σ′ = vec(Σ′), where the vec(·) notation stacks the columns of Σ on top of each other and vec−1(·) is the inverse operation. We will use interchangeably the notation ‖w̃‖2σ and ‖w̃‖2Σ to denote the same quantity w̃∗Σw̃. Using the Kronecker product property vec(UΣV ) = (V T⊗U)vec(Σ), we can vectorize both sides of (45) and conclude that (45) can be replaced by the simpler linear vector relation: σ′ = vec(Σ′) = Fσ, where F is the following N2M2 × N2M2 matrix with block entries of size M2 ×M2 each:\nF = (I ⊗ I){I − I ⊗ (DM)− (DTM)⊗ I + E(DTi M)⊗ (DiM)}(A⊗A) (52)\nUsing the property Tr(ΣX) = vec(XT )Tσ we can then rewrite (51) as follows:\nE‖w̃i‖2σ = E‖w̃i−1‖2Fσ + [vec(ATMGTMA)]Tσ + φΣ,i(γ) (53)\nThe following theorem guarantees the asymptotic mean-square stability (i.e., convergence in the mean and mean-square sense) of the diffusion strategy (21). Theorem 2 (Mean-Square Stability) Assume the data model (1) and Assumption 1 hold. Then, the sparse diffusion LMS algorithm (21) will be mean-square stable if the step-sizes are sufficiently small and satisfy (40), and the matrix F in (52) is stable. Proof: See Appendix B. Remark 1: Note that the step sizes influence (52) through the matrix M. Since the step-sizes are sufficiently small, we can ignore terms that depend on higher-order powers of the step-sizes. Then, we can approximate (52) as\nF ≈ (I ⊗ I) { I − I ⊗ (DM)− (DTM)⊗ I +DTM⊗DM } (A⊗A) = BT ⊗ B∗ (54)\nNovember 14, 2012 DRAFT\n15\nwhere B = AT (I −MD). Now, since A is left-stochastic, it can be verified that the above F is stable if (I −DM) is stable [11], [9]; this latter condition is guaranteed by (40). In summary, sufficiently small step-sizes ensure the stability of the diffusion strategy in the mean and mean-square senses.\nTaking the limit as i → ∞ (assuming the step-sizes are small enough to ensure convergence to a steady-state), we deduce from (53) that:\nlim i→∞\nE‖w̃i‖2(I−F)σ = [vec(ATMGTMA)]Tσ + γβΣ,∞ ( γ − αΣ,∞ βΣ,∞ )\n(55)\nwhere\nαΣ,∞ = lim i→∞\n−2E∂f(wi−1)TMAΣAT (I −MD) w̃i−1 (56)\nβΣ,∞ = lim i→∞\nE‖∂f(wi−1)‖2MAΣATM (57)\nThe limits in (56)-(57) exist. Indeed, first, in Appendix C we show that αΣ,i converges to αΣ,∞. Second, we also show in Appendix B that the LHS of (55) converges. Therefore, the term βΣ,∞ also exists.\nExpression (55) is a useful result: it allows us to derive several performance metrics through the proper selection of the free weighting parameter σ (or Σ), as was done in [8]. For example, the MSD for any node k is defined as the steady-state value E‖w̃k,i‖2, as i → ∞, and can be obtained by computing limi→∞ E‖w̃i‖2Tk with a block weighting matrix Tk that has the M×M identity matrix at block (k, k) and zeros elsewhere. Then, denoting the vectorized version of the matrix Tk by tk = vec(diag(ek) ⊗ IM ), where ek is the vector whose k-th entry is one and zeros elsewhere, and if we select σ in (55) as σk = (I −F)−1tk, we arrive at the MSD for node k:\nMSDk = [vec(ATMGTMA)]T (I −F)−1tk + γβΣk,∞ ( γ − αΣk,∞ βΣk,∞ )\n(58)\nThe average network MSDnet is given by:\nMSDnet = lim i→∞\n1\nN\nN ∑\nk=1\nE‖w̃k,i‖2 (59)\nThen, to obtain the network MSD from (55), the weighting matrix of limi→∞ E‖w̃i‖2T should be chosen as T = IMN/N . Let q denote the vectorized version of IMN , i.e., q = vec(IMN ), and selecting σ in (55) as σ = (I −F)−1q/N , the network MSD is given by:\nMSDnet = 1 N [vec(ATMGTMA)]T (I −F)−1q + 1 N γβΣ,∞\n(\nγ − αΣ,∞ βΣ,∞\n)\n(60)\nNovember 14, 2012 DRAFT\n16"
    }, {
      "heading" : "C. Comparison with Unregularized ATC Diffusion",
      "text" : "We now examine under what conditions the sparse diffusion filter (21) dominates in terms of meansquare performance its unregularized counterpart when γ = 0. Considering the MSD expression (58) at the k-th node, we notice that the first term on the RHS coincides with the MSD of the standard diffusion algorithm when γ = 0 (compare with (48) in [8]), whereas the second term in (58) is due to the regularization. Then, if\nαΣk,∞ > 0 and 0 < γ < αΣk,∞ βΣk,∞\n(61)\nthe second term on the RHS of (58) is negative and sparse diffusion would outperform standard diffusion. The condition αΣk,∞ > 0, where αΣ,i is given by (49), is a necessary condition to have dominance of sparse diffusion over standard diffusion. Let us examine an interpretation for the condition αΣk,∞ > 0 in terms of the sparsity of the vector wo. Since f(·) is a real-valued convex function, by the definition of subgradient it holds that\nf(x+ y)− f(x) ≥ ∂f(x)T y ⇒ −∂f(x)T y ≥ f(x)− f(x+ y) (62)\nThen, choosing x = wi−1 and y = BΣk(1⊗wo −wi−1), where BΣk = 2MAΣkAT (I −MD), we get\nαΣk,∞ = −2 lim i→∞ E∂f(wi−1) TMAΣkAT (I −MD) w̃i−1\n≥ lim i→∞ E[f(wi−1)− f(wi−1 +BΣk(1⊗ wo −wi−1))] (63)\nIf the step-sizes are sufficiently small, we can approximate BΣk ⋍ 2MAΣkAT , neglecting the second term that depends on {µ2k}. Then, we have\nw̄i , wi−1 +BΣk(1⊗ wo −wi−1) ⋍ wi−1 − 2MAΣkAT (wi−1 − 1⊗ wo) (64)\nAt convergence, the vector wi−1 fluctuates close to 1⊗wo. Now, since Σk ≥ 0, expression (64) can be interpreted as a gradient descent update minimizing the function ‖w−1⊗wo‖2AΣkAT , yielding for small step-sizes a vector w̄i that is closer to 1⊗wo than wi−1. If 1⊗wo is sparse, the non-zero elements (NZ set) of the vector are in general much less in number than the zero elements (Z set). Then, the gradient update in (64) helps move the components of the vector w̄i that belong to the Z set closer to zero. Intuitively, if the Z set is larger than the NZ set, w̄i will be more sparse than wi−1. Thus, considering (63) at convergence, since the function f(w) measures the sparsity of the vector w, it is expected that\nlim i→∞\nE[f(wi−1)− f(w̄i)] > 0 (65)\nNovember 14, 2012 DRAFT\n17\nsince w̄i is likely to be more sparse than wi−1. Consequently, the condition αΣk,∞ > 0 is likely to be true. Therefore, by properly selecting the sparsity coefficient γ to satisfy (61), the sparse diffusion algorithm will yield better MSD than the standard diffusion algorithm at each node. On the other hand, if wo is not sparse, condition (63) in general would not be true and the sparse diffusion algorithm will perform worse than standard diffusion."
    }, {
      "heading" : "D. Adaptation of the Regularization Parameter",
      "text" : "To endow networks with the capability to adaptively exploit and track the sparsity of the system model, we now propose a systematic approach to choosing the regularization parameter γ in an adaptive fashion. We thus allow the sparsity parameter to be iteration dependent, i.e., γ = γi. Following similar steps as in Section III.B, we can replace (51) with the conditional relation:\nE [ ‖w̃i‖2Σ|wi−1 ] = ‖w̃i−1‖2Σ′ +Tr[ΣATMGTMA] + φΣ,i(γi) (66)\nwhere Σ′ is given by (45) and\nφΣ,i(γi) = γiβΣ,i\n(\nγi − αΣ,i βΣ,i\n)\n(67)\nβΣ,i = ‖∂f(wi−1)‖2MAΣATM ≥ 0 (68) αΣ,i = −2∂f(wi−1)TMAΣAT [I −MD] w̃i−1 (69)\nThus, letting Σ = I and if φΣ,i(γi) < 0, the sparse diffusion algorithm will outperform the standard diffusion algorithm in terms of the instantaneous MSD. The condition φΣ,i(γi) < 0 is satisfied when\nαΣ,i > 0 and 0 < γi < αΣ,i βΣ,i\n(70)\nSince φΣ,i(γi) in (67) is quadratic in γi, we can choose the optimal parameter that minimizes (67) as:\nγoi = max\n{\n0, αΣ,i 2βΣ,i\n}\n(71)\nNow, exploiting the small step-sizes assumption in (69), we consider the following approximation:\nαΣ,i ≃ −2∂f(wi−1)TMAAT w̃i−1 (72)\nAn approximate expression for the sparsity parameter in (71) is then given by:\nγoi ≃ max { 0, −∂f(wi−1)TMAAT w̃i−1\n‖∂f(wi−1)‖2MAATM\n}\n(73)\nRemark 2: The rule (73) cannot be directly used due to the presence of the true parameter vector wo in w̃i−1, which is unknown to the nodes in the network. Furthermore, the update (73) depends on data\nNovember 14, 2012 DRAFT\n18\ncoming from all nodes. However, in the sequel we propose some useful approximations that allow the local computation of the regularization parameter.\nFirst, we notice that the regularization parameter (73) depends on the combination matrix A, which influences how the nodes perform the combination step in (21). This step helps improve the quality of the node’s estimate wk,i by reducing the effect of the measurement and gradient noises but, it generally has a marginal effect on the sparse recovery capability of the algorithm. The regularization function appears instead inside the adaptation step in (21). Thus, to simplify expression (73), we consider the case in which we want to select γi under the condition that A = I , i.e., no cooperation is performed among the nodes. In this case, the following relations hold:\nβΣ,i ≃ N ∑\nk=1\nµ2k‖∂f(wk,i−1)‖2 (74)\nαΣ,i ≃ −2 N ∑\nk=1\nµk∂f(wk,i−1) T w̃k,i−1 (75)\nLet x = wk,i−1 and y = wo − wk,i−1. Using (62), we find that\nαΣ,i ≃ −2 N ∑\nk=1\nµk∂f(wk,i−1) T w̃k,i−1 ≥ 2\nN ∑\nk=1\nµk[f(wk,i−1)− f(wo)] (76)\nIn practice, some prior knowledge about the sparsity of the true vector wo is often available. For example, the ℓ1-norm of wo can be upper bounded by some constant value [28]. In this work, we assume that\nf(wo) ≤ η, (77)\nfor some given positive constant η. Using (77) in (76), we get\nαΣ,i ≥ 2 N ∑\nk=1\nµk[f(wk,i−1)− η] (78)\nand, using (74) and (78), the regularization parameter in (71) can instead be approximated as:\nγoi = max\n{\n0,\n∑N k=1 µk[f(wk,i−1)− η] ∑N k=1 µ 2 k‖∂f(wk,i−1)‖2\n}\n(79)\nRemark 3: The update (79) still depends on data coming from all nodes in the network. However, we can replace (79) with a local rule where each node computes its own ρok,i from data received from its neighbors only, say,\nγok,i = max\n{\n0,\n∑\nl∈Nk µl[f(wl,i−1)− η]\n∑\nl∈Nk µ2l ‖∂f(wl,i−1)‖2\n}\n(80)\nIn the simulation section, we will check the performance of the sparse diffusion strategy using (80).\nNovember 14, 2012 DRAFT\n19\nWe summarize below the sparse diffusion strategy with adaptive regularization. The complexity of this\nstrategy is O(4M), which is the same complexity as standard stand-alone LMS adaptation.\nATC sparse diffusion LMS with adaptive regularization\nStart with wk,−1 = 0 for all k. Given non-negative real coefficients {al,k, cl,k} satisfying (19), for each time i ≥ 0 and for each node k, repeat: \n      \n      \nγok,i = max\n{\n0,\n∑\nl∈Nk µl[f(wl,i−1)− η]\n∑\nl∈Nk µ2l ‖∂f(wl,i−1)‖2\n}\n(sparsity control)\nψk,i = wk,i−1 + µk ∑\nl∈Nk\ncl,ku ∗ l,i[dl(i)− ul,iwk,i−1]− µkγok,i∂f(wk,i−1) (adaptation step)\nwk,i = ∑\nl∈Nk\nal,kψl,i (diffusion step)\n(81)\nRemark 4: Equation (80) indicates that, in order to ensure superiority of the sparse diffusion strategy, the construction (80) is triggered only if ∑\nl∈Nk µl[f(wl,i−1)− η] > 0, otherwise, γoi = 0. The performance\nof the sparse diffusion strategy depends on how close the upper bound η is to the right value. In the simulation section, we will check the robustness of the regularized diffusion algorithm to misspecified values of η."
    }, {
      "heading" : "IV. SIMULATION RESULTS",
      "text" : "In this section, we provide some numerical examples to illustrate the performance of the sparse diffusion algorithm. In the first example, we compare the performance of the sparse diffusion strategy with respect to standard diffusion, considering fixed values of the regularization parameter γ. The second example shows the benefits of adapting the sparsity parameter according to (80).\nNumerical Example 1 : Performance : We consider a connected network composed of 20 nodes. The topology of the network is shown in Fig. 1. The regressors uk,i have size M = 50 and are zero-mean white Gaussian distributed with covariance matrices Ru,k = σ2u,kIM , with σ 2 u,k shown on the top right side of Fig. 1. The background white noise power σ2u,k of each node is depicted on the bottom right side of Fig. 1. The first example aims to show the tracking and steady-state performance for the sparse diffusion algorithm. In Fig. 2, we report the learning curves in terms of network MSD for 6 different adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25) and RZA-ATC diffusion described by (21) and (28), and the non-cooperative approach from [34]. The simulations use a value of µ = 0.1 and\nNovember 14, 2012 DRAFT\n20\nthe results are averaged over 100 independent experiments. The sparsity parameters are set to γ = 5×10−3 for ZA-LMS, γ = 0.7× 10−3 for RZA-LMS, γZA = 10−3 for ZA-ATC, γRZA = 0.25× 10−3 for RZAATC, and ε = 0.1. In this simulation, we consider diffusion algorithms without measurement exchange, i.e., C = I , and a combination matrix A that simply averages the estimates from the neighborhood such that al,k = 1/|Nk| for all l. Initially, only one of the 50 elements of wo is set equal to one while the others are equal to zero, making the system very sparse. After 1000 iterations, 25 elements are randomly selected and set equal to 1, making the system have a sparsity ratio of 25/50. After 2000 iterations,\nNovember 14, 2012 DRAFT\n21\nall the elements are set equal to 1, leaving a completely non-sparse system. As we see from Fig. 2, when the system is very sparse both ZA-ATC and RZA-ATC yield better steady-state performance than standard diffusion. The RZA-ATC outperforms ZA-ATC thanks to reweighted regularization. When the vector wo is only half sparse, the performance of ZA-ATC deteriorates, performing worse than standard diffusion, while RZA-ATC has the best performance among the three diffusion filters. When the system is completely non-sparse, the RZA-ATC still performs comparably to the standard diffusion filter. We also notice the gain of diffusion schemes with respect to the non-cooperative approaches from [34].\nThe theoretical derivations in Section III showed that it is possible to select the regularization parameter γ in order to have dominance in terms of MSD of the ATC-SD filter with respect to the unregularized diffusion algorithm. To quantify the effect of the sparsity parameter γ on the performance of the ATC-SD filters with respect to different degrees of system sparsity, we consider two additional examples. In Fig. 3 (left), we show the behavior of the difference (in dB) between the network MSD of ATC-ZA and standard diffusion versus γ, for different sparsity degrees of wo. We consider the same settings of the previous simulation and the results are averaged over 100 independent experiments and over 100 samples after convergence. As we can see from Fig. 3 (left), reducing the sparsity of wo, the interval of γ values that yields a gain for ATC-ZA with respect to standard diffusion becomes smaller, until it reduces to zero when the system is not sparse enough. Different update functions may affect differently the steady-state performance of the ATC-SD algorithm. Thus, in Fig. 3 (right), we repeat the same experiment considering the ATC-RZA algorithm. As we can see, thanks to the reweighted regularization in (28), ATC-RZA gives better performance than ZA-ATC and yields a performance loss with respect to standard diffusion, for\nNovember 14, 2012 DRAFT\n22\nany γ, only when the vector wo is completely non-sparse.\nFinally, we compare our proposed sparse diffusion schemes with the sparsity promoting adaptive algorithms for distributed learning recently proposed in [43] and in [44]. At the best of our knowledge, the works in [43] and [44] are the only two present in the literature that exploit sparsity processing data both in an adaptive and distributed fashion. In Fig. 4 (left), we compare the steady-state performance, averaged over 100 independent simulations, of five adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25), RZA-ATC diffusion described by (21) and (28), the ATC ℓ1-LMS and the ATC ℓ1-RWLMS algorithms from [44]. We consider a vector parameter wo with only 5 elements set equal to one, which have been randomly chosen, leading to a sparsity ratio of 5/50. The sparsity parameters are set to γZA = 10−3 for ZA-ATC, γRZA = 0.7 × 10−3 for RZA-ATC, and ε = 0.1, for both our methods and the algorithms from [44]. The other settings are the same of the previous simulation, except that in this simulation the combination coefficients in (21) are chosen as cl,k = 1/|Nk| for all l, thus leading to ZA-ATC and RZA-ATC diffusion algorithms with measurement exchange. As we can notice from Fig. 4 (left), the proposed methods outperform the algorithms from [44] in terms of steady-state MSD. In Fig. 4 (right), we compare the transient network MSD of four adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25), RZA-ATC diffusion described by (21) and (28), and the projection based sparse learning from [43]. The settings of the ZA-ATC and\nNovember 14, 2012 DRAFT\n23\nRZA-ATC diffusion algorithms are the same of the previous simulation, whereas the parameters of the algorithm from [43] are chosen in order to have similar steady-state MSD with respect to the RZA-ATC diffusion method. Using the same notation adopted in [43], the parameters of the projection based filter are: ε = 1.3 ×maxk(σv,k); µn = 0.06 ×Mn; the radius of the weighted ℓ1 ball is equal to ‖wo‖0 = 5 (i.e., the correct sparsity level); ε̃n = 0.02; α = 0.99 for i < 300 and α = 0.8 for i > 300; the number of hyperslabs used per time update equals to q = 10. From Fig. 4 (right), it is possible to notice how the projected based method has a larger convergence rate with respect to the RZA ATC diffusion method. This positive feature is paid in terms of computational complexity. Indeed, while our methods have an LMS type complexity O(3M), the projection-based method from [43] has a complexity equal to O(M(3 + q + logM)), due to the presence of q projections onto the hyperslabs and 1 projection on the weighted ℓ1 ball per iteration.\nNumerical Example 2 - Adaptation of the Regularization Parameter: In this example, we consider the same network shown in Fig. 1 and the same setting of the previous simulation for the regression data and additive noise. The first example aims to show the tracking and steady-state performance of the ATC-SD algorithm with adaptive regularization. In Fig. 5 (left), we report the learning curves in terms of network MSD for 3 different adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25)) and RZA-ATC diffusion described by (21) and (28), when the regularization parameter γi is chosen locally at each node according to the adaptive rule (80). The simulations use a value of µ = 0.1 and the results are averaged over 100 independent experiments. The approximation parameter for RZA-ATC diffusion in (28) is chosen equal to ε = 0.1. Initially, only one of the 50 elements of wo is set equal to one while the others are equal to zero, making the system very sparse. After 1000 iterations, 5 elements are randomly selected and set equal to 1, making the system have a sparsity ratio of 5/50. After 2000 iterations, all the elements are set equal to 1, leaving a completely non-sparse system. The upper bound η in (77), used to evaluate the sparsity parameter in (80), is set to η = ‖wo‖1 and varies in time according to the different choices of wo. As we can see from Fig. 5 (left), when the system is very sparse both ZA-ATC and RZA-ATC yield better steady-state performance than standard diffusion. The RZA-ATC outperforms ZA-ATC thanks to the reweighted regularization. When the vector wo is less sparse, the performance of ZA-ATC deteriorates, getting closer to standard diffusion, while RZA-ATC still guarantees a large gain. When the system is completely non-sparse, the three filters have the same performance. To see the effect of different sparsity ratios of the vector wo on the choice of the regularization, in Fig. 5 (right) we show the average behavior of the parameter γoi evaluated according to (80), for ZA-ATC diffusion and RZA-ATC diffusion, averaged across nodes over 100 independent realizations. As we can see, the system\nNovember 14, 2012 DRAFT\n24\nreacts to different sparsity ratios of the vector wo, adjusting accordingly the regularization parameter γoi in order to improve the performance of the ATC-SD strategy with respect to the unregularized algorithm. From Fig. 5 (right), it is interesting to note how the regularization parameter converges close to the minimum of the Differential MSD plotted in Fig. 3 for both ZA-ATC and RZA-ATC. In particular, γoi is forced to zero when the vector wo is totally non-sparse, leading to the same performance of the standard\nNovember 14, 2012 DRAFT\n25\ndiffusion algorithm.\nSince the adaptive update of the sparsity parameter γoi in (80) depends on the selection of the trigger η, which depends on some available prior knowledge on the sparsity level of wo, it is important to check the sensitivity of the ATC-SD algorithm to misspecified values of η. Thus, in Fig. 6, we report the average behavior of the MSD, for ZA-ATC diffusion and RZA-ATC diffusion, versus a percentual error on the specification of the true trigger value η. The settings are the same of the previous simulation and the results are averaged over 100 independent experiments and over 100 samples after convergence. We consider a vector parameter wo with only 5 elements set equal to one, which have been randomly chosen, leading to a sparsity ratio of 5/50. In this case, the true value for the trigger parameter η would be equal to ‖wo‖1 = 5. The regularization parameter γi is chosen locally at each node according to the adaptive rule (80). As we can notice from Fig. 6, the ZA-ATC diffusion algorithm is very sensitive to misspecified values of η, especially in the case of under-estimation of the trigger parameter. Indeed, by under-estimating the value of η, the system would try to increase the sparsity parameter γi, in order to make the solution more sparse. Thus, as we notice from Fig. 6, being the true vector wo not sparse enough with respect to the selection of the trigger η, the system determines an increment of the bias that strongly affects the performance. On the contrary, from Fig. 6, we notice how the RZA-ATC diffusion algorithm is robust to errors in the selection of the trigger parameter η. This benefit is again due to regularization, whose presence reduces the magnitude of the bias, improving the estimation capabilities of the algorithm and relaxing the choice of the system parameters."
    }, {
      "heading" : "V. CONCLUSION",
      "text" : "In this paper we proposed a class of diffusion LMS strategies, regularized by convex sparsifying penalties, for distributed estimation over adaptive networks. Two different penalty functions have been employed: the ℓ1-norm, which uniformly attracts to zero all the vector elements, and a reweighted function, which better approximates the ℓ0-norm, selectively shrinking only the elements with small magnitude. Convergence and mean-square analysis of the sparse adaptive diffusion filter show under what conditions we have dominance of the proposed method with respect to its unregularized counterpart in terms of steady-state performance. Further analysis leads to a procedure to update the regularization parameter of the algorithm, in order to ensure dominance of the sparse diffusion filter with respect to its unregularized version. In this way, the network can adjust in real-time the system parameters to improve the estimation performance, according to the sparsity of the underlying vector. Several numerical results show the potential benefits of using such strategies.\nNovember 14, 2012 DRAFT\n26"
    }, {
      "heading" : "APPENDIX A",
      "text" : "PROOF OF THEOREM 1\nLetting B = AT (I −MD) and bi = γATM· E∂f(wi−1), recursion (39) gives\nEw̃i = BiEw̃0 + i−1 ∑\nn=0\nBnbi−n (82)\nwhere Ew̃0 is the initial condition. As long as we can show that both terms on the right hand side of (82) converge as i goes to infinity, then we would be able to conclude the convergence of Ew̃i. To proceed, we call upon results from [10], [11], [9]. Let z = col{z1, z2, . . . , zN} denote a vector that is obtained by stacking N subvectors of size M × 1 each (as is the case with w̃i). The block maximum norm of z is defined as\n‖z‖b,∞ = max 1≤k≤N ‖zk‖, (83)\nwhere ‖ · ‖ denotes the Euclidean norm of its vector argument. Likewise, the induced block maximum norm of a block matrix X with M ×M block entries is defined as:\n‖X‖b,∞ = max z 6=0 ‖X z‖b,∞ ‖z‖b,∞ . (84)\nIt is easy to check that the first term on the RHS of (82) converges to zero as i → ∞. Indeed, note that\n‖BiEw̃0‖∞ ≤ ‖B‖ib,∞ · ‖Ew̃0‖b,∞ → 0 (85)\nif we can ensure that ‖B‖b,∞ < 1. This condition is actually satisfied by (40). To see this, we invoke the triangle inequality of norms to note that\n‖B‖b,∞ = ∥ ∥AT (I −MD) ∥ ∥ b,∞ ≤ ∥ ∥AT ∥ ∥ b,∞ · ‖I −MD‖b,∞ = ‖I −MD‖b,∞ (86)\nsince ∥ ∥AT ∥ ∥\nb,∞ = 1 in view of the fact that A is a left-stochastic matrix [10]. Therefore, to satisfy\n‖B‖b,∞ < 1, it suffices to require ‖I −MD‖b,∞ < 1. (87)\nNow, we recall a result from [11], [48] on the block maximum norm of a block diagonal and Hermitian matrix X with M ×M blocks {Xk}, which states that\n‖X‖b,∞ = max k=1,...,N ρ(Xk) (88)\nThus, since M is diagonal, condition (87) will hold if the matrix I −MD is stable. Using (38), we can easily verify that this condition is satisfied for any step-sizes satisfying (40), as claimed before. Therefore, when the step-sizes satisfy condition (40), the first term on the RHS of (82) will converge to zero. We\nNovember 14, 2012 DRAFT\n27\nwill show next that condition (40) also implies that the second term on the RHS of (82) asymptotically converges to a finite value, thus leading to the overall convergence of the recursion (82).\nOne effective tool to prove convergence of a series is the comparison test [51, p. 14]: a series is absolutely convergent if each term of the series can be bounded by a term of an absolutely convergent series. Thus, denoting by [x]k the k-th entry of a vector x, it suffices to show that the series ∞ ∑\nn=0\n[Bnbi−n]k (89)\nconverges for each k = 1, . . . , NM . Now, each term of the series in (89) can be bounded as:\n[Bnbi−n]k ≤ |[Bnbi−n]k| ≤ ‖Bnbi−n‖b,∞ ≤ ‖B‖nb,∞ · ‖bi−n‖b,∞ ≤ δn · bmax (90)\nwhere δ = ‖B‖b,∞ and\nbmax = max j\n‖γATM · E∂f(wj−1)‖b,∞ (91)\nThe second inequality in (90) holds because the block maximum norm of a vector is greater than or equal to the largest absolute value of its entries. The scalar bmax is finite for the following reason. First, note that the subgradient vector ∂f(wi−1) has bounded entries. In particular, ∂fmax ≤ √ M for the ZA update in (25), and ∂fmax ≤ √ M/ε for the RZA update in (28). We further note that ∥ ∥AT ∥ ∥\nb,∞ = 1 and\n‖M‖b,∞ = µmax. It follows that\nbmax ≤ max i γ · ‖AT ‖b,∞ · ‖M‖b,∞ · ‖E∂f(wi−1)‖b,∞ = γ · µmax · ∂fmax (92)\nNow, if condition (40) is satisfied, then δ = ‖B‖b,∞ < 1 and ∞ ∑\nn=0\nδn · bmax = bmax 1− δ (93)\nwhich means that the series (93) and, consequently, the series (89), are absolutely convergent. In summary, since both first and second term on the RHS of (82) asymptotically converge to finite values, we conclude that Ew̃i will converge to a steady-state value. Now, taking the limit of (39) as i → ∞, it is easy to derive a closed form expression for the bias:\nbias , lim i→∞\nEw̃i = γ · [ I −AT (I −MD) ]−1ATM lim\ni→∞ E∂f(wi−1) (94)\nMoreover, exploiting (90), (92) and (93), we further note that\n‖bias‖b,∞ , lim i→∞ ‖Ew̃i‖b,∞ = lim i→∞\n∥ ∥ ∥ ∥ ∥ i−1 ∑\nn=0\nBnbi−n ∥ ∥ ∥ ∥\n∥\nb,∞\n≤ lim i→∞\ni−1 ∑\nn=0\n‖Bnbi−n‖b,∞ (95)\n≤ lim i→∞\ni−1 ∑\nn=0\n‖B‖nb,∞ ‖bi−n‖b,∞ ≤ bmax 1− δ ≤ γ · µmax · ∂fmax 1− δ (96)\nThis completes the proof of Theorem 1.\nNovember 14, 2012 DRAFT\n28"
    }, {
      "heading" : "APPENDIX B",
      "text" : "PROOF OF THEOREM 2\nFrom (47)-(49) we have\nφΣ,i(γ) = γ 2 E‖∂f(wi−1)‖2MAΣATM + 2γE∂f(wi−1)TMAΣAT (I −MD) w̃i−1 (97)\nSince, as noted in Appendix A, ∂f(·) is a bounded function for all i, the term βΣ,i in (48) can be upper bounded by a positive constant term p1 for all i. The term αΣ,i in (49) can be written as EcTi−1w̃i−1 where the vector\nci−1 , −2 (I −MD)T AΣATM∂f(wi−1) (98)\nis again bounded for all i. Thus, we have\nEcTi−1w̃i−1 ≤ ∣ ∣ ∣ ∣\n∣\nM ∑\nm=1\nEcm,i−1w̃m,i−1\n∣ ∣ ∣ ∣ ∣ ≤ cmax ∣ ∣ ∣ ∣ ∣ M ∑\nm=1\nEw̃m,i−1\n∣ ∣ ∣ ∣ ∣ ≤ cmax1T |Ew̃i−1| (99)\nwhere cmax = maxi |cm,i−1|. As shown in Appendix A, the evolution of Ew̃i−1 is given by (82), which, for any finite initialization vector w̃0, converges as i → ∞ and cannot diverge for all i, if the step-sizes are chosen to satisfy (40). Consequently, |Ew̃i−1| can be upper bounded by some positive constant vector p2 for all i. Thus, letting r = vec(ATMGTMA), expression (53) can be upper bounded as\nE‖w̃i‖2σ ≤ E‖w̃i−1‖2Fσ + rTσ + p3 (100)\nwhere p3 = γ2p1 + γcmax1T p2 > 0. The positive constant p3 can be related to the quantity rTσ through some constant υ ∈ R+, say, p3 = υrTσ. Relation (100) is an inequality, which can be used to prove convergence of the sequence E‖w̃i‖2σ to a bounded region instead of a fixed point. Alternatively, we convert (100) into an equality recursion as follows:\nE‖w̃i‖2σ = θiE‖w̃i−1‖2Fσ + θi(1 + υ)rTσ (101)\nfor some coefficient θi ∈ [0, 1] that depends on both E‖w̃i‖2σ and E‖w̃i−1‖2Fσ . Recursion (101) leads to:\nE‖w̃i‖2σ = [ i ∏\nl=1\nθl\n]\nE‖w̃0‖2F iσ + (1 + υ)rT i−1 ∑\nl=0\n[\ni ∏\nn=i−l\nθn\n]\nF lσ (102)\nwhere E‖w̃0‖2 is the initial condition. We first note that if F is stable, F i → 0 as i → ∞. In this way, the first term on the RHS of (102) vanishes asymptotically. Now, proceeding as in Appendix A, we can use the comparison test [51, p. 14] to prove that, if F is a stable matrix, the second term on the RHS\nNovember 14, 2012 DRAFT\n29\nof (102) is an absolutely convergent series. Thus, denoting again by [x]k the k-th entry of a vector x, it suffices to show the convergence of the series: ∞ ∑\nl=0\n[ ξl(i)F lσ ]\nk (103)\nwith ξl(i) = ∏i n=i−l θn, for k = 1, . . . , NM . Each term of the series in (103) can be bounded as:\n[ ξl(i)F lσ ]\nk ≤\n∣ ∣ ∣ [ ξl(i)F lσ ]\nk\n∣ ∣ ∣ ≤ ∣ ∣ ∣ [ F lσ ]\nk\n∣ ∣ ∣ ≤ ‖F lσ‖b,∞ ≤ ‖F l‖b,∞‖σ‖b,∞ (104)\nwhere the second inequality in (104) holds because the coefficients ξl(i) ∈ [0, 1] for all i, whereas the third inequality in (104) holds because the block maximum norm of a vector is greater equal than the largest absolute value of its entries. A known result in matrix theory [49, p. 30] states that for every square stable matrix F , and every ǫ > 0, there exists a submultiplicative matrix norm ‖ · ‖ρ such that\n‖F‖ρ = ρ(F) + ǫ (105)\nSince F is stable, ρ(F) < 1, we can choose ǫ > 0 such that ρ(F) + ǫ = ξ < 1. Now, since in a finite dimensional space all norms are equivalent [50], we have ‖ · ‖b,∞ ≤ ζ · ‖ · ‖ρ, for some positive constant ζ . Thus, we have\n‖F l‖b,∞ ≤ ζ · ‖F l‖ρ ≤ ζ · ‖F‖lρ = ζ · ξl (106)\nand, substituting (106) into (104), we get ∞ ∑\nl=0\n‖F l‖b,∞ · ‖σ‖b,∞ ≤ ζ · ‖σ‖b,∞ · ∞ ∑\nl=0\nξl = ζ · ‖σ‖b,∞\n1− ξ (107)\nwhich means that the series (107) and, consequently, the series (103), are absolutely convergent. In summary, since both the first and second terms on the RHS of (102) asymptotically converge to finite values, we conclude that E‖w̃i‖2σ will converge to a steady-state value, thus completing our proof."
    }, {
      "heading" : "APPENDIX C",
      "text" : "EXISTENCE OF αΣ,∞\nLet us consider the bounded random vector ci in (98), which is independent of the noise sequence\nvk(i) for all k, i. Letting B = AT (I −MD) and bi = γATM∂f(wi−1), from (37), we get\nαΣ,∞ = lim i→∞ EcTi w̃i = lim i→∞ EcTi Biw̃0 + lim i→∞\ni−1 ∑\nn=0\nEcTi Bnbi−n (108)\nwhere w̃0 is the initial condition. Following the same steps as in Appendix A, if the step-sizes satisfy condition (40), the first term on the RHS of (108) will converge to zero. Furthermore, since the vector\nNovember 14, 2012 DRAFT\n30\nsequence ci is bounded, similarly to what we have done in (89)-(93), we can again use the comparison test [51, p. 14] to prove that the second term on the RHS of (108) asymptotically converges to a finite value, thus leading to the existence of the limit in (108)."
    } ],
    "references" : [ {
      "title" : "A new class of incremental gradient methods for least squares problems",
      "author" : [ "D. Bertsekas" ],
      "venue" : "SIAM J. Optim., vol. 7, no. 4, pp. 913–926, 1997.",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 1997
    }, {
      "title" : "Incremental subgradient methods for nondifferentiable optimization",
      "author" : [ "A. Nedic", "D. Bertsekas" ],
      "venue" : "SIAM J. Optim., vol. 12, no. 1, pp. 109–138, 2001.",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "Quantized incremental algorithms for distributed optimization",
      "author" : [ "M.G. Rabbat", "R.D. Nowak" ],
      "venue" : "IEEE J. Sel. Areas Commun., vol. 23, no. 4, pp. 798–808, Apr. 2005.",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "Incremental adaptive strategies over distributed networks",
      "author" : [ "C. Lopes", "A.H. Sayed" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 55, no. 8, pp. 4064–4077, 2007.",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Distributed estimation over an adaptive incremental network based on the affine projection algorithm",
      "author" : [ "L. Li", "J. Chambers", "C. Lopes", "A.H. Sayed" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 58, no. 1, pp. 151–164, 2009.",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Reducibility among combinational problems",
      "author" : [ "R.M. Karp" ],
      "venue" : "Complexity of Computer Computations (R. E. Miller and J. W. Thatcher, eds.), pp. 85–104, 1972.",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 1972
    }, {
      "title" : "Diffusion least-mean squares over adaptive networks: Formulation and performance analysis",
      "author" : [ "C.G. Lopes", "A.H. Sayed" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 56, no. 7, pp. 3122–3136, July 2008.",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Diffusion LMS strategies for distributed estimation",
      "author" : [ "F.S. Cattivelli", "A.H. Sayed" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 58, pp. 1035–1048, March 2010.",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Diffusion adaptation over networks",
      "author" : [ "A.H. Sayed" ],
      "venue" : "to appear in E-Reference Signal Processing, R. Chellapa and S. Theodoridis, editors, Elsevier, 2013. Also available on arXiv at http://arxiv.org/abs/1205.4220, May 2012.",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Diffusion least-mean squares with adaptive combiners: Formulation and performance analysis",
      "author" : [ "N. Takahashi", "I. Yamada", "A.H. Sayed" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 58, no. 9, pp. 4795–4810, Sep. 2010.",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Diffusion adaptation strategies for distributed optimization and learning over networks",
      "author" : [ "J. Chen", "A.H. Sayed" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 60, no. 8, pp. 4289-4305, August 2012.",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Modeling bird flight formations using diffusion adaptation",
      "author" : [ "F. Cattivelli", "A.H. Sayed" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 59, no. 5, pp. 2038-2051, May 2011.",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Mobile adaptive networks",
      "author" : [ "S-Y. Tu", "A.H. Sayed" ],
      "venue" : "IEEE J. Sel.Topics on Signal Processing, vol. 5, no. 4, pp. 649-664, August 2011.",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Bacterial motility via diffusion adaptation",
      "author" : [ "J. Chen", "X. Zhao", "A.H. Sayed" ],
      "venue" : "Proc. 44th Asilomar Conference on Signals, Systems and Computers, Pacific Grove, CA, Nov. 2010, pp. 1930-1934.",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Bio-inspired swarming for dynamic radio access based on diffusion adaptation",
      "author" : [ "P. Di Lorenzo", "S. Barbarossa", "A.H. Sayed" ],
      "venue" : "Proc. European Signal Processing Conference (EUSIPCO), Aug. 2011, Barcelona, pp.402–406.",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Collaborative learning of mixture models using diffusion adaptation",
      "author" : [ "Z. Towfic", "J. Chen", "A.H. Sayed" ],
      "venue" : "Proc. IEEE Workshop on Machine Learning for Signal Processing, Beijing, China, Sept. 2011, pp. 1–6.",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Adaptive learning in a world of projections",
      "author" : [ "S. Theodoridis", "K. Slavakis", "I. Yamada" ],
      "venue" : "IEEE Signal Processing Magazine, vol. 28, no. 1, pp. 97–123, 2011.",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Adaptive robust distributed learning in diffusion sensor networks",
      "author" : [ "S. Chouvardas", "K. Slavakis", "S. Theodoridis" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 59, no. 10, pp. 4692–4707, 2011.",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Trading off communications bandwidth with accuracy in adaptive diffusion networks",
      "author" : [ "S. Chouvardas", "K. Slavakis", "S. Theodoridis" ],
      "venue" : "Proc. IEEE International Conference on Acoustics Speech and Signal Processing, May 2011, Prague, Czeck Rep., pp. 2048–2051.",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "A TAP selection algorithm for adaptive filters",
      "author" : [ "S. Kawamura", "M. Hatori" ],
      "venue" : "Proc. of IEEE International Conference on Acoustics Speech and Signal Processing (ICASSP), 1986, vol. 11, Tokyo, Japan, pp. 2979–2982.",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 1986
    }, {
      "title" : "LMS estimation via structural detection",
      "author" : [ "J. Homer", "I. Mareels", "R.R. Bitmead", "B. Wahlberg", "A. Gustafsson" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 46, pp. 2651–2663, October 1998. November 14, 2012  DRAFT  31",
      "citeRegEx" : "21",
      "shortCiteRegEx" : null,
      "year" : 1998
    }, {
      "title" : "Parallel NLMS filters with stochastic active taps and step-sizes for sparse system identification",
      "author" : [ "Y. Li", "Y. Gu", "K. Tang" ],
      "venue" : "Proc. of IEEE International Conference on Acoustics Speech and Signal Processing (ICASSP), vol. 3, pp. III, 2006, Toulouse.",
      "citeRegEx" : "22",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Identification of sparse impulse response systems using an adaptive delay filter",
      "author" : [ "D.M. Etter" ],
      "venue" : "Pro. of IEEE International Conference on Acoustics Speech and Signal Processing (ICASSP), 1985, Tampa, Florida, pp. 1169–1172.",
      "citeRegEx" : "23",
      "shortCiteRegEx" : null,
      "year" : 1985
    }, {
      "title" : "Partial update LMS algorithms",
      "author" : [ "M. Godavarti", "A.O. Hero" ],
      "venue" : "IEEE Trans. on Signal Proc., vol. 53, no. 7, pp. 2382–2399, July, 2005.",
      "citeRegEx" : "24",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "Proportionate normalized least-mean-squares adaptation in echo cancelers",
      "author" : [ "D. Duttweiler" ],
      "venue" : "IEEE Transactions on Speech and Audio Processing, vol. 8, no. 5, pp. 508–518, Sep. 2000.",
      "citeRegEx" : "25",
      "shortCiteRegEx" : null,
      "year" : 2000
    }, {
      "title" : "An improved PNLMS algorithm",
      "author" : [ "J. Benesty", "S. Gay" ],
      "venue" : "Proc. IEEE International Conference on Acoustics, Speech, and Signal Processing (ICASSP), 2002, Orlando, Florida, pp. 1881–1884.",
      "citeRegEx" : "26",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "Compressed sensing",
      "author" : [ "D. Donoho" ],
      "venue" : "IEEE Transactions on Information Theory, vol. 52, no. 4, pp. 1289–1306, 2006.",
      "citeRegEx" : "27",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Regression shrinkage and selection via the LASSO",
      "author" : [ "R. Tibshirani" ],
      "venue" : "J. Royal Statistical Society: Series B, vol. 58, pp. 267–288, 1996.",
      "citeRegEx" : "28",
      "shortCiteRegEx" : null,
      "year" : 1996
    }, {
      "title" : "Compressive sensing",
      "author" : [ "R. Baraniuk" ],
      "venue" : "IEEE Signal Processing Magazine, vol. 25, pp. 21–30, March 2007.",
      "citeRegEx" : "29",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Enhancing sparsity by reweighted l1 minimization",
      "author" : [ "E.J. Candes", "M. Wakin", "S. Boyd" ],
      "venue" : "Journal of Fourier Analysis and Applications, vol. 14, pp.877–905, 2007.",
      "citeRegEx" : "30",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Stable signal recovery from incomplete and inaccurate measurements",
      "author" : [ "E. Candes", "J. Romberg", "T. Tao" ],
      "venue" : "Communications on Pure and Applied Mathematics,",
      "citeRegEx" : "31",
      "shortCiteRegEx" : "31",
      "year" : 2006
    }, {
      "title" : "From sparse solutions of systems of equations to sparse modeling of signals and images",
      "author" : [ "A. Bruckstein", "D. Donoho", "M. Elad" ],
      "venue" : "SIAM Review, vol. 51, no. 1, pp. 34–81, 2009.",
      "citeRegEx" : "32",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Optimally tuned iterative reconstruction algorithms for compressed sensing",
      "author" : [ "A. Maleki", "D. Donoho" ],
      "venue" : "IEEE Journal of Selected Topics in Signal Processing, vol. 4, no. 2, pp. 330–341, 2010.",
      "citeRegEx" : "33",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Sparse LMS for system identification",
      "author" : [ "Y. Chen", "Y. Gu", "A.O. Hero" ],
      "venue" : "Proc. IEEE International Conference on Acoustics, Speech, and Signal Processing, pp. 3125–3128, Taipei, May 2009.",
      "citeRegEx" : "34",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Convergence analysis of sparse LMS algorithms with l1-norm penalty based on white imput signal,",
      "author" : [ "K. Shi", "P. Shi" ],
      "venue" : "Signal Processsing,",
      "citeRegEx" : "35",
      "shortCiteRegEx" : "35",
      "year" : 2010
    }, {
      "title" : "Online adaptive estimation of sparse signals: where RLS meets the l1-norm",
      "author" : [ "D. Angelosante", "J.A. Bazerque", "G.B. Giannakis" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 58, no. 7, pp. 3436–3447, July, 2010.",
      "citeRegEx" : "36",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "SPARLS: The sparse RLS algorithm",
      "author" : [ "B. Babadi", "N. Kalouptsidis", "V. Tarokh" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 58, no. 8, pp. 4013–4025, Aug., 2010.",
      "citeRegEx" : "37",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Online sparse system identification and signal reconstruction using projections onto weighted l1 balls",
      "author" : [ "Y. Kopsinis", "K. Slavakis", "S. Theodoridis" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 59, no. 3, pp. 936–952, March, 2010.",
      "citeRegEx" : "38",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "A sparse adaptive filtering using time-varying soft-thresholding techniques",
      "author" : [ "Y. Murakami", "M. Yamagishi", "M. Yukawa", "I. Yamada" ],
      "venue" : "Proc. IEEE International Conference on Acoustics Speech and Signal Processing (ICASSP), Dallas, USA, 2010, pp. 3734–3737.",
      "citeRegEx" : "39",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Distributed basis pursuit",
      "author" : [ "J. Mota", "J. Xavier", "P. Aguiar", "M. Puschel" ],
      "venue" : "Arxiv preprint arXiv:1009.1128, 2010.",
      "citeRegEx" : "40",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Distributed sparse linear regression",
      "author" : [ "G. Mateos", "J.A. Bazerque", "G.B. Giannakis" ],
      "venue" : "IEEE Transactions on Signal Processing, vol 58, No. 10, pp. 5262–5276, Oct. 2010.",
      "citeRegEx" : "41",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Sparse diffusion LMS for distributed adaptive estimation",
      "author" : [ "P. Di Lorenzo", "S. Barbarossa", "A.H. Sayed" ],
      "venue" : "Proc. IEEE International Conference on Acoustics, Speech, and Signal Processing, Kyoto, Japan, March 2012.",
      "citeRegEx" : "42",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "A sparsity-promoting adaptive algorithm for distributed learning",
      "author" : [ "S. Chouvardas", "K. Slavakis", "Y. Kopsinis", "S. Theodoridis" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 60, no. 10, pp. 5412–5425, Oct. 2012.",
      "citeRegEx" : "43",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Diffusion sparse least-mean squares over networks",
      "author" : [ "Y. Liu", "C. Li", "Z. Zhang" ],
      "venue" : "IEEE Transactions on Signal Processing, vol. 60, no. 8, pp. 4480–4485, Aug. 2012.",
      "citeRegEx" : "44",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Distributed spectrum sensing for cognitive radio networks by exploiting sparsity",
      "author" : [ "J.A. Bazerque", "G.B. Giannakis" ],
      "venue" : "IEEE Trans. on Signal Processing, vol 58, No. 3, pp. 1847–1862, March 2010.",
      "citeRegEx" : "45",
      "shortCiteRegEx" : null,
      "year" : 1847
    }, {
      "title" : "Distributed LMS for consensus-based in-network adaptive processing",
      "author" : [ "I.D. Schizas", "G. Mateos", "G.B. Giannakis" ],
      "venue" : "IEEE Trans. Signal Process., vol. 57, no. 6, pp. 2365–2382, Jun. 2009.",
      "citeRegEx" : "46",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Stochastic Approximation Algorithms and Applications",
      "author" : [ "H.J. Kushner", "G.G. Yin" ],
      "venue" : "New York: Springer-Verlag,",
      "citeRegEx" : "47",
      "shortCiteRegEx" : "47",
      "year" : 1997
    }, {
      "title" : "Adaptive Filters, Wiley, NJ",
      "author" : [ "A.H. Sayed" ],
      "venue" : null,
      "citeRegEx" : "48",
      "shortCiteRegEx" : "48",
      "year" : 2008
    } ],
    "referenceMentions" : [ {
      "referenceID" : 41,
      "context" : "Part of this work was presented at the 2012 IEEE International Conference on Acoustic, Speech and Signal Processing, Kyoto, March 2012 [42].",
      "startOffset" : 135,
      "endOffset" : 139
    }, {
      "referenceID" : 0,
      "context" : "One typical strategy is the incremental approach [1]-[5], where each node communicates only with one neighbor at a time over a cyclic path.",
      "startOffset" : 49,
      "endOffset" : 52
    }, {
      "referenceID" : 4,
      "context" : "One typical strategy is the incremental approach [1]-[5], where each node communicates only with one neighbor at a time over a cyclic path.",
      "startOffset" : 53,
      "endOffset" : 56
    }, {
      "referenceID" : 5,
      "context" : "However, determining a cyclic path that covers all nodes is an NP-hard problem [6] and, in addition, cyclic trajectories are prone to link and node failures.",
      "startOffset" : 79,
      "endOffset" : 82
    }, {
      "referenceID" : 6,
      "context" : "To address these difficulties, adaptive diffusion techniques were proposed and studied in [7], [8].",
      "startOffset" : 90,
      "endOffset" : 93
    }, {
      "referenceID" : 7,
      "context" : "To address these difficulties, adaptive diffusion techniques were proposed and studied in [7], [8].",
      "startOffset" : 95,
      "endOffset" : 98
    }, {
      "referenceID" : 11,
      "context" : "In view of their robustness and adaptation properties, diffusion networks have been applied to model a variety of self-organized behavior encountered in nature, such as birds flying in formation [12], fish foraging for food [13] or bacteria motility [14].",
      "startOffset" : 195,
      "endOffset" : 199
    }, {
      "referenceID" : 12,
      "context" : "In view of their robustness and adaptation properties, diffusion networks have been applied to model a variety of self-organized behavior encountered in nature, such as birds flying in formation [12], fish foraging for food [13] or bacteria motility [14].",
      "startOffset" : 224,
      "endOffset" : 228
    }, {
      "referenceID" : 13,
      "context" : "In view of their robustness and adaptation properties, diffusion networks have been applied to model a variety of self-organized behavior encountered in nature, such as birds flying in formation [12], fish foraging for food [13] or bacteria motility [14].",
      "startOffset" : 250,
      "endOffset" : 254
    }, {
      "referenceID" : 14,
      "context" : "Diffusion adaptation has also been used to solve dynamic resource allocation problems in cognitive radios [15], to perform robust system modeling [18], and to implement distributed learning over mixture models in pattern recognition applications [16].",
      "startOffset" : 106,
      "endOffset" : 110
    }, {
      "referenceID" : 17,
      "context" : "Diffusion adaptation has also been used to solve dynamic resource allocation problems in cognitive radios [15], to perform robust system modeling [18], and to implement distributed learning over mixture models in pattern recognition applications [16].",
      "startOffset" : 146,
      "endOffset" : 150
    }, {
      "referenceID" : 15,
      "context" : "Diffusion adaptation has also been used to solve dynamic resource allocation problems in cognitive radios [15], to perform robust system modeling [18], and to implement distributed learning over mixture models in pattern recognition applications [16].",
      "startOffset" : 246,
      "endOffset" : 250
    }, {
      "referenceID" : 26,
      "context" : "Any prior information about the sparsity of wo can be exploited to help improve the estimation performance, as demonstrated in many recent efforts in the area of compressive sensing (CS) [27]-[29].",
      "startOffset" : 187,
      "endOffset" : 191
    }, {
      "referenceID" : 28,
      "context" : "Any prior information about the sparsity of wo can be exploited to help improve the estimation performance, as demonstrated in many recent efforts in the area of compressive sensing (CS) [27]-[29].",
      "startOffset" : 192,
      "endOffset" : 196
    }, {
      "referenceID" : 27,
      "context" : "Such schemes are useful in several contexts such as in the analysis of prostate cancer data [28], [41], spectrum sensing in cognitive radio [45], and spectrum estimation in wireless sensor networks [46].",
      "startOffset" : 92,
      "endOffset" : 96
    }, {
      "referenceID" : 40,
      "context" : "Such schemes are useful in several contexts such as in the analysis of prostate cancer data [28], [41], spectrum sensing in cognitive radio [45], and spectrum estimation in wireless sensor networks [46].",
      "startOffset" : 98,
      "endOffset" : 102
    }, {
      "referenceID" : 44,
      "context" : "Such schemes are useful in several contexts such as in the analysis of prostate cancer data [28], [41], spectrum sensing in cognitive radio [45], and spectrum estimation in wireless sensor networks [46].",
      "startOffset" : 140,
      "endOffset" : 144
    }, {
      "referenceID" : 45,
      "context" : "Such schemes are useful in several contexts such as in the analysis of prostate cancer data [28], [41], spectrum sensing in cognitive radio [45], and spectrum estimation in wireless sensor networks [46].",
      "startOffset" : 198,
      "endOffset" : 202
    }, {
      "referenceID" : 19,
      "context" : "Some of the early works that mix adaptation with sparsity-aware constructions include methods that rely on the heuristic selection of active taps [20]-[22], and on sequential partial updating techniques [23]November 14, 2012 DRAFT",
      "startOffset" : 146,
      "endOffset" : 150
    }, {
      "referenceID" : 21,
      "context" : "Some of the early works that mix adaptation with sparsity-aware constructions include methods that rely on the heuristic selection of active taps [20]-[22], and on sequential partial updating techniques [23]November 14, 2012 DRAFT",
      "startOffset" : 151,
      "endOffset" : 155
    }, {
      "referenceID" : 22,
      "context" : "Some of the early works that mix adaptation with sparsity-aware constructions include methods that rely on the heuristic selection of active taps [20]-[22], and on sequential partial updating techniques [23]November 14, 2012 DRAFT",
      "startOffset" : 203,
      "endOffset" : 207
    }, {
      "referenceID" : 23,
      "context" : "3 [24]; some other methods assign proportional step-sizes to different taps according to their magnitudes, such as the proportionate normalized LMS (PNLMS) algorithm and its variations [25]-[26].",
      "startOffset" : 2,
      "endOffset" : 6
    }, {
      "referenceID" : 24,
      "context" : "3 [24]; some other methods assign proportional step-sizes to different taps according to their magnitudes, such as the proportionate normalized LMS (PNLMS) algorithm and its variations [25]-[26].",
      "startOffset" : 185,
      "endOffset" : 189
    }, {
      "referenceID" : 25,
      "context" : "3 [24]; some other methods assign proportional step-sizes to different taps according to their magnitudes, such as the proportionate normalized LMS (PNLMS) algorithm and its variations [25]-[26].",
      "startOffset" : 190,
      "endOffset" : 194
    }, {
      "referenceID" : 27,
      "context" : "In subsequent studies, motivated by the LASSO technique [28] and by connections with compressive sensing [29], [30], several algorithms for sparse adaptive filtering have been proposed based on LMS [34]-[35], RLS [36], [37], and projection-based methods [38]-[39].",
      "startOffset" : 56,
      "endOffset" : 60
    }, {
      "referenceID" : 28,
      "context" : "In subsequent studies, motivated by the LASSO technique [28] and by connections with compressive sensing [29], [30], several algorithms for sparse adaptive filtering have been proposed based on LMS [34]-[35], RLS [36], [37], and projection-based methods [38]-[39].",
      "startOffset" : 105,
      "endOffset" : 109
    }, {
      "referenceID" : 29,
      "context" : "In subsequent studies, motivated by the LASSO technique [28] and by connections with compressive sensing [29], [30], several algorithms for sparse adaptive filtering have been proposed based on LMS [34]-[35], RLS [36], [37], and projection-based methods [38]-[39].",
      "startOffset" : 111,
      "endOffset" : 115
    }, {
      "referenceID" : 33,
      "context" : "In subsequent studies, motivated by the LASSO technique [28] and by connections with compressive sensing [29], [30], several algorithms for sparse adaptive filtering have been proposed based on LMS [34]-[35], RLS [36], [37], and projection-based methods [38]-[39].",
      "startOffset" : 198,
      "endOffset" : 202
    }, {
      "referenceID" : 34,
      "context" : "In subsequent studies, motivated by the LASSO technique [28] and by connections with compressive sensing [29], [30], several algorithms for sparse adaptive filtering have been proposed based on LMS [34]-[35], RLS [36], [37], and projection-based methods [38]-[39].",
      "startOffset" : 203,
      "endOffset" : 207
    }, {
      "referenceID" : 35,
      "context" : "In subsequent studies, motivated by the LASSO technique [28] and by connections with compressive sensing [29], [30], several algorithms for sparse adaptive filtering have been proposed based on LMS [34]-[35], RLS [36], [37], and projection-based methods [38]-[39].",
      "startOffset" : 213,
      "endOffset" : 217
    }, {
      "referenceID" : 36,
      "context" : "In subsequent studies, motivated by the LASSO technique [28] and by connections with compressive sensing [29], [30], several algorithms for sparse adaptive filtering have been proposed based on LMS [34]-[35], RLS [36], [37], and projection-based methods [38]-[39].",
      "startOffset" : 219,
      "endOffset" : 223
    }, {
      "referenceID" : 37,
      "context" : "In subsequent studies, motivated by the LASSO technique [28] and by connections with compressive sensing [29], [30], several algorithms for sparse adaptive filtering have been proposed based on LMS [34]-[35], RLS [36], [37], and projection-based methods [38]-[39].",
      "startOffset" : 254,
      "endOffset" : 258
    }, {
      "referenceID" : 38,
      "context" : "In subsequent studies, motivated by the LASSO technique [28] and by connections with compressive sensing [29], [30], several algorithms for sparse adaptive filtering have been proposed based on LMS [34]-[35], RLS [36], [37], and projection-based methods [38]-[39].",
      "startOffset" : 259,
      "endOffset" : 263
    }, {
      "referenceID" : 39,
      "context" : "A couple of distributed algorithms implementing LASSO over ad-hoc networks have also been considered before, although their main purpose has been to use the network to solve a batch processing problem [40], [41].",
      "startOffset" : 201,
      "endOffset" : 205
    }, {
      "referenceID" : 40,
      "context" : "A couple of distributed algorithms implementing LASSO over ad-hoc networks have also been considered before, although their main purpose has been to use the network to solve a batch processing problem [40], [41].",
      "startOffset" : 207,
      "endOffset" : 211
    }, {
      "referenceID" : 41,
      "context" : "Investigations on adaptive and distributed solutions appear in [42],[43], and [44].",
      "startOffset" : 63,
      "endOffset" : 67
    }, {
      "referenceID" : 42,
      "context" : "Investigations on adaptive and distributed solutions appear in [42],[43], and [44].",
      "startOffset" : 68,
      "endOffset" : 72
    }, {
      "referenceID" : 43,
      "context" : "Investigations on adaptive and distributed solutions appear in [42],[43], and [44].",
      "startOffset" : 78,
      "endOffset" : 82
    }, {
      "referenceID" : 41,
      "context" : "In [42], we employed diffusion techniques that are able to identify and track sparsity over networks in a distributed manner; the techniques relied on the use of convenient convex regularization terms.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 42,
      "context" : "In the related work [43], the authors employ projection techniques onto hyperslabs and weighted l1-balls to develop a useful sparsity-aware algorithm for distributed learning over diffusion networks.",
      "startOffset" : 20,
      "endOffset" : 24
    }, {
      "referenceID" : 43,
      "context" : "In [44], the authors use the same formulation of [42] and the techniques of [7][8] to independently arrive at useful diffusion strategies except that they limit the function f(·) in (2) to choices of the form ‖w‖p, for particular selections of p-vector norms; they also include the regularization factor into the combination step of their algorithm rather than in the adaptation step, as done further ahead in this work.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 41,
      "context" : "In [44], the authors use the same formulation of [42] and the techniques of [7][8] to independently arrive at useful diffusion strategies except that they limit the function f(·) in (2) to choices of the form ‖w‖p, for particular selections of p-vector norms; they also include the regularization factor into the combination step of their algorithm rather than in the adaptation step, as done further ahead in this work.",
      "startOffset" : 49,
      "endOffset" : 53
    }, {
      "referenceID" : 6,
      "context" : "In [44], the authors use the same formulation of [42] and the techniques of [7][8] to independently arrive at useful diffusion strategies except that they limit the function f(·) in (2) to choices of the form ‖w‖p, for particular selections of p-vector norms; they also include the regularization factor into the combination step of their algorithm rather than in the adaptation step, as done further ahead in this work.",
      "startOffset" : 76,
      "endOffset" : 79
    }, {
      "referenceID" : 7,
      "context" : "In [44], the authors use the same formulation of [42] and the techniques of [7][8] to independently arrive at useful diffusion strategies except that they limit the function f(·) in (2) to choices of the form ‖w‖p, for particular selections of p-vector norms; they also include the regularization factor into the combination step of their algorithm rather than in the adaptation step, as done further ahead in this work.",
      "startOffset" : 79,
      "endOffset" : 82
    }, {
      "referenceID" : 41,
      "context" : "The algorithms proposed here and in [42] are more general in a couple of respects: they allow for broader choices of the regularization function f(·), they allow for sharing of both data and weight estimates among the nodes (and not only estimates) by allowing for the use of two sets of combinations weights {al,k, cl,k} instead of only one set, and the resulting mean-square and stability analyses are more demanding due to these generalizations; see, e.",
      "startOffset" : 36,
      "endOffset" : 40
    }, {
      "referenceID" : 41,
      "context" : "In summary, in this paper we extend our preliminary work in [42] to develop adaptive networks running diffusion algorithms subject to constraints that enforce sparsity.",
      "startOffset" : 60,
      "endOffset" : 64
    }, {
      "referenceID" : 7,
      "context" : "Adaptive Diffusion Strategy We follow the approach proposed in [8], [11] to derive distributed strategies for the minimization of Jglob(w) in (2).",
      "startOffset" : 63,
      "endOffset" : 66
    }, {
      "referenceID" : 10,
      "context" : "Adaptive Diffusion Strategy We follow the approach proposed in [8], [11] to derive distributed strategies for the minimization of Jglob(w) in (2).",
      "startOffset" : 68,
      "endOffset" : 72
    }, {
      "referenceID" : 10,
      "context" : "This substitution is also reasonable in view of the fact that norms are equivalent and that each of the weighted norms in (9) can be bounded as λmin(Γl) · ‖w − w l ‖ ≤ ‖w − w l ‖2Γl ≤ λmax(Γl) · ‖w − w l ‖ (10) Substitutions of this kind are common in the stochastic approximation literature where Hessian matrices, such as Γl, are replaced by multiples of the identity matrix; such approximations allow the use of simpler steepest-descent iterations in place of Newton-type iterations [11].",
      "startOffset" : 486,
      "endOffset" : 490
    }, {
      "referenceID" : 0,
      "context" : "This step is reminiscent of an incremental-type substitution [1]-[5].",
      "startOffset" : 61,
      "endOffset" : 64
    }, {
      "referenceID" : 4,
      "context" : "This step is reminiscent of an incremental-type substitution [1]-[5].",
      "startOffset" : 65,
      "endOffset" : 68
    }, {
      "referenceID" : 7,
      "context" : ", [8]).",
      "startOffset" : 2,
      "endOffset" : 5
    }, {
      "referenceID" : 7,
      "context" : "It was argued in [8] that ATC strategies generally outperform CTA strategies.",
      "startOffset" : 17,
      "endOffset" : 20
    }, {
      "referenceID" : 42,
      "context" : "Compared with the strategies proposed in [43] and [44], the diffusion algorithm (21) exploits data in the neighborhood more fully; the adaptation step aggregates data {dl(i), ul,i} from the neighbors, and the diffusion step aggregates estimates {ψl,i} from the same neighbors.",
      "startOffset" : 41,
      "endOffset" : 45
    }, {
      "referenceID" : 43,
      "context" : "Compared with the strategies proposed in [43] and [44], the diffusion algorithm (21) exploits data in the neighborhood more fully; the adaptation step aggregates data {dl(i), ul,i} from the neighbors, and the diffusion step aggregates estimates {ψl,i} from the same neighbors.",
      "startOffset" : 50,
      "endOffset" : 54
    }, {
      "referenceID" : 42,
      "context" : "The implementation in [43] uses a different algorithmic structure with C = I so that data {dl(i), ul,i} from the neighbors are not directly used.",
      "startOffset" : 22,
      "endOffset" : 26
    }, {
      "referenceID" : 43,
      "context" : "Compared with [44], observe that the effect of the regularization factor in (21) influences the adaptation step, and not the combination step as in [44].",
      "startOffset" : 14,
      "endOffset" : 18
    }, {
      "referenceID" : 43,
      "context" : "Compared with [44], observe that the effect of the regularization factor in (21) influences the adaptation step, and not the combination step as in [44].",
      "startOffset" : 148,
      "endOffset" : 152
    }, {
      "referenceID" : 43,
      "context" : "10 for the exchange of data {dl(i), ul,i} among the nodes through the use of the coefficients {cl,k}, whereas [44] uses C = I as well.",
      "startOffset" : 110,
      "endOffset" : 114
    }, {
      "referenceID" : 27,
      "context" : "Thus, motivated by LASSO [28] and work on compressive sensing [29], we first consider the following l1-norm convex choice for a regularization function: f1(w) = ‖w‖1 , M ∑",
      "startOffset" : 25,
      "endOffset" : 29
    }, {
      "referenceID" : 28,
      "context" : "Thus, motivated by LASSO [28] and work on compressive sensing [29], we first consider the following l1-norm convex choice for a regularization function: f1(w) = ‖w‖1 , M ∑",
      "startOffset" : 62,
      "endOffset" : 66
    }, {
      "referenceID" : 29,
      "context" : "The ZA update uniformly shrinks all components of the vector, and does not distinguish between zero and nonzero elements [30], [34].",
      "startOffset" : 121,
      "endOffset" : 125
    }, {
      "referenceID" : 33,
      "context" : "The ZA update uniformly shrinks all components of the vector, and does not distinguish between zero and nonzero elements [30], [34].",
      "startOffset" : 127,
      "endOffset" : 131
    }, {
      "referenceID" : 29,
      "context" : "Motivated by the idea of reweighting in compressive sampling [30], [34],[38], we also consider the following approximation: ‖w‖0 ≃ M ∑",
      "startOffset" : 61,
      "endOffset" : 65
    }, {
      "referenceID" : 33,
      "context" : "Motivated by the idea of reweighting in compressive sampling [30], [34],[38], we also consider the following approximation: ‖w‖0 ≃ M ∑",
      "startOffset" : 67,
      "endOffset" : 71
    }, {
      "referenceID" : 37,
      "context" : "Motivated by the idea of reweighting in compressive sampling [30], [34],[38], we also consider the following approximation: ‖w‖0 ≃ M ∑",
      "startOffset" : 72,
      "endOffset" : 76
    }, {
      "referenceID" : 29,
      "context" : "11 which, for very small positive values of ε, is a better approximation for the l0-norm of a vector w than the l1-norm [30], thus enhancing sparse recovery by the algorithm.",
      "startOffset" : 120,
      "endOffset" : 124
    }, {
      "referenceID" : 29,
      "context" : ", [30], [34], [38], [42], [44].",
      "startOffset" : 2,
      "endOffset" : 6
    }, {
      "referenceID" : 33,
      "context" : ", [30], [34], [38], [42], [44].",
      "startOffset" : 8,
      "endOffset" : 12
    }, {
      "referenceID" : 37,
      "context" : ", [30], [34], [38], [42], [44].",
      "startOffset" : 14,
      "endOffset" : 18
    }, {
      "referenceID" : 41,
      "context" : ", [30], [34], [38], [42], [44].",
      "startOffset" : 20,
      "endOffset" : 24
    }, {
      "referenceID" : 43,
      "context" : ", [30], [34], [38], [42], [44].",
      "startOffset" : 26,
      "endOffset" : 30
    }, {
      "referenceID" : 46,
      "context" : "Several studies in the literature, especially on stochastic approximation theory [47]–[48], indicate that the performance expressions obtained using this assumption match well the actual performance of stand-alone filters for sufficiently small step-sizes.",
      "startOffset" : 81,
      "endOffset" : 85
    }, {
      "referenceID" : 47,
      "context" : "Several studies in the literature, especially on stochastic approximation theory [47]–[48], indicate that the performance expressions obtained using this assumption match well the actual performance of stand-alone filters for sufficiently small step-sizes.",
      "startOffset" : 86,
      "endOffset" : 90
    }, {
      "referenceID" : 6,
      "context" : "Following the energy conservation framework of [7], [8] and under Assumption 1, we can establish the following variance relation: E‖w̃i‖Σ = E‖w̃i−1‖Σ′ + E[giMAΣAMgi] + 2γE∂f(wi−1)MAΣA (I −MD) w̃i−1 + γE‖∂f(wi−1)‖MAΣATM (44) where Σ is any Hermitian nonnegative-definite matrix that we are free to choose, and Σ = E(I −DiM)AΣA (I −MDi) (45) Relations (44)-(45) can be derived directly from (37) if we compute the weighted norm of both sides of the equality and use the fact that gi is independent of w̃i−1 and wi−1.",
      "startOffset" : 47,
      "endOffset" : 50
    }, {
      "referenceID" : 7,
      "context" : "Following the energy conservation framework of [7], [8] and under Assumption 1, we can establish the following variance relation: E‖w̃i‖Σ = E‖w̃i−1‖Σ′ + E[giMAΣAMgi] + 2γE∂f(wi−1)MAΣA (I −MD) w̃i−1 + γE‖∂f(wi−1)‖MAΣATM (44) where Σ is any Hermitian nonnegative-definite matrix that we are free to choose, and Σ = E(I −DiM)AΣA (I −MDi) (45) Relations (44)-(45) can be derived directly from (37) if we compute the weighted norm of both sides of the equality and use the fact that gi is independent of w̃i−1 and wi−1.",
      "startOffset" : 52,
      "endOffset" : 55
    }, {
      "referenceID" : 10,
      "context" : "Now, since A is left-stochastic, it can be verified that the above F is stable if (I −DM) is stable [11], [9]; this latter condition is guaranteed by (40).",
      "startOffset" : 100,
      "endOffset" : 104
    }, {
      "referenceID" : 8,
      "context" : "Now, since A is left-stochastic, it can be verified that the above F is stable if (I −DM) is stable [11], [9]; this latter condition is guaranteed by (40).",
      "startOffset" : 106,
      "endOffset" : 109
    }, {
      "referenceID" : 7,
      "context" : "Expression (55) is a useful result: it allows us to derive several performance metrics through the proper selection of the free weighting parameter σ (or Σ), as was done in [8].",
      "startOffset" : 173,
      "endOffset" : 176
    }, {
      "referenceID" : 7,
      "context" : "Considering the MSD expression (58) at the k-th node, we notice that the first term on the RHS coincides with the MSD of the standard diffusion algorithm when γ = 0 (compare with (48) in [8]), whereas the second term in (58) is due to the regularization.",
      "startOffset" : 187,
      "endOffset" : 190
    }, {
      "referenceID" : 27,
      "context" : "For example, the l1-norm of wo can be upper bounded by some constant value [28].",
      "startOffset" : 75,
      "endOffset" : 79
    }, {
      "referenceID" : 7,
      "context" : "2, we report the learning curves in terms of network MSD for 6 different adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25) and RZA-ATC diffusion described by (21) and (28), and the non-cooperative approach from [34].",
      "startOffset" : 109,
      "endOffset" : 112
    }, {
      "referenceID" : 33,
      "context" : "2, we report the learning curves in terms of network MSD for 6 different adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25) and RZA-ATC diffusion described by (21) and (28), and the non-cooperative approach from [34].",
      "startOffset" : 246,
      "endOffset" : 250
    }, {
      "referenceID" : 33,
      "context" : "2: Transient network MSD for the non-cooperative approaches LMS, ZA-LMS [34], RZA-LMS [34], and the diffusion techniques ATC [8], ZA-ATC given by (21)-(25), RZA-ATC given by (21)-(28).",
      "startOffset" : 72,
      "endOffset" : 76
    }, {
      "referenceID" : 33,
      "context" : "2: Transient network MSD for the non-cooperative approaches LMS, ZA-LMS [34], RZA-LMS [34], and the diffusion techniques ATC [8], ZA-ATC given by (21)-(25), RZA-ATC given by (21)-(28).",
      "startOffset" : 86,
      "endOffset" : 90
    }, {
      "referenceID" : 7,
      "context" : "2: Transient network MSD for the non-cooperative approaches LMS, ZA-LMS [34], RZA-LMS [34], and the diffusion techniques ATC [8], ZA-ATC given by (21)-(25), RZA-ATC given by (21)-(28).",
      "startOffset" : 125,
      "endOffset" : 128
    }, {
      "referenceID" : 33,
      "context" : "We also notice the gain of diffusion schemes with respect to the non-cooperative approaches from [34].",
      "startOffset" : 97,
      "endOffset" : 101
    }, {
      "referenceID" : 7,
      "context" : "Iteration index M S D ( dB ) ATC diffusion from [8] ZA ATC diffusion in (21) RZA ATC diffusion in (21) ATC l 1 −LMS from [44] ATC l 1 −RWLMS from [44]",
      "startOffset" : 48,
      "endOffset" : 51
    }, {
      "referenceID" : 43,
      "context" : "Iteration index M S D ( dB ) ATC diffusion from [8] ZA ATC diffusion in (21) RZA ATC diffusion in (21) ATC l 1 −LMS from [44] ATC l 1 −RWLMS from [44]",
      "startOffset" : 121,
      "endOffset" : 125
    }, {
      "referenceID" : 43,
      "context" : "Iteration index M S D ( dB ) ATC diffusion from [8] ZA ATC diffusion in (21) RZA ATC diffusion in (21) ATC l 1 −LMS from [44] ATC l 1 −RWLMS from [44]",
      "startOffset" : 146,
      "endOffset" : 150
    }, {
      "referenceID" : 7,
      "context" : "400 500 600 −34 −32 −30 −28 −26 −24 ATC diffusion from [8] ZA ATC diffusion in (21) RZA ATC diffusion in (21) Projection−based learning from [43]",
      "startOffset" : 55,
      "endOffset" : 58
    }, {
      "referenceID" : 42,
      "context" : "400 500 600 −34 −32 −30 −28 −26 −24 ATC diffusion from [8] ZA ATC diffusion in (21) RZA ATC diffusion in (21) Projection−based learning from [43]",
      "startOffset" : 141,
      "endOffset" : 145
    }, {
      "referenceID" : 7,
      "context" : "4: (Left) Transient network MSD for the diffusion techniques ATC [8], ZA-ATC described by (21) and (25), RZA-ATC described by (21) and (28), and the sparse diffusion algorithms from [44].",
      "startOffset" : 65,
      "endOffset" : 68
    }, {
      "referenceID" : 43,
      "context" : "4: (Left) Transient network MSD for the diffusion techniques ATC [8], ZA-ATC described by (21) and (25), RZA-ATC described by (21) and (28), and the sparse diffusion algorithms from [44].",
      "startOffset" : 182,
      "endOffset" : 186
    }, {
      "referenceID" : 7,
      "context" : "(Right) Transient network MSD for the diffusion techniques ATC [8], ZA-ATC described by (21) and (25), RZA-ATC described by (21) and (28), and the projection based distributed learning technique from [43].",
      "startOffset" : 63,
      "endOffset" : 66
    }, {
      "referenceID" : 42,
      "context" : "(Right) Transient network MSD for the diffusion techniques ATC [8], ZA-ATC described by (21) and (25), RZA-ATC described by (21) and (28), and the projection based distributed learning technique from [43].",
      "startOffset" : 200,
      "endOffset" : 204
    }, {
      "referenceID" : 42,
      "context" : "Finally, we compare our proposed sparse diffusion schemes with the sparsity promoting adaptive algorithms for distributed learning recently proposed in [43] and in [44].",
      "startOffset" : 152,
      "endOffset" : 156
    }, {
      "referenceID" : 43,
      "context" : "Finally, we compare our proposed sparse diffusion schemes with the sparsity promoting adaptive algorithms for distributed learning recently proposed in [43] and in [44].",
      "startOffset" : 164,
      "endOffset" : 168
    }, {
      "referenceID" : 42,
      "context" : "At the best of our knowledge, the works in [43] and [44] are the only two present in the literature that exploit sparsity processing data both in an adaptive and distributed fashion.",
      "startOffset" : 43,
      "endOffset" : 47
    }, {
      "referenceID" : 43,
      "context" : "At the best of our knowledge, the works in [43] and [44] are the only two present in the literature that exploit sparsity processing data both in an adaptive and distributed fashion.",
      "startOffset" : 52,
      "endOffset" : 56
    }, {
      "referenceID" : 7,
      "context" : "4 (left), we compare the steady-state performance, averaged over 100 independent simulations, of five adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25), RZA-ATC diffusion described by (21) and (28), the ATC l1-LMS and the ATC l1-RWLMS algorithms from [44].",
      "startOffset" : 138,
      "endOffset" : 141
    }, {
      "referenceID" : 43,
      "context" : "4 (left), we compare the steady-state performance, averaged over 100 independent simulations, of five adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25), RZA-ATC diffusion described by (21) and (28), the ATC l1-LMS and the ATC l1-RWLMS algorithms from [44].",
      "startOffset" : 286,
      "endOffset" : 290
    }, {
      "referenceID" : 43,
      "context" : "1, for both our methods and the algorithms from [44].",
      "startOffset" : 48,
      "endOffset" : 52
    }, {
      "referenceID" : 43,
      "context" : "4 (left), the proposed methods outperform the algorithms from [44] in terms of steady-state MSD.",
      "startOffset" : 62,
      "endOffset" : 66
    }, {
      "referenceID" : 7,
      "context" : "4 (right), we compare the transient network MSD of four adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25), RZA-ATC diffusion described by (21) and (28), and the projection based sparse learning from [43].",
      "startOffset" : 92,
      "endOffset" : 95
    }, {
      "referenceID" : 42,
      "context" : "4 (right), we compare the transient network MSD of four adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25), RZA-ATC diffusion described by (21) and (28), and the projection based sparse learning from [43].",
      "startOffset" : 234,
      "endOffset" : 238
    }, {
      "referenceID" : 42,
      "context" : "23 RZA-ATC diffusion algorithms are the same of the previous simulation, whereas the parameters of the algorithm from [43] are chosen in order to have similar steady-state MSD with respect to the RZA-ATC diffusion method.",
      "startOffset" : 118,
      "endOffset" : 122
    }, {
      "referenceID" : 42,
      "context" : "Using the same notation adopted in [43], the parameters of the projection based filter are: ε = 1.",
      "startOffset" : 35,
      "endOffset" : 39
    }, {
      "referenceID" : 42,
      "context" : "Indeed, while our methods have an LMS type complexity O(3M), the projection-based method from [43] has a complexity equal to O(M(3 + q + logM)), due to the presence of q projections onto the hyperslabs and 1 projection on the weighted l1 ball per iteration.",
      "startOffset" : 94,
      "endOffset" : 98
    }, {
      "referenceID" : 7,
      "context" : "5 (left), we report the learning curves in terms of network MSD for 3 different adaptive filters: ATC diffusion LMS [8], ZA-ATC diffusion described by (21) and (25)) and RZA-ATC diffusion described by (21) and (28), when the regularization parameter γi is chosen locally at each node according to the adaptive rule (80).",
      "startOffset" : 116,
      "endOffset" : 119
    }, {
      "referenceID" : 7,
      "context" : "5: (Left) Transient network MSD for the the diffusion techniques ATC [8], ZA-ATC described by (21) and (25), RZA-ATC described by (21) and (28) with adaptive selection of the regularization parameter γi.",
      "startOffset" : 69,
      "endOffset" : 72
    }, {
      "referenceID" : 9,
      "context" : "To proceed, we call upon results from [10], [11], [9].",
      "startOffset" : 38,
      "endOffset" : 42
    }, {
      "referenceID" : 10,
      "context" : "To proceed, we call upon results from [10], [11], [9].",
      "startOffset" : 44,
      "endOffset" : 48
    }, {
      "referenceID" : 8,
      "context" : "To proceed, we call upon results from [10], [11], [9].",
      "startOffset" : 50,
      "endOffset" : 53
    }, {
      "referenceID" : 9,
      "context" : "b,∞ = 1 in view of the fact that A is a left-stochastic matrix [10].",
      "startOffset" : 63,
      "endOffset" : 67
    }, {
      "referenceID" : 10,
      "context" : "(87) Now, we recall a result from [11], [48] on the block maximum norm of a block diagonal and Hermitian matrix X with M ×M blocks {Xk}, which states that ‖X‖b,∞ = max k=1,.",
      "startOffset" : 34,
      "endOffset" : 38
    }, {
      "referenceID" : 47,
      "context" : "(87) Now, we recall a result from [11], [48] on the block maximum norm of a block diagonal and Hermitian matrix X with M ×M blocks {Xk}, which states that ‖X‖b,∞ = max k=1,.",
      "startOffset" : 40,
      "endOffset" : 44
    }, {
      "referenceID" : 0,
      "context" : "Alternatively, we convert (100) into an equality recursion as follows: E‖w̃i‖σ = θiE‖w̃i−1‖Fσ + θi(1 + υ)rσ (101) for some coefficient θi ∈ [0, 1] that depends on both E‖w̃i‖σ and E‖w̃i−1‖Fσ .",
      "startOffset" : 140,
      "endOffset" : 146
    }, {
      "referenceID" : 0,
      "context" : "∣ ≤ ‖F σ‖b,∞ ≤ ‖F ‖b,∞‖σ‖b,∞ (104) where the second inequality in (104) holds because the coefficients ξl(i) ∈ [0, 1] for all i, whereas the third inequality in (104) holds because the block maximum norm of a vector is greater equal than the largest absolute value of its entries.",
      "startOffset" : 111,
      "endOffset" : 117
    } ],
    "year" : 2012,
    "abstractText" : "This article proposes diffusion LMS strategies for distributed estimation over adaptive networks that are able to exploit sparsity in the underlying system model. The approach relies on convex regularization, common in compressive sensing, to enhance the detection of sparsity via a diffusive process over the network. The resulting algorithms endow networks with learning abilities and allow them to learn the sparse structure from the incoming data in real-time, and also to track variations in the sparsity of the model. We provide convergence and mean-square performance analysis of the proposed method and show under what conditions it outperforms the unregularized diffusion version. We also show how to adaptively select the regularization parameter. Simulation results illustrate the advantage of the proposed filters for sparse data recovery.",
    "creator" : "LaTeX with hyperref package"
  }
}