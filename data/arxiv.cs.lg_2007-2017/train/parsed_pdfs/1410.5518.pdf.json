{
  "name" : "1410.5518.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Behnam Neyshabur" ],
    "emails" : [ "bneyshabur@ttic.edu", "nati@ttic.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n41 0.\n55 18\nv1 [\nst at\n.M L\n] 2\n1 O\nct 2\n01 4"
    }, {
      "heading" : "1 Introduction",
      "text" : "Locality Sensitive Hashing [6] is a popular tool for approximate nearest neighbor search and is also widely used in different settings [1, 3, 4]. LSH is based on a random mapping from objects to a small, possibly binary, alphabet, which can in turn be used to generate short hash words such that hamming distances between hash words correspond to similarity between objects. Recent studies have also explored the power of asymmetry in LSH and binary hashing, where two different mappings are used to approximate similarity [7, 8].\nShrivastava and Li [9] consider the problem of Maximum Inner Product Search (MIPS) where similarity between vectors is given by the unnormalized inner product between them. They show that there is no symmetric LSH for this similarity measure, per the standard definition of an LSH, and propose two distinct mappings, one of database objects and the other for queries, which yields an asymmetric LSH for the problem.\nAlthough as mentioned above, an asymmetric LSH can be useful in many cases, here we show that MIPS is not one of them. We present a simple parameter-free symmetric hash for MIPS. We argue that this hash constitutes an LSH when the query vectors are normalized, as in Shrivastava and Li, and that there is no need for an asymmetric hash. Our proposed LSH also allows for a better hashing parameter ρ, and by replicating the experiments of Shrivastava and Li, we show that it also attains better empirical performance."
    }, {
      "heading" : "2 Problem Formulation and Background",
      "text" : "In Maximum Inner Product Search (MIPS), we are given a “database” of vectors S ⊂ Rd and a query point q ∈ Rd and the goal is to find a point p ∈ S that maximizes the inner product q⊤p:\np = argmax x∈S\nq⊤x\nAs in Shrivastava and Li [9], we assume the following without loss of generality:\n– The query q is normalized: Since given a vector q, the norm ‖q‖2 does not affect the argmax, we can assume ‖q‖2 = 1 always. – The database vectors are bounded inside the unit sphere: We assume ‖x‖2 ≤ 1 for all x ∈ S. Otherwise we can rescale all vectors without changing the argmax.\nWe would like to find a good “locality sensitive hash” for MIPS. Formally, given an alphabet Γ , a hash H of objects X is a random mapping from X to Γ , i.e. a distribution over functions h : X → Γ . The hash H is sometimes thought of as a “family” of functions, where the uniform distribution over the family is implicit.\nGiven a similarity function sim : X × X → R, such as inner product similarity sim(x, y) = x⊤y, Shrivastava and Li define an LSH as follows1:\nDefinition 1 (Locality Sensitive Hashing (LSH)). A hash H is said to be a (S, cS, p1, p2)-LSH for a similarity function sim : X × X → R over X if for any x, y ∈ X :\n– if sim(x, y) ≥ S then Ph∈H[h(x) = h(y)] ≥ p1, – if sim(x, y) ≤ cS then Ph∈H[h(x) = h(y)] ≤ p2.\nHere S > 0 is a threshold of interest, and for efficient approximate nearest neighbor search, we need p1 > p2 and c < 1. In particular, given a (S, cS, p1, p2)-sensitive hash H, a data structure for finding Ssimilar objects when cS-similar objects exist in the database can be constructed in time O(nρ log n) and space O(n1+ρ) where ρ = log p1log p2 . This quantity ρ is therefor of particular interest, as we are interested in an LSH with minimum possible ρ, and we refer to it as the hashing ratio.\nAs discussed above, in the MIPS problem, we make different assumptions about the database vectors and query. In particular, we assume the query is normalized to unit norm, but only assume boundedness, not normalization, for the database vectors in S. It therefor makes sense to modify the definition of an LSH accordingly:\nDefinition 2 (Locality Sensitive Hashing (LSH)–Asymmetric Spaces). A hash H is said to be a (S, cS, p1, p2)-LSH for a similarity function sim : X ×Y → R over a pair of spaces X and Y if for any x ∈ X and y ∈ Y:\n– if sim(x, y) ≥ S then Ph∈H[h(x) = h(y)] ≥ p1, – if sim(x, y) ≤ cS then Ph∈H[h(x) = h(y)] ≤ p2.\nThe hash H should map objects in both X and Y, i.e. be defined over X ∪ Y (or a superset).\nIn Definition 2, the hash itself is still symmetric, i.e. the same function h is applied to both x and y. The only asymmetry is in the problem definition, since we want the property to hold for x and y in different spaces. This should be contrasted with a truly asymmetric hash, where two different functions are used, one for each space. Formally, an asymmetric hash for a pair of spaces X and Y is a joint distribution over pairs of mappings (f, g), f : X → Γ , g : Y → Γ . The asymmetric hashes we consider are specified by a pair of deterministic mappings P : X → Z and Q : Y → Z and a single random mapping (i.e. distribution over functions) h : Z → Γ , where f(x) = h(P (x)) and g(y) = h(Q(y)). Given a similarity function sim : X×Y → R we define2:\nDefinition 3 (Asymmetric Locality Sensitive Hashing (ALSH)). An asymmetric hash is said to be an (S, cS, p1, p2)-ALSH for a similarity function sim : X × Y → R over X ,Y if for any x ∈ X and y ∈ Y:\n– if sim(x, y) ≥ S then P(f,g)[f(x) = g(y)] ≥ p1, – if sim(x, y) ≤ cS then P(f,g)[f(x) = g(y)] ≤ p2.\nShrivastava and Li considered the problem of finding an LSH for MIPS, i.e. for the inner product similarity sim(x, y) = x⊤y. They first observe that for any S > 0, 0 < c < 1, p1 > p2, there is no symmetric hash that is an (S, cS, p1, p2)-LSH for sim(x, y) = x\n⊤y over X = RD by Definition 1. To address this they suggest an asymmetric hash based on the following pair of mappings:\nP (x) = [x; ‖x‖22 ; ‖x‖ 4 2 ; . . . ; ‖x‖\n2m 2 ]\nQ(y) = [y; 1/2; 1/2; . . . ; 1/2], (1)\n1 This is a formalization of the definition given by Shrivastava and Li, which in turn is a modification of the definition of LSH for distance functions [6]. Note that even though inner product similarity could be negative, this definition is only concerned with positive similarities. 2 This is a formalization of the definition given by Shrivastava and Li, where we have made the distinction between the spaces X and Y, and the quantifiers on x, y, explicit. We also distinguish between an asymmetric hash and an asymmetric notion of an LSH.\nwhere m ≥ 1 is an integer parameter, combined with the standard L2 hash function\nhL2a,b(x) =\n⌊ a⊤x+ b\nr\n⌋\n(2)\nwhere a ∼ N (0, I) is a spherical multi-Gaussian random vector, b ∼ U(0, r) is a uniformly distributed random variable on [0, r], and r ∈ R is a parameter. We know that for any x, y ∈ R, the collision probability of the hash hL2a,b can be written as [3]:\nP [ hL2a,b(x) = h L2 a,b(y) ]\n= 1− 2Φ(−r/δ)− 1− e −(r/δ)2/2\n√ 2π(r/δ) = Fr(δ) (3)\nwhere δ = ‖x− y‖2 and Φ(x) = ∫ x −∞ 1√ 2π e−x 2/2dx is the cumulative density function of standard normal distribution.\nThe alphabet Γ used is the integers, and for x, q ∈ Rd the intermediate space is Z = Rd+m. To solve the MIPS problem, queries are first normalized such that ‖q‖2 = 1, and database vectors are scaled such that ‖x‖2 ≤ U where U < 1 is a parameter. The asymmetric hash is then given by (f(x), g(q)) = (hL2a,b(P (x)), h L2 a,b(Q(q))).\nShrivastava and Li establish that for any 0 < c < 1 and 0 < S < 1, there exists 0 < U < 1, r > 0, m ≥ 1, and p1 > p2 such that (f(x), g(q)) is an (S0, cS0, p1, p2)-ALSH over X = {x|‖x‖2 ≤ U} and Y = {q|‖q‖2 = 1} with S0 = SU . Note that the threshold S0 must also be scaled by U when we scale x such that ‖x‖2 ≤ U . The more relevant measure is therefor the scale-invariant threshold S = S0/U . Another way to think about this is to assume without loss of generality that ‖x‖2 ≤ 1 and we are interested in the threshold S, and then allow scaling by U as part of the mapping. I.e. we consider the mapping\nP̃ (x) = [x/U ; ‖x/U‖22 ; ‖x/U‖ 4 2 ; . . . ; ‖x/U‖\n2m 2 ] (4)\nand the corresponding asymmetric hash\n(f̃(x), g(q)) = (hL2a,b(P̃ (x)), h L2 a,b(Q(q))), (5)\nwith Q(q) as in (1). We refer to this hash as mips-alsh.\nIn terms of mips-alsh, we have that for any 0 < c < 1 and 0 < S < 1, there exists 0 < U < 1, r > 0, m ≥ 1, and p1 > p2 such that mips-alsh specified in (5) is an (S, cS, p1, p2)-ALSH over X = {x|‖x‖2 ≤ 1} and Y = {q|‖q‖2 = 1}. Stated this way, the problem is fixed (‖q‖2 = 1, ‖x‖2 ≤ 1) and the mapping is parameterized bym,U and r. Shrivastava and Li furthermore calculate the hashing parameter ρ as a function of m,U and r, and numerically find the optimal ρ over a grid of possible values for m,U and r."
    }, {
      "heading" : "3 Symmetric LSH for MIPS",
      "text" : "The claim that there is no hash that fulfills Definition 1 for a symmetric LSH for inner product similarity over X = Rd is indeed true. However, this is because of the insistence that the hashing property holds for all x, q ∈ Rd. But actually, since the queries are normalized and the database objects are bounded and could be scaled without loss of generality, we are only interested in how the hashing behaves for x ∈ X = {x|‖x‖2 ≤ 1} and q ∈ Y = {q|‖q‖2 = 1}. Indeed, the main result of Shrivastava and Li establishing the existence of an ALSH only applies to this pair of database and query spaces—mips-alsh is not an ALSH over the entire space Rd (i.e. when queries are un-normalized and the database unbounded). But as we argue here, there do exist symmetric hashes that fulfill Definition 2 for inner product similarity over X = {x|‖x‖2 ≤ 1} and Y = {q|‖q‖2 = 1}. That is, we do need to consider the hashing property asymmetrically, with the database and query constrained in different ways, as in Definitions 2 and 3 and the analysis of Shrivastava and Li. But the same hash function can be used for both the database and the queries and there is no need for two different hash functions or two different mappings P (·) and Q(·)."
    }, {
      "heading" : "3.1 The Standard LSH",
      "text" : "We first point out that after scaling the database by a small enough U , no further asymmetric mapping is needed, and the standard L2 hash given by (2) is already an LSH for inner product similarity:\nTheorem 1. For any 0 < S < 1, 0 < c < 1 and U ≤ 2S(1 − c), there exists p1 > p2 such that the hash hL2a,b given in (2) is a (S0, cS0, p1, p2)-LSH for inner product similarity over X = {x|‖x‖2 ≤ U} and Y = {q|‖q‖2 = 1} (under Definitions 2) where S0 = US.\nThe hash suggested here is exactly mips-alsh, but with m = 0, i.e. without the asymmetric mappings P (·), Q(·) of (1). Phrased in terms of mips-alsh, Theorem 1 states that a choice of m = 0 is always sufficient, as long as U is small enough (though, as we see later, this choice might lead to inferior hashing ratios and thus inferior hashes).\nProof. First, let’s consider the case when q⊤x ≥ S0 = SU . Since Fr is a monotonically decreasing function, we have:\nP [ hL2a,b(q) = h L2 a,b(x) ] = Fr (\n√\n1− 2q⊤x+ ‖x‖22 )\n≥ Fr (\n√\n1− 2SU + U2 )\nIf q⊤x < cS0 = cSU , we define α = q⊤x cSU ≤ 1. So we have that\nP [ hL2a,b(q) = h L2 a,b(x) ] = Fr (\n√\n1− 2q⊤x+ ‖x‖22 )\n≤ Fr ( √ 1− 2αcSU + (αcSU)2 )\nagain because Fr is a decreasing function, it is enough to prove that: √\n1− 2SU + U2 < √ 1− 2αcSU + (αcSU)2\nwhich in turn is equivalent to: U2 − 2SU < (αcSU)2 − 2αcSU.\nRearranging, we have the following condition on U :\nU < 2S(1− αc) 1− (αcS)2\nwhich holds when U ≤ 2S(1− c) as postulated."
    }, {
      "heading" : "3.2 SIMPLE-LSH",
      "text" : "Although we argue in the previous Section that even the standard Euclidean LSH is an LSH for inner product similarity, its hashing parameter ρ might be quite large for many thresholds S (see Section 4). Furthermore, ensuring the standard Euclidean LHS is an LSH requires scaling by a small enough U , and the resulting hashing depends on two parameters, namely U and r. Instead, we propose here a simpler, parameter-free, fully symmetric LSH, that does not require special pre-scaling, and which we call simple-lsh.\nFor x ∈ Rd, ‖x‖2 ≤ 1, define P (x) ∈ Rd+1 as follows:\nP (x) = [ x; √\n1− ‖x‖22 ]\n(6)\nClearly, with this definition for any x with ‖x‖2 ≤ 1 we have ‖P (x)‖2 = 1. Moreover, for any query q, since ‖q‖2 = 1, we have:\nP (q)⊤P (x) = [ q; 0 ]⊤[ x; √\n1− ‖x‖22 ] = q⊤x (7)\nNow, to define the hash simple-lsh, take a spherical random vector a ∼ N (0, I) (with each component an i.i.d. standard normal), and consider the following random mapping into the binary alphabet Γ = {±1}:\nha(x) = sign(a ⊤P (x)). (8)\nTheorem 2. For any 0 < S < 1 and 0 < c < 1, there exists p1 > p2 such that simple-lsh given in (8) is a (S, cS, p1, p2)-LSH for inner product similarity over X = {x|‖x‖2 ≤ 1} and Y = {q|‖q‖2 = 1} (under Definitions 2). Furthermore,\nρ = log p1 log p2 =\nlog\n(\n1− cos−1(S)\nπ\n)\nlog\n(\n1− cos −1(cS) π\n) .\nProof. For any x ∈ X and q ∈ Y we have [5]:\nP[ha(P (q)) = ha(P (x))] = 1− θ(P (q), P (x))\nπ\n= 1− cos −1(q⊤x)\nπ\nTherefore:\n– if q⊤x ≥ S, then P [ ha(P (q)) = ha(P (x)) ] ≥ 1− cos −1(S)\nπ\n– if q⊤x ≤ cS, then P [ ha(P (q)) = ha(P (x)) ] ≤ 1− cos −1(cS)\nπ\nSince for any 0 ≤ x ≤ 1, 1− cos −1(x) π is a monotonically increasing function, this gives us an LSH."
    }, {
      "heading" : "4 Theoretical Comparison",
      "text" : "Earlier we discussed that an LSH with the smallest possible hashing ratio ρ is desirable. For mips-alsh, for each desired threshold S and ratio c, one can optimize over the three parameters m,U and r to find the hash with the best ρ. This optimal ρ guarantee is given by [9]3:\nρ∗mips-alsh(S, c) = min U,r,m\nlogFr ( √ 1 +m/4− 2SU + U2m+1 )\nlogFr ( √ 1 +m/4− 2cSU + (cSU)2m+1 )\n(9)\ns.t. U2 m ≤ 2S(1− c)\nm ≥ 1, 0 < r, 0 < U. This is a non-convex optimization problem, and Shrivastava and Li [9] solve it through a grid search over U, r and m and report ρ∗mips-alsh for several choices of S and c.\nFor L2-lsh the parameters U and r need to be optimized to obtain the minimal ρ ∗ L2-LSH\nfor each choice of S and c. We solve the following optimization by a grid search over U and r:\nρ∗L2-lsh(S, c) = min0<r 0<U\nlogFr (√ 1− 2SU + U2 )\nlogFr ( 1− cSU ) (10)\ns.t. U ≤ 2S(1− c)\nFor simple-lsh however, no parameters need to be tuned, and for each S, c the hashing parameter ρ∗ SIMPLE-ALSH\nis given by Theorem 2. In Figure 1 we compare the optimal hashing parameter ρ∗ for the three methods, for different values of S and c. It is clear that the simple-lsh dominates the other methods. For thresholds S far away from 1 (the typically interesting regime), even though the standard L2-lsh is a valid LSH, mips-alsh indeed yields significantly better hash ratios (though simple-lsh dominates both).\n3 This is a slight tightening of the analysis of Shrivastava and Li—a careful analysis shows that an additional term\nof (cSU)2 m+1 can be added to the denominator expression, compared to the expression of Shrivastava and Li."
    }, {
      "heading" : "5 Empirical Evaluation",
      "text" : "We followed the exact same protocol as Shrivastava and Li [9] comparing mips-alsh to simple-lsh and L2-lsh on two collaborative filtering datasets, Netflix and Movielens 10M.\nFor a given user-item matrix Z, we followed the pureSVD procedure suggested in [2]: we first subtracted the overall average rating from each individual rating and created the matrix Z with these average-subtracted ratings for observed entries and zeros for unobserved entries. We then take a rank-f approximation (top f singular components, f = 150 for Movielens and f = 300 for Netflix) Z ≈ WΣR⊤ = Y and define L = WΣ so that Y = LR⊤. We can think of each row of L as the vector presentation of a user and each row of R as the presentation for an item.\nThe database S consists of all rows Rj of R (corresponding to movies) and we use each row Li of L (corresponding to a user i) as a query. That is, for each user i we would like to find the top T movies, i.e. the T movies with highest 〈Li, Rj〉, for different values of T .\nTo do so, for each hash family, we generate hash codes of length K for all movies and a random selection of 2000 users (queries). For each user, we sort movies in ascending order of hamming distance between the user hash and movie hash, breaking up ties randomly. For each of several values of T we calculate precision-recall curves for recalling the top T movies, averaging the precision-recall values over the 2000 randomly selected users.\nIn Figures 2, 3, we plot precision-recall curves of retrieving top T items by hash code of length K for Netflix and Movielens datasets where T ∈ {1, 5, 10} and K ∈ {64, 128, 256, 512}. For mips-alsh we used m = 3, U = 0.83, r = 2.5, suggested by the authors and used in their empirical evaluation. simple-lsh does not require any parameters. For L2-lsh we use U = 0.2, r = 2, which worked fairly well in all experiments."
    }, {
      "heading" : "6 Conclusion",
      "text" : "Contrary to what is suggested by [9], we showed that an inherently symmetric LSH can be used for MIPS. Our suggested simple-lsh is arguably simpler, symmetric, parameter-free, uses only a binary alphabet, and yields better theoretical and empirical performance compared to mips-alsh."
    } ],
    "references" : [ {
      "title" : "Similarity estimation techniques from rounding algorithms",
      "author" : [ "M.S. Charikar" ],
      "venue" : null,
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2002
    }, {
      "title" : "Performance of recommender algorithms on top-n recommendation tasks",
      "author" : [ "P. Cremonesi", "Y. Koren", "R. Turrin" ],
      "venue" : "In Proceedings of the fourth ACM conference on Recommender systems, ACM p",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2010
    }, {
      "title" : "Locality-sensitive hashing scheme based on p-stable distributions",
      "author" : [ "M. Datar", "N. Immorlica", "P. Indyk", "S.V. Mirrokni" ],
      "venue" : "In Proc. 20th SoCG pp",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2004
    }, {
      "title" : "Similarity search in high dimensions via hashing",
      "author" : [ "A. Gionis", "P. Indyk", "R. Motwani" ],
      "venue" : "VLDB 99,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 1999
    }, {
      "title" : "Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming",
      "author" : [ "M.X. Goemans", "D.P. Williamson" ],
      "venue" : "Journal of the ACM (JACM) 42.6,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 1995
    }, {
      "title" : "Approximate nearest neighbors: towards removing the curse of dimensionality",
      "author" : [ "P. Indyk", "R. Motwani" ],
      "venue" : "STOC pp",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 1998
    }, {
      "title" : "Clustering, hamming embedding, generalized lsh and the max norm",
      "author" : [ "B. Neyshabur", "Y. Makarychev", "N. Srebro" ],
      "venue" : null,
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2014
    }, {
      "title" : "The power of asymmetry in binary hashing",
      "author" : [ "B. Neyshabur", "P. Yadollahpour", "Y. Makarychev", "R. Salakhutdinov", "N. Srebro" ],
      "venue" : null,
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2013
    }, {
      "title" : "Asymmetric lsh (alsh) for sublinear time maximum inner product search (mips)",
      "author" : [ "A. Shrivastava", "P. Li" ],
      "venue" : null,
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2014
    } ],
    "referenceMentions" : [ {
      "referenceID" : 5,
      "context" : "1 Introduction Locality Sensitive Hashing [6] is a popular tool for approximate nearest neighbor search and is also widely used in different settings [1, 3, 4].",
      "startOffset" : 42,
      "endOffset" : 45
    }, {
      "referenceID" : 0,
      "context" : "1 Introduction Locality Sensitive Hashing [6] is a popular tool for approximate nearest neighbor search and is also widely used in different settings [1, 3, 4].",
      "startOffset" : 150,
      "endOffset" : 159
    }, {
      "referenceID" : 2,
      "context" : "1 Introduction Locality Sensitive Hashing [6] is a popular tool for approximate nearest neighbor search and is also widely used in different settings [1, 3, 4].",
      "startOffset" : 150,
      "endOffset" : 159
    }, {
      "referenceID" : 3,
      "context" : "1 Introduction Locality Sensitive Hashing [6] is a popular tool for approximate nearest neighbor search and is also widely used in different settings [1, 3, 4].",
      "startOffset" : 150,
      "endOffset" : 159
    }, {
      "referenceID" : 6,
      "context" : "Recent studies have also explored the power of asymmetry in LSH and binary hashing, where two different mappings are used to approximate similarity [7, 8].",
      "startOffset" : 148,
      "endOffset" : 154
    }, {
      "referenceID" : 7,
      "context" : "Recent studies have also explored the power of asymmetry in LSH and binary hashing, where two different mappings are used to approximate similarity [7, 8].",
      "startOffset" : 148,
      "endOffset" : 154
    }, {
      "referenceID" : 8,
      "context" : "Shrivastava and Li [9] consider the problem of Maximum Inner Product Search (MIPS) where similarity between vectors is given by the unnormalized inner product between them.",
      "startOffset" : 19,
      "endOffset" : 22
    }, {
      "referenceID" : 8,
      "context" : "2 Problem Formulation and Background In Maximum Inner Product Search (MIPS), we are given a “database” of vectors S ⊂ R and a query point q ∈ R and the goal is to find a point p ∈ S that maximizes the inner product q⊤p: p = argmax x∈S q⊤x As in Shrivastava and Li [9], we assume the following without loss of generality: – The query q is normalized: Since given a vector q, the norm ‖q‖2 does not affect the argmax, we can assume ‖q‖2 = 1 always.",
      "startOffset" : 264,
      "endOffset" : 267
    }, {
      "referenceID" : 5,
      "context" : "; 1/2], (1) 1 This is a formalization of the definition given by Shrivastava and Li, which in turn is a modification of the definition of LSH for distance functions [6].",
      "startOffset" : 165,
      "endOffset" : 168
    }, {
      "referenceID" : 2,
      "context" : "We know that for any x, y ∈ R, the collision probability of the hash h2 a,b can be written as [3]:",
      "startOffset" : 94,
      "endOffset" : 97
    }, {
      "referenceID" : 4,
      "context" : "For any x ∈ X and q ∈ Y we have [5]: P[ha(P (q)) = ha(P (x))] = 1− θ(P (q), P (x)) π = 1− cos −1(q⊤x) π Therefore: – if q⊤x ≥ S, then P [",
      "startOffset" : 32,
      "endOffset" : 35
    }, {
      "referenceID" : 8,
      "context" : "This optimal ρ guarantee is given by [9]: ρmips-alsh(S, c) = min U,r,m logFr ( √ 1 +m/4− 2SU + U2m+1 )",
      "startOffset" : 37,
      "endOffset" : 40
    }, {
      "referenceID" : 8,
      "context" : "This is a non-convex optimization problem, and Shrivastava and Li [9] solve it through a grid search over U, r and m and report ρmips-alsh for several choices of S and c.",
      "startOffset" : 66,
      "endOffset" : 69
    }, {
      "referenceID" : 8,
      "context" : "We followed the exact same protocol as Shrivastava and Li [9] comparing mips-alsh to simple-lsh and L2-lsh on two collaborative filtering datasets, Netflix and Movielens 10M.",
      "startOffset" : 58,
      "endOffset" : 61
    }, {
      "referenceID" : 1,
      "context" : "For a given user-item matrix Z, we followed the pureSVD procedure suggested in [2]: we first subtracted the overall average rating from each individual rating and created the matrix Z with these average-subtracted ratings for observed entries and zeros for unobserved entries.",
      "startOffset" : 79,
      "endOffset" : 82
    }, {
      "referenceID" : 8,
      "context" : "5 as suggested by [9] and for L2-lsh, we fix U = 0.",
      "startOffset" : 18,
      "endOffset" : 21
    }, {
      "referenceID" : 8,
      "context" : "6 Conclusion Contrary to what is suggested by [9], we showed that an inherently symmetric LSH can be used for MIPS.",
      "startOffset" : 46,
      "endOffset" : 49
    }, {
      "referenceID" : 8,
      "context" : "5 as suggested by [9] and for L2-lsh, we fix U = 0.",
      "startOffset" : 18,
      "endOffset" : 21
    } ],
    "year" : 2017,
    "abstractText" : "In a recent manuscript (“Asymmetric LSH (ALSH) for Sublinear Time Maximum Inner Product Search (MIPS)”, available on arXiv and to be presented in the upcoming NIPS), Shrivastava and Li argue that there is no symmetric LSH for the problem of Maximum Inner Product Search and propose an asymmetric LSH based on different mappings for query and database points. We show a simple LSH for the problem, using a simple symmetric mapping, with better performance, both theoretically and empirically.",
    "creator" : "LaTeX with hyperref package"
  }
}