{
  "name" : "1410.8864.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Greedy Subspace Clustering",
    "authors" : [ "Dohyung Park", "Constantine Caramanis", "Sujay Sanghavi" ],
    "emails" : [ "dhpark@utexas.edu", "constantine@utexas.edu", "sanghavi@mail.utexas.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Subspace clustering is a classic problem where one is given points in a high-dimensional ambient space and would like to approximate them by a union of lower-dimensional linear subspaces. In particular, each subspace contains a subset of the points. This problem is hard because one needs to jointly find the subspaces, and the points corresponding to each; the data we are given are unlabeled. The unions of subspaces model naturally arises in settings where data from multiple latent phenomena are mixed together and need to be separated. Applications of subspace clustering include motion segmentation [23], face clustering [8], gene expression analysis [10], and system identification [22]. In these applications, data points with the same label (e.g., face images of a person under varying illumination conditions, feature points of a moving rigid object in a video sequence) lie on a low-dimensional subspace, and the mixed dataset can be modeled by unions of subspaces. For detailed description of the applications, we refer the readers to the reviews [10, 20] and references therein.\nThere is now a sizable literature on empirical methods for this particular problem and some statistical analysis as well. Many recently proposed methods, which perform remarkably well and\nar X\niv :1\n41 0.\n88 64\nv1 [\nst at\n.M L\n] 3\n1 O\nhave theoretical guarantees on their performances, can be characterized as involving two steps: (a) finding a “neighborhood” for each data point, and (b) finding the subspaces and/or clustering the points given these neighborhoods. Here, neighbors of a point are other points that the algorithm estimates to lie on the same subspace as the point (and not necessarily just closest in Euclidean distance).\nOur contributions: In this paper we devise new algorithms for each of the two steps above; (a) we develop a new method, Nearest Subspace Neighbor (NSN), to determine a neighborhood set for each point, and (b) a new method, Greedy Subspace Recovery (GSR), to recover subspaces from given neighborhoods. Each of these two methods can be used in conjunction with other methods for the corresponding other step; however, in this paper we focus on two algorithms that use NSN followed by GSR and Spectral clustering, respectively. Our main result is establishing statistical guarantees for exact clustering with general subspace conditions, in the standard models considered in recent analytical literature on subspace clustering. Our condition for exact recovery is weaker than the conditions of other existing algorithms that only guarantee correct neighborhoods1, which do not always lead to correct clustering. We provide numerical results which demonstrate our theory. We also show that for the real-world applications our algorithm performs competitively against those of state-of-the-art algorithms, but the computational cost is much lower than them. Moreover, our algorithms are much simpler to implement."
    }, {
      "heading" : "1.1 Related work",
      "text" : "The problem was first formulated in the data mining community [10]. Most of the related work in this field assumes that an underlying subspace is parallel to some canonical axes. Subspace clustering for unions of arbitrary subspaces is considered mostly in the machine learning and the computer vision communities [20]. Most of the results from those communities are based on empirical justification. They provided algorithms derived from theoretical intuition and showed that they perform empirically well with practical dataset. To name a few, GPCA [21], Spectral curvature clustering (SCC) [2], and many iterative methods [1, 19, 26] show their good empirical performance for subspace clustering. However, they lack theoretical analysis that guarantees exact clustering.\n1By correct neighborhood, we mean that for each point every neighbor point lies on the same subspace.\nAs described above, several algorithms with a common structure are recently proposed with both theoretical guarantees and remarkable empirical performance. Elhamifar and Vidal [4] proposed an algorithm called Sparse Subspace Clustering (SSC), which uses `1-minimization for neighborhood construction. They proved that if the subspaces have no intersection2, SSC always finds a correct neighborhood matrix. Later, Soltanolkotabi and Candes [16] provided a statistical guarantee of the algorithm for subspaces with intersection. Dyer et al. [3] proposed another algorithm called SSC-OMP, which uses Orthogonal Matching Pursuit (OMP) instead of `1-minimization in SSC. Another algorithm called Low-Rank Representation (LRR) which uses nuclear norm minimization is proposed by Liu et al. [14]. Wang et al. [24] proposed an hybrid algorithm, Low-Rank and Sparse Subspace Clustering (LRSSC), which involves both `1-norm and nuclear norm. Heckel and Bölcskei [6] presented Thresholding based Subspace Clustering (TSC), which constructs neighborhoods based on the inner products between data points. All of these algorithms use spectral clustering for the clustering step.\nThe analysis in those papers focuses on neither exact recovery of the subspaces nor exact clustering in general subspace conditions. SSC, SSC-OMP, and LRSSC only guarantee correct neighborhoods which do not always lead to exact clustering. LRR guarantees exact clustering only when the subspaces have no intersections. In this paper, we provide novel algorithms that guarantee exact clustering in general subspace conditions. When we were preparing this manuscript, it is proved that TSC guarantees exact clustering under certain conditions [7], but the conditions are stricter than ours. (See Table 1)"
    }, {
      "heading" : "1.2 Notation",
      "text" : "There is a set of N data points in Rp, denoted by Y = {y1, . . . , yN}. The data points are lying on or near a union of L subspaces D = ∪Li=1Di. Each subspace Di is of dimension di which is smaller than p. For each point yj , wj denotes the index of the nearest subspace. Let Ni denote the number\nof points whose nearest subspace is Di, i.e., Ni = ∑N\nj=1 Iwj=i. Throughout this paper, sets and subspaces are denoted by calligraphic letters. Matrices and key parameters are denoted by letters in upper case, and vectors and scalars are denoted by letters in lower case. We frequently denote the set of n indices by [n] = {1, 2, . . . , n}. As usual, span{·} denotes a subspace spanned by a set of vectors. For example, span{v1, . . . , vn} = {v : v = ∑n i=1 αivi, α1, . . . , αn ∈ R}. ProjUy is defined as the projection of y onto subspace U . That is, ProjUy = arg minu∈U ‖y − u‖2. I{·} denotes the indicator function which is one if the statement is true and zero otherwise. Finally, ⊕ denotes the direct sum."
    }, {
      "heading" : "2 Algorithms",
      "text" : "We propose two algorithms for subspace clustering as follows.\n• NSN+GSR : Run Nearest Subspace Neighbor (NSN) to construct a neighborhood matrix W ∈ {0, 1}N×N , and then run Greedy Subspace Recovery (GSR) for W .\n• NSN+Spectral : Run Nearest Subspace Neighbor (NSN) to construct a neighborhood matrix W ∈ {0, 1}N×N , and then run spectral clustering for Z = W +W>.\n2By no intersection between subspaces, we mean that they share only the null point."
    }, {
      "heading" : "2.1 Nearest Subspace Neighbor (NSN)",
      "text" : "NSN approaches the problem of finding neighbor points most likely to be on the same subspace in a greedy fashion. At first, given a point y without any other knowledge, the one single point that is most likely to be a neighbor of y is the nearest point of the line span{y}. In the following steps, if we have found a few correct neighbor points (lying on the same true subspace) and have no other knowledge about the true subspace and the rest of the points, then the most potentially correct point is the one closest to the subspace spanned by the correct neighbors we have. This motivates us to propose NSN described in the following.\nAlgorithm 1 Nearest Subspace Neighbor (NSN)\nInput: A set of N samples Y = {y1, . . . , yN}, The number of required neighbors K, Maximum subspace dimension kmax. Output: A neighborhood matrix W ∈ {0, 1}N×N yi ← yi/‖yi‖2, ∀i ∈ [N ] . Normalize magnitudes for i = 1, . . . , N do . Run NSN for each data point Ii ← {i} for k = 1, . . . ,K do . Iteratively add the closest point to the current subspace\nif k ≤ kmax then U ← span{yj : j ∈ Ii} end if j∗ ← arg maxj∈[N ]\\Ii ‖ProjUyj‖2 Ii ← Ii ∪ {j∗}\nend for Wij ← Ij∈Ii or yj∈U , ∀j ∈ [N ] . Construct the neighborhood matrix\nend for\nNSN collects K neighbors sequentially for each point. At each step k, a k-dimensional subspace U spanned by the point and its k−1 neighbors is constructed, and the point closest to the subspace is newly collected. After k ≥ kmax, the subspace U constructed at the kmaxth step is used for collecting neighbors. At last, if there are more points lying on U , they are also counted as neighbors. The subspace U can be stored in the form of a matrix U ∈ Rp×dim(U) whose columns form an orthonormal basis of U . Then ‖ProjUyj‖2 can be computed easily because it is equal to ‖U>yj‖2. While a naive implementation requires O(K2pN2) computational cost, this can be reduced to O(KpN2), and the faster implementation is described in Section A.1. We note that this computational cost is much lower than that of the convex optimization based methods (e.g., SSC [4] and LRR [14]) which solve a convex program with N2 variables and pN constraints.\nNSN for subspace clustering shares the same philosophy with Orthogonal Matching Pursuit (OMP) for sparse recovery in the sense that it incrementally picks the point (dictionary element) that is the most likely to be correct, assuming that the algorithms have found the correct ones. In subspace clustering, that point is the one closest to the subspace spanned by the currently selected points, while in sparse recovery it is the one closest to the residual of linear regression by the selected points. In the sparse recovery literature, the performance of OMP is shown to be comparable to that of Basis Pursuit (`1-minimization) both theoretically and empirically [18, 11]. One of the contributions of this work is to show that this high-level intuition is indeed born out, provable, as we show that NSN also performs well in collecting neighbors lying on the same subspace."
    }, {
      "heading" : "2.2 Greedy Subspace Recovery (GSR)",
      "text" : "Suppose that NSN has found correct neighbors for a data point. How can we check if they are indeed correct, that is, lying on the same true subspace? One natural way is to count the number of points close to the subspace spanned by the neighbors. If they span one of the true subspaces, then many other points will be lying on the span. If they do not span any true subspaces, few points will be close to it. This fact motivates us to use a greedy algorithm to recover the subspaces. Using the neighborhood constructed by NSN (or some other algorithm), we recover the L subspaces. If there is a neighborhood set containing only the points on the same subspace for each subspace, the algorithm successfully recovers the unions of the true subspaces exactly.\nAlgorithm 2 Greedy Subspace Recovery (GSR)\nInput: N points Y = {y1, . . . , yN}, A neighborhood matrix W ∈ {0, 1}N×N , Error bound Output: Estimated subspaces D̂ = ∪Ll=1D̂l. Estimated labels ŵ1, . . . , ŵN yi ← yi/‖yi‖2, ∀i ∈ [N ] . Normalize magnitudes Wi ← Top-d{yj : Wij = 1}, ∀i ∈ [N ] . Estimate a subspace using the neighbors for each point I ← [N ] while I 6= ∅ do . Iteratively pick the best subspace estimates\ni∗ ← arg maxi∈I ∑N\nj=1 I{‖ProjWiyj‖2 ≥ 1− } D̂l ← Ŵi∗ I ← I \\ {j : ‖ProjWi∗yj‖2 ≥ 1− }\nend while ŵi ← arg maxl∈[L] ‖ProjD̂lyi‖2, ∀i ∈ [N ] . Label the points using the subspace estimates\nRecall that the matrix W contains the labelings of the points, so that Wij = 1 if point i is assigned to subspace j. Top-d{yj : Wij = 1} denotes the d-dimensional principal subspace of the set of vectors {yj : Wij = 1}. This can be obtained by taking the first d left singular vectors of the matrix whose columns are the vector in the set. If there are only d vectors in the set, Gram-Schmidt orthogonalization will give us the subspace. As in NSN, it is efficient to store a subspace Wi in the form of its orthogonal basis because we can easily compute the norm of a projection onto the subspace.\nTesting a candidate subspace by counting the number of near points has already been considered in the subspace clustering literature. In [25], the authors proposed to run RANdom SAmple Consensus (RANSAC) iteratively. RANSAC randomly selects a few points and checks if there are many other points near the subspace spanned by the collected points. Instead of randomly choosing sample points, GSR receives some candidate subspaces (in the form of sets of points) from NSN (or possibly some other algorithm) and selects subspaces in a greedy way as specified in the algorithm above."
    }, {
      "heading" : "3 Theoretical results",
      "text" : "We analyze our algorithms in two standard noiseless models. The main theorems present sufficient conditions under which the algorithms cluster the points exactly with high probability. For simplicity of analysis, we assume that every subspace is of the same dimension, and the number of data\npoints on each subspace is the same, i.e., d , d1 = · · · = dL, n , N1 = · · · = NL. We assume that d is known to the algorithm. Nonetheless, our analysis can extend to the general case."
    }, {
      "heading" : "3.1 Statistical models",
      "text" : "We consider two models which have been used in the subspace clustering literature:\n• Fully random model: The subspaces are drawn iid uniformly at random, and the points are also iid randomly generated.\n• Semi-random model: The subspaces are arbitrarily determined, but the points are iid randomly generated.\nLet Di ∈ Rp×d, i ∈ [L] be a matrix whose columns form an orthonormal basis of Di. An important measure that we use in the analysis is the affinity between two subspaces, defined as\naff(i, j) , ‖D>i Dj‖F√\nd =\n√∑d k=1 cos\n2 θi,jk d ∈ [0, 1],\nwhere θi,jk is the kth principal angle between Di and Dj . Two subspaces Di and Dj are identical if and only if aff(i, j) = 1. If aff(i, j) = 0, every vector on Di is orthogonal to any vectors on Dj . We also define the maximum affinity as\nmax aff , max i,j∈[L],i 6=j aff(i, j) ∈ [0, 1].\nThere are N = nL points, and there are n points exactly lying on each subspace. We assume that each data point yi is drawn iid uniformly at random from Sp−1 ∩ Dwi where Sp−1 is the unit sphere in Rp. Equivalently,\nyi = Dwixi, xi ∼ Unif(Sd−1), ∀i ∈ [N ].\nAs the points are generated randomly on their corresponding subspaces, there are no points lying on an intersection of two subspaces, almost surely. This implies that with probability one the points are clustered correctly provided that the true subspaces are recovered exactly."
    }, {
      "heading" : "3.2 Main theorems",
      "text" : "The first theorem gives a statistical guarantee for the fully random model.\nTheorem 3.1. Suppose L d-dimensional subspaces and n points on each subspace are generated in the fully random model with n polynomial in d. There are constants C1, C2 > 0 such that if\nn d > C1\n( log ne\ndδ\n)2 , d\np <\nC2 log n\nlog(ndLδ−1) , (1)\nthen with probability at least 1 − 3Lδ1−δ , NSN+GSR 3 clusters the points exactly. Also, there are other constants C ′1, C ′ 2 > 0 such that if (1) with C1 and C2 replaced by C ′ 1 and C ′ 2 holds then NSN+Spectral4 clusters the points exactly with probability at least 1 − 3Lδ1−δ . e is the exponential constant.\n3NSN with K = kmax = d followed by GSR with arbitrarily small . 4NSN with K = kmax = d.\nOur sufficient conditions for exact clustering explain when subspace clustering becomes easy or difficult, and they are consistent with our intuition. For NSN to find correct neighbors, the points on the same subspace should be many enough so that they look like lying on a subspace. This condition is spelled out in the first inequality of (1). We note that the condition holds even when n/d is a constant, i.e., n is linear in d. The second inequality implies that the dimension of the subspaces should not be too high for subspaces to be distinguishable. If d is high, the random subspaces are more likely to be close to each other, and hence they become more difficult to be distinguished. However, as n increases, the points become dense on the subspaces, and hence it becomes easier to identify different subspaces.\nLet us compare our result with the conditions required for success in the fully random model in the existing literature. In [16], it is required for SSC to have correct neighborhoods that n should be superlinear in d when d/p fixed. In [6, 24], the conditions on d/p becomes worse as we have more points. On the other hand, our algorithms are guaranteed exact clustering of the points, and the sufficient condition is order-wise at least as good as the conditions for correct neighborhoods by the existing algorithms (See Table 1). Moreover, exact clustering is guaranteed even when n is linear in d, and d/p fixed.\nFor the semi-random model, we have the following general theorem.\nTheorem 3.2. Suppose L d-dimensional subspaces are arbitrarily chosen, and n points on each subspace are generated in the semi-random model with n polynomial in d. There are constants C1, C2 > 0 such that if\nn d > C1\n( log ne\ndδ\n)2 , max aff < √ C2 log n\nlog(dLδ−1) · log(ndLδ−1) . (2)\nthen with probability at least 1− 3Lδ1−δ , NSN+GSR 5 clusters the points exactly.\nIn the semi-random model, the sufficient condition does not depend on the ambient dimension p. When the affinities between subspaces are fixed, and the points are exactly lying on the subspaces, the difficulty of the problem does not depend on the ambient dimension. It rather depends on max aff, which measures how close the subspaces are. As they become closer to each other, it becomes more difficult to distinguish the subspaces. The second inequality of (2) explains this intuition. The inequality also shows that if we have more data points, the problem becomes easier to identify different subspaces.\nCompared with other algorithms, NSN+GSR is guaranteed exact clustering, and more importantly, the condition on max aff improves as n grows. This remark is consistent with the practical performance of the algorithm which improves as the number of data points increases, while the existing guarantees of other algorithms are not. In [16], correct neighborhoods in SSC are guaranteed if max aff = O( √ log(n/d)/ log(nL)). In [6], exact clustering of TSC is guaranteed if max aff = O(1/ log(nL)). However, these algorithms perform empirically better as the number of data points increases."
    }, {
      "heading" : "4 Experimental results",
      "text" : "In this section, we empirically compare our algorithms with the existing algorithms in terms of clustering performance and computational time (on a single desktop). For NSN, we used the fast\n5NSN with K = d− 1 and kmax = d2 log de followed by GSR with arbitrarily small .\nimplementation described in Section A.1. The compared algorithms are K-means, K-flats6, SSC, LRR, SCC, TSC7, and SSC-OMP8. The numbers of replicates in K-means, K-flats, and the Kmeans used in the spectral clustering are all fixed to 10. The algorithms are compared in terms of Clustering error (CE) and Neighborhood selection error (NSE), defined as\n(CE) = min π∈ΠL\n1\nN N∑ i=1 I(wi 6= π(ŵi)), (NSE) = 1 N N∑ i=1 I(∃j : Wij 6= 0, wi 6= wj)\nwhere ΠL is the permutation space of [L]. CE is the proportion of incorrectly labeled data points. Since clustering is invariant up to permutation of label indices, the error is equal to the minimum disagreement over the permutation of label indices. NSE measures the proportion of the points which do not have all correct neighbors.9"
    }, {
      "heading" : "4.1 Synthetic data",
      "text" : "We compare the performances on synthetic data generated from the fully random model. In Rp, five d-dimensional subspaces are generated uniformly at random. Then for each subspace n unitnorm points are generated iid uniformly at random on the subspace. To see the agreement with the theoretical result, we ran the algorithms under fixed d/p and varied n and d. We set d/p = 3/5 so that each pair of subspaces has intersection. Figures 1 and 2 show CE and NSE, respectively. Each error value is averaged over 100 trials. Figure 1 indicates that our algorithm clusters the data points better than the other algorithms. As predicted in the theorems, the clustering performance improves as the number of points increases. However, it also improves as the dimension of subspaces\n6K-flats is similar to K-means. At each iteration, it computes top-d principal subspaces of the points with the same label, and then labels every point based on its distances to those subspaces.\n7The MATLAB codes for SSC, LRR, SCC, and TSC are obtained from http://www.cis.jhu.edu/~ehsan/code. htm, https://sites.google.com/site/guangcanliu, and http://www.math.duke.edu/~glchen/scc.html, http:// www.nari.ee.ethz.ch/commth/research/downloads/sc.html, respectively.\n8For each data point, OMP constructs a neighborhood for each point by regressing the point on the other points up to 10−4 accuracy.\n9For the neighborhood matrices from SSC, LRR, and SSC-OMP, the d points with the maximum weights are regarded as neighbors for each point. For TSC, the d nearest neighbors are collected for each point.\ngrows in contrast to the theoretical analysis. We believe that this is because our analysis on GSR is not tight. In Figure 2, we can see that more data points obtain correct neighbors as n increases or d decreases, which conforms the theoretical analysis.\nWe also compare the computational time of the neighborhood selection algorithms for different numbers of subspaces and data points. As shown in Figure 3, the greedy algorithms (OMP, Thresholding, and NSN) are significantly more scalable than the convex optimization based algorithms (`1-minimization and nuclear norm minimization)."
    }, {
      "heading" : "4.2 Real-world data : motion segmentation and face clustering",
      "text" : "We compare our algorithm with the existing ones in the applications of motion segmentation and face clustering. For the motion segmentation, we used Hopkins155 dataset [17], which contains 155 video sequences of 2 or 3 motions. For the face clustering, we used Extended Yale B dataset with cropped images from [5, 13]. The dataset contains 64 images for each of 38 individuals in frontal view and different illumination conditions. To compare with the existing algorithms, we used the set of 48 × 42 resized raw images provided by the authors of [4]. The parameters of the existing\nalgorithms were set as provided in their source codes.10 Tables 2 and 3 show CE and average computational time.11 We can see that NSN+Spectral performs competitively with the methods with the lowest errors, but much faster. Compared to the other greedy neighborhood construction based algorithms, SSC-OMP and TSC, our algorithm performs significantly better.\n10As SSC-OMP and TSC do not have proposed number of parameters for motion segmentation, we found the numbers minimizing the mean CE. The numbers are given in the table.\n11The LRR code provided by the author did not perform properly with the face clustering dataset that we used. We did not run NSN+GSR since the data points are not well distributed in its corresponding subspaces."
    }, {
      "heading" : "A Discussion on implementation issues",
      "text" : ""
    }, {
      "heading" : "A.1 A faster implementation for NSN",
      "text" : "At each step of NSN, the algorithm computes the projections of all points onto a subspace and find one with the largest norm. A naive implementation of the algorithm requires O(pK2N2) time complexity.\nIn fact, we can reduce the complexity to O(pKN2). Instead of finding the maximum norm of the projections, we can find the maximum squared norm of the projections. Let Uk be the subspace U at step k. For any data point y, we have\n‖ProjUky‖ 2 2 = ‖ProjUk−1y‖ 2 2 + |u>k y|2\nwhere uk is the new orthogonal axis added from Uk−1 to make Uk. That is, Uk−1 ⊥ uk and Uk = Uk−1 ⊕ uk. As ‖ProjUk−1y‖ 2 2 is already computed in the (k − 1)’th step, we do not need to compute it again at step k. Based on this fact, we have a faster implementation as described in the following. Note that Pj at the kth step is equal to ‖ProjUkyj‖ 2 2 in the original NSN algorithm.\nAlgorithm 3 Fast Nearest Subspace Neighbor (F-NSN)\nInput: A set of N samples Y = {y1, . . . , yN}, The number of required neighbors K, Maximum subspace dimension kmax. Output: A neighborhood matrix W ∈ {0, 1}N×N yi ← yi/‖yi‖2, ∀i ∈ [N ] for i = 1, . . . , N do Ii ← {i}, u1 ← yi Pj ← 0,∀j ∈ [N ] for k = 1, . . . ,K do\nif k ≤ kmax then Pj ← Pj + ‖u>k yj‖2, ∀j ∈ [N ] end if j∗ ← arg maxj∈[N ],j /∈Ii Pj Ii ← Ii ∪ {j∗} if k < kmax then\nuk+1 ← yj∗−\n∑k l=1(u > l yj∗ )ul\n‖yj∗− ∑k l=1(u > l yj∗ )ul‖2\nend if end for Wij ← Ij∈Ii or Pj=1, ∀j ∈ [N ]\nend for"
    }, {
      "heading" : "A.2 Estimation of the number of clusters",
      "text" : "When L is unknown, it can be estimated at the clustering step. For Spectral clustering, a wellknown approach to estimate L is to find a knee point in the singular values of the neighborhood matrix. It is the point where the difference between two consecutive singular values are the largest. For GSR, we do not need to estimate the number of clusters a priori. Once the algorithms finishes, the number of the resulting groups will be our estimate of L."
    }, {
      "heading" : "A.3 Parameter setting",
      "text" : "The choices of K and kmax depend on the dimension of the subspaces d. If data points are lying exactly on the model subspaces, K = kmax = d is enough for GSR to recover a subspace. In practical situations where the points are near the subspaces, it is better to set K to be larger than d. kmax can also be larger than d because the kmax−d additional dimensions, which may be induced from the noise, do no intersect with the other subspaces in practice. For Extended Yale B dataset and Hopkins155 dataset, we found that NSN+Spectral performs well if K is set to be around 2d."
    }, {
      "heading" : "B Proofs",
      "text" : ""
    }, {
      "heading" : "B.1 Proof outline",
      "text" : "We describe the first few high-level steps in the proofs of our main theorems. Exact clustering of our algorithms depends on whether NSN can find all correct neighbors for the data points so that the following algorithm (GSR or Spectral clustering) can cluster the points exactly. For NSN+GSR, exact clustering is guaranteed when there is a point on each subspace that have all correct neighbors which are at least d− 1. For NSN+Spectral, exact clustering is guaranteed when each data point has only the n − 1 other points on the same subspace as neighbors. In the following, we explain why these are true.\nStep 1-1: Exact clustering condition for GSR\nThe two statistical models have a property that for any d-dimensional subspace in Rp other than the true subspaces D1, . . . ,DL the probability of any points lying on the subspace is zero. Hence, we claim the following.\nFact B.1 (Best d-dimensional fit). With probability one, the true subspaces D1, . . . ,DL are the L subspaces containing the most points among the set of all possible d-dimensional subspaces.\nThen it suffices for each subspace to have one point whose neighbors are d− 1 all correct points on the same subspace. This is because the subspace spanned by those d points is almost surely identical to the true subspace they are lying on, and that subspace will be picked by GSR.\nFact B.2. If NSN with K ≥ d−1 finds all correct neighbors for at least one point on each subspace, GSR recovers all the true subspaces and clusters the data points exactly with probability one.\nIn the following steps, we consider one data point for each subspace. We show that NSN with K = kmax = d finds all correct neighbors for the point with probability at least 1− 3δ1−δ . Then the union bound and Fact B.2 establish exact clustering with probability at least 1− 3Lδ1−δ .\nStep 1-2: Exact clustering condition for spectral clustering\nIt is difficult to analyze spectral clustering for the resulting neighborhood matrix of NSN. A trivial case for a neighborhood matrix to result in exact clustering is when the points on the same subspace form a single fully connected component. If NSN with K = kmax = d finds all correct neighbors for every data point, the subspace U at the last step (k = K) is almost surely identical to the true subspace that the points lie on. Hence, the resulting neighborhood matrix W form L fully connected components each of which contains all of the points on the same subspace.\nIn the rest of the proof, we show that if (1) holds, NSN finds all correct neighbors for a fixed point with probability 1− 3δ1−δ . Let us assume that this is true. If (1) with C1 and C2 replaced by C1 4 and C2 2 holds, we have\nn > C1d\n( log ne\nd(δ/n)\n)2 , d\np <\nC2 log n\nlog(ndL(δ/n)−1) .\nThen it follows from the union bound that NSN finds all correct neighbors for all of the n points on each subspace with probability at least 1 − 3Lδ1−δ , and hence we obtain Wij = Iwi=wj for every (i, j) ∈ [N ]2. Exact clustering is guaranteed.\nStep 2: Success condition for NSN\nNow the only proposition that we need to prove is that for each subspace Di NSN finds all correct neighbors for a data point (which is a uniformly random unit vector on the subspace) with probability at least 1− 3δ1−δ . As our analysis is independent of the subspaces, we only consider D1. Without loss of generality, we assume that y1 lies on D1 (w1 = 1) and focus on this data point.\nWhen NSN finds neighbors of y1, the algorithm constructs kmax subspaces incrementally. At each step k = 1, . . . ,K, if the largest projection onto U of the uncollected points on the same true subspace D1 is greater than the largest projection among the points on different subspaces, then NSN collects a correct neighbor. In a mathematical expression, we want to satisfy\nmax j:wj=1,j /∈I1 ‖ProjUyj‖2 > max j:wj 6=1,j /∈I1 ‖ProjUyj‖2 (3)\nfor each step of k = 1, . . . ,K. The rest of the proof is to show (1) and (2) lead to (3) with probability 1 − 3δ1−δ in their corresponding models. It is difficult to prove (3) itself because the subspaces, the data points, and the index set I1 are all dependent of each other. Instead, we introduce an Oracle algorithm whose success is equivalent to the success of NSN, but the analysis is easier. Then the Oracle algorithm is analyzed using stochastic ordering, bounds on order statistics of random projections, and the measure concentration inequalities for random subspaces. The rest of the proof is provided in Sections B.3 and B.4."
    }, {
      "heading" : "B.2 Preliminary lemmas",
      "text" : "Before we step into the technical parts of the proof, we introduce the main ingredients which will be used. The following lemma is about upper and lower bounds on the order statistics for the projections of iid uniformly random unit vectors.\nLemma B.3. Let x1, . . . , xn be drawn iid uniformly at random from the d-dimensional unit ball Sd−1. Let z(n−m+1) denote the m’th largest value of {zi , ‖Axi‖2, 1 ≤ i ≤ n} where A ∈ Rk×d.\na. Suppose that the rows of A are orthonormal to each other. For any α ∈ (0, 1), there exists a constant C > 0 such that for n,m, d, k ∈ N where\nn−m+ 1 ≥ Cm ( log ne\nmδ\n)2 (4)\nwe have\nz2(n−m+1) > k\nd +\n1 d ·min\n{ 2 log ( n−m+ 1\nCm ( log nemδ\n)2 ) , α √ d− k } (5)\nwith probability at least 1− δm.\nb. For any k × d matrix A,\nz(n−m+1) < ‖A‖F√ d + ‖A‖2√ d · (√ 2π + √ 2 log ne mδ ) (6)\nwith probability at least 1− δm.\nLemma B.3b can be proved by using the measure concentration inequalities [12]. Not only can they provide inequalities for random unit vectors, they also give us inequalities for random subspaces.\nLemma B.4. Let the columns of X ∈ Rd×k be the orthonormal basis of a k-dimensional random subspace drawn uniformly at random in d-dimensional space.\na. For any matrix A ∈ Rp×d. E[‖AX‖2F ] = k\nd ‖A‖2F\nb. [15, 12] If ‖A‖2 is bounded, then we have\nPr { ‖AX‖F > √ k\nd ‖A‖F + ‖A‖2 ·\n(√ 8π\nd− 1 + t\n)} ≤ e− (d−1)t2 8 ."
    }, {
      "heading" : "B.3 Proof of Theorem 3.2",
      "text" : "Following Section B.1, we show in this section that if (2) holds then NSN finds all correct neighbors for y1 (which is assumed to be on D1) with probability at least 1− 3δ1−δ .\nStep 3: NSN Oracle algorithm\nConsider the Oracle algorithm in the following. Unlike NSN, this algorithm knows the true label of each data point. It picks the point closest to the current subspace among the points with the same label. Since we assume w1 = 1, the Oracle algorithm for y1 picks a point in {yj : wj = 1} at every step.\nNote that the Oracle algorithm returns failure if and only if the original algorithm picks an incorrect neighbor for y1. The reason is as follows. Suppose that NSN for y1 picks the first incorrect point at step k. By the step k − 1, correct points have been chosen because they are the nearest points for the subspaces in the corresponding steps. The Oracle algorithm will also pick those points because they are the nearest points among the correct points. Hence U ≡ Vk. At step k, NSN picks an incorrect point as it is the closest to U . The Oracle algorithm will declare failure because that incorrect point is closer than the closest point among the correct points. In\nAlgorithm 4 NSN Oracle algorithm for y1 (assuming w1 = 1) Input: A set of N samples Y = {y1, . . . , yN}, The number of required neighbors K = d − 1, Maximum subspace dimension kmax = d2 log de I(1)1 ← {1} for k = 1, . . . ,K do\nif k ≤ kmax then Vk ← span{yj : j ∈ I (k) 1 }\nj∗k ← arg maxj∈[N ]:wj=1,j /∈I(k)1 ‖ProjVkyj‖2\nelse j∗k ← arg maxj∈[N ]:wj=1,j /∈I(k)1\n‖ProjVkmaxyj‖2 end if if max\nj∈[N ]:wj=1,j /∈I (k) i ‖ProjVkyj‖2 ≤ maxj∈[N ]:wj 6=1 ‖ProjVky‖2 then Return FAILURE\nend if I(k+1)1 ← I (k) 1 ∪ {j∗k}\nend for Return SUCCESS\nthe same manner, we see that NSN fails if the Oracle NSN fails. Therefore, we can instead analyze the success of the Oracle algorithm. The success condition is written as\n‖ProjVkyj∗k‖2 > maxj∈[N ]:wj 6=1 ‖ProjVky‖2, ∀k = 1, . . . , kmax,\n‖ProjVkmaxyj∗k‖2 > maxj∈[N ]:wj 6=1 ‖ProjVkmaxy‖2, ∀k = kmax + 1, . . . ,K. (7)\nNote that Vk’s are independent of the points {yj : j ∈ [N ], wj 6= 1}. We will use this fact in the following steps.\nStep 4: Lower bounds on the projection of correct points (the LHS of (7))\nLet Vk ∈ Rd×k be such that the columns of D1Vk form an orthogonal basis of Vk. Such a Vk exists because Vk is a k-dimensional subspace of D1. Then we have\n‖ProjVkyj∗k‖2 = ‖V > k D > 1 D1xj∗k‖2 = ‖V > k xj∗k‖2\nIn this step, we obtain lower bounds on ‖V >k xj∗k‖2 for k ≤ kmax and ‖V > kmax xj∗k‖2 for k > kmax. It is difficult to analyze ‖V >k xj∗k‖2 because Vk and xj∗k are dependent. We instead analyze another random variable that is stochastically dominated by ‖V >k xj∗k‖ 2 2. Then we use a high-probability lower bound on that variable which also lower bounds ‖V >k xj∗k‖ 2 2 with high probability.\nDefine Pk,(m) as the m’th largest norm of the projections of n − 1 iid uniformly random unit vector on Sd−1 onto a k-dimensional subspace. Since the distribution of the random unit vector is isotropic, the distribution of Pk,(m) is identical for any k-dimensional subspaces independent of the random unit vectors. We have the following key lemma.\nLemma B.5. ‖V >k xj∗k‖2 stochastically dominates Pk,(k), i.e.,\nPr{‖V >k xj∗k‖2 ≥ t} ≥ Pr{Pk,(k) ≥ t}\nfor any t ≥ 0. Moreover, Pk,(k) ≥ Pk̂,(k) for any k̂ ≤ k.\nThe proof of the lemma is provided in Appendix B.5. Now we can use the lower bound on Pk,(k) given in Lemma B.3a to bound ‖V >k xj∗k‖2. Let us pick α and C for which the lemma holds. The first inequality of (2) with C1 = C + 1 leads to n− d > Cd ( log nedδ )2 , and also\nn− k > Ck ( log ne\nkδ\n)2 , ∀k = 1, . . . , d− 1. (8)\nHence, it follow from Lemma B.3a that for each k = 1, . . . , kmax, we have\n‖V >k xj∗k‖2 ≥ k\nd +\n1 d min\n{ 2 log ( n− k + 1 Ck ( log nekδ )2 ) , α √ d− k }\n≥ k d + 1 d min\n{ 2 log ( n− d\nCd ( log neδ\n)2 ) , α √ d− 2 log d } (9)\nwith probability at least 1− δk. For k > kmax, we want to bound ‖ProjVkmaxyj∗k‖2. We again use Lemma B.5 to obtain the bound. Since the condition for the lemma holds as shown in (8), we have\n‖V >kmaxxj∗k‖2 ≥ 2 log d\nd +\n1 d min\n{ 2 log ( n− k + 1 Ck ( log nekδ )2 ) , α √ d− 2 log d }\n≥ 2 log d d + 1 d min\n{ 2 log ( n− d\nCd ( log neδ\n)2 ) , α √ d− 2 log d } (10)\nwith probability at least 1− δk, for every k = kmax + 1, . . . , d− 1. The union bound gives that (9) and (10) hold for all k = 1, . . . , d − 1 simultaneously with probability at least 1− δ1−δ .\nStep 5: Upper bounds on the projection of incorrect points (the RHS of (7))\nSince we have ‖ProjVkyj‖2 = ‖V > k D > 1 Dwjxj‖2, the RHS of (7) can be written as\nmax j:j∈[N ],wj 6=1\n‖V >k D>1 Dwjxj‖2 (11)\nIn this step, we want to bound (11) for every k = 1, . . . , d−1 by using the concentration inequalities for Vk and xj . Since Vk and xj are independent, the inequality for xj holds for any fixed Vk.\nIt follows from Lemma B.3b and the union bound that with probability at least 1− δ,\nmax j:j∈[N ],wj 6=1\n‖V >k D>1 Dwjxj‖2\n≤ maxl 6=1 ‖V >k D>1 Dl‖F√\nd + maxl 6=1 ‖V >k D>1 Dl‖2√ d ·\n( √\n2π + √ 2 log\nn(L− 1)e δ/d\n)\n≤ maxl 6=1 ‖V >k D>1 Dl‖F√\nd ·\n( 5 + √ 2 log ndL\nδ\n)\nfor all k = 1, . . . , d − 1. The last inequality follows from the fact ‖V >k D>1 Dl‖2 ≤ ‖V >k D>1 Dl‖F . Since ‖V >k D>1 Dwjxj‖2 ≤ ‖V >k D>1 Dwj‖F ≤ maxl 6=1 ‖V >k D>1 Dl‖F for every j such that wj 6= 1, we have\nmax j:j∈[N ],wj 6=1\n‖V >k D>1 Dwjxj‖2 ≤ maxl 6=1 ‖V >k D>1 Dl‖F√\nd ·min\n{ 5 + √ 2 log ndL\nδ , √ d\n} . (12)\nNow let us consider maxl 6=1 ‖V >k D>1 Dl‖F . In our statistical model, the new axis added to Vk at the kth step (uk+1 in Algorithm 3) is chosen uniformly at random from the subspace in D1 orthogonal to Vk. Therefore, Vk is a random matrix drawn uniformly from the d × k Stiefel manifold, and the probability measure is the normalized Haar (rotation-invariant) measure. From Lemma B.4b and the union bound, we obtain that with probability at least 1− δ/dL,\n‖V >k D>1 Dl‖F ≤ √ k\nd ‖D>1 Dl‖F + ‖D>1 Dl‖2 ·\n(√ 8π\nd− 1 +\n√ 8\nd− 1 log\ndL\nδ\n)\n≤ ‖D>1 Dl‖F ·\n(√ k\nd +\n√ 8π\nd− 1 +\n√ 8\nd− 1 log\ndL\nδ\n)\n≤ max aff · √ d ·\n(√ k\nd +\n√ 8π\nd− 1 +\n√ 8\nd− 1 log\ndL\nδ\n) . (13)\nThe union bound gives that with probability at least 1 − δ, maxl 6=1 ‖V >k D>1 Dl‖F is also bounded by (13) for every k = 1, . . . , kmax.\nPutting (13) and (12) together, we obtain\nmax j:j∈[N ],wj 6=1\n‖V >k D>1 Dwjxj‖2\n≤ max aff ·\n(√ k\nd +\n√ 8π\nd− 1 +\n√ 8\nd− 1 log\ndL\nδ\n) ·min { 5 + √ 2 log ndL\nδ , √ d\n} (14)\nfor all k = 1, . . . , d− 1 with probability at least 1− 2δ.\nFinal Step: Proof of the main theorem\nPutting (9), (10), and (14) together, we obtain that if\nmax aff < min 1≤k≤d−1\n√ min{k, 2 log d}+ min { 2 log ( n−d Cd ) − 4 log log neδ , α √ d− 2 log d } (√\nmin{k, 2 log d}+ √\n8πd d−1 + √ 8d d−1 log dL δ ) ·min { 5 + √ 2 log ndLδ , √ d } , (15) then (7) holds, and hence NSN finds all correct neighbors for y1 with probability at least 1− 3δ1−δ . The RHS of (15) is minimized when k ≥ 2 log d, and consequently the condition (15) is equivalent to\nmax aff <\n√ 2 log d+ min { 2 log ( n−d Cd ) − 4 log log neδ , α √ d− 2 log d } (√\n2 log d+ √\n8πd d−1 + √ 8d d−1 log dL δ ) ·min { 5 + √ 2 log ndLδ , √ d } . (16)\nAs n is polynomial in d, there is a constant C3 > 0 such that (RHS of (16)) > C3 √\nlog (n− d)− log log neδ√ log dLδ · log ndL δ\nThis completes the proof."
    }, {
      "heading" : "B.4 Proof of Theorem 3.1",
      "text" : "As we did in Section B.3, we prove in this section that if (1) holds then NSN finds all correct neighbors for y1 with probability at least 1− 3δ1−δ .\nThe only difference between the semi-random model and the fully random model is the statistical dependence between subspaces. We can follow Step 3 in Section B.3 because they do not take any statistical dependence between subspaces into account. We assert that (7) is the success condition also for the fully random model. However, as K = kmax = d, there is no case where k > kmax in this proof.\nNow we provide a new proof of the last three steps for the fully random model.\nStep 4: Lower bounds on the projection of correct points (the LHS of (7))\nWe again use Lemma B.5. For k > d/2, we use the fact that ‖V >k xj∗k‖2 stochastically dominates Pbd/2c,(k). Then it follows from Lemma B.3a that\n‖V >k xj∗k‖2 ≥ k\n2d +\n1 d min\n{ 2 log ( n− k + 1 Ck ( log nekδ )2 ) , α √ d/2 } (17)\nfor all k = 1, . . . , d− 1 simultaneously with probability at least 1− δ1−δ .\nStep 5: Upper bounds on the projection of incorrect points (the RHS of (7))\nWe again use the notion of Xk ∈ Rd×k which is defined in the proof of Theorem 3.2. Since ‖ProjVkyj‖2 = ‖V > k D > 1 yj‖2, the RHS of (7) can be written as\nmax j:j∈[N ],wj 6=1\n‖V >k D>1 yj‖2 (18)\nSince the true subspaces are independent of each other, yj with wj 6= 1 is also independent of D1 and Vk, and its marginal distribution is uniform over Sp−1. It follows from Lemma B.3b that with probability at least 1− δ/d,\n(18) ≤ ‖V >k D>1 ‖F√ p + ‖V >k D>1 ‖2√ p ·\n√ 2 log\nn(L− 1)e δ/d\n≤\n√ k\np +\n√ 2\np log\nndLe\nδ . (19)\nThe last inequality is obtained using the facts ‖D1Vk‖F = √ k and ‖D1Vk‖2 ≤ 1. The union bound provides that (19) holds for every k = 1, . . . , d− 1 with probability at least 1− δ.\nFinal Step: Proof of the main theorem\nNow it suffices to show that (17) > (19) for every k = 1, 2, . . . , d− 1, i.e.,√√√√ k 2d + 1 d min { 2 log ( n− k + 1 Ck ( log nekδ )2 ) , α √ d 2 } > √ k p + √ 2 p log ndLe δ , ∀k = 1, 2, . . . , d− 1.\n(20)\nwhere α,C are the constants described in Lemma B.3a. (20) is equivalent to\nd p < min 1≤k≤d−1\nk/2 + min { 2 log ( n−k+1 Ck ) − 4 log ( log nekδ ) , α √ d/2 }\n(√ k + √ 2 log(ndLδ−1e) )2 . (21) As n is polynomial in d, the numerator can be replaced by O(k + log(n − k + 1)). The RHS is minimized when k = O(log(ndLδ−1)). Hence, the above condition is satisfied if (1) holds."
    }, {
      "heading" : "B.5 Proof of Lemma B.5",
      "text" : "We construct a generative model for two random variables that are equal in distribution to ‖V >k xj∗k‖ 2 2 and P 2k,(k). Then we show that the one corresponding to ‖V > k xj∗k‖ 2 2 is greater than the other corresponding to P 2k,(k). This generative model uses the fact that for any isotropic distributions the marginal distributions of the components along any orthogonal axes are invariant.\nThe generative model is given as follows.\n1. For k = 1, . . . , kmax, repeat 2.\n2. Draw n− 1 iid random variables Y (k)1 , . . . , Y (k) n−1 as follows.\nY (k) j =\n( 1−\nk−1∑ i=1 Y (i) j ) · (X(k)j1 ) 2, X (k) j ∼ Unif(S d−k), ∀j = 1, . . . , n− 1.\nwhere X (k) j1 is the first coordinate of X (k) j . Define\nπk , arg max j:j 6=π1,...,πk−1 ( k∑ i=1 Y (i) j ) .\n3. For k = kmax + 1, . . . , d− 1, repeat\nπk , arg max j:j 6=π1,...,πk−1 ( kmax∑ i=1 Y (i) j ) .\nWe first claim that ( ∑k\ni=1 Y (i) πk ) is equal in distribution to ‖V >k xj∗k‖ 2 2. Consider the following\ntwo sets of random variables.\nAk , ( k∑ i=1 Y (i) j : j ∈ [n− 1], j 6= π1, . . . , πk−1 ) ,\nBk , ( ‖V >k xj‖22 : wj = 1, j 6= 1, j∗1 , . . . , j∗k−1 ) .\nEach set contains (n − k) random variables. We prove by induction that the joint distribution of the random variables of Ak is equal to those of Bk. Then the claim follows because ( ∑k i=1 Y (i) πk ) and ‖V >k xj∗k‖ 2 2 are the maximums of Ak and Bk, respectively.\n• Base case : As V1 = x1, B1 = (‖V >1 xj‖22 : wj = 1, j 6= 1) is the set of squared inner products with x1 for the n − 1 other points. Since the n − 1 points are iid uniformly random unit vectors independent of x1, the squared inner products with x1 are equal in distribution to\nY (1) j = (X (1) j1 ) 2. Therefore, the joint distribution of B1 = (‖V >1 xj‖22 : wj = 1, j 6= 1) is equal to the joint distribution of A1 = (Y (1) j : j = 1, . . . , n− 1).\n• Induction : Assume that the joint distribution of Ak is equal to the joint distribution of Bk. It is sufficient to show that given Ak ≡ Bk the conditional joint distribution of Ak+1 = ( ∑k+1\ni=1 Y (i) j : j ∈ [n − 1], j 6= π1, . . . , πk) is equal to the conditional joint distribution of\nBk+1 = (‖V >k+1xj‖22 : wj = 1, j 6= 1, j∗1 , . . . , j∗k). Define\nvk = xj∗k − VkV > k xj∗k\n‖xj∗k − VkV > k xj∗k‖2\n.\nvk is the unit vector along the new orthogonal axis added on Vk for Vk+1. Since we have\n‖V >k+1xj‖22 = ‖V >k xj‖22 + (v>k xj)2, ∀j : wj = 1,\nThe two terms are independent of each other because Vk ⊥ vk, and xj is isotropically distributed. Hence, we only need to show that ((v>k xj)\n2 : wj = 1, j 6= 1, j∗1 , . . . , j∗k) is equal in distribution to (Y\n(k+1) j : j ∈ [n− 1], j 6= π1, . . . , πk).\nSince vk is a normalized vector on the subspace V⊥k ∩D1, and xj∗k is drawn iid from an isotropic distribution, vk is independent of V\n> k xj∗k . Hence, the marginal distribution of vk given Vk is\nuniform over (V⊥k ∩ D1) ∩ Sp−1. Also, vk is also independent of the points {xj : wj = 1, j 6= 1, j∗1 , . . . , j ∗ k}. Therefore, the random variables (v>k xj)2 for j with wj = 1, j 6= 1, j∗1 , . . . , j∗k are iid equal in distribution to Y (k+1) j for any j.\nSecond, we can see that the k’th maximum of { ∑k\ni=1 Y (i) j : j ∈ [n− 1]} is equal in distribution to P 2k,(k). This is because each ∑k i=1 Y (i) j can be seen as the norm of the projection of a uniformly random unit vector in Rd onto a k-dimensional subspace. Now we are ready to complete the proof. Since (∑k i=1 Y (i) πk ) is the maximum of the n − k\nvariables of Ak, it is greater than or equal to the k’th maximum of (∑k i=1 Y (i) j : j ∈ [n− 1] ) . Therefore, ‖V >k xj∗k‖ 2 2 stochastically dominates P 2 k,(k).\nThe second claim is clear because Vk̂ ⊆ Vk, and hence the norm of the projection onto Vk is always larger than the norm of the projection onto Vk̂."
    }, {
      "heading" : "B.6 Proof of Lemma B.3a",
      "text" : "Let x be an unit vector drawn uniformly at random from Sd−1. Equivalently, x can be drawn from\nx = w\n‖w‖2 , w ∼ N (0, Id×d).\nDefine A⊥ ∈ R(d−k)×d as a matrix with orthonormal rows such that ‖w‖22 = ‖Aw‖22 + ‖A⊥w‖22 for any w ∈ Rd. We have\nPr { ‖Ax‖22 > k\nd (1 + )\n} = Pr { ‖Aw‖22 ‖w‖22 > k d (1 + ) } = Pr { ‖Aw‖22\n‖Aw‖22 + ‖A⊥w‖22 > k d (1 + ) } ≥ Pr { ‖Aw‖22 > k(1 + ), ‖A⊥w‖22 < (d− k)− k\n} = Pr { ‖Aw‖22 > k(1 + ) } · Pr { ‖A⊥w‖22 < (d− k)− k } , (22)\nwhere the last equality follows from that ‖Aw‖2 and ‖A⊥w‖2 are independent of each other because w ∼ N (0, Id×d). Note that ‖Aw‖22 and ‖A⊥w‖22 are Chi-square random variables with degrees of freedom k and d− k, respectively.\nNow we use the following lemma.\nLemma B.6 (Chi-square upper-tail lower-bound). For any k ∈ N and any ≥ 0, we have\nPr{χ2k ≥ k(1 + )} ≥ 1\n3 √ k + 6 exp\n( −k\n2\n) .\nwhere χ2k is the chi-square random variable with k degrees of freedom.\nSuppose 0 ≤ ≤ α (d−k) 1 2\nk for some α ∈ (0, 1). It follows from Lemma B.6 and the central limit theorem that\n(22) ≥ Pr { ‖Aw‖22 > k(1 + ) } · Pr { ‖A⊥w‖22 − (d− k) < −α(d− k) 1 2 } ≥ f(α)\n3k + 6 exp\n( −k\n2 ) where f(α) ∈ (0, 1) is some constant depending only on α.\nThen it follows that\nPr { z2(n−m+1) < k\nd (1 + )\n} = Pr { ∃I ⊂ [n], |I| = n−m+ 1 : z2i < k\nd (1 + ), ∀i ∈ I } ≤ ( n\nm− 1\n) · Pr { z21 < k\nd (1 + ) }n−m+1 ≤ (ne m )m · ( 1− f(α) 3k + 6 exp ( −k 2\n))n−m+1 ≤ exp { m log ne\nm − f(α) · (n−m+ 1) 3k + 6 exp\n( −k\n2\n)} (23)\nwhere we use the facts ( n m ) ≤ ( ne m )m and 1 + x ≤ ex,∀x.\nSet C = 6f(α) , and choose such that\n= 1\nk min\n{ 2 log ( n−m+ 1\nCm ( log nemδ\n)2 ) , α √ d− k } .\nThis is valid because 0 ≤ ≤ α (d−k) 1 2\nk . Then we obtain\n(23) ≤ exp m log ne m − f(α) · (n−m+ 1) 6 log ( n−m+1\nCm(log nemδ ) 2\n) + 6 · Cm\n( log nemδ )2 n−m+ 1  = exp\nm log nem − 6 log nemδ6(1 + log (f(α)6 · n−m+1m · (log nemδ )−2)) ·m log ne mδ  ≤ exp { m log ne\nm −\n6(1 + log nm)\n6(1 + log f(α)6 + log n m) m log\nne\nmδ } ≤ exp { m log ne\nm −m log ne mδ } ≤ δm.\nThis completes the proof."
    }, {
      "heading" : "B.7 Proof of Lemma B.3b",
      "text" : "We use a special case of Levy’s lemma for this proof.\nLemma B.7 ([12]). For x ∼ Unif(Sd−1),\nPr{‖Ax‖2 > m‖Ax‖2 + t} ≤ exp ( − dt 2\n2‖A‖22\n) ,\nPr{‖Ax‖2 < m‖Ax‖2 − t} ≤ exp ( − dt 2\n2‖A‖22\n) .\nfor any matrix A ∈ Rp×d and t > 0. m‖Ax‖2 is the median of ‖Ax‖2.\nIt follows from the lemma that |E‖Ax‖2 −m‖Ax‖2| ≤ E [|‖Ax‖2 −m‖Ax‖2|] ≤ ∫ ∞\n0 2e − dt\n2\n2‖A‖22 dt =\n√ 2π\nd ‖A‖2.\nThen we have\nPr { ‖Axi‖2 > √ ‖A‖2F d + √ 2π d ‖A‖2 + t } = Pr { ‖Axi‖2 > √ E‖Axi‖22 + √ 2π d ‖A‖2 + t }\n≤ Pr { ‖Axi‖2 > E‖Axi‖2 + √ 2π\nd ‖A‖2 + t } ≤ Pr {‖Axi‖2 > m‖Axi‖2 + t}\n≤ exp ( − dt 2\n2‖A‖22\n) .\nIt follows that\nPr { z(n−m+1) > √ ‖A‖2F d + √ 2π d ‖A‖2 + t }\n≤ Pr { ∃I ⊂ [n], |I| = m : ‖Axi‖2 > √ ‖A‖2F d + √ 2π d ‖A‖2 + t,∀i ∈ I }\n≤ ( n\nm\n) · Pr { ‖Ax1‖2 > √ ‖A‖2F d + √ 2π d ‖A‖2 + t }m ≤ (ne m )m · exp ( − mdt 2\n2‖A‖22 ) = exp { m log ne\nm − mdt\n2\n2‖A‖22\n} .\nReplacing t with √ 2‖A‖22 d log ne mδ , we obtain the desired result."
    }, {
      "heading" : "B.8 Proof of Lemma B.4a",
      "text" : "Let A = UΣV > be the singular value decomposition of A. Then we have E[‖AX‖2F ] = E[‖UΣV >X‖2F ] = E[‖ΣX‖2F ] = min(p,d)∑ i=1 σ2i ·  k∑ j=1 E[X2ij ]  = min(p,d)∑ i=1 σ2i · k d = k d ‖A‖2F .\nwhere the second last equality follows from that Xij is a coordinate of a uniformly random unit vector, and thus\nE[X2ij ] = 1\nd , ∀i, j."
    }, {
      "heading" : "B.9 Proof of Lemma B.4b",
      "text" : "Consider the Stiefel manifold Vk(Rd) equipped with the Euclidean metric. We see that X is drawn from Vk(Rd) with the normalized Harr probability measure. We have\n‖AX‖F − ‖AY ‖F ≤ ‖AX −AY ‖F = ‖A(X − Y )‖F ≤ ‖A‖2‖X − Y ‖F\nfor any X,Y ∈ Rd×k. Since ‖A‖2 ≤ 1, ‖AX‖F is a 1-Lipschitz function of X. Then it follows from [15, 12] that\nPr{‖AX‖F > m‖AX‖F + t} ≤ e− (d−1)t2 8 ,\nwhere m‖AX‖F is the median of ‖AX‖F . Also, we have\nPr{|‖AX‖F −m‖AX‖F | > t} ≤ 2e− (d−1)t2 8 ,\nand then it follows that |E‖AX‖F −m‖AX‖F | ≤ E [|‖AX‖F −m‖AX‖F |] ≤ ∫ ∞\n0 2e−\n(d−1)t2 8 dt =\n√ 8π\nd− 1 .\nIt follows from Jensen’s inequality and Lemma B.4a that\nE‖AX‖F ≤ √ E‖AX‖2F = √ k\nd ‖A‖F\nPutting the above inequalities together using the triangle inequality, we obtain the desired result."
    }, {
      "heading" : "B.10 Proof of Lemma B.6",
      "text" : "For k ≥ 2, it follows from [9, Proposition 3.1] that\nPr{χ2k ≥ k(1 + )} ≥ 1− e−2\n2\nk(1 + )\nk + 2 √ k exp\n( −1\n2 (k − (k − 2) log(1 + ) + log k) ) ≥ 1\n3 √ k + 6 exp\n( −k\n2 ( − log(1 + )) ) ≥ 1\n3 √ k + 6 exp\n( −k\n2\n) .\nFor k = 1, we can see numerically that the inequality holds."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2014,
    "abstractText" : "<lb>We consider the problem of subspace clustering: given points that lie on or near the union of<lb>many low-dimensional linear subspaces, recover the subspaces. To this end, one first identifies<lb>sets of points close to the same subspace and uses the sets to estimate the subspaces. As the<lb>geometric structure of the clusters (linear subspaces) forbids proper performance of general<lb>distance based approaches such as K-means, many model-specific methods have been proposed.<lb>In this paper, we provide new simple and efficient algorithms for this problem. Our statistical<lb>analysis shows that the algorithms are guaranteed exact (perfect) clustering performance under<lb>certain conditions on the number of points and the affinity between subspaces. These conditions<lb>are weaker than those considered in the standard statistical literature. Experimental results on<lb>synthetic data generated from the standard unions of subspaces model demonstrate our theory.<lb>We also show that our algorithm performs competitively against state-of-the-art algorithms on<lb>real-world applications such as motion segmentation and face clustering, with much simpler<lb>implementation and lower computational cost.",
    "creator" : "LaTeX with hyperref package"
  }
}