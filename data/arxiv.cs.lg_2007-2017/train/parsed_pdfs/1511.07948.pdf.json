{
  "name" : "1511.07948.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Learning Halfspaces and Neural Networks with Random Initialization",
    "authors" : [ "Yuchen Zhang", "Jason D. Lee", "Martin J. Wainwright", "Michael I. Jordan" ],
    "emails" : [ "yuczhang@eecs.berkeley.edu", "jasondlee88@eecs.berkeley.edu", "wainwrig@eecs.berkeley.edu", "jordan@eecs.berkeley.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "The learning of a halfspace is the core problem solved by many machine learning methods, including the Perceptron (Rosenblatt, 1958), the Support Vector Machine (Vapnik, 1998) and AdaBoost (Freund and Schapire, 1997). More formally, for a given input space X ⊂ Rd, a halfspace is defined by a linear mapping f(x) = 〈w, x〉 from X to the real line. The sign of the function value f(x) determines if x is located on the positive side or the negative side of the halfspace. A labeled data point consists of a pair (x, y) ∈ X × {−1, 1}, and given n such pairs {(xi, yi)}ni=1, the empirical prediction error is given by\n`(f) := 1\nn n∑ i=1 I[−yif(xi) ≥ 0]. (1)\nThe loss function in equation (1) is also called the zero-one loss. In agnostic learning, there is no hyperplane which perfectly separates the data, in which case the goal is to find a mapping f that achieves a small zero-one loss. The method of choosing a function f based on minimizing the criterion (1) is known as empirical risk minimization (ERM).\nIt is known that finding a halfspace that approximately minimizes the zero-one loss is NP-hard. In particular, Guruswami and Raghavendra (2009) show that, for any ∈ (0, 1/2], given a set of\nar X\niv :1\n51 1.\n07 94\n8v 1\n[ cs\n.L G\n] 2\n5 N\nov 2\npairs such that the optimal zero-one loss is bounded by , it is NP-hard to find a halfspace whose zero-one loss is bounded by 1/2− . Many practical machine learning algorithms minimize convex surrogates of the zero-one loss, but the halfspaces obtained through the convex surrogate are not necessarily optimal. In fact, the result of Guruswami and Raghavendra (2009) shows that the approximation ratio of such procedures could be arbitrarily large.\nIn this paper, we study optimization problems of the form\n`(f) := 1\nn n∑ i=1 h(−yif(xi)), (2)\nwhere the function h : R → R is L-Lipschitz continuous for some L < +∞, but is otherwise arbitrary (and so can be nonconvex). This family does not include the zero-one-loss (since it is not Lipschitz), but does include functions that can be used to approximate it to arbitrary accuracy with growing L. For instance, the piecewise-linear function:\nh(x) :=  0 x ≤ − 12L , 1 x ≥ 12L , Lx+ 1/2 otherwise,\n(3)\nis L-Lipschitz, and converges to the step function as the parameter L increases to infinity. Shalev-Shwartz et al. (2011) study the problem of minimizing the objective (2) with function h defined by (3), and show that under a certain cryptographic assumption, there is no poly(L)-time algorithm for (approximate) minimization. Thus, it is reasonable to assume that the Lipschitz parameter L is a constant that does not grow with the dimension d or sample size n. Moreover, when f is a linear mapping, scaling the input vector x or scaling the weight vector w is equivalent to scaling the Lipschitz constant. Thus, we assume without loss of generality that the norms of x and w are bounded by one."
    }, {
      "heading" : "1.1 Our contributions",
      "text" : "The first contribution of this paper is to present two poly(n, d)-time methods—namely, Algorithm 1 and Algorithm 2—for minimizing the cost function (2) for an arbitrary L-Lipschitz function h. We prove that for any given tolerance > 0, these algorithms achieve an -excess risk by running multiple rounds of random initialization followed by a constant number of optimization rounds (e.g., using an algorithm such as stochastic gradient descent). The first algorithm is based on choosing the initial vector uniformly at random from the Euclidean sphere; despite the simplicity of this scheme, it still has non-trivial guarantees. The second algorithm makes use a better initialization obtained by solving a least-squares problem, thereby leading to a stronger theoretical guarantee. Random initialization is a widely used heuristic in non-convex ERM; our analysis supports this usage but suggests that a careful theoretical treatment of the initialization step is necessary.\nOur algorithms for learning halfspaces have running time that grows polynomially in the pair (n, d), as well as a term proportional to exp((L/ 2) log(L/ )). Our next contribution is to show that under a standard complexity-theoretic assumption—namely, that RP 6= NP—this exponential dependence on L/ cannot be avoided. More precisely, letting h denote the piecewise linear function from equation (3) with L = 1, Proposition 1 shows that there is no algorithm achieving arbitrary excess risk > 0 in poly(n, d, 1/ ) time when RP 6= NP. Thus, the random initialization scheme is unlikely to be substantially improved.\nWe then extend our approach to the learning of multi-layer neural networks, with a detailed analysis of the family of m-layer sigmoid-activated neural networks, under the assumption that `1-norm of the incoming weights of any neuron is assumed to be bounded by a constant B. We specify a method (Algorithm 3) for training networks over this family, and in Theorem 3, we prove that its loss is at most an additive term of worse than that of the best neural network. The time complexity of the algorithm scales as poly(n, d, Cm,B,1/ ), where the constant Cm,B,1/ does not depends on the input dimension or the data size, but may depend exponentially on the triplet (m,B, 1/ ).\nDue to the exponential dependence on 1/ , this agnostic learning algorithm is too expensive to achieve a diminishing excess risk for a general data set. However, by analyzing data sets that are separable by some neural network with constant margin γ > 0, we obtain a stronger achievability result. In particular, we show in Theorem 4 that there is an efficient algorithm that correctly classifies all training points with margin Ω(γ) in polynomial time. As a consequence, the algorithm learns a neural network with generalization error bounded by using poly(d, 1/ ) training points and in poly(d, 1/ ) time. This so-called BoostNet algorithm uses the AdaBoost approach (Freund and Schapire, 1997) to construct a m-layer neural network by taking an (m − 1)-layer network as a weak classifier. The shallower networks are trained by the agnostic learning algorithms that we develop in this paper. We establish the same learnability result when the labels are randomly flipped with probability η < 1/2 (see Corollary 1). Although the time complexity of BoostNet is exponential in 1/γ, we demonstrate that our achievable result is unimprovable—in particular, by showing that a poly(d, 1/ , 1/γ) complexity is impossible under a certain cryptographic assumption (see Proposition 2).\nFinally, we report experiments on learning parity functions with noise, which is a challenging problem in computational learning theory. We train two-layer neural networks using BoostNet, then compare them with the traditional backpropagation approach. The experiment shows that BoostNet learns the degree-5 parity function by constructing 50 hidden neurons, while the backpropagation algorithm fails to outperform random guessing."
    }, {
      "heading" : "1.2 Related Work",
      "text" : "This section is devoted to discussion of some related work so as to put our contributions into broader context."
    }, {
      "heading" : "1.2.1 Learning halfspaces",
      "text" : "The problem of learning halfspaces is an important problem in theoretical computer science. It is known that for any constant approximation ratio, the problem of approximately minimizing the zero-one loss is computationally hard (Guruswami and Raghavendra, 2009; Daniely et al., 2014). Halfspaces can be efficiently learnable if the data are drawn from certain special distributions, or if the label is corrupted by particular forms of noise. Indeed, Blum et al. (1998) and Servedio and Valiant (2001) show that if the labels are corrupted by random noise, then the halfspace can be learned in polynomial time. The same conclusion was established by Awasthi et al. (2015) when the labels are corrupted by Massart noise, and the covariates are drawn from the uniform distribution on a unit sphere. When the label noise is adversarial, the halfspace can be learned if the data distribution is isotropic log-concave and the fraction of labels being corrupted is bounded by a small quantity (Kalai et al., 2008; Klivans et al., 2009; Awasthi et al., 2014). When no assumption is made\non the noise, Kalai et al. (2008) show that if the data are drawn from the uniform distribution on a unit sphere, then there is an algorithm whose time complexity is polynomial in the input dimension, but exponential in 1/ (where is the additive error). In this same setting, Klivans and Kothari (2014) prove that the exponential dependence on 1/ is unavoidable.\nAnother line of work modifies the loss function to make it easier to minimize. Ben-David and Simon (2001) suggest comparing the zero-one loss of the learned halfspace to the optimal µ-margin loss. The µ-margin loss asserts that all points whose classification margins are smaller than µ should be marked as misclassified. Under this metric, it was shown by Ben-David and Simon (2001); Birnbaum and Shwartz (2012) that the optimal µ-margin loss can be achieved in polynomial time if µ is a positive constant. Shalev-Shwartz et al. (2011) study the minimization of a continuous approximation to the zero-one loss, which is similar to our setup. They propose a kernel-based algorithm which performs as well as the best linear classifier. However, it is an improper learning method in that the classifier cannot be represented by a halfspace."
    }, {
      "heading" : "1.2.2 Learning neural networks",
      "text" : "It is known that any smooth function can be approximated by a neural network with just one hidden layer (Barron, 1993), but that training such a network is NP-hard (Blum and Rivest, 1992). In practice, people use optimization algorithms such as stochastic gradient (SG) to train neural networks. Although strong theoretical results are available for SG in the setting of convex objective functions, there are few such results in the nonconvex setting of neural networks.\nSeveral recent papers address the challenge of establishing polynomial-time learnability results for neural networks. Arora et al. (2013) study the recovery of denoising auto-encoders. They assume that the top-layer values of the network are randomly generated and all network weights are randomly drawn from {−1, 1}. As a consequence, the bottom layer generates a sequence of random observations from which the algorithm can recover the network weights. The algorithm has polynomial-time complexity and is capable of learning random networks that are drawn from a specific distribution. However, in practice people want to learn deterministic networks that encode data-dependent representations.\nSedghi and Anandkumar (2014) study the supervised learning of neural networks under the assumption that the score function of the data distribution is known. They show that if the input dimension is large enough and the network is sparse enough, then the first network layer can be learned by a polynomial-time algorithm. More recently, Janzamin et al. (2015) propose another algorithm relying on the score function that removes the restrictions of Sedghi and Anandkumar (2014). The assumption in this case is that the network weights satisfy a non-degeneracy condition; however, the algorithm is only capable of learning neural networks with one hidden layer. Our algorithm does not impose any assumption on the data distribution, and is able to learn multilayer neural networks.\nAnother approach to the problem is via the improper learning framework. The goal in this case is to find a predictor that is not a neural network, but performs as well as the best possible neural network in terms of the generalization error. Livni et al. (2014) propose a polynomial-time algorithm to learn networks whose activation function is quadratic. Zhang et al. (2015) propose an algorithm for improper learning of sigmoidal neural networks. The algorithm runs in poly(n, d, 1/ ) time if the depth of the networks is a constant and the `1-norm of the incoming weights of any node is bounded by a constant. It outputs a kernel-based classifier while our algorithm outputs a proper neural network. On the other hand, in the agnostic setting, the time complexity of our\nalgorithm depends exponentially on 1/ ."
    }, {
      "heading" : "2 Preliminaries",
      "text" : "In this section, we formalize the problem set-up and present several preliminary lemmas that are useful for the theoretical analysis. We first set up some notation so as to define a general empirical risk minimization problem. Let D be a dataset containing n points {(xi, yi)}ni=1 where xi ∈ X ⊂ Rd and yi ∈ {−1, 1}. To goal is to learn a function f : X → R so that f(xi) is as close to yi as possible. We may write the loss function as\n`(f) := n∑ i=1 αih(−yif(xi)). (4)\nwhere hi : R → R is a L-Lipschitz continuous function that depends on yi, and {α1, . . . , αn} are non-negative importance weights that sum to 1. As concrete examples, the function h can be the piecewise linear function defined by equation (3) or the sigmoid function h(x) := 1/(1 + e−4Lx). Figure 1 compares the step function I[x ≥ 0] with these continuous approximations. In the following sections, we study minimizing the loss function in equation (4) when f is either a linear mapping or a multi-layer neural network.\nLet us introduce some useful shorthand notation. We use [n] to denote the set of indices {1, 2, . . . , n}. For q ∈ [1,∞], let ‖x‖q denote the `q-norm of vector x, given by ‖x‖q := ( ∑d j=1 x q j)\n1/q, as well as ‖q‖∞ = max\nj=1,...,d |xj |. If u is a d-dimensional vector and σ : R → R is a function, we use\nσ(u) as a convenient shorthand for the vector (σ(u1), . . . , σ(ud)). Given a class F of real-valued functions, we define the new function class σ ◦ F := { σ ◦ f | f ∈ F } .\nRademacher complexity bounds: Let {(x′j , y′j)}kj=1 be i.i.d. samples drawn from the dataset D such that probability of drawing (xi, yi) is proportional to αi. We define the sample-based loss function:\nG(f) := 1\nk k∑ j=1 h(−y′jf(x′j)). (5)\nIt is straightforward to verify that E[G(f)] = `(f). For a given function class F , the Rademacher complexity of F with respect to these k samples is defined as\nRk(F) := E [\nsup f∈F\n1\nk k∑ j=1 εjf(x ′ j) ] , (6)\nwhere the {εj} are independent Rademacher random variables.\nLemma 1. Assume that F contains the constant zero function f(x) ≡ 0, then we have\nE [\nsup f∈F |G(f)− `(f)|\n] ≤ 4LRk(F).\nThis lemma shows that Rk(F) controls the distance between G(f) and `(f). For the function classes studied in this paper, we will have Rk(F) = O(1/ √ k). Thus, the function G(f) will be a good approximation to `(f) if the sample size is large enough. This lemma is based on a slight sharpening of the usual Ledoux-Talagrand contraction for Rademacher variables (Ledoux and Talagrand, 2013); see Appendix A for the proof.\nJohnson-Lindenstrauss lemma: The Johnson-Lindenstrauss lemma is a useful tool for dimension reduction. It gives a lower bound on an integer s such that after projecting n vectors from a high-dimensional space into an s-dimensional space, the pairwise distances between this collection of vectors will be approximately preserved.\nLemma 2. For any 0 < < 1/2 and any positive integer n, consider any positive integer s ≥ 12 log n/ 2. Let φ be a operator that projects a vector in Rd to a random s-dimensional subspace of Rd, then scales the vector by √ d/s. Then for any set of vectors u1, . . . , un ∈ Rd, we have∣∣∣‖ui − uj‖22 − ‖φ(ui)− φ(uj)‖22∣∣∣ ≤ ‖ui − uj‖22 for every i, j ∈ [n]. (7)\nholds with probability at least 1/n.\nSee the paper by Dasgupta and Gupta (1999) for a simple proof.\nMaurey-Barron-Jones lemma: Letting G be a subset of any Hilbert space H, the MaureyBarron-Jones lemma guarantees that any point v in the convex hull of G can be approximated by a convex combination of a small number of points of G. More precisely, we have:\nLemma 3. Consider any subset G of any Hilbert space such that ‖g‖H ≤ b for all g ∈ G. Then for any point v is in the convex hull of G, there is a point vs in the convex hull of s points of G such that ‖v − vs‖2H ≤ b2/s.\nSee the paper by Pisier (1980) for a proof. This lemma is useful in our analysis of neural network learning.\nAlgorithm 1: Learning halfspaces based on initializing from uniform sampling\nInput: Feature-label pairs {(xi, yi)}ni=1; feature dimension d; parameters T and r ≥ 1. For t = 1, 2, . . . , T :\n1. Draw a random vector u uniformly from the unit sphere of Rd.\n2. Choose wt := ru, or compute wt by a poly(n, d)-time algorithm such that ‖wt‖2 ≤ r and `(wt) ≤ `(ru).\nOutput: ŵ := arg minw∈{w1,...,wT } `(w)."
    }, {
      "heading" : "3 Learning Halfspaces",
      "text" : "In this section, we assume that the function f is a linear mapping f(x) := 〈w, x〉, so that our cost function can be written as\n`(w) := n∑ i=1 αih(−yi〈w, xi〉). (8)\nIn this section, we present two polynomial-time algorithms to approximately minimize this cost function over certain types of `p-balls. Both algorithms run multiple rounds of random initialization followed by arbitrary optimization steps. The first algorithm initializes the weight vector by uniformly drawing from a sphere. We next present and analyze a second algorithm in which the initialization follows from the solution of a least-square problem. It attains the stronger theoretical guarantees promised in the introduction."
    }, {
      "heading" : "3.1 Initialization by uniform sampling",
      "text" : "We first analyze a very simple algorithm based on uniform sampling. Letting w∗ denote a minimizer of the objective function (8), by rescaling as necessary, we may assume that ‖w∗‖2 = 1. As noted earlier, by redefining the function h as necessary, we may also assume that the points {xi}ni=1 all lie inside the Eulcidean ball of radius one—that is, ‖xi‖2 ≤ 1 for all i ∈ [n].\nGiven this set-up, a simply way in which to estimate w∗ is to first draw w uniformly from the Euclidean unit sphere, and then apply an iterative scheme to minimize the the loss function with the randomly drawn vector w as the initial point. At an intuitive level, this algorithm will find the global optimum if the initial weight is drawn sufficiently close to w∗, so that the iterative optimization method converges to the global minimum. However, by calculating volumes of spheres in high-dimensions, it could require Ω( 1\nd ) rounds of random sampling before drawing a vector that\nis sufficiently close to w∗, which makes it computationally intractable unless the dimension d is small.\nIn order to remove the exponential dependence, Algorithm 1 is based on drawing the initial vector from a sphere of radius r > 1, where the radius r should be viewed as hyper-parameter of the algorithm. One should choose a greater r for a faster algorithm, but with a less accurate solution. The following theorem characterizes the trade-off between the accuracy and the time complexity.\nAlgorithm 2: Learning halfspaces based on initializing from the solution of a least-squares problem.\nInput: Feature-label pairs {(xi, yi)}ni=1; feature dimension d; parameters k, T . For t = 1, 2, . . . , T :\n1. Sample k points {(x′j , y′j)}kj=1 from the dataset with respect to their importance weights. Sample a vector u uniformly from [−1, 1]k and let v := argmin‖w‖p≤1 ∑k j=1(〈w, x′j〉 − uj)2. 2. Choose wt := v, or compute wt by a poly(n, d)-time algorithm such that ‖wt‖p ≤ 1 and `(wt) ≤ `(v).\nOutput: ŵ := arg minw∈{w1,...,wT } `(w).\nTheorem 1. For 0 < < 1/2 and δ > 0, let s := min{d, d12 log(n + 2)/ 2e}, r := √ d/s and T := d(2n + 4)(π/ )s−1 log(1/δ)e. With probability at least 1 − δ, Algorithm 1 outputs a vector ‖ŵ‖2 ≤ r which satisfies:\n`(ŵ) ≤ `(w∗) + 6 L.\nThe time complexity is bounded by poly(n(1/ 2) log2(1/ ), d, log(1/δ)).\nThe proof of Theorem 1, provided in Appendix B, uses the Johnson-Lindenstrauss lemma. More specifically, suppose that we project the weight vector w and all data points x1, . . . , xn to a random subspace S and properly scale the projected vectors. The Johnson-Lindenstrauss lemma then implies that with a constant probability, the inner products 〈w, xi〉 will be almost invariant after the projection—that is,\n〈w∗, xi〉 ≈ 〈φ(w∗), φ(xi)〉 = 〈rφ(w∗), xi〉 for every i ∈ [n],\nwhere r is the scale factor of the projection. As a consequence, the vector rφ(w∗) will approximately minimize the loss. If we draw a vector v uniformly from the sphere of S with radius r and find that v is sufficiently close to rφ(w∗), then we call this vector v as a successful draw. The probability of a successful draw depends on the dimension of S, independent of the original dimension d (see Lemma 2). If the draw is successful, then we use v as the initialization so that it approximately minimize the loss. Note that drawing from the unit sphere of a random subspace S is equivalent to directly drawing from the original space Rd, so that there is no algorithmic need to explicitly construct the random subspace.\nIt is worthwhile to note some important deficiencies of Algorithm 1. First, the algorithm outputs a vector satisfying the bound ‖ŵ‖2 ≤ r with r > 1, so that it is not guaranteed to lie within the Euclidean unit ball. Second, the `2-norm constraints ‖xi‖2 ≤ 1 and ‖w∗‖2 = 1 cannot be generalized to other norms. Third, the complexity term n(1/\n2) log2(1/ ) has a power growing with 1/ . Our second algorithm overcomes these limitations."
    }, {
      "heading" : "3.2 Initialization by solving a least-square problem",
      "text" : "We turn to a more general setting in which w∗ and xi are bounded by a general `q-norm for some q ∈ [2,∞]. Letting p ∈ [1, 2] denote the associated dual exponent ( i.e., such that 1/p + 1/q = 1), we assume that ‖w∗‖p ≤ 1 and ‖xi‖q ≤ 1 for every i ∈ [n]. Note that this generalizes our previous\nset-up, which applied to the case p = q = 2. In this setting, Algorithm 2 is a procedure that outputs an approximate minimizer of the loss function. In each iteration, it draws k n points from the data set D, and then constructs a random least-squares problem based on these samples. The solution to this problem is used to initialize an optimization step.\nThe success of Algorithm 2 relies on the following observation: if we sample k points independently from the dataset, then Lemma 1 implies that the sample-based loss G(f) will be sufficiently close to the original loss `(f). Thus, it suffices to minimize the sample-based loss. Note that G(f) is uniquely determined by the k inner products ϕ(w) := (〈w, xi1〉, . . . , 〈w, xik〉). If there is a vector w satisfying ϕ(w) = ϕ(w∗), then its performance on the sample-based loss will be equivalent to that of w∗. As a consequence, if we draw a vector u ∈ [−1, 1]k that is sufficiently close to ϕ(w∗) (called a successful u), then we can approximately minimize the sample-based loss by solving ϕ(w) = u, or alternatively by minimizing ‖ϕ(w)− u‖22. The latter problem can be solved by a convex program in polynomial time. The probability of drawing a successful u only depends on k, independent of the input dimension and the sample size. This allows the time complexity to be polynomial in (n, d). The trade-off between the target excess risk and the time complexity is characterized by the following theorem. For given , δ > 0, it is based on running Algorithm 2 with the choices\nk := { d2 log d/ 2e if p = 1 d(q − 1)/ 2e if p > 1,\n(9)\nand T := d5(4/ )k log(1/δ)e.\nTheorem 2. For given , δ > 0, with the choices of (k, T ) given above, Algorithm 2 outputs a vector ‖ŵ‖p ≤ 1 such that\n`(ŵ) ≤ `(w∗) + 11 L with probability at least 1− δ.\nThe time complexity is bounded by{ poly ( n, d(1/ 2) log(1/ ), log(1/δ) )\nif p = 1 poly ( n, d, e(q/ 2) log(1/ ), log(1/δ) ) if p > 1.\nSee Appendix C for the proof. Theorem 2 shows that the time complexity of the algorithm has polynomial dependence on (n, d) but exponential dependence on L/ . Shalev-Shwartz et al. (2011) proved a similar complexity bound when the function h takes the piecewise-linear form (3), but our algorithm applies to arbitrary continuous functions. We note that the result is interesting only when (L/ )2 d, since otherwise the same time complexity can be achieved by a grid search of w∗ within the d-dimensional unit ball."
    }, {
      "heading" : "3.3 Hardness result",
      "text" : "In Theorem 2, the time complexity has an exponential dependence on L/ . Shalev-Shwartz et al. (2011) show that the time complexity cannot be polynomial in L even for improper learning. It is natural to wonder if Algorithm 2 can be improved to have polynomial dependence on (n, d, 1/ ) given that L = 1. In this section, we provide evidence that this is unlikely to be the case.\nTo prove the hardness result, we reduce from the MAX-2-SAT problem, which is known to be NP-hard. In particular, we show that if there is an algorithm solving the minimization problem (8), then it also solves the MAX-2-SAT problem. Let us recall the MAX-2-SAT problem:\nDefinition (MAX-2-SAT). Given n literals {z1, . . . , zn} and d clauses {c1, . . . , cd}. Each clause is the conjunction of two arguments that may either be a literal or the negation of a literal ∗. The goal is to determine the maximum number of clauses that can be simultaneously satisfied by an assignment.\nSince our interest is to prove a lower bound, it suffices to study a special case of the general minimization problem—namely, one in which ‖w∗‖2 ≤ 1 and ‖xi‖2 ≤ 1, yi = −1 for any i ∈ [n]. The following proposition shows that if h is the piecewise-linear function with L = 1, then approximately minimizing the loss function is hard. See Appendix D for the proof.\nProposition 1. Let h be the piecewise-linear function (3) with Lipschitz constant L = 1. Unless RP = NP†, there is no randomized poly(n, d, 1/ )-time algorithm computing a vector ŵ which satisfies `(ŵ) ≤ `(w∗) + with probability at least 1/2.\nProposition 1 provides a strong evidence that learning halfspaces with respect to a continuous sigmoidal loss cannot be done in poly(n, d, 1/ ) time. We note that Hush (1999) proved a similar hardness result, but without the unit-norm constraint on w∗ and {xi}ni=1. The non-convex ERM problem without a unit norm constraint is notably harder than ours, so this particular hardness result does not apply to our problem setup."
    }, {
      "heading" : "4 Learning Neural Networks",
      "text" : "Let us now turn to the case in which the function f represents a neural network. Given two numbers p ∈ (1, 2] and q ∈ [2,∞) such that 1/p+1/q = 1, we assume that the input vector satisfies ‖xi‖q ≤ 1 for every i ∈ [n]. The class of m-layer neural networks is recursively defined in the following way. A one-layer neural network is a linear mapping from Rd to R, and we consider the set of mappings:\nN1 := {x→ 〈w, x〉 : ‖w‖p ≤ B}.\nFor m > 1, an m-layer neural network is a linear combination of (m − 1)-layer neural networks activated by a sigmoid function, and so we define:\nNm := { x→ d∑ j=1 wjσ(fj(x)) : d <∞, fj ∈ Nm−1, ‖w‖1 ≤ B } .\nIn this definition, the function σ : R → [−1, 1] is an arbitrary 1-Lipschitz continuous function. At each hidden layer, we allow the number of neurons d to be arbitrarily large, but the per-unit `1-norm must be bounded by a constant B. This regularization scheme has been studied by Bartlett (1998); Koltchinskii and Panchenko (2002); Bartlett and Mendelson (2003); Neyshabur et al. (2015).\nAssuming a constant `1-norm bound might be restrictive for some applications, but without this norm constraint, the neural network class activated by any sigmoid-like or ReLU-like function is not efficiently learnable (Zhang et al., 2015, Theorem 3). On the other hand, the `1-regularization imposes sparsity on the neural network. It is observed in practice that sparse neural networks\n∗In the standard MAX-2-SAT setup, each clause is the disjunction of two literals. However, any disjunction clause can be reduced to three conjunction clauses. In particular, a clause z1∨z2 is satisfied if and only if one of the following is satisfied: z1 ∧ z2, ¬z1 ∧ z2, z1 ∧ ¬z2. †RP is the class of randomized polynomial-time algorithms.\nAlgorithm 3: Algorithm for learning neural networks\nInput: Feature-label pairs {(xi, yi)}ni=1; number of layers m; parameters k, s, T,B. For t = 1, 2, . . . , T :\n1. Sample k points {(x′j , y′j)}kj=1 from the dataset with respect to their importance weights. 2. Generate a neural network g ∈ Nm in the following recursive way:\n• If m = 1, then draw a vector u uniformly from [−B,B]k. Let v := arg minw∈Rd:‖w‖p≤B ∑k j=1(〈w, x′j〉 − uj)2 and return g : x→ 〈v, x〉. • If m > 1, then generate the (m− 1)-layer networks g1, . . . , gs ∈ Nm−1 using this recursive program. Draw a vector u uniformly from [−B,B]k. Let\nv := arg min w∈Rs:‖w‖1≤B k∑ j=1 ( s∑ l=1 wlσ(gl(x ′ j))− uj )2 (10)\nand return g : x→ ∑s\nl=1 vlσ(gl(x)).\n3. Choose ft := g, or compute ft by a poly(n, d)-time algorithm such that ft ∈ Nm and `(ft) ≤ `(g).\nOutput: f̂ := arg minf∈{f1,...,fT } `(f).\nare capable of learning meaningful representations such as by convolutional neural networks, for instance. Moreover, it has been argued that sparse connectivity is a natural constraint that can lead to improved performance in practice (see, e.g. Thom and Palm, 2013)."
    }, {
      "heading" : "4.1 Agnostic learning",
      "text" : "In the agnostic setting, it is not assumed there exists a neural network that separates the data. Instead, our goal is to compute a neural network f̂ ∈ Nm that minimizes the loss function over the space of all given networks. Letting f∗ ∈ Nm be the network that minimizes the empirical loss `, we now present and analyze a method (see Algorithm 3) that computes a network whose loss is at most worse that that of f∗. We first state our main guarantee for this algorithm, before providing intuition. More precisely, for any , δ > 0, the following theorem applies to Algorithm 3 with the choices:\nk := dq/ 2e, s := d1/ 2e, T := ⌈ 5(4/ )k(s m−1)/(s−1) log(1/δ) ⌉ . (11)\nTheorem 3. For given B ≥ 1 and , δ > 0, with the choices of (k, s, T ) given above, Algorithm 3 outputs a predictor f̂ ∈ Nm such that\n`(f̂) ≤ `(f∗) + (2m+ 9) LBm with probability at least 1− δ. (12)\nThe computational complexity is bounded by poly(n, d, eq(1/ 2)m log(1/ ), log(1/δ)).\nWe remark that if m = 1, then Nm is a class of linear mappings. Thus, Algorithm 2 can be viewed as a special case of Algorithm 3 for learning one-layer neural networks. See Appendix E for the proof of Theorem 3.\nThe intuition underlying Algorithm 3 is similar to that of Algorithm 2. Each iteration involves resampling k independent points from the dataset. By the Rademacher generalization bound, minimizing the sample-based loss G(f) will approximately minimize the original loss `(f). The value of G(f) is uniquely determined by the vector ϕ(f) := (f(x′1), . . . , f(x ′ k)). As a consequence, if we draw u ∈ [−B,B]k sufficiently close to ϕ(f∗), then a nearly-optimal neural network will be obtained by approximately solving ϕ(g) ≈ u, or equivalently ϕ(g) ≈ ϕ(f∗).\nIn general, directly solving the equation ϕ(g) ≈ u would be difficult even if the vector u were known. In particular, since our class Nm is highly non-linear, solving this equation cannot be reduced to solving a convex program. On the other hand, suppose that we write f∗(x) =∑s\nl=1wlσ(f ∗ l (x)) for some functions f ∗ l ∈ Nm. Then the problem becomes much easier if the quantities σ(f∗l (x ′ j)) are already known for every (j, l) ∈ [k] × [d]. With this perspective in mind, we can approximately solve the equation by minimizing\nmin w∈Rd:‖w‖1≤B k∑ j=1 ( s∑ l=1 wlσ(f ∗ l (x ′ j))− uj )2 . (13)\nAccordingly, suppose that we draw vectors a1, . . . , as ∈ [−B,B]k such that each aj is sufficiently close to ϕ(f∗j )—any such draw is called successful. We may then recursively compute (m − 1)- layer networks g1, . . . , gs by first solving the approximate equation ϕ(gl) ≈ al, and then rewriting problem (13) as\nmin w∈Rd:‖w‖1≤B k∑ j=1 ( s∑ l=1 wlσ(gl(x ′ j))− uj )2 .\nThis convex program matches the problem (10) in Algorithm 3. Note that the probability of a successful draw {a1, . . . , as} depends on the dimension s. Although there is no constraint on the dimension of Nm, the Maurey-Barron-Jones lemma (Lemma 3) asserts that it suffices to choose s = O(1/ 2) to compute an -accurate approximation. We refer the reader to Appendix E for the detailed proof."
    }, {
      "heading" : "4.2 Learning with separable data",
      "text" : "We turn to the case in which the data are separable with a positive margin. Throughout this section, we assume that the activation function of Nm is an odd function (i.e., σ(−x) = −σ(x)). We say that a given data set {(xi, yi)}ni=1 is separable with margin γ, or γ-separable for short, if there is a network f∗ ∈ Nm such that yif∗(xi) ≥ γ for each i ∈ [n]. Given a distribution P over the space X ×{−1, 1}, we say that it is γ-separable if there is a network f∗ ∈ Nm such that yf∗(x) ≥ γ almost surely (with respect to P).\nAlgorithm 4 learns a neural network on the separable data. It uses the AdaBoost approach (Freund and Schapire, 1997) to construct the network, and we refer to it as the BoostNet algorithm. In each iteration, it trains a weak classifier ĝt ∈ Nm−1 with an error rate slightly better than random guessing, then adds the weak classifier to the strong classifier to construct an m-layer network. The weaker classifier is trained by Algorithm 3 (or by Algorithm 1 or Algorithm 2 if Nm−1 are one-layer networks). The following theorem provides guarantees for its performance when it is run for\nT := ⌈16B2 log(n+ 1)\nγ2\n⌉\nAlgorithm 4: The BoostNet algorithm\nInput: Feature-label pairs {(xi, yi)}ni=1; number of layers m ≥ 2; parameters δ, γ, T,B. Initialize f0 = 0 and b0 = 0. For t = 1, 2, . . . , T :\n1. Define Gt(g) := ∑n\ni=1 αt,iσ(−yig(xi)) where g ∈ Nm−1 and αt,i := e−yiσ(ft−1(xi))∑n j=1 e −yiσ(ft−1(xi)) .\n2. Compute ĝt ∈ Nm−1 by Algorithm 3 such that\nGt(ĝt) ≤ inf g∈Nm−1\nGt(g) + γ\n2B (14)\nwith probability at least 1− δ/T ‡. Let µt := max{−12 , Gt(ĝt)}.\n3. Set ft = ft−1 + 1 2 log( 1−µt 1+µt )ĝt and bt = bt−1 + 1 2 ∣∣∣log(1−µt1+µt )∣∣∣. Output: f̂ := BbT fT .\niterations. The running time depends on a quantity Cm,B,1/γ that is a constant for any choice of the triple (m,B, 1/γ), but with exponential dependence on 1/γ.\nTheorem 4. With the above choice of T , the BoostNet algorithm achieves:\n(a) In-sample error: For any γ-separable dataset {(xi, yi)}ni=1 Algorithm 4 outputs a neural network f̂ ∈ Nm such that,\nyif̂(xi) ≥ γ\n16 for every i ∈ [n], with probability at least 1− δ.\nThe time complexity is bounded by poly(n, d, log(1/δ), Cm,B,1/γ).\n(b) Generalization error: Given a data set consisting of n = poly(1/ , log(1/δ)) i.i.d. samples from any γ-separable distribution P, Algorithm 4 outputs a network f̂ ∈ Nm such that\nP [ sign(f̂(x)) 6= y ] ≤ with probability at least 1− 2δ. (15)\nMoreover, the time complexity is bounded by poly(d, 1/ , log(1/δ), Cm,B,1/γ).\nSee Appendix F for the proof. The most technical work is devoted to proving part (a). The generalization bound in part (b) follows by combining part (a) with bounds on the Rademacher complexity of the network class, which then allow us to translate the in-sample error bound to generalization error in the usual way. It is worth comparing the BoostNet algorithm with the general algorithm for agnostic learning. In order to bound the generalization error by > 0, the time complexity of Algorithm 3 will be exponential in 1/ .\nThe same learnability results can be established even if the labels are randomly corrupted. Formally, for every pair (x, y) sampled from a γ-separable distribution, suppose that the learning algorithm actually receives the corrupted pair (x, ỹ), where\nỹ = { y with probability 1− η, −y with probability η.\n‡We may choose the hyper-parameters of Algorithm 3 by equation (11), with the additive error defined by γ/((4m+ 10)LBm). Theorem 3 guarantees that the error bound (14) holds with high probability.\nHere the parameter η ∈ [0, 12) corresponds to the noise level. Since the labels are flipped, the BoostNet algorithm cannot be directly applied. However, we can use the improper learning algorithm of Zhang et al. (2015) to learn an improper classifier ĥ such that ĥ(x) = y with high probability, and then apply the BoostNet algorithm taking (x, ĥ(x)) as input. Doing so yields the following guarantee:\nCorollary 1. Assume that q = 2 and η < 1/2. For any constant (m,B), consider the neural network class Nm activated by σ(x) := erf(x)§. Given a random dataset of size n = poly(1/ , 1/δ) for any γ-separable distribution, there is a poly(d, 1/ , 1/δ)-time algorithm that outputs a network f̂ ∈ Nm such that\nP(sign(f̂(x)) 6= y) ≤ with probability at least 1− δ.\nSee Appendix G for the proof."
    }, {
      "heading" : "4.3 Hardness result for γ-separable problems",
      "text" : "Finally, we present a hardness result showing that the dependence on 1/γ is hard to improve. Our proof relies on the hardness of standard (nonagnostic) PAC learning of the intersection of halfspaces given in Klivans et al. (2006). More precisely, consider the family of halfspace indicator functions mapping X = {−1, 1}d to {−1, 1} given by\nH = {x→ sign(wTx− b− 1/2) : x ∈ {−1, 1}d, b ∈ N, w ∈ Nd, |b|+ ‖w‖1 ≤ poly(d)}.\nGiven a T -tuple of functions {h1, . . . , hT } belonging to H, we define the intersection function\nh(x) = { 1 if h1(x) = · · · = hT (x) = 1, −1 otherwise,\nwhich represents the intersection of T half-spaces. Letting HT denote the set of all such functions, for any distribution on X , we want an algorithm taking a sequence of (x, h∗(x)) as input where x is a sample from X and h∗ ∈ HT . It should output a function ĥ such that P(ĥ(x) 6= h∗(x)) ≤ with probability at least 1−δ. If there is such an algorithm whose sample complexity and time complexity scale as poly(d, 1/ , 1/δ), then we say that HT is efficiently learnable. Klivans et al. (2006) show that if T = Θ(dρ) then HT is not efficiently learnable under a certain cryptographic assumption. This hardness statement implies the hardness of learning neural networks with separable data.\nProposition 2. Assume HT is not efficiently learnable for T = Θ(d ρ). Consider the class of twolayer neural networks N2 activated by the piecewise linear function σ(x) := min{1,max{−1, x}} or the ReLU function σ(x) := max{0, x}, and with the norm constraint B = 2. Consider any algorithm such that when applied to any γ-separable data distribution, it is guaranteed to output a neural network f̂ satisfying P(sign(f̂(x)) 6= y) ≤ with probability at least 1− δ. Then it cannot run in poly(d, 1/ , 1/δ, 1/γ)-time.\nSee Appendix H for the proof.\n§The erf function can be replaced by any function σ satisfying polynomial expansion σ(x) = ∑∞ j=0 βjx\nj , such that∑∞ j=0 2 jβ2jλ 2j < +∞ for any finite λ ∈ R+."
    }, {
      "heading" : "5 Simulation",
      "text" : "In this section, we compare the BoostNet algorithm with the classical backpropagation method for training two-layer neural networks. The goal is to learn parity functions from noisy data — a challenging problem in computational learning theory (see, e.g. Blum et al., 2003). We construct a synthetic dataset with n = 50, 000 points. Each point (x, y) is generated as follows: first, the vector x is uniformly drawn from {−1, 1}d and concatenated with a constant 1 as the (d+1)-th coordinate. The label is generated as follows: for some unknown subset of p indices 1 ≤ i1 < · · · < ip ≤ d, we set\ny =\n{ xi1xi2 . . . xip with probability 0.9 ,\n−xi1xi2 . . . xip with probability 0.1 .\nThe goal is to learn a function f : Rd+1 → R such that sign(f(x)) predicts the value of y. The optimal rate is achieved by the parity function f(x) = xi1xi2 . . . xip , in which case the prediction error is 0.1. If the parity degree p > 1, the optimal rate cannot be achieved by any linear classifier.\nChoose d = 50 and p ∈ {2, 5}. The activation function is chosen as σ(x) := tanh(x). The training set, the validation set and the test set contain respectively 25K, 5K and 20K points. To train a two-layer BoostNet, we choose the hyper-parameter B = 10, and select Algorithm 3 as the subroutine to train weak classifiers with hyper-parameters (k, T ) = (10, 1). To train a classical two-layer neural network, we use the random initialization scheme of Nguyen and Widrow (1990) and the backpropagation algorithm of Møller (1993). For both methods, the algorithm is executed for ten independent rounds to select the best solution.\nFigure 5 compares the prediction errors of BoostNet and backpropagation. Both methods generate the same two-layer network architecture, so that we compare with respect to the number of hidden nodes. Note that BoostNet constructs hidden nodes incrementally while NeuralNet trains a predefined number of neurons. Figure 5 shows that both algorithms learn the degree-2 parity function with a few hidden nodes. In contrast, BoostNet learns the degree-5 parity function with less than 50 hidden nodes, while NeuralNet’s performance is no better than random guessing. This suggests that the BoostNet algorithm is less likely to be trapped in a bad local optimum in this setting."
    }, {
      "heading" : "6 Conclusion",
      "text" : "In this paper, we have proposed algorithms to learn halfspaces and neural networks with non-convex loss functions. We demonstrate that the time complexity is polynomial in the input dimension and in the sample size but exponential in the excess risk. A hardness result relating to the necessity of the exponential dependence is also presented. The algorithms perform randomized initialization followed by optimization steps. This idea coincides with the heuristics that are widely used in practice, but the theoretical analysis suggests that a careful treatment of the initialization step is necessary. We proposed the BoostNet algorithm, and showed that it can be used to learn a neural network in polynomial time when the data are separable with a constant margin. We suspect that the theoretical results of this paper are likely conservative, in that in application to real data, the algorithms can be much more efficient than the bounds might suggest.\nAcknowledgements:\nMW and YZ were partially supported by NSF grant CIF-31712-23800 from the National Science Foundation, AFOSR-FA9550-14-1-0016 grant from the Air Force Office of Scientific Research, ONR MURI grant N00014-11-1-0688 from the Office of Naval Research. MJ and YZ were partially supported by the U.S.ARL and the U.S.ARO under contract/grant number W911NF-11-1-0391. We thank Sivaraman Balakrishnan for helpful comments on an earlier draft."
    }, {
      "heading" : "A Proof of Lemma 1",
      "text" : "The following inequality always holds:\nsup f∈F |G(f)− `(f)| ≤ max { sup f∈F {G(f)− `(f)}, sup f ′∈F {`(f ′)−G(f ′)} } .\nSince F contains the constant zero function, both supf∈F{G(f)−`(f)} and supf ′∈F{`(f ′)−G(f ′)} are non-negative, which implies\nsup f∈F |G(f)− `(f)| ≤ sup f∈F {G(f)− `(f)}+ sup f ′∈F {`(f ′)−G(f ′)}.\nTo establish Lemma 1, it suffices to prove: E [\nsup f∈F {G(f)− `(f)}\n] ≤ 2LRk(F) and E [ sup f ′∈F {`(f ′)−G(f ′)} ] ≤ 2LRk(F)\nFor the rest of the proof, we will establish the first upper bound. The second bound can be established through an identical series of steps.\nThe inequality E[supf∈F{G(f) − `(f)}] ≤ 2LRk(F) follows as a consequence of classical symmetrization techniques (e.g. Bartlett and Mendelson, 2003) and the Talagrand-Ledoux concentration (e.g. Ledoux and Talagrand, 2013, Corollary 3.17). However, so as to keep the paper self-contained, we provide a detailed proof here. By the definitions of `(f) and G(f), we have\nE [\nsup f∈F\n{ G(f)− `(f) }] = E [ sup f∈F {1 k k∑ j=1 h(−y′jf(x′j))− E [1 k k∑ j=1 h(−y′′j f(x′′j )) ]}] ,\nwhere (x′′j , y ′′ j ) is an i.i.d. copy of (x ′ j , y ′ j). Applying Jensen’s inequality yields\nE [\nsup f∈F\n{ G(f)− `(f) }] ≤ E [ sup f∈F {1 k k∑ j=1 h(−y′jf(x′j))− h(−y′′j f(x′′j )) }]\n= E [\nsup f∈F {1 k k∑ j=1 εj(h(−y′jf(x′j))− h(−y′′j f(x′′j ))) }]\n≤ E [\nsup f∈F {1 k k∑ j=1 εjh(−y′jf(x′j)) + sup f∈F 1 k k∑ j=1 εjh(−y′′j f(x′′j )) }]\n= 2E [\nsup f∈F {1 k k∑ j=1 εjh(−y′jf(x′j)) }] . (16)\nWe need to bound the right-hand side using the Rademacher complexity of the function class F , and we use an argument following the lecture notes of Kakade and Tewari (2008). Introducing the shorthand notation ϕj(x) := h(−y′jx), the L-Lipschitz continuity of ϕj implies that\nE [\nsup f∈F k∑ j=1 εjϕj(f(x ′ j)) ] = E [ sup f,f ′∈F {ϕ1(f(x′1))− ϕ1(f ′(x′1)) 2 + k∑ j=2 εj ϕj(f(x ′ j)) + ϕj(f ′(x′j)) 2 }]\n≤ E [\nsup f,f ′∈F {L|f(x′1)− f ′(x′1)| 2 + k∑ j=2 εj ϕj(f(x ′ j)) + ϕj(f ′(x′j)) 2 }]\n= E [\nsup f,f ′∈F {Lf(x′1)− Lf ′(x′1) 2 + k∑ j=2 εj ϕj(f(x ′ j)) + ϕj(f ′(x′j)) 2 }] .\nApplying Jensen’s inequality implies that the right-hand side is bounded by\nRHS ≤ 1 2 E [ sup f∈F { Lf(x′1) + k∑ j=2 εjϕj(f(x ′ j)) } + sup f ′∈F { − Lf(x′1) + k∑ j=2 εjϕj(f ′(x′j)) }]\n= E [\nsup f∈F\n{ ε1Lf(x ′ 1) + k∑ j=2 εjϕj(f(x ′ j)) }] .\nBy repeating this argument for j = 2, 3, . . . , k, we obtain\nE [\nsup f∈F k∑ j=1 εjϕj(f(x ′ j)) ] ≤ LE [ sup f∈F k∑ j=1 εjf(x ′ j) ] . (17)\nCombining inequalities (16) and (17), we have the desired bound."
    }, {
      "heading" : "B Proof of Theorem 1",
      "text" : "Let us study a single iteration of Algorithm 1. Recall that u is uniformly sampled from the unit sphere of Rd. Alternatively, it can be viewed as sampled by the following procedure: first draw a random s-dimensional subspace of Rd, then draw u uniformly from the unit sphere of S. Consider the n + 2 fixed points {0, w∗, x1, . . . , xn}. Let φ(w) := rΠS(w) be an operator that projects the vector w ∈ Rd to the subspace S and scale it by r. If we choose s ≥ 12 log(n+2)\n2 and r :=\n√ d/s,\nthen Lemma 2 implies that with probability at least 1/(n+ 2), we are guaranteed that\n|‖φ(w∗)‖22| − ‖w∗‖22| ≤ , ‖φ(xi)‖22| − ‖xi‖22| ≤ and |‖φ(w∗)− φ(xi)‖22 − ‖w∗ − xi‖22| ≤ |4 for any i ∈ [n]. (18)\nConsequently, we have\n|〈φ(w∗), φ(xi)〉 − 〈w∗, xi〉| ≤ 3 for any i ∈ [n]. (19)\nAssume that the approximation bounds (18) and (19) hold. Then using the L-Lipschitz continuity of h, we have\n`(w∗) = n∑ i=1 αih(−yi〈w∗, xi〉) ≥ −3 L+ k∑ j=1 αih(−yi〈φ(w∗), φ(xi)〉). (20)\nRecall that u is uniformly drawn from the unit sphere of S; therefore, the angle between u and φ(w∗) is at most with probability at least ( /π)s−1. By inequality (18), the norm of φ(w∗) is in [1− , 1+ ]. Hence, whenever the angle bound holds, the distance between u and φ(w∗) is bounded by 2 . Combining this bound with inequality (20), we find that\n`(w∗) ≥ −3 L+ n∑ i=1 αih(−yi〈u+ (φ(w∗)− u), φ(xi)〉).\nNote that we have the inequality\n|〈φ(w∗)− u, φ(xi)〉| ≤ ‖φ(w∗)− u‖2‖φ(xi)‖2 ≤ 2 (1 + ) ≤ 3 .\nCombined with the L-Lipschitz condition, we obtain the lower bound\n`(w∗) ≥ −6 L+ k∑ j=1 αih(−yi〈u, φ(xi)〉) = `(ru)− 6 L. (21)\nThis bound holds with probability at least ( /π) s−1\n2n+4 . Thus, by repeating the procedure for a total\nof T ≥ (2n+ 4)(π/ )s−1 log(1/δ) iterations, then the best solution satisfies inequality (21) with probability at least 1 − δ. The time complexity is obtained by plugging in the stated choices of (s, T )."
    }, {
      "heading" : "C Proof of Theorem 2",
      "text" : "Let us study a single iteration of Algorithm 2. Conditioning on any {(x′j , y′j)}kj=1, define the function G(w) := 1k ∑k j=1 h(−y′j〈w, x′j〉). Since h is L-Lipschitz, we have\nG(v)−G(w∗) = 1 k k∑ j=1 h(−y′j〈v, x′j〉)− h(−y′j〈w∗, x′j〉) ≤ L k k∑ j=1 |〈v − w∗, x′j〉|\n≤ L√ k ( k∑ j=1 (〈v − w∗, x′j〉)2 )1/2 ,\nwhere the final step follows from the Cauchy-Schwarz inequality. Let X ′ ∈ Rk×d be a design matrix whose j-th row is equal to x′j . Using the above bound, for any u ∈ [−1, 1]k, we have\nG(v)−G(w∗) ≤ L√ k ‖X ′(v − w∗)‖2 ≤ L√ k (‖X ′v − u‖2 + ‖X ′w∗ − u‖2)\n≤ 2L√ k ‖X ′w∗ − u‖2, (22)\nwhere the last step uses the fact that the vector v minimizes ‖X ′w − u‖2 over the set of vectors with ‖w‖p ≤ 1. The right-hand side of inequality (22) is independent of v. Indeed, since X ′w∗ ∈ [−1, 1]k and u is uniformly sampled from this cube, the probability that ‖X ′w∗ − u‖∞ ≤ /2 is at least ( /4)k. This bound leads to ‖X ′w∗ − u‖2 ≤ √ k/2. Thus, with probability at least ( /4)k, we have G(v)−G(w∗) ≤ L. Conditioned on the above bound holding, Lemma 1 implies that\nE [\nsup ‖w‖p≤1 ∣∣`(w)−G(w)∣∣] ≤ 4LRk(F), where Rk(F) is the k-sample Rademacher complexity of the function class F := {f : x→ 〈w, x〉 | ‖w‖p ≤ 1, ‖x‖q ≤ 1}. Markov’s inequality implies that sup‖w‖p≤1 ∣∣`(w) − G(w)∣∣ ≤ 5LRk(F) with\nprobability at least 1/5. This event only depends on the choice of {(x′j , y′j)}, and conditioned on it holding, we have\n`(v) ≤ G(v) + 5LRk(F) = G(w∗) + (G(v)−G(w∗)) + 5LRk(F) ≤ `(f∗) + (G(v)−G(w∗)) + 10LRk(F).\nIt is known (e.g. Kakade et al., 2009) that the Rademacher complexity is upper bounded as\nRk(F) ≤  √ 2 log d k if p = 1√\nq−1 k if p > 1, where 1/q + 1/p = 1.\nThus, given the choice of k from equation (9) and plugging in the bound on G(v)−G(w∗), we have `(v) ≤ `(w∗) + 11 L with probability at least ( /4)k/5. Repeating this procedure for a total of T ≥ 5(4/ )k log(1/δ) times guarantees that the upper bound holds with probability at least 1− δ. Finally, the claimed time complexity is obtained by plugging in the stated choices of k and T ."
    }, {
      "heading" : "D Proof of Proposition 1",
      "text" : "We prove the lower bound based on a data set with ‖xi‖2 ≤ 1 and yi = −1 for each i ∈ [n]. With this set-up, consider the following problem:\nminimize `(w) s.t. ‖w‖2 ≤ 1 where `(w) := 1\nn n∑ i=1 h(〈w, xi〉). (23)\nThe following lemma, proved in Appendix D.1, shows that for a specific 1-Lipschitz continuous function h, approximately minimizing the loss function is NP-hard.\nLemma 4. Consider the optimization problem (23) based on the function h(x) := min{0, x}. It is NP-hard to compute a vector ŵ ∈ Rd such that ‖ŵ‖2 ≤ 1 and `(ŵ) ≤ `(w∗) + 1(n+2)d .\nWe reduce the problem described by Lemma 4 to the problem of Theorem 1. We do so by analyzing the piecewise linear function\nh(x) :=  1 x ≥ 1/2, 0 x ≤ −1/2, x+ 1/2 otherwise.\n(24)\nWith this choice of h, consider an instance of the problem underlying Lemma 4, say\nmin ‖w‖2≤1\ng(w) := 1\nn n∑ i=1 min{0, 〈w, xi〉}, (25)\nand let w∗ be a vector that achieves the above minimum. Our next step is to construct a new problem in dimension d+1, and argue that any approximate solution to it also leads to an approximate solution to the generic instance (25). For each i ∈ [n], define the (d+ 1)-dimensional vector x′i := (xi/ √ 2, 1/ √ 2), as well as the quantities u := −ed+1/ √ 2\nand v := ed+1/(2 √\n2). Here ed+1 represents the unit vector aligning with the (d+ 1)-th coordinate. For a (d+ 1)-dimensional weight vector w̃ ∈ Rd+1, consider the objective function\n˜̀(w̃) := 1 13n\n( 6nh(〈w̃, u〉) + 6nh(〈w̃, v〉) + n∑ i=1 h(〈w̃, x′i〉) ) .\nIf we decompose w̃ as w̃ = (α/ √ 2, τ/ √\n2) where α ∈ Rd and τ ∈ R, then these parameters satisfy ‖α‖22 + τ2 ≤ 2. We then have the equivalent expression\n˜̀(w̃) = 1 13n\n( 6nh(−τ/2) + 6nh(τ/4) + n∑ i=1 h(〈α, xi〉/2 + τ/2) ) .\nLemma 5. Given any ∈ (0, 126), suppose that w̃ = ( α√ 2 , τ√ 2 ) is an approximate minimizer of the\nfunction ˜̀with additive error , Then we have¶ g ( α ‖α‖2 ) ≤ g(w∗) + 26 . (26)\nThus, if there is a polynomial-time algorithm for minimizing function ˜̀, then there is a polynomialtime algorithm for minimizing function g. Applying the hardness result for minimization of the function g (see Lemma 4) completes the proof of the proposition.\nIt remains to prove the two lemmas, and we do so in the following two subsections.\nD.1 Proof of Lemma 4\nWe reduce MAX-2-SAT to the minimization problem. Given a MAX-2-SAT instance, we construct a loss function ` so that if any algorithm computes a vector ŵ satisfying\n`(ŵ) ≤ `(w∗) + 1 (2n+ 2)d , (27)\nthen the vector ŵ solves MAX-2-SAT. First, we construct n+ 1 vectors in Rd. Define the vector x0 := 1√d1d, and for i = 1, . . . , n, the vectors xi := 1√ d x′i, where x ′ i ∈ Rd is given by\nx′ij =  1 if zi appears in cj ,\n−1 if ¬zi appears in cj , 0 otherwise.\nIt is straightforward to verify that that ‖xi‖2 ≤ 1 for any i ∈ {0, 1, . . . , n}. We consider the following minimization problem:\n`(w) = 1\n2n+ 2 n∑ i=0 ( min{0, 〈w, xi〉}+ min{0, 〈w,−xi〉} ) .\n¶In making this claim, we define 0/‖0‖2 := 0.\nThe goal is to find a vector w∗ ∈ Rd such that ‖w∗‖2 ≤ 1 and it minimizes the function `(w). Notice that for every index i, at most one of min{0, 〈w, xi〉} and min{0, 〈w,−xi〉} is non-zero. Thus, we may write the minimization problem as\nmin ‖w‖2≤1 (2n+ 2)`(w) = min ‖w‖2≤1 n∑ i=0 ( min αi∈{−1,1} 〈w,αixi〉 ) = min α∈{−1,1}n+1 min ‖w‖2≤1 n∑ i=0 〈w,αixi〉\n= min α∈{−1,1}n+1 − ∥∥∥ n∑ i=0 αixi ∥∥∥ 2\n= −  max α∈{−1,1}n+1 d∑ j=1 ( n∑ i=0 αixij )21/2 . (28)\nWe claim that maximizing ∑d j=1( ∑n i=0 αixij) 2 with respect to α is equivalent to maximizing the number of satisfiable clauses. In order to prove this claim, we consider an arbitrary assignment to α to construct a solution to the MAX-2-SAT problem. For i = 1, 2, . . . , n, let zi = true if αi = α0, and let zi = false if αi = −α0. With this assignment, it is straightforward to verify the following: if the clause cj is satisfied, then the value of ∑n i=0 αixij is either 3/ √ d or −3/ √ d. If the clause is\nnot satisfied, then the value of the expression is either 1/ √ d or −1/ √ d. To summarize, we have\nd∑ j=1 ( n∑ i=0 αixij )2 = 1 + 8× (# of satisfied clauses) d . (29)\nThus, solving problem (28) determines the maximum number of satisfiable clauses:\n(max # of satisfied clauses) = d\n8 (( min ‖w‖2≤1 (2n+ 2)`(w) )2 − 1).\nBy examining equation (28) and (29), we find that the value of (2n + 2)`(w) ranges in [−3, 0]. Thus, the MAX-2-SAT number is exactly determined if (2n+ 2)`(ŵ) is at most 1/d larger than the optimal value. This optimality gap is guaranteed by inequality (27), which completes the reduction.\nD.2 Proof of Lemma 5\nIn order to prove the claim, we first argue that τ ∈ [0, 2]. If this inclusion does not hold, then it can be verified that h(−τ/2) + h(τ/4) ≥ 613 , which implies that\n˜̀(w̃) ≥ 6 13 + 1 13n n∑ i=1 h(〈α, xi〉/2 + τ/2) ≥ 12 26 .\nHowever, the feasible assignment (α, τ) = (0, 1) achieves function value 1126 , which contradicts the assumption that ˜̀(w̃) is -optimal. Thus, we assume henceforth τ ∈ [0, 2], and we can rewrite ˜̀ as\n˜̀(w̃) = 3|τ − 1|+ 9 26 + 1 13n n∑ i=1 h(〈α, xi〉/2 + τ/2).\nNotice that h(x+ 1/2) is lower bounded by 1 + min{0, x}. Thus, we have the lower bound\n˜̀(w̃) ≥ 3|τ − 1|+ 9 26 + 1 13 + 1 13n n∑ i=1 min{0, 〈α, xi〉/2 + (τ − 1)/2}\n≥ 11 26 + g(α/2) 13 + |τ − 1| 13 , (30)\nwhere the last inequality uses the 1-Lipschitz continuous of min{0, x}. Notice that the function g satisfies g(βw) = βg(w) for any scalar β. Thus, we can further lower bound the right-hand side by\ng(α/2) = ‖α‖2 2 · g ( α ‖α‖2 ) ≥ 1 2 g ( α ‖α‖2 ) − max{0, ‖α‖2 − 1} 2 , (31)\nwhere the last inequality uses the fact that g( α‖α‖2 ) ≥ −1. Note that inequality (31) holds even for α = 0 according the definition that 0/‖0‖2 = 0. If the quantity ‖α‖2 − 1 is positive, then ‖α‖2 > 1 and consequently τ < 1. Thus we have\n‖α‖2 − 1 < ‖α‖22 − 1 ≤ 1− τ2 = (1 + τ)(1− τ) < 2(1− τ).\nThus, we can lower bound g(α/2) by 12g( α ‖α‖2 )−|τ−1|. Combining this bound with inequality (30), we obtain the lower bound\n`(w̃) ≥ 11 26 + 1 26 g ( α ‖α‖2 ) . (32)\nNote that the assignment (α, τ) = (w∗, 1) is feasible. For this assignment, it is straightforward to verify that the function value is equal to 1126 + 1 26g(w\n∗). Using the fact that w̃ is an -optimal solution, we have `(w̃) ≤ 1126 + 1 26g(w ∗) + . This combining with inequality (32) implies that\ng (\nα ‖α‖2\n) ≤ g(w∗) + 26 , which completes the proof."
    }, {
      "heading" : "E Proof of Theorem 3",
      "text" : "Recalling the definition (6) of the Rademacher complexity, the following lemma bounds the complexity of Nm.\nLemma 6. The Rademacher complexity of Nm is bounded as Rk(Nm) ≤ √ q k B m.\nSee Appendix E.1 for the proof.\nWe study a single iteration of Algorithm 3. Conditioning on any {(x′j , y′j)}, define the quantity G(f) := 1k ∑k j=1 h(−y′jf(x′j)). Since the function h is L-Lipschitz continuous, we have\nh(−y′jg(x′j))− h(−y′jf∗(x′j)) ≤ L|g(x′j)− f∗(x′j)| for any j ∈ [k]. (33)\nGiven any function f : Rd → R, we denote the vector (f(x′1), . . . , f(x′k)) by ϕ(f). For instance, ‖ϕ(g)− ϕ(f∗)‖2 represents the `2-norm ( ∑k j=1 |g(x′j) − f∗(x′j)|2)1/2. Inequality (33) and the Cauchy-Schwarz inequality implies\nG(g)−G(f∗) ≤ L k k∑ j=1 |g(x′j)− f∗(x′j)| ≤ L√ k ‖ϕ(g)− ϕ(f∗)‖2.\nWe need one further auxiliary lemma:\nLemma 7. For any fixed function f∗ ∈ Nm, we have\n‖ϕ(g)− ϕ(f∗)‖2 ≤ (2m− 1) √ kBm with probability at least pm := ( 4 )k(sm−1)/(s−1) . (34)\nSee Appendix E.2 for the proof of this claim.\nLet us now complete the proof of the theorem, using this two lemmas. Lemma 1 implies that E [\nsup f∈Nm ∣∣`(f)−G(f)∣∣] ≤ 4LRk(Nm). By Markov’s inequality, we have supf∈Nm\n∣∣`(f)−G(f)∣∣ ≤ 5LRk(Nm) with probability at least 1/5. This event only depends on the choice of {(x′j , y′j)}. If it is true, then we have\n`(g) ≤ G(g) + 5LRk(Nm) = G(f∗) + (G(g)−G(f∗)) + 5LRk(Nm)\n≤ `(f∗) + L√ k ‖ϕ(g)− ϕ(f∗)‖2 + 10LRk(Nm).\nBy Lemma 6, we have Rk(Nm) ≤ √ q k ∏m l=1Bl. Thus, setting k = q/ 2, substituting the bound into equation (34) and simplifying yields\n`(g) ≤ `(f∗) + (2m+ 9) LBm\nwith probability at least pm/5. If we repeat the procedure for T = (5/pm) log(1/δ) times, then the desired bound holds with probability at least 1− δ. The time complexity is obtained by plugging in the choices of (s, k, T ).\nE.1 Proof of Lemma 6\nWe prove the claim by induction on the number of layers m. It is known (Kakade et al., 2009) that Rk(N1) ≤ √ q k B. Thus, the claim holds for the base case m = 1. Now consider some m > 1, and assume that the claim holds for m− 1. We then have\nRk(N1) = E [ sup f∈Nm 1 k k∑ i=1 εif(x ′ i) ] ,\nwhere ε1, . . . , εn are Rademacher variables. By the definition of Nm, we may write the expression as\nRk(N1) = E  sup f1,...,fd∈Nm−1 1 k n∑ i=1 εi d∑ j=1 wjσ(fj(x ′ i))  = E  sup f1,...,fd∈Nm−1 1 k d∑ j=1 wj k∑ i=1 εiσ(fj(x ′ i))  ≤ BE [ sup\nf∈Nm−1\n1\nk k∑ i=1 εiσ(f(x ′ i)) ] = BRk(σ ◦ Nm−1),\nwhere the inequality follows since ‖w‖1 ≤ B. Since the function σ is 1-Lipschitz continuous, following the proof of inequality (17), we have\nRk(σ ◦ Nm−1) ≤ Rk(Nm−1) ≤ √ q\nn Bm,\nwhich completes the proof.\nE.2 Proof of Lemma 7\nWe prove the claim by induction on the number of layers m. If m = 1, then f∗ is a linear function and ϕ(f∗) ∈ [−B1, B1]n. Since ϕ(g) minimizes the `2-distance to vector u, we have\n‖ϕ(g)− ϕ(f∗)‖2 ≤ ‖ϕ(g)− u‖2 + ‖ϕ(f∗)− u‖2 ≤ 2‖ϕ(f∗)− u‖2. (35)\nSince u is drawn uniformly from [−B,B]k, with probability at least ( 4) k we have ‖ϕ(f∗)− u‖∞ ≤ B2 , and consequently\n‖ϕ(g)− ϕ(f∗)‖2 ≤ √ k‖ϕ(g)− ϕ(f∗)‖∞ ≤ √ kB,\nwhich establishes the claim. For m > 1, assume that the claim holds for m − 1. Recall that f∗/B is in the convex hull of σ ◦ Nm−1 and every function f ∈ σ ◦ Nm−1 satisfies ‖ϕ(f)‖2 ≤ √ k. By the Maurey-Barron-Jones lemma (Lemma 3), there exist s functions in Nm−1, say f̃1, . . . , f̃s, and a vector w ∈ Rs satisfying ‖w‖1 ≤ B such that ∥∥∥ s∑\nj=1\nwjσ(ϕ(f̃j))− ϕ(f∗) ∥∥∥ 2 ≤ B √ k s .\nLet ϕ(f̃) := ∑s j=1wjσ(ϕ(f̃j)). If we chose s = ⌈ 1 2 ⌉ , then we have\n‖ϕ(f̃)− ϕ(f∗)‖2 ≤ √ kB. (36)\nRecall that the function g satisfies g = ∑s\nj=1 vjσ ◦ gj for g1, . . . , gs ∈ Nm−1. Using the inductive hypothesis, we know that the following bound holds with probability at least psm−1:\n‖σ(ϕ(gj))− σ(ϕ(f̃j))‖2 ≤ ‖ϕ(gj)− ϕ(f̃j)‖2 ≤ (2m− 3) √ kBm−1 for any j ∈ [s].\nAs a consequence, we have∥∥∥ s∑ j=1 wjσ(ϕ(gj))− s∑ j=1 wjσ(ϕ(f̃j)) ∥∥∥ 2 ≤ s∑ j=1 |wj | · ‖σ(ϕ(gj))− σ(ϕ(f̃j))‖2\n≤ ‖w‖1 ·max j∈[s] {‖σ(ϕ(gj))− σ(ϕ(f̃j))‖2} ≤ (2m− 3)\n√ k Bm. (37)\nFinally, we bound the distance between ∑s\nj=1wjσ(ϕ(gj)) and ϕ(g). Following the proof of inequality (35), we obtain ∥∥∥ϕ(g)− s∑\nj=1\nwjσ(ϕ(gj)) ∥∥∥ 2 ≤ 2 ∥∥∥u− s∑\nj=1\nwjσ(ϕ(gj)) ∥∥∥ 2 .\nNote that ∑s\nj=1wjσ(ϕ(gj)) ∈ [−B,B]k and u is uniformly drawn from [−B,B]k. Thus, with probability at least ( 4)\nk, we have∥∥∥ϕ(g)− s∑ j=1 wjσ(ϕ(gj)) ∥∥∥ 2 ≤ √ kB. (38)\nCombining inequalities (36), (37) and (38) and using the fact that B ≥ 1, we have∥∥∥ϕ(g)− ϕ(f∗)∥∥∥ ∞ ≤ (2m− 1) √ kBm,\nwith probability at least\npsm−1 · (\n4\n)k = (\n4\n)k( s(sm−1−1) s−1 +1 ) = (\n4\n)k(sm−1)/(s−1) = pm,\nwhich completes the induction."
    }, {
      "heading" : "F Proof of Theorem 4",
      "text" : "F.1 Proof of part (a) We first prove f̂ ∈ Nm. Notice that f̂ = ∑T\nt=1 B 2bT log(1−µt1+µt )∆̂t. Thus, if\nT∑ t=1 B 2bT ∣∣∣∣log(1− µt1 + µt ) ∣∣∣∣ ≤ B, (39)\nthen we have f̂ ∈ Nm by the definition of Nm. The definition of bT makes sure that inequality (39) holds. Thus, we have proved the claim. The time complexity is obtained by plugging in the bound from Theorem 3.\nIt remains to establish the correctness of f̂ . We may write any function f ∈ Nm as\nf(x) = d∑ j=1 wjσ(fj(x)) where wj ≥ 0 for all j ∈ [d].\nThe constraints wj ≥ 0 are always satisfiable, otherwise since σ is an odd function we may write wjσ(fj(x)) as (−wj)σ(−fj(x)) so that it satisfies the constraint. The function fj or −fj belongs to the class Nm−1. We use the following result by Shalev-Shwartz and Singer (2010): Assume that there exists f∗ ∈ Nm which separate the data with margin γ. Then for any set of non-negative importance weights {αi}ni=1, there is a function f ∈ Nm−1 such that ∑n i=1 αiσ(−yif(xi)) ≤ − γ B . This implies that, for every t ∈ [T ], there is f ∈ Nm−1 such that\nGt(f) = n∑ i=1 αt,iσ(−yif(xi)) ≤ − γ B .\nHence, with probability at least 1− δ, the sequence µ1, . . . , µT satisfies the relation\nµt = Gt(ĝt) ≤ − γ\n2B for every t ∈ [T ]. (40)\nAlgorithm 4 is based on running AdaBoost for T iterations. The analysis of AdaBoost by Schapire and Singer (1999) guarantees that for any β > 0, we have\n1\nn n∑ i=1 e−βI[−yifT (xi) ≥ −β] ≤ 1 n n∑ i=1 e−yifT (xi) ≤ exp ( − ∑T t=1 µ 2 t 2 ) .\nThus, the fraction of data that cannot be separated by fT with margin β is bounded by exp(β −∑T t=1 µ 2 t\n8B2 ). If we choose\nβ :=\n∑T t=1 µ 2 t\n2 − log(n+ 1),\nthen this fraction is bounded by 1n+1 , meaning that all points are separated by margin β. Recall that f̂ is a scaled version of fT . As a consequence, all points are separated by f̂ with margin\nBβ\nbT =\n∑T t=1 µ 2 t − 2 log(n+ 1)\n1 B ∑T t=1 log( 1−µt 1+µt ) .\nSince µt ≥ −1/2, it is easy to verify that log(1−µt1+µt ) ≤ 4|µt|. Using this fact and Jensen’s inequality, we have\nBβ\nbT ≥\n( ∑T\nt=1 |µt|)2/T − 2 log(n+ 1) 4 B ∑T t=1 |µt| .\nThe right-hand side is a monotonically increasing function of ∑T\nt=1 |µt|. Plugging in the bound in (40), we find that\nBβ bT ≥ γ 2T/(4B2)− 2 log(n+ 1) 2γT/B2 .\nPlugging in T = 16B 2 log(n+1) γ2\n, some algebra shows that the right-hand side is equal to γ/16 which completes the proof.\nF.2 Proof of part (b) Consider the empirical loss function `(f) := 1n ∑n\ni=1 h(−yif(xi)), where h(t) := max{0, 1 + 16t/γ}. Part (a) implies that `(f̂) = 0 with probability at least 1− δ. Note that h is (16/γ)-Lipschitz continuous; the Rademacher complexity of Nm with respect to n i.i.d. samples is bounded by √ q/nBm (see Lemma 6). By the classical Rademacher generalization bound (Bartlett and Mendelson, 2003, Theorem 8 and Theorem 12), if (x, y) is randomly sampled form P, then we have\nE[h(−yf̂(x))] ≤ `(f̂) + 32B m γ · √ q n + √ 8 log(2/δ) n with probabality at least 1− δ.\nThus, in order to bound the generalization loss by with probability 1 − 2δ, it suffices to choose n = poly(1/ , log(1/δ)). Since h(t) is an upper bound on the zero-one loss I[t ≥ 0], we obtain the claimed bound."
    }, {
      "heading" : "G Proof of Corollary 1",
      "text" : "The first step is to use the improper learning algorithm (Zhang et al., 2015, Algorithm 1) to learn a predictor ĝ that minimizes the following risk function:\n`(g) := E[φ(−ỹg(x))] where φ(t) :=\n{ − 2η1−2η + η(t+γ) (1−η)(1−2η)γ if t ≤ −γ,\n− 2η1−2η + t+γ (1−2η)γ if t > −γ.\nSince η < 1/2, the function φ is convex and Lipschitz continuous. The activation function erf(x) satisfies the condition of (Zhang et al., 2015, Theorem 1). Thus, with sample complexity poly(1/τ, log(1/δ)) and time complexity poly(d, 1/τ, log(1/δ)), the resulting predictor ĝ satisfies\n`(ĝ) ≤ `(f∗) + τ with probability at least 1− δ/3.\nBy the definition of ỹ and φ, it is straightforward to verify that\n`(g) = E[(1− η)φ(−yg(x)) + ηφ(yg(x))] = E[ψ(−yg(x))] (41)\nwhere\nψ(t) :=  0 if t < −γ, 1 + t/γ if −γ ≤ t ≤ γ, 2 + 2η\n2−2η+1 (1−η)(1−2η)γ (t− γ) if t > γ.\nRecall that yf∗(x) ≥ γ almost surely. From the definition of ψ, we have `(f∗) = 0, so that `(ĝ) ≤ `(f∗) + τ implies `(ĝ) ≤ τ . Also note that ψ(t) upper bounds the indicator I[t ≥ 0], so that the right-hand side of equation (41) provides an upper bound on the probability P(sign(g(x)) 6= y). Consequently, defining the classifier ĥ(x) := sign(g(x)), then we have\nP(ĥ(x) 6= y) ≤ `(ĝ) ≤ τ with probability at least 1− δ/3.\nGiven the classifier ĥ, we draw another random dataset of n points taking the form {(xi, yi)}ni=1. If τ = δ3n , then this dataset is equal to {(xi, ĥ(xi))} n i=1 with probability at least 1− 2δ/3. Let the BoostNet algorithm take {(xi, ĥ(xi))}ni=1 as its input. With sample size n = poly(1/ , log(1/δ)), Theorem 4 implies that the algorithm learns a neural network f̂ such that P(sign(f̂(x)) 6= y) ≤ with probability at least 1−δ. Plugging in the assignments of n and τ , the overall sample complexity is poly(1/ , 1/δ) and the overall computation complexity is poly(d, 1/ , 1/δ)."
    }, {
      "heading" : "H Proof of Proposition 2",
      "text" : "We reduce the PAC learning of intersection of T halfspaces to the problem of learning a neural network. Assume that T = Θ(dρ) for some ρ > 0. We claim that for any number of pairs taking the form (x, h∗(x)), there is a neural network f∗ ∈ N2 that separates all pairs with margin γ, and moreover that the margin is bounded as γ = 1/poly(d).\nTo prove the claim, recall that h∗(x) = 1 if and only if h1(x) = · · · = hT (x) = 1 for some h1, . . . , hT ∈ H. For any ht, the definition of H implies that there is a (wt, bt) pair such that if ht(x) = 1 then w T t x − bt − 1/2 ≥ 1/2, otherwise wTt x − bt − 1/2 ≤ −1/2. We consider the two possible choices of the activation function:\n• Piecewise linear function: If σ(x) := min{1,max{−1, x}}, then let\ngt(x) := σ(c(w T t x− bt − 1/2) + 1),\nfor some quantity c > 0. The term inside the activation function can be written as 〈w̃, x′〉 where\nw̃ = (c √ 2d+ 2wt,−c √ 2d+ 2(bt + 1/2), √ 2) and x′ = ( x√\n2d+ 2 , 1√ 2d+ 2 , 1√ 2 ).\nNote that ‖x′‖2 ≤ 1, and with a sufficiently small constant c = 1/poly(d) we have ‖w̃‖2 ≤ 2. Thus, gt(x) is the output of a one-layer neural network. If ht(x) = 1, then gt(x) = 1, otherwise gt(x) ≤ 1− c/2. Now consider the two-layer neural network f(x) := c/4− T + ∑T t=1 gt(x). If h∗(x) = 1, then we have gt(x) = 1 for every t ∈ [T ] which implies f(x) = c/4. If h∗(x) = −1, then we have gt(x) ≤ 1 − c/2 for at least one t ∈ [T ] which implies f(x) ≤ −c/4. Thus, the neural network f separates the data with margin c/4. We normalize the edge weights on the second layer to make f belong to N2. After normalization, the network still has margin 1/poly(d).\n• ReLU function: if σ(x) := max{0, x}, then let gt(x) := σ(−c(wTt x − bt − 1/2)) for some quantity c > 0. We may write the term inside the activation function as 〈w̃, x′〉 where w̃ = (−c √ d+ 1wt, c √ d+ 1(bt + 1/2)) and x ′ = (x, 1)/ √ d+ 1. It is straightforward to verify\nthat ‖x′‖2 ≤ 1, and with a sufficiently small c = 1/poly(d) we have ‖w̃‖2 ≤ 2. Thus, gt(x) is the output of a one-layer neural network. If ht(x) = 1, then gt(x) = 0, otherwise gt(x) ≥ c/2. Let f(x) := c/4 − ∑T t=1 gt(x), then this two-layer neural network separates the data with margin c/4. After normalization the network belongs to N2 and it still separates the data with margin 1/poly(d).\nTo learn the intersection of T halfspaces, we learn a neural network based on n i.i.d. points taking the form (x, h∗(x)). Assume that the neural network is efficiently learnable. Since there exists f∗ ∈ Nm which separates the data with margin γ = 1/poly(d), we can learn a network f̂ in poly(d, 1/ , 1/δ) sample complexity and time complexity, and satisfies P(sign(f̂(x)) 6= h∗(x)) ≤ with probability 1− δ. It contradicts with the assumption that the intersection of T halfspaces is not efficiently learnable."
    } ],
    "references" : [ {
      "title" : "Provable bounds for learning some deep representations",
      "author" : [ "S. Arora", "A. Bhaskara", "R. Ge", "T. Ma" ],
      "venue" : null,
      "citeRegEx" : "Arora et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Arora et al\\.",
      "year" : 2013
    }, {
      "title" : "The power of localization for efficiently learning linear separators with noise",
      "author" : [ "P. Awasthi", "M.F. Balcan", "P.M. Long" ],
      "venue" : "In Proceedings of the 46th Annual ACM Symposium on Theory of Computing,",
      "citeRegEx" : "Awasthi et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Awasthi et al\\.",
      "year" : 2014
    }, {
      "title" : "Efficient learning of linear separators under bounded noise",
      "author" : [ "P. Awasthi", "M.-F. Balcan", "N. Haghtalab", "R. Urner" ],
      "venue" : null,
      "citeRegEx" : "Awasthi et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Awasthi et al\\.",
      "year" : 2015
    }, {
      "title" : "Universal approximation bounds for superpositions of a sigmoidal function",
      "author" : [ "A.R. Barron" ],
      "venue" : "IEEE Transactions on Information Theory,",
      "citeRegEx" : "Barron.,? \\Q1993\\E",
      "shortCiteRegEx" : "Barron.",
      "year" : 1993
    }, {
      "title" : "The sample complexity of pattern classification with neural networks: the size of the weights is more important than the size of the network",
      "author" : [ "P.L. Bartlett" ],
      "venue" : "Information Theory, IEEE Transactions on,",
      "citeRegEx" : "Bartlett.,? \\Q1998\\E",
      "shortCiteRegEx" : "Bartlett.",
      "year" : 1998
    }, {
      "title" : "Rademacher and gaussian complexities: Risk bounds and structural results",
      "author" : [ "P.L. Bartlett", "S. Mendelson" ],
      "venue" : "The Journal of Machine Learning Research,",
      "citeRegEx" : "Bartlett and Mendelson.,? \\Q2003\\E",
      "shortCiteRegEx" : "Bartlett and Mendelson.",
      "year" : 2003
    }, {
      "title" : "Efficient learning of linear perceptrons",
      "author" : [ "S. Ben-David", "H.U. Simon" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Ben.David and Simon.,? \\Q2001\\E",
      "shortCiteRegEx" : "Ben.David and Simon.",
      "year" : 2001
    }, {
      "title" : "Learning halfspaces with the zero-one loss: time-accuracy tradeoffs",
      "author" : [ "A. Birnbaum", "S.S. Shwartz" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Birnbaum and Shwartz.,? \\Q2012\\E",
      "shortCiteRegEx" : "Birnbaum and Shwartz.",
      "year" : 2012
    }, {
      "title" : "Training a 3-node neural network is NP-complete",
      "author" : [ "A. Blum", "R.L. Rivest" ],
      "venue" : "Neural Networks,",
      "citeRegEx" : "Blum and Rivest.,? \\Q1992\\E",
      "shortCiteRegEx" : "Blum and Rivest.",
      "year" : 1992
    }, {
      "title" : "A polynomial-time algorithm for learning noisy linear threshold functions",
      "author" : [ "A. Blum", "A. Frieze", "R. Kannan", "S. Vempala" ],
      "venue" : null,
      "citeRegEx" : "Blum et al\\.,? \\Q1998\\E",
      "shortCiteRegEx" : "Blum et al\\.",
      "year" : 1998
    }, {
      "title" : "Noise-tolerant learning, the parity problem, and the statistical query model",
      "author" : [ "A. Blum", "A. Kalai", "H. Wasserman" ],
      "venue" : "Journal of the ACM,",
      "citeRegEx" : "Blum et al\\.,? \\Q2003\\E",
      "shortCiteRegEx" : "Blum et al\\.",
      "year" : 2003
    }, {
      "title" : "From average case complexity to improper learning complexity",
      "author" : [ "A. Daniely", "N. Linial", "S. Shalev-Shwartz" ],
      "venue" : "In Proceedings of the 46th Annual ACM Symposium on Theory of Computing,",
      "citeRegEx" : "Daniely et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Daniely et al\\.",
      "year" : 2014
    }, {
      "title" : "An elementary proof of the Johnson-Lindenstrauss lemma",
      "author" : [ "S. Dasgupta", "A. Gupta" ],
      "venue" : "International Computer Science Institute,",
      "citeRegEx" : "Dasgupta and Gupta.,? \\Q1999\\E",
      "shortCiteRegEx" : "Dasgupta and Gupta.",
      "year" : 1999
    }, {
      "title" : "A decision-theoretic generalization of on-line learning and an application to boosting",
      "author" : [ "Y. Freund", "R.E. Schapire" ],
      "venue" : "Journal of Computer and System Sciences,",
      "citeRegEx" : "Freund and Schapire.,? \\Q1997\\E",
      "shortCiteRegEx" : "Freund and Schapire.",
      "year" : 1997
    }, {
      "title" : "Hardness of learning halfspaces with noise",
      "author" : [ "V. Guruswami", "P. Raghavendra" ],
      "venue" : "SIAM Journal on Computing,",
      "citeRegEx" : "Guruswami and Raghavendra.,? \\Q2009\\E",
      "shortCiteRegEx" : "Guruswami and Raghavendra.",
      "year" : 2009
    }, {
      "title" : "Training a sigmoidal node is hard",
      "author" : [ "D.R. Hush" ],
      "venue" : "Neural Computation,",
      "citeRegEx" : "Hush.,? \\Q1999\\E",
      "shortCiteRegEx" : "Hush.",
      "year" : 1999
    }, {
      "title" : "Generalization bounds for neural networks through tensor factorization",
      "author" : [ "M. Janzamin", "H. Sedghi", "A. Anandkumar" ],
      "venue" : null,
      "citeRegEx" : "Janzamin et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Janzamin et al\\.",
      "year" : 2015
    }, {
      "title" : "Lecture note: Rademacher composition and linear prediction",
      "author" : [ "S. Kakade", "A. Tewari" ],
      "venue" : null,
      "citeRegEx" : "Kakade and Tewari.,? \\Q2008\\E",
      "shortCiteRegEx" : "Kakade and Tewari.",
      "year" : 2008
    }, {
      "title" : "On the complexity of linear prediction: Risk bounds, margin bounds, and regularization",
      "author" : [ "S.M. Kakade", "K. Sridharan", "A. Tewari" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Kakade et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Kakade et al\\.",
      "year" : 2009
    }, {
      "title" : "Agnostically learning halfspaces",
      "author" : [ "A.T. Kalai", "A.R. Klivans", "Y. Mansour", "R.A. Servedio" ],
      "venue" : "SIAM Journal on Computing,",
      "citeRegEx" : "Kalai et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Kalai et al\\.",
      "year" : 2008
    }, {
      "title" : "Embedding hard learning problems into gaussian space. Approximation, Randomization, and Combinatorial Optimization",
      "author" : [ "A. Klivans", "P. Kothari" ],
      "venue" : "Algorithms and Techniques,",
      "citeRegEx" : "Klivans and Kothari.,? \\Q2014\\E",
      "shortCiteRegEx" : "Klivans and Kothari.",
      "year" : 2014
    }, {
      "title" : "Cryptographic hardness for learning intersections of halfspaces",
      "author" : [ "A.R. Klivans", "A. Sherstov" ],
      "venue" : "In 47th Annual IEEE Symposium on Foundations of Computer Science,",
      "citeRegEx" : "Klivans and Sherstov,? \\Q2006\\E",
      "shortCiteRegEx" : "Klivans and Sherstov",
      "year" : 2006
    }, {
      "title" : "Learning halfspaces with malicious noise",
      "author" : [ "A.R. Klivans", "P.M. Long", "R.A. Servedio" ],
      "venue" : "The Journal of Machine Learning Research,",
      "citeRegEx" : "Klivans et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Klivans et al\\.",
      "year" : 2009
    }, {
      "title" : "Empirical margin distributions and bounding the generalization error of combined classifiers",
      "author" : [ "V. Koltchinskii", "D. Panchenko" ],
      "venue" : "Annals of Statistics,",
      "citeRegEx" : "Koltchinskii and Panchenko.,? \\Q2002\\E",
      "shortCiteRegEx" : "Koltchinskii and Panchenko.",
      "year" : 2002
    }, {
      "title" : "Probability in Banach Spaces: isoperimetry and processes, volume 23",
      "author" : [ "M. Ledoux", "M. Talagrand" ],
      "venue" : "Springer Science & Business Media,",
      "citeRegEx" : "Ledoux and Talagrand.,? \\Q2013\\E",
      "shortCiteRegEx" : "Ledoux and Talagrand.",
      "year" : 2013
    }, {
      "title" : "Norm-based capacity control in neural networks",
      "author" : [ "B. Neyshabur", "R. Tomioka", "N. Srebro" ],
      "venue" : null,
      "citeRegEx" : "Neyshabur et al\\.,? \\Q1993\\E",
      "shortCiteRegEx" : "Neyshabur et al\\.",
      "year" : 1993
    }, {
      "title" : "On the equivalence of weak learnability and linear separability",
      "author" : [ "versity", "MA Cambridge", "2001. S. Shalev-Shwartz", "Y. Singer" ],
      "venue" : null,
      "citeRegEx" : "versity et al\\.,? \\Q2001\\E",
      "shortCiteRegEx" : "versity et al\\.",
      "year" : 2001
    } ],
    "referenceMentions" : [ {
      "referenceID" : 13,
      "context" : "The learning of a halfspace is the core problem solved by many machine learning methods, including the Perceptron (Rosenblatt, 1958), the Support Vector Machine (Vapnik, 1998) and AdaBoost (Freund and Schapire, 1997).",
      "startOffset" : 189,
      "endOffset" : 216
    }, {
      "referenceID" : 14,
      "context" : "In particular, Guruswami and Raghavendra (2009) show that, for any ∈ (0, 1/2], given a set of",
      "startOffset" : 15,
      "endOffset" : 48
    }, {
      "referenceID" : 14,
      "context" : "In fact, the result of Guruswami and Raghavendra (2009) shows that the approximation ratio of such procedures could be arbitrarily large.",
      "startOffset" : 23,
      "endOffset" : 56
    }, {
      "referenceID" : 13,
      "context" : "This so-called BoostNet algorithm uses the AdaBoost approach (Freund and Schapire, 1997) to construct a m-layer neural network by taking an (m − 1)-layer network as a weak classifier.",
      "startOffset" : 61,
      "endOffset" : 88
    }, {
      "referenceID" : 14,
      "context" : "It is known that for any constant approximation ratio, the problem of approximately minimizing the zero-one loss is computationally hard (Guruswami and Raghavendra, 2009; Daniely et al., 2014).",
      "startOffset" : 137,
      "endOffset" : 192
    }, {
      "referenceID" : 11,
      "context" : "It is known that for any constant approximation ratio, the problem of approximately minimizing the zero-one loss is computationally hard (Guruswami and Raghavendra, 2009; Daniely et al., 2014).",
      "startOffset" : 137,
      "endOffset" : 192
    }, {
      "referenceID" : 19,
      "context" : "When the label noise is adversarial, the halfspace can be learned if the data distribution is isotropic log-concave and the fraction of labels being corrupted is bounded by a small quantity (Kalai et al., 2008; Klivans et al., 2009; Awasthi et al., 2014).",
      "startOffset" : 190,
      "endOffset" : 254
    }, {
      "referenceID" : 22,
      "context" : "When the label noise is adversarial, the halfspace can be learned if the data distribution is isotropic log-concave and the fraction of labels being corrupted is bounded by a small quantity (Kalai et al., 2008; Klivans et al., 2009; Awasthi et al., 2014).",
      "startOffset" : 190,
      "endOffset" : 254
    }, {
      "referenceID" : 1,
      "context" : "When the label noise is adversarial, the halfspace can be learned if the data distribution is isotropic log-concave and the fraction of labels being corrupted is bounded by a small quantity (Kalai et al., 2008; Klivans et al., 2009; Awasthi et al., 2014).",
      "startOffset" : 190,
      "endOffset" : 254
    }, {
      "referenceID" : 7,
      "context" : "Indeed, Blum et al. (1998) and Servedio and Valiant (2001) show that if the labels are corrupted by random noise, then the halfspace can be learned in polynomial time.",
      "startOffset" : 8,
      "endOffset" : 27
    }, {
      "referenceID" : 7,
      "context" : "Indeed, Blum et al. (1998) and Servedio and Valiant (2001) show that if the labels are corrupted by random noise, then the halfspace can be learned in polynomial time.",
      "startOffset" : 8,
      "endOffset" : 59
    }, {
      "referenceID" : 1,
      "context" : "The same conclusion was established by Awasthi et al. (2015) when the labels are corrupted by Massart noise, and the covariates are drawn from the uniform distribution on a unit sphere.",
      "startOffset" : 39,
      "endOffset" : 61
    }, {
      "referenceID" : 17,
      "context" : "on the noise, Kalai et al. (2008) show that if the data are drawn from the uniform distribution on a unit sphere, then there is an algorithm whose time complexity is polynomial in the input dimension, but exponential in 1/ (where is the additive error).",
      "startOffset" : 14,
      "endOffset" : 34
    }, {
      "referenceID" : 17,
      "context" : "on the noise, Kalai et al. (2008) show that if the data are drawn from the uniform distribution on a unit sphere, then there is an algorithm whose time complexity is polynomial in the input dimension, but exponential in 1/ (where is the additive error). In this same setting, Klivans and Kothari (2014) prove that the exponential dependence on 1/ is unavoidable.",
      "startOffset" : 14,
      "endOffset" : 303
    }, {
      "referenceID" : 6,
      "context" : "Ben-David and Simon (2001) suggest comparing the zero-one loss of the learned halfspace to the optimal μ-margin loss.",
      "startOffset" : 0,
      "endOffset" : 27
    }, {
      "referenceID" : 6,
      "context" : "Ben-David and Simon (2001) suggest comparing the zero-one loss of the learned halfspace to the optimal μ-margin loss. The μ-margin loss asserts that all points whose classification margins are smaller than μ should be marked as misclassified. Under this metric, it was shown by Ben-David and Simon (2001); Birnbaum and Shwartz (2012) that the optimal μ-margin loss can be achieved in polynomial time if μ is a positive constant.",
      "startOffset" : 0,
      "endOffset" : 305
    }, {
      "referenceID" : 6,
      "context" : "Ben-David and Simon (2001) suggest comparing the zero-one loss of the learned halfspace to the optimal μ-margin loss. The μ-margin loss asserts that all points whose classification margins are smaller than μ should be marked as misclassified. Under this metric, it was shown by Ben-David and Simon (2001); Birnbaum and Shwartz (2012) that the optimal μ-margin loss can be achieved in polynomial time if μ is a positive constant.",
      "startOffset" : 0,
      "endOffset" : 334
    }, {
      "referenceID" : 6,
      "context" : "Ben-David and Simon (2001) suggest comparing the zero-one loss of the learned halfspace to the optimal μ-margin loss. The μ-margin loss asserts that all points whose classification margins are smaller than μ should be marked as misclassified. Under this metric, it was shown by Ben-David and Simon (2001); Birnbaum and Shwartz (2012) that the optimal μ-margin loss can be achieved in polynomial time if μ is a positive constant. Shalev-Shwartz et al. (2011) study the minimization of a continuous approximation to the zero-one loss, which is similar to our setup.",
      "startOffset" : 0,
      "endOffset" : 458
    }, {
      "referenceID" : 3,
      "context" : "2 Learning neural networks It is known that any smooth function can be approximated by a neural network with just one hidden layer (Barron, 1993), but that training such a network is NP-hard (Blum and Rivest, 1992).",
      "startOffset" : 131,
      "endOffset" : 145
    }, {
      "referenceID" : 8,
      "context" : "2 Learning neural networks It is known that any smooth function can be approximated by a neural network with just one hidden layer (Barron, 1993), but that training such a network is NP-hard (Blum and Rivest, 1992).",
      "startOffset" : 191,
      "endOffset" : 214
    }, {
      "referenceID" : 0,
      "context" : "Arora et al. (2013) study the recovery of denoising auto-encoders.",
      "startOffset" : 0,
      "endOffset" : 20
    }, {
      "referenceID" : 0,
      "context" : "Arora et al. (2013) study the recovery of denoising auto-encoders. They assume that the top-layer values of the network are randomly generated and all network weights are randomly drawn from {−1, 1}. As a consequence, the bottom layer generates a sequence of random observations from which the algorithm can recover the network weights. The algorithm has polynomial-time complexity and is capable of learning random networks that are drawn from a specific distribution. However, in practice people want to learn deterministic networks that encode data-dependent representations. Sedghi and Anandkumar (2014) study the supervised learning of neural networks under the assumption that the score function of the data distribution is known.",
      "startOffset" : 0,
      "endOffset" : 608
    }, {
      "referenceID" : 0,
      "context" : "Arora et al. (2013) study the recovery of denoising auto-encoders. They assume that the top-layer values of the network are randomly generated and all network weights are randomly drawn from {−1, 1}. As a consequence, the bottom layer generates a sequence of random observations from which the algorithm can recover the network weights. The algorithm has polynomial-time complexity and is capable of learning random networks that are drawn from a specific distribution. However, in practice people want to learn deterministic networks that encode data-dependent representations. Sedghi and Anandkumar (2014) study the supervised learning of neural networks under the assumption that the score function of the data distribution is known. They show that if the input dimension is large enough and the network is sparse enough, then the first network layer can be learned by a polynomial-time algorithm. More recently, Janzamin et al. (2015) propose another algorithm relying on the score function that removes the restrictions of Sedghi and Anandkumar (2014).",
      "startOffset" : 0,
      "endOffset" : 939
    }, {
      "referenceID" : 0,
      "context" : "Arora et al. (2013) study the recovery of denoising auto-encoders. They assume that the top-layer values of the network are randomly generated and all network weights are randomly drawn from {−1, 1}. As a consequence, the bottom layer generates a sequence of random observations from which the algorithm can recover the network weights. The algorithm has polynomial-time complexity and is capable of learning random networks that are drawn from a specific distribution. However, in practice people want to learn deterministic networks that encode data-dependent representations. Sedghi and Anandkumar (2014) study the supervised learning of neural networks under the assumption that the score function of the data distribution is known. They show that if the input dimension is large enough and the network is sparse enough, then the first network layer can be learned by a polynomial-time algorithm. More recently, Janzamin et al. (2015) propose another algorithm relying on the score function that removes the restrictions of Sedghi and Anandkumar (2014). The assumption in this case is that the network weights satisfy a non-degeneracy condition; however, the algorithm is only capable of learning neural networks with one hidden layer.",
      "startOffset" : 0,
      "endOffset" : 1057
    }, {
      "referenceID" : 0,
      "context" : "Arora et al. (2013) study the recovery of denoising auto-encoders. They assume that the top-layer values of the network are randomly generated and all network weights are randomly drawn from {−1, 1}. As a consequence, the bottom layer generates a sequence of random observations from which the algorithm can recover the network weights. The algorithm has polynomial-time complexity and is capable of learning random networks that are drawn from a specific distribution. However, in practice people want to learn deterministic networks that encode data-dependent representations. Sedghi and Anandkumar (2014) study the supervised learning of neural networks under the assumption that the score function of the data distribution is known. They show that if the input dimension is large enough and the network is sparse enough, then the first network layer can be learned by a polynomial-time algorithm. More recently, Janzamin et al. (2015) propose another algorithm relying on the score function that removes the restrictions of Sedghi and Anandkumar (2014). The assumption in this case is that the network weights satisfy a non-degeneracy condition; however, the algorithm is only capable of learning neural networks with one hidden layer. Our algorithm does not impose any assumption on the data distribution, and is able to learn multilayer neural networks. Another approach to the problem is via the improper learning framework. The goal in this case is to find a predictor that is not a neural network, but performs as well as the best possible neural network in terms of the generalization error. Livni et al. (2014) propose a polynomial-time algorithm to learn networks whose activation function is quadratic.",
      "startOffset" : 0,
      "endOffset" : 1622
    }, {
      "referenceID" : 0,
      "context" : "Arora et al. (2013) study the recovery of denoising auto-encoders. They assume that the top-layer values of the network are randomly generated and all network weights are randomly drawn from {−1, 1}. As a consequence, the bottom layer generates a sequence of random observations from which the algorithm can recover the network weights. The algorithm has polynomial-time complexity and is capable of learning random networks that are drawn from a specific distribution. However, in practice people want to learn deterministic networks that encode data-dependent representations. Sedghi and Anandkumar (2014) study the supervised learning of neural networks under the assumption that the score function of the data distribution is known. They show that if the input dimension is large enough and the network is sparse enough, then the first network layer can be learned by a polynomial-time algorithm. More recently, Janzamin et al. (2015) propose another algorithm relying on the score function that removes the restrictions of Sedghi and Anandkumar (2014). The assumption in this case is that the network weights satisfy a non-degeneracy condition; however, the algorithm is only capable of learning neural networks with one hidden layer. Our algorithm does not impose any assumption on the data distribution, and is able to learn multilayer neural networks. Another approach to the problem is via the improper learning framework. The goal in this case is to find a predictor that is not a neural network, but performs as well as the best possible neural network in terms of the generalization error. Livni et al. (2014) propose a polynomial-time algorithm to learn networks whose activation function is quadratic. Zhang et al. (2015) propose an algorithm for improper learning of sigmoidal neural networks.",
      "startOffset" : 0,
      "endOffset" : 1736
    }, {
      "referenceID" : 24,
      "context" : "This lemma is based on a slight sharpening of the usual Ledoux-Talagrand contraction for Rademacher variables (Ledoux and Talagrand, 2013); see Appendix A for the proof.",
      "startOffset" : 110,
      "endOffset" : 138
    }, {
      "referenceID" : 12,
      "context" : "See the paper by Dasgupta and Gupta (1999) for a simple proof.",
      "startOffset" : 17,
      "endOffset" : 43
    }, {
      "referenceID" : 3,
      "context" : "Maurey-Barron-Jones lemma: Letting G be a subset of any Hilbert space H, the MaureyBarron-Jones lemma guarantees that any point v in the convex hull of G can be approximated by a convex combination of a small number of points of G. More precisely, we have: Lemma 3. Consider any subset G of any Hilbert space such that ‖g‖H ≤ b for all g ∈ G. Then for any point v is in the convex hull of G, there is a point vs in the convex hull of s points of G such that ‖v − vs‖H ≤ b2/s. See the paper by Pisier (1980) for a proof.",
      "startOffset" : 7,
      "endOffset" : 507
    }, {
      "referenceID" : 15,
      "context" : "We note that Hush (1999) proved a similar hardness result, but without the unit-norm constraint on w∗ and {xi}i=1.",
      "startOffset" : 13,
      "endOffset" : 25
    }, {
      "referenceID" : 4,
      "context" : "This regularization scheme has been studied by Bartlett (1998); Koltchinskii and Panchenko (2002); Bartlett and Mendelson (2003); Neyshabur et al.",
      "startOffset" : 47,
      "endOffset" : 63
    }, {
      "referenceID" : 4,
      "context" : "This regularization scheme has been studied by Bartlett (1998); Koltchinskii and Panchenko (2002); Bartlett and Mendelson (2003); Neyshabur et al.",
      "startOffset" : 47,
      "endOffset" : 98
    }, {
      "referenceID" : 4,
      "context" : "This regularization scheme has been studied by Bartlett (1998); Koltchinskii and Panchenko (2002); Bartlett and Mendelson (2003); Neyshabur et al.",
      "startOffset" : 47,
      "endOffset" : 129
    }, {
      "referenceID" : 4,
      "context" : "This regularization scheme has been studied by Bartlett (1998); Koltchinskii and Panchenko (2002); Bartlett and Mendelson (2003); Neyshabur et al. (2015). Assuming a constant `1-norm bound might be restrictive for some applications, but without this norm constraint, the neural network class activated by any sigmoid-like or ReLU-like function is not efficiently learnable (Zhang et al.",
      "startOffset" : 47,
      "endOffset" : 154
    }, {
      "referenceID" : 13,
      "context" : "It uses the AdaBoost approach (Freund and Schapire, 1997) to construct the network, and we refer to it as the BoostNet algorithm.",
      "startOffset" : 30,
      "endOffset" : 57
    }, {
      "referenceID" : 22,
      "context" : "Our proof relies on the hardness of standard (nonagnostic) PAC learning of the intersection of halfspaces given in Klivans et al. (2006). More precisely, consider the family of halfspace indicator functions mapping X = {−1, 1}d to {−1, 1} given by H = {x→ sign(wx− b− 1/2) : x ∈ {−1, 1}, b ∈ N, w ∈ N, |b|+ ‖w‖1 ≤ poly(d)}.",
      "startOffset" : 115,
      "endOffset" : 137
    }, {
      "referenceID" : 22,
      "context" : "Klivans et al. (2006) show that if T = Θ(dρ) then HT is not efficiently learnable under a certain cryptographic assumption.",
      "startOffset" : 0,
      "endOffset" : 22
    } ],
    "year" : 2015,
    "abstractText" : "We study non-convex empirical risk minimization for learning halfspaces and neural networks. For loss functions that are L-Lipschitz continuous, we present algorithms to learn halfspaces and multi-layer neural networks that achieve arbitrarily small excess risk > 0. The time complexity is polynomial in the input dimension d and the sample size n, but exponential in the quantity (L/ ) log(L/ ). These algorithms run multiple rounds of random initialization followed by arbitrary optimization steps. We further show that if the data is separable by some neural network with constant margin γ > 0, then there is a polynomial-time algorithm for learning a neural network that separates the training data with margin Ω(γ). As a consequence, the algorithm achieves arbitrary generalization error > 0 with poly(d, 1/ ) sample and time complexity. We establish the same learnability result when the labels are randomly flipped with probability η < 1/2.",
    "creator" : "LaTeX with hyperref package"
  }
}