{
  "name" : "1605.07147.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Fast stochastic optimization on Riemannian manifolds",
    "authors" : [ "Hongyi Zhang", "Sashank J. Reddi" ],
    "emails" : [ "hongyiz@mit.edu", "sjakkamr@cs.cmu.edu", "suvrit@mit.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "We study the following rich class of (possibly nonconvex) finite-sum optimization problems:\nmin x∈X⊂M\nf(x) , 1\nn n∑ i=1 fi(x), (1)\nwhere (M, g) is a Riemannian manifold with the Riemannian metric g, and X is a geodesically convex set. We further assume that each fi :M→ R is geodesically L-smooth (see §2). Problem (1) is fundamental to machine learning, where it typically arises in the context of empirical risk minimization, albeit usually in its vector space incarnation. It also captures numerous widely used problems such as principal component analysis (PCA), independent component analysis (ICA), dictionary learning, mixture modeling, among others (please see the related work section).\nThe linear space version of (1) where M = Rd has been the subject of intense algorithmic development in machine learning and optimization, starting with the classical work of Robbins and Monro [22] to the recent spate of work on variance reduction methods [7; 14; 16; 21; 24]. However, when M is nonlinear Riemannian manifold, much less attention has been paid [5; 32].\nWhen solving problems with manifold constraints, one common approach is to alternate between optimizing in the ambient Euclidean space and “projecting” onto the manifold. For example, two well-known methods to compute the leading eigenvector of symmetric matrices, power iteration and Oja’s algorithm [19], are in essence projected gradient and projected stochastic gradient algorithms. For certain manifolds (e.g., positive definite matrices), projections can be too expensive to compute.\nAn effective alternative is to use Riemannian optimization1, which directly operates on the manifold in question. With this Riemannian optimization turns the constrained optimization problem (1) into an unconstrained one defined on the manifold, and thus, “projection-free.” More importantly, is its conceptual\n1Riemannian optimization is optimization on a known manifold structure. Note the distinction from manifold learning, which attempts to learn a manifold structure from data.\nar X\niv :1\n60 5.\n07 14\n7v 1\n[ m\nat h.\nO C\n] 2\n3 M\nay 2\nvalue: viewing a problem through the Riemannian lens, one can discover new insights into the geometry of a problem, which can even lead to better optimization algorithms.\nAlthough the Riemannian approach is very appealing, our knowledge of it is fairly limited. In particular, there is little analysis about its global complexity (a.k.a. non-asymptotic convergence rate), in part due to the difficulty posed by the nonlinear metric. It is only recently that Zhang and Sra [32] developed the first global complexity analysis of full and stochastic gradient methods for geodesically convex functions. However, the batch and stochastic gradient methods in [32] suffer from problems similar to their vector space counterparts. For solving finite sum problems with n components, the full-gradient method requires n derivatives at each step; the stochastic method requires only one derivative but at the expense of vastly slower O(1/ 2) convergence to an -accurate solution.\nThese issues have driven much of the recent progress on faster stochastic optimization in vector spaces by using variance reduction [7; 14; 24]. However, all of these works critically rely on properties of vector spaces; thus, using them in the context of Riemannian manifolds poses major challenges. Given the potentially vast scope Riemannian optimization and its growing number of applications, developing fast stochastic for it is very important: it will help us apply Riemannian optimization to large-scale problems, while offering a new set of algorithmic tools for the practitioner’s repertoire.\nContributions. In light of the above motivation, let us summarize our key contributions below.\n• We introduce Riemannian SVRG (Rsvrg), a variance reduced Riemannian stochastic gradient method based on SVRG [14]. We analyze Rsvrg for geodesically strongly convex functions through a novel theoretical analysis that accounts for the nonlinear (curved) geometry of the manifold to yield linear convergence rates. A noteworthy byproduct of our analysis is a generalization of a classic lemma from convex optimization (see Lemma 2) that may be of independent interest.\n• Inspired by the exciting advances in variance reduction for nonconvex optimization [2; 21], we generalize convergence analysis of Rsvrg to (geodesically) nonconvex functions and also to gradient dominated functions (see §2 for the definition). Our analysis provides the first stochastic Riemannian method this is provably superior to both batch and stochastic (Riemannian) gradient methods for nonconvex finite-sum problems.\n• Using a Riemannian formulation and applying our result for (geodesically) gradient-dominated functions, we provide new insights, and a short transparent analysis explaining fast convergence of variance reduced PCA for computing the leading eigenvector of a symmetric matrix.\nTo our knowledge, this paper provides the first stochastic gradient method with global linear convergence rates for geodesically strongly convex functions, as well as first non-asymptotic convergence rates for geodesically nonconvex optimization (even in the batch case). Our analysis reveals how manifold geometry, in particular its curvature impacts convergence rates. We illustrate the benefits of Rsvrg by showing an application to computing leading eigenvectors of a symmetric matrix, as well as for accelerating the computation of the Riemannian centroid of covariance matrices, a problem that has received great attention in the literature [4; 12; 32].\nRelated Work. Variance reduction techniques, such as control variates, are widely used in Monte Carlo simulations [23]. In linear spaces, variance reduced methods for solving finite-sum problems have recently witnessed a huge surge of interest [e.g. 3; 7; 14; 16; 24; 31]. They have been shown to accelerate stochastic optimization for strongly convex objectives, convex objectives, nonconvex fi (i ∈ [n]), and even when both f and fi (i ∈ [n]) are nonconvex [2; 21]. Reddi et al. [21] further proved global linear convergence for gradient dominated nonconvex problems. Our analysis is inspired by [14; 21], but applies to the substantially more general Riemannian optimization setting.\nReferences of Riemannian optimization can be found in [1; 29], where analysis is limited to asymptotic convergence (except [29, Theorem 4.2] which proved linear rate convergence for first-order line search method with bounded and positive definite hessian). Stochastic Riemannian optimization has been previously considered in [5; 17], though with only asymptotic convergence analysis, and without any rates. Many applications of Riemannian optimization are known, including matrix factorization on fixed-rank manifold [28; 30], dictionary learning [6; 27], optimization under orthogonality constraints [8; 18], learning elliptical\ndistributions [26; 33], and Gaussian mixture models [11]. Notably, some nonconvex Euclidean problems are geodesically convex, for which Riemannian optimization can provide similar guarantees to convex optimization. Zhang and Sra [32] provide the first global complexity analysis for first-order Riemannian algorithms, but their analysis is restricted to geodesically convex problems with full or stochastic gradients. In contrast, we propose Rsvrg, a variance reduced Riemannian stochastic gradient algorithm, and analyze its global complexity for both geodesically convex and nonconvex problems."
    }, {
      "heading" : "2 Preliminaries",
      "text" : "Before formally discussing Riemannian optimization, let us recall some foundational concepts of Riemannian geometry. For a thorough review one can refer to any classic text, e.g.,[20].\nA Riemannian manifold (M, g) is a real smooth manifold M equipped with a Riemannain metric g. The metric g induces an inner product structure in each tangent space TxM associated with every x ∈M. We denote the inner product of u, v ∈ TxM as 〈u, v〉 , gx(u, v); and the norm of u ∈ TxM is defined as ‖u‖ , √ gx(u, u). The angle between u, v is defined as arccos 〈u,v〉 ‖u‖‖v‖ . A geodesic is constant speed curve γ : [0, 1]→M that is locally distance minimizing. An exponential map Expx : TxM→M maps v in TxM to y onM, such that there is a geodesic γ with γ(0) = x, γ(1) = y and γ̇(0) , ddtγ(0) = v. If between any two points in X ⊂M there is a unique geodesic, the exponential map has an inverse Exp−1x : X → TxM and the geodesic is the unique shortest path with ‖Exp−1x (y)‖ = ‖Exp −1 y (x)‖ the geodesic distance between x, y ∈ X .\nParallel transport Γyx : TxM → TyM maps a vector v ∈ TxM to Γyxv ∈ TyM, while preserving norm, and roughly speaking, “direction,” analogous to translation in Rd. A tangent vector of a geodesic γ remains tangent if parallel transported along γ. Parallel transport preserves inner products.\nThe geometry of a Riemannian manifold is determined by its Riemannian metric tensor through various characterization of curvatures. Let u, v ∈ TxM be linearly independent, so that they span a two dimensional subspace of TxM. Under the exponential map, this subspace is mapped to a two dimensional submanifold of U ⊂M. The sectional curvature κ(x,U) is defined as the Gauss curvature of U at x. As we will mainly analyze manifold trigonometry, for worst-case analysis, it is sufficient to consider sectional curvature.\nFunction Classes. We now define some key terms. A set X is called geodesically convex if for any x, y ∈ X , there is a geodesic γ with γ(0) = x, γ(1) = y and γ(t) ∈ X for t ∈ [0, 1]. Throughout the paper, we assume that the function f in (1) is defined on a geodesically convex set X on a Riemannian manifold M.\nWe call a function f : X → R geodesically convex (g-convex) if for any x, y ∈ X and any geodesic γ such that γ(0) = x, γ(1) = y and γ(t) ∈ X for t ∈ [0, 1], it holds that\nf(γ(t)) ≤ (1− t)f(x) + tf(y).\nIt can be shown that if the inverse exponential map is well-defined, an equivalent definition is that for any x, y ∈ X , f(y) ≥ f(x) + 〈gx,Exp−1x (y)〉, where gx is a subgradient of f at x (or the gradient if f is differentiable). A function f : X → R is called geodesically µ-strongly convex (µ-strongly g-convex) if for any x, y ∈ X and subgradient gx, it holds that\nf(y) ≥ f(x) + 〈gx,Exp−1x (y)〉+ µ 2 ‖Exp −1 x (y)‖2.\nWe call a vector field g : X → Rd geodesically L-Lipschitz (L-g-Lipschitz) if for any x, y ∈ X ,\n‖g(x)− Γxyg(y)‖ ≤ L‖Exp −1 x (y)‖,\nwhere Γxy is the parallel transport from y to x. We call a differentiable function f : X → R geodesically L-smooth (L-g-smooth) if its gradient is L-g-Lipschitz, in which case we have\nf(y) ≤ f(x) + 〈gx,Exp−1x (y)〉+ L2 ‖Exp −1 x (y)‖2.\nWe say f : X → R is τ -gradient dominated if x∗ is a global minimizer of f and for every x ∈ X\nf(x)− f(x∗) ≤ τ‖∇f(x)‖2. (2)\nWe recall the following trigonometric distance bound that is essential for our analysis:\nLemma 1 ([5; 32]). If a, b, c are the side lengths of a geodesic triangle in a Riemannian manifold with sectional curvature lower bounded by κmin, and A is the angle between sides b and c (defined through inverse exponential map and inner product in tangent space), then\na2 ≤ √ |κmin|c\ntanh( √ |κmin|c) b2 + c2 − 2bc cos(A). (3)\nAn Incremental First-order Oracle (IFO) in (1) takes and i ∈ [n] and a point x ∈ X , and returns a pair (fi(x),∇fi(x)) ∈ R× TxM. We measure non-asymptotic complexity in terms of IFO calls."
    }, {
      "heading" : "3 Riemannian SVRG",
      "text" : "In this section we introduce Rsvrg formally. We make the following standing assumptions: (a) f attains its optimum at x∗ ∈ X ; (b) X is compact, and the diameter of X is bounded by D, that is, maxx,y∈X d(x, y) ≤ D; (c) the sectional curvature in X is upper bounded by κmax, and within X the exponential map is invertible; and (d) the sectional curvature in X is lower bounded by κmin. We define the following two key geometric constants that capture the impact of manifold curvature:\nζ =  √ |κmin|D tanh( √ |κmin|D) , if κmin < 0,\n1, if κmin ≥ 0, and σ =\n{ √ κmaxD\ntan( √ κmaxD) , if κmax > 0, 1, if κmax ≤ 0.\nWe note that most (if not all) practical manifold optimization problems can satisfy these assumptions. Our proposed Rsvrg algorithm is shown in Algorithm 1. Compared with its Euclidean SVRG, it differs in two key aspects: the variance reduction step uses parallel transport to combine gradients from different tangent spaces; and the exponential map is used (instead of the update xs+1t − ηvs+1t )."
    }, {
      "heading" : "3.1 Convergence analysis for geodesically convex (g-convex) functions",
      "text" : "In this section, we analyze global complexity of Rsvrg for solving (1), where each fi (i ∈ [n]) is g-convex and f is strongly g-convex. Crucial to our proof is Lemma 2 that generalizes a classic result from convex optimization.\nLemma 2. For any x, y ∈ X , if fi is g-convex and L-g-smooth, then\n‖∇fi(x)− Γxy∇fi(y)‖2 ≤ 2L ( fi(x)− fi(y)− 〈∇fi(y),Exp−1y (x)〉 ) .\nNote that in vector space, this lemma has a textbook proof: define φy(z) , fi(z)− fi(y)− 〈∇fi(y), z− y〉, then we simply need to prove 0 = φy(y) ≤ φy ( x− 1L∇φy(x) ) ≤ φy(x)− 12L‖∇φy(x)‖\n2, which is true since fi is convex and φy is also L-smooth. However, on a Riemannian manifold this proof does not work, as the term 〈∇fi(y),Exp−1y (x)〉 is not “linear” – in fact, it can even be nonsmooth for some Riemannian metrics. However, the following proof shows that the lemma still holds regardless of the underlying Riemannian metric.\nAlgorithm 1: Rsvrg (x0,m, η, S)\nParameters: update frequency m, learning rate η, number of epochs S initialize x̃0 = x0; for s = 0, 1, . . . , S − 1 do\nxs+10 = x̃ s; gs+1 = 1 n ∑n i=1∇fi(x̃\ns); for t = 0, 1, . . . ,m− 1 do\nRandomly pick it ∈ {1, . . . , n}; vs+1t = ∇fit(xs+1t )− Γ xs+1t x̃s ( ∇fit(x̃s)− gs+1 ) ; xs+1t+1 = Expxs+1t ( −ηvs+1t ) ;\nend Option I: set x̃s+1 = xs+1t for randomly chosen t ∈ {0, . . . ,m− 1}; Option II: set x̃s+1 = xs+1m ;\nend Option I: output xa = x̃ S ; Option II: output xa chosen uniformly randomly from {{xs+1t }m−1t=0 } S−1 s=0 .\nProof. Let γ(t) : [0, 1]→M be the geodesic from y to x with γ(0) = y, γ(1) = x. We then have\nfi(x)− fi(y) = ∫ 1 0 〈∇fi(γ(t)), γ̇(t)〉dt = ∫ 1 0 〈 Γ γ(t) y ∇fi(y) + ∫ t 0 Γ γ(t) γ(s)∇ 2fi(γ(s))γ̇(s)ds, γ̇(t) 〉 dt\n= 〈∇fi(y),Exp−1y (x)〉+ ∫ 1 0 ∫ t 0 〈 Γ γ(t) γ(s)∇ 2fi(γ(s))γ̇(s), γ̇(t) 〉 dsdt\n= 〈∇fi(y),Exp−1y (x)〉+ ∫ 1 0 ∫ t 0 〈 ∇2fi(γ(s))γ̇(s), γ̇(s) 〉 dsdt (4)\nNow consider the variational problem(s)\nmin fi\n∫ t 0 〈 ∇2fi(γ(s))γ̇(s), γ̇(s) 〉 ds, ∀t ∈ [0, 1] (5)\ns.t. ∫ 1 0 Γxγ(s)∇ 2fi(γ(s))γ̇(s)ds = ∇fi(x)− Γxy∇fi(y) (6)\nWe now verify that an fi minimize all the objectives in (5) if and only if it satisfies\n∇2fi(γ(s))γ̇(s) ≡ { 0, s ∈ [0, λ) Lγ̇(s) s ∈ [λ, 1]\n(7)\nand ∫ 1 λ Γxγ(s)Lγ̇(s)ds = ∇fi(x)− Γ x y∇fi(y)\nwhere\nλ , 1− ‖∇fi(x)− Γxy∇fi(y)‖\nL‖γ̇(1)‖ In fact, since fi is g-convex, 〈 ∇2fi(γ(s))γ̇(s), γ̇(s) 〉 must be nonnegative, thus ∇2fi that satisfy (7) must minimize (5) for t ∈ [0, λ). On the other hand, no ∇2fi can make a smaller value of the integral in (5) over the interval [λ, t] for any t ∈ [λ, 1), since otherwise it would have to violate the L-g-smooth assumption in the interval (t, 1] to meet the constraint (6).\nWith the above argument, we plug the solution (7) into (4), whereby\nfi(x)− fi(y) ≥ 〈∇fi(y),Exp−1y (x)〉+ ∫ 1 0 ∫ t λ 〈Lγ̇(s), γ̇(s)〉 dsdt\n= 〈∇fi(y),Exp−1y (x)〉+ 12L‖∇fi(x)− Γ x y∇fi(y)‖2,\nwhich completes the proof of the lemma.\nWe are now ready to state our main theorem for this section, which shows that Rsvrg has linear convergence rate for solving (1) when fi (i ∈ [n]) is g-convex and f is strongly g-convex. This is in contrast with the O(1/t) rate of Riemannian stochastic gradient algorithm [32].\nTheorem 1. Assume in (1) each fi is g-convex and L-g-smooth, f is µ-strongly g-convex, and the sectional curvature in X is lower bounded by κmin; let x∗ denote the optimal solution to (1). If we run Algorithm 1 with Option I, step size η > 0, and epoch length m such that\nα = (µmη(1− 2ζηL))−1 + 2ζηL(1− 2ζηL)−1 < 1,\nthen with S outer loops, the Riemannian SVRG algorithm produces an iterate xa that satisfies\nE[f(xa)− f(x∗)] ≤ αSE[f(x0)− f(x∗)].\nThe critical part of the proof of Theorem 1 is bounding the squared distance (Lemma 1) and the gradient variance (Lemma 2). The rest of the proof follows the structure of the original SVRG proof [14]. For completeness, we provide a complete proof in the Appendix. Theorem 1 leads to the following more digestible corollary on the global complexity of the algorithm:\nCorollary 1. With assumptions and parameter settings in Theorem 1, after O((n+ ζLµ ) log( 1 )) IFO calls, the output xa of Algorithm 1 satisfies E[f(xa)− f(x∗)] ≤ .\nWe give a proof with specific parameter choices in the appendix. Observe the dependence on ζ in our result: for κmin < 0, we have ζ > 1, which implies that negative space curvature adversarially affects convergence rate; while for κmin ≥ 0, we have ζ = 1, which implies that for nonnegatively curved manifolds, Rsvrg has the same complexity as SVRG. In the rest of our analysis we will see a similar effect of sectional curvature; this phenomenon seems innate to manifold optimization (also see [32]).\nWhen each fi is L-g-smooth and g-convex, but f is not strongly g-convex, the following result holds:\nTheorem 2. If in (1) each fi (i ∈ [n]) is g-convex and L-g-smooth, f is not strongly g-convex, and the sectional curvature in X lies in the range [κmin, κmax]. If we use Algorithm 1 with Option I to optimize f ,x 0 (x) = ∑n i=1 f ,x0 i (x), where f ,x0 i (x) , fi(x) + 2‖Exp −1 x0 (x)‖ 2 (rsp. ∇f ,x 0 i (x) = ∇fi(x)− Exp −1 x (x 0)), then the IFO complexity of computing an -accurate solution for f is O((n+ ζ 2\nσ + ζL σ ) log( 1 )).\nWe give a proof in appendix. Note that both lower and upper bounds of sectional curvature play a role, since the Riemannian hessian of ‖Exp−1x0 (x)‖ 2 depends on the space curvature."
    }, {
      "heading" : "3.2 Convergence analysis for geodesically nonconvex functions",
      "text" : "In this section, we analyze global complexity of Rsvrg for solving (1), where each fi is only required to be L-g-smooth, and neither fi nor f need be g-convex. We measure convergence to a stationary point using ‖∇f(x)‖2 following [10]. Note, however, that here ∇f(x) ∈ TxM and ‖∇f(x)‖ is defined via the inner product in TxM. We first note that Riemannian-SGD on nonconvex L-g-smooth problems attains O(1/ 2) convergence as SGD [10] holds; we relegate the details to the appendix.\nRecently, two groups independently proved that variance reduction also benefits stochastic gradient methods for nonconvex smooth finite-sum optimization problems, with different analysis [2; 21]. Our analysis for nonconvex Rsvrg is inspired by [21]. Our main result for this section is Theorem 3.\nTheorem 3. Assume in (1) each fi is L-g-smooth, the sectional curvature in X is lower bounded by κmin, and we run Algorithm 1 with Option II. Then there exist universal constants µ0 ∈ (0, 1), ν > 0 such that if we set η = µ0/(Ln α1ζα2) (0 < α1 ≤ 1 and 0 ≤ α2 ≤ 2), m = bn3α1/2/(3µ0ζ1−2α2)c and T = mS, we have\nE[‖∇f(xa)‖2] ≤ Ln α1ζα2 [f(x0)−f(x∗)]\nTν ,\nwhere x∗ is an optimal solution to (1).\nThe key challenge in proving Theorem 3 in the Riemannian setting is to incorporate the impact of using a nonlinear metric. Similar to the g-convex case, the curvature impacts the convergence, notably through the constant ζ that depends on a lower-bound on sectional curvature.\nReddi et al. [21] suggested setting α1 = 2/3, in which case we obtain the following corollary.\nAlgorithm 2: GD-SVRG(x0,m, η, S,K)\nParameters: update frequency m, learning rate η, number of epochs S, K, x0 for k = 0, . . . ,K − 1 do xk+1 = Rsvrg(xk,m, η, S) with Option II; end Output: xK\nCorollary 2. With assumptions and parameters in Theorem 3, choosing α1 = 2/3, the IFO complexity for achieving an -accurate solution is:\nIFO calls =\n{ O ( n+ (n2/3ζ1−α2/ ) ) , if α2 ≤ 1/2,\nO ( nζ2α2−1 + (n2/3ζα2/ ) ) , if α2 > 1/2.\nSetting α1 = 2/3, α2 = 1/2 in Corollary 2 immediately leads to Corollary 3:\nCorollary 3. With assumptions in Theorem 3 and parameters from Corollary 3, the IFO complexity for achieving an -accurate solution is O ( n+ (n2/3ζ1/2/ ) ) .\nThe same reasoning allows us to also capture the class of gradient dominated functions (2), for which Reddi et al. [21] proved that SVRG converges linearly to a global optimum. We have the following corresponding theorem for Rsvrg:\nTheorem 4. Suppose that in addition to assumptions in Theorem 3, f is τ -gradient dominated. Then if we run Algorithm 2 with η = µ1/(Ln 2/3ζ1/2),m = bn/(3µ1)c, S = d(6 + 18µ1n−3 )Lτζ 1/2µ1/(ν1n 1/3)e, we have\nE[‖∇f(xK)‖2] ≤ 2−K‖∇f(x0)‖2, E[f(xK)− f(x∗)] ≤ 2−K [f(x0)− f(x∗)].\nWe summarize the implication of Theorem 4 as follows (note the dependency on curvature):\nCorollary 4. With Algorithm 2 and the parameters in Theorem 4, the IFO complexity to compute an -accurate solution for gradient dominated function f is O((n+ Lτζ1/2n2/3) log(1/ ))."
    }, {
      "heading" : "4 Applications",
      "text" : ""
    }, {
      "heading" : "4.1 Computing the leading eigenvector",
      "text" : "In this section, we apply our analysis of Rsvrg for gradient dominated functions (Theorem 4) to fast eigenvector computation, a fundamental problem that is still being actively researched in the big-data setting [9; 13; 25]. For the problem of computing the leading eigenvector, i.e.,\nmin x>x=1\n−x> (∑n\ni=1 zz>\n) x , −x>Ax = f(x), (8)\nexisting analyses for state-of-the-art algorithms typically result in O(1/δ2) dependency on the eigengap δ of A, as opposed to the conjectured O(1/δ) dependency [25], as well as the O(1/δ) dependency of power iteration. Here we give new support for the O(1/δ) conjecture. Our key observation is that, although Problem (8) seen as one in Rd is nonconvex, with negative semidefinite Hessian everywhere, and has nonlinear constraints, on the hypersphere Sd−1 it is unconstrained, and has gradient dominated objective. In particular we have the following result:\nTheorem 5. Suppose A has eigenvalues λ1 > λ2 ≥ · · · ≥ λd and δ = λ1 − λ2. With probability 1− p, the random initialization x0 falls in a Riemannian ball of a global optimum of the objective function, within which the objective function is O( dp2δ )-gradient dominated.\nWe provide the proof of Theorem 5 in appendix. What remains to be shown is that with a constant stepsize and with high probability (both independent of δ), the iterates remain in such type of Riemannian\nball. Once this is shown, applying Corollary 4 one can immediately prove the O(1/δ) dependency conjecture. We leave this analysis as future work.\nWe implement Riemannian SVRG for PCA, and use the code for VR-PCA in [25]. Analytic forms for exponential map and parallel transport on hypersphere can be found in [1]. We conduct well-controlled experiments comparing their performance and showing empirically the O(1/δ) dependency. Specifically, for each δ = 10−3/k where k = 1, . . . , 25, we generate a d×n matrix Z where d = 103, n = 104 using the method Z = UDV > as described in [25]. All the matrices share the same U, V and only differ in δ (thus also in D). We also fix the same random initialization x0 and random seed for generating the stochastic gradient sequence. As a result, the only variable in different runs is δ. We run both algorithms on each matrix for 50 epochs. For every five epochs, we evaluate the algorithm’s average convergence speed, and estimate the number of epochs required to double its accuracy. This number can serve as an indicator of the global complexity of the algorithm. We plot this number for different epochs against 1/δ, shown in Figure 2. Note that the performance of RSVRG and VR-PCA with the same stepsize is very similar, which implies a close connection of the two. Indeed, the update x+v‖x+v‖ used in [25] and others is a well-known approximation to the exponential map Expx(v) with small stepsize (a.k.a. retraction)."
    }, {
      "heading" : "4.2 Computing the Riemannian centroid",
      "text" : "In this subsection we validate that Rsvrg converges linearly for averaging PSD matrices, which is a geodesically strongly convex problem, yet nonconvex in Euclidean space. This problem has been studied both in matrix computation and in various applications [4; 12]. We use the same experiment setting as described in [32], and compare Rsvrg against Riemannian full gradient (RGD) and stochastic gradient (RSGD) algorithms (Figure 3).\nNote that the objective is sum of squared Riemannian distances on a nonpositively curved space, thus is (2N)-strongly g-convex and (2Nζ)-g-smooth. With a reasonable initialization, the conditional number ζ is under control, in which case we choose m = n and the optimal stepsize for Rsvrg is O(1/(ζN3/2)). For all the experiments, we set η = 1\n10N3/2 for Rsvrg, and use suggested parameters from [32] for other algorithms."
    }, {
      "heading" : "5 Discussion",
      "text" : "We introduce Riemannian SVRG, the first (to the best of our knowledge) variance reduced stochastic gradient algorithm for Riemannian optimization. In addition, we analyze its global complexity for optimizing geodesically strongly convex, convex, and nonconvex functions, explicitly showing their dependence on sectional curvature. Our experiments validate our analysis that Riemannian SVRG is much faster than full gradient and stochastic gradient methods for solving finite-sum optimization problems on Riemannian manifolds.\nOur analysis of computing the leading eigenvector as a Riemannian optimization problem is also worth noting: a nonconvex problem with nonpositive Hessian and nonlinear constraints in the ambient space turns out to be gradient dominated on the manifold. We believe this shows the promise of theoretical study of Riemannian optimization, and geometric optimization in general, and we hope it encourages other researchers in the community to join this endeavor.\nOur work also has limitations – most practical Riemannian optimization algorithms use retraction and vector transport to efficiently approximate the exponential map and parallel transport, which we do not analyze in this work. A systematic study of retraction and vector transport is an important topic for future research."
    }, {
      "heading" : "Appendix: Fast Stochastic Optimization on Riemannian Manifolds",
      "text" : ""
    }, {
      "heading" : "A Proofs for Section 3.1",
      "text" : "A.1 Strongly g-convex objective\nTheorem 1. Assume in (1) each fi is g-convex, and f is µ-strongly g-convex, then if we run Algorithm 1 with Option I and parameters that satisfy\nα = 1\nµmη(1− 2ζηL) +\n2ζηL\n1− 2ζηL < 1\nthen with S outer loops, the Riemannian SVRG algorithm produces an iterate xa that satisfies\nE[f(xa)− f(x∗)] ≤ αSE[f(x0)− f(x∗)].\nProof. Using Lemma 2 and the fact that ∇f(x∗) = 0, and summing the inequality over i = 1, . . . , n, we obtain\n1\nn n∑ i=1 ‖∇fi(x)− Γxx∗∇fi(x∗)‖2 ≤ 2L(f(x)− f(x∗)) (9)\nSince vs+1t = ∇fit(xs+1t )−Γ xs+1t x̃s ( ∇fit(x̃s)− gs+1 ) , conditioned on xs+1t and taking expectation with respect to it, we obtain:\nE‖vs+1t ‖2 ≤ 2E‖∇fit(xs+1t )− Γ xs+1t x∗ fit(x ∗)‖2 + 2E‖∇fit(x̃s)− Γx̃ s x∗∇fit(x∗)−∇f(x̃s)‖2\n= 2E‖∇fit(xs+1t )− Γ xs+1t x∗ fit(x ∗)‖2 + 2E‖ ( ∇fit(x̃s)− Γx̃ s x∗∇fit(x∗) )\n− E ( ∇fit(x̃s)− Γx̃ s x∗∇fit(x∗) ) ‖2\n≤ 2E‖∇fit(xs+1t )− Γ xs+1t x∗ fit(x ∗)‖2 + 2E‖∇fit(x̃s)− Γx̃ s x∗∇fit(x∗)‖2 ≤ 4L(f(xs+1t )− f(x∗) + f(x̃s)− f(x∗))\nThe first inequality uses ‖a+ b‖2 ≤ 2‖a‖2 + 2‖b‖2 and µ̃ = ∇f(x̃s). The second inequality uses E‖ξ−Eξ‖2 = E‖ξ‖2 − ‖Eξ‖2 ≤ E‖ξ‖2 for any random vector ξ in any tangent space. The third inequality uses Eq. (9).\nNotice that Evs+1t = ∇f(xs+1t ) and xs+1t+1 = Expxs+1t (−ηv s+1 t ), we thus have\nEd2(xs+1t+1 , x ∗) ≤ d2(xs+1t , x∗) + 2η〈Exp−1xs+1t (x ∗),Evt〉+ ζη2E‖vt‖2\n≤ d2(xs+1t , x∗) + 2η〈Exp−1xs+1t (x ∗),∇f(xs+1t )〉 + 4ζη2L(f(xs+1t )− f(x∗) + f(x̃s)− f(x∗)) ≤ d2(xs+1t , x∗) + 2η(f(x∗)− f(xs+1t )) + 4ζη2L(f(xs+1t )− f(x∗) + f(x̃s)− f(x∗)) = d2(xs+1t , x\n∗)− 2η(1− 2ζηL)(f(xs+1t )− f(x∗)) + 4ζη2L(f(x̃s)− f(x∗))\nThe first inequality uses the trigonometric distance lemma, the second one uses previously obtained bound for E‖vt‖2, and the third one uses g-convexity of f(x).\nSince we sample x̃s+1 uniformly, by summing the previous inequality over t = 1, . . . ,m, taking expectation\nwith all the history, we obtain\nEd2(xs+1m , x∗) + 2mη(1− 2ζηL)(f(x̃s+1)− f(x∗)) ≤ Ed2(xs+10 , x∗) + 4mζη2L(f(x̃s)− f(x∗)) = Ed2(x̃s, x∗) + 4mζη2L(f(x̃s)− f(x∗))\n≤ 2 µ E(f(x̃s)− f(x∗)) + 4mζη2LE(f(x̃s)− f(x∗)) = 2(µ−1 + 2mζη2L)E(f(x̃s)− f(x∗))\nThe second inequality holds since f is µ-strongly g-convex. We thus obtain E[f(x̃s+1)− f(x∗)] ≤ [ 1\nµmη(1− 2ζηL) +\n2ζηL\n1− 2ζηL\n] E[f(x̃s)− f(x∗)]. (10)\nwhich gives us E[f(xa)− f(x∗)] = E[f(x̃S)− f(x∗)] ≤ αSE[f(x̃0)− f(x∗)].\nCorollary 1. With assumptions as in Theorem 1 and properly chosen parameters, after O((n+ ζLµ ) log( 1 )) IFO calls, the output xa satisfies E[f(xa)− f(x∗)] ≤ .\nProof. We develop the proof by finding suitable choices for stepsize η and full gradient update frequency m. Towards this goal, we minimize α with respect to stepsize η. Solving the equation\n∂α ∂η = 0,\nwe obtain\nη∗ = 1\nµm\n(√ µm\n2ζL + 1− 1 ) Settingm = d 48ζLµ e and η = 1 12ζL , we get α ≤ 1/2. Since each update requires two IFO calls, we thus know from Theorem 1 that with S(n+ d 96ζLµ e) IFO calls, the output xa satisfies E[f(xa)− f(x ∗)] ≤ 2−SE[f(x̃0)− f(x∗)]. Let 2−SE[f(x̃0)− f(x∗)] ≤ and solve for S, it is easy to see the total amount of IFO calls for an -accurate solution is O((n+ ζLµ ) log( 1 )).\nA.2 Non-strongly g-convex objective\nWhen each fi is L-g-smooth and g-convex, but f is not strongly g-convex, we can use the same perturbation trick as in [16; 31]. That is, we optimize a perturbed objective f ,x 0\n, f + 2‖Exp −1 x0 (x)‖ 2. Karcher [15,\nTheorem 1.2] proved that the function 12‖Exp −1 x0 (x)‖ 2 is σ-strongly g-convex in X assuming √κmaxD < π/4. On the other hand, Lemma 1 implies that 12‖Exp −1 x0 (x)‖\n2 is ζ-g-smooth. Since ∇f ,x0 = ∇f − Exp−1x (x0), we can simply add − Exp−1x (x0) to each gradient-like object in Algorithm 1. Applying Theorem 1 to the perturbed function, we obtain the following result.\nTheorem 2. Suppose in (1) each fi is g-convex and L-g-smooth, f is not strongly g-convex, and the sectional curvature in X is in the range [κmin, κmax]. If we use Algorithm 1 with Option I to optimize f ,x 0 (x) = ∑n i=1 f ,x0 i (x), where f ,x0 i (x) , fi(x) + 2‖Exp −1 x0 (x)‖ 2 (rsp. ∇f ,x 0 i (x) = ∇fi(x)− Exp −1 x (x 0)), then the IFO complexity of computing an -accurate solution for f is O((n+ ζ 2\nσ + ζL σ ) log( 1 )).\nProof. Since 12‖Exp −1 x0 (x)‖ 2 is ζ-g-smooth and σ-strongly g-convex, we have that each f ,x 0 i (x) is (L+ ζ )-gsmooth and (σ )-strongly g-convex. Let m = d 48ζ(L+ζ )σ e, η = 1 12ζ(L+ζ ) , apply the analysis in the proof of Corollary 1, we get\nE[f ,x 0\n(x̃S)−min x f ,x\n0 (x)] ≤ 2−SE[f ,x 0\n(x0)−min x f ,x\n0\n(x)] (11)\nNote that f(x∗) ≤ minx f ,x 0 (x) ≤ f ,x0(x∗) where x∗ is an optimal solution of f . We thus have\nE[f(x̃S)− f(x∗)] = E[f ,x 0 (x̃S)− f ,x 0 (x∗)] + 2 E[‖Exp−1x0 (x ∗)‖2 − ‖Exp−1x0 (x̃ S)‖2]\n≤ E[f ,x 0\n(x̃S)−min x f ,x\n0\n(x)] + 2 E[‖Exp−1x0 (x ∗)‖2]\n≤ 2−SE[f ,x 0\n(x0)−min x f ,x\n0\n(x)] + 2 E[‖Exp−1x0 (x ∗)‖2]\n≤ 2−SE[f(x0)− f(x∗)] + 2 E[‖Exp−1x0 (x ∗)‖2]\nwhere the first inequality is due to minx f ,x0(x) ≤ f ,x0(x∗) and ‖Exp−1x0 (x̃ S)‖2 ≥ 0, the second inequality is due to (11), the third inequality is due to f ,x 0 (x0) = f(x0) and f(x∗) = minx f(x) ≤ minx f ,x 0\n(x). Now it is easy to see that with S = O(log( 1 )) epochs, the output xa = x̃ S of Algorithm 1 with Option I can reach\n-accuracy. The total number of IFO calls is S(n+ 2m) = O((n+ ζ 2\nσ + ζL σ ) log( 1 ))."
    }, {
      "heading" : "B Proofs for Section 3.2",
      "text" : "Theorem 6. Assuming the inverse exponential map is well-defined on X , f : X → R is a geodesically L-smooth function, stochastic first-order oracle ∇f̃(x) satisfies E[∇f̃(xt)] = ∇f(xt), ‖∇f̃(xt)‖2 ≤ σ2, then the SGD algorithm xt+1 = Expxt(−η∇f̃(xt)) with η = c/ √ T , c = √ 2(f(x0)−f(x∗)) Lσ2 satisfies\nmin 0≤t≤T−1\nE[‖∇f(xt)‖2] ≤ √\n2(f(x0)− f(x∗))L T σ.\nProof.\nE[f(xt+1)] ≤ E[f(xt) + 〈∇f(xt),Exp−1xt (x t+1)〉+ L 2 ‖Exp−1xt (x t+1)‖2]\n≤ E[f(xt)]− ηE[‖∇f(xt)‖2] + Lη 2\n2 E[‖∇f̃(xt)‖2]\n≤ E[f(xt)]− ηE[‖∇f(xt)‖2] + Lη 2\n2 σ2\nAfter rearrangement, we obtain\nE[‖∇f(xt)‖2] ≤ 1 η E[f(xt)− f(xt+1)] + Lη 2 σ2\nSumming up the above equation from t = 0 to T − 1 and using η = c/ √ T where\nc =\n√ 2(f(x0)− f(x∗))\nLσ2\nwe obtain\nmin t E[‖∇f(xt)‖2] ≤ 1 T T−1∑ t=0 E[‖f(xt)‖2] ≤ 1 Tη E[f(x0)− f(xT )] + Lη 2 σ2\n≤ 1 Tη (f(x0)− f(x∗)) + Lη 2 σ2\n≤ √\n2(f(x0)− f(x∗))L T σ\nLemma 3. Assume in (1) each fi is L-g-smooth, the sectional curvature in X is lower bounded by κmin, and we run Algorithm 1 with Option II. For ct, ct+1, β, η > 0, suppose we have\nct = ct+1 ( 1 + βη + 2ζL2η2 ) + L3η2\nand δ(t) = η − ct+1η\nβ − Lη2 − 2ct+1ζη2 > 0,\nthen the iterate xs+1t satisfies the bound:\nE [ ‖∇f(xs+1t )‖2 ] ≤ Rs+1t −Rs+1t+1\nδt\nwhere Rs+1t := E[f(x s+1 t ) + ct‖Expx̃s(xs+1t )‖2] for 0 ≤ s ≤ S − 1.\nProof. Since f is L-smooth we have\nE[f(xs+1t+1 )] ≤ E[f(x s+1 t ) + 〈∇f(xs+1t ),Exp−1xs+1t (x s+1 t+1 )〉+\nL 2 ‖Exp−1 xs+1t (xs+1t+1 )‖2]\n≤ E[f(xs+1t )− η‖∇f(xs+1t )‖2 + Lη2\n2 ‖vs+1t ‖2] (12)\nConsider now the Lyapunov function\nRs+1t := E[f(x s+1 t ) + ct‖Expx̃s(xs+1t )‖2]\nFor bounding it we will require the following:\nE[‖Exp−1x̃s (x s+1 t+1 )‖2] ≤ E[‖Exp −1 x̃s (x s+1 t )‖2 + ζ‖Exp−1xs+1t (x s+1 t+1 )‖2\n− 2〈Exp−1 xs+1t (xs+1t+1 ),Exp −1 xs+1t (x̃s)〉]\n= E[‖Exp−1x̃s (x s+1 t )‖2 + ζη2‖vs+1t ‖2\n+ 2η〈∇f(xs+1t ),Exp−1xs+1t (x̃ s)〉]\n≤ E[‖Exp−1x̃s (x s+1 t )‖2 + ζη2‖vs+1t ‖2] + 2ηE [ 1\n2β ‖∇f(xs+1t )‖2 +\nβ 2 ‖Exp−1x̃s (x s+1 t )‖2\n] (13)\nwhere the first inequality is due to Lemma 1, the second due to 2〈a, b〉 ≤ 1β ‖a‖ 2 + β‖b‖2. Plugging Equation (12) and Equation (13) into Rs+1t+1 , we obtain the following bound:\nRs+1t+1 ≤ E[f(x s+1 t )− η‖∇f(xs+1t )‖2 +\nLη2\n2 ‖vs+1t ‖2]\n+ ct+1E[‖Exp−1x̃s (x s+1 t )‖2 + ζη2‖vs+1t ‖2] + 2ct+1ηE [ 1\n2β ‖∇f(xs+1t )‖2 +\nβ 2 ‖Exp−1x̃s (x s+1 t )‖2 ] = E [ f(xs+1t )− ( η − ct+1η\nβ\n) ‖∇f(xs+1t )‖2 ] + ( Lη2\n2 + ct+1ζη\n2 ) E [ ‖vs+1t ‖2 ] + (ct+1 + ct+1ηβ)E [ ‖Exp−1x̃s (x s+1 t )‖2 ] (14)\nIt remains to bound E [ ‖vs+1t ‖2 ] . Denoting ∆s+1t = ∇fit(xs+1t ) − Γ xs+1t x̃s ∇fit(x̃s), we have E[∆ s+1 t ] = ∇f(xs+1t )− Γ xs+1t x̃s ∇f(x̃s), and thus\nE [ ‖vs+1t ‖2 ] = E [ ‖∆s+1t + Γ xs+1t x̃s ∇f(x̃ s)‖2 ]\n= E [ ‖∆s+1t − E[∆s+1t ] +∇f(xs+1t )‖2 ] ≤ 2E[‖∆s+1t − E[∆s+1t ]‖2] + 2E[‖∇f(xs+1t )‖2] ≤ 2E[‖∆s+1t ‖2] + 2E[‖∇f(xs+1t )‖2] ≤ 2L2E[‖Exp−1x̃s (x s+1 t )‖2] + 2E[‖∇f(xs+1t )‖2] (15)\nwhere the first inequality is due to ‖a+b‖2 ≤ 2‖a‖2 +2‖b‖2, the second due to E‖ξ−Eξ‖2 = E‖ξ‖2−‖Eξ‖2 ≤ E‖ξ‖2 for any random vector ξ in any tangent space, the third due to L-g-smooth assumption. Substituting Equation (15) into Equation (14) we get\nRs+1t+1 ≤ E [ f(xs+1t )− ( η − ct+1η\nβ − Lη2 − 2ct+1ζη2\n) ‖∇f(xs+1t )‖2 ] + ( ct+1 ( 1 + βη + 2ζL2η2 ) + L3η2 ) E [ ‖Exp−1x̃s (x s+1 t )‖2\n] = Rs+1t − ( η − ct+1η\nβ − Lη2 − 2ct+1ζη2\n) E [ ‖∇f(xs+1t )‖2 ] (16)\nRearranging terms completes the proof. Theorem 7. With assumptions as in Lemma 3, let cm = 0, η > 0, β > 0, and ct = ct+1 ( 1 + βη + 2ζL2η2 ) + L3η2 such that δ(t) > 0 for 0 ≤ t ≤ m− 1. Define the quantity δn := mint δ(t), and let T = mS. Then for the output xa from Option II we have\nE[‖∇f(xa)‖2] ≤ f(x0)− f(x∗)\nTδn\nProof. Using Lemma 3 and telescoping the sum, we obtain\nm−1∑ t=0 E[‖∇f(xs+1t )‖2] ≤ Rs+10 −Rs+1m δn\nSince cm = 0 and x s+1 0 = x̃ s, we thus have\nm−1∑ t=0 E[‖∇f(xs+1t )‖2] ≤ E[f(x̃s)− f(x̃s+1)] δn , (17)\nNow sum over all epochs to obtain\n1\nT S−1∑ s=0 m−1∑ t=0 E[‖∇f(xs+1t )‖2] ≤ f(x̃0)− f(x∗) Tδn (18)\nNote the definition of xa implies that the left hand side of (18) is exactly E[‖∇f(xa)‖2].\nTheorem 3. Assume in (1) each fi is L-g-smooth, the sectional curvature in X is lower bounded by κmin, and we run Algorithm 1 with Option II. Then there exist universal constants µ0 ∈ (0, 1), ν > 0 such that if we set η = µ0/(Ln α1ζα2) (0 < α1 ≤ 1 and 0 ≤ α2 ≤ 2), m = bn3α1/2/(3µ0ζ1−2α2)c and T = mS, we have\nE[‖∇f(xa)‖2] ≤ Lnα1ζα2 [f(x0)− f(x∗)]\nTν ,\nwhere x∗ is an optimal solution to the problem in (1).\nProof. Let β = Lζ1−α2/nα1/2. From the recurrence relation ct = ct+1 ( 1 + βη + 2ζL2η2 ) + L3η2 and cm = 0 we have\nc0 = µ20L n2α1ζ2α2 (1 + θ)m − 1 θ ,\nwhere\nθ = ηβ + 2ζη2L2 = µ0ζ\n1−2α2\nn3α1/2 +\n2µ20ζ 1−2α2 n2α1 ∈ ( µ0ζ 1−2α2 n3α1/2 , 3µ0ζ 1−2α2 n3α1/2 ) .\nNotice that θ < 1/m so that (1 + θ)m < e. We can thus bound c0 by\nc0 ≤ µ0L\nnα1/2ζ (e− 1)\nand in turn bound δn by\nδn = min t\n( η − ct+1η\nβ − η2L− 2ct+1ζη2 ) ≥ ( η − c0η\nβ − η2L− 2c0ζη2 ) ≥ η ( 1− µ0(e− 1)\nζ2−α2 − µ0 nα1ζα2 − 2µ 2 0(e− 1) n3α1/2ζα2 ) ≥ ν Lnα1ζα2\nwhere the last inequality holds for small enough µ0, as ζ, n ≥ 1. For example, it holds for µ0 = 1/10, ν = 1/2. Substituting the above bound in Theorem 7 concludes the proof.\nCorollary 2. With assumptions and parameters in Theorem 3, choosing α1 = 2/3, the IFO complexity for achieving an -accurate solution is:\nIFO calls =\n{ O ( n+ (n2/3ζ1−α2/ ) ) , if α2 ≤ 1/2,\nO ( nζ2α2−1 + (n2/3ζα2/ ) ) , if α2 > 1/2.\nProof. Note that to reach an -accurate solution, O(nα1ζα2/(m )) = O(1+n−1/3ζ1−α2/ ) epochs are required. On the other hand, one epoch takes O ( n(1 + ζ2α2−1) ) IFO calls. Thus the total amount of IFO calls is\nO ( n(1 + ζ2α2−1)(1 + n−1/3ζ1−α2/ ) ) . Simplify to get the stated result.\nTheorem 4. Suppose that in addition to assumptions in Theorem 3, f is τ -gradient dominated. Then if we run Algorithm 2 with η = µ1/(Ln 2/3ζ1/2),m = bn/(3µ1)c, S = d(6 + 18µ1n−3 )Lτζ 1/2µ1/(ν1n 1/3)e, we have\nE[‖∇f(xK)‖2] ≤ 2−K‖∇f(x0)‖2,\nand E[f(xK)− f(x∗)] ≤ 2−K [f(x0)− f(x∗)].\nProof. Apply Theorem 3. Observe that for each run of Algorithm 1 with Option II we now have T = mS ≥ 2Lτn2/3ζ1/2/ν1, which implies\n1 τ E[f(xk+1)− f(x∗)] ≤ E[‖∇f(xk+1)‖2] ≤ 1 2τ E[f(xk)− f(x∗)] ≤ 1 2 E[‖∇f(xk)‖2]\nThe theorem follows by recursive application of the above inequality.\nCorollary 4. With Algorithm 2 and the parameters in Theorem 4, the IFO complexity to compute an -accurate solution for gradient dominated function f is O((n+ Lτζ1/2n2/3) log(1/ )).\nProof. We need O((n+m)S) = O(n+Lτζ1/2n2/3) IFO calls in a run of Algorithm 1 to double the accuracy, thus in Algorithm 2, K = O(log(1/ )) runs are needed to reach -accuracy."
    }, {
      "heading" : "C Proof for Section 4.1",
      "text" : "Theorem 5. Suppose A has eigenvalues λ1 > λ2 ≥ · · · ≥ λd and δ = λ1 − λ2. With probability 1− p, the random initialization x0 falls in a Riemannian ball of a global optimum of the objective function, within which the objective function is O( dp2δ )-gradient dominated.\nProof. We write x in the basis of A’s eigenvectors {vi}di=1 with corresponding eigenvalues λ1 > λ2 ≥ · · · ≥ λd, i.e. x = ∑d i=1 αivi. Thus Ax = ∑d i=1 αiλivi and f(x) = − ∑d i=1 α 2 iλi. The Riemannian gradient of\nf(x) is Px∇f(x) = −2(I − xx>)Ax = −2(Ax + f(x)x) = −2 ∑d i=1 αi(λi − ∑d j=1 α 2 jλj)vi. Now consider a Riemannian ball on the hypersphere defined by B , {x : x ∈ Sd−1, α1 ≥ }, note that the center of B is the first eigenvector. We apply a case by case argument with respect to f(x)− f(x∗). If f(x)− f(x∗) ≥ δ2 , we can lower bound the gradient by\n1 4‖Px∇f(x)‖\n2 = ∑d\ni=1 α2i\n( λi − ∑d j=1 α2jλj )2 ≥ α21 ( λ1 − ∑d j=1 α2jλj )2 = α21 (f(x)− f(x∗)) 2\n≥ 12α 2 1δ(f(x)− f(x∗)) ≥ 12 2δ(f(x)− f(x∗))\nThe last equality follows from the fact that f(x∗) = −λ1 and f(x) = − ∑d i=1 α 2 iλi. On the other hand, if f(x)− f(x∗) < δ2 , for i = 2, . . . , d, since −λi − f(x ∗) ≥ δ, we have −λi − f(x) > 12 (−λi − f(x\n∗)) ≥ δ/2. We can, again, lower bound the gradient by\n‖Px∇f(x)‖2 = 4 ∑d\ni=1 α2i\n( λi − ∑d j=1 α2jλj )2 ≥ 4 ∑d i=2 α2i ( λi − ∑d j=1 α2jλj )2 ≥ ∑d\ni=2 α2i (λ1 − λi)\n2 ≥ δ ∑d\ni=2 α2i (λ1 − λi) = δ(f(x)− f(x∗))\nCombining the two cases, we have that within B the objective function (8) is min{ 12 2δ , 1 δ }-gradient dominated. Finally, observe that if x0 is chosen uniformly at random on Sd−1, then with probability at least 1 − p, α21 = Ω( p2 d ), i.e. there exists some constant c > 0 such that 1 2 ≤ cd p2 ."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2016,
    "abstractText" : "<lb>We study optimization of finite sums of geodesically smooth functions on Riemannian manifolds.<lb>Although variance reduction techniques for optimizing finite-sum problems have witnessed a huge surge of<lb>interest in recent years, all existing work is limited to vector space problems. We introduce Riemannian<lb>SVRG, a new variance reduced Riemannian optimization method. We analyze this method for both<lb>geodesically smooth convex and nonconvex functions. Our analysis reveals that Riemannian SVRG comes<lb>with advantages of the usual SVRG method, but with factors depending on manifold curvature that<lb>influence its convergence. To the best of our knowledge, ours is the first fast stochastic Riemannian<lb>method. Moreover, our work offers the first non-asymptotic complexity analysis for nonconvex Riemannian<lb>optimization (even for the batch setting). Our results have several implications; for instance, they offer<lb>a Riemannian perspective on variance reduced PCA, which promises a short, transparent convergence<lb>analysis.",
    "creator" : "LaTeX with hyperref package"
  }
}