{
  "name" : "1311.7184.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Using multiple samples to learn mixture models",
    "authors" : [ "Jason Lee", "Ran Gilad-Bachrach" ],
    "emails" : [ "jdl17@stanford.edu", "rang@microsoft.com", "rcaruana@microsoft.com" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "The mixture model has been studied extensively from several directions. In one setting it is assumed that there is a single sample, that is a single collection of instances, from which one has to recover the hidden information. A line of studies on clustering theory, starting from [?] has proposed to address this problem by finding a projection to a low dimensional space and solving the problem in this space. The goal of this projection is to reduce the dimension while preserving the distances, as much as possible, between the means of the underlying distributions. We will refer to this line as MM (Mixture Models). On the other end of the spectrum, Topic modeling (TM), [?, ?], assumes multiple samples (documents) that are mixtures, with different weights of the underlying distributions (topics) over words. Comparing the two lines presented above shows some similarities and some differences. Both models assume the same generative structure: a point (word) is generated by first choosing the distribution θi using the mixing weights and then selecting a point (word) according to this distribution. The goal of both models is to recover information about the generative model (see [?] for more on that). However, there are some key differences:\n(a) In MM, there exists a single sample to learn from. In TM, each document is a mixture of the topics, but with different mixture weights.\n(b) In MM, the points are represented as feature vectors while in TM the data is represented as a word-document co-occurrence matrix. As a consequence, the model generated by TM cannot assign words that did not previously appear in any document to topics.\n∗Work done while the author was an intern at Microsoft Resaerch\nar X\niv :1\n31 1.\n71 84\nv1 [\nst at\n.M L\n] 2\n8 N\nov 2\n(c) TM assumes high density of the samples, i.e., that the each word appears multiple times. However, if the topics were not discrete distributions, as is mostly the case in MM, each \"word\" (i.e., value) would typically appear either zero or one time, which makes the co-occurrence matrix useless.\nIn this work we try to close the gap between MM and TM. Similar to TM, we assume that multiple samples are available. However, we assume that points (words) are presented as feature vectors and the hidden distributions may be continuous. This allows us to solve problems that are typically hard in the MM model with greater ease and generate models that generalize to points not in the training data which is something that TM cannot do."
    }, {
      "heading" : "1.1 Definitions and Notations",
      "text" : "We assume a mixture model in which there are K mixture components θ1, . . . , θK defined over the space X. These mixture components are probability measures over X. We assume that there are M mixture models (samples), each drawn with different mixture weights Φ1, . . . ,ΦM such that Φj = (φj1, . . . , φ j K) where all the weights are non-negative and sum to 1. Therefore, we have M different probability measures D1, . . . , DM defined over X such that for a measurable set A and j = 1, . . . ,M we have Dj(A) = ∑ i φ j iθi (A). We will denote by φmin the minimal value of φ j i .\nIn the first part of this work, we will provide an algorithm that given samples S1, . . . , SM from the mixtures D1, . . . , DM finds a low-dimensional embedding that preserves the distances between the means of each mixture. In the second part of this work we will assume that the mixture components have disjoint supports. Hence we will assume that X = ∪jCj such that the Cj ’s are disjoint and for every j, θj(Cj) = 1. Given samples S1, . . . , SM , we will provide an algorithm that finds the supports of the underlying distributions, and thus clusters the samples."
    }, {
      "heading" : "1.2 Examples",
      "text" : "Before we dive further in the discussion of our methods and how they compare to prior art, we would like to point out that the model we assume is realistic in many cases. Consider the following example: assume that one would like to cluster medical records to identify subtypes of diseases (e.g., different types of heart disease). In the classical clustering setting (MM), one would take a sample of patients and try to divide them based on some similarity criteria into groups. However, in many cases, one has access to data from different hospitals in different geographical locations. The communities being served by the different hospitals may be different in socioeconomic status, demographics, genetic backgrounds, and exposure to climate and environmental hazards. Therefore, different disease sub-types are likely to appear in different ratios in the different hospital. However, if patients in two hospitals acquired the same sub-type of a disease, parts of their medical records will be similar. Another example is object classification in images. Given an image, one may break it to patches, say of size 10x10 pixels. These patches may have different distributions based on the object in that part of the image. Therefore, patches from images taken at different locations will have different representation of the underlying distributions. Moreover, patches from the center of the frame are more likely to contain parts of faces than patches from the perimeter of the picture. At the same time, patches from the bottom of the picture are more likely to be of grass than patches from the top of the picture. In the first part of this work we discuss the problem of identifying the mixture component from multiple samples when the means of the different components differ and variances are bounded. We focus on the problem of finding a low dimensional embedding of the data that preserves the distances between the means since the problem of finding the mixtures in a low dimensional space has already been address (see, for example [?]). Next, we address a different case in which we assume that the support of the hidden distributions is disjoint. We show that in this case we can identify the supports of each distribution. Finally we demonstrate our approaches on toy problems. The proofs of the theorems and lemmas\nappear in the appendix. Table 1 summarizes the applicability of the algorithms presented here to the different scenarios.\n1.3 Comparison to prior art\nare designed to address.\nThere are two common approaches in the theoretical study of the MM model. The method of moments [?, ?, ?] allows the recovery of the model but requires exponential running time and sample sizes. The other approach, to which we compare our results, uses a two stage approach. In the first stage, the data is projected to a low dimensional space and in the second stage the association of points to clusters is recovered. Most of the results with this approach assume that the mixture components are Gaussians. Dasgupta [?], in a seminal paper, presented the first result in this line.\nHe used random projections to project the points to a space of a lower dimension. This work assumes that separation is at least Ω(σmax √ n). This result has been improved in a series of papers. Arora and Kannan [?] presented algorithms for finding the mixture components which are, in most cases, polynomial in n and K. Vempala and Wang [?] used PCA to reduce the required separation to Ω ( σmaxK1/4 log 1/4 ( n/φmin )) . They use PCA to project on the first K principal components, however, they require the Gaussians to be spherical. Kanan, Salmasian and Vempala [?] used similar spectral methods but were able to improve the results to require separation of only cσmaxK\n2/3 /φ2min. Chaud-\nhuri [?] have suggested using correlations and independence between features under the assumption that the means of the Gaussians differ on many features. They require separation of Ω ( σmax √ K log(Kσmax logn/φmin) ) , however they assume that the Gaussians\nare axis aligned and that the distance between the centers of the Gaussians is spread across Ω (Kσmax logn/φmin) coordinates. We present a method to project the problem into a space of dimension d∗ which is the dimension of the affine space spanned by the means of the distributions. We can find this projection and maintain the distances between the means to within a factor of 1 − . The different factors, σmax, n and will affect the sample size needed, but do not make the problem impossible. This can be used as a preprocessing step for any of the results discussed above. For example, combining with [?] yields an algorithm that requires a separation of only Ω ( σmax √ d∗ ) ≤ Ω ( σmax √ K ) . However, using [?] will result in separation requirement\nof Ω ( σmax √ K log (Kσmax log d∗/φmin) ) . There is also an improvement in terms of the\nvalue of σmax since we need only to control the variance in the affine space spanned by the means of the Gaussians and do not need to restrict the variance in orthogonal directions, as long as it is finite. Later we also show that we can work in a more generic setting where the distributions are not restricted to be Gaussians as long as the supports of the distributions are disjoint. While the disjoint assumption may seem too strict, we note that the results presented above make very similar assumptions. For example, even if the required separation is σmaxK1/2 then if we look at the Voronoi tessellation around the centers of the Gaussians, each cell will contain at least 1 − (2π)−1K3/4 exp (−K/2) of the mass of the Gaussian. Therefore, when K is large, the supports of the Gaussians are almost disjoint."
    }, {
      "heading" : "2 Projection for overlapping components",
      "text" : "In this section we present a method to use multiple samples to project high dimensional mixtures to a low dimensional space while keeping the means of the mixture components\nAlgorithm 1 Multi Sample Projection (MSP)"
    }, {
      "heading" : "Inputs:",
      "text" : "Samples S1, . . . , Sm from mixtures D1, . . . , Dm Outputs: Vectors v̄1, . . . , v̄m−1 which span the projected space Algorithm:\n1. For j = 1, . . . ,m let Ēj be the mean of the sample Sj 2. For j = 1, . . . ,m− 1 let v̄j = Ēj − Ēj+1 3. return v̄1, . . . , v̄m−1\nwell separated. The main idea behind the Multi Sample Projection (MSP) algorithm is simple. Let µi be the mean of the i’th component θi and let Ej be the mean of the j’th mixture Dj . From the nature of the mixture, Ej is in the convex-hull of µ1, . . . , µK and hence in the affine space spanned by them; this is demonstrated in Figure 1. Under mild assumptions, if we have sufficiently many mixtures, their means will span the affine space spanned by µ1, . . . , µK . Therefore, the MSP algorithm estimates the Ej ’s and projects to the affine space they span. The reason for selecting this sub-space is that by projecting on this space we maintain the distance between the means while reducing the dimension to at most K − 1. The MSP algorithm is presented in Algorithm 1. In the following theorem we prove the main properties of the MSP algorithm. We will assume that X = Rn, the first two moments of θj are finite, and σ2max denotes maximal variance of any of the components in any direction. The separation of the mixture components is minj 6=j′ ‖µj − µj′‖. Finally, we will denote by d∗ the dimension of the affine space spanned by the µj ’s. Hence, d∗ ≤ K− 1. Theorem 1. MSP Analysis Let Ej = E [Dj ] and let vj = Ej − Ej+1. Let Nj = |Sj |. The following holds for MSP:\n1. The computational complexity of the MSP algorithm is n ∑M j=1Nj + 2n (m− 1)\nwhere n is the original dimension of the problem.\n2. For any > 0, Pr [ supj ∥∥Ej − Ēj∥∥ > ] ≤ nσ2max 2 ∑j 1Nj . 3. Let µ̄i be the projection of µi on the space spanned by v̄1, . . . , v̄M−1 and assume that ∀i, µi ∈ span {vj}. Let αij be such that µi = ∑ j α i jvj and let A = maxi\n∑∣∣αij∣∣ then with probability of at least 1− nσ 2max 2 ∑ j 1 Nj\nPr [ max i,i′ |‖µi − µi′‖ − ‖µ̄i − µ̄i′‖| > ] ≤ 4nσ 2maxA2 2 ∑ j 1 Nj .\ndemonstrated here by the red line.\nThe MSP analysis theorem shows that with large enough samples, the projection will maintain the separation between the centers of the distributions. Moreover, since this is a projection, the variance in any direction cannot increase. The value of A measures the complexity of the setting. If the mixing coefficients are very different in the different samples then A will be small. However, if the mixing coefficients are very similar, a larger sample is required. Nevertheless, the size of the sample needed is polynomial in the parameters of the problem. It is also apparent that with large enough samples, a good projection will be found, even with\nlarge variances, high dimensions and close centroids. A nice property of the bounds presented here is that they assume only bounded first and second moments. Once a projection to a low dimensional space has been found, it is possible to find the clusters using approaches presented in section 1.3. However, the analysis of the MSP algorithm assumes that the means of E1, . . . , EM span the affine space spanned by µ1, . . . , µK . Clearly, this implies that we require that m > d∗. However, when m is much larger than d∗, we might end-up with a projection on too large a space. This could easily be fixed since in this case, Ē1, . . . , Ēm will be almost co-planar in the sense that there will be an affine space of dimension d∗ that is very close to all these points and we can project onto this space."
    }, {
      "heading" : "3 Disjoint supports and the Double Sample Clustering (DSC) algorithm",
      "text" : "In this section we discuss the case where the underlying distributions have disjoint supports. In this case, we do not make any assumption about the distributions. For example, we do not require finite moments. However, as in the mixture of Gaussians case some sort of separation between the distributions is needed, this is the role of the disjoint supports. We will show that given two samples from mixtures with different mixture coefficients, it is possible to find the supports of the underlying distributions (clusters) by building a tree of classifiers such that each leaf represents a cluster. The tree is constructed in a greedy fashion. First we take the two samples, from the two distributions, and reweigh the examples such that the two samples will have the same cumulative weight. Next, we train a classifier to separate between the two samples. This classifier becomes the root of the tree. It also splits each of the samples into two sets. We take all the examples that the classifier assign to the label +1(−1), reweigh them and train another classifier to separate between the two samples. We keep going in the same fashion until we can no longer find a classifier that splits the data significantly better than random. To understand why this algorithm works it is easier to look first at the case where the mixture distributions are known. If D1 and D2 are known, we can define the L1 distance between them as L1 (D1, D2) = supA |D1 (A) –D2 (A)|.1 It turns out that the supremum is attained by a set A such that for any i, µi (A) is either zero or one. Therefore, any inner node in the tree splits the region without breaking clusters. This process proceeds until all the points associated with a leaf are from the same cluster in which case, no classifier can distinguish between the classes. When working with samples, we have to tolerate some error and prevent overfitting. One way to see that is to look at the problem of approximating the L1 distance between D1 and D2 using samples S1 and S2. One possible way to do that is to define L̂1 = supA ∣∣∣∣A∩S1∣∣S1∣∣ − A∩S2∣∣S2∣∣ ∣∣∣∣. However, this estimate is almost surely going to be 1 if the underlying distributions are absolutely continuous. Therefore, one has to restrict the class from which A can be selected to a class of VC dimension small enough compared to the sizes of the samples. We claim that asymptotically, as the sizes of the samples increase, one can increase the complexity of the class until the clusters can be separated. Before we proceed, we recall a result of [?] that shows the relation between classification and the L1 distance. We will abuse the notation and treat A both as a subset and as a classifier. If we mix D1 and D2 with equal weights then\nerr (A) = D1 (X \\A) +D2 (A) = 1−D1 (A) +D2 (A) = 1− (D1 (A)−D2 (A)) .\nTherefore, minimizing the error is equivalent to maximizing the L1 distance. 1the supremum is over all the measurable sets.\nAlgorithm 2 Double Sample Clustering (DSC)"
    }, {
      "heading" : "Inputs:",
      "text" : "• Samples S1, S2 • A binary learning algorithm L that given samples S1, S2 with weights w1, w2 finds a classifier h and an estimator e of the error of h. • A threshold τ > 0."
    }, {
      "heading" : "Outputs:",
      "text" : "• A tree of classifiers"
    }, {
      "heading" : "Algorithm:",
      "text" : "1. Let w1 = 1 and w2 = |S1|/|S2| 2. Apply L to S1 & S2 with weights w1 & w2 to get the classifier h and estimator e. 3. If e ≥ 12 − τ ,\n(a) return a tree with a single leaf. 4. else\n(a) For j = 1, 2, let S+j = {x ∈ Sj s.t. h (x) > 0} (b) For j = 1, 2, let S−j = {x ∈ Sj s.t. h (x) < 0} (c) Let T+ be the tree returned by the DSC algorithm applied to S+1 and S + 2 (d) Let T− be the tree returned by the DSC algorithm applied to S−1 and S − 2 (e) return a tree in which c is at the root node and T− is its left subtree and T+ is its right subtree\nThe key observation for the DSC algorithm is that if φ1i 6= φ2i , then a set A that maximizes the L1 distance betweenD1 andD2 is aligned with cluster boundaries (up to a measure zero).\nFurthermore, A contains all the clusters for which φ1i > φ2i and does not contain all the clusters for which φ1i < φ2i . Hence, if we split the space to A and Ā we have few clusters in each side. By applying the same trick recursively in each side we keep on bisecting the space according to cluster boundaries until subspaces that contain only a single cluster remain. These sub-spaces cannot be further separated and hence the algorithm will stop. Figure 2 demonstrates this idea. The following lemma states this argument mathematically: Lemma 1. If Dj = ∑ i φ j iθi then\n1. L1 (D1, D2) ≤∑ i max ( φ1i − φ2i , 0 ) .\n2. If A∗ = ∪i:φ1 i >φ2 i Ci then D1 (A∗)− D2 (A∗) = ∑ i max ( φ1i − φ2i , 0 ) .\n3. If ∀i, φ1i 6= φ2i and A is such that D1 (A)−D2 (A) = L1 (D1, D2) then ∀i, θi (A∆A∗) = 0.\nWe conclude from Lemma 1 that if D1 and D2 were explicitly known and one could have found a classifier that best separates between the distributions, that classifier would not break clusters as long as the mixing coefficients\nare not identical. In order for this to hold when the separation is applied recursively in the DSC algorithm it suffices to have that for every I ⊆ [1, . . . ,K] if |I| > 1 and i ∈ I then\nφ1i∑ i′∈I φ 1 i′ 6= φ 2 i∑ i′∈I φ 2 i′\nto guarantee that at any stage of the algorithm clusters will not be split by the classifier (but may be sections of measure zero). This is also sufficient to guarantee that the leaves will contain single clusters. In the case where data is provided through a finite sample then some book-keeping is needed. However, the analysis follows the same path. We show that with samples large enough, clusters are only minimally broken. For this to hold we require that the learning algorithm L separates the clusters according to this definition: Definition 1. For I ⊆ [1, . . . ,K] let cI : X 7→ {±1} be such that cI(x) = 1 if x ∈ ∪i∈ICi and cI(x) = −1 otherwise. A learning algorithm L separates C1, . . . , CK if for every , δ > 0 there exists N such that for every n > N and every measure ν over X×{±1} with probability 1− δ over samples from νn:\n1. The algorithm L returns an hypothesis h : X 7→ {±1} and an error estimator e ∈ [0, 1] such that |Prx,y∼ν [h (x) 6= y]− e| ≤\n2. h is such that ∀I, Pr\nx,y∼ν [h (x) 6= y] < Pr x,y∼ν [cI (x) 6= y] + .\nBefore we introduce the main statement, we define what it means for a tree to cluster the mixture components: Definition 2. A clustering tree is a tree in which in each internal node is a classifier and the points that end in a certain leaf are considered a cluster. A clustering tree -clusters the mixture coefficient θ1, . . . , θK if for every i ∈ 1, . . . ,K there exists a leaf in the tree such that the cluster L ⊆ X associated with this leaf is such that θi (L) ≥ 1 − and θi′ (L) < for every i′ 6= i.\nTo be able to find a clustering tree, the two mixtures have to be different. The following definition captures the gap which is the amount of difference between the mixtures. Definition 3. Let Φ1 and Φ2 be two mixture vectors. The gap, g, between them is\ng = min {∣∣∣∣ φ1i∑\ni′∈I φ 1 i′ − φ\n2 i∑\ni′∈I φ 2 i′ ∣∣∣∣ : I ⊆ [1, . . . ,K] and |I| > 1} . We say that Φ is b bounded away from zero if b ≤ mini φi. Theorem 2. Assume that L separates θ1, . . . , θK , there is a gap g > 0 between Φ1 and Φ2 and both Φ1 and Φ2 are bounded away from zero by b > 0. For every ∗, δ∗ > 0 there exists N = N ( ∗, δ∗, g, b,K) such that given two random samples of sizes N < n1, n2 from the two mixtures, with probability of at least 1− δ∗ the DSC algorithm will return a clustering tree which ∗-clusters θ1, . . . , θK when applied with the threshold τ = g/8."
    }, {
      "heading" : "4 Empirical evidence",
      "text" : "We conducted several experiments with synthetic data to compare different methods when clustering in high dimensional spaces. The synthetic data was generated from three Gaussians with centers at points (0, 0) , (3, 0) and (−3,+3). On top of that, we added additional dimensions with normally distributed noise. In the first experiment we used unit variance for all dimensions. In the second experiment we skewed the distribution so that the variance in the other features is 5. Two sets of mixing coefficients for the three Gaussians were chosen at random 100 times by selecting three uniform values from [0, 1] and normalizing them to sum to 1. We generated\ntwo samples with 80 examples each from the two mixing coefficients. The DSC and MSP algorithm received these two samples as inputs while the reference algorithms, which are not designed to use multiple samples, received the combined set of 160 points as input. We ran 100 trials. In each trial, each of the algorithms finds 3 Gaussians. We then measure the percentage of the points associated with the true originating Gaussian after making the best assignment of the inferred centers to the true Gaussians. We compared several algorithms. K-means was used on the data as a baseline. We compared three low dimensional projection algorithms. Following [?] we used random projections as the first of these. Second, following [?] we used PCA to project on the maximal variance subspace. MSP was used as the third projection algorithm. In all projection algorithm we first projected on a one dimensional space and then applied K-means to find the clusters. Finally, we used the DSC algorithm. The DSC algorithm uses the classregtree function in MATLAB as its learning oracle. Whenever K-means was applied, the MATLAB implementation of this procedure was used with 10 random initial starts. Figure 3(a) shows the results of the first experiment with unit variance in the noise dimensions. In this setting, the Maximal Variance method is expected to work well since the first two dimensions have larger expected variance. Indeed we see that this is the case. However, when the number of dimensions is large, MSP and DSC outperform the other methods; this corresponds to the difficult regime of low signal to noise ratio. In 12800 dimensions, MSP outperforms Random Projections 90% of the time, Maximal Variance 80% of the time, and K-means 79% of the time. DSC outperforms Random Projections, Maximal Variance and K-means 84%, 69%, and 66% of the time respectively. Thus the p-value in all these experiments is < 0.01. Figure 3(b) shows the results of the experiment in which the variance in the noise dimensions is higher which creates a more challanging problem. In this case, we see that all the reference methods suffer significantly, but the MSP and the DSC methods obtain similar results as in the previous setting. Both the MSP and the DSC algorithms win over Random Projections, Maximal Variance and K-means more than 78% of the time when the dimension is 400 and up. The p-value of these experiments is < 1.6× 10−7."
    }, {
      "heading" : "5 Conclusions",
      "text" : "The mixture problem examined here is closely related to the problem of clustering. Most clustering data can be viewed as points generated from multiple underlying distributions or generating functions, and clustering can be seen as the process of recovering the structure of or assignments to these distributions. We presented two algorithms for the mixture problem that can be viewed as clustering algorithms. The MSP algorithm uses multiple samples to find a low dimensional space to project the data to. The DSC algorithm builds a clustering tree assuming that the clusters are disjoint. We proved that these algorithms work under milder assumptions than currently known methods. The key message in this work is that when multiple samples are available, often it is best not to pool the data into one large sample, but that the structure in the different samples can be leveraged to improve clustering power."
    }, {
      "heading" : "A Supplementary Material",
      "text" : "Here we provide detailed analysis of the results presented in the paper that could not fit due to space limitations."
    }, {
      "heading" : "A.1 Proof of Lemma 1",
      "text" : "Proof. 1. Let A be a measurable set let Ai = A ∩ Ci. D1 (A)−D2 (A) = ∑ i D1 (Ai)−D2 (Ai)\n= ∑ i φ1i θi (Ai)− φ2i θi (Ai)\n= ∑ i θi (Ai) ( φ1i − φ2i ) ≤\n∑ i max ( φ1i − φ2i , 0 ) .\n2. Let A∗ = ∪i:φ1 i >φ2 i Ci then\nD1 (A∗)−D2 (A∗) = ∑\ni:φ1 i >φ2 i\nθi (Ci) ( φ1i − φ2i ) =\n∑ i max ( φ1i − φ2i , 0 ) .\n3. Assume that ∀i, φ1i 6= φ2i and A is such that D1 (A) − D2 (A) = L1 (D1, D2). As before let Ai = A ∩ Ci then\nD1 (A)−D2 (A) = ∑ i θi (Ai) ( φ1i − φ2i ) .\nIf exists i such that θi (A∆A∗) 6= 0 then there could be two cases. If i∗ is such that φ1i∗ > φ 2 i∗ then θi∗ (A∗) = 1 hence θi∗ (A) < 1. Therefore,\nD1 (A)−D2 (A) ≤ ∑ i θi (Ai) max ( φ1i − φ2i , 0 ) <\n∑ i max ( φ1i − φ2i , 0 ) which contradicts the assumptions. In the same way, if i∗ is such that φ1i∗ < φ2i∗ then θi∗ (A∗) = 0 hence θi∗ (A) > 0. Therefore,\nD1 (A)−D2 (A) ≤ ∑ i θi (Ai) max ( φ1i − φ2i , 0 ) + θi∗ (Ai∗) ( φ1i − φ2i ) <\n∑ i θi (Ai) max ( φ1i − φ2i , 0 )"
    }, {
      "heading" : "A.2 Proof of MSP Analysis theorem",
      "text" : "Proof. of Theorem 1\n1. The computational complexity is straight forward. The MSP algorithm first computes the expected value for each of the samples. For every sample this takes nNj . Once the expected values were computed, computing each of the v̄j vector is 2n operations.\n2. Recall that Dj = ∑ i φ j iθi. We can rewrite it as\nDj = K∑ i=1 φjiµi + K∑ i=1 φji (θi − µi) = Ej + K∑ i=1 φji (θi − µi) .\nNote that for every i, (θi − µi) has a zero mean and variance bounded by σ2max. Since φji ≥ 0 and ∑ i φ j i = 1 then the measure ∑K i=1 φ j i (θi − µi) has zero mean and variance bounded by σ2max. Hence, Dj is a measure with mean Ej and variance bounded by σ2max. Since Ēj is obtained by averaging Nj instances, we get, from Chebyshev’s inequality combined with the union bound that\nPr [∥∥Ej − Ēj∥∥ > ] ≤ nσ2max\nNj 2 .\nSince there are m estimators, Ē1, . . . , Ēm, using the union bound we obtain Pr [ sup j ∥∥Ej − Ēj∥∥ > ] ≤∑ j nσ2max Nj 2 .\n3. Recall that µ̄i is the projection of µi on the space V̄ = span (v̄1, . . . , v̄m−1). Therefore, µ̄i = arg minv∈V̄ (‖µi − v‖) . Since µi ∈ span {v1, . . . , vm−1} then µi = ∑ αijvj .\n‖µi − µ̄i‖ ≤ ∥∥∥∑αjvj −∑αj v̄j∥∥∥\n≤ ∑ |α|j ‖vj − v̄j‖ .\nHence, if A = maxi ∑∣∣αij∣∣ then with probability of at least 1− nσ2max 2 ∑j 1nj\nmax i ‖µi − µ̄i‖ ≤ A .\nFurthermore, max i,i′ |‖µi − µi′‖ − ‖µ̄i − µ̄i′‖| ≤ 2 A .\nIt is possible to improve upon the bounds presented here. We can get sharper bounds on the probability of success in several ways:\n1. If we assume that the sample space is bounded we can use Bernstein’s inequality instead of Chebyshev’s inequality\n2. If we assume that the covariance matrix is diagonal we can replace the union bounded with better concentration of measure bounds\n3. If we assume that the distributions are Gaussians we can use tail bounds on these distribution instead of Chebyshev’s inequality\nTo simplify the presentation, we do not derive the bounds for these specific conditions."
    }, {
      "heading" : "A.3 Proof of Theorem 2",
      "text" : "The analysis we use several lemmas. To simplify the notation we define the following assumptions: Assumption 1. The gap between Φ1 and Φ2 is g > 0. Assumption 2. Both Φ1 and Φ2 are bounded away from zero by b > 0. Definition 4. For the set A, we say that the i’th cluster is γ-big if θi (A) ≥ 1− γ and we say that it is γ-small if θi (A) ≤ γ.\nAssumption 3. For the set A all clusters are either γ-big or γ-small and there exists at least one γ-big cluster. Assumption 4. The classifier h and the estimator e are such that∣∣∣∣ Prx,y∼ν [h (x) 6= y]− e\n∣∣∣∣ ≤ and\n∀I, Pr x,y∼ν [h (x) 6= y] < Pr x,y∼ν [cI (x) 6= y] +\nwhere ν is a measure on X × {±1} such that the measure of B ⊆ X × {±1} is\nν (B) = 12\n( D1 ({x ∈ A : (x, 1) ∈ B})\nD1 (A) + D2 ({x ∈ A : (x,−1) ∈ B}) D2 (A)\n) .\nUsing these assumptions we turn to prove the lemmas. Lemma 2. Under assumptions 2 and 3, if I = { i : φ 1 i∑\ni′ φ1 i′ θi′ (A)\n> φ2i∑\ni′ φ2 i′ θi′ (A)\n} , there\nare more than a single γ-big cluster and γ < min (b/2, gb/k+3) then\nPr x,y∼ν [cI (x) 6= y] ≤ 1 2\n( 1− g (1− γ) + 3Kγ\nb ) where ν is as defined in assumption 4. Moreover, the set I contains at least one γ-big cluster but does not contain all the γ-big clusters.\nProof. Let J be the set of γ big clusters. From the definition of γ we have that\nPr x,y∼ν [cI (x) 6= y] = 1 2 (∑ i/∈I φ1i θi′ (A)∑ i′ φ 1 i′θi′ (A) + ∑ i∈I φ2i θi′ (A)∑ i′ φ 2 i′θi′ (A) )\n= 12\n( 1−\n∑ i∈I ( φ1i∑ i′ φ 1 i′θi′ (A) − φ 2 i∑ i′ φ 2 i′θi′ (A) ) θi′ (A) )\n≤ 12\n( 1−\n∑ i∈I∩J ( φ1i∑ i′ φ 1 i′θi′ (A) − φ 2 i∑ i′ φ 2 i′θi′ (A) ) θi′ (A) )\n≤ 12\n( 1−\n∑ i∈I∩J ( φ1i∑ i′∈J φ 1 i′ + γ − φ 2 i∑ i′∈J φ 2 i′ − γ ) θi′ (A) ) .\nDue to assumption 2 φ1i∑\ni′∈J φ 1 i′ + γ\n= φ 1 i∑\ni′∈J φ 1 i′ − γφ\ni i(∑\ni′∈J φ 1 i′ ) (∑ i′∈J φ 1 i′ + γ ) ≥ φ 1 i∑\ni′∈J φ 1 i′ − γ∑ i′∈J φ 1 i′ + γ\n≥ φ 1 i∑\ni′∈J φ 1 i′ − γ b . (1)\nSince γ < b/2 we have φ2i∑\ni′∈J φ 2 i′ − γ\n= φ 2 i∑\ni′∈J φ 2 i′\n+ γφ 2 i(∑\ni′∈J φ 2 i′ ) (∑ i′∈J φ 2 i′ − γ ) ≤ φ 2 i∑\ni′∈J φ 2 i′ + γ∑ i′∈J φ 2 i′ − γ\n≤ φ 2 i∑\ni′∈J φ 2 i′\n+ 2γ b . (2)\nTherefore,\nPr x,y∼ν [cI (x) 6= y] ≤ 1 2\n( 1−\n∑ i∈I∩J ( φ1i∑ i′∈J φ 1 i′ + γ − φ 2 i∑ i′∈J φ 2 i′ − γ ) θi (A) )\n≤ 12\n( 1−\n∑ i∈I∩J ( φ1i∑ i′∈J φ 1 i′ − φ 2 i∑ i′∈J φ 2 i′ − 3γ b ) θi (A) )\n≤ 12\n( 1−\n∑ i∈I∩J ( φ1i∑ i′∈J φ 1 i′ − φ 2 i∑ i′∈J φ 2 i′ ) θi (A) + 3Kγ b )\n≤ 12\n( 1−\n∑ i∈I∩J gθi (A) + gb/k+3 3Kγ b\n)\n≤ 12\n( 1− g (1− γ) + 3Kγ\nb\n) .\nNote that we have used the fact that I ∩ J is not empty. Otherwise, note that since γ < 1/2 and from (1) and (2)\n0 = ∑ i∈I ( φ1i θi′ (A)∑ i′ φ 1 i′θi′ (A) − φ 2 i θi′ (A)∑ i′ φ 2 i′θi′ (A) ) − ∑ i/∈I ( φ2i θi′ (A)∑ i′ φ 2 i′θi′ (A) − φ 1 i θi′ (A)∑ i′ φ 1 i′θi′ (A) )\n≤ γ ∑ i∈I ( φ1i∑ i′ φ 1 i′θi′ (A) ) − (1− γ) ∑ i∈J ( φ2i∑ i′ φ 2 i′θi′ (A) − φ 1 i∑ i′ φ 1 i′θi′ (A) ) ≤ γK 12b (1− γ) − (1− γ) ∑ i∈J ( g − 3γ b\n) ≤ γK\nb − 2 (1− γ)\n( g − 3γ\nb ) ≤ γK b − ( g − 3γ b\n) = γK + 3\nb − g .\nHowever, since γ < gb/k+3 we obtain γK+3b − g < 0 which is a contradiction. Therefore, I ∩ J is not empty. In the same way we can see that Ī ∩ J is not empty as well.\nLemma 3. Under assumptions 1, 2, 3 and 4 if γ < min (b/2, gb/3) then\n∀i, θi (A ∩ h) , θi ( A ∩ h̄ ) /∈ [ γ + 2\ng − 3γb , 1− γ − 2 g − 3γb\n] .\nMoreover, if I = { i : φ 1 i∑\ni φ1 i θi(A)\n> φ2i∑\ni φ2 i θi(A) } then θi (A ∩ h) ≥ 1 − γ − 2 g− 3γb iff i is a\nγ-big cluster in A and i ∈ I. Proof. Recall that for every set B, Dj (B) = ∑ i φ j iθi (B). By using h both as a function and as a subset of X we have\nPr x,y∼ν [h (x) 6= y] = 12 ( D1 (A \\ h) D1 (A) + D2 (h) D2 (A) ) = 12 ( 1− ( D1 (h ∩A) D1 (A) − D2 (h ∩A) D2 (A)\n)) = 12 ( 1− (∑ i φ 1 i θi (h ∩A)∑ i φ 1 i θi (A) − ∑ i φ 2 i θi (h ∩A)∑ i φ 2 i θi (A)\n)) = 12 ( 1− ∑ i ( φ1i∑ i′ φ 1 i′θi′ (A) − φ 2 i∑ i′ φ 2 i′θi′ (A) ) θi (h ∩A) )\nLet I = { i : φ 1 i∑\ni φ1 i θi(A)\n> φ2i∑\ni φ2 i θi(A)\n} . It follows that cI = arg minh Prx,y∼ν [h (x) 6= y]\nand hence Pr\nx,y∼ν [cI (x) 6= y] ≤ Pr x,y∼ν [h (x) 6= y] < Pr x,y∼ν [cI (x) 6= y] + .\nTherefore,\n> Pr x,y∼ν [h (x) 6= y]− Pr x,y∼ν [cI (x) 6= y]\n= 12 (∑ i (Ii∈Iθi (A)− θi (h ∩A)) ( φ1i∑ i φ 1 i θi (A) − φ 2 i∑ i φ 2 i θi (A) ))\n≥ 12 maxi (Ii∈Iθi (A)− θi (h ∩A)) ( φ1i∑ i φ 1 i θi (A) − φ 2 i∑ i φ 2 i θi (A) ) Let J = {j : θj (A) > 1− γ} then\nφ1i∑ i φ 1 i θi (A) − φ 2 i∑ i φ 2 i θi (A) ≥ φ 1 i∑ j∈J φ 1 j + ∑ j∈J φ 1 jγ − φ 2 i∑ j∈J φ 2 j (1− γ)\n≥ φ 1 i∑\nj∈J φ 1 j + γ\n− φ 2 i∑\nj∈J φ 2 j − γ\nand hence ≥ 12 maxi (Ii∈Iθi (A)− θi (h ∩A)) ( φ1i∑ j∈J φ 1 j + γ − φ 2 i∑ j∈J φ 2 j − γ ) or put otherwise\nmax i\n(Ii∈Iθi (A)− θi (h ∩A)) ≤ 2 mini ( φ1 i∑\nj∈J φ1 j +γ − φ\n2 i∑\nj∈J φ2 j −γ ) . (3) Note that since γ < b/2 from (1) and (2) it follows that\nmin i\n( φ1i∑\nj∈J φ 1 j + γ\n− φ 2 i∑\nj∈J φ 2 j − γ\n) ≥ min\ni ( φ1i∑ j∈J φ 1 j − φ 2 i∑ j∈J φ 2 j ) − 3γ b\n≥ g − 3γ b .\nNote that g− 3γ/b > 0 since γ < gb/3. If i is such that θi (A) < γ then clearly θi (h ∩A) < γ. However, if θi (A) > 1− γ and i ∈ I then from (3) we have that\nθi (h ∩A) ≥ θi (A)− 2\ng − 3γb .\n≥ 1− γ − 2 g − 3γb\nIf however, θi (A) > 1− γ but i /∈ I then we can repeat the same argument for h̄ to get\nθi ( h̄ ∩A ) ≥ 1− γ − 2\ng − 3γb and thus\nθi (h ∩A) ≤ γ + 2\ng − 3γb .\nLemma 4. Under assumptions 2,3 and 4, if there is only a single γ-big cluster then e ≥ 12 − γ ( 1 γ + b (1− γ) + 1 1− γ + 1 b+ γ ) −\nProof. Let i∗ be such that θi∗ is the single γ-big cluster. For j = 1, 2\nDj (Ci∗ ∩A) Dj (A) = φ j i∗θi∗ (A)∑ i φ j iθi (A)\n= 1 1 + ∑ i6=i∗ φj i θi(A)\nφj i∗θi∗ (A)\n≥ 11 + γb(1−γ) .\nFor any h,∣∣∣∣Dj (A ∩ h)Dj (A) − θi∗ (h) ∣∣∣∣ ≤ ∣∣∣∣Dj ((A \\ Ci∗) ∩ h)Dj (A) ∣∣∣∣+ ∣∣∣∣Dj (A ∩ Ci∗ ∩ h)Dj (A) − θi∗ (h) ∣∣∣∣\n≤ γ γ + b (1− γ) + ∣∣∣∣∣φji∗θi∗ (A ∩ h)Dj (A) − θi∗ (h) ∣∣∣∣∣\n≤ γ γ + b (1− γ) + ∣∣∣∣∣φ j i∗θi∗ ( Ā ) Dj (A) ∣∣∣∣∣+ θi∗ (h) ∣∣∣∣∣ φji∗Dj (A) − 1 ∣∣∣∣∣ ≤ γ\nγ + b (1− γ) + γ 1− γ + θi ∗ (h)\n( 1− φ j i∗\nφji∗ + γ ) ≤ γ\nγ + b (1− γ) + γ 1− γ + γ b+ γ .\nTherefore,∣∣∣∣D1 (A ∩ h)D1 (A) − D2 (A ∩ h)D2 (A) ∣∣∣∣ ≤ ∣∣∣∣D1 (A ∩ h)D1 (A) − θi∗ (h) ∣∣∣∣+ ∣∣∣∣D2 (A ∩ h)D2 (A) − θi∗ (h) ∣∣∣∣\n≤ 2γ (\n1 γ + b (1− γ) + 1 1− γ + 1 b+ γ\n) .\nHence\ne ≥ Pr x,y∼ν [h (x) 6= y]−\n= 12 − 1 2 ∣∣∣∣D1 (A ∩ h)D1 (A) − D2gb/3 (A ∩ h)D2 (A) ∣∣∣∣−\n≥ 12 − γ ( 1 γ + b (1− γ) + 1 1− γ + 1 b+ γ ) − .\nLemma 5. Under assumptions 2,3 and 4, if there are t > 1 clusters which are γ-big for γ < min (b/2, gb/k+3) then\ne ≤ 12\n( 1− g (1− γ) + 3Kγ\nb\n) + 2\nand the split induced by h will have at least one γ + 2 g− 3γb big cluster in each side of the split.\nProof. Let I = { i : φ 1 i∑\ni φ1 i θi(A)\n> φ2i∑\ni φ2 i θi(A)\n} then from Lemma 2\nPr x,y∼ν [cI (x) 6= y] ≤ 1 2\n( 1− g (1− γ) + 3Kγ\nb ) and I contains at least one γ-big cluster but does not contain all the γ big clusters. From Assumption 4 it follows that\ne ≤ 12\n( 1− g (1− γ) + 3Kγ\nb\n) + 2 .\nMoreover, from Lemma 3 a cluster is γ + 2 g− 3γb -big if and only if it is γ-big in A and it is in I. Since I contains a γ-big cluster than A ∩ h contains a γ − 2\ng− 3γb -cluster. However, since\nI does not contain all the γ-big clusters, there is a γ + 2 g− 3γb -cluster in A ∩ h̄ as well.\nWe are now ready to prove the main theorem.\nProof. of Theorem 2 Let < min (\ng2b 160K , bg 8K , g2b 4K(K+3) , ∗g 4K ) and let γ̂l = 4 lg then for every l ≤ K we have\n3γ̂l b < g 2 , γ̂l < min ( b 2 , gb K + 3 ) .\nLet δ = δ ∗\n4K and N1 be the size of the samples needed for L to return an , δ good hypothesis. Let N = max (\n4N1 b , 2 b2 log 1 δ\n) .\nNote the following, if A is a set that contains at least one γ-big cluster, for γ ≤ γ̂K then with probability 1− δ, a sample of N points from γ contains atleast N1 points from A. To see that, note that\nγ ≤ 4 K g < 4K g · gb8K ≤ gb 2 ≤ 1 2 .\nSince each cluster is bounded away from zero by b > 0, the expected number points in A out of a sample of size N is at least (1− γ) bN ≥ bN/2. From Hoeffding’s inequality, we have that for N ≥ 2b2 log 1 δ with a probability of 1 − δ there will be at least bN/4 points in A. Since N ≥ 4N1/b, we conclude that with a probability of at least 1 − δ, there will be atleast N1 points from A in a random set of N points. Therefore, with probability 1− δ/2, in the first 2K calls for the learning algorithm L, for which there was at least one γ-big cluster in the leaf, there were at least N1 points to train the algorithm from, provided that γ ≤ γ̂K . Hence, with probability 1 − δ, Assumption 4 holds for the first 2K call to the learning algorithm, provided that γ ≤ γ̂K . Next we will show that as long as Assumption 4 holds, the DSC algorithm will make at most 2K calls to L and all leafs will have at least one γ-big cluster for γ ≤ γ̂K . We prove that by induction on the depth of the generated tree. Initially, we have a single leaf with all the points and hence all the clusters are 0-big hence the assumption clearly works. From Lemma 3 it follows that if all the clusters were γ-big or γ-small, and indeed Assumption 4 holds, then the new leafs that are generated by splitting on h will have only γ′-big or γ′-small clusters for γ′ ≤ γ + 2\ng− 3γb . Note that if γ < gb/6 then g − 3γ/b > g/2 hence γ′ ≤ γ + 4 /g.\nFrom Lemma 4 and Lemma 5 it follows that every time the DSC algorithm calls the L algorithm, assuming that Assumption 4 holds for this call, one of two things happen, either the algorithm finds a non-trivial split of the clusters, which happens whenever there is more\nthan a single big cluster, in which case e ≤ 12 ( 1− g (1− γ) + 3Kγb ) + 2 or otherwise, if\nthere is only a single big cluster, e ≥ 12 − γ ( 1 γ+b(1−γ) + 1 1−γ + 1 b+γ ) − . Note that if\nγ ≤ min (1/2 , 4K /g) then\n1 2 − γ\n( 1\nγ + b (1− γ) + 1 1− γ + 1 b+ γ ) − ≥ 12 − 4K g ( 2 b + 2 + 1 b ) −\n≥ 12 − K gb\n( 12 + 8b+ gb\nK\n)\n> 1 2 − 20K gb .\nSince, < g2b/160K, if there was only a single cluster and Assumption 4 holds then e > 12− g 8 . However, if there were multiple big clusters then\ne ≤ 12\n( 1− g (1− γ) + 3Kγ\nb ) + 2 ≤ 12 − g 4 .\nHence, assuming that Assumption 4 holds for all splits then the algorithm will split every leaf that contain multiple big clusters and will not split any leaf that contain a single big cluster. Therefore, after K − 1 splits, all the leafs will have a single big cluster. For each of the K leaf, the DSC algorithm will call L once to determine that it contains a single cluster and hence the number of calls to L will be at most 2K − 1 and in each call all the clusters are either γ-big or γ-small for γ ≤ γK = 4K /g. And therefore, with probability 1− δ∗, the DSC algorithm will return a γK clustering tree. Since\nγK = 4 K g ≤\n4K ∗g\n4K g = ∗ ,\nthis is an ∗ clustering tree."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2013,
    "abstractText" : "In the mixture models problem it is assumed that there are K distributions θ1, . . . , θK and one gets to observe a sample from a mixture of these distributions with unknown coefficients. The goal is to associate instances with their generating distributions, or to identify the parameters of the hidden distributions. In this work we make the assumption that we have access to several samples drawn from the same K underlying distributions, but with different mixing weights. As with topic modeling, having multiple samples is often a reasonable assumption. Instead of pooling the data into one sample, we prove that it is possible to use the differences between the samples to better recover the underlying structure. We present algorithms that recover the underlying structure under milder assumptions than the current state of art when either the dimensionality or the separation is high. The methods, when applied to topic modeling, allow generalization to words not present in the training data.",
    "creator" : "LaTeX with hyperref package"
  }
}