{
  "name" : "1211.2260.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "No-Regret Algorithms for Unconstrained Online Convex Optimization",
    "authors" : [ "Matthew Streeter", "H. Brendan McMahan" ],
    "emails" : [ "matt@duolingo.com", "mcmahan@google.com" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Over the past several years, online convex optimization has emerged as a fundamental tool for solving problems in machine learning (see, e.g., [3, 12] for an introduction). The reduction from general online convex optimization to online linear optimization means that simple and efficient (in memory and time) algorithms can be used to tackle large-scale machine learning problems. The key theoretical techniques behind essentially all the algorithms in this field are the use of a fixed or increasing strongly convex regularizer (for gradient descent algorithms, this is equivalent to a fixed or decreasing learning rate sequence). In this paper, we show that a fundamentally different type of algorithm can offer significant advantages over these approaches. Our algorithms adjust their learning rates based not just on the number of rounds, but also based on the sum of gradients seen so far. This allows us to start with small learning rates, but effectively increase the learning rate if the problem instance warrants it.\nThis approach produces regret bounds of the formO ( R √ T log((1+R)T ) ) , whereR = ‖x̊‖2 is the L2 norm of an arbitrary comparator. Critically, our algorithms provide this guarantee simultaneously for all x̊ ∈ Rn, without any need to know R in advance. A consequence of this is that we can guarantee at most constant regret with respect to the origin, x̊ = 0. This technique can be applied to any online convex optimization problem where a fixed feasible set is not an essential component of the problem. We discuss two applications of particular interest below:\nOnline Prediction Perhaps the single most important application of online convex optimization is the following prediction setting: the world presents an attribute vector at ∈ Rn; the prediction algorithm produces a prediction σ(at · xt), where xt ∈ Rn represents the model parameters, and σ : R → Y maps the linear prediction into the appropriate label space. Then, the adversary reveals the label yt ∈ Y , and the prediction is penalized according to a loss function ` : Y × Y → R. For appropriately chosen σ and `, this becomes a problem of online convex optimization against functions ft(x) = `(σ(at ·x), yt). In this formulation, there are no inherent restrictions on the model coefficients x ∈ Rn. The practitioner may have prior knowledge that “small” model vectors are more\n∗This work was performed while the author was at Google.\nar X\niv :1\n21 1.\n22 60\nv1 [\ncs .L\nG ]\n9 N\nov 2\nlikely than large ones, but this is rarely best encoded as a feasible set F , which says: “all xt ∈ F are equally likely, and all other xt are ruled out.” A more general strategy is to introduce a fixed convex regularizer: L1 and L22 penalties are common, but domain-specific choices are also possible. While algorithms of this form have proved very effective at solving these problems, theoretical guarantees usually require fixing a feasible set of radius R, or at least an intelligent guess of the norm of an optimal comparator x̊.\nThe Unconstrained Experts Problem and Portfolio Management In the classic problem of predicting with expert advice (e.g., [3]), there are n experts, and on each round t the player selects an expert (say i), and obtains reward gt,i from a bounded interval (say [−1, 1]). Typically, one uses an algorithm that proposes a probability distribution pt on experts, so the expected reward is pt · gt. Our algorithms apply to an unconstrained version of this problem: there are still n experts with payouts in [−1, 1], but rather than selecting an individual expert, the player can place a “bet” of xt,i on each expert i, and then receives reward ∑ i xt,igt,i = xt · gt. The bets are unconstrained (betting a negative value corresponds to betting against the expert). In this setting, a natural goal is the following: place bets so as to achieve as much reward as possible, subject to the constraint that total losses are bounded by a constant (which can be set equal to some starting budget which is to be invested). Our algorithms can satisfy constraints of this form because regret with respect to x̊ = 0 (which equals total loss) is bounded by a constant.\nIt is useful to contrast our results in this setting to previous applications of online convex optimization to portfolio management, for example [6] and [2]. By applying algorithms for exp-concave loss functions, they obtain log-wealth within O(log(T )) of the best constant rebalanced portfolio. However, this approach requires a “no-junk-bond” assumption: on each round, for each investment, you always retain at least an α > 0 fraction of your initial investment. While this may be realistic (though not guaranteed!) for blue-chip stocks, it certainly is not for bets on derivatives that can lose all their value unless a particular event occurs (e.g., a stock price crosses some threshold). Our model allows us to handle such investments: if we play xi > 0, an outcome of gi = −1 corresponds exactly to losing 100% of that investment. Our results imply that if even one investment (out of exponentially many choices) has significant returns, we will increase our wealth exponentially.\nNotation and Problem Statement For the algorithms considered in this paper, it will be more natural to consider reward-maximization rather than loss-minimization. Therefore, we consider online linear optimization where the goal is to maximize cumulative reward given adversarially selected linear reward functions ft(x) = gt · x. On each round t = 1 . . . T , the algorithm selects a point xt ∈ Rn, receives reward ft(xt) = gt · xt, and observes gt. For simplicity, we assume gt,i ∈ [−1, 1], that is, ‖gt‖∞ ≤ 1. If the real problem is against convex loss functions `t(x), they can be converted to our framework by taking gt = −O`t(xt) (see pseudo-code for REWARD-DOUBLING), using the standard reduction from online convex optimization to online linear optimization [13].\nWe use the compressed summation notation g1:t = ∑t s=1 gs for both vectors and scalars. We study the reward of our algorithms, and their regret against a fixed comparator x̊:\nReward ≡ T∑ t=1 gt · xt and Regret(̊x) ≡ g1:T · x̊− T∑ t=1 gt · xt.\nComparison of Regret Bounds The primary contribution of this paper is to establish matching upper and lower bounds for unconstrained online convex optimization problems, using algorithms that require no prior information about the comparator point x̊. Specifically, we present an algorithm that, for any x̊ ∈ Rn, guarantees Regret(̊x) ≤ O ( ‖x̊‖2 √ T log((1 + ‖x̊‖2) √ T ) ) . To obtain this guarantee, we show that it is sufficient (and necessary) that reward is Ω(exp(|g1:T |/ √ T )) (see Theorem 1). This shift of emphasis from regret-minimization to reward-maximization eliminates the quantification on x̊, and may be useful in other contexts.\nTable 1 compares the bounds for REWARD-DOUBLING (this paper) to those of two previous algorithms: online gradient descent [13] and projected exponentiated gradient descent [8, 12]. For each\nOur bounds are not directly comparable to the bounds cited above: a O(log(T )) regret bound on logwealth implies wealth at least O ( OPT/T ) , whereas we guarantee wealth like O ( OPT’ − √ T ) . But more importantly, the comparison classes are different.\nalgorithm, we consider a fixed choice of parameter settings and then look at how regret changes as we vary the comparator point x̊.\nGradient descent is minimax-optimal [1] when the comparator point is contained in a hypershere whose radius is known in advance (‖x̊‖2 ≤ R) and gradients are sparse (‖gt‖2 ≤ 1, top table). Exponentiated gradient descent excels when gradients are dense (‖gt‖∞ ≤ 1, bottom table) but the comparator point is sparse (‖x̊‖1 ≤ R for R known in advance). In both these cases, the bounds for REWARD-DOUBLING match those of the previous algorithms up to logarithmic factors, even when they are tuned optimally with knowledge of R.\nThe advantage of REWARD-DOUBLING shows up when the guess of R used to tune the competing algorithms turns out to be wrong. When x̊ = 0, REWARD-DOUBLING offers constant regret compared to Ω( √ T ) for the other algorithms. When x̊ can be arbitrary, only REWARD-DOUBLING offers sub-linear regret (and in fact its regret bound is optimal, as shown in Theorem 8).\nIn order to guarantee constant origin-regret, REWARD-DOUBLING frequently “jumps” back to playing the origin, which may be undesirable in some applications. In Section 4 we introduce SMOOTH-REWARD-DOUBLING, which achieves similar guarantees without resetting to the origin.\nRelated Work Our work is related, at least in spirit, to the use of a momentum term in stochastic gradient descent for back propagation in neural networks [7, 11, 9]. These results are similar in motivation in that they effectively yield a larger learning rate when many recent gradients point in the same direction.\nIn Follow-The-Regularized-Leader terms, the exponentiated gradient descent algorithm with unnormalized weights of Kivinen and Warmuth [8] plays xt+1 = arg minx∈Rn+ g1:t · x+ 1 η (x log x− x), which has closed-form solution xt+1 = exp(−ηg1:t). Like our algorithm, this algorithm moves away from the origin exponentially fast, but unlike our algorithm it can incur arbitrarily large regret with respect to x̊ = 0. Theorem 9 shows that no algorithm of this form can provide bounds like the ones proved in this paper.\nHazan and Kale [5] give regret bounds in terms of the variance of the gt. Letting G = |g1:t| and H = ∑T t=1 g 2 t , they prove regret bounds of the form O( √ V ) where V = H − G2/T . This result\nhas some similarity to our work in that G/ √ T = √ H − V , and so if we hold H constant, then when V is low, the critical ratio G/ √ T that appears in our bounds is large. However, they consider the case of a known feasible set, and their algorithm (gradient descent with a constant learning rate) cannot obtain bounds of the form we prove."
    }, {
      "heading" : "2 Reward and Regret",
      "text" : "In this section we present a general result that converts lower bounds on reward into upper bounds on regret, for one-dimensional online linear optimization. In the unconstrained setting, this result will be sufficient to provide guarantees for general n-dimensional online convex optimization.\nTheorem 1. Consider an algorithm for one-dimensional online linear optimization that, when run on a sequence of gradients g1, g2, . . . , gT , with gt ∈ [−1, 1] for all t, guarantees\nReward ≥ κ exp (γ|g1:T |)− , (1) where γ, κ > 0 and ≥ 0 are constants. Then, against any comparator x̊ ∈ [−R,R], we have\nRegret(̊x) ≤ R γ\n( log ( R\nκγ\n) − 1 ) + , (2)\nletting 0 log 0 = 0 when R = 0. Further, any algorithm with the regret guarantee of Eq. (2) must guarantee the reward of Eq. (1).\nWe give a proof of this theorem in the appendix. The duality between reward and regret can also be seen as a consequence of the fact that exp(x) and y log y − y are convex conjugates. The γ term typically contains a dependence on T like 1/ √ T . This bound holds for all R, and so for some small R the log term becomes negative; however, for real algorithms the term will ensure the regret bound remains positive. The minus one can of course be dropped to simplify the bound further."
    }, {
      "heading" : "3 Gradient Descent with Increasing Learning Rates",
      "text" : "In this section we show that allowing the learning rate of gradient descent to sometimes increase leads to novel theoretical guarantees.\nTo build intuition, consider online linear optimization in one dimension, with gradients g1, g2, . . . , gT , all in [−1, 1]. In this setting, the reward of unconstrained gradient descent has a simple closed form: Lemma 2. Consider unconstrained gradient descent in one dimension, with learning rate η. On round t, this algorithm plays the point xt = ηg1:t−1. Letting G = |g1:t| and H = ∑T t=1 g 2 t , the cumulative reward of the algorithm is exactly\nReward = η\n2\n( G2 −H ) .\nWe give a simple direct proof in Appendix A. Perhaps surprisingly, this result implies that the reward is totally independent of the order of the linear functions selected by the adversary. Examining the expression in Lemma 2, we see that the optimal choice of learning rate η depends fundamentally on two quantities: the absolute value of the sum of gradients (G), and the sum of the squared gradients (H). If G2 > H , we would like to use as large a learning rate as possible in order to maximize reward. In contrast, if G2 < H , the algorithm will obtain negative reward, and the best it can do is to cut its losses by setting η as small as possible.\nOne of the motivations for this work is the observation that the state-of-the-art online gradient descent algorithms adjust their learning rates based only on the observed value ofH (or its upper bound T ); for example [4, 10]. We would like to increase reward by also accounting for G. But unlike H , which is monotonically increasing with time, G can both increase and decrease. This makes simple guess-and-doubling tricks fail when applied to G, and necessitates a more careful approach."
    }, {
      "heading" : "3.1 Analysis in One Dimension",
      "text" : "In this section we analyze algorithm REWARD-DOUBLING-1D (Algorithm 1), which consists of a series of epochs. We suppose for the moment that an upper bound H̄ on H = ∑T t=1 g 2 t is known in advance. In the first epoch, we run gradient descent with a small initial learning rate η = η1. Whenever the total reward accumulated in the current epoch reaches ηH̄ , we double η and start a new epoch (returning to the origin and forgetting all previous gradients except the most recent one).\nLemma 3. Applied to a sequence of gradients g1, g2, . . . , gT , all in [−1, 1], whereH = ∑T t=1 g 2 t ≤ H̄ , REWARD-DOUBLING-1D obtains reward satisfying\nReward = T∑ t=1 xtgt ≥ 1 4 η1H̄ exp ( a |g1:T |√ H̄ ) − η1H̄, (3)\nfor a = log(2)/ √ 3.\nAlgorithm 1 REWARD-DOUBLING-1D Parameters: initial learning rate η1, upper bound H̄ ≥ ∑T t=1 g 2 t .\nInitialize x1 ← 0, i← 1, and Q1 ← 0. for t = 1, 2, . . . , T do\nPlay xt, and receive reward xtgt. Qi ← Qi + xtgt. if Qi < ηiH̄ then xt+1 ← xt + ηigt. else i← i+ 1. ηi ← 2ηi−1; Qi ← 0. xt+1 ← 0 + ηigt.\nAlgorithm 2 REWARD-DOUBLING Parameters: maximum origin-regret i for 1 ≤ i ≤ n. for i = 1, 2, . . . , n do\nLet Ai be a copy of algorithm REWARD-DOUBLING-1D-GUESS (see Theorem 4), with parameter i. for t = 1, 2, . . . , T do Play xt, with xt,i selected by Ai. Receive gradient vector gt = −Oft(xt). for i = 1, 2, . . . , n do\nFeed back gt,i to Ai.\nProof. Suppose round T occurs during the k’th epoch. Because epoch i can only come to an end if Qi ≥ ηiH̄ , where ηi = 2i−1η1, we have\nReward = k∑ i=1 Qi ≥ ( k−1∑ i=1 2i−1η1H̄ ) +Qk = ( 2k−1 − 1 ) η1H̄ +Qk . (4)\nWe now lower bound Qk. For i = 1, . . . , k let ti denote the round on which Qi is initialized to 0, with t1 ≡ 1, and define tk+1 ≡ T . By construction, Qi is the total reward of a gradient descent algorithm that is active on rounds ti through ti+1 inclusive, and that uses learning rate ηi (note that on round ti, this algorithm gets 0 reward and we initialize Qi to 0 on that round). Thus, by Lemma 2, we have that for any i,\nQi = ηi 2\n( (gti:ti+1) 2 − ti+1∑ s=ti g2s ) ≥ −ηi 2 H̄ .\nApplying this bound to epoch k, we have Qk ≥ − 12ηkH̄ = −2 k−2η1H̄ . Substituting into (4) gives\nReward ≥ η1H̄(2k−1 − 1− 2k−2) = η1H̄(2k−2 − 1) . (5)\nWe now show that k ≥ |g1:T |√ 3H̄ . At the end of round ti+1−1, we must have hadQi < ηiH̄ (otherwise epoch i+ 1 would have begun earlier). Thus, again using Lemma 2,\nηi 2\n( (gti:ti+1−1) 2 − H̄ ) ≤ ηiH̄\nso |gti:ti+1−1| ≤ √ 3H̄ . Thus,\n|g1:T | ≤ k∑ i=1 |gti:ti+1−1| ≤ k √ 3H̄ .\nRearranging gives k ≥ |g1:T |√ 3H̄ , and combining with Eq. (5) proves the lemma.\nWe can now apply Theorem 1 to the reward (given by Eq. (3)) of REWARD-DOUBLING-1D to show\nRegret(̊x) ≤ bR √ H̄ ( log ( 4Rb √ H̄\nη1\n) − 1 ) + η1H̄ (6)\nfor any x̊ ∈ [−R,R], where b = a−1 = √\n3/ log(2) < 2.5. When the feasible set is also fixed in advance, online gradient descent with a fixed learning obtains a regret bound of O(R √ T ). Suppose we use the estimate H̄ = T . By choosing η1 = 1T , we guarantee constant regret against the origin, x̊ = 0 (equivalently, constant total loss). Further, for any feasible set of radius R, we still have\nworst-case regret of at most O(R √ T log((1 + R)T )), which is only modestly worse than that of gradient descent with the optimal R known in advance.\nThe need for an upper bound H̄ can be removed using a standard guess-and-doubling approach, at the cost of a constant factor increase in regret (see appendix for proof). Theorem 4. Consider algorithm REWARD-DOUBLING-1D-GUESS, which behaves as follows. On each era i, the algorithm runs REWARD-DOUBLING-1D with an upper bound of H̄i = 2i−1, and initial learning rate ηi1 = 2\n−2i. An era ends when H̄i is no longer an upper bound on the sum of squared gradients seen during that era. Letting c = √ 2√\n2−1 , this algorithm has regret at most\nRegret ≤ cR √ H + 1 ( log ( R (2H + 2)5/2 ) − 1 ) + ."
    }, {
      "heading" : "3.2 Extension to n dimensions",
      "text" : "To extend our results to general online convex optimization, it is sufficient to run a separate copy of REWARD-DOUBLING-1D-GUESS for each coordinate, as is done in REWARD-DOUBLING (Algorithm 2). The key to the analysis of this algorithm is that overall regret is simply the sum of regret on n one-dimensional subproblems which can be analyzed independently. Theorem 5. Given a sequence of convex loss functions f1, f2, . . . , fT from Rn to R, REWARD-DOUBLING with i = n has regret bounded by\nRegret(̊x) ≤ + c n∑ i=1 |̊xi| √ Hi + 1 ( log (n |̊xi|(2Hi + 2)5/2 ) − 1 )\n≤ + c‖x̊‖2 √ H + n ( log (n ‖x̊‖22(2H + 2)5/2 ) − 1 )\nfor c = √\n2√ 2−1 , where Hi = ∑T t=1 g 2 t,i and H = ∑T t=1 ‖gt‖22.\nProof. Fix a comparator x̊. For any coordinate i, define\nRegreti = T∑ t=1 x̊igt,i − T∑ t=1 xt,igt,i .\nObserve that n∑ i=1 Regreti = T∑ t=1 x̊ · gt − T∑ t=1 xt · gt = Regret(̊x) .\nFurthermore, Regreti is simply the regret of REWARD-DOUBLING-1D-GUESS on the gradient sequence g1,i, g2,i, . . . , gT,i. Applying the bound of Theorem 4 to each Regreti term completes the proof of the first inequality. For the second inequality, let ~H be a vector whose ith component is√ Hi + 1, and let ~x ∈ Rn where ~xi = |̊xi|. Using the Cauchy-Schwarz inequality, we have\nn∑ i=1 |̊xi| √ Hi + 1 = ~x · ~H ≤ ‖x̊‖2 ‖ ~H‖2 = ‖x̊‖2 √ H + n .\nThis, together with the fact that log(|̊xi|(2Hi + 2)5/2) ≤ log(‖x̊‖22(2H + 2)5/2), suffices to prove second inequality.\nIn some applications, n is not known in advance. In this case, we can set i = i2 for the ith coordinate we encounter, and get the same bound up to constant factors."
    }, {
      "heading" : "4 An Epoch-Free Algorithm",
      "text" : "In this section we analyze SMOOTH-REWARD-DOUBLING, a simple algorithm that achieves bounds comparable to those of Theorem 4, without guessing-and-doubling. We consider only the 1-d problem, as the technique of Theorem 5 can be applied to extend to n dimensions. Given a parameter\nη > 0, we achieve\nRegret ≤ R √ T ( log ( RT 3/2\nη\n) − 1 ) + 1.76η, (7)\nfor all T and R, which is better (by constant factors) than Theorem 4 when gt ∈ {−1, 1} (which implies T = H). The bound can be worse on a problems where H < T .\nThe idea of the algorithm is to maintain the invariant that our cumulative reward, as a function of g1:t and t, satisfies Reward ≥ N(g1:t, t), for some fixed function N . Because reward changes by gtxt on round t, it suffices to guarantee that for any g ∈ [−1, 1],\nN(g1:t, t) + gxt+1 ≥ N(g1:t + g, t+ 1) (8)\nwhere xt+1 is the point the algorithm plays on round t+ 1, and we assume N(0, 1) = 0.\nThis inequality is approximately satisfied (for small g) if we choose\nxt+1 = ∂N(g1:t + g, t) ∂g ≈ N(g1:t + g, t)−N(g1:t, t) g ≈ N(g1:t + g, t+ 1)−N(g1:t, t) g .\nThis suggests that if we want to maintain reward at least N(g1:t, t) = 1t (exp(|g1:t|/ √ t) − 1) , we should set xt+1 ≈ sign(g1:t)t−3/2 exp ( |g1:t|√ t ) . The following theorem (proved in the appendix) provides an inductive analysis of an algorithm of this form. Theorem 6. Fix a sequence of reward functions ft(x) = gtx with gt ∈ [−1, 1], and let Gt = |g1:t|. We consider SMOOTH-REWARD-DOUBLING, which plays 0 on round 1 and whenever Gt = 0; otherwise, it plays xt+1 = η sign(g1:t)B(Gt, t+ 5) (9) with η > 0 a learning-rate parameter and\nB(G, t) = 1\nt3/2 exp ( G√ t ) . (10)\nThen, at the end of each round t, this algorithm has\nReward(t) ≥ η 1 t+ 5 exp ( Gt√ t+ 5 ) − 1.76η.\nTwo main technical challenges arise in the proof: first, we prove a result like Eq. (8) forN(g1:t, t) = (1/t) exp ( |g1:t|/ √ t ) . However, this Lemma only holds for t ≥ 6 and when the sign of g1:t doesn’t change. We account for this by showing that a small modification toN (costing only a constant over all rounds) suffices.\nBy running this algorithm independently for each coordinate using an appropriate choice of η, one can obtain a guarantee similar to that of Theorem 5."
    }, {
      "heading" : "5 Lower Bounds",
      "text" : "As with our previous results, it is sufficient to show a lower bound in one dimension, as it can then be replicated independently in each coordinate to obtain an n dimensional bound. Note that our lower bound contains the factor log(|̊x| √ T ), which can be negative when x̊ is small relative to T , hence it is important to hold x̊ fixed and consider the behavior as T → ∞. Here we give only a proof sketch; see Appendix A for the full proof. Theorem 7. Consider the problem of unconstrained online linear optimization in one dimension, and an online algorithm that guarantees origin-regret at most . Then, for any fixed comparator x̊, and any integer T0, there exists a gradient sequence {gt} ∈ [−1, 1]T of length T ≥ T0 for which the algorithm’s regret satisfies\nRegret(̊x) ≥ 0.336|̊x| √√√√T log( |̊x|√T ) .\nProof. (Sketch) Assume without loss of generality that x̊ > 0. Let Q be the algorithm’s reward when each gt is drawn independently uniformly from {−1, 1}. We have E[Q] = 0, and because the algorithm guarantees origin-regret at most , we haveQ ≥ − with probability 1. LettingG = g1:T , it follows that for any threshold Z = Z(T ),\n0 = E[Q]\n= E[Q|G < Z] · Pr[G < Z] + E[Q|G ≥ Z] · Pr[G ≥ Z] ≥ − Pr[G < Z] + E[Q|G ≥ Z] · Pr[G ≥ Z] > − + E[Q|G ≥ Z] · Pr[G ≥ Z] .\nEquivalently, E[Q|G ≥ Z] <\nPr[G ≥ Z] .\nWe choose Z(T ) = √ kT , where k = ⌊ log(R √ T )/ log(p −1) ⌋\n. Here R = |̊x| and p > 0 is a constant chosen using binomial distribution lower bounds so that Pr[G ≥ Z] ≥ pk. This implies\nE[Q|G ≥ Z] < p−k = exp ( k log p−1 ) ≤ R √ T .\nThis implies there exists a sequence with G ≥ Z and Q < R √ T . On this sequence, regret is at least Gx̊−Q ≥ R √ kT −R √ T = Ω(R √ kT ).\nTheorem 8. Consider the problem of unconstrained online linear optimization in Rn, and consider an online algorithm that guarantees origin-regret at most . For any radius R, and any T0, there exists a gradient sequence gradient sequence {gt} ∈ ([−1, 1]n)T of length T ≥ T0, and a comparator x̊ with ‖x̊‖1 = R, for which the algorithm’s regret satisfies\nRegret(̊x) ≥ 0.336 n∑ i=1 |̊xi|\n√√√√T log( |̊xi|√T ) .\nProof. For each coordinate i, Theorem 7 implies that there exists a T ≥ T0 and a sequence of gradients gt,i such that\nT∑ t=1 x̊igt,i − T∑ t=1 xt,igt,i ≥ 0.336|̊xi|\n√√√√T log( |̊xi|√T ) .\n(The proof of Theorem 7 makes it clear that we can use the same T for all i.) Summing this inequality across all n coordinates then gives the regret bound stated in the theorem.\nThe following theorem presents a stronger negative result for Follow-the-Regularized-Leader algorithms with a fixed regularizer: for any such algorithm that guarantees origin-regret at most T after T rounds, worst-case regret with respect to any point outside [− T , T ] grows linearly with T . Theorem 9. Consider a Follow-The-Regularized-Leader algorithm that sets\nxt = arg min x (g1:t−1x+ ψT (x))\nwhere ψT is a convex, non-negative function with ψT (0) = 0. Let T be the maximum origin-regret incurred by the algorithm on a sequence of T gradients. Then, for any x̊ with |̊x| > T , there exists a sequence of T gradients such that the algorithm’s regret with respect to x̊ is at least T−12 (|̊x| − T ).\nIn fact, it is clear from the proof that the above result holds for any algorithm that selects xt+1 purely as a function of g1:t (in particular, with no dependence on t)."
    }, {
      "heading" : "6 Future Work",
      "text" : "This work leaves open many interesting questions. It should be possible to apply our techniques to problems that do have constrained feasible sets; for example, it is natural to consider the unconstrained experts problem on the positive orthant. While we believe this extension is straightforward, handling arbitrary non-axis-aligned constraints will be more difficult. Another possibility is to develop an algorithm with bounds in terms of H rather than T that doesn’t use a guess and double approach."
    }, {
      "heading" : "A Proofs",
      "text" : "This appendix gives the proofs omitted in the body of the paper, with the corresponding lemmas and theorems restated for convenience.\nTheorem 1. Consider an algorithm for one-dimensional online linear optimization that, when run on a sequence of gradients g1, g2, . . . , gT , with gt ∈ [−1, 1] for all t, guarantees\nReward ≥ κ exp (γ|g1:T |)− , (1)\nwhere γ, κ > 0 and ≥ 0 are constants. Then, against any comparator x̊ ∈ [−R,R], we have\nRegret(̊x) ≤ R γ\n( log ( R\nκγ\n) − 1 ) + , (2)\nletting 0 log 0 = 0 when R = 0. Further, any algorithm with the regret guarantee of Eq. (2) must guarantee the reward of Eq. (1).\nProof. Let GT = |g1:T |. By definition, given the reward guarantee of Eq. (1) we have\nRegret ≤ RGT − κ exp (γGT ) + . (11)\nIf R = 0, then Eq. (2) follows immediately. Otherwise, note this is a concave function in GT , and setting the first derivative equal to zero shows\nG∗ = 1\nγ log\n( R\nγκ\n) .\nmaximizes regret (for large enough R we could have G∗ > T , and so this G∗ is not actually achievable by the adversary, but this is fine for lower bounding regret). Plugging G∗ into Eq. (11) and simplifying yields the bound of Eq. (2). For the second claim, suppose Eq. (2) holds. Then, again by definition, we must have\nReward ≥ RG− R γ log\n( R\nγκ\n) + R\nγ − . (12)\nThis bound is a concave function of R, and since it holds for any R ≥ 0 by assumption, we can choose the R that maximizes the bound, namely R∗ = γκ exp(γG). Note\nR∗\nγ log\n( R∗\nγκ\n) = R∗\nγ log (exp (γG)) = R∗G,\nand so plugging R∗ into Eq. (12) yields\nReward ≥ 1 γ R∗ − = κ exp (γG)− .\nLemma 2. Consider unconstrained gradient descent in one dimension, with learning rate η. On round t, this algorithm plays the point xt = ηg1:t−1. Letting G = |g1:t| and H = ∑T t=1 g 2 t , the cumulative reward of the algorithm is exactly\nReward = η\n2\n( G2 −H ) .\nProof. The algorithm’s cumulative reward after T rounds is\nT∑ t=1 xtgt = T∑ t=1 gtηg1:t−1 = η 2\n( (g1:T )\n2 − T∑ t=1 g2t\n) . (13)\nTo verify the second equality, note that (g1:T )2 − (g1:T−1)2 = g2T + 2gT (g1:T−1), so on round T the right hand side increases by ηgT (g1:T−1), as does the left hand side. The equality then follows by induction on T .\nIt is worth noting that the standard R √ T bound can be derived from the above result fairly easily. We have\nRegret ≤ RG− η 2 (G2 −H)\n≤ η 2 H + max G\n( RG− ηG 2\n2 ) ≤ η\n2 H +\nR2 2η ,\nwhere the max is achieved by taking G = R/η. Taking η = R/ √ T then gives the standard bound. However, this bound significantly underestimates the performance of constant-learning-rate gradient descent whenG is large. This is in contrast to our regret bounds, which are always tight with respect to their matching reward bounds. Theorem 4. Consider algorithm REWARD-DOUBLING-1D-GUESS, which behaves as follows. On each era i, the algorithm runs REWARD-DOUBLING-1D with an upper bound of H̄i = 2i−1, and initial learning rate ηi1 = 2\n−2i. An era ends when H̄i is no longer an upper bound on the sum of squared gradients seen during that era. Letting c = √ 2√\n2−1 , this algorithm has regret at most\nRegret ≤ cR √ H + 1 ( log ( R (2H + 2)5/2 ) − 1 ) + .\nProof. Suppose round T occurs in era k, and let ti be the round on which era i starts, with tk+1 ≡ T + 1. Define Hi = ∑ti+1−1 s=ti\ng2s . To prove the theorem we will need several inequalities. First, note that H = ∑k i=1Hi ≥ ∑k−1 i=1 H̄i = 2\nk−1 − 1, or 2k−1 ≤ H + 1. Thus, k∑ i=1 √ H̄i = k−1∑ i=0 √ 2i = √ 2 k − 1√ 2− 1 ≤ √ 2k√ 2− 1 ≤ √ 2(H + 1)√ 2− 1 = c √ H + 1 .\nNext, note that for any i we have√ H̄i ηi1 = 1 2 i−1 2 +2i ≤ 1 22.5k ≤ 1 (2(H + 1))(5/2).\nNote that the bound of Lemma 3 applies for all T where H ≤ H̄ , and thus so does Eq. (6). Thus, we can apply this bound to the regret in era k on rounds tk through T , as well as on the regret in each earlier era. Then, total regret with respect to the best point in [−R,R] is at most the sum of the regret in each era, so\nRegret ≤ k∑ i=1 R √ H̄i\n( log ( R √ H̄i\nηi1\n) − 1 ) + ηi1Hi\n≤ k∑ i=1 R √ H̄i ( log ( R (2H + 2)5/2 ) − 1 ) + ηi1Hi\n≤ cR √ H + 1 ( log ( R (2H + 2)5/2 ) − 1 ) + k∑ i=1 ηi1Hi\nFinally, because Hi ≤ H̄i + 1 ≤ 2H̄i = 2i, we have ∑k i=1 η i 1Hi ≤ ∑k i=1 2\n−i ≤ , which completes the proof.\nTheorem 6. Fix a sequence of reward functions ft(x) = gtx with gt ∈ [−1, 1], and let Gt = |g1:t|. We consider SMOOTH-REWARD-DOUBLING, which plays 0 on round 1 and whenever Gt = 0; otherwise, it plays xt+1 = η sign(g1:t)B(Gt, t+ 5) (9) with η > 0 a learning-rate parameter and\nB(G, t) = 1\nt3/2 exp ( G√ t ) . (10)\nThen, at the end of each round t, this algorithm has\nReward(t) ≥ η 1 t+ 5 exp ( Gt√ t+ 5 ) − 1.76η.\nProof. We present a proof for the case where η = 1; since η simply scales all of the xt played by the algorithm (and hence, reward), the result for general η follows immediately. We use the minimum reward function\nN(G, t) = 1\nt exp ( G√ t ) . (14)\nThe proof will be by induction on t, with the induction hypothesis that the cumulative reward of the algorithm at the end of round t satisfies\nReward(t) ≥ N(Gt, t+ 5)− 1:t, (15)\nwhere 1 = N(1, 6) and for t > 1, t+1 = ̃(t+ 5) with\ñ(τ) = 1\nτ + 1 exp ( 1√ τ + 1 ) − 1 τ + 1 τ3/2 .\nWe will then show that the sum of t’s is always bounded by a constant.\nFor the base case, t = 1, we play x = 0 so end the round with zero reward, while the RHS of Eq. (15) is N(|g1|, 6)−N(1, 6) ≤ 0. Now, suppose the induction hypothesis holds at the end of some round t ≥ 1. Without loss of generality, suppose g1:t ≥ 0 so Gt = g1:t. We consider two cases. First, suppose Gt > 0 and Gt + gt+1 > 0 (so gt+1 > −Gt). In this case, g1:t does not change sign when we add gt+1; thus, an invariant like that of Eq. (8) is sufficient; we prove such a result in Lemma 10 (given below). More precisely, we play xt+1 according to Eq. (9), and\nReward(t+ 1) ≥ N(Gt, t+ 5)− 1:t + gt+1xt+1 IH and update rule ≥ N(Gt + gt+1, t+ 5 + 1)− 1:t Lemma 10 with τ = t+ 5. ≥ N(Gt+1, t+ 5 + 1)− 1:t+1, since t+1 > 0.\nFor the remaining case, we have Gt + gt+1 ≤ 0, implying gt+1 ≤ −Gt ≤ 0. In this case, we suffer some loss and arrive at Gt+1 = |Gt + gt+1| = −gt+1 − Gt. Lemma 11 (below) provides the key bound on the additional loss when the sign of g1:t changes. If Gt > 0, we have\nReward(t+ 1) ≥ N(Gt, t+ 5)− 1:t + gt+1xt+1 IH and update rule ≥ N(−gt+1 −Gt, t+ 5 + 1)− 1:t+1 Lemma 11 with τ = t+ 5 = N(Gt+1, t+ 5 + 1)− 1:t+1.\nIf Gt = 0, we can take gt+1 non-positive without loss of generality, and playing xt+1 = 0 is no worse than playing B(0, t+ 5), and so we conclude Eq. (15) holds for all t. Finally,\n∞∑ t=2 t ≤ ∫ ∞ τ=6 ̃(τ) = √ 2 3 − 2γ + 2 Ei ( 1√ 7 ) + log(6) ≤ 1.50.\nwhere γ is the Euler gamma constant and Ei is the exponential integral. The upper bound can be found easily using numerical methods. Adding 1 = exp(1/ √ 6)/6 ≤ 0.26 gives 1:T ≤ 1.76 for any T .\nLemma 10. Let G > 0 and τ ≥ 6. Then, for any g ∈ [−1, 1] such that G+ g ≥ 0,\nN(G, τ) + gB(G, τ)−N(G+ g, τ + 1) ≥ 0\nwhere N is defined by Eq. (14) and B is defined by Eq. (10).\nProof. We need to show\n1 τ exp ( G√ τ ) + g τ3/2 exp ( G√ τ ) − 1 τ + 1 exp ( G+ g√ τ + 1 ) ≥ 0.\nor equivalently, multiplying by τ3/2(1 + τ)/ exp(G/ √ τ) ≥ 0,\n∆ = √ τ(1 + τ) + g(1 + τ)− τ3/2 exp ( G+ g√ τ + 1 − G√ τ ) ≥ 0.\nSince τ + 1 ≥ τ , the exp term is maximized when G = 0, so\n∆ ≥ (g + √ τ)(1 + τ)− τ3/2 exp ( g√ τ + 1 ) . (16)\nNow, we consider the cases where g ≥ 0 and g < 0 separately. First, suppose g > 0, so g/ √ τ + 1 ∈ [0, 1], and we can use the inequality exp(x) ≤ 1 + x+ x2 for x ∈ [0, 1], which gives\n∆ ≥ g + gτ + √ τ + τ3/2 − τ3/2 ( 1 +\ng√ τ + 1 + g2 τ + 1 ) ≥ g + gτ + √ τ + τ3/2 − τ3/2 ( 1 +\ng√ τ + 1 τ ) = g + gτ + √ τ + τ3/2 − τ3/2 − gτ − √ τ\n= g > 0.\nNow, we consider the case where g < 0. In order to show ∆ ≥ 0 in this case, we need a tight upper bound on exp(y) for y ∈ [−1, 0]. To derive one, we note that for x ≥ 0, exp(x) ≥ 1 + x + 12x 2 from the series representation of ex, and so exp(−x) ≤ (1 + x+ 12x 2)−1. Thus, for y ∈ [−1, 0] we have exp(y) ≤ (1− y + 12y 2)−1 = Q(y). Then, starting from Eq. (16),\n∆ ≥ (g + √ τ)(1 + τ)− τ3/2Q ( g√ τ + 1 ) .\nLet ∆2 = ∆Q (\ng√ τ+1\n)−1 . Because ∆2 and ∆ have the same sign, it suffices to show ∆2 ≥ 0. We\nhave\n∆2 =\n( 1− g√\nτ + 1 +\ng2\n2(t+ 1)\n) (g + √ τ)(1 + τ)− τ3/2\n= ( 1 + τ − g √ τ + 1 + 1 2 g2 ) (g + √ τ)− τ3/2.\nFirst, note d\ndg ∆2 = 1 +\n3g2 2 + g √ τ + τ − 2g √ 1 + τ − √ τ √ 1 + τ .\nSince g ≤ 0, we have −2g √ τ + 1 + g √ τ ≥ 0, and (t+ 1)− √ τ √ τ + 1 ≥ 0, and so we conclude that ∆2 is increasing in g, and so taking g = −1 we have\n∆2 ≥ (3\n2 + τ +\n√ τ + 1 ) (−1 + √ τ)− τ3/2\nTaking the derivative with respect to τ reveals this expression is increasing in τ , and taking τ = 6 produces a positive value, proving this case.\nLemma 11. For any g ∈ [−1, 0] and G ≥ 0 such that G+ g ≤ 0, and any τ ≥ 1, N(G, τ) + gB(G, τ) ≥ N(−g −G, τ + 1)− ̃(τ)\nwhere N is defined by Eq. (14) and B is defined by Eq. (10), and\ñ(τ) ≡ 1 τ + 1 exp ( 1√ τ + 1 ) − 1 τ + 1 τ3/2 .\nProof. We have\nN(−g −G, τ + 1)−N(G, τ)− gB(G, τ)\n= 1\nτ + 1 exp ( −g −G√ τ + 1 ) − 1 τ exp ( G√ τ ) − g τ3/2 exp ( G√ τ ) ,\nand since this expression is increasing as g decreases, and g ≥ −1 in any case,\n≤ 1 τ + 1 exp ( 1−G√ τ + 1 ) − 1 τ exp ( G√ τ ) + 1 τ3/2 exp ( G√ τ ) ,\nand since τ3/2 > τ , taken together the second two terms increase as G decreases, as does the first term, so since G ≥ 0,\n≤ 1 τ + 1 exp ( 1√ τ + 1 ) − 1 τ + 1 τ3/2 = ̃(τ),\nand re-arranging proves the lemma.\nTheorem 9. Consider a Follow-The-Regularized-Leader algorithm that sets\nxt = arg min x (g1:t−1x+ ψT (x))\nwhere ψT is a convex, non-negative function with ψT (0) = 0. Let T be the maximum origin-regret incurred by the algorithm on a sequence of T gradients. Then, for any x̊ with |̊x| > T , there exists a sequence of T gradients such that the algorithm’s regret with respect to x̊ is at least T−12 (|̊x| − T ).\nProof. For simplicity, we will prove that regret is at least T2 (|̊x| − T ) when T is even; if T is odd, we simply take gT = 0 and consider the first T − 1 rounds. Let T = 2M . We will consider two gradient sequences. First, suppose gt = 1 for t ≤ M , and gt = −1 otherwise. Observe that for any r, we have g1:M−r = g1:M+r, which implies xM−r+1 = xM+r+1. Thus, the algorithm’s total reward is\nT∑ t=1 xtgt = M∑ t=1 xt − T∑ t=M+1 xt\n= x1 − xM+1 + M−1∑ r=1 xM−r+1 − xM+r+1\n= x1 − xM+1 Because x1 = 0, we get that on this sequence the algorithm has origin-regret x̂ ≡ xM+1, and so by assumption x̂ ≤ T . Next, suppose g1 = 1 for t ≤ M , and gt = 0 otherwise. For this sequence, we will have xt ≤ x̂ ≤ T for all t, so total reward is at most M T . For any positive x̊ with x̊ > T , this means that regret with respect to x̊ is at least x̊M −M T = M(|̊x| − T ) . For x̊ < − T , we can use a similar argument with the sign of the gradients reversed (for both gradient sequences) to get the same bound.\nIn proving Theorem 7, we will use the following lemma. Lemma 12. Let GT = ∑T i=1 gi be the sum of T random variables, each drawn uniformly from {−1, 1}. Then, for any integer k that is a factor of T , we have\nPr[GT ≥ √ kT ] ≥ pk .\nwhere p = 726 = 0.109375.\nProof. First, for any T define pT = Pr[GT ≥ √ T ], and define\np = inf T∈Z+ pT .\nFor any T , we have pT ≥ 2−T trivially, and by the Central Limit Theorem, limT→∞ pT = 1 − N0,1(1) > 0, where N0,1 is the standard normal cumulative distribution function. It follows that p > 0, and using numerical methods we find p = p6 = 726 = 0.109375.\nNow, divide the length T sequence into k sequences of length Tk . Let Zi be the sum of gradients for the ith of these sequences. Observe that if Zi ≥ √ T k for all i, then GT = ∑k i=1 Zi ≥ k √ T k =√\nkT . Furthermore, for any i, we have\nPr [ Zi ≥ √ T\nk\n] = Pr [ GT k ≥ √ T\nk\n] ≥ p .\nThus,\nPr [ G ≥ √ kT ] ≥ k∏ i=1 Pr [ Zi ≥ √ T k ] ≥ pk .\nTheorem 7. Consider the problem of unconstrained online linear optimization in one dimension, and an online algorithm that guarantees origin-regret at most . Then, for any fixed comparator x̊, and any integer T0, there exists a gradient sequence {gt} ∈ [−1, 1]T of length T ≥ T0 for which the algorithm’s regret satisfies\nRegret(̊x) ≥ 0.336|̊x| √√√√T log( |̊x|√T ) .\nProof. Let k = k(T ) = ⌊ log(R √ T )/ log(p −1) ⌋\n, and choose T ≥ T0 large enough so that 4 ≤ k ≤ T and also so that T is a multiple of k (the latter is possible since k(T ) grows much more slowly than T ). Let Q be the algorithm’s reward when each gt is drawn uniformly from {−1, 1}. Let G = g1:T . As shown in the proof sketch, we have\nE[Q|G ≥ √ kT ] <\nPr[G ≥ √ kT ] .\nBy Lemma 12, Pr[G ≥ √ kT ] ≥ pk. Thus,\nE[Q|G ≥ √ kT ] < p−k = exp ( k log p−1 ) ≤ R √ T .\nIf the algorithm guaranteed Q ≥ R √ T whenever G ≥ √ kT , then we would have E[Q|G ≥√\nkT ] ≥ R √ T , a contradiction. Thus, there exists a sequence where G ≥ √ kT and Q < R √ T , so\non this sequence we have\nRegret ≥ R √ kT −R √ T = R √ T ( √ k − 1)\nBecause k ≥ 4, we have 12 √ k ≥ 1 or √ k − 1 ≥ 12 √ k, so regret is at least 12R √ kT =\nbR √ T log ( R √ T ) , where b = 12 √ 1 log p−1 > 0.336 (and p is the constant from Lemma 12)."
    } ],
    "references" : [ {
      "title" : "Optimal strategies and minimax lower bounds for online convex games",
      "author" : [ "Jacob Abernethy", "Peter L. Bartlett", "Alexander Rakhlin", "Ambuj Tewari" ],
      "venue" : "In COLT,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2008
    }, {
      "title" : "Algorithms for portfolio management based on the Newton method",
      "author" : [ "Amit Agarwal", "Elad Hazan", "Satyen Kale", "Robert E. Schapire" ],
      "venue" : "In ICML,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2006
    }, {
      "title" : "Prediction, Learning, and Games",
      "author" : [ "Nicolò Cesa-Bianchi", "Gabor Lugosi" ],
      "venue" : null,
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2006
    }, {
      "title" : "Adaptive subgradient methods for online learning and stochastic optimization",
      "author" : [ "John Duchi", "Elad Hazan", "Yoram Singer" ],
      "venue" : "In COLT,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2010
    }, {
      "title" : "Extracting certainty from uncertainty: Regret bounded by variation in costs",
      "author" : [ "Elad Hazan", "Satyen Kale" ],
      "venue" : "In COLT,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2008
    }, {
      "title" : "On stochastic and worst-case models for investing",
      "author" : [ "Elad Hazan", "Satyen Kale" ],
      "venue" : "In Advances in Neural Information Processing Systems",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2009
    }, {
      "title" : "Increased rates of convergence through learning rate adaptation",
      "author" : [ "Robert A. Jacobs" ],
      "venue" : "Neural Networks,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 1987
    }, {
      "title" : "Exponentiated Gradient Versus Gradient Descent for Linear Predictors",
      "author" : [ "Jyrki Kivinen", "Manfred Warmuth" ],
      "venue" : "Journal of Information and Computation,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1997
    }, {
      "title" : "Optimal stochastic search and adaptive momentum",
      "author" : [ "Todd K. Leen", "Genevieve B. Orr" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 1993
    }, {
      "title" : "Adaptive bound optimization for online convex optimization",
      "author" : [ "H. Brendan McMahan", "Matthew Streeter" ],
      "venue" : "In COLT,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2010
    }, {
      "title" : "Gradient descent: Second order momentum and saturating error",
      "author" : [ "Barak Pearlmutter" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 1991
    }, {
      "title" : "Online learning and online convex optimization",
      "author" : [ "Shai Shalev-Shwartz" ],
      "venue" : "Foundations and Trends in Machine Learning,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2012
    } ],
    "referenceMentions" : [ {
      "referenceID" : 2,
      "context" : ", [3, 12] for an introduction).",
      "startOffset" : 2,
      "endOffset" : 9
    }, {
      "referenceID" : 11,
      "context" : ", [3, 12] for an introduction).",
      "startOffset" : 2,
      "endOffset" : 9
    }, {
      "referenceID" : 2,
      "context" : ", [3]), there are n experts, and on each round t the player selects an expert (say i), and obtains reward gt,i from a bounded interval (say [−1, 1]).",
      "startOffset" : 2,
      "endOffset" : 5
    }, {
      "referenceID" : 5,
      "context" : "It is useful to contrast our results in this setting to previous applications of online convex optimization to portfolio management, for example [6] and [2].",
      "startOffset" : 145,
      "endOffset" : 148
    }, {
      "referenceID" : 1,
      "context" : "It is useful to contrast our results in this setting to previous applications of online convex optimization to portfolio management, for example [6] and [2].",
      "startOffset" : 153,
      "endOffset" : 156
    }, {
      "referenceID" : 7,
      "context" : "Table 1 compares the bounds for REWARD-DOUBLING (this paper) to those of two previous algorithms: online gradient descent [13] and projected exponentiated gradient descent [8, 12].",
      "startOffset" : 172,
      "endOffset" : 179
    }, {
      "referenceID" : 11,
      "context" : "Table 1 compares the bounds for REWARD-DOUBLING (this paper) to those of two previous algorithms: online gradient descent [13] and projected exponentiated gradient descent [8, 12].",
      "startOffset" : 172,
      "endOffset" : 179
    }, {
      "referenceID" : 0,
      "context" : "Gradient descent is minimax-optimal [1] when the comparator point is contained in a hypershere whose radius is known in advance (‖x̊‖2 ≤ R) and gradients are sparse (‖gt‖2 ≤ 1, top table).",
      "startOffset" : 36,
      "endOffset" : 39
    }, {
      "referenceID" : 6,
      "context" : "Related Work Our work is related, at least in spirit, to the use of a momentum term in stochastic gradient descent for back propagation in neural networks [7, 11, 9].",
      "startOffset" : 155,
      "endOffset" : 165
    }, {
      "referenceID" : 10,
      "context" : "Related Work Our work is related, at least in spirit, to the use of a momentum term in stochastic gradient descent for back propagation in neural networks [7, 11, 9].",
      "startOffset" : 155,
      "endOffset" : 165
    }, {
      "referenceID" : 8,
      "context" : "Related Work Our work is related, at least in spirit, to the use of a momentum term in stochastic gradient descent for back propagation in neural networks [7, 11, 9].",
      "startOffset" : 155,
      "endOffset" : 165
    }, {
      "referenceID" : 7,
      "context" : "In Follow-The-Regularized-Leader terms, the exponentiated gradient descent algorithm with unnormalized weights of Kivinen and Warmuth [8] plays xt+1 = arg minx∈Rn+ g1:t · x+ 1 η (x log x− x), which has closed-form solution xt+1 = exp(−ηg1:t).",
      "startOffset" : 134,
      "endOffset" : 137
    }, {
      "referenceID" : 4,
      "context" : "Hazan and Kale [5] give regret bounds in terms of the variance of the gt.",
      "startOffset" : 15,
      "endOffset" : 18
    }, {
      "referenceID" : 3,
      "context" : "One of the motivations for this work is the observation that the state-of-the-art online gradient descent algorithms adjust their learning rates based only on the observed value ofH (or its upper bound T ); for example [4, 10].",
      "startOffset" : 219,
      "endOffset" : 226
    }, {
      "referenceID" : 9,
      "context" : "One of the motivations for this work is the observation that the state-of-the-art online gradient descent algorithms adjust their learning rates based only on the observed value ofH (or its upper bound T ); for example [4, 10].",
      "startOffset" : 219,
      "endOffset" : 226
    } ],
    "year" : 2012,
    "abstractText" : "Some of the most compelling applications of online convex optimization, including online prediction and classification, are unconstrained: the natural feasible set is R. Existing algorithms fail to achieve sub-linear regret in this setting unless constraints on the comparator point x̊ are known in advance. We present algorithms that, without such prior knowledge, offer near-optimal regret bounds with respect to any choice of x̊. In particular, regret with respect to x̊ = 0 is constant. We then prove lower bounds showing that our guarantees are near-optimal in this setting.",
    "creator" : "LaTeX with hyperref package"
  }
}