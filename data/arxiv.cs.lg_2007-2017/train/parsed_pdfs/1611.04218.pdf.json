{
  "name" : "1611.04218.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Preference Completion from Partial Rankings",
    "authors" : [ "Suriya Gunasekar", "Oluwasanmi Koyejo", "Joydeep Ghosh" ],
    "emails" : [ "suriya@utexas.edu", "sanmi@illinois.edu", "ghosh@ece.utexas.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Collaborative preference completion is the task of jointly learning bipartite (or dyadic) preferences of set of entities for a shared list of items, e.g., user–item interactions in a recommender system [13; 21]. It is commonly assumed that such entity–item preferences are generated from a small number of latent or hidden factors, or equivalently, the underlying preference value matrix is assumed to be low rank. Further, if the observed affinity scores from various explicit and implicit feedback are treated as exact (or mildly perturbed) entries of the unobserved preference value matrix, then the preference completion task naturally fits in the framework of low rank matrix completion [21; 38]. More generally, low rank matrix completion involves predicting the missing entries of a low rank matrix from a vanishing fraction of its entries observed through a noisy channel. Several low rank matrix completion estimators and algorithms have been developed in the literature, many with strong theoretical guarantees and empirical performance [6; 31; 20; 27; 38; 9].\nRecent research in the preference completion literature have noted that using a matrix completion estimator for collaborative preference estimation may be misguided [10; 33; 22] as the observed entity–item affinity scores from implicit/explicit feedback are potentially subject to systematic monotonic transformations arising from limitations in feedback collection, e.g., quantization and\n30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nar X\niv :1\n61 1.\n04 21\n8v 1\n[ st\nat .M\nL ]\n1 4\nN ov\ninherent biases. While simple user biases and linear transofmations can be handled within a low rank matrix framework, more complex transformations like quantization can potentially increase the rank of the observed preference score matrix significantly, thus adversely affecting recovery using standard low rank matrix completion [12]. Further, despite the common practice of measuring preferences using numerical scores, predictions are most often deployed or evaluated based on the item ranking e.g. in recommender systems, user recommendations are often presented as a ranked list of items without the underlying scores. Indeed several authors have shown that favorable empirical/theoretical performance in mean square error for the preference matrix often does not translate to better performance when performance is measured using ranking metrics [10; 33; 22]. Thus, collaborative preference estimation may be better posed as a collection of coupled learning to rank (LETOR) problems [24], where we seek to jointly learn the preference rankings of a set of entities, by exploiting the low dimensional latent structure of the underlying preference values.\nThis paper considers preference completion in a general collaborative LETOR setting. Importantly, while the observations are assumed to be reliable indicators for relative preference ranking, their numerical scores may be quite deviant from the ground truth low rank preference matrix. Therefore, we aim at addressing preference completion under the following generalizations: 1. In a simple setting, for each entity, a score vector representing the its observed affinity interactions\nis assumed to be generated from an arbitrary monotonic transformation of the corresponding entries of the ground truth preference matrix. We make no further generative assumptions on observed scores beyond monotonicity with respect to the underlying low rank preference matrix. 2. We also consider a more general setting, where observed preferences of each entity represent specifications of a partial ranking in the form of a directed acyclic graph (DAG) – the nodes represent a subset of items, and each edge represents a strict ordering between a pair of nodes. Such rankings may be encountered when the preference scores are consolidated from multiple sources of feedback, e.g., comparative feedback (pairwise or listwise) solicited for independent subsets of items. This generalized setting cannot be handled by standard matrix completion without some way of transforming the DAG orderings into a score vector.\nOur work is in part motivated by an application to neuroimaging meta-analysis as outlined in the following. Cognitive neuroscience aims to quantify the link between brain function with behavior. This interaction is most often measured in humans using Functional Magnetic Resonance Imaging (fMRI) experiments that measure brain activity in response to behavioral tasks. After analysis, the conclusions are often summarized in neuroscience publications which include a table of brain locations that are most actively activated in response to an experimental stimulus. These results can then be synthesized using meta-analysis techniques to derive accurate predictions of brain activity associated with cognitive terms (also known as forward inference) and prediction of cognitive terms associated with brain regions (also known as reverse inference). For our study, we used data from neurosynth [36] - a public repository1 which automatically scrapes information on published associations between brain regions and terms in cognitive neuroscience experiments.\nThe key contributions of the paper are summarized below. • We propose a convex estimator for low rank preference completion using limited supervision,\naddressing: (a) arbitrary monotonic transformations of preference scores; and (b) partial rankings over items (Section 3.1). We derive generalization error bounds for a surrogate ranking loss that quantifies the trade–off between data–fit and regularization (Section 5). • We propose efficient algorithms for the estimate under total and partially ordered observations. In the case of total orders, in spite of increased generality, the computational complexity of our algorithm is within a log factor of the standard convex algorithms for matrix completion (Section 4). • The proposed algorithm is evaluated for a novel application of identifying associations between brain–regions and cognitive terms from the neurosynth dataset [37] (Section 6). Such a large scale meta-analysis synthesizing information from the literature and related tasks has the potential to lead to novel insights into the role of brain regions in cognition and behavior."
    }, {
      "heading" : "1.1 Notation",
      "text" : "For a matrix M ∈ Rd1×d2 , let σ1 ≥ σ2 ≥ . . . be singular values of M . Then, nuclear norm ‖M‖∗ = ∑ i σi, operator norm ‖M‖op = σ1, and Frobenius norm ‖M‖F = √∑ i σ 2 i . Let\n1http://neurosynth.org/\n[N ] = {1, 2, . . . , N}. A vector or a set x indexed by j ∈ [N ] is sometimes denoted as (xj)Nj=1 or simply (xj) whenever N is unambiguous. Let Ω ⊂ [d1]× [d2] denote a subset of indices of a matrix in Rd1×d2 . For j ∈ [d2], let Ωj = {(i′, j′) ∈ Ω : j′ = j} ⊂ Ω denotes the subset of entries in Ω from the jth column. Given Ω = {(is, js) : s = 1, 2, . . . , |Ω|}, PΩ : X → (Xisjs) |Ω| s=1 ∈ R|Ω| is the linear subsampling operator, and P∗Ω : R|Ω| → Rd1×d2 is its adjoint, i.e 〈y,PΩ(X)〉 = 〈X,P∗Ω(y)〉. For conciseness, we sometimes use the notation XΩ to denote PΩ(X)."
    }, {
      "heading" : "2 Related Work",
      "text" : "Matrix Completion: Low rank matrix completion has an extensive literature; a few examples include [21; 6; 20; 27] among several others. However, the bulk of these works including those in the context of ranking/recommendation applications focus on (a) fitting the observed numerical scores using squared loss, and (b) evaluating the results on parameter/rating recovery metrics such as root mean squared error (RMSE). The shortcomings of such estimators and results using squared loss in ranking applications have been studied in some recent research [11; 10]. Motivated by collaborative ranking applications, there has been growing interest in addressing matrix completion within an explicit LETOR framework. Weimer et al. [35] and Koyejo et al. [22] propose estimators that involve non–convex optimization problems and their algorithmic convergence and generalization behavior are not well understood. Some recent works provide parameter recovery guarantees for pairwise/listwise ranking observations under specific probabilistic distributional assumptions on the observed rankings [30; 25; 28]. In comparison, the estimators and algorithms in this paper are agnostic to the generative distribution, and hence have much wider applicability.\nLearning to rank (LETOR): LETOR is a structured prediction task of rank ordering relevance of a list of items as a function of pre–selected features [24]. Currently, leading algorithms for LETOR are listwise methods [8] (as is the approach taken in this paper), which fully exploit the ranking structure of ordered observations, and offer better modeling flexibility compared to the pointwise [23] and pairwise methods [15; 17]. A recent listwise LETOR algorithm proposed the idea of monotone retargeting (MR) [2], which elegantly addresses listwise learning to rank (LETOR) task while maintaining the relative simplicity and scalability of pointwise estimation. MR was further extended to incorporate margins in the margin equipped monotonic retargeting (MEMR) formulation [1] to preclude trivial solutions that arise from scale invariance of the initial MR estimate in Acharyya et al. [2]. The estimator proposed in the paper is inspired from the the idea of MR and will be revisited later in the paper. In collaborative preference completion, rather than learning a functional mapping from features to ranking, we seek to exploit the low rank structure in jointly modeling the preferences of a collection of entities without access to preference indicative features.\nSingle Index Models (SIMs) Finally, literature on monotonic single index models (SIMs) also considers estimation under unknown monotonic transformations [16; 19]. However, algorithms for SIMs are designed to solve a harder problem of exactly estimating the non–parametric monotonic transformation and are evaluated for parameter recovery rather than the ranking performance. In general, with no further assumptions, sample complexity of SIM estimators lends them unsuitable for high dimensional estimation. The existing high dimensional estimators for learning SIMs typically assume Lipschitz continuity of the monotonic transformation which explicitly uses the observed score values in bounding the Lipsciptz constant of the monotonic transformation [18; 12]. In comparison, our proposed model is completely agnostic to the numerical values of the preference scores."
    }, {
      "heading" : "3 Preference Completion from Partial Rankings",
      "text" : "Let the unobserved true preference scores of d2 entities for d1 items be denoted by a rank r min {d1, d2} matrix Θ∗ ∈ Rd1×d2 . For each entity j ∈ [d2], we observe a partial or total ordering of preferences for a subset of items denoted by Ij ⊂ [d1]. Let nj = |Ij | denotes the number of items over which relative preferences of entity j are observed, so that Ωj = {(i, j) : i ∈ Ij} denotes the entity-item index set for j, and Ω = ⋃ j Ωj denotes the index set collected across entities. Let PΩ denote the sampling distribution for Ω. The observed preferences of entity j are typically represented by a listwise preference score vector y(j) ∈ Rnj .\n∀j ∈ [d2], y(j) = gj(PΩj (Θ∗ +W )), (1)\nwhere each (gj) are an arbitrary and unknown monotonic transformations, and W ∈ Rd1×d2 is some non–adversarial noise matrix sampled from the distribution PW . The preference completion task is to estimate a unseen rankings within each column of Θ∗ from a subset of orderings (Ωj , y(j))j∈[d2].\nAs (gj) are arbitrary, the exact values of (y(j)) are inconsequential, and the observed preference order can be specified by a constraint set parameterized by a margin parameter as follows:\nDefinition 1 ( –margin Isotonic Set) The following set of vectors are isotonic to y ∈ Rn with an > 0 margin parameter:\nRn↓ (y) = {x ∈ Rn : ∀ i, k ∈ [n], yi < yk ⇒ xi ≤ xk − }.\nIn addition to score vectors, isotonic sets of the form Rn↓ (y) are equivalently defined for any DAG y = G([n], E) which denotes a partial ranking among the vertices, with the convention that (i, k) ∈ E ⇒ ∀x ∈ Rn↓ (y), xi ≤ xk − . We note from Definition 1 that ties are not broken at random, e.g., if yi1 = yi2 < yk, then ∀x ∈ Rn↓ (y), xi1 ≤ xk − , xi2 ≤ xk − , but no particular ordering between xi1 and xi2 is specified.\nLet y(k) denote the kth smallest entry of y ∈ Rn. We distinguish between three special cases of an observation y representing a partial ranking over [n]. (A) Strict Total Order: y(1) < y(2) < . . . < y(n). (B) Blockwise Total Order: y(1) ≤ y(2) ≤ . . . ≤ y(n), with K ≤ n unique values. (C) Arbitrary DAG: Partial order induced by a DAG y = G([n], E)."
    }, {
      "heading" : "3.1 Monotone Retargeted Low Rank Estimator",
      "text" : "Consider any scalable pointwise learning algorithm that fits a model to exact preferences scores. Since no generative model (besides monotonicity) is assumed for the raw numerical scores in the observations, in principle, the scores y(j) for entity j can be replaced or retargeted to any rankingpreserving scores, i.e., by any vector in Rnj↓ (y(j)). Monotone Retargeting (MR) [2] exploits this observation to address the combinatorial listwise ranking problem [24] while maintaining the relative simplicity and scalability of pointwise estimates (regression). The key idea in MR is to alternately fit a pointwise algorithm to current relevance scores, and retarget the scores by searching over the space of all monotonic transformations of the scores. Our approach extends and generalizes monotone retargeting for the preference prediction task.\nWe begin by motivating an algorithm for the noise free setting, where it is clear that Θ∗Ωj ∈ R nj ↓ (y (j)), so we seek to estimate a candidate preference matrix X that is in the intersection of (a) the data constraints from the observed preference rankings {XΩj ∈ R nj ↓ (y\n(j))}, and (b) the model constraints – in this case low rankness induced by constraining the nuclear norm ‖X‖∗. For robust estimation in the presence of noise, we may extend the noise free approach by incorporating a soft penalty on constraint violations. Let z ∈ R|Ω|, and with slight abuse of notation, let zΩj ∈ Rnj denote vector of the entries of z ∈ R|Ω| corresponding to Ωj ⊂ Ω. Upon incorporating the soft penalties, the monotone retargeted low rank estimator is given by:\nX̂ = Argmin X min z∈R|Ω|\nλ‖X‖∗ + 1\n2 ‖z − PΩ(X)‖22 s.t.∀j, zΩj ∈ R nj ↓ (y (j)), (2)\nwhere the parameter λ controls the trade–off between nuclear norm regularization and data fit, and X̂ is the set of minimizers of (2). We note that Rn↓ (y) is convex, and ∀λ ≥ 1, the scaling λRn↓ (y) = {λx ∀ x ∈ Rn↓ (y)} ⊆ Rn↓ (y). The above estimate can be computed using efficient convex optimization algorithms and can handle arbitrary monotonic transformation of the preference scores, thus providing higher flexibility compared to the standard matrix completion.\nAlthough (2) is specified in terms of two parameters, due to the geometry of the problem, it turns out that λ and are not jointly identifiable, as discussed in the following proposition.\nProposition 1 The optimization in (2) is jointly convex in (X, z). Further, ∀γ > 0, (λ, γ ) and (γ−1λ, ) lead to equivalent estimators, specifically X̂ (λ, γ ) = γ−1X̂ (γ−1λ, ).\nSince, positive scaling of X̂ preserves the resultant preference order, using Proposition 1 without loss of generality, only one of or λ requires tuning with the other remaining fixed."
    }, {
      "heading" : "4 Optimization Algorithm",
      "text" : "The optimization problem in (2) is jointly convex in (X, z). Further, we later show that the proximal operator of the non–differential component of the estimate λ‖X‖∗ + ∑ j I(zΩj ∈ R nj ↓ (y\n(j))) is efficiently computable. This motivates using the proximal gradient descent algorithm [29] to jointly update (X, z). For an appropriate step size α = 1/2 and the resulting updates are as follows:\n• X Update: Singular Value Thresholding The proximal operator for τ‖.‖∗ is the singular value thresholding operator Sτ . For X with singular value decomposition X = UΣV and τ ≥ 0, Sτ (X) = Usτ (Σ)V, where sτ is the soft thresholding operator given by sτ (x)i = max{xi− τ, 0}. • z Update: Parallel Projections For hard constraints on z, the proximal operator at v is the Euclidean projection on the constraints given by z ← argminz‖z−v‖22, s.t. zΩj ∈ R nj ↓ (y\n(j)) ∀j ∈ [d2]. These updates decouple along each entity (column) zΩj and can be trivially parallelized. Efficient projections ontoRnj↓ (y(j)) are discussed Section 4.1.\nAlgorithm 1 Proximal Gradient Descent for (2) with input Ω, {y(j)j }, and paramter λ for k = 0, 1, 2, . . . , Until (stopping criterion) X(k+1) =Sλ/2 ( X(k) + 1 2 (P∗Ω(z(k) −X (k) Ω ) ) , (3)\n∀j, z(k+1)Ωj = ProjRnj↓ (yj) ( z(k)Ωj +X(k)Ωj 2 ) . (4)\n4.1 Projection onto Rn↓ (y)\nWe begin with the following definitions that are used in characterizingRn↓ (y).\nDefinition 2 (Adjacent difference operator) The adjacent difference operator in Rn, denoted by Dn : Rn → Rn−1 is defined as (Dnx)i = xi − xi+1, for i ∈ [n− 1].\nDefinition 3 (Incidence Matrix) For a directed graph G(V,E), the incidence matrixAG ∈ R|V |×|E| is such that: if the jth directed edge ej ∈ E is from ith node to kth node, then (AG)ij = 1, (AG)kj = −1, and (AG)lj = 0, ∀l 6= i or k.\nProjection ontoRn↓ (y) is closely related to the isotonic regression problem of finding a univariate least squares fit under consistent order constraints (without margins). This isotonic regression problem in Rn can be solved exactly in O(n) complexity using the classical Pool of Adjacent Violators (PAV) algorithm [14; 4] as:\nPAV(v) = argmin z′∈Rn\n||z′ − v||2 s.t. z′i − z′i+1 ≤ 0. (5)\nAs we discuss, simple adaptations of isotonic regression can be used for projection onto -margin isotonic sets for the three special cases of interest as summarized in Table 1.\n(A) Strict Total Order: y(1) < y(2) < . . . y(n) In this setting, the constraint set can be characterized asRn↓ (y) = {x : Dnx ≤ − 1}, where 1 is a vector of ones. For this case projection ontoRn↓ (y) differs from (5) only in requiring an –separation and a straight forward extension of the PAV algorithm [4] can be used. Let dsl ∈ Rn be any vector such that 1 = −Dndsl, then by simple substitutions, ProjRn↓ (y)(x) = PAV(x− d sl) + dsl.\n(B) Blockwise Total Order: y(1) ≤ y(2) ≤ . . . ≤ y(n) This is a common setting for supervision in many preference completion applications, where the listwise ranking preferences obtained from ratings over discrete quantized levels 1, 2, . . . ,K, with K n are prevalent. Let y be partitioned into K ≤ n blocks P = {P1, P2, . . . PK}, such that the entries of y within each partition are equal, and the blocks themselves are strictly ordered,\ni.e., ∀k ∈ [K], sup y(Pk−1)< inf y(Pk) = sup y(Pk) < inf y(Pk+1),\nwhere P0 = PK+1 = φ, and y(P ) = {yi : i ∈ P}. Let dbl ∈ Rn be such that dbli = ∑K k=1 k Ii∈Pk is a vector of block indices dbl =\n[1, 1, .. ∣∣2, 2, ..∣∣K,K, ..,K]>. Let ΠP be a set of valid permutations that permute entries only within blocks {Pk ∈ P}, thenRn↓ (y) = {x :∃π∈ΠP ,Dnπ(x) ≤ − Dndbl}. We propose the following steps to compute ẑ = ProjRn↓ (y)(x) in this case:\nStep 1. π∗(x) s.t. ∀k ∈ [K], π∗(x)Pk = sort(xPk) Step 2. ẑ = PAV (π∗(x)− dbl) + dbl.\n(6)\nThe correctness of (6) is summarized by the following Lemma.\nLemma 2 Estimate ẑ from (6) is the unique minimizer for\nargmin z ‖z − x‖22 s.t. ∃π ∈ ΠP : Dnπ(z) ≤ − Dndbl.\n(C) Arbitrary DAG: y = G([n], E) An arbitrary DAG (not necessarily connected) can be used to represent any consistent order constraints over its vertices, e.g., partial rankings consolidated from multiple listwise/pairwise scores. In this case, the –margin isotonic set is given by Rn↓ (y) = {x : A>G x ≤ − 1} (c.f. Definition 3). Consider dDAG ∈ Rn such that ith entry dDAGi is the length of the longest directed chain connecting the topological descendants of the node i. It can be easily verified that, the isotonic regression algorithm for arbitrary DAGs applied on x− dDAG gives the projection ontoRn↓ (y). In this most general setting, the best isotonic regression algorithm for exact solution requiresO(nm2 +n3 log n2) computation [34], where m is the number of edges in G. While even in the best case of m = o(n), the computation can be prohibitive, we include this case for completeness. We also note that this case of partial DAG ordering cannot be handled in the standard matrix completion setting without consolidating the partial ranks to total order."
    }, {
      "heading" : "4.2 Computational Complexity",
      "text" : "It can be easily verified that gradient of 12‖PΩ(X) − z‖ 2 2 is 2–Lipschitz continuous. Thus, from standard results on convegence proximal gradient descent [29], Algorithm 1,converges to within an error in objective in O(1/ ) iterations. Compared to proximal algorithms for standard matrix completion [5; 26], the additional complexity in Algorithm 1 arises in the z update (4), which is a simple substitution z(k) = X(k)Ω in standard matrix completion. For total orders, the z update of (4) is highly efficient and is asymptotically within an additional log |Ω| factor of the computational costs for standard matrix completion."
    }, {
      "heading" : "5 Generalization Error",
      "text" : "Recall that yj are (noisy) partial rankings of subset of items for each user, obtained from gj(Θ∗j +Wj) where W is a noise matrix and gj are unknown and arbitrary transformations that only preserve that ranking order within each column. The estimator and the algorithms described so far are independent of the sampling distribution generating (Ω, {yj}). In this section we quantify simple generalization error bounds for (2).\nAssumption 1 (Sampling (PΩ)) For a fixed W and Θ∗, we assume the following sampling distribution. Let be c0 a fixed constant and R be pre–specified parameter denoting the length of single\nlistwise observation. For s = 1, 2, . . . , |S| = c0d2 log d2,\nj(s) ∼ uniform[d2], I(s) ∼ randsample([d1], R), Ω(s) = {(i, j(s)) : i ∈ I(s)}, y(s) = gj(s)(PΩ(s)(Θ∗ +W )).\n(7)\nFurther, we define the notation: ∀j, Ij = ⋃ s:j(s)=j I(s), Ωj = ⋃ s:j(s)=j Ω(s), and nj = |Ωj |.\nFor each column j, the listwise scores {y(s) : j(s) = j} jointly define a consistent partial ranking of Ij as the scores are subsets of a monotonically transformed preference vector gj(Θ∗j +Wj). This consistent ordering is represented by a DAG y(j) = PartialOrder({y(s) : j(s) = j}). We also note that O(d2 log d2) samples ensures that each column is included in the sampling with high probability.\nDefinition 4 (Projection Loss) Let y = G([n], E) or y ∈ Rn define a partial ordering or total order in Rn, respectively. We define the following convex surrogate loss over partial rankings.\nΦ(x, y) = minz∈Rn↓ (y) ‖x− z‖2\nTheorem 3 (Generalization Bound) Let X̂ be an estimate from (2). With appropriate scaling let ‖X̂‖F = 1 , then for constants K1 K2, the following holds with probability greater than 1− δ over all observed rankings {y(j),Ωj : j ∈ [d2]} drawn from (7) with |S| ≥ c0d2 log d2:\nEy(s),Ω(s)Φ(X̂Ω(s), y(s)) ≤ 1\n|S| |S|∑ s=1 Φ(X̂Ω(s), y(s)) +K1 ‖X̂‖∗ log1/4 d√ d1d2\n√ d log d\nR|S| +K2\n√ log 2/δ\n|S| .\nTheorem 3 quantifies the test projection loss over a random R length items I(s) drawn for a random entity/user j(s). The bound provides a trade–off between observable training error and complexity defined by nuclear norm of the estimate."
    }, {
      "heading" : "6 Experiments",
      "text" : "We evaluate our model on two collaborative preference estimation tasks: (a) a standard user-item recommendataion task on a benchmarked dataset from Movielens, and (b) identifying associations between brain–regions and cognitive terms using the neurosynth dataset [37].\nBaselines: The following baseline models are compared in our experiments:\n• Retargeted Matrix Completion (RMC): the estimator proposed in (2). • Standard Matrix Completion (SMC) [7]: We primarily compare our estimator with the\nstandard convex estimator for matrix completion using nuclear norm minimization. • Collaborative Filtering Ranking CoFi-Rank [35]: This work addresses collaborative filtering\ntask in a listwise ranking setting.\nFor SMC and MRPC, the hyperparameters were tuned using grid search on a logarithmic scale. Due to high computational cost with tuning parameters in CofiRank, we use the code and default parameters provided by the authors.\nEvaluation metrics: The performance on preference estimation tasks are evaluated on four ranking metrics: (a) Normalized Discounted Cummulative Gains (NDCG@N), (b) Precision@N, (c) Spearmann Rho, and (d) Kendall Tau, where the later two metrics measure the correlation of the complete ordering of the list, while the former two metrics primarily evaluate the correctness of ranking in the top of the list (see Liu et. al. [24] for further details on these metrics).\nMovielens dataset (blockwise total order) Movielens is a movie recommendation website administered by GroupLens Research. We used competitive benchmarked movielens 100K dataset. We used the 5–fold train/test splits provided with the dataset (the test splits are non-overlapping). We discarded a small number of users that had less than 10 ratings in any of 5 training data splits. The resultant dataset consists of 923 users and 1682 items. The ratings are blockwise ordered – taking one of 5 values in the set {1, 2, . . . , 5}. During testing, for each user, the competing models return\na ranking of the test-items, and the performance is averaged across test-users. Table 2 presents the results of our evaluation averaged across 5 train/test splits on the Movielens dataset, along with the standard deviation. We see that the proposed retargeted matrix completion (RMC) significantly and consistently outperforms SMC and CoFi-Rank [35] across ranking metrics.\nNeurosynth Dataset (almost total order) Neurosynth[37] is a publicly available database consisting of data automatically extracted from a large collection of functional magnetic resonance imaging (fMRI) publications (11,362 publications in current version). For each publication , the database contains the abstract text and all reported 3-dimensional peak activation coordinates in the study. The text is pre-processed to remove common stop-words, and any text with less than .1% frequency, leaving a total of 3169 terms. We applied the standard brain map to the activations, removing voxels outside of the grey matter. Next the activations were downsampled from 2mm3 voxels to 10mm3 voxels using the nilearn python package, resulting in a total of 1231 dense voxels. The affinity measure between 3169 terms and 1231 consolidated voxels is obtained by multiplying the term× publication and the publication× voxels matrices. The resulting data is dense high-rank preference matrix. With very few tied preference values, this setting best fits the case of total ordered observations (case A in Section 4.1). Using this data, we consider the reverse inference task of ranking cognitive concepts (terms) for each brain region (voxel) [37].\nTrain-val-test: We used 10% of randomly sampled entries of the matrix as test data and a another 10% for validation. We created training datasets at various sample sizes by subsampling from the remaining 80% of the data. This random split is replicated multiple times to obtain 3 bootstrapped datasplits (note that unlike cross validation, the test datasets here can have some overlapping entries).\nThe results in Fig. 1 show that the proposed estimate from (2) outperforms standard matrix completion in terms of popular ranking metrics."
    }, {
      "heading" : "7 Conclusion",
      "text" : "Our work addresses the problem of collaboratively ranking; a task of growing importance to modern problems in recommender systems, large scale meta-analysis, and related areas. We proposed a novel convex estimator for collaborative LETOR from sparsely observed preferences, where the observations could be either score vectors representing total order, or more generally directed acyclic graphs representing partial orders. Remarkably, in the case of complete order, the complexity of our\nalgorithm is within a log factor of the state–of–the–art algorithms for standard matrix completion. Our estimator was empirically evaluated on real data experiments.\nAcknowledgments SG and JG acknowledge funding from NSF grants IIS-1421729 and SCH 1418511."
    }, {
      "heading" : "A Estimator and Algorithm",
      "text" : "A.1 Proof of Proposition 1\nStatement of the Proposition: The optimization in (2) is jointly convex in (X, z). Further, ∀γ > 0, (λ, γ ) and (γ−1λ, ) lead to equivalent estimators, specifically X̂ (λ, γ ) = γ−1X̂ (γ−1λ, ). Proof: Let fλ, (X) = min\nz∈R|Ω| λ‖X‖∗ + 12‖z − PΩ(X)‖ 2 2\ns.t. ∀j, zΩj ∈ R nj ↓ (y (j)),\n.\nWe have,\nfλ,γ (X) = min z λ‖X‖∗ +\n1 2 ‖z − PΩ(X)‖22 s.t. zΩj ∈ R nj ↓γ (y (j)),\n(a) = min\nz̄ λ‖X‖∗ +\n1 2 ‖γz̄ − PΩ(X)‖22 s.t. z̄Ωj ∈ R nj ↓ (y (j)),\n= γ2min z̄\nλ γ ‖X/γ‖∗ + 1 2 ‖z̄ − PΩ(X/γ)‖22 s.t. z̄Ωj ∈ R nj ↓ (y (j)),\n= γ2fγ−1λ, (X/γ),\n(8)\nwhere (a) follows from reparameterizing the optimization using z̄ = z/γ as the geometry of Rnj↓γ (y(j)) which is set of linear constraints of the form zi − zk ≤ γ . From above set of equations, if X ∈ Argmin\nX fλ,γ (X), then γ−1X ∈ Argmin X fγ−1λ, (X).\nA.2 Proof of Lemma 2\nStatement of the Lemma: Consider the following steps,\nStep 1. π∗(x) s.t. ∀k ∈ [K], π∗(x)Pk = sort(xPk) Step 2. ẑ = PAV (π∗(x)− dbl) + dbl.\n(9)\nEstimate ẑ is the unique minimizer for\nargmin z ‖z − x‖22 s.t. ∃π ∈ ΠP : Dnπ(z) ≤ Dndbl.\nProof: A version of the lemma for linear orders was proved in [2]. In general,\nmin z ‖z − x‖22 s.t. ∃π ∈ ΠP : Dnπ(z) ≤ Dndbl\n= min z,π∈ΠP\n‖z − x‖22 s.t. Dnπ(z) ≤ Dndbl\n(a) = min\nw min π∈ΠP\n‖π−1(w + dbl)− x‖22 s.t. Dnw\n≤ 0 (b)= min w:Dnw≤0 min π∈ΠP ‖w + dbl − π(x)‖22 (c) = min\nw:Dnw≤0 ‖w + dbl − π∗(x)‖22, (10)\nwhere π∗(x) is the update from Step 1 stated above, (a) follows reparametrizing w := π(z)− dbl, (b) follows as for all permutations π using ‖x‖22 = ‖π(x)‖22, and (c) follows form Proposition 4 as Dnw ≤ 0 from constraints and Dndbl ≤ 0 by construction. The final minimization is solved using Step 2.\nProposition 4 For any sorted z ∈ Rn such Dnz ≤ 0, π∗ = argmin π∈ΠP ‖z − π(x)‖22, where π∗ is the permutation from Step 1.\nΠP allows for all possible permutations within each partition Pk. Proposition follows from optimality of sorting within each block."
    }, {
      "heading" : "B Generalization Error",
      "text" : "B.1 Background\nDefinition 5 (Rademacher Complexity) LetX1, X2, . . . , Xn ∈ X be drawn iid from a distribution PX . For a function class F : X → A, the empirical Rademacher complexity is defined as,\nR̂n(F) = Eσ sup f∈F ( 1 n n∑ i=1 σif(Xi) ) ,\nwhere σ1, σ2, . . . , σn are iid Rademacher variables, i.e., ±1 with probability 1/2.\nThe Rademacher complexity with respect tp PX is then defined as Rn(F) = EPX R̂n(F).\nTheorem 5 (Generalization Error Bound (Corollary 15 in [3])) Consider a loss function ` : Y × Rm → [0, 1] and a bounded function class F : X → Rm such that F is a direct sum of F1,F2, . . . ,Fm. Further, if ` is L–Lipschitz continuous with respect to Euclidean distance on Rm and is uniformly bounded. Let {(Xi, Yi), i = 1, 2, . . . , n} be sampled form a distribution PX,Y . Then there exists a constant c such that, for any integer n and any δ ∈ (0, 1), with probability atleast 1− δ, over all sample of length n, the following holds for every f ∈ F:\nEX,Y `(Y, f(X)) ≤ 1\nn n∑ i=1 `(Yi, f(Xi)) + cL m∑ i=1 R̂n(Fm) + √ 8 log(2/δ) n\nB.2 Proof of Theorem 3\nLemma 6 φ(., y) is convex and 2–Lipschitz continuous with respect to `2 norm.\nProof: Convexity follows form Φ being a marginal of a convex function. For a any convex set C and its projection operator PC , we have the following for all x, x′:\n|‖x− PC(x)‖2 − ‖x′ − PC(x′)‖2| ≤ ‖x− PC(x)− x′ + PC(x′)‖2 ≤ ‖x− x′‖2 + ‖PC(x)− PC(x′)‖2 ≤ 2‖x− x′‖2\nConsider a vector class of functions in RR, FR = {Ω(s) → XΩ(s) ∈ RR : ‖X‖∗ ≤ M}, where Ω(s) are sampled as in the main paper. Also, consider another function classes Fij = {(i, j)→ Xij : ‖X‖∗ ≤M}. It can be seen that FR is an R way direct sum of Fij . In order to use Theorem 5, we need to estimate the Rademacher complexity of Fij .\nLemma 7 Let Ω = ∪jΩj obtained from combining samples form Assumption 1. The distribution of Ω is equivalent to uniformly sampling with replacement |Ω| = c0d2R log d2 entries from [d1]× [d2]. Proof : For k = 1, 2 . . . |Ω|, ∀(i, j) ∈ [d1]× [d2], P((i, j) = Ωk) = 1d1d2 .\nThus, given (i, j) ∈ [d1]× [d2], P((i, j) ∈ Ω) = |Ω|d1d2 .\nLemma 8 (Theorem 29 in [32]) For a universal constant K, the Rademacher complexity of matrices in Rd1×d2 of trace norm M , over uniform sampling of index pairs Ω is bounded by the following whenever |Ω| > d log d\nR({‖X‖∗ ≤M}) ≤ K M log1/4 d√\nd1d2\n√ d log d\n|Ω| (11)\nFrom Lemma 7, it can be seen that Lemma 8 applies to samples drawn according to Assumption 1.\nFor the function class FR = {Ω(s)→ XΩ(s) : ‖X‖∗ ≤M}, for some M . The theorem now follows by using the Rademacher complexity bound in Lemma 8 and Lipschitz continuity of Φ(., y) from 6 in Theorem 5."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2016,
    "abstractText" : "We propose a novel and efficient algorithm for the collaborative preference comple-<lb>tion problem, which involves jointly estimating individualized rankings for a set of<lb>entities over a shared set of items, based on a limited number of observed affinity<lb>values. Our approach exploits the observation that while preferences are often<lb>recorded as numerical scores, the predictive quantity of interest is the underlying<lb>rankings. Thus, attempts to closely match the recorded scores may lead to over-<lb>fitting and impair generalization performance. Instead, we propose an estimator<lb>that directly fits the underlying preference order, combined with nuclear norm<lb>constraints to encourage low–rank parameters. Besides (approximate) correctness<lb>of the ranking order, the proposed estimator makes no generative assumption on<lb>the numerical scores of the observations. One consequence is that the proposed<lb>estimator can fit any consistent partial ranking over a subset of the items repre-<lb>sented as a directed acyclic graph (DAG), generalizing standard techniques that<lb>can only fit preference scores. Despite this generality, for supervision representing<lb>total or blockwise total orders, the computational complexity of our algorithm is<lb>within a log factor of the standard algorithms for nuclear norm regularization based<lb>estimates for matrix completion. We further show promising empirical results for a<lb>novel and challenging application of collaboratively ranking of the associations<lb>between brain–regions and cognitive neuroscience terms.",
    "creator" : "LaTeX with hyperref package"
  }
}