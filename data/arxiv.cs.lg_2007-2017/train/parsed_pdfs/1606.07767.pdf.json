{
  "name" : "1606.07767.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Sampling-based Gradient Regularization for Capturing Long-Term Dependencies in Recurrent Neural Networks",
    "authors" : [ "Artem Chernodub", "Dimitri Nowicki" ],
    "emails" : [ "a.chernodub@gmail.com", "nowicki@nnteam.ogr.ua" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Index Terms—simple recurrent networks, gradient vanishing, regularization\nI. INTRODUCTION\nRecurrent Neural Networks (RNNs) are known as universal approximators of dynamic systems [1], [2]. Since RNNs are able to simulate any open dynamical system, they have a broad spectrum of applications such as time series forecasting [3], control of plants [4], language modeling [5], speech recognition [6], neural machine translation [7] and other domains. The easiest way to create an RNN is adding the feedback connections to the hidden layer of multilayer perceptron. This architecture is known as Simple Recurrent Network (SRN). Despite of the simplicity, it has rich dynamical approximation capabilities mentioned above. However, in practice training of SRNs using first-order optimization methods is difficult [8]. The main problem is well-known vanishing/exploding gradients effect that prevents capturing of long-term dependencies in data. Vanishing gradients effect is a common problem for recurrent neural networks with sigmoid-like activation functions which uses a backpropagation method for calculation of derivatives. Deep feedforward neural networks with many hidden layers also feels this effect. Hochreiter and Schmidhuber designed a set of special synthetic benchmarks for testing RNNs on ability to capture long-term dependencies [9]. They\nshowed that ordinary SRNs are very ineffective to learn correlations in sequential data if distance between the target events is more than 10 time steps. The solution could be using more advanced second-order optimization algorithms such as Extended Kalman Filter [10], LBFGS, Hessian-Free optimization [11], but they require much more memory and computational resources for state-of-the-art networks. Another and the most popular solution is designing a neural networks architecture with more suitable dynamics. Echo State Networks (ESNs) proposed by Jaeger [12] may be considered as big reservoirs of sparsely connected neurons and randomly initialized weights which produces chaotic dynamics. For ESNs the gradients are computed for the last non-recurrent weights layer only. Experiments show that this may be enough for capturing longterm dynamics [13]. At the same time, ESNs often seems to have abundant number of free parameters. We also mention such an alternative to temporal neural networks as hierarchical sequence processing with auto-associative memories [14] that use distributed coding.\nAnother approach that was specially designed for catching the long-term dependencies is Long-Short Term Memory (LSTM) [9]. These neural networks are designed to adaptively reset or update their memory. They have specially designed complex structure that includes input and forgetting gates and they have constant error flow carousel. Currently it is probably the most popular family of RNNs models that shows stateof-the-art performance in several domains including speech recognition [6], image captioning [15] and neural machine translation. An idea of using input/forgetting gates inspired a lot of followers, Gated Recurrent Units (GRU) networks is probably one of the most successful of them [7]. Finally, the united team from Google and Facebook performed a grand experiment on finding the best architecture for RNNs [16]. They numerically evaluated 10,000 random architectures with 230,000 hyperparameter configurations in total and obtained a couple of new advanced models and some recommendations for easy improving of standard LSTMs. At the same time, a question how to train SRNs for catching the longterm dependencies is still a topic of current interest. It is highly desirable at least for better understanding of underlying processes of the training inside the recurrent and deep neural\nIEEE 1 | P a g e\nar X\niv :1\n60 6.\n07 76\n7v 1\n[ cs\n.N E\n] 2\n4 Ju\nn 20\nnetworks. Also, SRNs are more compact and fast working models of RNNs in comparison with ESNs and LSTMs that is very important for implementation to mobile and embedded devices. Recent research shows the ability to train SRNs for long term dependencies up to 100 time steps and more using several new techniques [17], [18]–[20]. It includes very accurate initialization of start weights, scaling down the big gradients, using advanced Nesterov momentum. One of the most common methods for preventing the vanishing gradients effect from this pool is known as ”‘gradient regularization”’ [20], [21]; also it was independently proposed in [22] as ”‘method of pseudoregularization”’. The idea of gradient regularization is adding to the target cost function an additional term that controls the norm of the backpropagated gradients. In this way, neural network learns not only to fit the train data but also to keep the flow of gradients into the certain range. In this paper we propose a new method to perform the gradient regularization by selection of proper samples in dataset using the simple criteria."
    }, {
      "heading" : "II. BACKPROPAGATION MECHANISM REVISITED",
      "text" : "Consider a Simple Recurrent Neural Network (Fig. 1) that at each time step k receives an external input u(k), previous internal state z(k − 1) and produces output y(k + 1):\na(k) = u(k)win + z(k − 1)wrec + b, z(k) = f(a(k)), y(k + 1) = g(z(k)wout),\n(1)\nhere win is a matrix of input weights, wrec is matrix of recurrent weights, wout is matrix of output weights, a(k) is known as “presynaptic activations”, z(k) is a network’s state, f(·) and g(·) are nonlinear activation functions for hidden and output layer respectively. In this work we always use tanh function for hidden layer and optionally softmax or linear function depending on the target problem (classification or regression). Also in our equations data vectors u(k) are vector rows (not vector columns) because it is often implemented in many software tools like MATLAB and therefore is more useful for practice.\nAfter processing an input sequence u(1),u(1) . . . ,u(k) and producing the output y(k + 1), target error E(k + 1) is calculated. There are different options for target error function, the most popular choices are mean squared error for regression\nand cross-entropy error for classification. To train neural network using gradient-based optimization algorithm we have to calculate derivatives of error function subs to network’s weights ∂E∂w . To perform this, a well-known Backpropagation Through Time (BPTT) method for calculation of dynamic derivatives is used. The idea of BPTT is unrolling the recurrent neural network back in time. In this way, RNN is presented as a deep feedforward neural network with shared weights where each layer is referring to one of retrospective time steps.\nThen a standard backpropagation is applied to this deep network, immediate derivatives ∂E∂w(n) are calculated. In derivations below we use a framework very similar to [20] but based on studying evolution of local gradients δ(k) for the backpropagation procedure.\nThe dynamic derivative is a sum of immediate derivatives: ∂E ∂w = ∑h n=1 ∂E ∂w(k−n) , where n = 1, ..., h, where h is BPTT’s truncation depth. An intermediate variable δ ≡ ∂E∂a called a “local gradients” or simply “deltas” is usually introduced for convenience. If deltas are known for specific layer n then corresponding immediate derivatives can be obtained easily:\n∂E ∂win(n) = u(n)T δ(n) and ∂E∂wrec(n) = z(n− 1) T δ(n).\nFor the last layer δ is an error residual, for the intermediate layers deltas are incrementally calculated according to very famous backpropagation formula:\nδj(n− 1) = f ′(aj(n− 1)) ∑ i wijrecδi(n). (2)\nLet’s write this equation in a matrix form:\nδ(n− 1) = δ(n)wTrecdiag(f ′(a(n− 1))). (3)\nwhere diag converts a vector into diagonal matrix. Equation (3) may be rewritten using is Jacobian matrix J(n) = ∂z(n)∂z(n−1) :\nδ(n− 1) = δ(n)J(n), (4)\nwhere\nJ(n) = wTrecdiag(f ′(a(n− 1))). (5)\nNow we can use an intuitive understanding of exploding/vanishing gradients problem that was deeply investigated in classic [8], [23] and modern papers [18], [20]. As it can be seen from (5), norm of the backpropagated deltas is strongly dependent on norm of the Jacobians. Moreover, they actually are product of Jacobians: δ(n−h) = δ(n)J(n)J(n−1)...J(n− h+1). The “older” deltas are, the more Jacobian matrices were multiplied. If norm of Jacobians are more than 1, the gradients will grow exponentially in most cases. It refers to the RNN’s behavior where long-term components are more important than short-term ones. Vice versa, if norm of Jacobians are less than 1, this leads to vanishing gradients and “forgetting” the longterm events.\nAt the same time, even if both factors in (5) have norm 1, it still not guarantee the same norm of J(n). In [20] the power iteration method was used to formally analyze product of Jacobian matrices and obtain tight conditions for when the\nIEEE 2 | P a g e\ngradients explode or vanish. It was shown that it is sufficient for the largest eigenvalue of the recurrent weight matrix wTrec to be smaller than 1 for long term components to vanish and necessary for it to be larger than 1 for gradients to explode."
    }, {
      "heading" : "III. GRADIENT REGULARIZATION",
      "text" : "In [22] one can find an approach called “pseudoregularization” for forcing the recurrent neural networks to capture long-term behavior. The idea is to control the backpropagation flow during the training. The target cost function L(w) was modified there in order to perform a multi-objective optimization by adding an additional term Ω(w) responsible for the size of backpropagated gradients:\nL(w) = E(w) + λΩ(w), (6)\nwhere E(w) is a target error function, Ω(w) is a regularizer that prevents “overvanishing” the gradients, λ is a gradient regularization rate. This regularizer was a function of the deltas:\nΩ(w) = ∑ k (〈‖δ(w, k)‖〉 − 1)2 . (7)\nit’s goal was set to make a mean norm of deltas 1. For this purpose derivatives ∂Ω(w)∂w were derived and used in gradientsbased optimization algorithm. However, this approach shows unsatisfactory sensitivity from the gradients regularization rate λ and has very capricious behavior of training in general.\nSimilar, but more advanced approach called “gradient regularization” [21] was independently proposed by [20]. They used the following regularizer:\nΩ(w) = ∑ k\n ∥∥∥ ∂E∂z(k+1) ∂z(k+1)∂z(k) ∥∥∥\n∂E ∂z(k+1)\n− 1 2 . (8) It forces the Jacobian matrices ∂z(k+1)∂z(k) to preserve norm in the relevant direction ∂E∂z(k) , not for any direction like in the works mentioned above. Also, these constraints are softer. However, analytic derivatives ∂Ω(w)∂w for (8) are rather bulky; their calculation is a hard task. Authors used Theano [Bergstra, 2010] that has a built-in symbolic mathematical engine for automatic calculation of derivatives. However, such functionality is uncommon right now that complicates using this approach."
    }, {
      "heading" : "IV. DIFFERENTIATION OF THE GRADIENT’S NORM",
      "text" : "Consider we have a mini-batch of training data d = {u1; t1; ...;uN , tN} containing N samples. We made a forward and backward passes using this mini-batch and calculated the derivative dw = ∂E∂w . Now we want to check whether applying dw to the network’s weights w minimizes or maximizes norm of the backpropagated gradients. We control ‖δ(·)‖, because it is clear that norms of the derivatives ∂E ∂wrec and ∂E∂win are strongly dependent from norms of local gradients.\nTheorem 1: Let ∂wrec is a recurrent weights matrix of Simple Recurrent Network. Assume we already did forward and backward passes and calculated the weights update dwrec for the recurrent matrix, w(i+1)rec = w (i) rec + dwrec. Sufficient condition for increasing ‖δ(k − h)‖Fro (norm of local gradients propagated h time steps back from the current time step k) is dS > 0, where\ndS = (G, dG), G = (∏1\ni=h diag(f ′(a(k − i+ 1)))wrec\n) δ(k),\ndG = ∑h\ni=1 ((∏1 j=h diag [f ′(a(k − j + 1))]v ) δ(k) ) ,\nv = dwrec, if i = j; v = wrec, if i 6= j. (9)\nSimilarly, sufficient condition for decreasing ‖δ(k − h)‖Fro is dS < 0.\nProof: Consider function S′(wrec) that is Frobenius (Euclidean) norm of local gradients (2):\nS′(wrec) = ‖δ(k − h,wrec)‖ . (10)\nUsing (3), (4) we get:\nδ(k−h) = δ(k)wTrecdiag(f ′(a(k−1)))...wTrecdiag(f ′(a(k−h+1))). (11)\nFor convenience, let’s denote Dn ≡ diag(f ′(a(n))) and change the indexes for time steps as follows: (k − h)-th step is the 1-st time step, (k− h+ 1)-th is the 2-nd time step, k-th is the H-th time step. So far, equation (11) becomes:\nδ(1) = δ(H)wTrecDH−1w T recDH−2...w T rec.D1 (12)\nSince differentiation of the squared norm is simpler than differentiation of the norm itself, ‖A‖Fro = ∥∥AT∥∥ Fro\n, (A · B)T = BTAT , we may introduce an intermediate variable G:\nG = D1wrecD2wrec...DHwrecδ(H). (13)\nSo, we are interested in catching a behavior of function S(wrec) around the current point, where\nS(wrec) = ‖G‖2Fro . (14)\nTo understand behavior of S let’s calculate a differential dS. The sign of dS defines either S increases or decreases; absolute value of dS defines the speed. Thus, we obtain:\ndS = 2(G, dG), (15)\nwhere G is (13) and dG is calculated as follows:\ndG = H∑ i=1 δ(k) ·Di ·wrec · ... ·Di ·dwrec · ... ·D1 ·wrec, (16)\nIEEE 3 | P a g e\nor, in another form:\ndG = ∑H\ni=1 ((∏H j=1 Djv ) δ(k) ) ,\nv = dwrec, if i = j; v = wrec, if i 6= j. (17)\nThe theorem is proven. For calculation of (15) we use scalar product (,) that may be\nformally introduced as (A,B) = ∑\ni,j aijbij . Another option is to reshape matrices to the vectors and use standard scalar products for vectors.\nIn this paper we propose a novel method for gradient regularization using the simple analytic criteria for selection of samples for training."
    }, {
      "heading" : "V. SAMPLING-BASED GRADIENT REGULARIZATION",
      "text" : "It is generally known that training recurrent networks is a rather capricious process. Modification of cost function for preserving the norm of gradients causes difficulties even if gradients vectors are modified in relevant direction ∂E∂z(k) . Training of SRNs on sequences containing short-term dependencies using modified cost function (6) produces worse accuracy than training using default cost function. Clearly, difficulty of training RNNs is related to the complexity of error surface. Adding an additional goal of optimization may only to complicate the training process. Also, inaccurate gradients causes a natural for RNNs so-called “butterfly effect” where a little perturbations at the start leads to large divergences in the end of produced sequences. This is a reason why using popular for DNN regularization methods like dropout doesn’t work well for RNNs [24].\nIdea of our method is selection of “proper” samples of data for training. As it was shown in previous section, now we can clearly understand an impact of each mini-batch of input data to the norm of backpropagated gradients. It is possible to propose different strategies of multi-objective optimization to prevent vanishing the gradients. However, in this paper we decided to use the simplest and the most straightforward method: we watch a norm of the gradients; if norm becomes very small, we omit such mini-batches of data, which decrease this norm. Vice versa, if norm becomes very large, we skip mini-batches increasing this norm even more. Note also that it is better to skip minibatches with large |dS|: they can cause high ”‘leaps”’ of the gradient norm and therefore its selfoscillations.\nTo evaluate quality of backpropagation let’s introduce a new auxiliary variable called Q-factor:\nQ(δ, h) = log10( ‖δ(k)‖ ‖δ(k − h)‖ ), (18)\nthat measures how much the norm of the gradient is decreased during the backpropagation. For ideal catching of long-term dependencies Q-factor must be close to 0."
    }, {
      "heading" : "A. Computationally Efficient Cached Algorithm",
      "text" : "Target differential dS which is responsible for the norm of backpropagated gradients includes two parts: G and dG\n(second and 3d formulae in (9) respectively). Let’s rewrite it in more simple form:\ndG = D1wrec...DHwrecδ(H), dG = ∑H j=1 D1wrec...Djdw...DHwrecδ(H), (19)\nwhere H is equal to the horizon of BPTT. Let’s estimate the complexity of algorithm if we calculate it in a straightforward way. We see that G has 2H multiplications of matrices, so it’s complexity is 2H · O(N3w) where size of recurrent matrix wrec is Nw · Nw. However, 50% of these matrices are diagonal matrices which have multiplication complexity O(N2w). Therefore, total calculation complexity of G may be estimated as O(HN3w). At the same time, dG consists of H summands of products of matrices. Their calculation complexity is O(HN3w), so the total calculation complexity of dS is H(H + 1) ·O(N3w) or ≈ O(H2N3w).\nMeanwhile, we can propose much more numerically effective algorithm for calculation of dS. It is clear from (19) that each summand of dG contains a lot of common parts which can be cached. Let’s introduce additional matrices Lj and Rj which are responsible for left and right parts against Djdwrec in (19):\ndG = H∑ j=1 Lj (Djdwrec)Rj , (20)\nj = 1, ...,H. Matrices Lj and Rj may be calculated recursively.\nL1 = I, Lj+1 = Lj−1Djwrec,\n(21)\nwhere I is an identity matrix. Similarly,\nRH = I, Rj−1 = DjwrecRj .\n(22)\nThus, we need 2(N3w) operations for calculation Lj and Rj for each summand in (20). Also, we need 2(N3w) operations for multiplication of these matrices and Djwrec in (20). Finally, the complexity of algorithm now becomes O(HN3w). This cached method is much more effective numerically in comparison to the straightforward method because it is linear function of horizon of backpropagation instead of quadratic function.\nWe performed a numerical experiment to test the performance of the methods discussed above. We used a neural network with 100 hidden units that is described in the “Experiments” section.\nAlgorithm description We have a training data that contains train data {U,T}. Let’s call an epoch a set of M weights updates. In our experiments one epoch means processing of 100 mini-batches.\nIEEE 4 | P a g e\nAlgorithm 1 Main Algorithm Input: training data {U,T} , r0 > 0. for each minibatch ui;di with NMD vectors do\ncalculate an the differential dS, if |dS| > 0 break make forward and backward propagation f the network compute the Q factor Q(δ, h) using formula 18 if Q((δ, h) ∈ [Qmin;Qmax] then\nuse current minibatch di to compute the derivative ∂E∂w else\nif (Q((δ, h) < Qmin and dS > 0) or (Q(δ, h) > Qmax and dS < 0) then\nuse current minibatch for training else\nbreak end if\nend if end for"
    }, {
      "heading" : "VI. EXPERIMENTS",
      "text" : ""
    }, {
      "heading" : "A. Experimental tasks",
      "text" : "We refer to [11] and [20] for descripton of experiment. They used pathological synthetic test set from [9] that requires long-term correlations. We used four problems from this set: “Addition”, “Multiplication”, “Temporal order”, “Temporal order 3-bit”.\nFor “Addition problem” the input consists of a sequence of random numbers, where two random positions (one in the beginning and one in the middle of the sequence) are marked. The model needs to predict the sum of the two random numbers after the entire sequence was seen. The first position is sampled from [1;T ′/10], while the second position is sampled from [T ′/10;T ′/2], where T’ is sampled from [T ; 11/10T ], T is the length of the sequence in the paper.\nFor description of other problems, please, see [20]."
    }, {
      "heading" : "B. Description of experiments",
      "text" : "We use SRNs with 100 hidden units and tanh activation function. For output layer linear activation function was used for regression and softmax for classification. To perform better comparison, two sets containing 10 networks each were\ninitialized by random values and saved. Thus, for training using different methods we varied training algorithms only, initial weights of neural networks were the same. “Safe” range [QMIN ;QMAX ] was set to [−1; 1].\nWe use Stochastic Gradient Descent (SGD) as optimization algorithm, training speed α = 10−5...10−3, momentum µ = 0.9, size of mini-batch is 10. Dataset contains 20,000 samples for training, 1000 samples for validation and 10,000 samples for tests. Training process consists 2000 epochs, each epoch consists 50 iterations, i.e. 100,000 corrections of weights at all. Selection of the best copy of trained network is performed using ”‘save best”’ method: after each epoch, network’s performance is tested on validation dataset; network that has the best performance on the validation dataset is tested on the test dataset, this result is recognized as the final result."
    }, {
      "heading" : "C. Experimental results",
      "text" : "For recurrent neural networks good initialization of weights is very important because vanishing/exploding gradients has monotonous flow in most cases because gradients are propagated through the same matrix of recurrent weights. In our experiments weights were initialized by small values from Gaussian distribution with zero mean and standard deviation σ = 0.01 as in [20]. On Fig. 4 average norms of gradients as function of backpropagation depth (before training, further referred as initial gradients) are graphed for different values σ. This experiment was made for the “Temporal order problem”.\nEach chart at Fig 4 contains three curves: average norms of local gradients δ(k) (blue) and average norms of gradients ∆w(k)in ≡ ∂E∂win and ∆w(k)rec ≡ ∂E ∂wrec\n(red and green). From the graphs at Fig. 3.5 one can ensure on practice that to control the norms ∂E∂w which actually make changes to the weights and are under the main scope of our interest it is enough to control the norms of local gradients δ(k) because they are highly correlated.\nIt can be seen from Fig. 4 that backpropagated gradient flow is very sensitive to the parameters of random initializing of weights. Size of standard deviation that was used for our experiments from [Pascanu, 2012] ensures smooth flow of gradients’ norms (Fig.4 , a), the Q-factor for this case is Q(δ, h) ≈ 0.7 for h = 100. This is good for catching both long-term and short-term dependencies. But decreasing or increasing of parameter σ causes catastrophic effects for initial gradients flow, ( see Fig. 4 b) and c)). For σ = 0.005 average norm of gradients’ falls down during h = 100 steps backwards to less than 10−25, here Q(δ, h) > 25, it is classic\nIEEE 5 | P a g e\ncase of vanishing gradients effect: “old” inputs doesn’t have impact on final error E(w) and on training of neural network at all.\nVice versa, for σ = 0.02 average norm of gradients is explosively growing, here Q(δ, h) < −6, only “old” values make important changes to network’s weights.\nPoorly initialized networks have bad chances to be successfully trained on long-term temporal problems using 1-st order optimization methods because i) low sensitivity of 1-st order methods to small variations in gradients values and ii) local nature of gradient optimization methods at all.\nHowever, proper initialization doesn’t guarantee successful training. Particular case of forward and backward dynamics during training of SRN network is shown on Fig. 5. Norms of the backpropagated gradients are depicted on the top, mean and median activation values are shown on the bottom of each subfigure there . Neural network that is depicted on Fig.5 was initialized with σ = 0.01 and initial norms of backpropagated gradients were similar to Fig. 4 a). However, after 500 iterations we got norm of gradients less than 10−7 after h=100 backpropagations via BPTT. After that almost all the time neural networks had small gradients in the range 10−7...10−8 . From the graphs on Fig. 5, on the left, we see that area of small gradients is related to area of saturation for neuron’s activations. This is a symptom of bad network abilities for successful training and obtaining good generalization properties.\nUsing gradient regularization enables keeping the norms of backpropagated gradients from vanishing or explosion. On Fig. 6 forward and backward dynamics of the previous neural network is shown; but now it is trained using our sampling-based gradient regularization. It follows from the graphs that norms of gradients are all time in the safe range, here Q(δ, h) ∈ [−1; 1]. Graphs of activation values in (Fig. 5) shows more proper forward dynamics that is almost all the time are out of saturation area.\nOn Fig. 7 network’s performance for “Temporal order problem” with and without our proposed sampling-based gradient regularization for pre-initialized sets of 10 SRNs.\nUsing our sampling-based gradients regularization allows to refine quality of training. For lengths T = 50 and using\nfinely selected hyperparameters we got accuracies up to almost 100% correct answers without using gradients regularization. For lengths T = 100 and T = 150 improvement is 10-20% in average. If we believe that model is successful if it produces more than 99% correct answers then for T=100 it was very crucial. Results for other experiments are shown in Table I.\nFor sequences of length T = 100 we were able to train at least one successful model (with accuracy >99% as required [Hochreiter, 1997]) for all four problems using the proposed method. For two problems (Adding and Temporal order) it was impossible using the traditional training. Unfortunately, we were not able to train the successful model for T = 150 neither using the proposed method nor using the traditional method. Meanwhile, sampling-based gradient regularization also improved best and mean accuracies almost for all cases.\nSamples rejected by the algorithm during the training not necessarily are lost for using in future training process because\nIEEE 6 | P a g e\nthey may be used when network is in “safe region” or we may need to change norms of gradients in the opposite direction. Range for “safe” norms of gradients Q(δ, h) ∈ [−1; 1] was found empirically for our problems. For different problems and lengths of sequences it could be different."
    }, {
      "heading" : "VII. CONCLUSION",
      "text" : "We provided a novel solution of the problem of exploding and vanishing gradient effects, applied to the Simple Recurrent Networks. Basing on estimation of the gradient norm’s differential we can predict each minibatch’s influence.\nUsing this technique we build the algorithm that controls magnitude of the gradient operating solely with presence of the minbatches in the training sequence. We have shown mathematical correctness of this algorithm, and introduced mechanisms of negative feedback that prevent self-oscillations inside the training process.\nThis frameworks was tested for long-term prediction on a comprehensive set of appropriate benchmarks. Resulting accuracy outperforms best known SRN learning algorithms by 10-20%. This paradigm could be generalized to deep and\nmulti-layered recurrent networks, that is a subject of our future research."
    }, {
      "heading" : "ACKNOWLEDGMENTS",
      "text" : "We thank FlyElephant (http://flyelephant.net) and Dmitry Spodarets for computational resources kindly given for our experiments."
    } ],
    "references" : [ {
      "title" : "Computational capabilities of recurrent narx neural networks",
      "author" : [ "B.G. Horne H.T. Siegelmann" ],
      "venue" : "IEEE Transactions on Systems,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 1997
    }, {
      "title" : "Recurrent neural networks are universal approximators",
      "author" : [ "H.G. Zimmermann A.M. Schfer" ],
      "venue" : "In Lecture Notes in Computer Science, International Conference on Artificial Neural Networks (ICANN 2006),",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2006
    }, {
      "title" : "Advanced Methods for Time Series Prediction Using Recurrent Neural Networks, chapter Advanced Methods for Time Series Prediction Using Recurrent Neural Networks, page 1536",
      "author" : [ "H. Cardot R. Bone" ],
      "venue" : "Intech, Croatia,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2011
    }, {
      "title" : "Toyota prius hev neurocontrol and diagnostics",
      "author" : [ "D.V. Prokhorov" ],
      "venue" : "Neural Networks,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2008
    }, {
      "title" : "Recurrent neural network based language model",
      "author" : [ "et. al T. Mikolov", "M. Karafiat" ],
      "venue" : null,
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2010
    }, {
      "title" : "Speech recognition with deep recurrent neural networks",
      "author" : [ "G. Hinton A. Graves", "A.R. Mohamed" ],
      "venue" : "In IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP),",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2013
    }, {
      "title" : "On the properties of neural machine translation: Encoderdecoder approaches",
      "author" : [ "D. Bahdanau K. Cho", "B. van Merrienboer" ],
      "venue" : "In Eighth Workshop on Syntax, Semantics and Structure in Statistical Translation (SSST-8),",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2014
    }, {
      "title" : "Learning long-term dependencies with gradient descent is difficult",
      "author" : [ "P. Frasconi Y. Bengio", "P. Simard" ],
      "venue" : "IEEE Trans. Neural Networks,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1994
    }, {
      "title" : "Long short-term memory",
      "author" : [ "S.J. Schmidhuber S. Hochreiter" ],
      "venue" : "Neural Computation,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 1997
    }, {
      "title" : "Kalman Filtering and Neural Networks",
      "author" : [ "S. Haykin", "editor" ],
      "venue" : null,
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2001
    }, {
      "title" : "Learning recurrent neural networks with hessianfree optimization",
      "author" : [ "I. Sutskever J. Martens" ],
      "venue" : "In Proceedings of the 28th International Conference on Machine Learning (ICML),",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2011
    }, {
      "title" : "The echo state approach to analysing and training recurrent neural networks-with an erratum note",
      "author" : [ "Herbert Jaeger" ],
      "venue" : "Bonn, Germany: German National Research Center for Information Technology GMD Technical Report,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2001
    }, {
      "title" : "Long short-term memory in echo state networks: Details of a simulation study",
      "author" : [ "H. Jaeger" ],
      "venue" : "Technical Report 27, Jacobs University,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2012
    }, {
      "title" : "Multilevel assembly neural architecture and processing of sequences",
      "author" : [ "EM Kussul", "DA Rachkovskij" ],
      "venue" : "Neurocomputers and Attention: Connectionism and neurocomputers,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 1991
    }, {
      "title" : "Deep visual-semantic alignments for generating image descriptions",
      "author" : [ "L. Fei-Fei A. Karpathy" ],
      "venue" : "In CVPR,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2015
    }, {
      "title" : "An empirical exploration of recurrent network architectures",
      "author" : [ "I. Sutskever R. Jozefowicz", "W. Zaremba" ],
      "venue" : "In Proceedings of the 32-nd International Conference on Machine Learning,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2015
    }, {
      "title" : "Statistical Language Models based on Neural Networks",
      "author" : [ "T. Mikolov" ],
      "venue" : "Ph.d. thesis, Brno University of Technology,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2012
    }, {
      "title" : "Advances in optimizing recurrent networks",
      "author" : [ "R. Pascanu Y. Bengio", "N. Boulanger-Lewandowski" ],
      "venue" : "In Proceedings of IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP),",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2013
    }, {
      "title" : "Training Recurrent Neural Networks",
      "author" : [ "Ilya Sutskever" ],
      "venue" : "Ph.d. thesis, University of Toronto,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2013
    }, {
      "title" : "On the difficulty of training recurrent neural networks",
      "author" : [ "Y. Bengio R. Pascanu" ],
      "venue" : "Technical report, Universite de Montreal,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2012
    }, {
      "title" : "Deep Learning",
      "author" : [ "A. Courville. Y. Bengio", "I.J. Goodfellow" ],
      "venue" : "book in preparation",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2015
    }, {
      "title" : "Training neuroemulators using multicriteria extended kalman filter and pseudoregularization for model reference adaptive neurocontrol",
      "author" : [ "A.N. Chernodub" ],
      "venue" : "In Proceedings of IEEE IV International Congress on Ultra Modern Telecommunications and Control Systems (ICUMT),",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2012
    }, {
      "title" : "Untersuchungen zu dynamischen neuronalen netzen",
      "author" : [ "S. Hochreiter" ],
      "venue" : "Master’s thesis, TU Munich,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 1991
    }, {
      "title" : "Recurrent neural network regularization",
      "author" : [ "O. Vinyals W. Zaremba", "I. Sutskever" ],
      "venue" : "In ICLR 2015,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2015
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Recurrent Neural Networks (RNNs) are known as universal approximators of dynamic systems [1], [2].",
      "startOffset" : 89,
      "endOffset" : 92
    }, {
      "referenceID" : 1,
      "context" : "Recurrent Neural Networks (RNNs) are known as universal approximators of dynamic systems [1], [2].",
      "startOffset" : 94,
      "endOffset" : 97
    }, {
      "referenceID" : 2,
      "context" : "Since RNNs are able to simulate any open dynamical system, they have a broad spectrum of applications such as time series forecasting [3], control of plants [4], language modeling [5], speech recognition [6], neural machine translation [7] and other domains.",
      "startOffset" : 134,
      "endOffset" : 137
    }, {
      "referenceID" : 3,
      "context" : "Since RNNs are able to simulate any open dynamical system, they have a broad spectrum of applications such as time series forecasting [3], control of plants [4], language modeling [5], speech recognition [6], neural machine translation [7] and other domains.",
      "startOffset" : 157,
      "endOffset" : 160
    }, {
      "referenceID" : 4,
      "context" : "Since RNNs are able to simulate any open dynamical system, they have a broad spectrum of applications such as time series forecasting [3], control of plants [4], language modeling [5], speech recognition [6], neural machine translation [7] and other domains.",
      "startOffset" : 180,
      "endOffset" : 183
    }, {
      "referenceID" : 5,
      "context" : "Since RNNs are able to simulate any open dynamical system, they have a broad spectrum of applications such as time series forecasting [3], control of plants [4], language modeling [5], speech recognition [6], neural machine translation [7] and other domains.",
      "startOffset" : 204,
      "endOffset" : 207
    }, {
      "referenceID" : 6,
      "context" : "Since RNNs are able to simulate any open dynamical system, they have a broad spectrum of applications such as time series forecasting [3], control of plants [4], language modeling [5], speech recognition [6], neural machine translation [7] and other domains.",
      "startOffset" : 236,
      "endOffset" : 239
    }, {
      "referenceID" : 7,
      "context" : "However, in practice training of SRNs using first-order optimization methods is difficult [8].",
      "startOffset" : 90,
      "endOffset" : 93
    }, {
      "referenceID" : 8,
      "context" : "Hochreiter and Schmidhuber designed a set of special synthetic benchmarks for testing RNNs on ability to capture long-term dependencies [9].",
      "startOffset" : 136,
      "endOffset" : 139
    }, {
      "referenceID" : 9,
      "context" : "The solution could be using more advanced second-order optimization algorithms such as Extended Kalman Filter [10], LBFGS, Hessian-Free optimization [11], but they require much more memory and computational resources for state-of-the-art networks.",
      "startOffset" : 110,
      "endOffset" : 114
    }, {
      "referenceID" : 10,
      "context" : "The solution could be using more advanced second-order optimization algorithms such as Extended Kalman Filter [10], LBFGS, Hessian-Free optimization [11], but they require much more memory and computational resources for state-of-the-art networks.",
      "startOffset" : 149,
      "endOffset" : 153
    }, {
      "referenceID" : 11,
      "context" : "Echo State Networks (ESNs) proposed by Jaeger [12] may be considered as big reservoirs of sparsely connected neurons and randomly initialized weights which produces chaotic dynamics.",
      "startOffset" : 46,
      "endOffset" : 50
    }, {
      "referenceID" : 12,
      "context" : "Experiments show that this may be enough for capturing longterm dynamics [13].",
      "startOffset" : 73,
      "endOffset" : 77
    }, {
      "referenceID" : 13,
      "context" : "We also mention such an alternative to temporal neural networks as hierarchical sequence processing with auto-associative memories [14] that use distributed coding.",
      "startOffset" : 131,
      "endOffset" : 135
    }, {
      "referenceID" : 8,
      "context" : "Another approach that was specially designed for catching the long-term dependencies is Long-Short Term Memory (LSTM) [9].",
      "startOffset" : 118,
      "endOffset" : 121
    }, {
      "referenceID" : 5,
      "context" : "Currently it is probably the most popular family of RNNs models that shows stateof-the-art performance in several domains including speech recognition [6], image captioning [15] and neural machine translation.",
      "startOffset" : 151,
      "endOffset" : 154
    }, {
      "referenceID" : 14,
      "context" : "Currently it is probably the most popular family of RNNs models that shows stateof-the-art performance in several domains including speech recognition [6], image captioning [15] and neural machine translation.",
      "startOffset" : 173,
      "endOffset" : 177
    }, {
      "referenceID" : 6,
      "context" : "An idea of using input/forgetting gates inspired a lot of followers, Gated Recurrent Units (GRU) networks is probably one of the most successful of them [7].",
      "startOffset" : 153,
      "endOffset" : 156
    }, {
      "referenceID" : 15,
      "context" : "Finally, the united team from Google and Facebook performed a grand experiment on finding the best architecture for RNNs [16].",
      "startOffset" : 121,
      "endOffset" : 125
    }, {
      "referenceID" : 16,
      "context" : "Recent research shows the ability to train SRNs for long term dependencies up to 100 time steps and more using several new techniques [17], [18]–[20].",
      "startOffset" : 134,
      "endOffset" : 138
    }, {
      "referenceID" : 17,
      "context" : "Recent research shows the ability to train SRNs for long term dependencies up to 100 time steps and more using several new techniques [17], [18]–[20].",
      "startOffset" : 140,
      "endOffset" : 144
    }, {
      "referenceID" : 19,
      "context" : "Recent research shows the ability to train SRNs for long term dependencies up to 100 time steps and more using several new techniques [17], [18]–[20].",
      "startOffset" : 145,
      "endOffset" : 149
    }, {
      "referenceID" : 19,
      "context" : "One of the most common methods for preventing the vanishing gradients effect from this pool is known as ”‘gradient regularization”’ [20], [21]; also it was independently proposed in [22] as ”‘method of pseudoregularization”’.",
      "startOffset" : 132,
      "endOffset" : 136
    }, {
      "referenceID" : 20,
      "context" : "One of the most common methods for preventing the vanishing gradients effect from this pool is known as ”‘gradient regularization”’ [20], [21]; also it was independently proposed in [22] as ”‘method of pseudoregularization”’.",
      "startOffset" : 138,
      "endOffset" : 142
    }, {
      "referenceID" : 21,
      "context" : "One of the most common methods for preventing the vanishing gradients effect from this pool is known as ”‘gradient regularization”’ [20], [21]; also it was independently proposed in [22] as ”‘method of pseudoregularization”’.",
      "startOffset" : 182,
      "endOffset" : 186
    }, {
      "referenceID" : 19,
      "context" : "In derivations below we use a framework very similar to [20] but based on studying evolution of local gradients δ(k) for the backpropagation procedure.",
      "startOffset" : 56,
      "endOffset" : 60
    }, {
      "referenceID" : 7,
      "context" : "Now we can use an intuitive understanding of exploding/vanishing gradients problem that was deeply investigated in classic [8], [23] and modern papers [18], [20].",
      "startOffset" : 123,
      "endOffset" : 126
    }, {
      "referenceID" : 22,
      "context" : "Now we can use an intuitive understanding of exploding/vanishing gradients problem that was deeply investigated in classic [8], [23] and modern papers [18], [20].",
      "startOffset" : 128,
      "endOffset" : 132
    }, {
      "referenceID" : 17,
      "context" : "Now we can use an intuitive understanding of exploding/vanishing gradients problem that was deeply investigated in classic [8], [23] and modern papers [18], [20].",
      "startOffset" : 151,
      "endOffset" : 155
    }, {
      "referenceID" : 19,
      "context" : "Now we can use an intuitive understanding of exploding/vanishing gradients problem that was deeply investigated in classic [8], [23] and modern papers [18], [20].",
      "startOffset" : 157,
      "endOffset" : 161
    }, {
      "referenceID" : 19,
      "context" : "In [20] the power iteration method was used to formally analyze product of Jacobian matrices and obtain tight conditions for when the",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 21,
      "context" : "In [22] one can find an approach called “pseudoregularization” for forcing the recurrent neural networks to capture long-term behavior.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 20,
      "context" : "Similar, but more advanced approach called “gradient regularization” [21] was independently proposed by [20].",
      "startOffset" : 69,
      "endOffset" : 73
    }, {
      "referenceID" : 19,
      "context" : "Similar, but more advanced approach called “gradient regularization” [21] was independently proposed by [20].",
      "startOffset" : 104,
      "endOffset" : 108
    }, {
      "referenceID" : 23,
      "context" : "This is a reason why using popular for DNN regularization methods like dropout doesn’t work well for RNNs [24].",
      "startOffset" : 106,
      "endOffset" : 110
    }, {
      "referenceID" : 10,
      "context" : "We refer to [11] and [20] for descripton of experiment.",
      "startOffset" : 12,
      "endOffset" : 16
    }, {
      "referenceID" : 19,
      "context" : "We refer to [11] and [20] for descripton of experiment.",
      "startOffset" : 21,
      "endOffset" : 25
    }, {
      "referenceID" : 8,
      "context" : "They used pathological synthetic test set from [9] that requires long-term correlations.",
      "startOffset" : 47,
      "endOffset" : 50
    }, {
      "referenceID" : 19,
      "context" : "For description of other problems, please, see [20].",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 10,
      "context" : "3: An illustration of the addition problem [11], a typical problem with pathological long term dependencies.",
      "startOffset" : 43,
      "endOffset" : 47
    }, {
      "referenceID" : 19,
      "context" : "01 as in [20].",
      "startOffset" : 9,
      "endOffset" : 13
    } ],
    "year" : 2016,
    "abstractText" : "Vanishing (and exploding) gradients effect is a common problem for recurrent neural networks with nonlinear activation functions which use backpropagation method for calculation of derivatives. Deep feedforward neural networks with many hidden layers also suffer from this effect. In this paper we propose a novel universal technique that makes the norm of the gradient stay in the suitable range. We construct a way to estimate a contribution of each training example to the norm of the long-term components of the target functions gradient. Using this subroutine we can construct mini-batches for the stochastic gradient descent (SGD) training that leads to high performance and accuracy of the trained network even for very complex tasks. We provide a straightforward mathematical estimation of minibatch’s impact on for the gradient norm and prove its correctness theoretically. To check our framework experimentally we use some special synthetic benchmarks for testing RNNs on ability to capture long-term dependencies. Our network can detect links between events in the (temporal) sequence at the range 100 and longer.",
    "creator" : "LaTeX with hyperref package"
  }
}