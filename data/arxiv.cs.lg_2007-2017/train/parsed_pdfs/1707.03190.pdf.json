{
  "name" : "1707.03190.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Accelerated Variance Reduced Stochastic ADMM",
    "authors" : [ "Yuanyuan Liu", "Fanhua Shang", "James Cheng" ],
    "emails" : [ "jcheng}@cse.cuhk.edu.hk" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Introduction In this paper, we consider a class of composite convex optimization problems\nmin x∈Rd1 f(x) + h(Ax), (1)\nwhere A∈Rd2×d1 is a given matrix, f(x) := 1n ∑n i=1fi(x), each fi(x) is a convex function, and h(Ax) is convex but possibly non-smooth. With regard to h(·), we are interested in a sparsity-inducing regularizer, e.g. `1-norm, group Lasso and nuclear norm. When A is an identity matrix, i.e. A = Id1 , the above formulation (1) arises in many places in machine learning, statistics, and operations research (Bubeck 2015), such as logistic regression, Lasso and support vector machine (SVM). We mainly focus on the large sample regime. In this regime, even first-order batch methods, e.g. FISTA (Beck and Teboulle 2009), become computationally burdensome due to their per-iteration complexity of O(nd1). As a result, stochastic gradient descent (SGD) with per-iteration complexity of O(d1) has\nCopyright c© 2017, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\nwitnessed tremendous progress in the recent years. Especially, a number of stochastic variance reduced gradient methods such as SAG (Roux, Schmidt, and Bach 2012), SDCA (Shalev-Shwartz and Zhang 2013) and SVRG (Johnson and Zhang 2013) have been proposed to successfully address the problem of high variance of the gradient estimate in ordinary SGD, resulting in a linear convergence rate (for strongly convex problems) as opposed to sub-linear rates of SGD. More recently, the Nesterov’s acceleration technique (Nesterov 2004) was introduced in (Allen-Zhu 2016; Hien et al. 2016) to further speed up the stochastic variancereduced algorithms, which results in the best known convergence rates for both strongly convex and general convex problems. This motivates us to integrate the momentum acceleration trick into the stochastic alternating direction method of multipliers (ADMM) below.\nWhen A is a more general matrix, i.e. A 6=Id1 , the formulation (1) becomes many more complicated problems arising from machine learning, e.g. graph-guided fuzed Lasso (Kim, Sohn, and Xing 2009) and generalized Lasso (Tibshirani and Taylor 2011). To solve this class of composite optimization problems with an auxiliary variable y = Ax, which are the special case of the general ADMM form,\nmin x∈Rd1,y∈Rd2 f(x) + h(y), s.t. Ax+By = c, (2)\nthe ADMM is an effective optimization tool (Boyd et al. 2011), and has shown attractive performance in a wide range of real-world problems, such as big data classification (Nie et al. 2014). To tackle the issue of high periteration complexity of batch (deterministic) ADMM (as a popular first-order optimization method), Wang and Banerjee (2012), Suzuki (2013) and Ouyang et al. (2013) proposed some online or stochastic ADMM algorithms. However, all these variants only achieve the convergence rate of O(1/ √ T ) for general convex problems and O(log T/T ) for strongly convex problems, respectively, as compared with the O(1/T 2) and linear convergence rates of accelerated batch algorithms (Nesterov 1983), e.g. FISTA, where T is the number of iterations. By now several accelerated and faster converging versions of stochastic ADMM, which are all based on variance reduction techniques, have been proposed, e.g. SAG-ADMM (Zhong and Kwok 2014b), SDCA-ADMM (Suzuki 2014) and SVRG-ADMM (Zheng and Kwok 2016). With regard to strongly convex problems, ar X iv :1\n70 7.\n03 19\n0v 1\n[ cs\n.L G\n] 1\n1 Ju\nl 2 01\n7\nSuzuki (2014) and Zheng and Kwok (2016) proved that linear convergence can be obtained for the special ADMM form (i.e. B = −Id2 and c = 0) and the general ADMM form, respectively. In SAG-ADMM and SVRG-ADMM, an O(1/T ) convergence rate can be guaranteed for general convex problems, which implies that there still remains a gap in convergence rates between the stochastic ADMM and accelerated batch algorithms.\nTo bridge this gap, we integrate the momentum acceleration trick in (Tseng 2010) for deterministic optimization into the stochastic variance reduction gradient (SVRG) based stochastic ADMM (SVRG-ADMM). Naturally, the proposed method has low per-iteration time complexity as existing stochastic ADMM algorithms, and does not require the storage of all gradients (or dual variables) as in SCAS-ADMM (Zhao, Li, and Zhou 2015) and SVRGADMM (Zheng and Kwok 2016), as shown in Table 1. We summarize our main contributions below.\n• We propose an accelerated variance reduced stochastic ADMM (ASVRG-ADMM) method, which integrates both the momentum acceleration trick in (Tseng 2010) for batch optimization and the variance reduction technique of SVRG (Johnson and Zhang 2013).\n• We prove that ASVRG-ADMM achieves a linear convergence rate for strongly convex problems, which is consistent with the best known result in SDCA-ADMM (Suzuki 2014) and SVRG-ADMM (Zheng and Kwok 2016).\n• We also prove that ASVRG-ADMM has a convergence rate of O(1/T 2) for non-strongly convex problems, which is a factor of T faster than SAG-ADMM and SVRG-ADMM, whose convergence rates are O(1/T ).\n• Our experimental results further verified that our ASVRG-ADMM method has much better performance than the state-of-the-art stochastic ADMM methods.\nRelated Work Introducing y = Ax ∈Rd2 , problem (1) becomes\nmin x∈Rd1,y∈Rd2\nf(x) + h(y), s.t. Ax− y = 0. (3)\nAlthough (3) is only a special case of the general ADMM form (2), when B = −Id2 and c = 0, the stochastic (or online) ADMM algorithms and theoretical results in (Wang and Banerjee 2012; Ouyang et al. 2013; Zhong and Kwok 2014b; Zheng and Kwok 2016) and this paper are all for the more general problem (2). To minimize (2), together with\nthe dual variable λ, the update steps of batch ADMM are\nyk = argminy h(y) + β 2 ‖Axk−1+By−c+λk−1‖ 2, (4) xk = argminx f(x) + β 2 ‖Ax+Byk−c+λk−1‖\n2, (5) λk = λk−1 +Axk +Byk − c, (6)\nwhere β>0 is a penalty parameter. To extend the batch ADMM to the online and stochastic settings, the update steps for yk and λk remain unchanged. In (Wang and Banerjee 2012; Ouyang et al. 2013), the update step of xk is approximated as follows:\nxk = argmin x xT∇fik(xk−1) +\n1\n2ηk ‖x− xk−1‖2G\n+ β\n2 ‖Ax+Byk−c+λk−1‖2,\n(7)\nwhere we draw ik uniformly at random from [n] := {1, . . . , n}, ηk ∝ 1/ √ k is the step-size, and ‖z‖2G = zTGz with given positive semi-definite matrix G, e.g. G = Id1 in (Ouyang et al. 2013). Analogous to SGD, the stochastic ADMM variants use an unbiased estimate of the gradient at each iteration. However, all those algorithms have much slower convergence rates than their batch counterpart, as mentioned above. This barrier is mainly due to the variance introduced by the stochasticity of the gradients. Besides, to guarantee convergence, they employ a decaying sequence of step sizes ηk, which in turn impacts the rates.\nMore recently, a number of variance reduced stochastic ADMM methods (e.g. SAG-ADMM, SDCA-ADMM and SVRG-ADMM) have been proposed and made exciting progress such as linear convergence rates. SVRG-ADMM in (Zheng and Kwok 2016) is particularly attractive here because of its low storage requirement compared with the algorithms in (Zhong and Kwok 2014b; Suzuki 2014). Within each epoch of SVRG-ADMM, the full gradient p̃ =∇f(x̃) is first computed, where x̃ is the average point of the previous epoch. Then ∇fik(xk−1) and ηk in (7) are replaced by\n∇̃fIk(xk−1) = 1 |Ik| ∑ ik∈Ik (∇fik(xk−1)−∇fik(x̃)) + p̃ (8)\nand a constant step-size η, respectively, where Ik ⊂ [n] is a mini-batch of size b (which is a useful technique to reduce the variance). In fact, ∇̃fIk(xk−1) is an unbiased estimator of the gradient ∇f(xk−1), i.e. E[∇̃fIk(xk−1)]=∇f(xk−1).\nAccelerated Variance Reduced Stochastic ADMM\nIn this section, we design an accelerated variance reduced stochastic ADMM method for both strongly convex and general convex problems. We first make the following assumptions: Each convex fi(·) is Li-smooth, i.e. there exists a constant Li>0 such that ‖∇fi(x)−∇fi(y)‖≤Li‖x−y‖, ∀x, y ∈ Rd, and L , maxi Li; f(·) is µ-strongly convex, i.e. there is µ > 0 such that f(x) ≥ f(y) +∇f(y)T(x− y)+ µ2 ‖x−y‖\n2 for all x, y ∈Rd; The matrix A has full row rank. The first two assumptions are common in the analysis of first-order optimization methods, while the last one has\nAlgorithm 1 ASVRG-ADMM for strongly-convex case Input: m, η, β > 0, 1 ≤ b ≤ n. Initialize: x̃0= z̃0, ỹ0, θ, λ̃0=− 1β (A\nT )†∇f(x̃0). 1: for s = 1, 2, . . . , T do 2: xs0 = z s 0 = x̃ s−1, ys0 = ỹ s−1, λs0 = λ̃\ns−1; 3: p̃ = ∇f(x̃s−1); 4: for k = 1, 2, . . . ,m do 5: Choose Ik⊆ [n]of size b, uniformly at random; 6: ysk=argminy h(y)+ β 2 ‖Az s k−1+By− c+λsk−1‖2;\n7: zsk=z s k−1−\nη(∇̃fIk(x s k−1)+βA T(Azsk−1+By s k−c+λ s k−1))\nγθ ; 8: xsk=(1− θ)x̃s−1 + θzsk; 9: λsk=λ s k−1 +Az s k +By s k − c;\n10: end for 11: x̃s= 1m ∑m k=1x s k, ỹ s=(1−θ)ỹs−1+ θm ∑m k=1y s k, 12: λ̃s=− 1β (A T )†∇f(x̃s); 13: end for Output: x̃T , ỹT .\nbeen used in the convergence analysis of batch ADMM (?; Nishihara et al. 2015; Deng and Yin 2016) and stochastic ADMM (Zheng and Kwok 2016).\nThe Strongly Convex Case In this part, we consider the case of (2) when each fi(·) is convex,L-smooth, and f(·) is µ-strongly convex. Recall that this class of problems include graph-guided Logistic Regression and SVM as notable examples. To efficiently solve this class of problems, we incorporate both the momentum acceleration and variance reduction techniques into stochastic ADMM. Our algorithm is divided into T epochs, and each epoch consists of m stochastic updates, where m is usually chosen to be O(n) as in (Johnson and Zhang 2013).\nLet z be an important auxiliary variable, its update rule is given as follows. Similar to (Zhong and Kwok 2014b; Zheng and Kwok 2016), we also use the inexact Uzawa method (Zhang, Burger, and Osher 2011) to approximate the sub-problem (7), which can avoid computing the inverse of the matrix ( 1η Id1+βA\nTA). Moreover, the momentum weight 0≤ θs ≤ 1 (the update rule for θs is provided below) is introduced into the proximal term 12η‖x−xk−1‖ 2 G similar to that of (7), and then the sub-problem with respect to z is formulated as follows:\nmin z (z −zsk−1)T ∇̃fIk(xsk−1)+ θs−1 2η ‖z −zsk−1‖2G\n+ β\n2 ‖Az +Bysk − c+ λsk−1‖2,\n(9)\nwhere ∇̃fIk(xsk−1) is defined in (8), η < 12L , and G = γId1− ηβ θs−1 ATA with γ ≥ γmin ≡ ηβ‖A TA‖2 θs−1 +1 to ensure that G I similar to (Zheng and Kwok 2016), where ‖·‖2 is the spectral norm, i.e. the largest singular value of the matrix. Furthermore, the update rule for x is given by\nxsk= x̃ s−1+θs−1(z s k− x̃s−1)=(1−θs−1)x̃s−1+θs−1zsk, (10)\nwhere θs−1(zsk − x̃s−1) is the key momentum term (similar to those in accelerated batch methods (Nesterov 2004)), which helps accelerate our algorithm by using the iterate of the previous epoch, i.e. x̃s−1. Similar to xsk, ỹ\ns = (1− θs−1)ỹ s−1+ θs−1m ∑m k=1y s k. Moreover, θs can be set to a constant θ in all epochs of our algorithm, which must satisfy 0 ≤ θ ≤ 1− δ(b)/(α−1), where α = 1Lη > 1+ δ(b), and δ(b) is defined below. The optimal value of θ is provided in Proposition 1 below. The detailed procedure is shown in Algorithm 1, where we adopt the same initialization technique for λ̃s as in (Zheng and Kwok 2016), and (·)† is the pseudo-inverse. Note that, when θ=1, ASVRG-ADMM degenerates to SVRG-ADMM in (Zheng and Kwok 2016).\nThe Non-Strongly Convex Case In this part, we consider general convex problems of the form (2) when each fi(·) is convex, L-smooth, and h(·) is not necessarily strongly convex (but possibly non-smooth). Different from the strongly convex case, the momentum weight θs is required to satisfy the following inequalities:\n1− θs θ2s ≤ 1 θ2s−1 and 0 ≤ θs ≤ 1− δ(b) α− 1 , (11)\nwhere δ(b) := n−bb(n−1) is a decreasing function with respect to the mini-batch size b. The condition (20) allows the momentum weight to decease, but not too fast, similar to the requirement on the step-size ηk in classical SGD and stochastic ADMM (?). Unlike batch acceleration methods, the weight must satisfy both inequalities in (20).\nMotivated by the momentum acceleration techniques in (Tseng 2010; Nesterov 2004) for batch optimization, we give the update rule of the weight θs for the mini-batch case:\nθs =\n√ θ4s−1+ 4θ\n2 s−1 − θ2s−1 2 and θ0 = 1− δ(b) α− 1 . (12)\nFor the special case of b = 1, we have δ(1) = 1 and θ0 = 1− 1α−1 , while b=n (i.e. batch version), δ(n)=0 and θ0= 1. Since {θs} is decreasing, then θs ≤ 1− δ(b)α−1 is satisfied. The detailed procedure is shown in Algorithm 2, which has many slight differences in the initialization and output of each epoch from Algorithm 1. In addition, the key difference between them is the update rule for the momentum weight θs. That is, θs in Algorithm 1 can be set to a constant, while that in Algorithm 2 is adaptively adjusted as in (12).\nConvergence Analysis This section provides the convergence analysis of our ASVRG-ADMM algorithms (i.e. Algorithms 1 and 2) for strongly convex and general convex problems, respectively. Following (Zheng and Kwok 2016), we first introduce the following function P (x, y) := f(x)−f(x∗)−∇f(x∗)T(x− x∗)+h(y)−h(y∗)−h′(y∗)T(y− y∗) as a convergence criterion, where h′(y) denotes the (sub)gradient of h(·) at y. Indeed, P (x, y)≥ 0 for all x, y ∈ Rd. In the following, we give the intermediate key results for our analysis.\nAlgorithm 2 ASVRG-ADMM for general convex case Input: m, η, β > 0, 1 ≤ b ≤ n. Initialize: x̃0 = z̃0, ỹ0, λ̃0, θ0 = 1− Lηδ(b)1−Lη .\n1: for s = 1, 2, . . . , T do 2: xs0=(1−θs−1)x̃s−1+θs−1z̃s−1, ys0= ỹs−1, λs0= λ̃s−1; 3: p̃ = ∇f(x̃s−1), zs0= z̃s−1; 4: for k = 1, 2, . . . ,m do 5: Choose Ik⊆ [n]of size b, uniformly at random; 6: ysk=argminy h(y)+ β 2 ‖Az s k−1+By− c+λsk−1‖2;\n7: zsk=z s k−1−\nη(∇̃fIk(x s k−1)+βA T(Azsk−1+By s k−c+λ s k−1))\nγθs−1 ;\n8: xsk=(1− θs−1)x̃s−1 + θs−1zsk; 9: λsk=λ s k−1 +Az s k +By s k − c;\n10: end for 11: x̃s= 1m ∑m k=1x s k, ỹ s=(1−θs−1)ỹs−1+ θs−1m ∑m k=1y s k,\n12: λ̃s=λsm, z̃ s=zsm, θs=\n√ θ4s−1+4θ 2 s−1−θ 2 s−1\n2 ; 13: end for Output: x̃T , ỹT .\nLemma 1.\nE[‖∇̃fIk(xsk−1)−∇f(xsk−1)‖2] ≤2Lδ(b) [ f(x̃s−1)−f(xsk−1)+(xsk−1− x̃s−1)T∇f(xsk−1) ] ,\nwhere δ(b)= n−bb(n−1)≤1 and 1 ≤ b ≤ n. Lemma 2. Using the same notation as in Lemma 1, let (x∗, y∗, λ∗) denote an optimal solution of problem (2), and {(zsk, xsk, ysk, λsk, x̃s, ỹs)} be the sequence generated by Algorithm 1 or 2 with θs ≤ 1− δ(b)α−1, where α= 1 Lη . Then the following holds for all k,\nE [ P (x̃s, ỹs)− θs−1\nm m∑ k=1 ( (x∗−zsk)TATϕsk+(y∗−ysk)TBTϕsk\n)]\n≤E\n[ P (x̃s−1, ỹs−1)\n1/(1−θs−1) + θ2s−1\n( ‖x∗− zs0‖2G−‖x∗− zsm‖2G ) 2mη ]\n+ βθs−1 2m E\n[ ‖Azs0−Ax∗‖2−‖Azsm−Ax∗‖2+ m∑ k=1 ‖λsk−λsk−1‖2 ]\nwhere ϕsk = β(λ s k − λ∗).\nThe detailed proofs of Lemmas 3 and 4 are provided in the Supplementary Material.\nLinear Convergence Our first main result is the following theorem which gives the convergence rate of Algorithm 1. Theorem 1. Using the same notation as in Lemma 4 with given θ ≤ 1− δ(b)α−1 , and suppose f(·) is µ-strongly convex and Lf -smooth, and m is sufficiently large so that\nρ= θ‖θG+ηβATA‖2\nηmµ︸ ︷︷ ︸ 1\n+1−θ︸︷︷︸ 2 + Lfθ\nβmσmin(AAT )︸ ︷︷ ︸ 3 <1, (13)\nwhere σmin(AAT ) is the smallest eigenvalue of the positive semi-definite matrix AAT , and G is defined in (9). Then\nE [ P (x̃T, ỹT ) ] ≤ ρTP (x̃0, ỹ0).\nThe proof of Theorem 1 is provided in the Supplementary Material. From Theorem 1, one can see that ASVRGADMM achieves linear convergence, which is consistent with that of SVRG-ADMM, while SCAS-ADMM has only an O(1/T ) convergence rate. Remark 1. Theorem 1 shows that our result improves slightly upon the rate ρ in (Zheng and Kwok 2016) with the same η and β. Specifically, as shown in (13), ρ consists of three components, corresponding to those of Theorem 1 in (Zheng and Kwok 2016). In Algorithm 1, recall that here θ ≤ 1 and G is defined in (9). Thus, both the first and third terms in (13) are slightly smaller than those of Theorem 1 in (Zheng and Kwok 2016). In addition, one can set η=1/8L (i.e. α=8) and θ=1−δ(b)/(α−1)=1−δ(b)/7. Thus, the second term in (13) equals to δ(b)/7, while that of SVRG-ADMM is approximately equal to 4Lηδ(b)/(1− 4Lηδ(b))≥ δ(b)/2. In summary, the convergence bound of SVRG-ADMM can be slightly improved by ASVRG-ADMM.\nSelecting Scheme of θ The rate ρ in (13) of Theorem 1 can be expressed as the function with respect to the parameters θ and β with given m, η, Lf , L,A, µ. Similar to (Nishihara et al. 2015; Zheng and Kwok 2016), one can obtain the optimal parameter β∗ = √ Lfµ/(σmin(AAT )‖ATA‖2), which produces a smaller rate ρ. In addition, as shown in (13), all the three terms are with respect to the weight θ. Therefore, we give the following selecting scheme for θ. Proposition 1. Given κf = Lf/µ, β∗, κ = L/µ, b, A, and let ω= ‖ATA‖2/σmin(AAT ), we set m> 2κ+2 √ κfω and η=1/(Lα), where α= m−2 √ κfω\n2κ +δ(b)+1. Then the optimal θ∗ of Algorithm 1 is given by\nθ∗ = m− 2√κfω\nm− 2√κfω + 2κ(δ(b) + 1) .\nThe proof of Proposition 1 is provided in the Supplementary Material.\nConvergence Rate of O(1/T 2) We first assume that z ∈ Z , where Z is a convex compact set with diameter DZ = supz1,z2∈Z ‖z1−z2‖, and the dual variable λ is also bounded with Dλ = supλ1,λ2 ‖λ1−λ2‖. For Algorithm 2, we give the following result. Theorem 2. Using the same notation as in Lemma 4 with θ0=1− δ(b)α−1 , then we have\nE [ P (x̃T, ỹT )+ γ‖Ax̃T+BỹT− c‖ ] ≤ 4(α−1)δ(b) ( P (x̃0, ỹ0) + γ‖Ax̃0+Bỹ0− c‖ ) (α− 1− δ(b))2(T+1)2\n+ 2Lα‖x∗− x̃0‖2G m(T + 1)2\n+ 2β ( ‖ATA‖2D2Z + 4D2λ ) m(T+1) . (14)\nThe proof of Theorem 2 is provided in the Supplementary Material. Theorem 2 shows that the convergence bound consists of the three components, which converge asO(1/T 2),O(1/mT 2) andO(1/mT ), respectively, while the three components of SVRG-ADMM converge as O(1/T ), O(1/mT ) and O(1/mT ). Clearly, ASVRGADMM achieves the convergence rate of O(1/T 2) as opposed to O(1/T ) of SVRG-ADMM and SAG-ADMM (m T ). All the components in the convergence bound of SCAS-ADMM converge as O(1/T ). Thus, it is clear from this comparison that ASVRG-ADMM is a factor of T faster than SAG-ADMM, SVRG-ADMM and SCAS-ADMM.\nConnections to Related Work Our algorithms and convergence results can be extended to the following settings. When the mini-batch size b= n and m=1, then δ(n)=0, that is, the first term of (14) vanishes, and ASVRG-ADMM degenerates to the batch version. Its convergence rate becomes O(D2x∗/(T+1) 2 +D2Z/(T+1)+ D2λ/(T+1)) (which is consistent with the optimal result for accelerated deterministic ADMM methods (Goldstein et al. 2014; Lu et al. 2016)), where Dx∗ = ‖x∗− x̃0‖G. Many empirical risk minimization problems can be viewed as the special case of (1) when A = I . Thus, our method can be extended to solve them, and has anO(1/T 2+1/(mT 2)) rate, which is consistent with the best known result as in (AllenZhu 2016; Hien et al. 2016).\nExperiments In this section, we use our ASVRG-ADMM method to solve the general convex graph-guided fuzed Lasso, strongly convex graph-guided logistic regression and graph-guided SVM problems. We compare ASVRG-ADMM with the following state-of-the-art methods: STOC-ADMM (Ouyang et al.\n2013), OPG-ADMM (Suzuki 2013), SAG-ADMM (Zhong and Kwok 2014b), and SCAS-ADMM (Zhao, Li, and Zhou 2015) and SVRG-ADMM (Zheng and Kwok 2016). All methods were implemented in MATLAB, and the experiments were performed on a PC with an Intel i5-2400 CPU and 16GB RAM.\nGraph-Guided Fused Lasso We first evaluate the empirical performance of the proposed method for solving the graph-guided fuzed Lasso problem:\nmin x\n1\nn n∑ i=1 `i(x) + λ1‖Ax‖1, (15)\nwhere `i is the logistic loss function on the feature-label pair (ai, bi), i.e., log(1+exp(−biaTi x)), and λ1≥ 0 is the regularization parameter. Here, we set A = [G; I] as in (Ouyang et al. 2013; Zhong and Kwok 2014b; Azadi and Sra 2014; Zheng and Kwok 2016), where G is the sparsity pattern of the graph obtained by sparse inverse covariance selection (Banerjee, Ghaoui, and d’Aspremont 2008). We used four publicly available data sets1 in our experiments, as listed in Table 2. Note that except STOC-ADMM, all the other algorithms adopted the linearization of the penalty term β2 ‖Ax−y+z‖ 2 to avoid the inversion of 1ηkId1+βA TA at each iteration, which can be computationally expensive for large matrices. The parameters of ASVRG-ADMM are set as follows: m=2n/b and γ=1 as in (Zhong and Kwok 2014b; Zheng and Kwok 2016), as well as η and β.\nFigure 1 shows the training error (i.e. the training objective value minus the minimum) and testing loss of all the algorithms for the general convex problem on the four data\n1http://www.csie.ntu.edu.tw/˜cjlin/ libsvmtools/datasets/\nsets. SAG-ADMM could not generate experimental results on the HIGGS data set because it ran out of memory. These figures clearly indicate that the variance reduced stochastic ADMM algorithms (including SAG-ADMM, SCASADMM, SVRG-ADMM and ASVRG-ADMM) converge much faster than those without variance reduction techniques, e.g. STOC-ADMM and OPG-ADMM. Notably, ASVRG-ADMM consistently outperforms all other algorithms in terms of the convergence rate under all settings, which empirically verifies our theoretical result that ASVRG-ADMM has a faster convergence rate of O(1/T 2), as opposed to the best known rate of O(1/T ).\nGraph-Guided Logistic Regression We further discuss the performance of ASVRG-ADMM for solving the strongly convex graph-guided logistic regression problem (Ouyang et al. 2013; Zhong and Kwok 2014a):\nmin x\n1\nn n∑ i=1 ( `i(x) + λ2 2 ‖x‖22 ) + λ1‖Ax‖1. (16)\nDue to limited space and similar experimental phenomena on the four data sets, we only report the experimental results on the a9a and w8a data sets in Figure 2, from which we observe that SVRG-ADMM and ASVRG-ADMM achieve comparable performance, and they significantly outperform the other methods in terms of the convergence rate, which is\nconsistent with their linear (geometric) convergence guarantees. Moreover, ASVRG-ADMM converges slightly faster than SVRG-ADMM, which shows the effectiveness of the momentum trick to accelerate variance reduced stochastic ADMM, as we expected.\nGraph-Guided SVM Finally, we evaluate the performance of ASVRG-ADMM for solving the graph-guided SVM problem,\nmin x\n1\nn n∑ i=1 ( [1− biaTi x]+ + λ2 2 ‖x‖22 ) + λ1‖Ax‖1, (17)\nwhere [x]+ = max(0, x) is the non-smooth hinge loss. To effectively solve problem (17), we used the smooth Huberized hinge loss in (Rosset and Zhu 2007) to approximate the hinge loss. For the 20newsgroups dataset2, we randomly divide it into 80% training set and 20% test set. Following (Ouyang et al. 2013), we set λ1=λ2=10−5, and use the one-vs-rest scheme for the multi-class classification.\nFigure 3 shows the average prediction accuracies and standard deviations of testing accuracies over 10 different runs. Since STOC-ADMM, OPG-ADMM, SAG-ADMM and SCAS-ADMM consistently perform worse than SVRGADMM and ASVRG-ADMM in all settings, we only report the results of STOC-ADMM. We observe that SVRGADMM and ASVRG-ADMM consistently outperform the classical SVM and STOC-ADMM. Moreover, ASVRGADMM performs much better than the other methods in all settings, which again verifies the effectiveness of our ASVRG-ADMM method.\nConclusions In this paper, we proposed an accelerated stochastic variance reduced ADMM (ASVRG-ADMM) method, in which we combined both the momentum acceleration trick for batch optimization and the variance reduction technique. We designed two different momentum term update rules for strongly convex and general convex cases, respectively. Moreover, we also theoretically analyzed the convergence properties of ASVRG-ADMM, from which it is clear that ASVRG-ADMM achieves linear convergence andO(1/T 2) rates for both cases. Especially, ASVRG-ADMM is at least a factor of T faster than existing stochastic ADMM methods for general convex problems.\n2http://www.cs.nyu.edu/˜roweis/data.html\nAcknowledgements We thank the reviewers for their valuable comments. The authors are supported by the Hong Kong GRF 2150851 and 2150895, and Grants 3132964 and 3132821 funded by the Research Committee of CUHK.\nReferences [Allen-Zhu 2016] Allen-Zhu, Z. 2016. Katyusha: Accelerated variance reduction for faster sgd. arXiv:1603.05953v4.\n[Azadi and Sra 2014] Azadi, S., and Sra, S. 2014. Towards an optimal stochastic alternating direction method of multipliers. In Proc. 31st Int. Conf. Mach. Learn. (ICML), 620– 628.\n[Baldassarre and Pontil 2013] Baldassarre, L., and Pontil, M. 2013. Advanced topics in machine learning part II: 5. Proximal methods. University Lecture.\n[Banerjee, Ghaoui, and d’Aspremont 2008] Banerjee, O.; Ghaoui, L. E.; and d’Aspremont, A. 2008. Model selection through sparse maximum likelihood estimation for multivariate gaussian or binary data. J. Mach. Learn. Res. 9:485–516.\n[Beck and Teboulle 2009] Beck, A., and Teboulle, M. 2009. A fast iterative shrinkage-thresholding algorithm for linear inverse problems. SIAM J. Imaging Sci. 2(1):183–202.\n[Boyd et al. 2011] Boyd, S.; Parikh, N.; Chu, E.; Peleato, B.; and Eckstein, J. 2011. Distributed optimization and statistical learning via the alternating direction method of multipliers. Found. Trends Mach. Learn. 3(1):1–122.\n[Bubeck 2015] Bubeck, S. 2015. Convex optimization: Algorithms and complexity. Found. Trends Mach. Learn. 8:231–358.\n[Deng and Yin 2016] Deng, W., and Yin, W. 2016. On the global and linear convergence of the generalized alternating direction method of multipliers. J. Sci. Comput. 66:889–916.\n[Goldstein et al. 2014] Goldstein, T.; ODonoghue, B.; Setzer, S.; and Baraniuk, R. 2014. Fast alternating direction optimization methods. SIAM J. Imaging Sciences 7(3):1588– 1623.\n[Hien et al. 2016] Hien, L. T. K.; Lu, C.; Xu, H.; and Feng, J. 2016. Accelerated stochastic mirror descent algorithms for composite non-strongly convex optimization. arXiv:1605.06892v2.\n[Johnson and Zhang 2013] Johnson, R., and Zhang, T. 2013. Accelerating stochastic gradient descent using predictive variance reduction. In Proc. Adv. Neural Inf. Process. Syst. (NIPS), 315–323.\n[Kim, Sohn, and Xing 2009] Kim, S.; Sohn, K. A.; and Xing, E. P. 2009. A multivariate regression approach to association analysis of a quantitative trait network. Bioinformatics 25:i204–i212.\n[Koneeny et al. 2016] Koneeny, J.; Liu, J.; Richtarik, P.; ; and Takae, M. 2016. Mini-batch semi-stochastic gradient descent in the proximal setting. IEEE J. Sel. Top. Sign. Proces. 10(2):242–255.\n[Lan 2012] Lan, G. 2012. An optimal method for stochastic composite optimization. Math. Program. 133:365–397.\n[Lu et al. 2016] Lu, C.; Li, H.; Lin, Z.; and Yan, S. 2016. Fast proximal linearized alternating direction method of multiplier with parallel splitting. In Proc. 30th AAAI Conf. Artif. Intell., 739–745.\n[Nesterov 1983] Nesterov, Y. 1983. A method of solving a convex programming problem with convergence rate o(1/k2). Soviet Mathematics Doklady 27(2):372–376.\n[Nesterov 2004] Nesterov, Y. 2004. Introductory Lectures on Convex Optimization: A Basic Course. Boston: Kluwer Academic Publ.\n[Nie et al. 2014] Nie, F.; Huang, Y.; XiaoqianWang; and Huang, H. 2014. Linear time solver for primal svm. In Proc. 31st Int. Conf. Mach. Learn. (ICML), 505–513.\n[Nishihara et al. 2015] Nishihara, R.; Lessard, L.; Recht, B.; Packard, A.; and Jordan, M. I. 2015. A general analysis of the convergence of ADMM. In Proc. 32nd Int. Conf. Mach. Learn. (ICML), 343–352.\n[Ouyang et al. 2013] Ouyang, H.; He, N.; Tran, L. Q.; and Gray, A. 2013. Stochastic alternating direction method of multipliers. In Proc. 30th Int. Conf. Mach. Learn. (ICML), 80–88.\n[Rosset and Zhu 2007] Rosset, S., and Zhu, J. 2007. Piecewise linear regularized solution paths. Ann. Statist. 35(3):1012–1030.\n[Roux, Schmidt, and Bach 2012] Roux, N. L.; Schmidt, M.; and Bach, F. 2012. A stochastic gradient method with an exponential convergence rate for finite training sets. In Proc. Adv. Neural Inf. Process. Syst. (NIPS), 2672–2680.\n[Shalev-Shwartz and Zhang 2013] Shalev-Shwartz, S., and Zhang, T. 2013. Stochastic dual coordinate ascent methods for regularized loss minimization. J. Mach. Learn. Res. 14:567–599.\n[Suzuki 2013] Suzuki, T. 2013. Dual averaging and proximal gradient descent for online alternating direction multiplier method. In Proc. 30th Int. Conf. Mach. Learn. (ICML), 392– 400.\n[Suzuki 2014] Suzuki, T. 2014. Stochastic dual coordinate ascent with alternating direction method of multipliers. In Proc. 31st Int. Conf. Mach. Learn. (ICML), 736–744.\n[Tibshirani and Taylor 2011] Tibshirani, R. J., and Taylor, J. 2011. The solution path of the generalized lasso. Annals of Statistics 39(3):1335–1371.\n[Tseng 2010] Tseng, P. 2010. Approximation accuracy, gradient methods, and error bound for structured convex optimization. Math. Program. 125:263–295.\n[Wang and Banerjee 2012] Wang, H., and Banerjee, A. 2012. Online alternating direction method. In Proc. 29th Int. Conf. Mach. Learn. (ICML), 1119–1126.\n[Zhang, Burger, and Osher 2011] Zhang, X.; Burger, M.; and Osher, S. 2011. A unified primal-dual algorithm framework based on Bregman iteration. J. Sci. Comput. 46(1):20–46.\n[Zhao, Li, and Zhou 2015] Zhao, S.-Y.; Li, W.-J.; and Zhou, Z.-H. 2015. Scalable stochastic alternating direction method of multipliers. arXiv:1502.03529v3.\n[Zheng and Kwok 2016] Zheng, S., and Kwok, J. T. 2016. Fast-and-light stochastic admm. In Proc. 25th Int. Joint Conf. Artif. Intell.,, 2407–2613.\n[Zhong and Kwok 2014a] Zhong, L. W., and Kwok, J. T. 2014a. Accelerated stochastic gradient method for composite regularization. In Proc. 17th Int. Conf. Artif. Intell. Statist., 1086–1094.\n[Zhong and Kwok 2014b] Zhong, L. W., and Kwok, J. T. 2014b. Fast stochastic alternating direction method of multipliers. In Proc. 31st Int. Conf. Mach. Learn. (ICML), 46–54.\nSupplementary Materials for “Accelerated Variance Reduced Stochastic ADMM” In this supplementary material, we give the detailed proofs for two important lemmas (i.e., Lemmas 1 and 2), two key theorems (i.e., Theorems 1 and 2) and a proposition (i.e., Proposition 1).\nProof of Lemma 1: Our convergence analysis will use a bound on the variance term E[‖∇̃fIk(xsk−1)−∇f(xsk−1)‖2], as shown in Lemma 1. Before giving the proof of Lemma 1, we first give the following lemma. Lemma 3. Since each fj(x) is convex, Lj-smooth (j=1, . . . , n), then the following holds\n‖∇fik(xsk−1)−∇fik(x̃s−1)‖2 ≤2L [ fik(x̃ s−1)−fik(xsk−1)+〈∇fik(xsk−1), xsk−1−x̃s−1〉 ] ,\n(18)\nwhere ik ∈ [n], and L := maxj Lj .\nProof. This result follows immediately from Theorem 2.1.5 in (Nesterov 2004).\nProof of Lemma 1:\nProof. ∇̃fik(xsk−1)=∇fik(xsk−1)−∇fik(x̃s−1)+∇f(x̃s−1). Taking expectation over the random choice of ik, we have E [∥∥∥∇̃fik(xsk−1)−∇f(xsk−1)∥∥∥2]\n=E [∥∥(∇f(x̃s−1)−∇f(xsk−1))−(∇fik(x̃s−1)−∇fik(xsk−1))∥∥2]\n≤E [∥∥∇fik(xsk−1)−∇fik(x̃s−1)∥∥2]\n≤ 2LE [ fik(x̃ s−1)− fik(xsk−1) + 〈∇fik(xsk−1), xsk−1− x̃s−1〉 ]\n=2L ( f(x̃s−1)− f(xsk−1) + 〈∇f(xsk−1), xsk−1 − x̃s−1〉 ) ,\n(19)\nwhere the first inequality follows from the fact that E[‖E[x] − x‖2] = E[‖x‖2] − ‖E[x]‖2, and the second inequality is due to Lemma 3 given above. Note that the similar result for (19) was also proved in (Allen-Zhu 2016) (see Lemma 3.4 in (Allen-Zhu 2016)). Next, we extend the result to the mini-batch setting.\nLet b be the size of mini-batch Ik. We prove the result of Lemma 1 for the mini-batch case, i.e. b ≥ 2. E [∥∥∥∇̃fIk(xsk−1)−∇f(xsk−1)∥∥∥2]\n=E ∥∥∥∥∥1b∑ i∈Ik ( ∇fi(xsk−1)−∇fi(x̃s−1) ) +∇f(x̃s−1)−∇f(xsk−1) ∥∥∥∥∥ 2 \n= n−b b(n−1)\nE [∥∥∇fi(xsk−1)−∇f(xsk−1)−∇fi(x̃s−1)+∇f(x̃s−1)∥∥2]\n≤2L(n−b) b(n−1)\n( f(x̃s−1)−f(xsk−1)+ 〈 ∇f(xsk−1), xsk−1−x̃s−1 〉) ,\nwhere the second equality follows from Lemma 4 in (Koneeny et al. 2016), and the inequality holds due to the result in (19).\nProof of Lemma 2: Before proving the key Lemma 2, we first give the following a property (Baldassarre and Pontil 2013; Lan 2012), which is useful for the convergence analysis of ASVRG-ADMM.\nProperty 1. Given any w1, w2, w3, w4 ∈ Rd, then we have\n〈w1 − w2, w1 − w3〉 = 1\n2\n( ‖w1 − w2‖2 + ‖w1 − w3‖2 − ‖w2 − w3‖2 ) ,\n〈w1 − w2, w3 − w4〉 = 1\n2\n( ‖w1−w4‖2−‖w1−w3‖2+‖w2−w3‖2−‖w2−w4‖2 ) .\nIn order to prove Lemma 2, we first give and prove the following two key lemmas.\nLemma 4. Since η = 1Lα , 1− θs−1 ≥ δ(b) α−1 , and δ(b) = n−b b(n−1) , then we have\nE [ f(x̃s)− f(x∗)− 〈∇f(x∗), x̃s − x∗〉 − θs−1\nm m∑ k=1 〈 ATϕsk, x ∗ − zsk 〉]\n≤E [ (1−θs−1) ( f(x̃s−1)− f(x∗)− 〈∇f(x∗), x̃s−1 − x∗〉 ) + Lαθ2s−1 2m ( ‖x∗ − zs0‖2 − ‖x∗ − zsm‖2 )] .\nProof. Let gk = 1b ∑ ik∈Ik ( ∇fik(xsk−1)−∇fik(x̃s−1) ) + ∇f(x̃s−1). Since the function f is convex, differentiable with an Lf -Lipschitz-continuous gradient, where Lf ≤ L = maxj=1,...,n Lj , then\nf(xsk) ≤ f(xsk−1) + 〈 ∇f(xsk−1), xsk − xsk−1 〉 + Lα\n2 ∥∥xsk − xsk−1∥∥2 − L(α−1)2 ∥∥xsk − xsk−1∥∥2 = f(xsk−1) + 〈 gk, x s k − xsk−1 〉 + Lα\n2 ‖xsk − xsk−1‖2\n+ 〈 ∇f(xsk−1)− gk, xsk − xsk−1 〉 − L(α−1)\n2 ‖xsk − xsk−1‖2.\n(20)\nUsing Lemma 1, then we get E [〈 ∇f(xsk−1)− gk, xsk − xsk−1 〉 − L(α−1)\n2 ‖xsk − xsk−1‖2 ] ≤E [ 1\n2L(α−1) ‖∇f(xsk−1)− gk‖2 + L(α−1) 2 ‖xsk−xsk−1‖2 − L(α−1) 2 ‖xsk−xsk−1‖2 ] ≤ δ(b) α−1 ( f(x̃s−1)− f(xsk−1) + 〈 ∇f(xsk−1), xsk−1 − x̃s−1 〉) ,\n(21)\nwhere the first inequality holds due to the Young’s inequality, and the second inequality follows from Lemma 1. Taking the expectation over the random choice of Ik and substituting the inequality (21) into the inequality (20), we have\nE[f(xsk)] ≤ f(xsk−1) + E [〈 gk, x s k − xsk−1 〉 + Lα\n2 ‖xsk − xsk−1‖2 ] + δ(b)\nα−1 [ f(x̃s−1)− f(xsk−1) + 〈 ∇f(xsk−1), xsk−1 − x̃s−1 〉] = f(xsk−1) + E [〈 gk, x s k − v∗ + v∗ − xsk−1 〉 + Lα\n2 ‖xsk − xsk−1‖2 ] + δ(b)\nα−1 [ f(x̃s−1)− f(xsk−1) + 〈 ∇f(xsk−1), xsk−1 − x̃s−1 〉] = f(xsk−1) + E [ 〈gk, xsk − v∗〉+ Lα\n2 ‖xsk − xsk−1‖2\n] + δ(b) α− 1 ( f(x̃s−1)− f(xsk−1) ) + 〈 ∇f(xsk−1), v∗−xsk−1+ δ(b)\nα−1 (xsk−1−x̃s−1)\n〉 +E [ 〈−1 b ∑ ik∈Ik ∇fik(x̃s−1)+∇f(x̃s−1), v∗−xsk−1〉 ] ,\n= f(xsk−1) + E [ 〈gk, xsk − v∗〉+ Lα\n2 ‖xsk − xsk−1‖2\n] + δ(b) α−1 ( f(x̃s−1)− f(xsk−1) ) + 〈 ∇f(xsk−1), v∗ − xsk−1 + δ(b)\nα−1 (xsk−1 − x̃s−1)\n〉 ,\n(22)\nwhere v∗=(1 − θs−1)x̃s−1 + θs−1x∗, the second equality holds due to that 〈gk, v∗ − xsk−1〉 = 〈 1b ∑ ik∈Ik∇fik(x s k−1), v\n∗ − xsk−1〉 + 〈− 1b ∑ ik∈Ik∇fik(x̃ s−1) + ∇f(x̃s−1), v∗ − xsk−1〉 and E[ 1b ∑ ik∈Ik∇fik(x s k−1)] = ∇f(xsk−1), and the last equality\nfollows from the fact that E [ 〈− 1b ∑ ik∈Ik∇fik(x̃ s−1) +∇f(x̃s−1), v∗ − xsk−1〉 ] = 0.\nFurthermore, 〈 ∇f(xsk−1), v∗ − xsk−1 + δ(b)\nα−1 (xsk−1 − x̃s−1) 〉 = 〈 ∇f(xsk−1), (1− θs−1)x̃s−1 + θs−1x∗ − xsk−1 + δ(b)\nα−1 (xsk−1 − x̃s−1) 〉 = 〈 ∇f(xsk−1), θs−1x∗ + (1− θs−1 − δ(b)\nα−1 )x̃s−1 +\nδ(b) α−1 xsk−1 − xsk−1 〉 ≤ f ( θs−1x ∗ + (1− θs−1 − δ(b)\nα−1 )x̃s−1 +\nδ(b) α−1 xsk−1\n) − f(xsk−1)\n≤ θs−1f(x∗) + (1− θs−1 − δ(b)\nα−1 )f(x̃s−1) +\nδ(b) α−1 f(xsk−1)− f(xsk−1),\n(23)\nwhere the first inequality holds due to the fact that 〈∇f(x), y − x〉 ≤ f(y) − f(x), and the last inequality follows from the convexity of the function f and the assumption that 1− θs−1 − δ(b)α−1 ≥ 0.\nSubstituting the inequality (23) into the inequality (22), we have E[f(xsk)] ≤ f(xsk−1) + E [ 〈gk, xsk − v∗〉+ Lα\n2 ‖xsk − xsk−1‖2\n] + δ(b) α−1 ( f(x̃s−1)− f(xsk−1) ) + θs−1f(x ∗) + (1− θs−1 − δ(b)\nα−1 )f(x̃s−1) +\nδ(b) α−1 f(xsk−1)− f(xsk−1)\n= θs−1f(x ∗) + (1− θs−1)f(x̃s−1) + E [ 〈gk, xsk − v∗〉+ Lα\n2 ‖xsk − xsk−1‖2\n] .\n(24)\nFrom the optimality condition of (9) with respect to zsk and η = 1 Lα , we have〈\ngk + βA T (Azsk +By s k − c) + βATλsk−1 + Lαθs−1G(zsk − zsk−1), z − zsk\n〉 ≥ 0, for any z ∈ Z,\nwhere Z is a convex compact set. Since xsk = θs−1zsk + (1 − θs−1)x̃s−1 and v∗ = θs−1x∗ + (1 − θs−1)x̃s−1, and the above inequality with z = x∗, we obtain\n〈gk, xsk − v∗〉 = θs−1 〈gk, zsk − x∗〉 ≤βθs−1 〈 AT (Azsk +By s k − b) +ATλsk−1, x∗ − zsk 〉 + Lαθ2s−1 〈 G(zsk − zsk−1), x∗ − zsk 〉 ≤βθs−1 〈 AT (Azsk +By s k − b) +ATλsk−1, x∗ − zsk 〉 + Lαθ2s−1\n2\n( ‖x∗ − zsk−1‖2G − ‖x∗ − zsk‖2G − ‖zsk−1 − zsk‖2G ) ≤βθs−1 〈 ATλsk, x ∗ − zsk 〉 + Lαθ2s−1\n2\n( ‖x∗ − zsk−1‖2G − ‖x∗ − zsk‖2G − ‖zsk−1 − zsk‖2G ) ,\n(25)\nwhere the second inequity follows from Property 1. Using the optimality condition ∇f(x∗) + βATλ∗ = 0 of problem (2) and let ϕsk = β (λ s k − λ∗), then\nθs−1 〈 βATλsk, x ∗ − zsk 〉\n= θs−1 〈∇f(x∗), zsk − x∗〉+ θs−1 〈 βATλ∗, zsk − x∗ 〉 + θs−1 〈 βATλsk, x ∗ − zsk 〉\n= θs−1 〈∇f(x∗), zsk − x∗〉+ θs−1〈ϕsk, x∗ − zsk〉 . Taking the expectation of both sides of (25) over the random choice of Ik, we have\nE[〈gk, xsk − v∗〉] ≤E [ θs−1 〈∇f(x∗), zsk − x∗〉+θs−1 〈 ATϕsk, x ∗− zsk 〉 + Lαθ2s−1\n2\n( ‖x∗− zsk−1‖2G − ‖x∗− zsk‖2G − ‖zsk−1− zsk‖2G )] .\n(26)\nSubstituting the inequality (26) into the inequality (24), and xsk − xsk−1 = (1 − θs−1)x̃s−1 + θs−1zsk − (1 − θs−1)x̃s−1 − θs−1z s k−1 = θs−1(z s k − zsk−1), we obtain\nE [ f(xsk)− f(x∗)− θs−1〈∇f(x∗), zsk − x∗〉 − θs−1〈ATϕsk, x∗ − zsk〉 ] ≤ (1−θs−1)[f(x̃s−1)− f(x∗)] +\nLαθ2s−1 2\nE [ ‖x∗ − zsk−1‖2G − ‖x∗ − zsk‖2G − ‖zsk−1 − zsk‖2G−I ] ≤ (1−θs−1)[f(x̃s−1)− f(x∗)] +\nLαθ2s−1 2\nE [ ‖x∗ − zsk−1‖2G − ‖x∗ − zsk‖2G ] ,\nwhere the last inequality holds due to G I in Algorithms 1 and 2, that is, ‖zsk−1 − zsk‖2G−I ≥ 0. Using the update rule xsk = (1− θs−1)x̃s−1 + θs−1zsk and subtracting (1−θs−1)〈∇f(x∗), x̃s−1 − x∗〉 from both sides, we have\nE [ f(xsk)− f(x∗)− 〈∇f(x∗), xsk − x∗〉 − θs−1〈ATϕsk, x∗ − zsk〉 ] ≤E [ (1−θs−1) ( f(x̃s−1)− f(x∗)− 〈∇f(x∗), x̃s−1 − x∗〉 ) + Lαθ2s−1\n2\n( ‖x∗ − zsk−1‖2G − ‖x∗ − zsk‖2G )] .\n(27)\nSince x̃s = 1m ∑m k=1 x s k, and taking the expectation over the random choice of the history of random variables I1, . . . , Im on\nthe inequality (27), summing it over k = 1, . . . ,m at the s-th stage and f( 1m ∑m k=1 x s k) ≤ 1m ∑m k=1 f(x s k), we have\nE [ f(x̃s)− f(x∗)− 〈∇f(x∗), x̃s − x∗〉 − θs−1\nm m∑ k=1 〈ATϕsk, x∗ − zsk〉\n]\n≤E [ (1−θs−1)(f(x̃s−1)− f(x∗)− 〈∇f(x∗), x̃s−1 − x∗〉) +\nLαθ2s−1 2m\n( ‖x∗ − zs0‖2G − ‖x∗ − zsm‖2G )] .\nThis completes the proof.\nLemma 5. Let ỹs = (1− θs−1)ỹs−1 + θs−1m ∑m k=1 y s k, then\nE [ h(ỹs)− h(y∗)− h′(y∗)T (ỹs − y∗)− θs−1\nm m∑ k=1 〈BTϕsk, y∗ − ysk〉 ] ≤(1− θs−1)E [ h(ỹs−1)− h(y∗)− h′(y∗)T (ỹs−1 − y∗)\n] + βθs−1 2m E [ ‖Azs0 +By∗ − c‖2 − ‖Azsm +By∗ − c‖2 + m∑ k=1 ‖λsk − λsk−1‖2 ] .\nProof. Since λsk = λ s k−1 +Az s k +By s k − c, and using Lemma 3 in (Zheng and Kwok 2016), we obtain\nE [ h(ysk)− h(y∗)− h′(y∗)T (ysk − y∗)− 〈BTϕsk, y∗ − ysk〉 ] ≤ β\n2 E [ ‖Azsk−1 +By∗ − c‖2 − ‖Azsk +By∗ − c‖2 + ‖λsk − λsk−1‖2 ] .\nUsing the update rule ỹs = (1 − θs−1)ỹs−1 + θs−1m ∑m k=1 y s k, h(ỹ s) ≤ (1 − θs−1)h(ỹs−1) + θs−1m ∑m k=1 h(y s k), and taking expectation over whole history and summing the above inequality over k = 1, . . . ,m, we have\nE [ h(ỹs)− h(y∗)− h′(y∗)T (ỹs − y∗)− θs−1\nm m∑ k=1 〈BTϕsk, y∗ − ysk〉\n]\n≤θs−1 m E [ m∑ k=1 ( h(ysk)− h(y∗)− h′(y∗)T (ysk − y∗)− 〈BTϕsk, y∗ − ysk〉 )] + (1− θs−1)E [ h(ỹs−1)− h(y∗)− h′(y∗)T (ỹs−1 − y∗)\n] ≤ βθs−1\n2m E\n[ ‖Azs0 +By∗ − c‖2 − ‖Azsm +By∗ − c‖2 + m∑ k=1 ‖λsk − λsk−1‖2 ]\n+ (1− θs−1)E [ h(ỹs−1)− h(y∗)− h′(y∗)T (ỹs−1 − y∗) ] .\nThis completes the proof.\nProof of Lemma 2:\nProof. Using Lemmas 4 and 5 and the definition of P (x, y), we have\nE [ P (x̃s, ỹs)− θs−1\nm m∑ k=1 ( 〈ATϕsk, x∗ − zsk〉+ 〈BTϕsk, y∗ − ysk〉\n)]\n≤ (1− θs−1)E [ P (x̃s−1, ỹs−1) ] + Lαθ2s−1 2m E [ ‖x∗ − zs0‖2G − ‖x∗ − zsm‖2G ] + βθs−1 2m E [ ‖Azs0 +By∗ − c‖2 − ‖Azsm +By∗ − c‖2 + m∑ k=1 ‖λsk − λsk−1‖2 ]\n=E [ (1−θs−1)P (x̃s−1, ỹs−1) + θ2s−1 ( ‖x∗− zs0‖2G−‖x∗− zsm‖2G ) 2mη ]\n+ βθs−1 2m E\n[ ‖Azs0−Ax∗‖2−‖Azsm−Ax∗‖2+ m∑ k=1 ‖λsk−λsk−1‖2 ] .\nThis completes the proof.\nProof of Theorem 1: Let (x∗, y∗) be an optimal solution of the convex problem (2), and λ∗ the corresponding Lagrange multiplier that maximizes the dual. Then x∗, y∗ and λ∗ satisfy the following Karush-Kuhn-Tucker (KKT) conditions:\nβATλ∗ +∇f(x∗) = 0, βBTλ∗ + h′(y∗) = 0, Ax∗ +By∗ = c.\nBefore giving the proof of Theorem 1, we first present the following lemmas (Zheng and Kwok 2016).\nLemma 6. Let ϕk = β(λk − λ∗), and λk = λk−1 +Axk +Byk − c, then\nE [ −(Axk +Byk − c)Tϕk ] = β 2 E [ ‖λk−1 − λ∗‖2 − ‖λk − λ∗‖2 − ‖λk − λk−1‖2 ] .\nLemma 7. Since the matrix A has full row rank, then\nλ∗ = − 1 β (AT )†∇f(x∗).\nLemma 8. Let λ̃s−1 = λs0 = − 1β (A †)∇f(x̃s−1), and λ∗ = − 1β (A †)∇f(x∗), then\n‖λ̃s−1 − λ∗‖2 ≤ 2Lf β2σmin(AAT )\n( f(x̃s−1)− f(x∗)−∇f(x∗)T (x̃s−1 − x∗) ) .\nProof of Theorem 1:\nProof. Using the update rule λsk = λ s k−1 +Az s k +By s k − c, then\nm∑ k=1 [ 〈ATϕsk, x∗ − zsk〉+ 〈BTϕsk, y∗ − ysk〉+ 〈Azsk +Bysk − c, ϕsk〉 ] = 0,\nwhere ϕsk = β (λ s k − λ∗). Using Lemma 6, we have\n− m∑ k=1 〈Azsk +Bysk − c, ϕsk〉 = β 2 m∑ k=1 ( ‖λsk−1 − λ∗‖2 − ‖λsk − λ∗‖2 − ‖λsk−1 − λsk‖2 ) = β\n2\n( ‖λs0 − λ∗‖2 − ‖λsm − λ∗‖2 − m∑ k=1 ‖λsk−1 − λsk‖2 ) .\nCombining Lemma 2 and the above results with θs−1 = θ at all stages, zs0 = x̃ s−1 and λs0 = λ̃ s−1, we have\nE[P (x̃s, ỹs)]\n≤ (1−θ)E [ P (x̃s−1, ỹs−1) ] + Lαθ2 2m E [ ‖x∗ − x̃s−1‖2G − ‖x∗ − zsm‖2G ] + βθ 2m E [ ‖Ax̃s−1 +By∗ − c‖2 − ‖Azsm +By∗ − c‖2 + ‖λ̃s−1 − λ∗‖2 − ‖λsm − λ∗‖2\n] ≤ (1−θ)E [ P (x̃s−1, ỹs−1) ] + Lαθ2\n2m E [ ‖x∗ − x̃s−1‖2G ] + βθ 2m E [ ‖Ax̃s−1 −Ax∗‖2 + ‖λ̃s−1 − λ∗‖2 ] =(1−θ)E [ P (x̃s−1, ỹs−1) ] + 1 2m E [ ‖x∗ − x̃s−1‖2Lαθ2G+βθATA ] + βθ 2m E [ ‖λ̃s−1 − λ∗‖2\n] ≤ (1−θ)E [ P (x̃s−1, ỹs−1) ] + ‖Lαθ2G+ βθATA‖2\n2m E [ ‖x∗ − x̃s−1‖2 ] + βθ 2m E [ ‖λ̃s−1 − λ∗‖2 ] ≤ (1−θ)E [ P (x̃s−1, ỹs−1) ] + ‖Lαθ2G+βθATA‖2\nmµ\n( f(x̃s−1)− f(x∗)−∇f(x∗)T (x̃s−1− x∗) ) + βθ 2m E [ ‖λ̃s−1− λ∗‖2 ] ,\nwhere the second inequality holds due to the fact that Ax∗ + By∗ − c = 0, and the last inequality follows from the definition of the strongly convex function.\nUsing λ∗ = − 1β (A †)∇f(x∗), the update rule λs0 = − 1β (A †)∇f(x̃s−1), and Lemma 8, we have\n‖λs−1 − λ∗‖2 ≤ 2Lf β2σmin(AAT )\n[ f(x̃s−1)− f(x∗)−∇f(x∗)T (x̃s−1 − x∗) ] .\nCombining the above results, h(ỹs−1)−h(x∗)−h′(y∗)T (ỹs−1− y∗) ≥ 0, η = 1Lα and the definition of P (x, y), then we have\nE[P (x̃s, ỹs)] ≤ ( 1− θ + ‖Lαθ\n2G+ βθATA‖2 mµ + Lfθ βmσmin(AAT )\n) E [ P (x̃s−1, ỹs−1) ] = ( 1− θ + ‖θ\n2G+ ηβθATA‖2 ηmµ + Lfθ βmσmin(AAT )\n) E [ P (x̃s−1, ỹs−1) ] .\nThis completes the proof.\nProof of Proposition 1: Proof. Since\nG = γId1 − ηβ∗ATA\nθ , γ = ηβ∗‖ATA‖2 θ + 1, and β∗ ≡\n√ Lfµ\n‖ATA‖2σmin(AAT ) ,\nthen the rate ρ in Theorem 1 is rewritten as follows:\nρ(θ) = θ‖θG+ηβ∗ATA‖2\nηmµ + 1− θ + Lfθ β∗mσmin(AAT )\n= θ(ηβ∗‖ATA‖2 + θ)/(ηmµ) + 1− θ + Lfθ √ ‖ATA‖2/σmin(AAT ) m √ Lfµ\n= (θ2/η + β∗θ‖ATA‖2)/(mµ) + 1− θ + θ √ Lf/µ √ ω\nm\n= καθ2\nm +\n2θ √ κfω\nm + 1− θ,\n(28)\nwhere α = 1Lη . Therefore, the rate ρ can be expressed as a simple convex function with respect to θ by fixing other variable. To minimize the quadratic function ρ with respect to θ, then we have\nθ∗ = m− 2√κfω\n2κα .\nRecall from the body of this paper that α = m−2 √ κfω\n2κ + δ(b) + 1. Then it is not difficult to verify that\nθ∗ = m− 2√κfω\n2κα = m− 2√κfω [(m− 2√κfω) + 2κ(δ(b) + 1)]\n≤ m− 2√κfω\n[(m− 2√κfω) + 2κδ(b)] = 1− δ(b) [(m− 2√κfω)/(2κ) + δ(b)]\n= 1− δ(b) α− 1 .\nBy the above result, we have\nθ∗ = m− 2√κfω\n2κα = m− 2√κfω m− 2√κfω + 2κ(δ(b) + 1) . (29)\nIt is not difficult to verify that 0 < ρ(θ∗) < 1 is satisfied. Thus, θ∗ is the optimal solution of (28) with α = m−2 √ κfω\n2κ +δ(b)+1. This proof is completed.\nProof of Theorem 2: Before giving the proof of Theorem 2, we first present the following lemma (Zheng and Kwok 2016).\nLemma 9. Let ϕk = β(λk − λ∗) and any ϕ = βλ, and λk = λk−1 +Axk +Byk − c, then\nE [ −(Axk +Byk − c)T (ϕk − ϕ) ] = β 2 E [ ‖λk−1 − λ∗ − λ‖2 − ‖λk − λ∗ − λ‖2 − ‖λk − λk−1‖2 ] .\nProof of Theorem 2:\nProof. For any ϕ = βλ, we have m∑ k=1 ( 〈ATϕsk, x∗ − zsk〉+ 〈BTϕsk, y∗ − ysk〉+ 〈Azsk +Bysk − c, ϕsk − ϕ〉 ) = − m∑ k=1 〈Azsk +Bysk − c, ϕ〉,\nwhere ϕsk = β (λ s k − λ∗). Using Lemma 9, we have\n− m∑ k=1 〈Azsk +Bysk − c, ϕsk − ϕ〉 = β 2 m∑ k=1 ( ‖λsk−1 − λ∗ − λ‖2 − ‖λsk − λ∗ − λ‖2 − ‖λsk−1 − λsk‖2 ) = β\n2\n( ‖λs0 − λ∗ − λ‖2 − ‖λsm − λ∗ − λ‖2 − m∑ k=1 ‖λsk−1 − λsk‖2 ) .\nCombining the above results and Lemma 2, we have\nE [ P (x̃s, ỹs)− θs−1\nm m∑ k=1 〈Azsk +Bysk − c, ϕ〉\n]\n≤ (1−θs−1)E [ P (x̃s−1, ỹs−1) ] + Lαθ2s−1 2m E [ ‖x∗ − zs0‖2G − ‖x∗ − zsm‖2G ] + βθs−1 2m E [ ‖Azs0 +By∗ − c‖2 − ‖Azsm +By∗ − c‖2 + ‖λs0 − λ∗ − λ‖2 − ‖λsm − λ∗ − λ‖2 ] .\n(30)\nUsing the update rule of x̃s = 1m ∑m k=1 x s k, we have\nx̃s = 1\nm m∑ k=1 xsk = 1 m m∑ k=1 ( θs−1z s k + (1− θs−1)x̃s−1 ) = (1− θs−1)x̃s−1 + θs−1 m m∑ k=1 zsk.\nRecall that\nỹs = (1− θs−1)ỹs−1 + θs−1 m m∑ k=1 ysk.\nSubtracting (1−θs−1)〈Ax̃s−1 +Bỹs−1 − c, ϕ〉 and dividing both sides by θ2s−1, we have 1\nθ2s−1 E[P (x̃s, ỹs)− 〈Ax̃s +Bỹs − c, ϕ〉]\n≤ (1−θs−1) θ2s−1\nE [ P (x̃s−1, ỹs−1)− 〈Ax̃s−1 +Bỹs−1 − c, ϕ〉 ] + Lα 2m E [ ‖x∗ − zs0‖2G − ‖x∗ − zsm‖2G ] + β\n2mθs−1 E [ ‖Azs0 +By∗ − c‖2 − ‖Azsm +By∗ − c‖2 + ‖λs0 − λ∗ − λ‖2 − ‖λsm − λ∗ − λ‖2 ] .\n(31)\nBy the update rule in (12), we have (1 − θs)/θ2s = 1/θ2s−1. Since zs0 = zs−1m , z̃0 = x̃0, and summing over all stages (s = 1, · · · , T ), we have\n1 θ2T−1 E [ P (x̃T, ỹT )− 〈Ax̃T +BỹT − c, ϕ〉 ] ≤ (1−θ0)\nθ20 E [ P (x̃0, ỹ0)− 〈Ax̃0 +Bỹ0 − c, ϕ〉 ] + Lα 2m E [ ‖x∗ − x̃0‖2G − ‖x∗ − z0m‖2G ] +\nT∑ s=1\nβ 2mθs−1 E [ ‖Azs0 −Ax̃∗‖2 − ‖Azsm −Ax̃∗‖2 + ‖λs0 − λ∗ − λ‖2 − ‖λsm − λ∗ − λ‖2 ] .\n(32)\nSince (1− θs)/θ2s = 1/θ2s−1, then\n0 ≤ 1 θs − 1 θs−1 ≤ 1 θs − √ 1− θs θs = 1 1 + √ 1− θs < 1.\nUsing zs0 = z s−1 m and λ s 0 = λ s−1 m , we have\nT∑ s=1\nβ 2mθs−1 E [ ‖Azs0 −Ax̃∗‖2 − ‖Azsm −Ax̃∗‖2 + ‖λs0 − λ∗ − λ‖2 − ‖λsm − λ∗ − λ‖2 ] ≤E [ β(1− θ0) 2mθ0 (‖Az10 −Ax̃∗‖2 + ‖λ10 − λ∗ − λ‖2) + β 2m T∑ s=1 ( ‖Azs0 −Ax̃∗‖2 + ‖λs0 − λ∗ − λ‖2 )]\n≤β(T − 1 + 1/θ0) 2m\nE [ ‖ATA‖2D2Z + 4D2λ ] ,\n(33)\nwhere the first inequality follows from that 1/θs − 1/θs−1 < 1, z10 = x̃0 and λ10 = λ̃0, and the last inequality holds due to that ‖Azs0 −Ax̃∗‖2 ≤ ‖ATA‖2D2Z and ‖λs0 − λ∗ − λ‖ ≤ ‖λs0 − λ∗‖+ ‖λ‖ ≤ 2Dλ.\nBy (32) and (33) with θs ≤ 2/(s+ 2) for all s, we have E [ P (x̃T, ỹT )− 〈Ax̃T +BỹT − c, ϕ〉 ] ≤ 4τ\n(T+1)2 ( P (x̃0, ỹ0)− 〈Ax̃0 +Bỹ0 − c, ϕ〉 ) +\n2Lα\nm(T+1)2 ‖x∗ − x̃0‖2G + 2β(T−1+1/θ0) m(T+1)2\n( ‖ATA‖2D2Z + 4D2λ ) ,\n≤ 4τ (T+1)2\n( P (x̃0, ỹ0)− 〈Ax̃0 +Bỹ0 − c, ϕ〉 ) +\n2Lα\nm(T+1)2 ‖x∗ − x̃0‖2G +\n2β\nm(T+1)\n( ‖ATA‖2D2Z + 4D2λ ) ,\nwhere θ0 = 1 − δ(b)α−1 and τ = (1 − θ0)/θ 2 0 = (α−1)δ(b) (α−1−δ(b))2 . Setting ϕ = γ Ax̃T+BỹT−c ‖Ax̃T+BỹT−c‖ with γ ≤ βDλ such that ‖λ‖ = ‖ϕ/β‖ ≤ Dλ, and −〈Ax̃0 +Bỹ0 − c, ϕ〉 ≤ ‖ϕ‖‖Ax̃0 +Bỹ0 − c‖ ≤ γ‖Ax̃0 +Bỹ0 − c‖, we have\nE [ P (x̃T, ỹT ) + γ‖Ax̃T +BỹT − c‖ ] ≤ 4(α− 1)δ(b)\n(α− 1− δ(b))2(T + 1)2 ( P (x̃0, ỹ0) + γ‖Ax̃0 +Bỹ0 − c‖ ) +\n2Lα\nm(T + 1)2 ‖x∗ − x̃0‖2G\n+ 2β\nm(T + 1)\n( ‖ATA‖2D2Z + 4D2λ ) .\nThis completes the proof."
    } ],
    "references" : [ {
      "title" : "Towards an optimal stochastic alternating direction method of multipliers",
      "author" : [ "Azadi", "S. Sra 2014] Azadi", "S. Sra" ],
      "venue" : "In Proc. 31st Int. Conf. Mach. Learn. (ICML),",
      "citeRegEx" : "Azadi et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Azadi et al\\.",
      "year" : 2014
    }, {
      "title" : "Advanced topics in machine learning part II: 5. Proximal methods. University Lecture",
      "author" : [ "Baldassarre", "L. Pontil 2013] Baldassarre", "M. Pontil" ],
      "venue" : null,
      "citeRegEx" : "Baldassarre et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Baldassarre et al\\.",
      "year" : 2013
    }, {
      "title" : "Model selection through sparse maximum likelihood estimation for multivariate gaussian or binary data",
      "author" : [ "Ghaoui Banerjee", "O. d’Aspremont 2008] Banerjee", "L.E. Ghaoui", "A. d’Aspremont" ],
      "venue" : "J. Mach. Learn. Res",
      "citeRegEx" : "Banerjee et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Banerjee et al\\.",
      "year" : 2008
    }, {
      "title" : "A fast iterative shrinkage-thresholding algorithm for linear inverse problems",
      "author" : [ "Beck", "A. Teboulle 2009] Beck", "M. Teboulle" ],
      "venue" : "SIAM J. Imaging Sci",
      "citeRegEx" : "Beck et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Beck et al\\.",
      "year" : 2009
    }, {
      "title" : "Distributed optimization and statistical learning via the alternating direction method of multipliers",
      "author" : [ "Boyd" ],
      "venue" : null,
      "citeRegEx" : "Boyd,? \\Q2011\\E",
      "shortCiteRegEx" : "Boyd",
      "year" : 2011
    }, {
      "title" : "On the global and linear convergence of the generalized alternating direction method of multipliers",
      "author" : [ "Deng", "W. Yin 2016] Deng", "W. Yin" ],
      "venue" : "J. Sci. Comput",
      "citeRegEx" : "Deng et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Deng et al\\.",
      "year" : 2016
    }, {
      "title" : "Fast alternating direction optimization methods",
      "author" : [ "Goldstein" ],
      "venue" : "SIAM J. Imaging Sciences",
      "citeRegEx" : "Goldstein,? \\Q2014\\E",
      "shortCiteRegEx" : "Goldstein",
      "year" : 2014
    }, {
      "title" : "Accelerated stochastic mirror descent algorithms for composite non-strongly convex optimization. arXiv:1605.06892v2",
      "author" : [ "Hien" ],
      "venue" : null,
      "citeRegEx" : "Hien,? \\Q2016\\E",
      "shortCiteRegEx" : "Hien",
      "year" : 2016
    }, {
      "title" : "Accelerating stochastic gradient descent using predictive variance reduction",
      "author" : [ "Johnson", "R. Zhang 2013] Johnson", "T. Zhang" ],
      "venue" : "In Proc. Adv. Neural Inf. Process. Syst. (NIPS),",
      "citeRegEx" : "Johnson et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Johnson et al\\.",
      "year" : 2013
    }, {
      "title" : "A multivariate regression approach to association analysis of a quantitative trait network. Bioinformatics 25:i204–i212",
      "author" : [ "Sohn Kim", "S. Xing 2009] Kim", "K.A. Sohn", "E.P. Xing" ],
      "venue" : null,
      "citeRegEx" : "Kim et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Kim et al\\.",
      "year" : 2009
    }, {
      "title" : "2016. Mini-batch semi-stochastic gradient descent in the proximal setting",
      "author" : [ "Koneeny" ],
      "venue" : "IEEE J. Sel. Top. Sign. Proces",
      "citeRegEx" : "Koneeny,? \\Q2016\\E",
      "shortCiteRegEx" : "Koneeny",
      "year" : 2016
    }, {
      "title" : "An optimal method for stochastic composite optimization",
      "author" : [ "G. Lan 2012] Lan" ],
      "venue" : "Math. Program",
      "citeRegEx" : "Lan,? \\Q2012\\E",
      "shortCiteRegEx" : "Lan",
      "year" : 2012
    }, {
      "title" : "Fast proximal linearized alternating direction method of multiplier with parallel splitting",
      "author" : [ "Lu" ],
      "venue" : "In Proc. 30th AAAI Conf. Artif. Intell.,",
      "citeRegEx" : "Lu,? \\Q2016\\E",
      "shortCiteRegEx" : "Lu",
      "year" : 2016
    }, {
      "title" : "Linear time solver for primal svm",
      "author" : [ "Nie" ],
      "venue" : "In Proc. 31st Int. Conf. Mach. Learn. (ICML),",
      "citeRegEx" : "Nie,? \\Q2014\\E",
      "shortCiteRegEx" : "Nie",
      "year" : 2014
    }, {
      "title" : "A general analysis of the convergence of ADMM",
      "author" : [ "Nishihara" ],
      "venue" : "In Proc. 32nd Int. Conf. Mach. Learn. (ICML),",
      "citeRegEx" : "Nishihara,? \\Q2015\\E",
      "shortCiteRegEx" : "Nishihara",
      "year" : 2015
    }, {
      "title" : "Stochastic alternating direction method of multipliers",
      "author" : [ "Ouyang" ],
      "venue" : "In Proc. 30th Int. Conf. Mach. Learn. (ICML),",
      "citeRegEx" : "Ouyang,? \\Q2013\\E",
      "shortCiteRegEx" : "Ouyang",
      "year" : 2013
    }, {
      "title" : "Piecewise linear regularized solution paths",
      "author" : [ "Rosset", "S. Zhu 2007] Rosset", "J. Zhu" ],
      "venue" : null,
      "citeRegEx" : "Rosset et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Rosset et al\\.",
      "year" : 2007
    }, {
      "title" : "A stochastic gradient method with an exponential convergence rate for finite training sets",
      "author" : [ "Schmidt Roux", "N.L. Bach 2012] Roux", "M. Schmidt", "F. Bach" ],
      "venue" : "In Proc. Adv. Neural Inf. Process. Syst. (NIPS),",
      "citeRegEx" : "Roux et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Roux et al\\.",
      "year" : 2012
    }, {
      "title" : "Stochastic dual coordinate ascent methods for regularized loss minimization",
      "author" : [ "Shalev-Shwartz", "S. Zhang 2013] Shalev-Shwartz", "T. Zhang" ],
      "venue" : "J. Mach. Learn. Res",
      "citeRegEx" : "Shalev.Shwartz et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Shalev.Shwartz et al\\.",
      "year" : 2013
    }, {
      "title" : "The solution path of the generalized lasso",
      "author" : [ "Tibshirani", "R.J. Taylor 2011] Tibshirani", "J. Taylor" ],
      "venue" : "Annals of Statistics",
      "citeRegEx" : "Tibshirani et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Tibshirani et al\\.",
      "year" : 2011
    }, {
      "title" : "Online alternating direction method",
      "author" : [ "Wang", "H. Banerjee 2012] Wang", "A. Banerjee" ],
      "venue" : "In Proc. 29th Int. Conf. Mach. Learn. (ICML),",
      "citeRegEx" : "Wang et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2012
    }, {
      "title" : "A unified primal-dual algorithm framework based on Bregman iteration",
      "author" : [ "Burger Zhang", "X. Osher 2011] Zhang", "M. Burger", "S. Osher" ],
      "venue" : "J. Sci. Comput",
      "citeRegEx" : "Zhang et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Zhang et al\\.",
      "year" : 2011
    }, {
      "title" : "Scalable stochastic alternating direction method of multipliers. arXiv:1502.03529v3",
      "author" : [ "Li Zhao", "S.-Y. Zhou 2015] Zhao", "W.-J. Li", "Z.-H. Zhou" ],
      "venue" : null,
      "citeRegEx" : "Zhao et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Zhao et al\\.",
      "year" : 2015
    }, {
      "title" : "Fast-and-light stochastic admm",
      "author" : [ "Zheng", "S. Kwok 2016] Zheng", "J.T. Kwok" ],
      "venue" : "In Proc. 25th Int. Joint Conf. Artif. Intell.,,",
      "citeRegEx" : "Zheng et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Zheng et al\\.",
      "year" : 2016
    }, {
      "title" : "Accelerated stochastic gradient method for composite regularization",
      "author" : [ "Zhong", "L.W. Kwok 2014a] Zhong", "J.T. Kwok" ],
      "venue" : "In Proc. 17th Int. Conf. Artif. Intell. Statist.,",
      "citeRegEx" : "Zhong et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Zhong et al\\.",
      "year" : 2014
    }, {
      "title" : "Fast stochastic alternating direction method of multipliers",
      "author" : [ "Zhong", "L.W. Kwok 2014b] Zhong", "J.T. Kwok" ],
      "venue" : "In Proc. 31st Int. Conf. Mach. Learn. (ICML),",
      "citeRegEx" : "Zhong et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Zhong et al\\.",
      "year" : 2014
    } ],
    "referenceMentions" : [ {
      "referenceID" : 4,
      "context" : "the ADMM is an effective optimization tool (Boyd et al. 2011), and has shown attractive performance in a wide range of real-world problems, such as big data classification (Nie et al. 2014). To tackle the issue of high periteration complexity of batch (deterministic) ADMM (as a popular first-order optimization method), Wang and Banerjee (2012), Suzuki (2013) and Ouyang et al.",
      "startOffset" : 44,
      "endOffset" : 346
    }, {
      "referenceID" : 4,
      "context" : "the ADMM is an effective optimization tool (Boyd et al. 2011), and has shown attractive performance in a wide range of real-world problems, such as big data classification (Nie et al. 2014). To tackle the issue of high periteration complexity of batch (deterministic) ADMM (as a popular first-order optimization method), Wang and Banerjee (2012), Suzuki (2013) and Ouyang et al.",
      "startOffset" : 44,
      "endOffset" : 361
    }, {
      "referenceID" : 4,
      "context" : "the ADMM is an effective optimization tool (Boyd et al. 2011), and has shown attractive performance in a wide range of real-world problems, such as big data classification (Nie et al. 2014). To tackle the issue of high periteration complexity of batch (deterministic) ADMM (as a popular first-order optimization method), Wang and Banerjee (2012), Suzuki (2013) and Ouyang et al. (2013) proposed some online or stochastic ADMM algorithms.",
      "startOffset" : 44,
      "endOffset" : 386
    } ],
    "year" : 2017,
    "abstractText" : "Recently, many variance reduced stochastic alternating direction method of multipliers (ADMM) methods (e.g. SAGADMM, SDCA-ADMM and SVRG-ADMM) have made exciting progress such as linear convergence rates for strongly convex problems. However, the best known convergence rate for general convex problems is O(1/T ) as opposed to O(1/T ) of accelerated batch algorithms, where T is the number of iterations. Thus, there still remains a gap in convergence rates between existing stochastic ADMM and batch algorithms. To bridge this gap, we introduce the momentum acceleration trick for batch optimization into the stochastic variance reduced gradient based ADMM (SVRG-ADMM), which leads to an accelerated (ASVRG-ADMM) method. Then we design two different momentum term update rules for strongly convex and general convex cases. We prove that ASVRG-ADMM converges linearly for strongly convex problems. Besides having a low per-iteration complexity as existing stochastic ADMM methods, ASVRG-ADMM improves the convergence rate on general convex problems from O(1/T ) to O(1/T ). Our experimental results show the effectiveness of ASVRG-ADMM. Introduction In this paper, we consider a class of composite convex optimization problems min x∈Rd1 f(x) + h(Ax), (1) where A∈Rd2×d1 is a given matrix, f(x) := 1 n ∑n i=1fi(x), each fi(x) is a convex function, and h(Ax) is convex but possibly non-smooth. With regard to h(·), we are interested in a sparsity-inducing regularizer, e.g. `1-norm, group Lasso and nuclear norm. When A is an identity matrix, i.e. A = Id1 , the above formulation (1) arises in many places in machine learning, statistics, and operations research (Bubeck 2015), such as logistic regression, Lasso and support vector machine (SVM). We mainly focus on the large sample regime. In this regime, even first-order batch methods, e.g. FISTA (Beck and Teboulle 2009), become computationally burdensome due to their per-iteration complexity of O(nd1). As a result, stochastic gradient descent (SGD) with per-iteration complexity of O(d1) has Copyright c © 2017, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved. witnessed tremendous progress in the recent years. Especially, a number of stochastic variance reduced gradient methods such as SAG (Roux, Schmidt, and Bach 2012), SDCA (Shalev-Shwartz and Zhang 2013) and SVRG (Johnson and Zhang 2013) have been proposed to successfully address the problem of high variance of the gradient estimate in ordinary SGD, resulting in a linear convergence rate (for strongly convex problems) as opposed to sub-linear rates of SGD. More recently, the Nesterov’s acceleration technique (Nesterov 2004) was introduced in (Allen-Zhu 2016; Hien et al. 2016) to further speed up the stochastic variancereduced algorithms, which results in the best known convergence rates for both strongly convex and general convex problems. This motivates us to integrate the momentum acceleration trick into the stochastic alternating direction method of multipliers (ADMM) below. When A is a more general matrix, i.e. A 6=Id1 , the formulation (1) becomes many more complicated problems arising from machine learning, e.g. graph-guided fuzed Lasso (Kim, Sohn, and Xing 2009) and generalized Lasso (Tibshirani and Taylor 2011). To solve this class of composite optimization problems with an auxiliary variable y = Ax, which are the special case of the general ADMM form, min x∈Rd1,y∈Rd2 f(x) + h(y), s.t. Ax+By = c, (2) the ADMM is an effective optimization tool (Boyd et al. 2011), and has shown attractive performance in a wide range of real-world problems, such as big data classification (Nie et al. 2014). To tackle the issue of high periteration complexity of batch (deterministic) ADMM (as a popular first-order optimization method), Wang and Banerjee (2012), Suzuki (2013) and Ouyang et al. (2013) proposed some online or stochastic ADMM algorithms. However, all these variants only achieve the convergence rate of O(1/ √ T ) for general convex problems and O(log T/T ) for strongly convex problems, respectively, as compared with the O(1/T ) and linear convergence rates of accelerated batch algorithms (Nesterov 1983), e.g. FISTA, where T is the number of iterations. By now several accelerated and faster converging versions of stochastic ADMM, which are all based on variance reduction techniques, have been proposed, e.g. SAG-ADMM (Zhong and Kwok 2014b), SDCA-ADMM (Suzuki 2014) and SVRG-ADMM (Zheng and Kwok 2016). With regard to strongly convex problems, ar X iv :1 70 7. 03 19 0v 1 [ cs .L G ] 1 1 Ju l 2 01 7 Table 1: Comparison of convergence rates and memory requirements of some stochastic ADMM algorithms. General convex Strongly-convex Space requirement SAG-ADMM O(1/T ) unknown O(d1d2+nd1) SDCA-ADMM unknown linear rate O(d1d2+n) SCAS-ADMM O(1/T ) O(1/T ) O(d1d2) SVRG-ADMM O(1/T ) linear rate O(d1d2) ASVRG-ADMM O(1/T ) linear rate O(d1d2) Suzuki (2014) and Zheng and Kwok (2016) proved that linear convergence can be obtained for the special ADMM form (i.e. B = −Id2 and c = 0) and the general ADMM form, respectively. In SAG-ADMM and SVRG-ADMM, an O(1/T ) convergence rate can be guaranteed for general convex problems, which implies that there still remains a gap in convergence rates between the stochastic ADMM and accelerated batch algorithms. To bridge this gap, we integrate the momentum acceleration trick in (Tseng 2010) for deterministic optimization into the stochastic variance reduction gradient (SVRG) based stochastic ADMM (SVRG-ADMM). Naturally, the proposed method has low per-iteration time complexity as existing stochastic ADMM algorithms, and does not require the storage of all gradients (or dual variables) as in SCAS-ADMM (Zhao, Li, and Zhou 2015) and SVRGADMM (Zheng and Kwok 2016), as shown in Table 1. We summarize our main contributions below. • We propose an accelerated variance reduced stochastic ADMM (ASVRG-ADMM) method, which integrates both the momentum acceleration trick in (Tseng 2010) for batch optimization and the variance reduction technique of SVRG (Johnson and Zhang 2013). • We prove that ASVRG-ADMM achieves a linear convergence rate for strongly convex problems, which is consistent with the best known result in SDCA-ADMM (Suzuki 2014) and SVRG-ADMM (Zheng and Kwok 2016). • We also prove that ASVRG-ADMM has a convergence rate of O(1/T ) for non-strongly convex problems, which is a factor of T faster than SAG-ADMM and SVRG-ADMM, whose convergence rates are O(1/T ). • Our experimental results further verified that our ASVRG-ADMM method has much better performance than the state-of-the-art stochastic ADMM methods. Related Work Introducing y = Ax ∈R2 , problem (1) becomes min x∈Rd1,y∈Rd2 f(x) + h(y), s.t. Ax− y = 0. (3) Although (3) is only a special case of the general ADMM form (2), when B = −Id2 and c = 0, the stochastic (or online) ADMM algorithms and theoretical results in (Wang and Banerjee 2012; Ouyang et al. 2013; Zhong and Kwok 2014b; Zheng and Kwok 2016) and this paper are all for the more general problem (2). To minimize (2), together with the dual variable λ, the update steps of batch ADMM are yk = argminy h(y) + β 2 ‖Axk−1+By−c+λk−1‖ , (4) xk = argminx f(x) + β 2 ‖Ax+Byk−c+λk−1‖ , (5) λk = λk−1 +Axk +Byk − c, (6) where β>0 is a penalty parameter. To extend the batch ADMM to the online and stochastic settings, the update steps for yk and λk remain unchanged. In (Wang and Banerjee 2012; Ouyang et al. 2013), the update step of xk is approximated as follows: xk = argmin x x∇fik(xk−1) + 1 2ηk ‖x− xk−1‖G + β 2 ‖Ax+Byk−c+λk−1‖, (7) where we draw ik uniformly at random from [n] := {1, . . . , n}, ηk ∝ 1/ √ k is the step-size, and ‖z‖G = zGz with given positive semi-definite matrix G, e.g. G = Id1 in (Ouyang et al. 2013). Analogous to SGD, the stochastic ADMM variants use an unbiased estimate of the gradient at each iteration. However, all those algorithms have much slower convergence rates than their batch counterpart, as mentioned above. This barrier is mainly due to the variance introduced by the stochasticity of the gradients. Besides, to guarantee convergence, they employ a decaying sequence of step sizes ηk, which in turn impacts the rates. More recently, a number of variance reduced stochastic ADMM methods (e.g. SAG-ADMM, SDCA-ADMM and SVRG-ADMM) have been proposed and made exciting progress such as linear convergence rates. SVRG-ADMM in (Zheng and Kwok 2016) is particularly attractive here because of its low storage requirement compared with the algorithms in (Zhong and Kwok 2014b; Suzuki 2014). Within each epoch of SVRG-ADMM, the full gradient p̃ =∇f(x̃) is first computed, where x̃ is the average point of the previous epoch. Then ∇fik(xk−1) and ηk in (7) are replaced by ∇̃fIk(xk−1) = 1 |Ik| ∑ ik∈Ik (∇fik(xk−1)−∇fik(x̃)) + p̃ (8) and a constant step-size η, respectively, where Ik ⊂ [n] is a mini-batch of size b (which is a useful technique to reduce the variance). In fact, ∇̃fIk(xk−1) is an unbiased estimator of the gradient ∇f(xk−1), i.e. E[∇̃fIk(xk−1)]=∇f(xk−1). Accelerated Variance Reduced Stochastic ADMM In this section, we design an accelerated variance reduced stochastic ADMM method for both strongly convex and general convex problems. We first make the following assumptions: Each convex fi(·) is Li-smooth, i.e. there exists a constant Li>0 such that ‖∇fi(x)−∇fi(y)‖≤Li‖x−y‖, ∀x, y ∈ R, and L , maxi Li; f(·) is μ-strongly convex, i.e. there is μ > 0 such that f(x) ≥ f(y) +∇f(y)(x− y)+ μ2 ‖x−y‖ 2 for all x, y ∈R; The matrix A has full row rank. The first two assumptions are common in the analysis of first-order optimization methods, while the last one has Algorithm 1 ASVRG-ADMM for strongly-convex case Input: m, η, β > 0, 1 ≤ b ≤ n. Initialize: x̃= z̃, ỹ, θ, λ̃=− 1 β (A T )∇f(x̃0). 1: for s = 1, 2, . . . , T do 2: x0 = z s 0 = x̃ s−1, y 0 = ỹ s−1, λ0 = λ̃ s−1; 3: p̃ = ∇f(x̃s−1); 4: for k = 1, 2, . . . ,m do 5: Choose Ik⊆ [n]of size b, uniformly at random; 6: y k=argminy h(y)+ β 2 ‖Az s k−1+By− c+λk−1‖; 7: z k=z s k−1− η(∇̃fIk(x s k−1)+βA (Az k−1+By s k−c+λ s k−1)) γθ ; 8: xk=(1− θ)x̃s−1 + θz k; 9: λk=λ s k−1 +Az s k +By s k − c; 10: end for 11: x̃= 1 m ∑m k=1x s k, ỹ s=(1−θ)ỹs−1+ θ m ∑m k=1y s k, 12: λ̃=− 1 β (A T )†∇f(x̃s); 13: end for Output: x̃ , ỹ . been used in the convergence analysis of batch ADMM (?; Nishihara et al. 2015; Deng and Yin 2016) and stochastic ADMM (Zheng and Kwok 2016). The Strongly Convex Case In this part, we consider the case of (2) when each fi(·) is convex,L-smooth, and f(·) is μ-strongly convex. Recall that this class of problems include graph-guided Logistic Regression and SVM as notable examples. To efficiently solve this class of problems, we incorporate both the momentum acceleration and variance reduction techniques into stochastic ADMM. Our algorithm is divided into T epochs, and each epoch consists of m stochastic updates, where m is usually chosen to be O(n) as in (Johnson and Zhang 2013). Let z be an important auxiliary variable, its update rule is given as follows. Similar to (Zhong and Kwok 2014b; Zheng and Kwok 2016), we also use the inexact Uzawa method (Zhang, Burger, and Osher 2011) to approximate the sub-problem (7), which can avoid computing the inverse of the matrix ( 1 η Id1+βA A). Moreover, the momentum weight 0≤ θs ≤ 1 (the update rule for θs is provided below) is introduced into the proximal term 1 2η‖x−xk−1‖ 2 G similar to that of (7), and then the sub-problem with respect to z is formulated as follows: min z (z −z k−1) ∇̃fIk(xk−1)+ θs−1 2η ‖z −z k−1‖G + β 2 ‖Az +By k − c+ λk−1‖, (9) where ∇̃fIk(xk−1) is defined in (8), η < 1 2L , and G = γId1− ηβ θs−1 AA with γ ≥ γmin ≡ ηβ‖A A‖2 θs−1 +1 to ensure that G I similar to (Zheng and Kwok 2016), where ‖·‖2 is the spectral norm, i.e. the largest singular value of the matrix. Furthermore, the update rule for x is given by xk= x̃ +θs−1(z s k− x̃)=(1−θs−1)x̃+θs−1z k, (10) where θs−1(z k − x̃s−1) is the key momentum term (similar to those in accelerated batch methods (Nesterov 2004)), which helps accelerate our algorithm by using the iterate of the previous epoch, i.e. x̃s−1. Similar to xk, ỹ s = (1− θs−1)ỹ s−1+ θs−1 m ∑m k=1y s k. Moreover, θs can be set to a constant θ in all epochs of our algorithm, which must satisfy 0 ≤ θ ≤ 1− δ(b)/(α−1), where α = 1 Lη > 1+ δ(b), and δ(b) is defined below. The optimal value of θ is provided in Proposition 1 below. The detailed procedure is shown in Algorithm 1, where we adopt the same initialization technique for λ̃ as in (Zheng and Kwok 2016), and (·)† is the pseudo-inverse. Note that, when θ=1, ASVRG-ADMM degenerates to SVRG-ADMM in (Zheng and Kwok 2016). The Non-Strongly Convex Case In this part, we consider general convex problems of the form (2) when each fi(·) is convex, L-smooth, and h(·) is not necessarily strongly convex (but possibly non-smooth). Different from the strongly convex case, the momentum weight θs is required to satisfy the following inequalities: 1− θs θ2 s ≤ 1 θ2 s−1 and 0 ≤ θs ≤ 1− δ(b) α− 1 , (11) where δ(b) := n−b b(n−1) is a decreasing function with respect to the mini-batch size b. The condition (20) allows the momentum weight to decease, but not too fast, similar to the requirement on the step-size ηk in classical SGD and stochastic ADMM (?). Unlike batch acceleration methods, the weight must satisfy both inequalities in (20). Motivated by the momentum acceleration techniques in (Tseng 2010; Nesterov 2004) for batch optimization, we give the update rule of the weight θs for the mini-batch case: θs = √ θ4 s−1+ 4θ 2 s−1 − θ s−1 2 and θ0 = 1− δ(b) α− 1 . (12) For the special case of b = 1, we have δ(1) = 1 and θ0 = 1− 1 α−1 , while b=n (i.e. batch version), δ(n)=0 and θ0= 1. Since {θs} is decreasing, then θs ≤ 1− δ(b) α−1 is satisfied. The detailed procedure is shown in Algorithm 2, which has many slight differences in the initialization and output of each epoch from Algorithm 1. In addition, the key difference between them is the update rule for the momentum weight θs. That is, θs in Algorithm 1 can be set to a constant, while that in Algorithm 2 is adaptively adjusted as in (12). Convergence Analysis This section provides the convergence analysis of our ASVRG-ADMM algorithms (i.e. Algorithms 1 and 2) for strongly convex and general convex problems, respectively. Following (Zheng and Kwok 2016), we first introduce the following function P (x, y) := f(x)−f(x∗)−∇f(x∗)T(x− x∗)+h(y)−h(y∗)−h′(y∗)T(y− y∗) as a convergence criterion, where h′(y) denotes the (sub)gradient of h(·) at y. Indeed, P (x, y)≥ 0 for all x, y ∈ R. In the following, we give the intermediate key results for our analysis. Algorithm 2 ASVRG-ADMM for general convex case Input: m, η, β > 0, 1 ≤ b ≤ n. Initialize: x̃ = z̃, ỹ, λ̃, θ0 = 1− Lηδ(b) 1−Lη . 1: for s = 1, 2, . . . , T do 2: x0=(1−θs−1)x̃+θs−1z̃, y 0= ỹs−1, λ0= λ̃s−1; 3: p̃ = ∇f(x̃s−1), z 0= z̃s−1; 4: for k = 1, 2, . . . ,m do 5: Choose Ik⊆ [n]of size b, uniformly at random; 6: y k=argminy h(y)+ β 2 ‖Az s k−1+By− c+λk−1‖; 7: z k=z s k−1− η(∇̃fIk(x s k−1)+βA (Az k−1+By s k−c+λ s k−1)) γθs−1 ; 8: xk=(1− θs−1)x̃ + θs−1z k; 9: λk=λ s k−1 +Az s k +By s k − c; 10: end for 11: x̃= 1 m ∑m k=1x s k, ỹ =(1−θs−1)ỹ+ θs−1 m ∑m k=1y s k, 12: λ̃=λm, z̃ =z m, θs= √ θ4 s−1+4θ 2 s−1−θ 2 s−1 2 ; 13: end for Output: x̃ , ỹ . Lemma 1. E[‖∇̃fIk(xk−1)−∇f(xk−1)‖] ≤2Lδ(b) [ f(x̃)−f(xk−1)+(xk−1− x̃)∇f(xk−1) ] , where δ(b)= n−b b(n−1)≤1 and 1 ≤ b ≤ n. Lemma 2. Using the same notation as in Lemma 1, let (x∗, y∗, λ∗) denote an optimal solution of problem (2), and {(z k, xk, y k, λk, x̃, ỹ)} be the sequence generated by Algorithm 1 or 2 with θs ≤ 1− δ(b) α−1, where α= 1 Lη . Then the following holds for all k, E [ P (x̃, ỹ)− θs−1 m m ∑ k=1 ( (x∗−zs k)Aφk+(y−y k)Bφk )] ≤E [ P (x̃s−1, ỹs−1) 1/(1−θs−1) + θ s−1 ( ‖x∗− z 0‖G−‖x− z m‖G )",
    "creator" : "LaTeX with hyperref package"
  }
}