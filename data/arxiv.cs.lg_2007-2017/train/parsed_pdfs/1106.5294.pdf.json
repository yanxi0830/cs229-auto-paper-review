{
  "name" : "1106.5294.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n10 6.\n52 94\nv1 [\ncs .L\nO ]\n2 7\nJu n"
    }, {
      "heading" : "1. Introduction",
      "text" : "A set system L over a set T , a subfamily of the power set P (T ), is a topic of (extremal) combinatorics [1, 2], as well as a target of an algorithm to learn in computational learning theory of languages [3].\nBy reformulating a learning process of a set system L as a game between T eacher and Learner, we define the order type of L ⊆ P (T ) to be the order type of the game tree. The features of the order type of L (dimL in symbol) are followings:\n• We can represent any well-quasi-order (wqo for short) by the set system of the upper-closed sets of the wqo such that the maximal order type [4] of the wqo is equal to the dimL. • dimL is an upper bound of the mind-change complexity [5] of L which is recently studied in relation to Noetherian property of algebras, set-theoretical topology and reverse mathematics [6, 7, 8, 9]. dimL is defined if and only if L has a finite elasticity (fe for short), where, according to computational\nDate: June 28, 2011.\n1\nlearning theory [10, 3], if an indexed family of recursive languages has fe then it is learnable by an algorithm from positive data.\nIn computational learning of languages, a set system algorithmically learnable from positive data is often a combination of set systems (e.g. extended pattern languages [3].) To discuss which combinatorial operations for set systems preserve fe, quantitatively with the order type of the set systems, let us consider a motivating example. Suppose L is the class of arithmetical progressions over N. Observe the class of binary unions of arithmetical progressions over N, that is, L ∪̃ L := {L ∪ M ; L,M ∈ L} is more difficult to learn than L ⊎̃ L := {L⊎M ; L,M ∈ L}, where L ⊎ M is the disjoint union of L and M , i.e., the union of the progression L colored red and the progression M colored black. The difficulty of L ∪̃ L is because the discoloration brings nondeterminism to Teacher and/or Learner. By the discoloration of L⊎M , we mean L∪M , and by that of L ⊎̃ L, we mean L ∪̃ L. We can notice that the discolorization of the direct product L × M of languages L,M is the concatenation L ·M , and observe that L ×̃ L = {L ×M ; L,M ∈ L} is easier to learn than the discolorization L ·̃ L = {L ·M ; L ∈ L}.\nFollowing questions are central in this paper:\nQuestion 1. Does discoloration preserve finite elasticity?\nQuestion 2 ([11, 12, 13, 14]). Which operations for set systems preserve finite elasticity?\nQuestion 3. What is the nondeterminism brought by operations that preserve finite elasticity?\nQuestion 4. How much do such operations increase the order type of set systems?\nQuestion 1 is yes, because Ramsey’s theorem [15] implies any dichromatic coloring of any infinite game sequence of L ∪̃ L has an infinite, monochromatic game subsequence of L. This is another saying of Motoki-Shinohara-Wright’s theorem [16, 10]. This argument leads to a solution of Question 4 with Ramsey number [15].\nFor Question 2, first observe that the discoloration L∪M of L⊎M is the inverse image R−1[L ⊎M ] = {s ; ∃u ∈ L ⊎M.R(s, u)} by a following finitely branching relation: R(s, u) : ⇐⇒ u = 〈 s, red 〉 or u = 〈 s, black 〉. For a relation R ⊆ X × Y , the inverse images of a set M and a set system M are, by definition, respectively\n(1) R−1[M ] := {x ∈ X ; ∃y ∈ M. R(x, y)}, R̃−1[M] := {R−1[M ] ; M ∈ M}.\nLet us abbreviate “a set system with finite elasticity” by an fess. In [13, 14], Kanazawa derived “the inverse image of an fess by a finitely branching relation again an fess” from König’s lemma, and established not only the union but also the permutation closure and so on preserves fesss. We generalize his lemma further as: “the direct image L of an fess M by a continuous function which is monotone with respect to the set-inclusion is again an fess.” Here we regard L and M as subspaces of Cantor spaces, which are the product topological spaces {0, 1} ⋃ L, {0, 1} ⋃\nM of copies of finite discrete topological space {0, 1}. Interestingly, a monotone, continuous function is a stable function [17] plus a modest nondeterministic computation, so to say. To explain the relation among monotone, continuous functions, (linear) stable functions and nondeterminism, let\nus consider a following characterization by Tychonoff’s theorem: a monotone, continuous function is a function O : M → L such that there is a finitely branching relation R ⊆ ( ⋃ L)× [ ⋃ M]<ω satisfying that for all x ∈ ⋃ L and all M ∈ M,\nO(1M )(x) = { 1, (∃v ⊆ M. R(x, v)) ; 0, (otherwise,)\nwhere [ ⋃ M]<ω is the class of finite subsets of ⋃ M and 1M is the indicator function of the set M . From linear logic [17] point of view, when L and M are coherence spaces and #{v ; R(x, v)} ≤ 1 for all x, then O becomes a stable function from L to M, and if further ∀x∀v. (R(x, v) ⇒ #v ≤ 1) holds, then O becomes a linear stable function [17]. Kanazawa’s lemma is nothing but “the direct image of an fess by a linear, monotone, continuous function is again an fess” where the relation R in the lemma is the trace [17] of the linear function.\nFor Question 3, the nondeterminism brought by the (linear) monotone, continuous functions O are the “finite OR-parallelism” caused by finite sets v’s. The degree of the nondeterminism is #{v ; R(x, v)}. In other words, the trace R of the monotone, continuous function is finitely branching, while that of stable function has at most one branching. So we can easily prove that there are monotone, continuous functions 1L 7→ 1L∗ and 1L 7→ 1L⊛ where L\n⊛ is the shuffle-closure [18] of L. Here are a non-example and an example of nondeterminism.\n• Because a Π-continuous function [6] can represent an unbounded search unlike monotone, continuous functions, the direct image of an fess by a Π-continuous function is not necessarily an fess (see Theorem 6.) • We define the category QOFinSim of quasi-orders and finitely branching simulations between them. Here a usual order-homomorphism is an instance of a finitely branching simulation which appears in concurrency theory. Let SS be the complete category of set systems and monotone, continuous functions between them. We provide an order-type-preserving contravariant embedding from QOFinSim to SS. By this embedding, each quasi-order is sent to the family of upper-closed sets. When the branching of the relation is at most 1, it is sent to a stable (sequential) function [17] in SS. In fact, the category of coherence spaces and stable functions between them, introduced in [17] embeds in SS.\nAs for Question 4, the Ramsey number argument for Question 1 establishes : If a monotone, continuous function O with the trace R has n such #{v ; R(s, v)} ≤ n for each s, then the direct image of L by O has order type at most the n-adic diagonal Ramsey number of dimL+ 2.\nThis paper is organized as follows. In the next section, we review parts of order theory, various (closure) operations of languages from algebraic theory [18, 19] of languages and automata, and finite elasticity of computational learning theory. In Section 3, we introduce the order type of a set system, and then represent every quasi-order by a set system having the same order type as the quasi-order. We prove that if the set system L is an indexed family of recursive languages, as in the case of computational learning theory, and if moreover the indexing is without repetition, then dimL is exactly a recursive ordinal. In Section 4, we prove “the direct image of an fess by a monotone, continuous function is again an fess.” In Section 5, we employ Ramsey numbers to answer Question 4. In Section 6, we embed the category QOFinSim and a categorical model of linear logic in the\ncategory SS. In A, we record the proof of Theorem 9 on the categorical structure of SS, SSlin and SSseq , where SSlin is the subcategory induced by linear functions and SSseq by sequential functions. We prove the category SSseq does not have a binary coproduct because the sequential function does not represent a nondeterministic computation. And then we discuss whether SS has the duality operator and the bang operator as the category of coherence spaces."
    }, {
      "heading" : "2. Preliminaries",
      "text" : "Let R ⊆ S ×U be a relation. If the cardinality BR(s) of {u ∈ U ; R(s, u)} is finite for all s ∈ S, then we say R is finitely branching. If BR(s) ≤ 1 for all s ∈ S, then we say R is a partial function. For a set U, let [U] <α be the class of subsets A of U such that #A < α.\n2.1. Order theory. A quasi-order (qo for short) over a set X is a pair X = (X, ) where is a reflexive, transitive relation. A bad sequence is a possibly infinite sequence 〈a0, a1, . . . , an(, . . .)〉 such that ai 6 aj whenever i < j. A well-quasiorder (wqo for short) is a quasi-order that has no infinite bad sequences. For A ⊆ X , let A ↑ X := {x ∈ X ; ∃a ∈ A. a x }.\nDefinition 1. For a quasi-order X = (X, ), let a set system ss (X ) be the complete lattice of upper-closed subset of X with respect to X .\nProposition 1 ([20, Theorem 2.1]). For every quasi-ordered set X , the following are equivalent:\n(1) X is a wqo. (2) Finite basis property: Every A ↑ X is B ↑ X for some B ∈ [X ]<ω. (3) Ascending chain condition: ss (X ) is a complete lattice with ascending chain\ncondition. That is, there is no infinite, strictly ascending sequence of members.\nThe length of a sequence σ = 〈b1, . . . , bm〉 is, by definition, ln(σ) = m, and the length of an infinite sequence σ is, by definition, ln(σ) = ∞.\nBy a tree, we mean a set T of finite sequences such that any initial segment of a sequence in T is in T . A tree T is said to be well-founded if there is no infinite sequence 〈a1, a2, . . .〉 such that 〈a1, . . . , an〉 is in T for each n.\nLet T be a well-founded tree. For each node σ of T , let the ordinal number |σ| be the supremum of |σ′| + 1 such that σ′ ∈ T is an immediate extension of σ. Then the order type |T | of the well-founded tree T is defined by the ordinal number |〈 〉| assigned to the root 〈 〉 of T . For a tree T which is not well-founded, let |T | be ∞. For the sake of convenience, we set α < ∞ for all ordinal numbers α. As in [21], we define the order type otp(X ) of a wqo X to be the order type of the well-founded tree of bad sequences in X . According to [21, Sect. 2], otp(X ) is equal to the maximal order type of de Jongh-Parikh [4].\nBy an embedding from a tree T to a tree T ′, we mean an injection f : T → T ′ such that f(v⊔u) = f(v)⊔f(u) for all vertices u, v in T , where v⊔u is the greatest common ancestor of a pair of vertices u, v.\nFact 1. If there is an embedding from a tree T to a tree T ′, then |T | ≤ |T ′|.\n2.2. Computational learning theory for languages. A set system is a subfamily of a power set. We use L,M,N , . . . to represent set systems.\nWe say a set system L over X has an infinite elasticity, if there are infinite sequences t0, t1, . . . ∈ X and L1, L2, . . . ∈ L such that {t0, . . . , ti−1} ⊆ Li 6∋ ti for every positive integer i. Otherwise, we say L has a finite elasticity (fe.) A set system with an fe is abbreviated as an fess.\nLet N be the set of nonnegative integers.\nExample 1. (1) The class of integer lattices contained in Zd and the class of ideals over Z[x, y, z] are fesss, because Zd and Z[x, y, z] are is a Noetherian module and a Noetherian ring respectively [22, p. 112].\n(2) The class of finitely generated free sub-semigroups of (N2,+) is not an fess ([23].) (3) The class of (extended) pattern languages with bounded number of variables is an indexed family of recursive languages, and is an fess ([10]. For an elementary proof, see [23].) (4) Singl := {{x} ; x ∈ N} of singletons is an fess. (5) The class Dcl := {{y ; y ≤ x} ; x ∈ N} ⊆ P (N) is not an fess.\nDefinition 2. By an indexed family of recursive languages (ifrl for short), we mean a pair L = (ν : J → X, γ : I × J → {0, 1}) such that I, J ⊆ N, ν is a bijection, and γ is recursive. Put Li := {ν(j) ∈ X ; γ(i, j) = 1} for i ∈ I. An ifrl without repetition is just an ifrl such that Li 6= Lj for distinct i, j.\nProposition 2 ([16, 10]). Every ifrl with an fe is learnable from positive data by an algorithm.\nBy an alphabet we mean a finite nonempty set. Let Σ be an alphabet. Denote the empty word by ε. For words u, v ∈ Σ∗, the shuffle product u ⋄ v of u and v is, by definition, the set of all the words u1v1u2v2...unvn such that ∃n ≥ 1∃u1, u2, . . . , un, v1, v2, . . . , vn ∈ Σ∗ we have u = u1u2 · · ·un and v = v1v2 · · · vn. For L,M ⊆ Σ∗, let L ⋄ M := ⋃ {u ⋄ v ; u ∈ L, v ∈ M}. Put L⋄ := L ∪ (L ⋄ L) ∪ (L ⋄ L ⋄ L) ∪ · · · . Let us call L⊛ := L⋄ ∪ {ε} the shuffle-closure of L. The shuffle-product and shuffle-closure are studied in algebraic theory of automata and languages [18, 19], for example.\nLet a disjoint union of languages Bi (i ∈ I) be ⊎\ni∈I\nBi := {〈 b, i 〉 ; b ∈ Bi, i ∈ I }.\nFor a language M , let Mm be m︷ ︸︸ ︷ M ·M · · · · ·M (m ≥ 1), let us call M+ :=⋃\nm≥1 M m the positive Kleene-closure, and let M∗ be the Kleene-closure. Let M⊛ be the shuffle-closure of M , 12 (M) be the half initial segment. For all Li ⊆ P (Xi) (1 ≤ i ≤ n) and an operation ⊙ on languages of arity n, put\n⊙̃ (L1, . . . ,Ln) := {⊙(L1, . . . , Ln) ; Li ∈ Li, (1 ≤ i ≤ n) }.\nHere is an application of Ramsey’s theorem:\nProposition 3 (Motoki-Shinohara-Wright [16, 10]). If L1 and L2 are fesss, so is L1 ∪̃ L2.\nIn fact, it is derived from a weak principle: König’s lemma.\nProposition 4 (Moriyama-Sato [12]). For a fixed finite alphabet, the family of language classes with fe is closed under ∪, ∪̃, ·̃, ∩̃, ∗̃, +̃, and m̃ for every positive integer m, but not under elementwise complement.\nIndependently, Kanazawa [13, 14] proved a following nice result by using König’s lemma:\nProposition 5 (Kanazawa [13, 14]). If M ⊆ P (Y ) is an fess and R ⊆ X × Y is\nfinitely branching, then R̃−1[M] ⊆ P (X) is so.\nIn fact, without invoking König’s lemma, he showed\nLemma 1 ([13, 14]). If dimL, dimM < ∞, then dimL ⊎̃ M.\nThen he proved various language operations preserves fesss, by applying Proposition 5.\nCorollary 1 (Kanazawa [13, 14]). For a fixed alphabet, the family of language\nclasses with an fe is closed under ∪̃, elementwise permutation closures, ⋄̃, and 1̃2 (·). For each nonerasing homomorphism h : Σ∗1 → Σ ∗ 2, if a language class L ⊆ P (Σ ∗ 1) has an fe, so does h̃[L] ⊆ P (Σ∗2). If L is a class of ε-free languages with an fe, then so is {L1 · L2 · · · · · Ln ; n ≥ 1, L1, . . . , Ln ∈ L}."
    }, {
      "heading" : "3. Order types of set systems and WQOs",
      "text" : "We introduce order types of set systems, study the set system of upper-closed subsets of a qo from viewpoint of order types and algebraic theory of lattices [24].\nWe regard a learning process of a set system L ⊆ P (T ), as a game between Teacher T and Learner L where in each inning i ≥ 1 Teacher presents a “fresh” example ei−1 ∈ T and Learner submits a hypothesis Hi ∈ L that explains examples presented so far, that is, {e0, . . . , ei−1} ⊆ Hi. By a “fresh”example ei−1, we mean ei 6∈ Hi. The well-foundedness of the game tree coincides with the finite elasticity [16, 10] of the set system L, which was introduced in computational learning theory of languages [3]. If L is further an ifrl, then some algorithm can learn L from positive data [16, 10]. First, we introduce the order type dimL of the set system L by the order type of the game tree.\nDefinition 3 (Production sequence). A production sequence of a set system L is a sequence 〈〈 t0, L1 〉, 〈 t1, L2 〉, . . . , 〈 tm−1, Lm 〉〉 (m ≥ 0) or an infinite sequence 〈〈 t0, L1 〉, 〈t1, L2〉, . . .〉 such that\n{t0, . . . , ti−1} ⊆ Li ∈ L (i = 1, 2, . . . (,m)) and Lj 6∋ tj (j = 1, 2, . . . (,m− 1).)\nLet Prod(L) be the set of all production sequences of L.\nClearly a sequence 〈L1, L2, . . .〉 is a bad sequence in a poset (L,⊇), because i < j implies Lj \\ Li ∋ ti.\nDefinition 4 (Dimension). The dimension of L, denoted by dimL, is defined to be |Prod(L)|.\nBy Fact 1, L ⊆ L′ implies dimL ≤ dimL′. Let us see examples of order types of set systems.\nWe note that any ordinal α is the dimension of the set system of upper-closed subsets of α.\nAs in [25, p. 384], we understand that a recursive ordinal is an ordinal number α such that α = |T | for some recursive well-founded tree T .\nTheorem 1. If an ifrl L without repetition is an fess, then dimL is a recursive ordinal. Conversely, for every recursive ordinal α there is an ifrl L without repetition such that α = dimL.\nProof. Let L be an ifrl without repetition by a pair of functions ν, γ. Define a set TL ⊂ N inductively as follows. We also use symbols ’〈’ and ’〉’ for sequence numbers, and Odifreddi’s notation [25, p. 88] of operations on sequence numbers. (1) 〈 〉 ∈ TL. (2) If γ(e, j0) = 1, then 〈〈j0, e〉〉 ∈ TL. (3) If σ ∈ TL, γ (( (σ)ln(σ)−1 ) 1 , j ) = 0, and γ(e, j) = 1 = γ (e, ((σ)k)0) ∀k < ln(σ), then σ ∗ 〈〈j, e〉〉 ∈ TL. Clearly TL is a recursive tree.\nLet ϕ : Prod(L) → TL take any 〈〈t0, L1〉, 〈t1, L2〉, . . . , 〈tl−1, Ll〉〉 ∈ Prod(L) to a node 〈〈 j0, e1 〉, 〈 j1, e2 〉, . . . , 〈 jl−1, el 〉〉 of TL where ei is the unique number such that Li = Lei and ji is the unique number such that ν(ji) = ti. Then ji is well-defined because ν is bijective, and ei is too because L is an ifrl without repetition. The function ϕ is obviously an surjective order-homomorphism that preserves glb’s, and in fact an injection because L is an ifrl without repetition. Therefore dimL = |TL|. Since L is an fess, TL is a recursive well-founded tree, so dimL is a recursive ordinal number.\nNext we prove the second assertion. The ordinal number α is constructive by [26, Theorem XX, Ch.11]. So there is a recursively related, univalent system assigning a notation to α by [26, Theorem XIX, Ch.11]. Therefore, there is an injective function ν from some set J ⊆ N onto an initial segment {β ; 0 ≤ β ≤ α} = α + 1 of the ordinal numbers such that\n(2) {〈x, y〉 ; x, y ∈ J, ν(x) ≤ ν(y)} ⊆ N is recursive.\nIn particular, J is recursive. When J is infinite, there is a recursive strictly monotone function d with the range being J . Put L := {Li ; i ∈ N}, and Li := {β ; ∃j ∈ J. β = ν(j) ≥ ν(d(i)) }. Because ν is a bijection to α + 1, Li is an upper-closed subset of α + 1. Define a function γ : N × J → {0, 1} by γ(i, j) = 1 if ν(j) ≥ ν(d(i)), 0 otherwise. From (2), γ is recursive. In fact, L is ss ((α+ 1,≤)) because the range of d is exactly J and ν(J) = α+ 1. Then L is an ifrl. Moreover L is an ifrl without repetition because d and ν are injective. By Theorem 2 (1), dimL = otp ((α+ 1,≤)) = α. When J is finite, we can prove the assertion similarly.\nNext we introduce a left-inverse of ss (•).\nDefinition 5. For a set system L ⊆ P (X), define a quasi-order\nx L y : ⇐⇒ ∀L ∈ L (x ∈ L ⇒ y ∈ L.) qo (L) := (X, L .)\nBelow, we prove that ss (•) is an order-type preserving representation of qos by set systems. In other words, the order type of a wqo turns out to be the difficulty in learning the class of upper-closed subsets of the wqo. Then we prove that ss (•) indeed has qo (•) as the left-inverse.\nTheorem 2 (Representation of QO). Let X = (X, ) be a quasi-order.\n(1) otp(X ) = dim ss (X ). (2) X = qo (ss (X )).\nProof. We prove the assertion (1), by a transfinite induction using\n∃L1, . . . , Ll. 〈〈t0, L1〉, 〈t1, L2〉, . . . , 〈tl−1, Ll〉〉 ∈ Prod(ss (X ))\n⇐⇒ 〈t0, . . . , tl−1〉 is a bad sequence of X .\nThe ⇒-part is demonstrated as follows: We have {t0, . . . , ti−1} ⊆ Li 6∋ ti (1 ≤ i ≤ l − 1). Because each Li ∈ ss (X ) is upper-closed, for any nonnegative integers j < i ≤ l− 1, tj 6 ti. The ⇐-part is witnessed by Li := {t0, . . . , ti−1}↑X .\n(2) Assume x ss(X ) y. Then ∀L ∈ ss (X ) . (x ∈ L ⇒ y ∈ L). Take L := {y ∈ X ; x y} ∈ ss (X ). Hence x y. Conversely, assume x y. Then because every L ∈ ss (X ) is upper-closed with respect to , x ∈ L implies y ∈ L. Therefore x ss(X ) y.\nTheorem 3. If qo (L) is a wqo, L is an fess but not conversely. Actually dimL ≤ otp(qo (L)) ≤ ∞ and dim(Singl ) = 1 < otp(qo (Singl )).\nProof. Observe that for every 〈〈t0, L1〉, 〈t1, L2〉, . . . , 〈tl−1, Ll〉〉 ∈ Prod(L), a sequence 〈t0, t1, . . . , tl−1〉 is a bad sequence of qo (L). So we can prove the inequality by a transfinite induction [27] on Prod(L). The equality dimL = otp(qo (L)) is not necessarily true. For example, although dimSingl = 1, a quasi-order qo (Singl ) = (N,=) has an infinite bad sequence 〈0, 1, 2, 3, . . .〉, which implies otp(qo (Singl )) = ∞.\nProposition 6 ([9, p. 41]). If L has a finite thickness and L has no infinite antichain with respect to ⊆, then qo (L) is a wqo.\nWe will study structure of the representation of qos by set systems from viewpoint of algebraic theory of lattices [24]. From [24], we recall “atom,” “atomic,” and “compact” (and the dual notions.)\nLet L be a complete lattice. By a coatom of L, we mean any nontop element C such that every nontop c ∈ L is codisjoint from C (i.e. c∪C is top) or less than or equal to C. A coatomic, complete lattice is, by definition, a complete lattice such that for any nontop element C0 there is a coatom greater than or equal to C0. We say an element c in a complete lattice L is called compact if whenever c ≤ ⋃ S there exists a finite subset T ⊆ S with c ≤ ⋃ T .\nProposition 7 ([24]). Every element of a complete lattice L is compact if and only if L satisfies the ascending chain condition.\nTheorem 4. Let X = (X, ) be a quasi-order.\n(1) The following are equivalent: (a) X is a wqo. (b) ss (X ) is an fess. (c) ss (X ) is a complete lattice such that every element is compact. (2) If X is a wqo, then ss (X ) is a coatomic, complete lattice.\nProof. As for the assertion (1), the equivalence between the conditions (a) and (b) follows from Theorem 4 (1). The equivalence between the conditions (a) and (c) is by Proposition 1 and Proposition 7.\n(2) Let X = (X, ). {∅, X} is obviously a coatomic, complete lattice. So assume ss (X ) 6= {∅, X}. By the assertion (1), the complete lattice ss (X ) is an fess. If ss (X ) is not coatomic, then there exists C0 ∈ ss (X ) \\ {X} such that (3) ∀C ∈ ss (X ) \\ {X} ( C0 ⊆ C =⇒ ∃c ∈ ss (X ) (c ∪C 6= X & c \\ C 6= ∅) ) .\nWe can construct an infinite 〈〈x0, C1〉, 〈x1, C2〉, . . .〉 ∈ Prod(ss (X )) as follows: Because ss (X ) ) {∅, X}, we can take a pair of C1 ∈ ss (X ) \\ {X} and x0 ∈ C1 such that C0 ⊆ C1. Suppose we have a pair of Ci ∈ ss (X ) \\ {X} and xi−1 ∈ Ci such that C0 ⊆ Ci. Once we can find a pair of Ci+1 ∈ ss (X ) \\ {X} and xi ∈ Ci+1 \\ Ci such that C0 ⊆ Ci+1, then by iterating this process, we can construct an infinite production sequence of ss (X ). Because C0 ⊆ Ci and (3), there exist ci ∈ ss (X ) and xi ∈ ci \\ Ci such that ci ∪ Ci 6= X . So, let Ci+1 := Ci ∪ ci. Then it is in ss (X ) \\ {X} because ss (X ) is closed under the union. Moreover xi ∈ Ci+1 \\ Ci because xi ∈ ci \\ Ci. Clearly C0 ⊆ Ci ⊆ Ci ∪ ci = Ci+1.\nThis section suggests a close similarity between wqos and finitely elastic set systems, so it is worth studying whether the closure properties for wqos solve the questions of which operation on set systems preserves finite elasticity. According to [28], the study on closure properties for wqos (Higman’s theorem for wqos on finite sequences [20], Kruskal’s theorem for wqos on finite trees [29], NashWilliams’ theorem for better-quasi-orders on transfinite sequences [30],...) can be advanced via set-theoretic topological methods and a Ramsey-type argument. So, to advance the study on the questions of which operation on set system preserves finite elasticity, it is natural for us to employ set-theoretic topology (see Section 4) and a Ramsey-type argument (see Section 5.)"
    }, {
      "heading" : "4. Continuous deformations of set systems",
      "text" : "For nonempty finite set U , the product topological space {0, 1}U is called a Cantor space. Subspaces of Cantor spaces are represented by C,D, E , . . ..\nDefinition 6. For every set system L ⊆ P (X), define a function\ni : L → iL := { 1L ∈ {0, 1} ⋃ L ; L ∈ L } ; L 7→ 1L .\nThen iL is a topological space, induced from a Cantor space {0, 1} ⋃\nL. For C ⊆ {0, 1}X, put\nfld(C) := ⋃ i −1(C) ⊆ X.\nLet us identify g ∈ D with an infinite sequence (g(y))y∈fld(D). For each x ∈ fld(C), let πx : C → {0, 1} be the canonical projection to the x-th component. So πx(f) = f(x) for every x ∈ fld(C). Recall that a Cantor space {0, 1}fld(C) is generated by a class of sets π−1x [{b}] such that x ∈ fld(C) and b ∈ {0, 1}. Let us call each π−1x [{b}] a generator of C. Then an open set of C is exactly an arbitrary union of finite intersections of generators. Note that each generator of C is clopen.\nA Boolean formula over a set Y is built up from the truth values 0, 1, or elements of Y , by means of negation, finite conjunction, and finite disjunction.\nLemma 2. A function O : D → C is continuous, if and only if there is a sequence (Bx)x∈fld(C) of Boolean formulas over fld(D) such that for every g ∈ D and every x ∈ fld(C), the value O(g)(x) is the truth value of Bx under the truth assignment g.\nProof. (If-part) The inverse image O−1 [ π−1x [{b}] ] of a generator π−1x [{b}] is the class of the truth assignments g ∈ D under which the truth value of Bx is b. Because the Boolean formula Bx is equivalent to a finite disjunction of finite conjunctions of elements of fld(D) and the negations of elements of fld(D), the inverse image O−1 [ π−1x [{b}] ] is just a finite union of finite intersections of generators of\nD, while O−1 [ π−1x [{0}] ] is just a finite intersection of finite unions of generators\nof D. Therefore, the inverse image O−1 [ π−1x [{b}] ] is open.\n(Only-if-part) Because O is continuous and {b} (b = 0, 1) is clopen in the finite discrete topology {0, 1}, the inverse image O−1 [ π−1x [{b}] ] of a generator π−1x [{1}] by O is clopen, which is an arbitrary union of intersections of generators. Because {0, 1} is compact, Tychonoff’s theorem implies the compactness of {0, 1}fld(C) and thus that of C. Moreover, C is a Hausdorff space, because for all distinct f, g ∈ C, there is x ∈ fld(C) such that f(x) 6= g(x), which implies that π−1x [{f(x)}] and π −1 x [{g(x)}] are open sets such that f ∈ π −1 x [{f(x)}] and g ∈ π−1x [{g(x)}]. Since every closed subset of a compact Hausdorff space is compact, the clopen set O−1 [ π−1x {b} ] is ⋃m i=1 ⋂ni j=1 π −1 yij [{bij}] for some nonnegative integers m,ni (1 ≤ i ≤ m), some yij ∈ fld(D), and some bij ∈ {0, 1} (1 ≤ i ≤ m, 1 ≤ j ≤ ni.) So, define a Boolean formula over fld(D) by ∨m i=1 ∧ni j=1(bij ↔ yij), where each bij ↔ yij represents a Boolean formula yij for bij = 1 and the negation yij for bij = 0. Clearly we have O(g)(x) = 1 iff g ∈ O−1 [ π−1x [{1}] ] iff g satisfies Bx.\nFor functions f, g ∈ {0, 1}Z, we write f ≤ g if f(z) ≤ g(z) for all z ∈ Z.\nDefinition 7 (Monotone functions). Let C ⊆ {0, 1}X and D ⊆ {0, 1}Y . We say a function O : D → C is monotone, if f ≤ g implies O(f) ≤ O(g).\nWe say a Boolean formula positive if it does not contain a negation.\nDefinition 8. Let S and U be two (not necessarily distinct) sets of objects, and R be a R ⊆ S× [U]<ω. For M ⊆ U and M ⊆ P (U), define\nR−1[[M ]] := { s ; ∃v ∈ [M ]<ω . R(s, v) } , R̃−1[[M]] := { R−1[[M ]] ; M ∈ M } .\nDefine !M := { [M ]<ω ; M ∈ M } . Then ⋃ !M ⊆ [ ⋃ M]<ω.\nLemma 3. (1) Following conditions are equivalent: (a) A function O : D → C is monotone and continuous. (b) O is a function of g ∈ D and x ∈ fld(C) such that it first produces a\npositive Boolean formula Bx over fld(D), and then queries to an oracle g whether g satisfies Bx or not.\n(2) If R ⊆ fld(C)× [fld(D)]<ω is a finitely branching relation, then\n(4) OR(g)(x) := ∨\nR(x,v)\n∧\ny∈v\n(g(y) = 1) , (g ∈ D, x ∈ fld(C))\ndefines a monotone, continuous function from D to C such that,\n(5) R̃−1[[M]] = i−1 (OR [iM]) ⊆ P (fld(C)) , (M ⊆ P (fld(D)) .)\nIn fact, every monotone, continuous function from D to C is written as (4).\nProof. (1) By Lemma 2. Positivity of a Boolean formula is equivalent to absence of negation in the formula. (2) follows from (1).\nLemma 4. R̃−1[[M]] = R̃−1[!M].\nProof. L ∈ R̃−1[[M]] iff there exists M ∈ M such that L = R−1[[M ]] = {x ; ∃v ∈ [M ]<ω . R(x, v)} = R−1 [ [M ]<ω ] ∈ R̃−1 [ !M].\nTheorem 5. If M is an fess, so is !M. Proof. Otherwise there exist an infinite sequence v0, v1, . . . of elements of ⋃ !M and an infinite sequence [M1] <ω , [M2] <ω , . . . of elements of !M such that for each n ≥ 1 we have {v0, . . . , vn−1} ⊆ [Mn] <ω 6∋ vn, which implies ⋃n−1 i=1 vi ⊆ Mn 6⊇ vn. Put v′i := vi \\Mi (i = 0, 1, . . ..) Then v ′ i ∩ v ′ j = ∅ (0 ≤ i < j) and each v ′ i is a nonempty finite set. Therefore {v′i ; i ∈ N} satisfies the Hall’s condition of the marriage theorem [31, Theorem 3.41]: for each finite set F ⊂ N we have # (⋃ i∈F v ′ i ) ≥ #F . By the marriage theorem, {v′i ; i ∈ N} has a system of distinct representative {yi ; i ∈ N}, i.e., yi 6= yj (0 ≤ i < j) and yi ∈ v′i (i = 0, 1, . . ..) Then for each n ≥ 1\n{y0, . . . , yn−1} ⊆ ⋃n−1 i=0 vi ⊆ Mn, while yn 6∈ Mn because yn ∈ v ′ n = vn \\Mn. This contradicts the fe of M.\nThe previous theorem generalizes Proposition 5 which is useful in Section 4.\nCorollary 2. Let M ⊆ P (U) be an fess and let R ⊆ S × [U]<ω be a finitely\nbranching relation. Then L = R̃−1[[M]] ⊆ P (S) is also an fess.\nProof. By Theorem 5, Lemma 4 and Proposition 5.\nConversely, Theorem 5 follows from Corollary 2 with U := ⋃ M, S := [ ⋃ M]<ω,\nand a following:\nDefinition 9.\nR! :=\n{ (v, v) ; v ∈ [⋃ M ]<ω} , and !M = R̃−1! [[M]]\nIn terms of topology, the previous corollary becomes a following:\nCorollary 3. Assume L and M are set systems and O : iM → iL is a monotone, continuous function. Then if M is an fess, so is i−1 (O [iM]). Proof. By Lemma 3 (2), O(1M )(x) = ∨\nR(x,v) ∧ y∈v(y ∈ M) where R ⊆ ⋃ L ×\n[ ⋃ M]<ω is a finitely branching relation. Therefore we have L = R−1[[M ]] ⇐⇒ L = {x ; ∃v (R(x, v) & v ⊆ M)} ⇐⇒ 1L = O(1M ). Hence the family i−1 (O [iM]) is R̃−1[[M]], which is an fess by Corollary 2.\nAlthough the mind-change complexity of language identification from positive data is characterized by using the positive information topology [6, 8, 9], Corollary 3 does not hold for positive information topology. Recall that the positive information topology C ⊆ {0, 1}X is induced by the product topology of the topology {0, 1} where the only nontrivial open subset of {0, 1} is {1}. So the basic open sets of the positive information topology are\n(6) UCF = {f ∈ C; f [F ] = {1}} where F is an arbitrary finite subset of X.\nLet us abbreviate “continuous with respect to the positive information topology” by “Π-continuous.”\nLemma 5. A monotone, continuous function is Π-continuous.\nProof. Let O : D → C be a monotone, continuous function and let UCF be a basic open set of the positive information topology C where F is a finite subset of fld(C). By Lemma 3 (1), there are positive Boolean formulas Bx over fld(D) (x ∈ F ) such that for every F ∈ [fld(C)]<ω the inverse image O−1 [ UCF ] is ⋂ x∈F {g ∈\nD ; g satisfies Bx}. Observe that eachBx is equivalent to ∨nx\ni=1\n∧ Fx,i for some nx ≥\n0 and some Fx,i ∈ [fld(D)] <ω (1 ≤ i ≤ nx.) ThereforeO−1 [ UCF ] is ⋂ x∈F ⋃nx i=1 U D Fx,i , which is open with respect to positive information topology because F is finite.\nRecall that Singl = {{n} ; n ∈ N} is an fess. For L ⊆ N, let ↓ L ⊆ N be the downward closure {n ; n ≤ m (∃m ∈ L)} of L. To decide whether n ∈↓ L, we must carry out unbounded search to find some m ∈ L ∩ [n, ∞).\nTheorem 6. (1) A function O↓ : {0, 1}N → {0, 1}N that sends 1L to 1↓L is monotone and Π-continuous but i−1O↓ [ iSingl ] is not an fess; and\n(2) There is a non-monotone, continuous, non-Π-continuous function O¬ : {0, 1}N → {0, 1}N such that i−1O¬ [ iSingl ] is not an fess.\nProof. A basic open set (6) with C = {0, 1}N is simply written UF below: (1) The monotonicity of O↓ is obvious. The function O↓ is Π-continuous, because for every basic open set UF with finite F ⊆ N, the inverse image by O↓ is an open set ⋃ B⊆F ( UF\\B ∩ ⋂ b∈B ⋃ x>b U{x} ) where ⋂ b∈B · · · is {0, 1} N if B = ∅. However i −1O↓ [ iSingl ] = Dcl is not an fess.\n(2) Moriyama-Sato [12] observed that the elementwise complement does not preserve the fe of set systems. Define\nO¬(g)(x) = 1− g(x).\nThen i−1O¬[ iSingl ] = {N\\{y} ; y ∈ N} has an infinite elasticity: 0, N\\{1}, 1, N\\ {2}, 2, . . . . If O¬ is Π-continuous, then O−1¬ [ U{0} ] should be ⋃ G UG where G ranges over a certain class of finite subsets of N. For such a finite set G, g = 1G belongs to the inverse image by O¬, but the support should be N \\ {0}. Contradiction."
    }, {
      "heading" : "5. The order types of nondeterministically deformed set systems",
      "text" : "We present a typical application of Corollary 3, and answer Question 4 “How much do such operations increase the order type of set systems?” by a Ramsey number argument.\nFix an alphabet Σ. To know whether a word w belongs to the Kleene closure L∗ = ⋃ n≥0 L n of a language L, we need to guess n nondeterministically. Nondeterministic operations such as the Kleene closure operator (·)∗ and the shuffle-closure operator (·)⊛ are representable by monotone, continuous functions. So Corollary 3 is useful in deriving the following:\n(7) M ⊆ P (Σ∗) is an fess ⇒ M∗̃ and M+̃ are fesss.\nLet us see the proof to generalize for the case of the shuffle-closure. Assume M is an fess. Let ε be the empty word and let O1(1M ) := 1M\\{ε} and O3(1M ) := 1M∪{ε}. Then O1 and O3 are monotone and continuous. Let O2(1L) be computed by a Turing machine with the oracle tape being 1L as follows: if an input s ∈ Σ∗ is ε then the oracle Turing machine returns 0. Otherwise, it tries to find a partition s1, . . . , sm of s such that s = s1 · · · sm, ln(si) > 0 (1 ≤ i ≤ m), m ≥ 1 and\n{s1, . . . , sm} ⊆ L. If such a partition is found, then the oracle Turing machine returns 1, and 0 otherwise. The number of queries the oracle Turing machine makes is bounded by the number of partitions of s, which implies the continuity of O2. It is easy to see O2 is monotone. Observe O2(1L) = 1L+ for all L ⊆ Σ\n∗ \\ {ε}. We can prove, for every M ⊆ Σ∗,\n(M \\ {ε})+ = M+ \\ {ε}, (M \\ {ε})+ ∪ {ε} = M∗.\nSo we have O3 ◦O2 ◦O1(1M ) = 1M∗ . By Corollary 3, M ∗̃ is an fess.\nAssume M+̃ has an infinite production sequence 〈 〈t0,M + 1 〉, 〈 t1, M + 2 〉, . . . 〉 . Note that there is at most one i such that ti = ε. Removal of such 〈 ti, Mi 〉 from the infinite production sequence of M+̃ results in still an infinite production sequence of M+̃ . By adjoining the empty word ε to each language in the infinite production sequence, we have an infinite production sequence of M∗̃ , because M+ ∪ {ε} = M∗. But this is a contradiction against the fe of M∗̃ . So, M+̃ is an fess.\nRemind that to find such a partition can be done by a nondeterministic computation. We can prove the counterpart of (7) for the shuffle-closures (·)⊛, as follows:\nCorollary 4. If L ⊆ P (Σ∗) is an fess, so is L⊛̃.\nProof. The proof is similar to that of (7) except O2(1L) is computed by another Turing machine with the oracle tape being 1L as follows: if an input s ∈ Σ∗ is ε, then it returns 0. Otherwise, it tries to find a sequence s1, . . . , sm such that s is an “interleaving merge” of s1, . . . , sm, ln(si) > 0 (1 ≤ i ≤ m), m ≥ 1 and {s1, . . . , sm} ⊆ L. Then O2 is clearly monotone and continuous. Moreover O2(1L) = 1L⋄ for every L ⊆ Σ∗ \\ {ε}. We can prove, for every M ⊆ Σ∗,\n(M \\ {ε})⋄ = M⋄ \\ {ε}, (M \\ {ε})⋄ ∪ {ε} = M⊛.\nSo we have O3 ◦O2 ◦O1(1M ) = 1M⊛ . By Corollary 3, we have done.\nWe can see that (7) also holds for tree languages [32].\nNext we answer Question 4 “How much do such operations increase the order type of set systems?” by a Ramsey number argument.\nThe finitely branching relation\n(8) Rn(s, u) : ⇐⇒ n−1∨\ni=0\n(u = {〈s, i〉} .) (n = 2, 3, . . .)\nsatisfies R̃−1n [ [L1 ⊎̃ · · · ⊎̃ Ln] ] = L1 ∪̃ · · · ∪̃ Ln. So, if Li’s are all fesss, then so is L1 ⊎̃ · · · ⊎̃ Ln by Lemma 1. By Corollary 2, L1 ∪̃ · · · ∪̃ Ln is an fess, too. On the other hand, in [16], Wright proved that “if L1 and L2 are fesss, then so is L1 ∪̃ L2,” by using Ramsey theorem “for any dichromatic coloring of an infinite complete graph, there is a monochromatic infinite complete subgraph.” By adapting his proof, we can provide an explicit upper bound of the dimension by using a Ramsey number [33]:\nProposition 8 ([33, Sect 1.1]). For all positive integers n, l1, . . . , ln, there exists a positive integer k such that any edge-coloring with colors 1, . . . , n for the complete graph of size k has a complete subgraph of size li colored homogeneously by some color i ∈ {1, . . . , n} . Such minimum integer k, denoted by Ram(l1, . . . , ln, n), is\ncalled the Ramsey number of l1, . . . , ln. When l1 = · · · = ln, we call it the nadic diagonal Ramsey number of l1, and write it as Ram(l1;n). For the sake of convenience, put Ram(l; 1) = l for every nonzero ordinal number (and hence every positive integer) l.\nBy [15, Section 4.2], Ram(l,m) ≤ ( m+ l − 2 l − 1 ) ≤ c4max(l,m)/ √ max(l,m) for\nsome constant c.\nLemma 6. For every positive integer n, if dimLi < ω (i = 1, . . . , n), then\ndim ( L1 ∪̃ · · · ∪̃ Ln ) + 1 < Ram(dim(L1) + 2, . . . , dim(Ln) + 2).\nProof. When n = 1 the assertion is trivial. Consider the case n = 2. Suppose that k + 1 ≥ Ram(dim(L) + 2, dim(M) + 2), and suppose there are a sequence t0, . . . , tk−1, a sequence L1, . . . , Lk of L and a sequence M1, . . . ,Mk of M such that\n(9) {t0, . . . , ti−1} ⊆ Li ∪Mi (i = 1, 2, . . . , k) and Lj 6∋ tj (j = 1, . . . k − 1.)\nBy the definition of Ramsey number,\nk ≥ dim(L) + 1, dim(M) + 1.\nConsider a complete graph G with the vertices being 0, . . . , k − 1. For any edge {i, j}(i 6= j), color it by red if 0 ≤ i < j ≤ k− 1 and ti ∈ Lj, while color it by black otherwise.\nAssume k + 1 ≥ Ram(dim(L) + 2, dim(M) + 2). By Ramsey’s theorem, the colored complete graph G has either a red clique of size dim(L) + 2 or a black clique of size dim(M) + 2. When a red clique of size dim(L) + 2 exists, write it as {u0 < · · · < udim(L)+1}. Then we have {tu0 , . . . , tui−1} ⊆ Lui (i = 1, . . . , dim(L)+1) but Luj 6∋ tuj (j = 1, 2, . . . , dim(L)), which contradicts the definition of dimL.\nOtherwise, a black clique of size dim(M)+2 exists, so we write it as {u0 < · · · < udim(M)+1}. Then we have {tu0 , . . . , tui−1}∩Lui = ∅ (i = 1, . . . , dim(M)+1). By (9), we have {tu0 , . . . , tui−1} ⊆ Lui ∪Mui and Luj ∪Muj 6∋ tuj (j = 1, . . . , dim(M)), so {tu0 , . . . , tui−1} ⊆ Mui and Muj 6∋ tuj (j = 1, . . . , dimM), which contradicts the definition of dim(M).\nConsider the case n ≥ 3. Suppose that k+1 ≥ Ram(dimL1+2, . . . , dimLn+2),\nand suppose there are a sequence t0, . . . , tk−1 and a sequence L (l) 1 , . . . , L (l) k of Ll (1 ≤ l ≤ n) such that {t0, . . . , ti−1} ⊆ ⋃n l=1 L (l) i (i = 1, . . . , k) and ⋃n l=1 L (l) j 6∋ tj (j = 1, . . . , k − 1.) For any edge {i, j} (i 6= j), if 0 ≤ i < j ≤ k − 1 and ti ∈ L (1) j , color {i, j} by the color 1; else if 0 ≤ i < j ≤ k − 1 and ti ∈ L (2) j , color it by the color 2; else if . . .; else if 0 ≤ i < j ≤ k − 1 and ti ∈ L (n−1) j , color it by the color n− 1; else color {i, j} by the color n. Then apply the same argument as above.\nThe lemma generalizes for any relation R with sups #{v ; R(s, v)} ≤ n.\nTheorem 7. Assume R ⊆ ⋃ L × [ ⋃ M]<ω has a bound n ≥ 1 of #{v ; R(x, v)} (x ∈ ⋃ L). If M is an fess, then\ndim R̃−1[[M]] + 1 < Ram(dimM+ 2;n),\nprovided dimM is finite or n = 1. Actually, when n = 1,\n(10) dim R̃−1 [[M]] ≤ dim M where the equality holds if each y ∈ ⋃ M has ξ(y) ∈ ⋃ L such that R(ξ(y), {y}).\nProof. To show the inequality for n = 1, by Fact 1, it is sufficient to build an embedding f from a well-founded tree Prod(R̃−1[[M]]) to a well-founded tree Prod(M). Suppose\na = 〈〈 s0, L1 〉, . . . , 〈 sl−1, Ll 〉〉 ∈ Prod(R̃−1[[M]]).\nFor each L ∈ R̃−1[[M]], choose M(L) from { M ∈ M ; L = R−1[[M ]] } 6= ∅. For each i = 0, . . . , l − 1, because n = 1, there exists exactly one vi such that R(si, vi) and vi ∈ [M(Li+1)]\n<ω. Since si 6∈ Li, vi 6⊆ M(Li). Because the class of finite sets vi\\M(Li) satisfies the Hall’s condition of the marriage [31, Theorem 3.41] theorem, we have a system {yi ; i ∈ N} of distinct representative. Obviously yi 6∈ M(Li). Define\nf(a) := 〈〈 y0, M(L1) 〉 , . . . , 〈 yl−1, M(Ll) 〉 〉 .\nWe have indeed f(a) ∈ Prod(M), because for 0 ≤ i < j ≤ l, since si ∈ Lj, yi ∈ vi ⊆ M(Lj). The mapping f is indeed injective by the construction. Clearly f preserves the greatest upper bounds.\nThe verification of the equality is as follows: By n = 1 and the assumption of Theorem 7, we have ∃v ∈ [Mi] <ω . R(ξ(yj), v) ⇐⇒ {yj} = v ⊆ Mi. So ξ is injective. Moreover\n(11) ξ(yj) ∈ R −1[[Mi]] ⇐⇒ yj ∈ Mi.\nDefine a function g as:\nb = 〈〈 y0, M1 〉, . . . , 〈 yl−1, Ml 〉〉 ∈ Prod(M)\n7→ g(b) := 〈 〈ξ(y0), R−1[[M1]] 〉, . . . , 〈 ξ(yl−1), R−1[[Ml]] 〉 〉 .\nThen g(b) ∈ Prod(R̃−1 [[M]]) by (11). The injectivity of g is from that of ξ. The preservation of glb’s by g is easy.\nNext we prove the case where n > 1 and dimM < ω. There are relations Ri ⊆ ⋃ L × [ ⋃ M]<ω such that for all x ∈ ⋃ L and all v ∈ [ ⋃ M]<ω\nR =\nn⋃\ni=1\nRi and #{v ; Ri(x, v)} ≤ 1.\nThen for all M ∈ M, we have R−1[[M ]] = ⋃n\ni=1 R −1 i [[M ]], because the left-hand\nside is {s ∈ ⋃ L ; ∃v ⊆ M. R(s, v)} = ⋃n i=1 {s ∈ ⋃ L ; ∃v ⊆ M. Ri(s, v)} which is the right-hand side. So we have\nR̃−1[[M]] ⊆ R̃−11 [[M]] ∪̃ · · · ∪̃ R̃ −1 n [[M]].\nBy Lemma 6, we have\ndim R̃−1[[M]] + 1 ≤ Ram(dim R̃−11 [[M]] + 2, . . . , dim R̃ −1 n [[M]] + 2).\nSince we have already proved (10), we can use (10) to derive dim R̃−1i [[M]] ≤ dimM < ω. The monotonicity of Ram concludes the desired consequence.\nWe will use Theorem 7 again to derive the linearization (Corollary 6) of wqos. Let us see an example of the inequality (10) of Theorem 7.\nCorollary 5. Let L and M be fesss.\n(1) Let R be { (s, {〈 s, s 〉}) ; s ∈ ⋃ L ∩ ⋃ M } .\n(a) R̃−1 [ [L ×̃ M] ] = L ∩̃ M.\n(b) L ×̃ M is an fess.\n(c) If dimL < ω and dimM < ω, then\ndim(L ×̃ M) ≥ dimL+ dimM− 1 ≥ dim(L ∩̃ M).\nThe inequalities are best possible. (2) dimM = dim !M.\nProof. (1a) is immediate. To prove (1b), assume L ×̃ M is not an fess. Then we have an infinite production sequence\n〈 〈(t0, p0), L1 ×M1〉, 〈(t1, p1), L2 ×M2〉, . . . 〉 ∈ Prod(L ×̃ M).\nWhen k := sup{i ; Li 6∋ ti} < ∞, then for all i > k, we have Mi 6∋ pi, and\nthus an infinite production sequence 〈 〈pk,Mk+1〉, 〈pk+1,Mk+2〉, . . . 〉 of M, contra-\ndicting the fe of M. Otherwise, we have an infinite sequence i0, i1, . . . such that〈 〈ti0 , Li1〉, 〈ti1 , Li2〉, . . . 〉 ∈ Prod(L), contradicting the fe of L.\nTo show dim(L ×̃ M) ≥ dimL+ dimM− 1 of (1c), let 〈 〈t0, L1〉, 〈t1, L2〉, . . . , 〈tl−1, Ll〉 〉 ∈ Prod(L),\n〈 〈p0,M1〉, 〈p1,M2〉, . . . , 〈pm−1,Mm〉 〉 ∈ Prod(M).\nThen the class L ×̃ M has a following production sequence consisting of (l+m−1) members of L ×̃ M: 〈 〈(t0, p0), L1 ×M1〉, 〈(t0, p1), L1 ×M2〉, . . . , 〈(t0, pm−1), L1 ×Mm〉,\n〈(t1, pm−1), L2 ×Mm〉, 〈(t2, pm−1), L3 ×Mm〉, . . . , 〈(tl−1, pm−1), Ll ×Mm〉 〉 .\nThus l + m − 1 ≤ dim(L ×̃ M). Since dimL < ω and dimM < ω, we have dimL+ dimM− 1 ≤ dim(L ×̃ M). The equality is attained by L = M = {{1}}.\nTo verify the inequality dimL+ dimM− 1 ≥ dim(L ∩̃ M) of (1c), let 〈 〈t0, L1 ∩M1〉, 〈t1, L2 ∩M2〉, . . . , 〈tn−1, Ln ∩Mn〉 〉 ∈ Prod(L ∩̃ M).\nThen ti ∈ ⋃ L ∩ ⋃ M, and for every positive integer i ≤ n, we have {t0, . . . , ti−1} ⊆ Li ∩Mi 6∋ ti. So for each positive i ≤ n − 1, Li 6∋ ti or Mi 6∋ ti. Let i1, . . . , il be the strictly ascending list of positive integers i such that Li 6∋ ti, and j1, . . . , jm be the strictly ascending list of positive integers j such that Mj 6∋ tj . Then il 6=\nn, jm 6= n, and so 〈 〈t0, Li1〉, 〈ti1 , Li2〉, . . . , 〈til−1 , Lil〉, 〈til , Ln〉 〉 ∈ Prod(L), and 〈 〈t0,Mj1〉, 〈tj1 ,Mj2〉, . . . , 〈tjm−1 ,Mjm〉, 〈tjm ,Mn〉 〉 ∈ Prod(M). Therefore l + 1 ≤\ndimL as well as m+1 ≤ dimM. Because n−1 ≤ l+m, we have dim(L ∩̃ M)−1 ≤ (dimL−1)+(dimM−1), from which the conclusion follows. The latter inequality of Corollary 5 (1c) is best possible. The equality holds for\n(12) L = {∅, {0}, {0, 1, 2}} and M = {∅, {1}, {0, 1, 2}},\nbecause\n(13) L ∩̃ M = {∅, {0}, {1}, {0, 1, 2}}, dim(L ∩̃ M) = 3, dimL = dimM = 2.\nThe assertion (2) holds, because of Definition 9, n = 1, and ξ(y) = {y}.\nThere are many equivalent definitions of wqos (see [20, Theorem 2.1] and [4].) In [34], Cholak-Marcone-Solomon studied for which definition of wqo and which subsystem of second order arithmetic [35] proves\nX and Y are wqos ⇒ X ∩ Y and X × Y are wqos.\nThe results are certainly related to a question “for which ordinal number do we have otp(X ), otp(Y) < α ⇒ otp(X ∩ Y) < α?” We conjecture that we can take as α the proof-theoretic ordinal Γ0. According to Simpson [35, Ch. V], Γ0 is the prooftheoretic ordinal of a formal system which can formalize and develop significant parts of order (type) theory. I wonder whether we can take as α the the first nonrecursive ordinal. If dim(L) were almost equal to otp(qo (L)) (cf. Remark 3), then we would smoothly study which ordinal numbers satisfy\ndim(L), dim(M) < α ⇒ dim(L⊙M) < α, (⊙ =×̃, ∪̃, ∩̃, . . . .)\nA Ramsey number argument used in the proof of Lemma 6 establishes an upper bound of a wqo obtained as the intersection of wqos.\nTheorem 8.\notp(X ), otp(Y) < ω ⇒ otp (X ∩ Y) < Ram(otp(X ) + 1, otp(Y) + 1, 2).\nProof. The proof is similar as that of Lemma 6. Assume X = (X, ), Y = (Y,⊑) and 〈t1, t2, . . . , tm〉 is a bad sequence of X ∩Y. Then for all i, j with 1 ≤ i < j ≤ m, we have ti 6 tj or ti 6⊑ tj . For the complete graph consisting of {1, . . . ,m}, color all edges {i, j} (i 6= j) by red if ti 6 tj , and color the other edges by black. Then there is a red complete graph consisting of size otp(X ) + 1, or a black complete graph of size otp(Y) + 1. For the former case, the bad sequence 〈t1, t2, . . . , tm〉 has a bad subsequence, which consists of terms with the suffixes from the red graph’s vertices. This bad sequence of X has the length otp(X )+1, a contradiction. For the latter case, the black complete graph of size otp(Y) + 1 induces a bad subsequence of Y having the length otp(Y) + 1, a contradiction. Thus, we have the desired consequence.\nOne may conjecture\n(14) ss (X ∩ Y) ⊂ ss (X ) ∩̃ ss (Y)\nin order to derive a following asymptotic improvement of Theorem 8\n(15) otp(X ∩ Y) < otp(X ) + otp(Y) for otp(X ), otp(Y) < ω,\nwith an argument below: By (14) and Theorem 2 (1), we have otp(X ∩ Y) ≤ dim ( ss (X ) ∩̃ ss (Y) ) , but Corollary 5 (1c) implies the latter is less than or equal to dim ss (X ) + dim ss (Y)− 1 = otp(X ) + otp(Y) − 1. However the inclusion of (14) is actually opposite, when X ,Y are following wqos ≤0 and ≤1. Let ≤i (i = 0, 1) be a wqo over {0, 1, 2} such that the pair of ss (≤i) (i = 1, 2) is the pair of L and M presented in (12), which attains dimL+dimM− 1 = dim(L ∩̃ M). Namely, ≤i is such that two elements other than i are mutually related by ≤i and are strictly lower than i by ≤i. Then ≤0 ∩ ≤1 becomes a wqo such that the elements 0 and 1 are not comparable but are strictly greater than the element 2. Thus ss (≤0 ∩ ≤1) = {∅, {0}, {1}, {0, 1}, {0, 1, 2}} ⊃ ss (≤1) ∩̃ ss (≤2) = {∅, {0}, {1}, {0, 1, 2}}."
    }, {
      "heading" : "6. Embedding of the category of quasi-orders and finitely branching simulations",
      "text" : "In hope that we could import idea and results on closure properties of wqos and bqos to study those of fes, we show that ss (•) studied in Section 3 becomes a neat embedding from the category of quasi-orders and finitely branching simulations to the category of set systems and linear monotone, continuous functions. Here a “simulation” is used widely in theoretical computer science (see [36].) “Linear” is used in the model theory of linear logic [17] and we will point out that it corresponds to Kanazawa’s relation R ⊆ X × Y (see Proposition 5.)\nBy “neat embedding,” we mean that ss (•) not only preserves order types but also, in the jargon of category theory [37], becomes an injective-on-objects, full and faithful contravariant functor right adjoint to a functor that qo (•) (see Section 3) induces.\nDefinition 10 (Finitely Branching Simulation). Let X = (X, ) and Y = (Y,⊑) be quasi-orders. We say a relation R is a simulation of X by Y, provided R ⊆ X × Y and whenever R(x, y) and x x′, there exists y′ ⊒ y such that R(x′, y′). We say a simulation R is finitely branching if #{y ; R(x, y)} < ∞ for every x.\nExample 2 (Lineariztion). (1) For an order-homomorphism f : X → Y, a relation Rf := {(x, y) ; f(x) = y} is a finitely branching simulation of X by Y.\n(2) For every surjective order-homomorphism f from a quasi-orderX to a linear order Y, the relation Rf is a finitely branching simulation of X by Y. In this case, we call Y a linearization of X .\nLemma 7. Let X and Y be quasi-orders. If R is a simulation of X by Y, then R̃−1[ss (Y)] ⊆ ss (X ).\nProof. Let X = (X, ) and Y = (Y,⊑). Any member of R̃−1[ss (Y)] is written as a set L := {x ∈ X ; ∃g ∈ M. ∃y ⊒ g. R(x, y)} for some M ∈ ss (Y). Suppose x′ x ∈ L. Then because R is a simulation, there is y′ such that y′ ⊒ y and R(x′, y′). By the transitivity of ⊑, we have y′ ⊒ g. Therefore x′ ∈ L. Thus L is an upper-closed set, which implies L ∈ ss (X ).\nBy Lemma 7, we have a so-called linearization lower bound [21, Sect. 2]:\nCorollary 6. For any linearization Y of X , otp(Y) ≤ otp(X ).\nProof. By the premise, there is a surjective order-homomorphism f : X → Y. Because a relation Rf is a simulation, Lemma 7 implies dim ss (X ) ≥ dim R̃ −1 f [ss (Y)] from which Theorem 2 (1) implies\n(16) otp(X ) ≥ dim R̃−1f [ss (Y)].\nPut\nQf := { (x, {y}) ; f(x) = y } ⊆ ⋃ ss (X )× [⋃ ss (Y) ]<ω .\nThen #{v ; Qf (s, v)} = #{v ; {f(s)} = v} ≤ 1 and\n(17) dim R̃−1f [ss (Y)] = dim Q̃ −1 f [[ss (Y)]],\nbecause R̃−1f [ss (Y)] = {R −1 f [M ] ; M ∈ ss (Y)} =\n{ {x ∈ ⋃ ss (X ) ; ∃y ∈ M. f(x) =\ny} ; M ∈ ss (Y) } = { {x ∈ ⋃ ss (X ) ; ∃v ∈ [M ]<ω . Qf (x, v)} ; M ∈ ss (Y) } = {Q−1f [[M ]] ; M ∈ ss (Y)} = Q̃ −1 f [[ss (Y)]].\nSince f : X → Y is surjective and ⋃ ss (Y) is the underlying set of Y, there is\na right-inverse ξ : ⋃ ss (Y) → ⋃ ss (X ) of f . In other words, each y ∈ ⋃ ss (Y) has ξ(y) ∈ ⋃ ss (X ) such that f(ξ(y)) = y, i.e., Rf (ξ(y), y). Hence Qf (ξ(y), {y}). By Theorem 7, dim Q̃−1f [[ss (Y)]] = dim ss (Y) = otp(Y). By (17), dim R̃ −1 f [ss (Y)] = otp(Y). By (16), we have the desired consequence.\nWe will define the categoryQOFinSim of quasi-orders and finitely branching simulations between them, as well as a suitable category of set systems and monotone, continuous functions between them, and then will show that the operation ss (•) becomes a contravariant, functor from the former category QOFinSim to the latter category, and that the functor ss (•) is order-type-preserving, injective-on-objects, full and faithful. For notion of category theory, see [37].\nDefinition 11. The category QOFinSim of quasi-orders and finitely branching simulations between them is defined as follows: The objects are quasi-orders (X, ). The identity morphism of object X = (X, ) is idX = {(x, x) ; x ∈ X}. The morphisms from X = (X, ) to Y = (Y,⊑) are finitely branching simulations R ⊆ X × Y . For morphisms R : (X, ) → (Y,⊑) and S : (Y,⊑) → (Z,E), the composition is defined as the relational composition\nS ◦R = {(x, z) ; R(x, y) and S(y, z) for some y ∈ Y }.\nLet QO be the category of quasi-ordered sets and order-homomorphisms between them. Then there is a faithful, identity-on-objects functor from QO to QOFinSim, because of Example 2 (1).\nDefinition 12 (Linear, Sequential). Let D and C be set systems and O : D → C be a monotone, continuous function. O is said to be linear, if there is R ⊆ fld(C) × [fld(D)]<2 such that O = OR. O is said to be sequential, if there is R ⊆ fld(C)×[fld(D)]<ω such that O = OR and #{v ; R(s, v)} ≤ 1 for all s ∈ fld(C).\nLet SS be the category of set systems and monotone, continuous functions between them. Let SSlin (SSseq, resp.) be the category of set systems and linear (sequential, resp.) monotone, continuous functions between them.\nThus every object C of SS is written as iL for some set system L. Let COHstable be the cartesian closed category of coherence spaces and stable functions between them, introduced by Girard [17]. Here a stable function was originally introduced by Berry in an attempt to give a semantic characterization of sequential algorithms. Defining coproducts in COHstable is difficult according to [17]. However not in SS and SSlin. It is because the morphisms of the two categories can represent nondeterministic computations as we saw in the proof of Section 5.\nTheorem 9. (1) SS and SSlin are indeed complete categories with all finite coproducts. In SS and SSlin, for objects iLj (j ∈ J), the coproduct is (18) iL := ⊕\nj∈J\niLj where L = { L× {j} ; L ∈ Lj , j ∈ J } ,\nand the product is i (⊎̃ j∈JLj ) .\n(2) A following ι is a full functor from COHstable to SSseq :\nι(A) = iA, ι(A F → B) = iA\ni −1 → A F → B i → iB.\nProof. See A.\nIn SSseq , the dimension of an object is a categorical notion.\nTheorem 10. If C and D are isomorphic objects in SSseq, dim i−1C = dim i−1D.\nProof. Because one object is the image of the other object by a sequential function, the former dimension is less than or equal to the latter dimension by Theorem 7 (10).\nFollowing proves a part of Proposition 4 by Moriyama-Sato [12].\nTheorem 11. If L and M are fesss, dim i−1 (iL1 ⊕ iL2) = max(dimL1, dimL2) and the union L1 ∪ L2 is an fess.\nProof. Because i−1 (iL1 ⊕ iL2) = {L × {j} ; L ∈ Lj , j = 1, 2}, any production sequence of it is exactly written as 〈 〈(t0, j), N1×{j}〉, 〈(t1, j), N2×{j}〉, . . . , 〈(tn−1, j), Nn× {j}〉 〉 for some n, Ni ∈ Lj (1 ≤ i ≤ n) and ti ∈ Ni (0 ≤ i ≤ n − 1). Therefore, Prod(i−1 (iL1 ⊕ iL2)) is the disjoint sum of Prod(L1) and Prod(L2), from which the conclusion follows.\nThe second assertion is because i(L ∪M) is the direct image by the monotone, continuous function OR2 : iL⊕ iM → i (L ∪M) of iL⊕ iM where R2 is defined in (8).\nDefinition 13. (1) Define a contravariant functor Ss from QOFinSim to SSlin as follows. Let X = (X, ),Y = (Y,⊑) be objects of QOFinSim. Put Ss(X ) := i(ss (X )). For each morphism R from X to Y, let Ss(R) be the monotone, linear, continuous function O\nR̂ : Ss(Y) → Ss(X ) with the trace\nR̂ = {(x, {y}) ; R(x, y)}. (2) Define a contravariant functor Qo from SSlin to QOFinSim as follows. Let\nC be an object of SSlin. Put Qo (C) := qo ( i −1C ) . For each morphism OR : D → C in SSlin, let Qo(OR) be a finitely branching simulation Ř := {(x, y) ; R(x, {y})} ⊆ fld(C)× fld(D) of QOFinSim.\nLemma 8. (1) Ss is indeed a functor QOopFinSim from to SSlin . (2) Qo is indeed a functor from SSlin to QO op FinSim.\nProof. (1) For every morphism R : X → Y of QOFinSim, Ss(R) [i(ss (Y))] =\nOR [i (ss (Y))] is i ( R̃−1 [ss (Y)] ) by (5), a subset of i (ss (X )) by Lemma 7 with\nR being a simulation. Thus Ss(R) is indeed a function from i (ss (Y)) to i (ss (X )). The functoriality is because\nOS◦R(g)(x) = ∨\nR(x,y) ∨ S(y,z)(g(z) = 1) = ∨ R(x,y) (OS(g)(y) = 1)\n= OR (OS(g)) (x) = (OR ◦OS) (g)(x).(19)\n(2) Firstly, we establish the well-definedness of Qo. For any finitely branching relations R,S ⊆ X × Y , OR = OS implies R = S. To see it, suppose OR = OS. If R(x, y), then OR(1{y})(x) = 1 = OS(1{y})(x) = ∨ S(x,y′)(y ′ = y), which implies S(x, y). Therefore R = S.\nNext, Qo preserves the identity morphism, because Qo (O∆) = ∆ for every set A and for every diagonal relation on A × A. Qo (OR ◦OS) = Qo (OS) ◦ Qo (OR) follows from (19).\nAccording to [37, Theorem IV.1.1, Theorem IV.1.2], a functor G : A → X is a left adjoint functor to a functor F : X → A if and only if there are natural transformations η : IdX · → GF and ε : FG · → IdA such that both the following composites are the identity natural transformations (of G, resp. F .)\n(20) G ηG −→ GFG Gε −→ G, F Fη −→ FGF εF −→ F.\nη is called the unit and ε is called the counit. The opposite category of a category A is denoted by Aop.\nTheorem 12. The functor Qo : SSlin → QO op FinSim is a left adjoint functor to the functor Ss : QOopFinSim → SSlin where the counit of the adjunction is the identity natural transformation of the identity functor IdQOop\nlin .\nProof. By Theorem 2 (1) and the definition, the composite Qo ◦ Ss is the identity functor of QOlin . Define the unit ηC : C → Ss(Qo (C)) by the inclusion map. Then (20) follows immediately.\nCorollary 7. The functor Ss is an injective-on-objects, full and faithful functor from QOFinSim to SS op lin. Moreover otp(X ) = dim i\n−1Ss(X ) for every object X of QOFinSim.\nProof. The first assertion follows from Theorem 12, because every right adjoint functor is full and faithful whenever every component of the counit is an isomorphism [37, Theorem IV.3.1]. The other assertion follows from Theorem 2 (1)."
    }, {
      "heading" : "Acknowledgement",
      "text" : "The author sincerely thanks Dr. Matthew de Brecht, Hajime Ishihara, and anonymous referees. This work is partially supported by Grant-in-Aid for Scientific Research (C) (21540105) of the Ministry of Education, Culture, Sports, Science and Technology (MEXT.)"
    }, {
      "heading" : "Appendix A. The categories of set systems and linear/sequential",
      "text" : "monotone, continuous functions\nFirst we will prove Theorem 9. iL and iLj are as in the Theorem. See Figure 1 (right).\nFor each j ∈ J , the injection ιj : iLj → iL is OTj where\nTj := { (〈x, j〉, {x}) ; x ∈ ⋃ Lj , j ∈ J } ⊆ fld(iL)× [fld(iLj)] <2 .\nFor any set { OSj : iLj → D ; j ∈ J } of morphisms of SS, define\nS := {(y, vj × {j}) ; Sj(y, vj), j ∈ J } ⊆ fld(D)× P (fld(iL)) ,\nand a possibly non-continuous function F : iL → D by (21) F(h)(y) := ∨\nS(y,v)\n∧\nx∈v\nh(x) = 1. (h ∈ iL, y ∈ fld(D).)\nTheorem 9. (1) The two categories are closed under composition because of (4). The terminal object is {∅} = {0, 1}∅. Any monotone, continuous function OR : C → {0, 1}∅ has R ⊆ ∅ × [fld(C)]<ω and thus R = ∅. Actually, for any g ∈ C and x ∈ ∅, we have OR(g)(x) = ∨ R(x,v) ∧ y∈v(g(y) = 1).\nFor arbitrary nonempty set Λ, the product of objects i(Lλ) (λ ∈ Λ) is just the C = i ( ⊎̃λ∈Λ Lλ ) . For each λ ∈ Λ, the projection Πλ : C → iLλ is Πλ(h) := h (〈•, λ〉) for all h ∈ C. For any ORλ : D → iLλ (λ ∈ Λ), the mediating morphism OR of Figure 1 is defined by R ⊆ fld(C)× [fld(D)]<ω where R := {(〈s, λ〉, v) ; Rλ(s, v)}. The OR is a morphism of SS (and SSlin resp.) if ORλ ’s are.\nThe equalizer O : iN → iM of a pair of functions O1,O2 : iM ⇒ iL is defined by\niN := {g ∈ iM ; O1(g) = O2(g)}, O(g)(x) := g(x) (g ∈ iN , x ∈ ⋃ M.)\nFor Figure 1 (middle), the mediating morphism Õ : D → iN is defined by Õ(g)(y) = O′(g)(y) for any g ∈ D and any y ∈ ⋃ N .\nThe initial object is ∅. Any function from ∅ to C is the function ∅, which is monotone, continuous because for any g ∈ ∅ and any x ∈ fld(C), we have ∅(g)(x) = O∅(g)(x) = ∨ ∅(x,v) ∧ y∈v (g(y) = 1).\nThe existence of a binary coproduct is because the finiteness of J implies the F is indeed a morphism of SS (SSlin resp.) if OSj ’s are.\n(2) According to [17, Section 8.5], the stable function F : A → B is exactly a function from A to B having a trace. Here the trace of F is the set R of pairs (x, v) ∈ ⋃ B × [ ⋃ A]<ω such that v is a minimal (and actually the minimum) among L’s such that x ∈ F (L). A stable function F is recovered from the trace R by F (L) = {x ∈ ⋃ B ; ∃v ⊆ L. R(x, v)} for all L ∈ A. So ι(F ) = i ◦ F ◦ i−1 is written asOR. Because v is minimum, and is in particular unique, OR is sequential, i.e., OR ∈ SSseq. So ι is indeed well-defined. We can easily see that ι is indeed a functor.\nNext we verify that the functor ι is indeed full. Let OR : ι(A) → ι(B) be a morphism of the category SSseq. Recall OR(1L)(x) = 1 ⇐⇒ ∃v ⊆ L. R(x, v). Because OR is sequential, each x has at most one v such that R(x, v). So R is the set of pairs (x, v) such that v is minimum among L’s such that OR(1L)(x) = 1. Thus i−1 ◦ F ◦ i is the stable function with the trace being R.\nLemma 9. None of SS, SSlin and SSseq does not have the object iL of (18) as a coproduct if J is infinite. Even SSseq does not for 2 ≤ #J ≤ ∞.\nProof. We show that F : iL → D of (21) is not a morphism of SS, when\n(22) Sµ := {(y, ∅) ; y ∈ fld(D)} ⊆ fld(D)× [fld(iL)] <2 , (µ ∈ J) Let y ∈ fld(D). Because J is infinite but S ⊆ fld(D) × [fld(iL)]<ω, there is µ ∈ J \\ {j ; ∃v ∈ [fld(iL)]<ω . S(y, v) ∧ ∃ξ ∈ v∃a. ξ = 〈 a, j 〉 }. Let f ∈ iLµ such that f(x) = 1 for all x ∈ fld(iLµ). Then by Figure 1 (right), we have (OS ◦ ιµ) (f)(y) = OSµ(f)(y). Therefore∨\nS(y,v)\n∧\nξ∈v\n(ιµ(f)(ξ) = 1) = ∨\nSµ(y,u)\n∧\nx∈u\n(f(x) = 1).\nHere ξ ∈ v is written as ξ = 〈a, j〉 for some j 6= µ. So ιµ(f)(〈a, j〉) = 0, which implies the left-hand side is 0. But, the right-hand side is 1 by (22).\nIt is difficult to relate dim(L ×̃ M) with dim(L ∪̃ M). When L and M are both coherence spaces, L ×̃ M is the “tensor product” L ⊗M. Lemma 10. Let L and M be set systems with ⋃ L infinite and ⋃ M 6= ∅. Then,\n(1) There is no monotone, continuous function O : i(L ×̃ M) → i(L ∪̃ M) such that O(1L×M) = 1L∪M for all L ∈ L and M ∈ M.\n(2) There is no monotone, continuous function O : i(L ×̃ M) → iM such that O(1L×M ) = 1M for all L ∈ L and M ∈ M.\nProof. (1) Let X := ⋃ L and Y := ⋃ M. Assume there is such O. Then for each s ∈ X∪Y , there exists a positive Boolean formula Bs over {v(x,y) ; x ∈ X, y ∈ Y }, such that O(1L×M )(s) is the truth value of Bs under the truth assignment 1L×M for all L ∈ L and all M ∈ M. Choose some y ∈ Y . There is a variable v(x,y) such that it does not appear By, because X is infinite. Therefore the truth value of By under the truth assignment 1{(x,y)} is 0 because By does not contain negations of Boolean variables. On the other hand O(1{(x,y)})(y) = 1{x}∪{y}(y) = 1. Contradiction. The assertion (2) is similarly proved.\nThe bang operator of a coherence space have following counterparts in SS:\n!iL := i!L\nwhere the ‘!’ in the right-hand side is defined in Theorem 5. Then !L ×̃ !M is isomorphic to L ⊎̃ M, as in the case of COHstable. The duality operator of a coherence space, however, seems to have no exact counterpart in SS, when we take an fe seriously. Since the elementwise complement of an fess is not necessarily an fess, the complement operation seems useless in defining the duality operator in SS. So let us examine the exchange of Teacher and Learner. To be precise, For a set system L and x ∈ L, put L(x) := {L ∈ L ; x ∈ L}, and L⊥ := { L(x); x ∈ ⋃ L }. Then ⋃( L⊥ ) := L\\{∅}. If L is the class of open sets of a sober space, then ( L⊥ )⊥ is isomorphic to L in SS. Since L ∈ L⊥(x) iff x ∈ L,\n〈〈 t0, L1 〉, 〈 t1, L2 〉, . . . , 〈 tl−2, Ll−1 〉, 〈 tl−1, Ll 〉〉 ∈ Prod(L)\n⇐⇒\n〈〈Ll, L(tl−1) 〉, 〈Ll−1, L(tl−2) 〉, . . . , 〈L2, L(t1) 〉, 〈L1, L(t0) 〉〉 ∈ Prod(L ⊥)\nWe have an embedding from Prod(L) to Prod( ( L⊥ )⊥ ), by ⋂⋂(( L⊥ )⊥ (L) ) = L. Thus dimL ≤ dim ( L⊥ )⊥ .\nFurther categorical structures will be studied elsewhere.\nMathematical Institute, Tohoku University Sendai Miyagi JAPAN, 980-8578., (tel) +81-22-795-7708 (fax) +81-22-795-6400\nE-mail address: akama@m.tohoku.ac.jp"
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2011,
    "abstractText" : "By reformulating a learning process of a set system L as a game<lb>between Teacher and Learner, we define the order type of L to be the order<lb>type of the game tree, if the tree is well-founded. The features of the order type<lb>of L (dimL in symbol) are (1) We can represent any well-quasi-order (wqo<lb>for short) by the set system L of the upper-closed sets of the wqo such that<lb>the maximal order type of the wqo is equal to dimL. (2) dimL is an up-<lb>per bound of the mind-change complexity of L. dimL is defined iff L has<lb>a finite elasticity (fe for short), where, according to computational learning<lb>theory, if an indexed family of recursive languages has fe then it is learnable<lb>by an algorithm from positive data. Regarding set systems as subspaces of<lb>Cantor spaces, we prove that fe of set systems is preserved by any continuous<lb>function which is monotone with respect to the set-inclusion. By it, we prove<lb>that finite elasticity is preserved by various (nondeterministic) language op-<lb>erators (Kleene-closure, shuffle-closure, union, product, intersection,. . ..) The<lb>monotone continuous functions represent nondeterministic computations. If a<lb>monotone continuous function has a computation tree with each node followed<lb>by at most n immediate successors and the order type of a set system L is α,<lb>then the direct image of L is a set system of order type at most n-adic diagonal<lb>Ramsey number of α. Furthermore, we provide an order-type-preserving con-<lb>travariant embedding from the category of quasi-orders and finitely branching<lb>simulations between them, into the complete category of subspaces of Cantor<lb>spaces and monotone continuous functions having Girard’s linearity between<lb>them. Keyword: finite elasticity, shuffle-closure, Ramsey’s theorem, finitely<lb>branching simulation, game, order type",
    "creator" : "dvips(k) 5.98 Copyright 2009 Radical Eye Software"
  }
}