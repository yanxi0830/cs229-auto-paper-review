{
  "name" : "1409.8185.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Adaptive Low-Complexity Sequential Inference for Dirichlet Process Mixture Models",
    "authors" : [ "Theodoros Tsiligkaridis", "Keith W. Forsythe" ],
    "emails" : [ "ttsili@ll.mit.edu", "forsythe@ll.mit.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Dirichlet process mixture models (DPMM) have been widely used for clustering data [9, 11]. Traditional finite mixture models often suffer from overfitting or underfitting of data due to possible mismatch between the model complexity and amount of data. Thus, model selection or model\nThis work is sponsored by the Assistant Secretary of Defense for Research & Engineering under Air Force Contract #FA8721-05-C-0002. Opinions, interpretations, conclusions and recommendations are those of the author and are not necessarily endorsed by the United States Government.\nar X\niv :1\n40 9.\n81 85\nv3 [\nst at\n.M L\n] 1\naveraging is required to find the correct number of clusters or the model with the appropriate complexity. This requires significant computation for high-dimensional data sets or large samples. Bayesian nonparametric modeling are alternative approaches to parametric modeling, an example being DPMM’s which can automatically infer the number of clusters from the data via Bayesian inference techniques.\nThe use of Markov chain Monte Carlo (MCMC) methods for Dirichlet process mixtures has made inference tractable [10]. However, these methods can exhibit slow convergence and their convergence can be tough to detect. Alternatives include variational methods [3], which are deterministic algorithms that convert inference to optimization. These approaches can take a significant computational effort even for moderate sized data sets. For largescale data sets and low-latency applications with streaming data, there is a need for inference algorithms that are much faster and do not require multiple passes through the data. In this work, we focus on low-complexity algorithms that adapt to each sample as they arrive, making them highly scalable. An online algorithm for learning DPMM’s based on a sequential variational approximation (SVA) was proposed in [8], and the authors in [15] recently proposed a sequential maximum a-posterior (MAP) estimator for the class labels given streaming data. The algorithm is called sequential updating and greedy search (SUGS) and each iteration is composed of a greedy selection step and a posterior update step.\nThe choice of concentration parameter α is critical for DPMM’s as it controls the number of clusters [1]. While most fast DPMM algorithms use a fixed α [6, 4, 7], imposing a prior distribution on α and sampling from it provides more flexibility, but this approach still heavily relies on experimentation and prior knowledge. Thus, many fast inference methods for Dirichlet process mixture models have been proposed that can adapt α to the data, including the works [5] where learning of α is incorporated in the Gibbs sampling analysis, [3] where a Gamma prior is used in a conjugate manner directly in the variational inference algorithm. [15] also account for model uncertainty on the concentration parameter α in a Bayesian manner directly in the sequential inference procedure. This approach can be computationally expensive, as discretization of the domain of α is needed, and its stability highly depends on the initial distribution on α and on the range of values of α. To the best of our knowledge, we are the first to analytically study the evolution and stability of the adapted sequence of α’s in the online learning setting.\nIn this paper, we propose an adaptive non-Bayesian approach for adapting α motivated by large-sample asymptotics, and call the resulting algorithm ASUGS (Adaptive SUGS). While the basic idea behind ASUGS is directly related to the greedy approach of SUGS, the main contribution is a novel low-complexity stable method for choosing the concentration parameter adaptively as new data arrive, which greatly improves the clustering per-\nformance. We derive an upper bound on the number of classes, logarithmic in the number of samples, and further prove that the sequence of concentration parameters that results from this adaptive design is almost bounded. We finally prove, that the conditional likelihood, which is the primary tool used for Bayesian-based online clustering, is asymptotically Gaussian in the large-sample limit, implying that the clustering part of ASUGS asymptotically behaves as a Gaussian classifier. Experiments show that our method outperforms other state-of-the-art methods for online learning of DPMM’s.\nThe paper is organized as follows. In Section 2, we review the sequential inference framework for DPMM’s that we will build upon, introduce notation and propose our adaptive modification. In Section 3, the probabilistic data model is given and sequential inference steps are shown. Section 4 contains the growth rate analysis of the number of classes and the adaptively-designed concentration parameters, and Section 5 contains the Gaussian large-sample approximation to the conditional likelihood. Experimental results are shown in Section 6 and we conclude in Section 7."
    }, {
      "heading" : "2 Sequential Inference Framework for DPMM",
      "text" : "Here, we review the SUGS framework of [15] for online clustering. Here, the nonparametric nature of the Dirichlet process manifests itself as modeling mixture models with countably infinite components. Let the observations be given by yi ∈ Rd, and γi to denote the class label of the ith observation (a latent variable). We define the available information at time i as y(i) = {y1, . . . ,yi} and γ(i−1) = {γ1, . . . , γi−1}. The online sequential updating and greedy search (SUGS) algorithm is summarized next for completeness. Set γ1 = 1 and calculate π(θ1|y1, γ1). For i ≥ 2,\n1. Choose best class label for yi:\nγi ∈ arg max 1≤h≤ki−1+1\nP (γi = h|y(i), γ(i−1)).\n2. Update the posterior distribution using yi, γi:\nπ(θγi |y(i), γ(i)) ∝ f(yi|θγi)π(θγi |y(i−1), γ(i−1)).\nwhere θh are the parameters of class h, f(yi|θh) is the observation density conditioned on class h and ki−1 is the number of classes created at time i− 1. The algorithm sequentially allocates observations yi to classes based on maximizing the conditional posterior probability.\nTo calculate the posterior probability P (γi = h|y(i), γ(i−1)), define the variables:\nLi,h(yi) def = P (yi|γi = h,y(i−1), γ(i−1)), πi,h(α) def = P (γi = h|α,y(i−1), γ(i−1))\nFrom Bayes’ rule, P (γi = h|y(i), γ(i−1)) ∝ Li,h(yi)πi,h(α) for h = 1, . . . , ki−1+ 1. Here, α is considered fixed at this iteration, and is not updated in a fully Bayesian manner.\nAccording to the Dirichlet process prediction, the predictive probability of assigning observation yi to a class h is:\nπi,h(α) = { mi−1(h) i−1+α , h = 1, . . . , ki−1 α\ni−1+α , h = ki−1 + 1 (1)\nwhere mi−1(h) = ∑i−1\nl=1 I(γl = h) counts the number of observations labeled as class h at time i− 1, and α > 0 is the concentration parameter."
    }, {
      "heading" : "2.1 Adaptation of Concentration Parameter α",
      "text" : "It is well known that the concentration parameter α has a strong influence on the growth of the number of classes [1]. Our experiments show that in this sequential framework, the choice of α is even more critical. Choosing a fixed α as in the online SVA algorithm of [8] requires cross-validation, which is computationally prohibitive for large-scale data sets. Furthermore, in the streaming data setting where no estimate on the data complexity exists, it is impractical to perform cross-validation. Although the parameter α is handled from a fully Bayesian treatment in [15], a pre-specified grid of possible values α can take, say {αl}Ll=1, along with the prior distribution over them, needs to be chosen in advance. Storage and updating of a matrix of size (ki−1 + 1) × L and further marginalization is needed to compute P (γi = h|y(i), γ(i−1)) at each iteration i. Thus, we propose an alternative data-driven method for choosing α that works well in practice, is simple to compute and has theoretical guarantees.\nThe idea is to start with a prior distribution on α that favors small α and shape it into a posterior distribution using the data. Define pi(α) = p(α|y(i), γ(i)) as the posterior distribution formed at time i, which will be used in ASUGS at time i+ 1. Let p1(α) ≡ p1(α|y(1), γ(1)) denote the prior for α, e.g., an exponential distribution p1(α) = λe\n−λα. The dependence on y(i) and γ(i) is trivial only at this first step. Then, by Bayes rule, pi(α) ∝ p(yi, γi|y(i−1), γ(i−1), α)p(α|y(i−1), γ(i−1)) ∝ pi−1(α)πi,γi(α) where πi,γi(α) is given in (1). Once this update is made after the selection of γi, the α to be used in the next selection step is the mean of the distribution pi(α), i.e., αi = E[α|y(i), γ(i)]. As will be shown in Section 5, the distribution pi(α) can be approximated by a Gamma distribution with shape parameter ki and rate parameter λ + log i. Under this approximation, we have αi = ki λ+log i , only requiring storage and update of one scalar parameter ki at each iteration i. The ASUGS algorithm is summarized in Algorithm 1. The selection step may be implemented by sampling the probability mass function {q(i)h }. The posterior update step can be efficiently performed by updating the\nAlgorithm 1 Adaptive Sequential Updating and Greedy Search (ASUGS)\nInput: streaming data {yi}∞i=1, rate parameter λ > 0. Set γ1 = 1 and k1 = 1. Calculate π(θ1|y1, γ1). for i ≥ 2: do\n(a) Update concentration parameter:\nαi−1 = ki−1\nλ+ log(i− 1) .\n(b) Choose best label for yi: γi ∼ {q(i)h } = {\nLi,h(yi)πi,h(αi−1)∑ h′ Li,h′(yi)πi,h′(αi−1)\n} .\n(c) Update posterior distribution:\nπ(θγi |y(i), γ(i)) ∝ f(yi|θγi)π(θγi |y(i−1), γ(i−1)).\nend for\nhyperparameters as a function of the streaming data for the case of conjugate distributions. Section 3 derives these updates for the case of multivariate Gaussian observations and conjugate priors for the parameters."
    }, {
      "heading" : "3 Sequential Inference under Unknown Mean &",
      "text" : "Unknown Covariance\nWe consider the general case of an unknown mean and covariance for each class. The probabilistic model for the parameters of each class is given as:\nyi|µ,T ∼ N (·|µ,T), µ|T ∼ N (·|µ0, coT), T ∼ W(·|δ0,V0) (2)\nwhere N (·|µ,T) denotes the multivariate normal distribution with mean µ and precision matrix T, and W(·|δ,V) is the Wishart distribution with 2δ degrees of freedom and scale matrix V. The parameters θ = (µ,T) ∈ Rd × Sd++ follow a normal-Wishart joint distribution. The model (16) leads to closed-form expressions for Li,h(yi)’s due to conjugacy [14].\nTo calculate the class posteriors, the conditional likelihoods of yi given assignment to class h and the previous class assignments need to be calculated first. The conditional likelihood of yi given assignment to class h and the history (y(i−1), γ(i−1)) is given by:\nLi,h(yi) = ∫ f(yi|θh)π(θh|y(i−1), γ(i−1))dθh (3)\nDue to the conjugacy of the distributions, the posterior π(θh|y(i−1), γ(i−1)) always has the form:\nπ(θh|y(i−1), γ(i−1)) = N (µh|µ (i−1) h , c (i−1) h Th)W(Th|δ (i−1) h ,V (i−1) h )\nwhere µ (i−1) h , c (i−1) h , δ (i−1) h ,V (i−1) h are hyperparameters that can be recursively computed as new samples come in. The form of this recursive computation of the hyperparameters is derived in Appendix A. For ease of interpretation and numerical stability, we define Σ (i) h := (V (i) h ) −1\n2δ (i) h\nas the inverse\nof the mean of the Wishart distributionW(·|δ(i)h ,V (i) h ). The matrix Σ (i) h has the natural interpretation as the covariance matrix of class h at iteration i. Once the γith component is chosen, the parameter updates for the γith class become:\nµ(i)γi = 1\n1 + c (i−1) γi\nyi + c\n(i−1) γi\n1 + c (i−1) γi\nµ(i−1)γi (4)\nc(i)γi = c (i−1) γi + 1 (5)\nΣ(i)γi = 2δ\n(i−1) γi\n1 + 2δ (i−1) γi\nΣ(i−1)γi + 1\n1 + 2δ (i−1) γi\nc (i−1) γi\n1 + c (i−1) γi\n(yi − µ(i−1)γi )(yi − µ (i−1) γi ) T\n(6)\nδ(i)γi = δ (i−1) γi +\n1 2 (7)\nIf the starting matrix Σ (0) h is positive definite, then all the matrices {Σ (i) h } will remain positive definite. Let us return to the calculation of the conditional likelihood (17). By iterated integration, it follows that:\nLi,h(yi) ∝\n( r\n(i−1) h\n2δ (i−1) h\n)d/2 ρd(δ (i−1) h ) det(Σ (i−1) h )\n−1/2( 1 + r (i−1) h\n2δ (i−1) h\n(yi − µ(i−1)h )T (Σ (i−1) h ) −1(yi − µ(i−1)h ) )δ(i−1)h + 12\n(8)\nwhere ρd(a) def =\nΓ(a+ 1 2 ) Γ(a+ 1−d 2 ) and r (i−1) h def = c (i−1) h 1+c (i−1) h . A detailed mathematical\nderivation of this conditional likelihood is included in Appendix B. We remark that for the new class h = ki−1 + 1, Li,ki−1+1 has the form (22) with the initial choice of hyperparameters r(0), δ(0),µ(0),Σ(0)."
    }, {
      "heading" : "4 Growth Rate Analysis of Number of Classes &",
      "text" : "Stability\nIn this section, we derive a model for the posterior distribution pn(α) using large-sample approximations, which will allow us to derive growth rates on\nthe number of classes and the sequence of concentration parameters, showing that the number of classes grows as E[kn] = O(log1+ n) for arbitarily small under certain mild conditions.\nThe probability density of the α parameter is updated at the jth step in the following fashion:\npj+1(α) ∝ pj(α) ·\n{ α j+α innovation class chosen\n1 j+α otherwise\n,\nwhere only the α-dependent factors in the update are shown. The αindependent factors are absorbed by the normalization to a probability density. Choosing the innovation class pushes mass toward infinity while choosing any other class pushes mass toward zero. Thus there is a possibility that the innovation probability grows in a undesired manner. We assess the growth of the number of innovations rn def = kn − 1 under simple assumptions on some likelihood functions that appear naturally in the ASUGS algorithm.\nAssuming that the initial distribution of α is p1(α) = λe −λα, the distribution used at step n + 1 is proportional to αrn ∏n−1 j=1 (1 + α j ) −1e−λα. We make use of the limiting relation\nTheorem 1. The following asymptotic behavior holds:\nlim n→∞\nlog ∏n−1 j=1 (1 + α j )\nα log n = 1.\nProof. See Appendix C.\nUsing Theorem 1, a large-sample model for pn(α) is α rne−(λ+logn)α, suitably normalized. Recognizing this as the Gamma distribution with shape parameter rn+1 and rate parameter λ+log n, its mean is given by αn = rn+1 λ+logn . We use the mean in this form to choose class membership in Alg. 1. This asymptotic approximation leads to a very simple scalar update of the concentration parameter; there is no need for discretization for tracking the evolution of continuous probability distributions on α. In our experiments, this approximation is very accurate.\nRecall that the innovation class is labeled K+ = kn−1 + 1 at the n th step. The modeled updates randomly select a previous class or innovation (new class) by sampling from the probability distribution {q(n)k = P (γn = k|y(n), γ(n−1))}K+k=1. Note that n− 1 = ∑ k 6=K+ mn(k) , where mn(k) represents the number of members in class k at time n. We assume the data follows the Gaussian mixture distribution:\npT (y) def = K∑ h=1 πhN (y|µh,Σh) (9)\nwhere πh are the prior probabilities, and µh,Σh are the parameters of the Gaussian clusters.\nDefine the mixture-model probability density function, which plays the role of the predictive distribution:\nL̃n,K+(y) def = ∑ k 6=K+ mn−1(k) n− 1 Ln,k(y), (10)\nso that the probabilities of choosing a previous class or an innovation (using Eq. 1) are proportional to ∑\nk 6=K+ mn−1(k) n−1+αn−1Ln,k(yn) = (n−1) n−1+αn−1 L̃n,K+(yn)\nand αn−1n−1+αn−1Ln,K+(yn), respectively. If τn−1 denotes the innovation probability at step n, then we have(\nρn−1 αn−1Ln,K+(yn)\nn− 1 + αn−1 , ρn−1 (n− 1)L̃n,K+(yn) n− 1 + αn−1\n) = (τn−1, 1− τn−1) (11)\nfor some positive proportionality factor ρn−1. Define the likelihood ratio (LR) at the beginning of stage n as 1:\nln(y) def =\nLn,K+(y) L̃n,K+(y) (12)\nConceptually, the mixture (10) represents a modeled distribution fitting the currently observed data. If all “modes” of the data have been observed, it is reasonable to expect that L̃n,K+ is a good model for future observations. The LR ln(yn) is not large when the future observations are well-modeled by (10). In fact, we expect L̃n,K+ → pT as n→∞, as discussed in Section 5.\nLemma 1. The following bound holds:\nτn−1 = ln(yn)αn−1\nn− 1 + ln(yn)αn−1 ≤ min ( ln(yn)αn−1 n− 1 , 1 ) .\nProof. The result follows directly from (11) after a simple calculation.\nThe innovation random variable rn is described by the random process associated with the probabilities of transition\nP (rn+1 = k|rn) = { τn, k = rn + 1 1− τn, k = rn . (13)\nThe expectation of rn is majorized by the expectation of a similar random process, r̄n, based on the transition probability σn def = min( rn+1an , 1) instead\n1Here, L0(·) def = Ln,K+(·) is independent of n and only depends on the initial choice of\nhyperparameters as discussed in Sec. 3.\nof τn as Appendix D shows, where the random sequence {an} is given by ln+1(yn+1)\n−1n(λ+ log n). The latter can be described as a modification of a Polya urn process with selection probability σn. The asymptotic behavior of rn and related variables is described in the following theorem.\nTheorem 2. Let τn be a sequence of real-valued random variables 0 ≤ τn ≤ 1 satisfying τn ≤ rn+1an for n ≥ N , where an = ln+1(yn+1)\n−1n(λ+ logn), and where the nonnegative, integer-valued random variables rn evolve according to (13). Assume the following for n ≥ N :\n1. ln(yn) ≤ ζ (a.s.)\n2. D(pT ‖ L̃n,K+) ≤ δ (a.s.)\nwhere D(p ‖ q) is the Kullback-Leibler divergence between distributions p(·) and q(·). Then, as n→∞,\nrn = OP (log 1+ζ √ δ/2 n), αn = OP (log ζ √ δ/2 n) (14)\nProof. See Appendix E.\nTheorem 2 bounds the growth rate of the mean of the number of class innovations and the concentration parameter αn in terms of the sample size n and parameter ζ. The bounded LR and bounded KL divergence conditions of Thm. 2 manifest themselves in the rate exponents of (14). The experiments section shows that both of the conditions of Thm. 2 hold for all iterations n ≥ N for some N ∈ N. In fact, assuming the correct clustering, the mixture distribution L̃n,kn−1+1 converges to the true mixture distribution pT , implying that the number of class innovations grows at most as O(log1+ n) and the sequence of concentration parameters is O(log n), where > 0 can be arbitrarily small."
    }, {
      "heading" : "5 Asymptotic Normality of Conditional Likelihood",
      "text" : "In this section, we derive an asymptotic expression for the conditional likelihood (22) in order to gain insight into the steady-state of the algorithm.\nWe let πh denote the true prior probability of class h. Using the bounds of the Gamma function in Theorem 1.6 from [2], it follows that lima→∞ ρd(a)\ne−d/2(a−1/2)d/2 =\n1. Under normal convergence conditions of the algorithm (with the pruning and merging steps included), all classes h = 1, . . . ,K will be correctly identified and populated with approximately ni−1(h) ≈ πh(i−1) observations at time i−1. Thus, the conditional class prior for each class h converges to πh as i→∞, in virtue of (14), πi,h(αi−1) = ni−1(h)i−1+αi−1 = πh\n1+ OP (log\nζ √ δ/2(i−1))\ni−1\ni→∞−→ πh.\nAccording to (5), we expect r (i−1) h → 1 as i → ∞ since c (i−1) h ∼ πh(i − 1).\nAlso, we expect 2δ (i−1) h ∼ πh(i − 1) as i → ∞ according to (7). Also, from before, ρd(δ (i−1) h ) ∼ e −d/2(δ (i−1) h − 1/2) d/2 ∼ e−d/2(πh i−12 − 1 2) d/2. The parameter updates (4)-(7) imply µ (i) h → µh and Σ (i) h → Σh as i → ∞. This follows from the strong law of large numbers, as the updates are recursive implementations of the sample mean and sample covariance matrix. Thus, the large-sample approximation to the conditional likelihood becomes:\nLi,h(yi) i→∞∝\nlimi→∞\n( 1 +\nπ−1h i−1 (yi − µ (i−1) h ) T (Σ (i−1) h ) −1(yi − µ(i−1)h ) )− i−1 2π−1 h\nlimi→∞ det(Σ (i−1) h ) 1/2\ni→∞∝ e − 1 2 (yi−µh)TΣ−1h (yi−µh) √\ndet Σh (15)\nwhere we used limu→∞(1 + c u) u = ec. The conditional likelihood (15) corresponds to the multivariate Gaussian distribution with mean µh and covariance matrix Σh. A similar asymptotic normality result was recently obtained in [13] for Gaussian observations with a von Mises prior. The asymptotics mn−1(h)n−1 → πh, µ (n) h → µh,Σ (n) h → Σh, Ln,h(y)→ N (y|µh,Σh) as n → ∞ imply that the mixture distribution L̃n,K+ in (10) converges to the true Gaussian mixture distribution pT of (9). Thus, for any small δ, we expect D(pT ‖ L̃n,K+) ≤ δ for all n ≥ N , validating the assumption of Theorem 2."
    }, {
      "heading" : "5.1 Prune & Merge",
      "text" : "It is possible that multiple clusters are similar and classes might be created due to outliers, or due to the particular ordering of the streaming data sequence, as also noted in [8]. These effects can be mitigated by adding a pruning and merging step in the ASUGS algorithm.\nThe pruning step may be implemented as follows. Define w (i) h\ndef = ∑i\nj=1 q (j) h ,\ni.e., the running sum of the posterior weights. The relative weight of each component at the ith iteration may be computed as w̃ (i) h =\nw (i) h∑ k w (i) k . If\nw̃ (i) h < r, then the component is removed.\nThe merging can be implemented by merging two clusters k1 and k2, once the `1 distance between the posteriors over time falls below a threshold\nd. This distance is measured as dq(k1, k2) = 1 i ∑i j=1 |q (j) k1 − q(j)k2 |. This criterion can be implemented in an online fashion by implementing the distance computation recursively. The sufficient statistics are also merged by taking convex combinations µ (i) k1 ← α(i)µ(i)k1 + (1 − α (i))µ (i) k2 and Σ (i) k1 ← α(i)Σ (i) k1 +(1−α(i))Σ(i)k2 , and by adding c (i) k1 ← c(i)k1 +c (i) k2 and δ (i) k1 ← δ(i)k1 +δ (i) k2 ."
    }, {
      "heading" : "6 Experiments",
      "text" : "We apply the ASUGS learning algorithm to a synthetic 16-class example and to a real data set, to verify the stability and accuracy of our method. The experiments show the value of adaptation of the Dirichlet concentration parameter for online clustering and parameter estimation.\nSince it is possible that multiple clusters are similar and classes might be created due to outliers, or due to the particular ordering of the streaming data sequence, we add the pruning and merging step in the ASUGS algorithm as done in [8]. We compare ASUGS and ASUGS-PM with SUGS, SUGS-PM, SVA and SVA-PM proposed in [8], since it was shown in [8] that SVA and SVA-PM outperform the block-based methods that perform iterative updates over the entire data set including Collapsed Gibbs Sampling, MCMC with Split-Merge and Truncation-Free Variational Inference."
    }, {
      "heading" : "6.1 Synthetic Data set",
      "text" : "We consider learning the parameters of a 16-class Gaussian mixture each with equal variance of σ2 = 0.025. The training set was made up of 500 iid samples, and the test set was made up of 1000 iid samples. The clustering results are shown in Fig. 1(a), showing that the ASUGS-based approaches are more stable than SVA-based algorithms. ASUGS-PM performs best and identifies the correct number of clusters, and their parameters. Fig. 1(b) shows the data log-likelihood on the test set (averaged over 100 Monte Carlo trials), the mean and variance of the number of classes at each iteration. The ASUGS-based approaches achieve a higher log-likelihood than SVA-based approaches asymptotically. Fig. 6.1 provides some numerical verification for the assumptions of Theorem 2. As expected, the predictive likelihood L̃i,K+ (10) converges to the true mixture distribution pT (9), and the likelihood ratio li(yi) is bounded after enough samples are processed."
    }, {
      "heading" : "6.2 Real Data Set",
      "text" : "We applied the online nonparametric Bayesian methods for clustering image data. We used the MNIST data set, which consists of 60, 000 training samples, and 10, 000 test samples. Each sample is a 28×28 image of a handwritten digit (total of 784 dimensions), and we perform PCA pre-processing to reduce dimensionality to d = 50 dimensions as in [7].\nWe use only a random 1.667% subset, consisting of 1000 random samples for training. This training set contains data from all 10 digits with an approximately uniform proportion. Fig. 3 shows the predictive log-likelihood over the test set, and the mean images for clusters obtained using ASUGSPM and SVA-PM, respectively. We note that ASUGS-PM achieves higher log-likelihood values and finds all digits correctly using only 23 clusters,\nwhile SVA-PM finds some digits using 56 clusters. Furthermore, the SVAPM results in noisy-looking image clusters, while ASUGS-PM consistently has clear digits."
    }, {
      "heading" : "6.3 Discussion",
      "text" : "Although both SVA and ASUGS methods have similar computational complexity and use decisions and information obtained from processing previous samples in order to decide on class innovations, the mechanics of these methods are quite different. ASUGS uses an adaptive α motivated by asymptotic theory, while SVA uses a fixed α. Furthermore, SVA updates the parameters of all the components at each iteration (in a weighted fashion) while ASUGS only updates the parameters of the most-likely cluster, thus minimizing leakage to unrelated components. The λ parameter of ASUGS does not affect performance as much as the threshold parameter of SVA does, which often leads to instability requiring lots of pruning and merging steps and increasing latency. This is critical for large data sets or streaming applications, because cross-validation would be required to set appropriately. We observe higher log-likelihoods and better numerical stability for ASUGS-based\nmethods in comparison to SVA. The mathematical formulation of ASUGS allows for theoretical guarantees (Theorem 2), and asymptotically normal predictive distribution."
    }, {
      "heading" : "7 Conclusion",
      "text" : "We developed a fast online clustering and parameter estimation algorithm for Dirichlet process mixtures of Gaussians, capable of learning in a single data pass. Motivated by large-sample asymptotics, we proposed a novel low-complexity data-driven adaptive design for the concentration parameter and showed it leads to logarithmic growth rates on the number of classes. Through experiments on synthetic and real data sets, we show our method achieves better performance and is as fast as other state-of-the-art online learning DPMM methods."
    }, {
      "heading" : "A Appendix A",
      "text" : "We consider the general case of an unknown mean and covariance for each class. Let T denote the precision (or inverse covariance) matrix. The probabilistic model for the mean and covariance matrix of each class is given as:\nyi|µ,T ∼ N (·|µ,T) µ|T ∼ N (·|µ0, coT)\nT ∼ W(·|δ0,V0) (16)\nwhere N (·|µ,T) denote the observation density which is assumed to be multivariate normal with mean µ and precision matrix T. The parameters θ = (µ,T) ∈ Ω1 × Ω2 follow a normal-Wishart joint distribution. The domains here are Ω1 = Rd and Ω2 = Sd++ is the positive definite cone. This leads to closed-form expressions for Li,h(yi)’s due to conjugacy [14]. For concreteness, let us write the distributions of the model (16):\nf(yi|θ) = p(yi|µ,T) = det(T)1/2\n(2π)d/2 exp\n( −1\n2 (yi − µ)TT(yi − µ) ) p(µ|T) = p(θ1|Θ2) = det(c0T) 1/2\n(2π)d/2 exp\n( −c0\n2 (µ− µ0)TT(µ− µ0) ) p(T) = p(Θ2) = det(V0) −δ0\n2dδ0Γd(δ0) det(T)δ0−\nd+1 2 exp(−1\n2 tr(V−10 T))\nwhere Γd(·) is the multivariate Gamma function. To calculate the class posteriors, the conditional likelihoods of yi given assignment to class h and the previous class assignments need to be calculated first. We derive closed-form expressions for these quantities in this section under the probabilistic model (16).\nThe conditional likelihood of yi given assignment to class h and the history (y(i−1), γ(i−1)) is given by:\nLi,h(yi) = ∫ f(yi|θh)π(θh|y(i−1), γ(i−1))dθh (17)\nWe thus need to obtain an expression for the posterior distribution π(θh|y(i−1), γ(i−1)). Due to the conjugacy of the distributions involved in (16), the posterior distribution π(θh|y(i−1), γ(i−1)) always has the form:\nπ(θh|y(i−1), γ(i−1)) = N (µh|µ (i−1) h , c (i−1) h Th)W(Th|δ (i−1) h ,V (i−1) h ) (18)\nwhere µ (i−1) h , c (i−1) h , δ (i−1) h ,V (i−1) h are hyperparameters that can be recursively computed as new samples come in. This would greatly simplify the\ncomputational complexity of the second step of the SUGS algorithm. Next, we derive the form of this recursive computation of the hyperparameters.\nFor simplicity of the derivation, let us consider the initial case y = y1. Then, from Bayes’ rule:\np(θ|y) = p(µ,T|y) = p(µ|T,y)p(T|y)\nA.1 Calculation of p(µ|T,y)\nNote the factorization:\np(µ|T,y) ∝ p(y|µ,T)p(µ|T)\nAccording to (16), we can write:\ny = µ + Σ1/2\nµ = µ0 + Σ 1/2 0 ′\nwhere ∼ N(0, I), ′ ∼ N(0, I), is independent of ′ and Σ = T−1,Σ0 = (c0T)\n−1. From this, it follows that the conditional density p(µ|T,y) is also multivariate normal with mean E[µ|T,y] and covariance Cov(µ|T,y). Note that:\nE[y|T] = µ0 Cov(y|T) = E[Cov(y|µ,T)|T] + Cov(E[y|µ,T]|T)\n= Σ + Σ0 = (1 + c −1 0 )T −1\nCov(µ,y|T) = Σ0\nUsing these facts, we obtain:\nE[µ|T,y] = E[µ|T] + Cov(µ,y|T)Cov(y|T)−1(y − E[y|T]) = µ0 + c −1 0 T −1((1 + c−10 )T −1)−1(y − µ0)\n= µ0 + c −1 0 (1 + c −1 0 ) −1(y − µ0) = 1\n1 + c0 y + c0 1 + c0 µ0\nCov(µ|T,y) = Cov(µ|T)− Cov(µ,y|T)Cov(y|T)−1Cov(y,µ|T) = Σ0 −Σ0(Σ + Σ0)−1ΣT0\n= c−10\n( 1− c −1 0\n1 + c−10\n) T−1\n= c−10\n1 + c−10 T−1\nThus, we have:\np(µ|T,y) = N ( µ ∣∣∣∣∣ 11 + c0 y + c01 + c0µ0, (1 + c0)T )\nwhere the conditional precision matrix becomes (1 + c0)T. As a result, once the γith component is chosen in the SUGS selection step, the parameter updates for the γith class become:\nµ(i)γi = 1\n1 + c (i−1) γi\nyi + c\n(i−1) γi\n1 + c (i−1) γi\nµ(i−1)γi\nc(i)γi = c (i−1) γi + 1\nA.2 Calculation of p(T|y) Next, we focus on calculating p(T|y) = ∫ Rd p(T,µ|y)dµ, where\np(T,µ|y) ∝ p(y|T,µ)p(µ|T)p(T)\n∝ det(T)(δ0+1/2)− d+1 2 det(T)1/2 exp ( −1\n2 tr(V−10 T) ) × exp ( −1\n2\n[ c0(µ− µ0)TT(µ− µ0) + (y − µ)TT(y − µ) ]) Rewriting the term inside the brackets by completing the square, we obtain:\nc0(µ− µ0)TT(µ− µ0) + (y − µ)TT(y − µ) = c0‖T1/2µ−T1/2µ0‖22 + ‖T 1/2y −T1/2µ‖22\n= (1 + c0) { ‖T1/2µ‖22 − 2 〈 T1/2µ, c0T 1/2µ0 + T 1/2y\n1 + c0\n〉 + c0‖T1/2µ0‖22 + ‖T1/2y‖ 2 2\n1 + c0\n}\n= (1 + c0)\n{ ‖T1/2µ− c0T 1/2µ0 + T 1/2y\n1 + c0 ‖22 − ‖\nc0T 1/2µ0 + T 1/2y\n1 + c0 ‖22 +\nc0‖T1/2µ0‖22 + ‖T1/2y‖ 2 2\n1 + c0\n}\nIntegrating out µ, we obtain:∫ exp ( −1\n2\n[ c0(µ− µ0)TT(µ− µ0) + (y − µ)TT(y − µ) ]) dµ\n= exp ( −1 + c0\n2\n( c0‖T1/2µ0‖22 + ‖T1/2y‖ 2 2\n1 + c0 − ‖c0T\n1/2µ0 + T 1/2y\n1 + c0 ‖22\n))\n× ∫\nexp(−1 2 ‖T1/2µ− c0T\n1/2µ0 + T 1/2y\n1 + c0 ‖22)dµ ∝ det(T)−1/2 exp ( −1\n2 c0 1 + c0\n(y − µ0)TT(y − µ0) )\nUsing this result, we obtain:\np(T|y) ∝ det(T)(δ0+1/2)− d+1 2 exp ( −1\n2 tr\n( T { V−10 +\nc0 1 + c0\n(y − µ0)(y − µ0)T }))\nAs a result, the conditional density is recognized to be a Wishart distribution\nW ( T ∣∣∣∣∣δ0 + 12 , { V−10 + c0 1 + c0 (y − µ0)(y − µ0)T }−1) .\nThus, the parameter updates for the γith class become:\nδ(i)γi = δ (i−1) γi +\n1\n2\nV(i)γi = { (V(i−1)γi ) −1 + c (i−1) γi\n1 + c (i−1) γi\n(yi − µ(i−1)γi )(yi − µ (i−1) γi ) T\n}−1 (19)\nFor numerical stability and ease of interpretation, we define\nΣ (i) h :=\n(V (i) h ) −1\n2δ (i) h\n.\nThis is the inverse of the mean of the Wishart distribution W(·|δ(i)h ,V (i) h ), and can be interpreted as the covariance matrix of class h at iteration i. From (19), we have:\nΣ (i) h =\n(V (i) h ) −1\n2δ (i) h\n= 2δ\n(i−1) h\n2δ (i) h\n(V (i−1) h ) −1\n2δ (i−1) h\n+ 1\n2δ (i) h\nc (i−1) h\n1 + c (i−1) h\n(yi − µ(i−1)h )(yi − µ (i−1) h ) T\n= 2δ\n(i−1) h\n1 + 2δ (i−1) h\nΣ (i−1) h +\n1\n1 + 2δ (i−1) h\nc (i−1) h\n1 + c (i−1) h\n(yi − µ(i−1)h )(yi − µ (i−1) h ) T\nThus, the recursive updates (19) can be equivalently restated as:\nδ(i)γi = δ (i−1) γi +\n1\n2\nΣ (i) h =\n2δ (i−1) h\n1 + 2δ (i−1) h\nΣ (i−1) h +\n1\n1 + 2δ (i−1) h\nc (i−1) h\n1 + c (i−1) h\n(yi − µ(i−1)h )(yi − µ (i−1) h ) T\nIf the starting matrix Σ (0) h is positive definite, then all the matrices {Σ (i) h } will remain positive definite."
    }, {
      "heading" : "B Appendix B",
      "text" : "Now, let us return to the calculation of (17).\nLi,h(yi) = ∫ Sd++ ∫ Rd N (yi|µ,T)N (µ|µ(i−1)h , c (i−1) h T)W(T|δ (i−1) h ,V (i−1) h )dµdT\n= ∫ Sd++ W(T|δ(i−1)h ,V (i−1) h ) {∫ Rd N (yi|µ,T)N (µ|µ(i−1)h , c (i−1) h T)dµ } dT\nEvaluating the inner integral within the brackets:∫ Rd N (yi|µ,T)N (µ|µ(i−1)h , c (i−1) h T)dµ\n∝ det(T)1/2 det(c(i−1)h T) 1/2 × ∫ Rd exp ( −1 2 [ c (i−1) h (µ− µ (i−1) h ) TT(µ− µ(i−1)h ) + (yi − µ) TT(yi − µ) ]) dµ = det(T)1/2 det(c (i−1) h T) 1/2\n× exp ( −1\n2\nc (i−1) h\n1 + c (i−1) h\n(yi − µ(i−1)h ) TT(yi − µ(i−1)h )\n)\n× ∫ exp ( − 1 + c (i−1) h\n2 (µ− b)TT(µ− b)\n) dµ\n∝ det(T)1/2 det(c\n(i−1) h T) 1/2\ndet((1 + c (i−1) h )T)\n1/2 exp\n( −1\n2 tr\n( T { c (i−1) h\n1 + c (i−1) h\n(yi − µ(i−1)h )(yi − µ (i−1) h ) T\n}))\n=\n( c\n(i−1) h\n1 + c (i−1) h\n)d/2 det(T)1/2 exp ( −1\n2 tr\n( T { c (i−1) h\n1 + c (i−1) h\n(yi − µ(i−1)h )(yi − µ (i−1) h ) T\n}))\nUsing this closed-form expression for the inner integral, we further obtain:\nLi,h(yi) ∝\n( c\n(i−1) h\n1 + c (i−1) h )d/2 ∫ Sd++ det(V (i−1) h ) −δ(i−1)h 2dδ (i−1) h Γd(δ (i−1) h ) det(T)(δ (i−1) h +1/2)− d+1 2\n× exp ( −1\n2 tr\n( T { (V\n(i−1) h ) −1 + c\n(i−1) h\n1 + c (i−1) h\n(yi − µ(i−1)h )(yi − µ (i−1) h ) T\n})) dT\n(20)\n∝\n( c\n(i−1) h\n1 + c (i−1) h\n)d/2 Γd(δ (i−1) h + 1 2)\nΓd(δ (i−1) h )\n× det(V\n(i−1) h ) −δ(i−1)h\ndet ({ (V\n(i−1) h )\n−1 + c (i−1) h\n1+c (i−1) h\n(yi − µ(i−1)h )(yi − µ (i−1) h ) T\n}−1)−(δ(i−1)h + 12 )\n= ( r\n(i−1) h )d/2 Γd(δ(i−1)h + 12) Γd(δ (i−1) h )\ndet((V (i−1) h ) −1)−1/2\ndet ( Id + r (i−1) h (yi − µ (i−1) h )(yi − µ (i−1) h ) TV (i−1) h )δ(i−1)h + 12 = ( r\n(i−1) h )d/2 Γd(δ(i−1)h + 12) Γd(δ (i−1) h )\ndet(V (i−1) h )\n1/2( 1 + r\n(i−1) h (yi − µ (i−1) h ) TV (i−1) h (yi − µ (i−1) h ) )δ(i−1)h + 12 (21)\n=\n( r\n(i−1) h\n2δ (i−1) h\n)d/2 Γd(δ (i−1) h + 1 2)\nΓd(δ (i−1) h )\ndet((Σ (i−1) h ) −1)1/2( 1 + r (i−1) h\n2δ (i−1) h\n(yi − µ(i−1)h )T (Σ (i−1) h ) −1(yi − µ(i−1)h ) )δ(i−1)h + 12\n(22)\nwhere we used the determinant identity det(I + abTM) = 1 + bTMa in the\nlast step. We also defined r (i) h :=\nc (i) h\n1+c (i) h\nand used V (i) h =\n(Σ (i) h ) −1\n2δ (i) h\n."
    }, {
      "heading" : "C Appendix C",
      "text" : "Proof. It is sufficient to establish the limit for limN→∞ ∑N\nk=m log(1+α/k)/ logN for fixed m. Choose m such that |α| < m−1 and use log(1−x) = ∑∞ k=1 x\nk/k for |x| < 1 to get\nN∑ k=m log ( 1 + α k ) = ∞∑ l=1 (−1)l+1α l l N∑ k=m 1 kl . (23)\nSeparate (23) into two terms:\n∞∑ l=1 (−1)l+1α l l N∑ k=m 1 kl = α N∑ k=m 1 k + ∞∑ l=2 (−1)l+1α l l N∑ k=m 1 kl . (24)\nThe first term is expressed in terms of the Euler-Mascheroni constant γe as\nN∑ k=m 1 k = logN − γe − m−1∑ k=1 1 k + o(1).\nThus, dividing by logN and taking the limit N → ∞ we have a limiting value of unity. The second term of (24) is bounded. To see this, use, for l > 1,\n∞∑ k=m 1 kl ≤ ∫ ∞ m−1 dx xl = 1 l − 1 (m− 1)−(l−1).\nThen the second term of (24) is bounded by\n∞∑ l=2 αl l ∞∑ k=m 1 kl ≤ ∞∑ l=2\nαl\nl(l − 1) (m− 1)−(l−1)\n= (m− 1) ∞∑ l=2\n1\nl(l − 1)\n( α\nm− 1\n)l <∞.\nThe result follows since the second term, being bounded, vanished when dividing by logN and taking the limit N →∞."
    }, {
      "heading" : "D Appendix D",
      "text" : "Lemma 2. Let rn and r̄n be random sequences with the update laws\nP (rn+1 = rn + 1) = τn\nP (rn+1 = rn) = 1− τn\nand\nP (r̄n+1 = r̄n + 1) = σn\nP (r̄n+1 = r̄n) = 1− σn,\nand assume σn ≥ τn for all n ≥ 1 and that r̄0 = r0 = 0. Then E[r̄n] ≥ E[rn] for all n ≥ 1.\nProof. We first use induction to show that P (rn > t) ≤ P (r̄n > t) holds for all n.\nThe base case is trivial because r0 = r̄0. We next prove that given\nP (rn > t) ≤ P (r̄n > t) (25)\nfor a particular n and all t ∈ N, the same inequality holds for n + 1. We have\nP (rn+1 > t) = (1− τn)P (rn > t) + τnP (rn > t− 1) ≤ (1− τn)P (r̄n > t) + τnP (r̄n > t− 1) ≤ (1− σn)P (r̄n > t) + σnP (r̄n > t− 1) = P (r̄n+1 > t), (26)\nwhere we used the inductive hypothesis (25) and the inequality P (r̄n > t) ≤ P (r̄n > t−1). Thus, by induction, the inequality (25) holds for all n. Using (25), we further obtain:\nE[rn] = ∫ ∞\n0 P (rn > t)dt ≤ ∫ ∞ 0 P (r̄n > t)dt = E[r̄n]\nThe proof is complete."
    }, {
      "heading" : "E Appendix E",
      "text" : "Proof. We can study the generalized Polya urn model in the slightly modified form:\nP (r̄n+1 = k|r̄n) =\n{ r̄n+1 an , if k = r̄n + 1\n1− r̄n+1an , if k = r̄n (27)\nTaking the conditional expectation of r̄n+1 with respect to the filtration Fn+1 def = σ(r̄1, . . . , r̄n, γ1, . . . , γn+1,y1, . . . ,yn+1), we get E[r̄n+1|Fn+1] =\n(r̄n + 1) (\n1 + 1an\n) − 1. Set xn := r̄n + 1. Rewriting this and using the\ndefinition of an, we obtain:\nE [ xn+1 ∣∣∣Fn+1] ≤ xn(1 + ln+1(yn+1) n log n ) (28)\nNext, we seek an upper bound on the conditional expectation E[lk(yk)|Fk−1]. This quantity can be bounded using convex duality [12]:\nE[lk(yk)|Fk−1] ≤ 1 + 1\ns D(pT ‖ L̃k,K+) +\n1 s logEL̃k,K+ [e s(lk(yk)−1)]\nFor k ≥ N , lk(yk) ≤ ζ and EL̃k,K+ [lk(yk)] = 1. By Hoeffding’s inequality, EL̃k,K+ [e s(lk(yk)−1)] ≤ es2ζ2/8. Using this bound, we obtain for k ≥ N ,\nE[lk(yk)|Fk−1] ≤ 1 + δ/s + sζ2/8. Minimizing this as a function of s > 0, we obtain: E[lk(yk)|Fk−1] ≤ 1 + ζ √ δ\n2 (29)\nNext, we upper bound E[xn+1|FN ] recursively. Taking the conditional expectation of both sides of (28), we obtain:\nE [ xn+1 ∣∣∣Fn] ≤ E [xn(1 + ln+1(yn+1) n log n ) ∣∣∣Fn] (30) We note that the function ln+1(·) is Fn-measurable. This follows since by definition, ln+1(·) = L0(·)∑kn\nh=1 mn(h) n Ln+1,h(·) , and mn(h) =\n∑n l=1 I(γl = h) and\nLn+1,h(·) are both Fn-measurable (due to the parameter updates and (22)). Also note that xn = r̄n + 1 is randomly determined by a biased coin flip given Fn, increasing by 1 with probability xn−1an−1 and staying the same with probability 1 − xn−1an−1 . Since an−1 is Fn-measurable, it follows that xn and ln+1(yn+1) are conditionally independent given the history Fn. Using this conditional independence, we obtain from (30): E [ xn+1 ∣∣∣Fn] ≤ E[xn|Fn](1 + E[ln+1(yn+1)|Fn] n log n ) ≤ E[xn|Fn] ( 1 + 1 + ζ √ δ/2 n log n\n) (31)\nwhere we used the bound (29) in the last inequality. Repeatedly conditioning and using (28) and (31): E[xn+1|FN ] ≤ ∏n k=N ( 1 + 1+ζ √ δ 2 k log k ) E[xN |FN ] ≤ C0N log 1+ζ √ δ/2 n, where we used the Lemma in Appendix F and C0 =\nC(1 + ζ √ δ/2, N), xN ≤ N in the last inequality. Taking the unconditional expectation and using E[rn + 1] ≤ E[r̄n + 1] (see Appendix D) yields the bound E [rn + 1] ≤ C0N log1+ζ √ δ/2 n. Markov’s inequality then yields\nP (\nrn+1\nC0N log 1+ζ √ δ/2 n > K\n) ≤ 1K which implies (14) by taking K →∞. Since\nαn = rn+1 λ+logn , the bound in (14) follows from a similar argument. The proof is complete."
    }, {
      "heading" : "F Appendix F",
      "text" : "Lemma 3. The following upper bound holds with constant C(φ,N) = e φ N logN / logφN :\nn∏ k=N ( 1 +\nφ\nk log k\n) ≤ C(φ,N) logφ n\nProof. Using the elementary inequality log(1+x) ≤ x for x > −1, we obtain:\nlog\n( n∏\nk=N\n( 1 +\nφ\nk log k\n)) =\nn∑ k=N log ( 1 +\nφ\nk log k\n)\n≤ n∑\nk=N\nφ\nk log k ≤ φ (∫ n N dx x log x +\n1\nN logN\n)\n= φ (∫ logn logN dt t +\n1\nN logN ) = log ( logφ n\nlogφN\n) +\nφ\nN logN\nTaking the exponential of both sides yields the desired inequality."
    } ],
    "references" : [ {
      "title" : "Mixtures of Dirichlet Processes with Applications to Bayesian Nonparametric Problems",
      "author" : [ "C.E. Antoniak" ],
      "venue" : "The Annals of Statistics",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 1974
    }, {
      "title" : "Inequalities for the Gamma Function",
      "author" : [ "N. Batir" ],
      "venue" : "Archiv der Mathematik",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2008
    }, {
      "title" : "Variational Inference for Dirichlet Process Mixtures",
      "author" : [ "D.M. Blei", "M.I. Jordan" ],
      "venue" : "Bayesian Analysis",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2006
    }, {
      "title" : "Fast Search for Dirichlet Process Mixture Models",
      "author" : [ "H. Daume" ],
      "venue" : "Conference on Artificial Intelligence and Statistics,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2007
    }, {
      "title" : "Bayesian Density Estimation and Inference using Mixtures",
      "author" : [ "M.D. Escobar", "M. West" ],
      "venue" : "Journal of the American Statistical Association",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 1995
    }, {
      "title" : "Particle Filters for Mixture Models with an Uknown Number of Components, Statistics and Computing",
      "author" : [ "P. Fearnhead" ],
      "venue" : null,
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2004
    }, {
      "title" : "Accelerated Variational Dirichlet Mixture Models, Advances in Neural Information",
      "author" : [ "K. Kurihara", "M. Welling", "N. Vlassis" ],
      "venue" : "Processing Systems (NIPS),",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2006
    }, {
      "title" : "Online learning of nonparametric mixture models via sequential variational approximation, Advances in Neural Information Processing Systems",
      "author" : [ "Dahua Lin" ],
      "venue" : null,
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2013
    }, {
      "title" : "Bayesian Mixture Modeling",
      "author" : [ "R.M. Neal" ],
      "venue" : "Proceedings of the Workshop on Maximum Entropy and Bayesian Methods of Statistical Analysis,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 1992
    }, {
      "title" : "The infinite gaussian mixture model, Advances in Neural Information",
      "author" : [ "C.E. Rasmussen" ],
      "venue" : "Processing Systems",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2000
    }, {
      "title" : "Bayesian Gaussian Process Models: PAC- Bayesian Generalization Error Bounds and Sparse Approximations",
      "author" : [ "Matthias W. Seeger" ],
      "venue" : "Ph.D. thesis, University of Edinburgh,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2003
    }, {
      "title" : "A Sequential Bayesian Inference Framework for Blind Frequency Offset Estimation",
      "author" : [ "T. Tsiligkaridis", "K.W. Forsythe" ],
      "venue" : "Proceedings of IEEE International Workshop on Machine Learning for Signal Processing",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2015
    }, {
      "title" : "The Variational Approximation for Bayesian Inference",
      "author" : [ "D.G. Tzikas", "A.C. Likas", "N.P. Galatsanos" ],
      "venue" : "IEEE Signal Processing Magazine",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2008
    }, {
      "title" : "Fast Bayesian Inference in Dirichlet Process Mixture Models",
      "author" : [ "L. Wang", "D.B. Dunson" ],
      "venue" : "Journal of Computational and Graphical Statistics",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2011
    } ],
    "referenceMentions" : [ {
      "referenceID" : 8,
      "context" : "Dirichlet process mixture models (DPMM) have been widely used for clustering data [9, 11].",
      "startOffset" : 82,
      "endOffset" : 89
    }, {
      "referenceID" : 9,
      "context" : "Dirichlet process mixture models (DPMM) have been widely used for clustering data [9, 11].",
      "startOffset" : 82,
      "endOffset" : 89
    }, {
      "referenceID" : 2,
      "context" : "Alternatives include variational methods [3], which are deterministic algorithms that convert inference to optimization.",
      "startOffset" : 41,
      "endOffset" : 44
    }, {
      "referenceID" : 7,
      "context" : "An online algorithm for learning DPMM’s based on a sequential variational approximation (SVA) was proposed in [8], and the authors in [15] recently proposed a sequential maximum a-posterior (MAP) estimator for the class labels given streaming data.",
      "startOffset" : 110,
      "endOffset" : 113
    }, {
      "referenceID" : 13,
      "context" : "An online algorithm for learning DPMM’s based on a sequential variational approximation (SVA) was proposed in [8], and the authors in [15] recently proposed a sequential maximum a-posterior (MAP) estimator for the class labels given streaming data.",
      "startOffset" : 134,
      "endOffset" : 138
    }, {
      "referenceID" : 0,
      "context" : "The choice of concentration parameter α is critical for DPMM’s as it controls the number of clusters [1].",
      "startOffset" : 101,
      "endOffset" : 104
    }, {
      "referenceID" : 5,
      "context" : "While most fast DPMM algorithms use a fixed α [6, 4, 7], imposing a prior distribution on α and sampling from it provides more flexibility, but this approach still heavily relies on experimentation and prior knowledge.",
      "startOffset" : 46,
      "endOffset" : 55
    }, {
      "referenceID" : 3,
      "context" : "While most fast DPMM algorithms use a fixed α [6, 4, 7], imposing a prior distribution on α and sampling from it provides more flexibility, but this approach still heavily relies on experimentation and prior knowledge.",
      "startOffset" : 46,
      "endOffset" : 55
    }, {
      "referenceID" : 6,
      "context" : "While most fast DPMM algorithms use a fixed α [6, 4, 7], imposing a prior distribution on α and sampling from it provides more flexibility, but this approach still heavily relies on experimentation and prior knowledge.",
      "startOffset" : 46,
      "endOffset" : 55
    }, {
      "referenceID" : 4,
      "context" : "Thus, many fast inference methods for Dirichlet process mixture models have been proposed that can adapt α to the data, including the works [5] where learning of α is incorporated in the Gibbs sampling analysis, [3] where a Gamma prior is used in a conjugate manner directly in the variational inference algorithm.",
      "startOffset" : 140,
      "endOffset" : 143
    }, {
      "referenceID" : 2,
      "context" : "Thus, many fast inference methods for Dirichlet process mixture models have been proposed that can adapt α to the data, including the works [5] where learning of α is incorporated in the Gibbs sampling analysis, [3] where a Gamma prior is used in a conjugate manner directly in the variational inference algorithm.",
      "startOffset" : 212,
      "endOffset" : 215
    }, {
      "referenceID" : 13,
      "context" : "[15] also account for model uncertainty on the concentration parameter α in a Bayesian manner directly in the sequential inference procedure.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 13,
      "context" : "Here, we review the SUGS framework of [15] for online clustering.",
      "startOffset" : 38,
      "endOffset" : 42
    }, {
      "referenceID" : 0,
      "context" : "1 Adaptation of Concentration Parameter α It is well known that the concentration parameter α has a strong influence on the growth of the number of classes [1].",
      "startOffset" : 156,
      "endOffset" : 159
    }, {
      "referenceID" : 7,
      "context" : "Choosing a fixed α as in the online SVA algorithm of [8] requires cross-validation, which is computationally prohibitive for large-scale data sets.",
      "startOffset" : 53,
      "endOffset" : 56
    }, {
      "referenceID" : 13,
      "context" : "Although the parameter α is handled from a fully Bayesian treatment in [15], a pre-specified grid of possible values α can take, say {αl}l=1, along with the prior distribution over them, needs to be chosen in advance.",
      "startOffset" : 71,
      "endOffset" : 75
    }, {
      "referenceID" : 12,
      "context" : "The model (16) leads to closed-form expressions for Li,h(yi)’s due to conjugacy [14].",
      "startOffset" : 80,
      "endOffset" : 84
    }, {
      "referenceID" : 1,
      "context" : "6 from [2], it follows that lima→∞ ρd(a) e−d/2(a−1/2)d/2 = 1.",
      "startOffset" : 7,
      "endOffset" : 10
    }, {
      "referenceID" : 11,
      "context" : "A similar asymptotic normality result was recently obtained in [13] for Gaussian observations with a von Mises prior.",
      "startOffset" : 63,
      "endOffset" : 67
    }, {
      "referenceID" : 7,
      "context" : "1 Prune & Merge It is possible that multiple clusters are similar and classes might be created due to outliers, or due to the particular ordering of the streaming data sequence, as also noted in [8].",
      "startOffset" : 195,
      "endOffset" : 198
    }, {
      "referenceID" : 7,
      "context" : "Since it is possible that multiple clusters are similar and classes might be created due to outliers, or due to the particular ordering of the streaming data sequence, we add the pruning and merging step in the ASUGS algorithm as done in [8].",
      "startOffset" : 238,
      "endOffset" : 241
    }, {
      "referenceID" : 7,
      "context" : "We compare ASUGS and ASUGS-PM with SUGS, SUGS-PM, SVA and SVA-PM proposed in [8], since it was shown in [8] that SVA and SVA-PM outperform the block-based methods that perform iterative updates over the entire data set including Collapsed Gibbs Sampling, MCMC with Split-Merge and Truncation-Free Variational Inference.",
      "startOffset" : 77,
      "endOffset" : 80
    }, {
      "referenceID" : 7,
      "context" : "We compare ASUGS and ASUGS-PM with SUGS, SUGS-PM, SVA and SVA-PM proposed in [8], since it was shown in [8] that SVA and SVA-PM outperform the block-based methods that perform iterative updates over the entire data set including Collapsed Gibbs Sampling, MCMC with Split-Merge and Truncation-Free Variational Inference.",
      "startOffset" : 104,
      "endOffset" : 107
    }, {
      "referenceID" : 6,
      "context" : "Each sample is a 28×28 image of a handwritten digit (total of 784 dimensions), and we perform PCA pre-processing to reduce dimensionality to d = 50 dimensions as in [7].",
      "startOffset" : 165,
      "endOffset" : 168
    }, {
      "referenceID" : 12,
      "context" : "This leads to closed-form expressions for Li,h(yi)’s due to conjugacy [14].",
      "startOffset" : 70,
      "endOffset" : 74
    }, {
      "referenceID" : 10,
      "context" : "This quantity can be bounded using convex duality [12]:",
      "startOffset" : 50,
      "endOffset" : 54
    } ],
    "year" : 2015,
    "abstractText" : "We develop a sequential low-complexity inference procedure for Dirichlet process mixtures of Gaussians for online clustering and parameter estimation when the number of clusters are unknown a-priori. We present an easily computable, closed form parametric expression for the conditional likelihood, in which hyperparameters are recursively updated as a function of the streaming data assuming conjugate priors. Motivated by large-sample asymptotics, we propose a novel adaptive low-complexity design for the Dirichlet process concentration parameter and show that the number of classes grow at most at a logarithmic rate. We further prove that in the large-sample limit, the conditional likelihood and data predictive distribution become asymptotically Gaussian. We demonstrate through experiments on synthetic and real data sets that our approach is superior to other online stateof-the-art methods.",
    "creator" : "TeX"
  }
}