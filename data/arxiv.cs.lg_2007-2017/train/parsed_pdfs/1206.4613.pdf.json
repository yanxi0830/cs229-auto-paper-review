{
  "name" : "1206.4613.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Near-Optimal BRL using Optimistic Local Transitions",
    "authors" : [ "Mauricio Araya-López", "Vincent Thomas", "Olivier Buffet" ],
    "emails" : [ "maraya@loria.fr", "vthomas@loria.fr", "buffet@loria.fr" ],
    "sections" : [ {
      "heading" : "1. Introduction",
      "text" : "Acting in an unknown environment requires trading off exploration (acting so as to acquire knowledge) and exploitation (acting so as to maximize expected return). Model-Based Bayesian Reinforcement Learning (BRL) algorithms achieve this while maintaining and using a probability distribution over possible models (which requires expert knowledge under the form of a prior).These algorithms typically fall within one of the three following classes (Asmuth et al., 2009).\nBelief-lookahead approaches try to optimally trade off exploration and exploitation by reformulating RL as the problem of solving a POMDP where the state is a pair ω = (s, b), s being the observed state and b the distribution over the possible models; yet, this problem is intractable, allowing only computationally expensive approximate solutions (Poupart et al., 2006).\nAppearing in Proceedings of the 29 th International Conference on Machine Learning, Edinburgh, Scotland, UK, 2012. Copyright 2012 by the author(s)/owner(s).\nOptimistic approaches propose exploration mechanisms that explicitly attempt to reduce the model uncertainty (Brafman & Tennenholtz, 2003; Kolter & Ng, 2009; Sorg et al., 2010; Asmuth et al., 2009) by relying on the principle of “optimism in the face of uncertainty”.\nUndirected approaches, such as -greedy or Boltzmann exploration strategies (Sutton & Barto, 1998), perform exploration actions independent of the current knowledge about the environment.\nWe focus here on optimistic approaches and, as most research in the field and without loss of generality, we consider uncertainty on the transition function, assuming a known reward function. For some algorithms, recent work proves that they are either PAC-MDP (Strehl et al., 2009)—with high probability they often act as an optimal policy would do (if the MDP model were known)—or PAC-BAMDP (Kolter & Ng, 2009)—with high probability they often act as an ideal belief-lookahead algorithm would do.\nThis paper first presents background on model-based BRL in Section 2, and on PAC-MDP and PACBAMDP analysis in Section 3. Then, Section 4 introduces a novel algorithm, bolt, which, (1) as boss (Asmuth et al., 2009), is optimistic about the transition model—which is intuitively appealing since the uncertainty is about the model—and, (2) as beb (Kolter & Ng, 2009), is (almost) deterministic—which leads to a better control over this approach. We then prove in Section 5 that bolt is PAC-BAMDP for infinite horizons, by generalizing previous results known for beb for finite horizon. Experiments in Section 6 then give some insight as to the practical behavior of these algorithms, showing in particular that bolt seems less sensitive to parameter tuning than beb."
    }, {
      "heading" : "2. Background",
      "text" : ""
    }, {
      "heading" : "2.1. Reinforcement Learning",
      "text" : "A Markov Decision Process (MDP) (Puterman, 1994) is defined by a tuple 〈S,A, T,R〉 where S is a finite\nset of states, A is a finite set of actions, the transition function T is the probability to transition from state s to state s′ when some action a is performed: T (s, a, s′) = Pr(s′|s, a), and R(s, a, s′) is the instant scalar reward obtained during this transition. Reinforcement Learning (RL) (Sutton & Barto, 1998) is the problem of finding an optimal decision policy— a mapping π : S 7→ A—when the model (T without R in our case) is unknown but while interacting with the system. A typical performance criterion is the expected discounted return\nV πµ (s) = Eπ [ ∞∑ t=0 γtR(st, at, st+1) | s0 = s, T = µ ] ,\nwhere µ ∈ M is the unknown model and γ ∈ [0, 1] is a discount factor. Under an optimal policy, this state value function verifies the Bellman optimality equation (for all s ∈ S):\nV ∗µ (s) = max a∈A ∑ s′∈S T (s, a, s′) [ R(s, a, s′) + γV ∗µ (s ′) ] ,\nand computing this optimal value function allows to derive an optimal policy by behaving in a greedy manner, i.e., by picking actions in arg maxa∈AQ ∗ µ(s, a), where the state-action value function Q∗µ is defined as\nQ∗µ(s, a) = ∑ s′∈S T (s, a, s′) [ R(s, a, s′) + γV ∗µ (s ′) ] .\nTypical RL algorithms either (i) directly estimate the optimal state-action value function Q∗µ (model-free RL), or (ii) learn T to compute V ∗µ or Q ∗ µ (model-based RL). Yet, in both cases, a major difficulty is to pick actions so as to trade off exploitation of the current knowledge and exploration to acquire more knowledge."
    }, {
      "heading" : "2.2. Model-based Bayesian RL",
      "text" : "We consider here model-based Bayesian Reinforcement Learning (Strens, 2000), i.e., model-based RL where the knowledge about the model is represented using a probability distribution b over all possible transition models. An initial prior distribution b0 = Pr(µ) has to be specified, which is then updated using Bayes rule. At time t the posterior bt depends on the initial distribution b0 and the state-action history so far ht = s0, a0, · · · , st−1, at−1, st. This update can be applied sequentially due to the Markov assumption, i.e., at time t + 1 we only need bt and the triplet (st, at, st+1) to compute the new distribution:\nbt+1 = Pr(µ|ht+1, b0) = Pr(µ|st, at, st+1, bt). (1)\nThe distribution bt is known as the belief over the model, and summarizes the information that we have gathered about the model at the current time step.\nIf we consider the belief as part of the state, the resulting belief-MDP can be solved optimally in theory. Remarkably, modelling RL problems as belief-MDPs provides a sound way of dealing with the explorationexploitation dilemma, because both objectives are naturally included in the same optimization criterion.\nThe belief-state can thus be written as ω = (s, b), which defines a Bayes-Adaptive MDP (BAMDP) (Duff, 2002), a special kind of belief-MDP where the belief-state is factored into the (visible) system state and the belief over the (hidden) model. Moreover, due to the integration over all possible models in the value function of the BAMDP, the transition function T (ω, a, ω′) is given by\nPr(ω′|ω, a) = Pr(b′|b, s, a, s′)E[Pr(s′|s, a)|b],\nwhere the first probability is 1 if b′ complies with Eq. (1) and 0 else. The optimal Bayesian policy can then be obtained by computing the optimal Bayesian value function (Duff, 2002; Poupart et al., 2006):\nV∗(s, b)\n= max a [∑ s′ E[Pr(s′|s, a)|b](R(s, a, s′) + γV∗(s′, b′)) ]\n= max a [∑ s′ T (s, a, s′, b)(R(s, a, s′) + γV∗(s′, b′)) ] ,\n(2)\nwith b′ the posterior after the Bayes update with (s, a, s′). For the finite horizon case we can use the same reasoning, so that the optimal value can be computed in theory for a finite or infinite horizon, by performing Bayes updates and computing expectations. However, in practice, computing this value function exactly is intractable due to the large branching factor of the tree expansion.\nHere, we are interested in heuristic approaches following the optimism in the face of uncertainty principle, which consists in assuming a higher return on the most uncertain transitions. Some of them solve the MDP generated by the expected model (at some stage) with an added exploration reward which favors transitions with lesser known models, as in r-max (Brafman & Tennenholtz, 2003), beb (Kolter & Ng, 2009), or with variance based rewards (Sorg et al., 2010). Another approach, used in boss (Asmuth et al., 2009), is to solve, when the model has changed sufficiently, an optimistic estimate of the true MDP (obtained by merging multiple sampled models)."
    }, {
      "heading" : "2.3. Flat and Structured Priors",
      "text" : "The selection of a suitable prior is an important issue in BRL algorithms, because it has a direct impact on the solution quality and computing time. A naive approach is to consider one independent Dirichlet distribution for each state-action transition, known as Flat-Dirichlet-Multinomial prior (FDM), whose pdf is defined as\nb = f(µ;θ) = ∏ s,a D(µs,a;θs,a),\nwhere D(·; ·) are independent Dirichlet distributions. FDMs can be applied to any discrete state-action MDP, but is only appropriate under the strong assumption of independence of the state-action pairs in the transition function. However, this prior has been broadly used because of its simplicity for computing the Bayesian update and the expected value. Consider that the vector of parameters θ are the counters of observed transitions, then the expected value of a transition probability is E[Pr(s′|s, a)|b] = θs,a(s ′)∑\ns′′ θs,a(s ′′) , and\nthe Bayesian update under the evidence of a transition (s, a, s′), is reduced only to θ′s,a(s ′) = θs,a(s ′) + 1.\nEven though FDMs are useful to analyze and benchmark algorithms, in practice they are inefficient because they do not exploit structured information about the problem. One can for example encode the fact that multiple actions share the same model by factoring multiple Dirichlet distributions, or allow the algorithm to identify such structures using Dirichlet distributions combined using Chinese Restaurant Processes or Indian Buffet Processes (Asmuth et al., 2009)."
    }, {
      "heading" : "3. PAC Algorithms",
      "text" : "Probably Approximately Correct Learning (PAC) provides a way of analyzing the quality of learning algorithms (Valiant, 1984). The general idea is that with high probability 1 − δ (probably), a machine with a low training error produces a low generalization error bounded by (approximately correct). If the number of steps needed to arrive to this condition is bounded by a polynomial function, then the algorithm is PACefficient."
    }, {
      "heading" : "3.1. PAC-MDP Analysis",
      "text" : "In RL, the PAC-MDP property (Strehl et al., 2009) guarantees that an algorithm generates an -close policy with probability 1−δ in all but a polynomial number of steps. An important result is the general PACMDP Theorem 10 in Strehl et al. (2009), where three sufficient conditions are presented to comply with the\nPAC-MDP property. First, the algorithm must use at least near optimistic values with high probability. Also, the algorithm must guarantee with high probability that it is accurate, meaning that, for the known parts of the model, its actual evaluation will be -close to the optimal value function. Finally, the number of non- -close steps (also called sample complexity) must be bounded by a polynomial function.\nIn mathematical terms, PAC-MDP algorithms are those for which, with probability 1 − δ, the evaluation of a policy At, generated by algorithm A at time t over the real underlying model µ0, is -close to the optimal policy over the same model in all but a polynomial number of steps:\nV Atµ0 (s) ≥ V ∗ µ0(s)− . (3)\nSeveral RL algorithms comply with the PAC-MDP property, differing from one another mainly on the tightness of the sample complexity bound. For example, r-max and Delayed Q-Learning (Strehl et al., 2009) are some classic RL algorithms for which this property has been proved, whereas BOSS (Asmuth et al., 2009) is a Bayesian RL algorithm which is also PAC-MDP.\nIn PAC-MDP analysis the policy produced by an algorithm should be close to the optimal policy derived from the real underlying MDP model. This utopic policy (Poupart et al., 2006) cannot be computed, because it is impossible to learn exactly the model with a finite number of samples, but it is possible to reason on the probabilistic error bounds of an approximation to this policy."
    }, {
      "heading" : "3.2. PAC-BAMDP Analysis",
      "text" : "An alternative to the PAC-MDP approach is to be PAC with respect to the optimal Bayesian policy, rather than using the optimal utopic policy. We will call this PAC-BAMDP analysis, because its aim is to guarantee closeness to the optimal solution of the Bayes-Adaptive MDP. This type of analysis was first introduced in Kolter & Ng (2009), under the name of near-Bayesian property, where it is shown that a modified version of beb is PAC-BAMDP for the undiscounted finite horizon case 1.\nLet us define how to evaluate a policy in the Bayesian sense:\nDefinition 3.1. The Bayesian evaluation V of a policy π is the expected value given a distribution over\n1However, some—rectifiable—errors have been spotted in the proof of near-Bayesianness of beb in Kolter & Ng (2009), as discussed with the authors.\nmodels b: Vπ(s, b) = Eµ[V πµ (s)|b] = ∫ M V πµ (s)Pr(µ|b)dµ.\nThis definition has already been presented implicitly by Duff (2002) , but it is very important to point out the difference between a normal MDP evaluation over some known MDP, and the Bayesian evaluation2. This definition is consistent with Eq. 2, where\nV∗(s, b) = max π ∫ M V πµ (s)Pr(µ|b)dµ\n= max a [∑ s′ E[Pr(s′|s, a)|b](R(s, a, s′) + γV∗(s′, b′)) ] .\nLet us define the PAC-BAMDP property:\nDefinition 3.2. We say that an algorithm is PACBAMDP if, with probability 1− δ, the Bayesian evaluation of a policy At generated by algorithm A at time t is -close to the optimal Bayesian policy in all but a polynomial number of steps, where the Bayesian evaluation is parametrized by the belief b:\nVAt(s, b) ≥ V∗(s, b)− , (4)\nwith δ ∈ [0, 1) and > 0.\nA major conceptual difference is that in PAC-BAMDP analysis, the objective is to guarantee approximate correctness because the optimal Bayesian policy is hard to compute, while in PAC-MDP analysis, the approximate correctness guarantee is needed because the optimal utopic policy is impossible to find in a finite number of steps."
    }, {
      "heading" : "4. Optimistic BRL Algorithms",
      "text" : "Sec. 2.2 has shown how to theoretically compute the optimal Bayesian value function. This computation\n2We use a different notation for the Bayesian evaluation, V, to distinguish it from a normal MDP evaluation V .\nbeing intractable, it is common to use suboptimal— yet efficient—algorithms. A popular technique is to maintain a posterior over the belief, select one representative MDP based on the posterior and act according to its value function. The baseline algorithm in this family is called exploit (Poupart et al., 2006), where the expected model of b is selected at each time step. Therefore, the algorithm has to solve a different MDP of horizon H—an algorithm parameter, not the problem horizon— at each time step t as can be seen in Fig. 1. We will consider for the analysis that H is the number of iterations i that value iteration performs at each time step t, but in practice convergence can be reached long before the theoretically derived H for the infinite horizon case.\nbeb (Kolter & Ng, 2009) follows the same idea as exploit, but adding an exploration bonus to the reward function. In contrast, boss (Asmuth et al., 2009) does not use the exploit approach, but samples different models from the prior and uses them to construct an optimistic MDP. beb has the advantage of being an almost deterministic algorithm3 and does not rely on sampling as boss. On the other hand, boss is optimistic about the transitions, which is where the uncertainty lies, meanwhile beb is optimistic about the reward function, even though this function is known."
    }, {
      "heading" : "4.1. Bayesian Optimistic Local Transitions",
      "text" : "In this section, we introduce a novel algorithm called bolt (Bayesian Optimistic Local Transitions), which relies on acting, at each time step t, by following the optimal policy for an optimistic variant of the current expected model. This variant is obtained by, for each state-action pair, optimistically boosting the Bayesian updates before computing the local expected transition model. This is achieved using a new MDP with an augmented action space A = A × S, where the transition model for action α = (a, σ) in state s is the local expected model derived from bt updated with an artificial evidence of transitions ληs,a,σ = {(s, a, σ), . . . , (s, a, σ)} of size η (a parameter of the algorithm). In other words, we pick both an action a plus the next state σ we would like to occur with a higher probability. The MDP can be solved as follows:\nV bolti (s, bt)\n= max α ∑ s′ T̂ (s, α, s′, bt) [ R(s, a, s′) + γV bolti−1 (s ′, bt) ]\nwith T̂ (s, α, s′) = E[Pr(s′|s, a)|bt, ληs,a,σ].\nbolt’s value iteration neglects the evolution of bt, but the modified transition function works as an optimistic\n3In case of equal values, actions are sampled uniformly.\napproximation of the neglected Bayesian evolution.\nModifying the transition function seems to be a more natural approach than modifying the reward function as in beb, since the uncertainty we consider in these problems is about the transition function, not about the reward function.\nFrom a computational point of view, each update in bolt requires |S| times more computations than each update in beb. This implies computation times multiplied by |S| when solving finite horizon problems using dynamic programming, and probably a similar increase for value iteration. However, under structured priors, not all the next states σ must be explored, but only those which are possible transitions.\nHere, the optimism is controlled by the positive parameter η—an integer or real-valued parameter depending on the family of distributions—and the behaviour using different parameter values will depend on the used family of distributions. However, for common priors like FDMs, it can be proved that bolt is always optimistic with respect to the optimal Bayesian value function.\nLemma 4.1 (bolt’s Optimism). Let (st, bt) be the current belief-state from which we apply bolt’s value iteration with an horizon of H and η = H. Let also bt be a prior in the FDM family, and let VH(st, bt) be the optimal Bayesian value function. Then, we have\nV boltH (st, bt) ≥ VH(st, bt).\n[Proof in (Araya-López et al., 2012)]"
    }, {
      "heading" : "5. Analysis of BOLT",
      "text" : "In this section we prove that bolt is PAC-BAMDP in the discounted infinite horizon case, when using a FDM prior. The other algorithm proved to be PACBAMDP is beb, but the analysis provided in Kolter & Ng (2009) is only for finite horizon domains with an imposed stopping condition for the Bayes update. Therefore, we include in (Araya-López et al., 2012) an analysis of beb using the results of this section in order to be able to compare these algorithms theoretically afterwards.\nBy Definition 3.2, we must analyze the policy At generated by bolt at time t, i.e., At = argmaxπ V bolt,π H (st), and show that, with high probability and for all but a polynomial number of steps, this policy is -close to the optimal Bayesian policy.\nTheorem 5.1 (bolt is PAC-BAMDP). Let At denote the policy followed by bolt at time t with η = H. Let also st and bt be the corresponding state and belief at\nthat time. Then, with probability at least 1 − δ, bolt is -close to the optimal Bayesian policy\nVAt(st, bt) ≥ V∗(st, bt)−\nfor all but Õ ( |S||A|η2 2(1−γ)2 ) = Õ ( |S||A|H2 2(1−γ)2 ) time steps. [Proof in Section 5.2]\nIn the proof we will see that H depends on and γ. Therefore, the sample complexity bound and the optimism parameter η will depend only on the desired correctness ( ,δ) and the problem characteristics (γ,|S|,|A|)."
    }, {
      "heading" : "5.1. Mixed Value Function",
      "text" : "To prove that bolt is PAC-BAMDP we introduce some preliminary concepts and results. First, let us assume for the analysis that we maintain a vector of transition counters θ, even though the priors may be different from FDMs for the specific lemma presented in this section. As the belief is monitored, at each step we can define a set K = {(s, a)|‖θs,a‖ ≥ m} of known state-action pairs (Kearns & Singh, 1998), i.e., state-action pairs with “enough” evidence. Also, to analyze an exploit-like algorithm A in general (like exploit, bolt or beb) we introduce a mixed value function Ṽ obtained by performing an exact Bayesian update when a state-action pair is in K, and A’s update when not in K. Using these concepts, we can revisit Lemma 5 of Kolter & Ng (2009) for the discounted case.\nLemma 5.2 (Induced Inequality Revisited). Let VπH(st, bt) be the Bayesian evaluation of a policy π, a = π(s, b) be an action from the policy. We define\nṼπi (s, b) = (5){∑ s′ T (s, a, s\n′, b)(R(s, a, s′) + γṼπi−1(s′, b′)) if (s, a) ∈ K∑ s′ T̃ (s, a, s ′)(R̃(s, a, s′) + γṼπi−1(s′, b′)) if (s, a) /∈ K\nthe mixed value function, where T̃ and R̃ can be different from T and R respectively. Here, b′ is the posterior parameter vector after the Bayes update with (s, a, s′). Let also AK be the event that a pair (s, a) /∈ K is generated for the first time when starting from state st and following the policy π for H steps. Assuming normalized rewards for R and a maximum reward R̃max for R̃, then\nVπH(st, bt) ≥ ṼπH(st, bt)− (1− γH) (1− γ) R̃maxPr(AK),\n(6) where Pr(AK) is the probability of event AK . [Proof in (Araya-López et al., 2012)]"
    }, {
      "heading" : "5.2. BOLT is PAC-BAMDP",
      "text" : "Let ṼAtH (st, bt) be the evaluation of bolt’s policy At using a mixed value function where R̃(s, a, s\n′) = R(s, a, s′) the reward function, and T̃ (s, a, s′) = T̂ (s, α, s′, bt) = E[Pr(s\n′|s, a)|bt, ληs,a,σ] the bolt transition model, where a and σ are obtained from the policy At. Note that, even though we apply bolt’s update, we still monitor the belief at each step as presented in Eq. 5. Yet, for T̂ we consider the belief at time t, and not the monitored belief b as in the Bayesian update\nLemma 5.3 (bolt Mixed Bound). The difference between the optimistic value obtained by bolt and the Bayesian value obtained by the mixed value function under the policy At generated by bolt with η = H is bounded by\nV boltH (st, bt)− Ṽ At H (st, bt) ≤\n(1− γH)η2\n(1− γ)m . (7)\n[Proof in (Araya-López et al., 2012)]\nProof of Theorem 5.1. We start by the induced inequality (Lemma 5.2) with At the policy generated by bolt at time t, and Ṽ a mixed value function using bolt’s update when (s, a) /∈ K. As R̃max = 1, the chain of inequalities is\nVAt(st, bt) ≥ VAtH (st, bt)\n≥ ṼAtH (st, bt)− 1− γH\n1− γ Pr(AK)\n≥ V boltH (st, bt)− η2(1− γH) m(1− γ) − 1− γ H 1− γ Pr(AK)\n≥ V∗H(st, bt)− η2(1− γH) m(1− γ) − 1− γ H 1− γ Pr(AK)\n≥ V∗(st, bt)− η2(1− γH) m(1− γ) − 1− γ H 1− γ Pr(AK)− γH (1− γ)\nwhere the 3rd step is due to Lemma 5.3 (accuracy) and the 4th step to Lemma 4.1 (optimism). To simplify the analysis, let us assume that γ H\n(1−γ) = 2 and fix\nm = 4η 2\n(1−γ) .\nIf Pr(AK) > η2 m = (1−γ) 4 , by the Hoeffding 4 and union bounds we know that AK occurs no more than\nO ( |S||A|m Pr(AK) log |S||A| δ ) = O ( |S||A|η2 2(1− γ)2 log |S||A| δ ) 4Even though the Hoeffding bound assumes that samples are independent, which is trivially not in MDPs, it upper bounds the case where samples are dependent. Recent results shows that tighter bounds can be achieve with a more elaborated analysis (Szita & Szepesvri, 2010).\ntime steps with probability 1 − δ. By neglecting logarithms we have the desired theorem. This bound is derived from the fact that, if AK occurs more than |S||A|m times, then all the state-action pairs are known and we will never escape from K anymore.\nFor Pr(AK) ≤ η 2\nm , we have that\nVAt(st, bt) ≥ V∗(st, bt)− (1− γH) 4 − (1− γ H) 4 − 2\n≥ V∗(st, bt)− 4 − 4 −\n2 = V∗(st, bt)−\nwhich verifies the proposed theorem.\nFollowing Kolter & Ng (2009), optimism can be ensured for beb with β ≥ 2H2, with Õ ( |S||A|H4 2(1−γ)2 ) non\n-close steps (see (Araya-López et al., 2012)), which is a worse result than bolt. Nevertheless, the bounds used in the proofs are loose enough to expect the optimism property to hold for much smaller values of β and η in practice."
    }, {
      "heading" : "6. Experiments",
      "text" : "To illustrate the characteristics of bolt, we present here experimental results over a number of domains. For all the domains we have tried different parameters for bolt and beb, but also we have used an ε-greedy variant of exploit. However, for all the presented problems plain exploit (ε = 0.0) outperforms the εgreedy variant.\nPlease recall that the theoretical values for parameters β and η—that ensure optimism—depend on the horizon H of the MDPs solved at each time step. In these experiments, instead of using this horizon we relied on asynchronous value iteration, stopping when ‖Vi+1 − Vi‖∞ < . For solving these infinite MDPs we used γ = 0.95 and = 0.01, but be aware that the performance criterion used here is averaged undiscounted total rewards."
    }, {
      "heading" : "6.1. The Chain Problem",
      "text" : "In the 5-state chain problem (Strens, 2000; Poupart et al., 2006), every state is connected to state s1 by taking action b and every state si is connected to the next state si+1 with action a, except s5 that is connected to itself. At each step, the agent may “slip” with probability p, performing the opposite action as intended. Staying in s5 had a reward of 1.0 while coming back to s1 had a reward of 0.2. All other rewards are 0. The priors used for these problems were Full\n(FDM), Tied, where the probability p is factored for all transitions, and Semi, where each action has an independent factored probability.\nTable 1 shows that beb outperforms other algorithms with a tuned up β value for the FDM prior as already shown by Kolter & Ng (2009). However, for a large value of β, this performance decreases dramatically. bolt on the other hand produces results comparable with boss for a tuned parameter, but does not decrease too much for a large value of η. Indeed, this value corresponds to the theoretical bound that ensures optimism, η = H ≈ log( (1− γ))/ log(γ) ≈ 150. Unsurprisingly, the results of beb and bolt with informative priors are not much different than other techniques, because the problem degenerates into a easily solvable problem. Nevertheless, bolt achieves good results for a large η, in contrast to beb that fails to provide a competitive result for the Semi prior with large β.\nThis variability in the results depending on the parameters, rises the question of the sensitivity to parameter tuning. In a RL domain, one usually cannot tune the algorithm parameters for each problem, because the whole model of the problem is unknown. Therefore, a good RL algorithm must perform well for different problems without modifying its parameters.\nFig. 2 shows how beb and bolt behave for different parameters using a Full prior. In the low resolution analysis beb’s performance decays very fast, while bolt also tends to decrease, but maintaining good results. We have also conducted experiments for other values of the slip probability p, the same pattern being amplified when p is near 0, i.e., worse decay for beb and almost constant bolt results, and obtaining almost identical behavior when p is near 0.5. In the high resolution results beb goes up and down near 1, while bolt maintains a similar behaviour as in the low resolution experiment."
    }, {
      "heading" : "6.2. Other Structured Problems",
      "text" : "An other illustrative example is the Paint/Polish problem where the objective is to deliver several polished and painted objects without a scratch, using several stochastic actions with unknown probabilities. The full description of the problem can be found in Walsh\net al. (2009). Here, the possible outcomes of each action are given to the agent, but the probabilities of each outcome are not. We have used a structured prior that encodes this information and the results are summarized in Fig. 3, using both high and low resolution analyses. We have also performed this experiment with an FDM prior, obtaining similar results as for the Chain problem. Unsurprisingly, using a structured prior provides better results than using FDMs. However, the high impact of being overoptimistic shown in Fig. 3, does not apply to FDMs, mainly because the learning phase is much shorter using a structured prior. Again, the decay of beb is much stronger than bolt, but in contrast to the Chain problem, the best parameter of bolt beats the best parameter of beb.\nThe last example is the Marble Maze problem5 (Asmuth et al., 2009) where we have explicitly encoded the 16 possible clusters in the prior, leading to little exploration requirements. exploit provides very good solutions for this problem, and bolt provides similar results with several different parameters. In contrast, for all the tested β parameters, beb behaves much worse than exploit. For example, for the best η = 2.0 bolt scores −0.445, while for the best β = 0.9 beb scores −2.127, while exploit scores −0.590.\nIn summary, it is hard to know a priori which algorithm will perform better for a specific problem with a specific prior and given certain parameters. However, bolt generalizes well (in theory and in practice) for a larger set of parameters, mainly because the optimism is bounded by the probability laws and not by a free parameter as in beb."
    }, {
      "heading" : "7. Conclusion",
      "text" : "We have presented bolt, a novel and simple algorithm that uses an optimistic boost to the Bayes update, which is thus optimistic about the uncertainty rather than just in the face of uncertainty. We showed that bolt is strictly optimistic for certain η parameters, and used this result to prove that it is also PACBAMDP. The sample complexity bounds for bolt are tighter than for beb. Experiments show that bolt is more efficient than beb when using the theoretically derived parameters in the Chain problem, and in general that bolt seems more robust to parameter tuning. Future work includes using a dynamic η bonus for bolt, what should be particularly appropriate with finite horizons, and exploring general proofs to guarantee the PAC-BAMDP property for a broader family of priors than FDMs.\n5Averaged over 100 trials with H = 100."
    } ],
    "references" : [ {
      "title" : "Nearoptimal BRL using optimistic local transitions (extended version)",
      "author" : [ "M. Araya-López", "V. Thomas", "O. Buffet" ],
      "venue" : "Technical Report 7965,",
      "citeRegEx" : "Araya.López et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Araya.López et al\\.",
      "year" : 2012
    }, {
      "title" : "A Bayesian sampling approach to exploration in reinforcement learning",
      "author" : [ "J. Asmuth", "L. Li", "M.L. Littman", "A. Nouri", "D. Wingate" ],
      "venue" : "In Proc. of UAI,",
      "citeRegEx" : "Asmuth et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Asmuth et al\\.",
      "year" : 2009
    }, {
      "title" : "R-max - a general polynomial time algorithm for near-optimal reinforcement learning",
      "author" : [ "R.I. Brafman", "M. Tennenholtz" ],
      "venue" : "JMLR, 3:213–231,",
      "citeRegEx" : "Brafman and Tennenholtz,? \\Q2003\\E",
      "shortCiteRegEx" : "Brafman and Tennenholtz",
      "year" : 2003
    }, {
      "title" : "Optimal learning: Computational procedures for Bayes-adaptive Markov decision processes",
      "author" : [ "M. Duff" ],
      "venue" : "PhD thesis, University of Massachusetts Amherst,",
      "citeRegEx" : "Duff,? \\Q2002\\E",
      "shortCiteRegEx" : "Duff",
      "year" : 2002
    }, {
      "title" : "Near-optimal reinforcement learning in polynomial time",
      "author" : [ "M. Kearns", "S. Singh" ],
      "venue" : "In Machine Learning,",
      "citeRegEx" : "Kearns and Singh,? \\Q1998\\E",
      "shortCiteRegEx" : "Kearns and Singh",
      "year" : 1998
    }, {
      "title" : "Near-Bayesian exploration in polynomial time",
      "author" : [ "J. Kolter", "A. Ng" ],
      "venue" : "In Proc. of ICML,",
      "citeRegEx" : "Kolter and Ng,? \\Q2009\\E",
      "shortCiteRegEx" : "Kolter and Ng",
      "year" : 2009
    }, {
      "title" : "An analytic solution to discrete Bayesian reinforcement learning",
      "author" : [ "P. Poupart", "N. Vlassis", "J. Hoey", "K. Regan" ],
      "venue" : "In Proc. of ICML,",
      "citeRegEx" : "Poupart et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Poupart et al\\.",
      "year" : 2006
    }, {
      "title" : "Markov Decision Processes: Discrete Stochastic Dynamic Programming",
      "author" : [ "M. Puterman" ],
      "venue" : "WileyInterscience,",
      "citeRegEx" : "Puterman,? \\Q1994\\E",
      "shortCiteRegEx" : "Puterman",
      "year" : 1994
    }, {
      "title" : "Variance-based rewards for approximate Bayesian reinforcement learning",
      "author" : [ "J. Sorg", "S. Singh", "R. Lewis" ],
      "venue" : "In Proc. of UAI,",
      "citeRegEx" : "Sorg et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Sorg et al\\.",
      "year" : 2010
    }, {
      "title" : "Reinforcement learning in finite MDPs",
      "author" : [ "A.L. Strehl", "L. Li", "M.L. Littman" ],
      "venue" : "PAC analysis. JMLR,",
      "citeRegEx" : "Strehl et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Strehl et al\\.",
      "year" : 2009
    }, {
      "title" : "A Bayesian framework for reinforcement learning",
      "author" : [ "Strens", "Malcolm J. A" ],
      "venue" : "In Proc. of ICML,",
      "citeRegEx" : "Strens and A.,? \\Q2000\\E",
      "shortCiteRegEx" : "Strens and A.",
      "year" : 2000
    }, {
      "title" : "Reinforcement Learning: An Introduction",
      "author" : [ "R. Sutton", "A. Barto" ],
      "venue" : null,
      "citeRegEx" : "Sutton and Barto,? \\Q1998\\E",
      "shortCiteRegEx" : "Sutton and Barto",
      "year" : 1998
    }, {
      "title" : "Model-based reinforcement learning with nearly tight exploration complexity bounds",
      "author" : [ "Szita", "Istvn", "Szepesvri", "Csaba" ],
      "venue" : "In Proc. of ICML,",
      "citeRegEx" : "Szita et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Szita et al\\.",
      "year" : 2010
    }, {
      "title" : "A theory of the learnable",
      "author" : [ "L.G. Valiant" ],
      "venue" : "In Proc. of STOC. ACM,",
      "citeRegEx" : "Valiant,? \\Q1984\\E",
      "shortCiteRegEx" : "Valiant",
      "year" : 1984
    }, {
      "title" : "Exploring compact reinforcement-learning representations with linear regression",
      "author" : [ "T.J. Walsh", "I. Szita", "C. Diuk", "M.L. Littman" ],
      "venue" : "In Proc. of UAI,",
      "citeRegEx" : "Walsh et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Walsh et al\\.",
      "year" : 2009
    } ],
    "referenceMentions" : [ {
      "referenceID" : 1,
      "context" : "These algorithms typically fall within one of the three following classes (Asmuth et al., 2009).",
      "startOffset" : 74,
      "endOffset" : 95
    }, {
      "referenceID" : 6,
      "context" : "Belief-lookahead approaches try to optimally trade off exploration and exploitation by reformulating RL as the problem of solving a POMDP where the state is a pair ω = (s, b), s being the observed state and b the distribution over the possible models; yet, this problem is intractable, allowing only computationally expensive approximate solutions (Poupart et al., 2006).",
      "startOffset" : 348,
      "endOffset" : 370
    }, {
      "referenceID" : 8,
      "context" : "Optimistic approaches propose exploration mechanisms that explicitly attempt to reduce the model uncertainty (Brafman & Tennenholtz, 2003; Kolter & Ng, 2009; Sorg et al., 2010; Asmuth et al., 2009) by relying on the principle of “optimism in the face of uncertainty”.",
      "startOffset" : 109,
      "endOffset" : 197
    }, {
      "referenceID" : 1,
      "context" : "Optimistic approaches propose exploration mechanisms that explicitly attempt to reduce the model uncertainty (Brafman & Tennenholtz, 2003; Kolter & Ng, 2009; Sorg et al., 2010; Asmuth et al., 2009) by relying on the principle of “optimism in the face of uncertainty”.",
      "startOffset" : 109,
      "endOffset" : 197
    }, {
      "referenceID" : 9,
      "context" : "For some algorithms, recent work proves that they are either PAC-MDP (Strehl et al., 2009)—with high probability they often act as an optimal policy would do (if the MDP model were known)—or PAC-BAMDP (Kolter & Ng, 2009)—with high probability they often act as an ideal belief-lookahead algorithm would do.",
      "startOffset" : 69,
      "endOffset" : 90
    }, {
      "referenceID" : 1,
      "context" : "Then, Section 4 introduces a novel algorithm, bolt, which, (1) as boss (Asmuth et al., 2009), is optimistic about the transition model—which is intuitively appealing since the uncertainty is about the model—and, (2) as beb (Kolter & Ng, 2009), is (almost) deterministic—which leads to a better control over this approach.",
      "startOffset" : 71,
      "endOffset" : 92
    }, {
      "referenceID" : 7,
      "context" : "A Markov Decision Process (MDP) (Puterman, 1994) is defined by a tuple 〈S,A, T,R〉 where S is a finite",
      "startOffset" : 32,
      "endOffset" : 48
    }, {
      "referenceID" : 3,
      "context" : "The belief-state can thus be written as ω = (s, b), which defines a Bayes-Adaptive MDP (BAMDP) (Duff, 2002), a special kind of belief-MDP where the belief-state is factored into the (visible) system state and the belief over the (hidden) model.",
      "startOffset" : 95,
      "endOffset" : 107
    }, {
      "referenceID" : 3,
      "context" : "The optimal Bayesian policy can then be obtained by computing the optimal Bayesian value function (Duff, 2002; Poupart et al., 2006): V∗(s, b)",
      "startOffset" : 98,
      "endOffset" : 132
    }, {
      "referenceID" : 6,
      "context" : "The optimal Bayesian policy can then be obtained by computing the optimal Bayesian value function (Duff, 2002; Poupart et al., 2006): V∗(s, b)",
      "startOffset" : 98,
      "endOffset" : 132
    }, {
      "referenceID" : 8,
      "context" : "Some of them solve the MDP generated by the expected model (at some stage) with an added exploration reward which favors transitions with lesser known models, as in r-max (Brafman & Tennenholtz, 2003), beb (Kolter & Ng, 2009), or with variance based rewards (Sorg et al., 2010).",
      "startOffset" : 258,
      "endOffset" : 277
    }, {
      "referenceID" : 1,
      "context" : "Another approach, used in boss (Asmuth et al., 2009), is to solve, when the model has changed sufficiently, an optimistic estimate of the true MDP (obtained by merging multiple sampled models).",
      "startOffset" : 31,
      "endOffset" : 52
    }, {
      "referenceID" : 1,
      "context" : "One can for example encode the fact that multiple actions share the same model by factoring multiple Dirichlet distributions, or allow the algorithm to identify such structures using Dirichlet distributions combined using Chinese Restaurant Processes or Indian Buffet Processes (Asmuth et al., 2009).",
      "startOffset" : 278,
      "endOffset" : 299
    }, {
      "referenceID" : 13,
      "context" : "Probably Approximately Correct Learning (PAC) provides a way of analyzing the quality of learning algorithms (Valiant, 1984).",
      "startOffset" : 109,
      "endOffset" : 124
    }, {
      "referenceID" : 9,
      "context" : "In RL, the PAC-MDP property (Strehl et al., 2009) guarantees that an algorithm generates an -close policy with probability 1−δ in all but a polynomial number of steps.",
      "startOffset" : 28,
      "endOffset" : 49
    }, {
      "referenceID" : 9,
      "context" : "In RL, the PAC-MDP property (Strehl et al., 2009) guarantees that an algorithm generates an -close policy with probability 1−δ in all but a polynomial number of steps. An important result is the general PACMDP Theorem 10 in Strehl et al. (2009), where three sufficient conditions are presented to comply with the PAC-MDP property.",
      "startOffset" : 29,
      "endOffset" : 245
    }, {
      "referenceID" : 9,
      "context" : "For example, r-max and Delayed Q-Learning (Strehl et al., 2009) are some classic RL algorithms for which this property has been proved, whereas BOSS (Asmuth et al.",
      "startOffset" : 42,
      "endOffset" : 63
    }, {
      "referenceID" : 1,
      "context" : ", 2009) are some classic RL algorithms for which this property has been proved, whereas BOSS (Asmuth et al., 2009) is a Bayesian RL algorithm which is also PAC-MDP.",
      "startOffset" : 93,
      "endOffset" : 114
    }, {
      "referenceID" : 6,
      "context" : "This utopic policy (Poupart et al., 2006) cannot be computed, because it is impossible to learn exactly the model with a finite number of samples, but it is possible to reason on the probabilistic error bounds of an approximation to this policy.",
      "startOffset" : 19,
      "endOffset" : 41
    }, {
      "referenceID" : 3,
      "context" : "This definition has already been presented implicitly by Duff (2002) , but it is very important to point out the difference between a normal MDP evaluation over some known MDP, and the Bayesian evaluation.",
      "startOffset" : 57,
      "endOffset" : 69
    }, {
      "referenceID" : 6,
      "context" : "The baseline algorithm in this family is called exploit (Poupart et al., 2006), where the expected model of b is selected at each time step.",
      "startOffset" : 56,
      "endOffset" : 78
    }, {
      "referenceID" : 1,
      "context" : "In contrast, boss (Asmuth et al., 2009) does not use the exploit approach, but samples different models from the prior and uses them to construct an optimistic MDP.",
      "startOffset" : 18,
      "endOffset" : 39
    }, {
      "referenceID" : 0,
      "context" : "[Proof in (Araya-López et al., 2012)]",
      "startOffset" : 10,
      "endOffset" : 36
    }, {
      "referenceID" : 0,
      "context" : "Therefore, we include in (Araya-López et al., 2012) an analysis of beb using the results of this section in order to be able to compare these algorithms theoretically afterwards.",
      "startOffset" : 25,
      "endOffset" : 51
    }, {
      "referenceID" : 0,
      "context" : "[Proof in (Araya-López et al., 2012)]",
      "startOffset" : 10,
      "endOffset" : 36
    }, {
      "referenceID" : 0,
      "context" : "[Proof in (Araya-López et al., 2012)]",
      "startOffset" : 10,
      "endOffset" : 36
    }, {
      "referenceID" : 0,
      "context" : "-close steps (see (Araya-López et al., 2012)), which is a worse result than bolt.",
      "startOffset" : 18,
      "endOffset" : 44
    }, {
      "referenceID" : 6,
      "context" : "In the 5-state chain problem (Strens, 2000; Poupart et al., 2006), every state is connected to state s1 by taking action b and every state si is connected to the next state si+1 with action a, except s5 that is connected to itself.",
      "startOffset" : 29,
      "endOffset" : 65
    }, {
      "referenceID" : 1,
      "context" : "The last example is the Marble Maze problem (Asmuth et al., 2009) where we have explicitly encoded the 16 possible clusters in the prior, leading to little exploration requirements.",
      "startOffset" : 44,
      "endOffset" : 65
    } ],
    "year" : 2012,
    "abstractText" : "Model-based Bayesian Reinforcement Learning (BRL) allows a sound formalization of the problem of acting optimally while facing an unknown environment, i.e., avoiding the exploration-exploitation dilemma. However, algorithms explicitly addressing BRL suffer from such a combinatorial explosion that a large body of work relies on heuristic algorithms. This paper introduces bolt, a simple and (almost) deterministic heuristic algorithm for BRL which is optimistic about the transition function. We analyze bolt’s sample complexity, and show that under certain parameters, the algorithm is nearoptimal in the Bayesian sense with high probability. Then, experimental results highlight the key differences of this method compared to previous work.",
    "creator" : "LaTeX with hyperref package"
  }
}