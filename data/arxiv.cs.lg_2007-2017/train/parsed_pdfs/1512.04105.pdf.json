{
  "name" : "1512.04105.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Policy Gradient Methods for Off-policy Control",
    "authors" : [ "Lucas Lehnert", "Doina Precup" ],
    "emails" : [ "lucas.lehnert@mail.mcgill.ca", "dprecup@cs.mcgill.ca" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "One fundamental concept in Reinforcement Learning (RL) is Temporal Difference (TD) learning introduced by Sutton [9]. In TD-learning, methods such as TD(0) are used for policy evaluation where one tries to learn the value of a given state under a fixed policy. The extension to the control case is called Q-learning where the value function is defined on state-action pairs. The control policy is then computed from these action values. One of the first Q-learning algorithms was proposed by Watkins and Dayan [14] which simultaneously searches and evaluates a policy by varying its action value estimates. Watkins and Dayan’s Q-learning algorithm is an off-policy algorithm as the policy that is searched and evaluated is strictly greedy with respect to the current action values, but for control the agent uses a ε-greedy policy. This facilitates exploration as the agent is allowed to make a random move with ε probability to obtain representative samples and facilitate the search for a policy that generates high rewards.\nRecently, gradient-based off-policy learning algorithms were introduced such as GTD [11] and TDC [13] which are also proven to be convergent under off-policy learning with linear value function approximation. The extension to Q-learning, GQ(λ) [5], is also convergent under off-policy learning but only if the control policy is fixed. For the control case this is not sufficient as the agent has to explore its environment to be able to search and find a good policy. The reason why convergence cannot be guaranteed is that a non-stationary policy causes drift in the distribution from which transition samples are generated. While this drift is necessary for the agent to find a good policy, it can also cause oscillations in the value function estimates and the algorithm to not converge. SARSA also suffers from this problem and is only guaranteed to converge to a sub-space of policies [4, 3]. Within this sub-space the value function estimates may oscillate indefinitely.\nIn this paper we present a new gradient-based TD-learning algorithm that is similar to GQ but also incorporates policy gradients to correct for the drift in the distribution from which transitions are sampled. Similar to the policy gradient framework [12] we directly analyze the interaction between the policy gradient and the distribution from which transitions are sampled. As a result, our algorithm iterates over the sequence Markov Chains induced by the variation in the value function estimates and therefore policies. This makes our algorithm similar to policy iteration\nar X\niv :1\n51 2.\n04 10\n5v 1\n[ cs\n.A I]\n1 3\nD ec\n2 01\nmethods such as [8]. However, rather than evaluating and then improving the policy in consecutive steps, our method simultaneously improves and evaluates the current policy."
    }, {
      "heading" : "2 Q-learning with Policy Gradients",
      "text" : "We consider an MDP M = 〈S,A, t, r, γ〉 where S is a finite state space and A is a finite action space. The transition function t : S × A × S → (0, 1) is stochastic, the reward function is defined as r : S × A → R, and the discount factor γ ∈ (0, 1). As in [13, 5] we consider the linear function approximation case with a basis function φ : S ×A → Rk and define the state-action value function as\nQθ(s, a) = θ >φ(s, a) ≈ Q(s, a) = E [ ∞∑ t=0 γtrt+1 ∣∣∣∣∣s0 = s, a0 = a ] . (1)\nLet Qθ = Φθ ∈ R|S×A| be the vector of all state-action values and similarly R ∈ R|S×A| be the vector of all rewards. We are assuming that the MDP is ergodic and that a limit distribution ds,a = limt→∞ P{st = s, at = a} exists. Letting D be a diagonal matrix with the limit distribution on its diagonal we define the norm ||v||2D = v>Dv. The Mean Squared Projected Bellman Error introduced by [13] is\nMSPBE(θ) = ||Qθ −ΠTθQθ||2D, (2)\nwhere Π = Φ(ΦDΦ)−1Φ>D is the projection matrix and the Bellman operator applied to the action value function is defined as\nTθQθ def = R+ γPθQθ. (3)\nOur approach differs to TDC and GQ in that we view the Bellman operator and the stationary distribution over state-action pairs as parametric in the value function parameter θ. For the stationary distribution we assume that\nds,a = dsπθ(a|s) = [\nlim t→∞\nP{st = s} ] πθ(a|s). (4)\nThis changes the way derive the gradient of the MSPBE as we assume additional dependencies on the parameter vector θ through the action selection probabilities πθ(a|s)."
    }, {
      "heading" : "2.1 Gradient Derivation",
      "text" : "To obtain the gradient of the MSPBE objective, [13] have shown\nMSPBE(θ) = ( Φ>D(TθQθ −Qθ) )> (Φ>DΦ)−1 ( Φ>D(TθQθ −Qθ) ) .\nTo simplify the gradient calculation we assume θ = [θ1, ..., θn] > and compute the partial dervative with respect to θi, which we denote with ∂i:\n∂iMSPBE(θ) =\n= ∂i [( Φ>D(Tπθ Qθ −Qθ) )> (Φ>DΦ)−1 ( Φ>D(Tπθ Qθ −Qθ) )] = 2∂i [( Φ>D(Tπθ Qθ −Qθ) )>] (Φ>DΦ)−1 ( Φ>D(Tπθ Qθ −Qθ)\n) + ( Φ>D(Tπθ Qθ −Qθ) )> ∂i [ (Φ>DΦ)−1 ] ( Φ>D(Tπθ Qθ −Qθ) ) .\nFor the derivative of the inverse feature covariance we have ∂i [ (Φ>DΦ)−1 ] = −(Φ>DΦ)−1∂i(Φ>DΦ)(Φ>DΦ)−1\n= −(Φ>DΦ)−1(Φ>∂iDΦ)(Φ>DΦ)−1.\nPlugging this back into the gradient above we obtain\n∂iMSPBE(θ) = = 2 ( Φ>∂iD(T π θ Qθ −Qθ) + Φ>D∂i(Tπθ Qθ −Qθ) )> (Φ>DΦ)−1 ( Φ>D(Tπθ Qθ −Qθ) ) − ( Φ>D(Tπθ Qθ −Qθ) )> (Φ>DΦ)−1(Φ>∂iDΦ)(Φ >DΦ)−1 ( Φ>D(Tπθ Qθ −Qθ) ) .\nFor the partial derivative on the Bellman error we have\n∂i[TθQθ −Qθ] = ∂i[R+ γPθΦθ − Φθ] = γ∂iPθΦθ + γPθ∂i[Φθ]− ∂i[Φθ] = γ∂iPθΦθ + γPθΦ:,i − Φ:,i,\nwhere Φ:,i is the ith column of Φ. Plugging this back into the MSPBE gradient we have\n∂iMSPBE(θ) = 2 ( Φ>∂iD(TθQθ −Qθ) + Φ>D(γ∂iPθΦθ + γPθΦ:,i − Φ:,i) )> (Φ>DΦ)−1 ( Φ>D(TθQθ −Qθ) ) − ( Φ>D(TθQθ −Qθ) )> (Φ>DΦ)−1(Φ>∂iDΦ)(Φ >DΦ)−1 ( Φ>D(TθQθ −Qθ)\n) = 2 ( Φ>∂iD(TθQθ −Qθ) )> (Φ>DΦ)−1 ( Φ>D(TθQθ −Qθ)\n) + 2 ( Φ>D(γ∂iPθΦθ + γPθΦ:,i − Φ:,i) )> (Φ>DΦ)−1 ( Φ>D(TθQθ −Qθ)\n) − ( Φ>D(TθQθ −Qθ) )> (Φ>DΦ)−1(Φ>∂iDΦ)(Φ >DΦ)−1 ( Φ>D(TθQθ −Qθ) ) . (5)"
    }, {
      "heading" : "2.2 Sampling the Gradient",
      "text" : "To derive a stochastic gradient descend algorithm we rewrite (5) as expectations. Let\nw = (Φ>DΦ)−1 ( Φ>D(TθQθ −Qθ) ) = E [ φφ> ]−1 E [δφ] , where φ = φ(s, a) with s, a ∼ ds,a and the TD-error being\nδ = r(s, a) + γ ∑ a′ θ>φ′ − θ>φ\nwith φ′ = φs′,a′ and P{s′|s, a} = t(s, a, s′). This simplifies the partial derivative to\n∂iMSPBE(θ) = 2 [( Φ>∂iD(TθQθ −Qθ) )> + ( Φ>D(γ∂iPθΦθ + γPθΦ:,i − Φ:,i) )>] w−w>(Φ>∂iDΦ)w.\n(6) For the first matrix term we have\nΦ>∂iD(TθQθ −Qθ) = Φ>∂iD(R+ γPθQθ −Qθ) = Φ>diag {∂ids,a}s,a (R+ γPθQθ −Qθ)\n= Φ>diag {ds∂iπθ(a|s)}s,a (R+ γPθQθ −Qθ) = [ ds1∂iπθ(a1|s1)φs1,a1 · · · dsn∂iπθ(am|sn)φsn,am ]  δs1,a1... δsn,am  = ∑ s,a ds∂iπθ(a|s)φ>δ\n= E [ ∂iπθ πθ δφ> ] ,\nwhere the expectation is over s, a ∼ ds,a, ∂iπθ/πθ = ∂iπθ(a|s)/πθ(a|s), and P{s′|s, a} = t(s, a, s′) for the TD-error. For the second matrix term we denote the ith component of φ as φi. Expanding this term we have\nΦ>D(γ∂iPθΦθ + γPθΦ:,i − Φ:,i)\n= Φ>D γ  ∑ s′,a′ t(s1, a1, s ′)∂iπθ(a ′|s′)θ>φ′\n...∑ s′,a′ t(sn, am, s ′)∂iπθ(a ′|s′)θ>φ′\n+ γ  ∑ s′,a′ t(s1, a1, s ′)πθ(a ′|s′)φ′i\n...∑ s′,a′ t(sn, am, s ′)πθ(a ′|s′)φ′i\n−  φ i s1,a1 ...\nφisn,am\n \n= Φ>D   γ ∑ s′,a′ t(s1, a1, s ′)∂iπθ(a ′|s′)θ>φ′ + γ ∑ s′,a′ t(s1, a1, s ′)πθ(a ′|s′)φ′i − φis1,a1\n... γ ∑ s′,a′ t(sn, am, s ′)∂iπθ(a ′|s′)θ>φ′ + γ ∑ s′,a′ t(sn, am, s ′)πθ(a ′|s′)φ′i − φisn,am\n \n= ∑ s,a ds,aφ > γ∑ s′,a′ t(s, a, s′)∂iπθ(a ′|s′)θ>φ′ + γ ∑ s′,a′ t(s, a, s′)πθ(a ′|s′)φ′i − φi  = E [( γE [ ∂iπ ′ θ\nπ′θ θ>φ′\n] + γE [ θ>φ′i ] − φi ) φ> ] ,\nwhere ∂iπ ′ θ/π ′ θ = ∂iπθ(a ′|s′)/πθ(a′|s′). For the third term we obtain\nw>(Φ>∂iDΦ)w = w > [φs1,a1 · · · φsn,am] diag {ds∂iπθ(a|s)}s,a  φs1,a1... φsn,am  w\n= w> (∑ s,a ds∂iπθ(a|s)φφ> ) w\n= w>E [ ∂iπθ πθ φφ> ] w.\nAssembling the MSPBE gradient then gives\n− 1 2 ∇θMSPBE(θ)\n= − { E [ ∇θπθ πθ δφ′> ] + E [( γE [ ∇θπ′θ π′θ θ>φ′ ] + γE [φ′]− φ ) φ> ]} w + 1 2 w>E [ ∇θπθ πθ φφ> ] w\n= −E [ ∇θπθ πθ δφ> ] w − E [( γE [ ∇θπ′θ π′θ θ>φ′ ] + γE [φ′]− φ′ ) φ> ] w + 1 2 w>E [ ∇θπθ πθ φφ> ] w\n= E [ φφ> ] E [ φφ> ]−1 E [δφ]︸ ︷︷ ︸ =w −γE [ φ′φ> ] w − E [ ∇θπθ πθ δφ> ] w − γE [ ∇θπ′θ π′θ θ>φ′φ> ] w + 1 2 w>E [ ∇θπθ πθ φφ> ] w\n= E [δφ]− γE [ φ′φ> ] w − E [ ∇θπθ πθ δφ> ] w − γE [ ∇θπ′θ π′θ θ>φ′φ> ] w + 1 2 w>E [ ∇θπθ πθ φφ> ] w (7)\nTo derive an iterative algorithm we follow [11] and derive two timescale update rules to learn the parameter vector θ and approximate the auxiliary weight vector w with\nw ← w + β(δ − φ>w)φ. (8)\nSampling the gradient above then gives the update rule θ ← θ + α [ δφ− γφ′φ>w − ∇θπθ\nπθ δφ>w − γ∇θπ ′ θ π′θ (θ>φ′)(φ>w) + 1 2 ∇θπθ πθ\n(w>φ)2 ] . (9)\nNote that this update rule contains the standard TDC/GQ term plus correction terms that are in the direction of the policy gradient.\nAlgorithm 1 shows the resulting algorithm, which we call PGQ for Policy-Gradient Q-learning. This algorithm uses linear function approximation and updates are done in O(k), where k is the number of basis functions used. After making a transition, we do not want to sample the next action using the old parameter estimate and rather use the updated θ estimate. To do this we have to the calculate expected values φ and φ ∇ analytically over the next possible actions.\nAlgorithm 1 Policy Gradient Q-learning Input: A transition sample (s, a, r, s′).\nρ← πθ(a|s)b(a|s) ρ∇ ← ∇θπθ(a|s)b(a|s) φ← ∑ a′ πθ(a\n′|s′)φ(s′, a′) φ ∇ ← ∑ a′ ∇θπθ(a′|s′)θ>φ(s′, a′) δ ← r + γθ>φ− θ>φ θ ← θ + α ( δφ− γφ′(φ>w)− ρ∇δ(φ>w)− γφ∇(φ>w) + 12 (w >φ)2 ) w ← w + β(δ − φ>w)φ"
    }, {
      "heading" : "3 Baird Counter Example",
      "text" : "We have tested our method on the ”star” Baird counter example [1] and compared it with Q-learning and GQ [5]. For this 7 state version divergence of Q-learning is monotonic and GQ is known to converge [7]. We initialize the parameter vector θ corresponding to the action that transitions to the 7th centre state with (1, 1, 1, 1, 1, 1, 1, 10) and the remaining parameter entries with 1. The discount factor is set to γ = 0.99. In our experiments we do not assume a hard-coded policy that ensures uniform exploration over state-action pairs but look at the control case where actions are selected using a Boltzmann policy where the probability of selecting a specific action is\nπθ(a|s) = exp(θ>φ(s, a)/τ)∑ b exp(θ >φ(s, b)/τ) . (10)\nUpdating was done either through sampling transitions (s, a, s′, r) according to hard coded distributions or either through simulating trajectories through the MDP. For the sampled version we have sampled the state s according to a uniform distribution over all 7 states, the action a was sampled with probability πθ(a|s) and the next state s′ was sampled according to the transition model. Figure 1 shows the MSPBE error for the sampled update experiment. Q-learning diverges monotonically and both GQ and PGQ converge to a zero MSPBE.\nFor the trajectory based experiments we have sampled one of the seven start states uniformly and then executed transitions through the MDP. While transitioning or updating the parameter vector we have measured the MSPBE using a uniform stationary distribution over states. Figure 2 shows the MSPBE and the Mean Squared TD-error (MSTDE) defined in [2] of the parameter vector θ at each step of the simulation."
    }, {
      "heading" : "4 Conclusion",
      "text" : "We have presented a new gradient based TD-learning algorithm that incorporates policy gradients. The resulting algorithm is similar to GQ/TDC but also has a correction term in the direction of the gradient of the target policy. Our analysis assumes a dependency of the Markov chain on the\nparameter vector θ through the target policy. This allows our algorithm to correctly step over a sequence of different Markov chains and account for the drift in the distribution from which transition data is sampled due to changes in the parameter vector.\nOne next research direction is to extend this method to the non-linear function approximation case. Maei [6] present the first gradient based TD algorithm that converges in this case. One may able to draw on their results for our work. For the derivation of our algorithm we only assumed the Bellman operator to be parametric in the parameter estimate, which lead to the additional policy gradient terms. No further assumptions were made on the Bellman operator and the value function terms in the MSPBE objective, so in the non-linear function approximation case one would obtain gradients of the value function here. However, one would have to analyze the projection operator in the MSPBE objective differently."
    } ],
    "references" : [ {
      "title" : "Residual algorithms: Reinforcement learning with function approximation",
      "author" : [ "Leemon Baird" ],
      "venue" : "In Proceedings of the Twelfth International Conference on Machine Learning,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 1995
    }, {
      "title" : "Policy evaluation with temporal differences: A survey and comparison",
      "author" : [ "Christoph Dann", "Gerhard Neumann", "Jan Peters" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2014
    }, {
      "title" : "Chattering in sarsa(lambda) - a cmu learning lab internal report",
      "author" : [ "Geoffrey J. Gordon" ],
      "venue" : "Technical report,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 1996
    }, {
      "title" : "Reinforcement learning with function approximation converges to a region",
      "author" : [ "Geoffrey J. Gordon" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2001
    }, {
      "title" : "Gq(lambda): A general gradient algorithm for temporal-difference prediction learning with eligibility traces",
      "author" : [ "H.R. Sutton R.S. Maei" ],
      "venue" : "Proceedings of the Third Conference on Artificial General Intelligence,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2010
    }, {
      "title" : "Convergent temporaldifference learning with arbitrary smooth function approximation",
      "author" : [ ],
      "venue" : "In Advances in Neural Information Processing Systems 22,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2009
    }, {
      "title" : "Toward off-policy learning control with function approximation",
      "author" : [ ],
      "venue" : "In Proceedings of the 27th International Conference on Machine Learning,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2010
    }, {
      "title" : "A convergent form of approximate policy iteration",
      "author" : [ "Theodore J. Perkins", "Doina Precup" ],
      "venue" : "Advances in Neural Information Processing Systems",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2003
    }, {
      "title" : "Learning to predict by the methods of temporal differences",
      "author" : [ "Richard S. Sutton" ],
      "venue" : "Mach. Learn.,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 1988
    }, {
      "title" : "Reinforcement Learning: An Introduction",
      "author" : [ "Richard S. Sutton", "Andrew G. Barto" ],
      "venue" : null,
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1998
    }, {
      "title" : "Policy gradient methods for reinforcement learning with function approximation",
      "author" : [ "Richard S. Sutton", "David McAllester", "Satinder Singh", "Yishay Mansour" ],
      "venue" : "In IN ADVANCES IN NEURAL INFORMATION PROCESSING SYSTEMS",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2000
    }, {
      "title" : "Fast gradient-descent methods for temporal-difference learning with linear function approximation",
      "author" : [ "Richard S. Sutton", "Hamid Reza Maei", "Doina Precup", "Shalabh Bhatnagar", "David Silver", "Csaba Szepesvári", "Eric Wiewiora" ],
      "venue" : "Proceedings of the 26th International Conference on Machine Learning,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2009
    } ],
    "referenceMentions" : [ {
      "referenceID" : 11,
      "context" : "Gradient-based off-policy learning algorithms, such as GTD and TDC/GQ [13], converge even when using function approximation and incremental updates.",
      "startOffset" : 70,
      "endOffset" : 74
    }, {
      "referenceID" : 8,
      "context" : "One fundamental concept in Reinforcement Learning (RL) is Temporal Difference (TD) learning introduced by Sutton [9].",
      "startOffset" : 113,
      "endOffset" : 116
    }, {
      "referenceID" : 11,
      "context" : "Recently, gradient-based off-policy learning algorithms were introduced such as GTD [11] and TDC [13] which are also proven to be convergent under off-policy learning with linear value function approximation.",
      "startOffset" : 97,
      "endOffset" : 101
    }, {
      "referenceID" : 4,
      "context" : "The extension to Q-learning, GQ(λ) [5], is also convergent under off-policy learning but only if the control policy is fixed.",
      "startOffset" : 35,
      "endOffset" : 38
    }, {
      "referenceID" : 3,
      "context" : "SARSA also suffers from this problem and is only guaranteed to converge to a sub-space of policies [4, 3].",
      "startOffset" : 99,
      "endOffset" : 105
    }, {
      "referenceID" : 2,
      "context" : "SARSA also suffers from this problem and is only guaranteed to converge to a sub-space of policies [4, 3].",
      "startOffset" : 99,
      "endOffset" : 105
    }, {
      "referenceID" : 10,
      "context" : "Similar to the policy gradient framework [12] we directly analyze the interaction between the policy gradient and the distribution from which transitions are sampled.",
      "startOffset" : 41,
      "endOffset" : 45
    }, {
      "referenceID" : 7,
      "context" : "methods such as [8].",
      "startOffset" : 16,
      "endOffset" : 19
    }, {
      "referenceID" : 11,
      "context" : "As in [13, 5] we consider the linear function approximation case with a basis function φ : S ×A → R and define the state-action value function as Qθ(s, a) = θ >φ(s, a) ≈ Q(s, a) = E [ ∞ ∑",
      "startOffset" : 6,
      "endOffset" : 13
    }, {
      "referenceID" : 4,
      "context" : "As in [13, 5] we consider the linear function approximation case with a basis function φ : S ×A → R and define the state-action value function as Qθ(s, a) = θ >φ(s, a) ≈ Q(s, a) = E [ ∞ ∑",
      "startOffset" : 6,
      "endOffset" : 13
    }, {
      "referenceID" : 11,
      "context" : "The Mean Squared Projected Bellman Error introduced by [13] is MSPBE(θ) = ||Qθ −ΠTθQθ||D, (2) where Π = Φ(ΦDΦ)−1Φ>D is the projection matrix and the Bellman operator applied to the action value function is defined as TθQθ def = R+ γPθQθ.",
      "startOffset" : 55,
      "endOffset" : 59
    }, {
      "referenceID" : 11,
      "context" : "1 Gradient Derivation To obtain the gradient of the MSPBE objective, [13] have shown",
      "startOffset" : 69,
      "endOffset" : 73
    }, {
      "referenceID" : 0,
      "context" : "We have tested our method on the ”star” Baird counter example [1] and compared it with Q-learning and GQ [5].",
      "startOffset" : 62,
      "endOffset" : 65
    }, {
      "referenceID" : 4,
      "context" : "We have tested our method on the ”star” Baird counter example [1] and compared it with Q-learning and GQ [5].",
      "startOffset" : 105,
      "endOffset" : 108
    }, {
      "referenceID" : 6,
      "context" : "For this 7 state version divergence of Q-learning is monotonic and GQ is known to converge [7].",
      "startOffset" : 91,
      "endOffset" : 94
    }, {
      "referenceID" : 1,
      "context" : "Figure 2 shows the MSPBE and the Mean Squared TD-error (MSTDE) defined in [2] of the parameter vector θ at each step of the simulation.",
      "startOffset" : 74,
      "endOffset" : 77
    }, {
      "referenceID" : 5,
      "context" : "Maei [6] present the first gradient based TD algorithm that converges in this case.",
      "startOffset" : 5,
      "endOffset" : 8
    } ],
    "year" : 2015,
    "abstractText" : "Off-policy learning refers to the problem of learning the value function of a way of behaving, or policy, while following a different policy. Gradient-based off-policy learning algorithms, such as GTD and TDC/GQ [13], converge even when using function approximation and incremental updates. However, they have been developed for the case of a fixed behavior policy. In control problems, one would like to adapt the behavior policy over time to become more greedy with respect to the existing value function. In this paper, we present the first gradient-based learning algorithms for this problem, which rely on the framework of policy gradient in order to modify the behavior policy. We present derivations of the algorithms, a convergence theorem, and empirical evidence showing that they compare favorably to existing approaches.",
    "creator" : "LaTeX with hyperref package"
  }
}