{
  "name" : "1708.00075.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Efficient Regret Minimization in Non-Convex Games",
    "authors" : [ "Elad Hazan", "Karan Singh", "Cyril Zhang" ],
    "emails" : [ "ehazan@cs.princeton.edu,", "karans@cs.princeton.edu,", "cyril.zhang@princeton.edu," ],
    "sections" : [ {
      "heading" : null,
      "text" : "standard notion of regret is computationally intractable. Thus, we define a natural notion of regret which permits efficient optimization and generalizes offline guarantees for convergence to an approximate local optimum. We give gradient-based methods that achieve optimal regret, which in turn guarantee convergence to equilibrium in this framework."
    }, {
      "heading" : "1 Introduction",
      "text" : "Repeated games with non-convex utility functions serve to model many natural settings, such as multiplayer games with risk-averse players and adversarial (e.g. GAN) training. However, standard regret minimization and equilibria computation with general non-convex losses are computationally hard. This paper studies computationally tractable notions of regret minimization and equilibria in non-convex repeated games.\nRegret minimization in games typically amounts to repeated play in which the decision maker accumulates an average loss proportional to that of the best fixed decision in hindsight. This is a global notion with respect to the decision set of the player. If the loss functions are convex (or, as often considered, linear) restricted to the actions of the other players, then this notion of global optimization is computationally tractable. It can be shown that under certain conditions, players that minimize regret converge in various notions to standard notions of equilibrium, such as Nash equilibrium, correlated equilibrium, and coarse correlated equilibrium. This convergence crucially relies on the global optimality guaranteed by regret.\nIn contrast, it is NP-hard to compute the global minimum of a non-convex function over a convex domain. Rather, efficient non-convex continuous optimization algorithms focus on finding a local minimum. We thus consider notions of equilibrium that can be obtained from local optimality conditions of the players with respect to each-others’ strategies. This requires a different notion of regret whose minimization guarantees convergence to a local minimum.\nThe rest of the paper is organized as follows. After briefly discussing why standard regret is not a suitable metric of performance, we introduce and motivate local regret, a surrogate for regret to the non-convex world. We then proceed to give efficient algorithms for non-convex online learning with optimal guarantees for this new objective. In analogy with the convex setting, we discuss the way our framework captures the offline and stochastic cases. In the final section, we describe a game-theoretic solution concept which is intuitively appealing, and, in contrast to other equilibria, efficiently attainable in the non-convex setting by simple algorithms."
    }, {
      "heading" : "1.1 Related work",
      "text" : "The field of online learning is by now rich with a diverse set of algorithms for extremely general scenarios, see e.g. [CBL06]. For bounded cost functions over a bounded domain, it is well known that versions of the multiplicative weights method gives near-optimal regret bounds [Cov91, Vov90, AHK12].\n∗ehazan@cs.princeton.edu, Department of Computer Science, Princeton University †karans@cs.princeton.edu, Department of Computer Science, Princeton University ‡cyril.zhang@princeton.edu, Department of Computer Science, Princeton University\nar X\niv :1\n70 8.\n00 07\n5v 1\n[ cs\n.L G\n] 3\n1 Ju\nl 2 01\n7\nDespite the tremendous generality in terms of prediction, the multiplicative weights method in its various forms yields only exponential-time algorithms for these general scenarios. This is inevitable, since regret minimization implies optimization, and general non-convex optimization is NP-hard. Convex forms of regret minimization have dominated the learning literature in recent years due to the fact that they allow for efficient optimization, see e.g. [Haz16, SS11].\nNon-convex mathematical optimization algorithms typically find a local optimum. For smooth optimization, gradient-based methods are known to find a point with gradient of squared norm at most ε in O( 1ε ) iterations [Nes04].1 A rate of O( 1ε2 ) is known for stochastic gradient descent [GL13]. Further accelerations in terms of the dimension are possible via adaptive regularization [DHS11].\nRecently, stochastic second-order methods have been considered, which enable even better guarantees for non-convex optimization: not only is the gradient at the point returned small, but the Hessian is also guaranteed to be close to positive semidefinite (i.e. the objective function is locally almost-convex), see e.g. [EM15, CDHS16, AAZB+16, ABH16].\nThe relationship between regret minimization and learning in games has been considered in both the machine learning literature, starting with [FS97], and the game theory literature by [HMC00]. Motivated by [HMC00], [BM05] study reductions from internal to external regret, and [HK07] relate the computational efficiency of these reductions to fixed point computations."
    }, {
      "heading" : "2 Setting",
      "text" : "We begin by introducing the setting of online non-convex optimization, which is modeled as a game between a learner and an adversary. During each iteration t, the learner is tasked with predicting xt from K ⊆ Rn, a convex decision set. Concurrently, the adversary chooses a loss function ft : K → R; the learner then observes ft(x) (via access to a first-order oracle) and suffers a loss of ft(xt). This procedure of play is repeated across T rounds.\nThe performance of the learner is measured through its regret, which is defined as a function of the loss sequence f1, . . . , fT and the sequence of online decisions x1, . . . , xT made by the learner. We discuss our choice of regret measure at length in Section 2.2.\nThroughout this paper, we assume the following standard regularity conditions:\nAssumption 2.1. We assume the following is true for each loss function ft:\n(i) ft is bounded: |ft(x)| ≤M.\n(ii) ft is L-Lipschitz: |ft(x)− ft(y)| ≤ L‖x− y‖.\n(iii) ft is β-smooth (has a β-Lipschitz gradient):\n‖∇ft(x)−∇ft(y)‖ ≤ β‖x− y‖."
    }, {
      "heading" : "2.1 Projected gradients and constrained non-convex optimization",
      "text" : "In constrained non-convex optimization, minimizing the gradient presents difficult computational challenges. In general, even when objective functions are smooth and bounded, local information may provide no information about the location of a stationary point. This motivates us to refine our search criteria.\nConsider, for example, the function sketched in Figure 1. In this construction, defined on the hypercube in Rn, the unique point with a vanishing gradient is a hidden valley, and gradients outside this valley are all identical. Clearly, it is hopeless in an information-theoretic sense to find this point efficiently: the number of value or gradient evaluations of this function must be exp(Ω(n)) to discover the valley.\n1We note here that we measure the squared norm of the gradient, since it is more compatible with convex optimization. The mathematical optimization literature sometimes measures the norm of the gradient without squaring it.\nTo circumvent such inherently difficult and degenerate cases, we relax our conditions, and try to find a vanishing projected gradient. In this section, we introduce this notion formally, and motivate it as a natural quantity of interest to capture the search for local minima in constrained non-convex optimization.\nDefinition 2.2 (Projected gradient). Let f : K → R be a differentiable function on a closed (but not necessarily bounded) convex set K ⊆ Rn. Let η > 0. We define ∇K,ηf : K → Rn, the (K, η)-projected gradient of f , by\n∇K,ηf(x) def =\n1 η (x−ΠK [x− η∇f(x)]) ,\nwhere ΠK[·] denotes the orthogonal projection onto K.\nThis can be viewed as a surrogate for the gradient which ensures that the gradient descent step always lies within K, by transforming it into a projected gradient descent step. Indeed, one can verify by definition that\nx− η∇K,η(x) = ΠK [x− η∇f(x)] .\nIn particular, when K = Rn,\n∇K,ηf(x) = 1\nη (x− x+ η∇f(x)) = ∇f(x),\nand we retrieve the usual gradient at all x. We first note that there always exists a point with vanishing projected gradient.\nProposition 2.3. Let K be a compact convex set, and suppose f : K → R satisfies Assumption 2.1. Then, there exists some point x∗ ∈ K for which\n∇K,ηf(x∗) = 0.\nProof. Consider the map g : K → K, defined by\ng(x) def = x− η∇K,ηf(x) = ΠK [x− η∇f(x)] .\nThis is a composition of continuous functions (noting that the smoothness assumption implies that ∇f is continuous), and is therefore continuous. Thus g satisfies the conditions for Brouwer’s fixed point theorem, implying that there exists some x∗ ∈ K for which g(x∗) = x∗. At this point, the projected gradient vanishes.\nIn the limit where η‖∇f(x)‖ is infinitesimally small, the projected gradient is equal to the gradient in the interior of K; on the boundary of K, it is the gradient with its outward-facing component removed. This exactly captures the first-order condition for a local minimum.\nThe final property that we note here is that an approximate local minimum, as measured by a small projected gradient, is robust with respect to small perturbations.\nProposition 2.4. Let x be any point in K ⊆ Rn, and let f, g be differentiable functions K → R. Then, for any η > 0,\n‖∇K,η[f + g](x)‖ ≤ ‖∇K,ηf(x)‖+ ‖∇g(x)‖.\nProof. Let u = x+η∇f(x), and v = u+η∇g(x). Define their respective projections u′ = ΠK [u] , v′ = ΠK [v], so that u′ = x− η∇K,ηf(x) and v′ = x− η∇K,η[f + g](x). We first show that ‖u′ − v′‖ ≤ ‖u− v‖.\nBy the generalized Pythagorean theorem for convex sets, we have both 〈u′ − v′, v − v′〉 ≤ 0 and 〈v′ − u′, u− u′〉 ≤ 0. Summing these, we get\n〈u′ − v′, u′ − v′ − (u− v)〉 ≤ 0 =⇒ ‖u′ − v′‖2 ≤ 〈u′ − v′, u− v〉\n≤ ‖u′ − v′‖ · ‖u− v‖,\nas claimed. Finally, by the triangle inequality, we have\n‖∇K,η[f + g](x)‖ − ‖∇K,ηf(x)‖ ≤ ‖∇K,η[f + g](x)−∇K,ηf(x)‖\n= 1\nη ‖u′ − v′‖\n≤ 1 η ‖u− v‖ = ‖∇g(x)‖,\nas required.\nIn particular, this fact immediately implies that ‖∇K,ηf(x)‖ ≤ ‖∇f(x)‖. As we demonstrate later, looking for a small projected gradient becomes a feasible task. In Figure 1\nabove, such a point exists on the boundary of K, even when there is no “hidden valley” at all."
    }, {
      "heading" : "2.2 A local regret measure",
      "text" : "In the well-established framework of online convex optimization, numerous algorithms can efficiently achieve optimal regret, in the sense of converging in terms of average loss towards the best fixed decision in hindsight. That is, for any u ∈ K, one can play iterates x1, . . . , xT such that\n1\nT T∑ i=1 [ft(xt)− ft(u)] = o(1).\nUnfortunately, even in the offline case, it is too ambitious to converge towards a global minimizer in hindsight. In the existing literature, it is usual to state convergence guarantees towards an ε-approximate stationary point – that is, there exists some iterate xt for which ‖∇f(xt)‖2 ≤ ε. As discussed in the previous section, the projected gradient is a natural analogue for the constrained case.\nIn light of the computational intractability of direct analogues of convex regret, we introduce local regret, a new notion of regret which quantifies the objective of predicting points with small gradients on average. The remainder of this paper discusses the motivating roles of this quantity.\nThroughout this paper, for convenience, we will use the following notation to denote the sliding-window time average of functions f , parametrized by some window size 1 ≤ w ≤ T :\nFt,w(x) def =\n1\nw w−1∑ i=0 ft−i(x).\nFor simplicity of notation, we define ft(x) to be identically zero for all t ≤ 0. We define local regret below:\nDefinition 2.5 (Local regret). Fix some η > 0. Define the w-local regret of an online algorithm as\nRw(T ) def = T∑ t=1 ‖∇K,ηFt,w(xt)‖2,\nWhen the window size w is understood by context, we omit the parameter, writing simply local regret as well as Ft(x).\nWe turn to the first motivating perspective on local regret. When an algorithm incurs local regret sublinear in T , a randomly selected iterate has a small time-averaged gradient in expectation:\nProposition 2.6. Let x1, . . . , xT be the iterates produced by an algorithm for online non-convex optimization which incurs a local regret of Rw(T ). Then,\nE t∼Unif([T ])\n[ ‖∇K,ηFt,w(xt)‖2 ] ≤ Rw(T )\nT .\nThis generalizes typical convergence results for the gradient in offline non-convex optimization; we discuss concrete reductions in Section 4."
    }, {
      "heading" : "2.3 Why smoothing is necessary",
      "text" : "In this section, we show that for any online algorithm, an adversarial sequence of loss functions can force the local regret incurred to scale with T as Ω ( T w2 ) . This demonstrates the need for a time-smoothed performance measure in our setting, and justifies our choice of larger values of the window size w in the sections that follow.\nTheorem 2.7. Define K = [−1, 1]. For any T ≥ 1, 1 ≤ w ≤ T , and η ≤ 1, there exists a distribution D on 0-smooth, 1-bounded cost functions f1, . . . , fT on K such that for any online algorithm, when run on this sequence of functions,\nE D\n[Rw(T )] ≥ 1\n4w\n⌊ T\n2w\n⌋ .\nProof. We begin by partitioning the T rounds of play into b T2w c repeated segments, each of length 2w. For the first half of the first segment (t = 1, . . . , w), the adversary declares that\n• For odd t, select ft(x) i.i.d. as follows:\nft(x) := { −x, with probability 12 x, with probability 12\n• For even t, ft(x) := −ft−1(x).\nDuring the second half (t = w+1, . . . , 2w), the adversary sets all ft(x) = 0. This construction is repeated b T2w c times, padding the final T mod 2w costs arbitrarily with ft(x) = 0.\nBy this construction, at each round t at which ft(x) is drawn randomly, we have Ft,w(x) = ft(x)/w. Furthermore, for any xt played by the algorithm, |∇K,ηft(xt)| = 1 with probability at least 12 . so that E [ ‖∇K,ηFt,w(xt)‖2 ] ≥ 12w2 . The claim now follows from the fact that there are at least w 2 of these rounds\nper segment, and exactly ⌊ T 2w ⌋ segments in total.\nWe further note that the notion of time-smoothing captures non-convex online optimization under limited concept drift : in online learning problems where Ft,w(x) ≈ ft(x), a bound on local regret truly captures a guarantee of playing points with small gradients."
    }, {
      "heading" : "3 An efficient non-convex regret minimization algorithm",
      "text" : "Our approach, as given in Algorithm 1, is to play follow-the-leader iterates, approximated to a suitable tolerance using projected gradient descent. We show that this method efficiently achieves an optimal local regret bound of O ( T w2 ) , taking O (Tw) iterations of the inner loop.\nAlgorithm 1 Time-smoothed online gradient descent\n1: Input: window size w ≥ 1, learning rate 0 < η < β2 , tolerance δ > 0, a convex body K ⊆ R n. 2: Set x1 ∈ K arbitrarily. 3: for t = 1, . . . , T do 4: Predict xt. Observe the cost function ft : K → R. 5: Initialize xt+1 := xt. 6: while ‖∇K,ηFt,w(xt+1)‖ > δ/w do 7: Update xt+1 := xt+1 − η∇K,ηFt,w(xt+1). 8: end while 9: end for\nTheorem 3.1. Let f1, . . . , fT be the sequence of loss functions presented to Algorithm 1, satisfying Assumption 2.1. Then:\n(i) The w-local regret incurred satisfies\nRw(T ) ≤ (δ + 2L)2 T\nw2 .\n(ii) The total number of gradient steps τ taken by Algorithm 1 satisfies\nτ ≤ M δ2 ( η − βη22 ) · (2Tw + w2) . Proof of (i). We note that Algorithm 1 will only play an iterate xt if ‖∇K,ηFt−1,w‖ ≤ δ/w. (Note that at t = 1, Ft−1,w is zero.) Let ht(x) = 1 w (ft(x)− ft−w(x)), which is 2L w -Lipschitz. Then, for each 1 ≤ t ≤ T we have a bound on each cost\n‖∇K,ηFt,w(xt)‖2 = ‖∇K,η [Ft,w−1 + ht(x)] (xt)‖2\n≤ (‖∇K,ηFt,w−1‖+ ‖∇ht(xt)‖)2 ≤ ( δ\nw +\n2L\nw\n)2 = (δ + 2L)2\nw2 ,\nwhere the first inequality follows from Proposition 2.4. Summing over all t gives the desired result.\nProof of (ii). First, we require an additional property of the projected gradient.\nLemma 3.2. Let K ∈ Rn be a closed convex set, and let η > 0. Suppose f : K → R is differentiable. Then, for any x ∈ R,\n〈∇f(x),∇K,ηf(x)〉 ≥ ‖∇K,ηf(x)‖2.\nProof. Let u = x− η∇f(x) and u′ = ΠK [u]. Then,\n〈∇f(x),∇K,ηf(x)〉 η2 − ‖∇K,ηf(x)‖ 2 η2 = 〈u− x, u′ − x〉 − 〈u′ − x, u′ − x〉 = 〈u− u′, u′ − x〉 ≥ 0,\nwhere the last inequality follows by the generalized Pythagorean theorem.\nFor 2 ≤ t ≤ T , let τt be the number of gradient steps taken in the outer loop at iteration t−1, in order to compute the iterate xt. For convenience, define τ1 = 0. We establish a progress lemma during each gradient descent epoch:\nLemma 3.3. For any 2 ≤ t ≤ T , Ft−1(xt)− Ft−1(xt−1) ≤ −τt ( η − βη 2\n2\n) δ2\nw2 .\nProof. Consider a single iterate z of the inner loop, and the next iterate z′ := z − η∇K,ηFt−1(z). We have, by β-smoothness of Ft−1,\nFt−1(z ′)− Ft−1(z) ≤ 〈∇Ft−1(z), z′ − z〉+\nβ 2 ‖z′ − z‖2\n= −η 〈∇Ft−1(z),∇K,ηFt−1(z)〉+ βη2\n2 ‖∇K,ηFt−1(z)‖2.\nThus, by Lemma 3.2,\nFt−1(z ′)− Ft−1(z) ≤ − ( η − βη 2\n2\n) ‖∇K,ηFt−1(z)‖2.\nThe algorithm only takes projected gradient steps when ‖∇K,ηFt−1(z)‖ ≥ δ/w. Summing across all τt consecutive iterations in the epoch yields the claim.\nTo complete the proof of the theorem, we write the telescopic sum (understanding F0(x0) = 0):\nFT (xT ) = T∑ t=1 Ft(xt)− Ft−1(xt−1)\n= T∑ t=1 Ft−1(xt)− Ft−1(xt−1) + ft(xt)− ft−w(xt)\n≤ T∑ t=2 [Ft−1(xt)− Ft−1(xt−1)] + 2MT w .\nUsing Lemma 3.3, we have\nFT (xT ) ≤ 2MT\nw −\n( η − βη 2\n2\n) δ2\nw2 · T∑ t=1 τt,\nwhence\nτ = T∑ t=1 τt ≤ w2 δ2 ( η − βη22 ) · (2MT w − FT (xT ) )\n≤ M δ2 ( η − βη22 ) · (2Tw + w2) , as claimed.\nSetting η = 1/β and δ = L gives the asymptotically optimal local regret bound, with O(Tw) timeaveraged gradient steps (and thus O(Tw2) individual gradient oracle calls). We further note that in the case where K = Rn, one can replace the gradient descent subroutine (the inner loop) with non-convex SVRG [AZH16], achieving a complexity of O(Tw5/3) gradient oracle calls."
    }, {
      "heading" : "4 Implications for offline and stochastic non-convex optimization",
      "text" : "In this section, we discuss the ways in which our online framework generalizes the offline and stochastic versions of non-convex optimization – that any algorithm achieving a small value of Rw(T ) efficiently finds a point with small gradient in these settings. For convenience, for 1 ≤ t ≤ t′ ≤ T , we denote by D[t,t′] the uniform distribution on time steps t through t′ inclusive."
    }, {
      "heading" : "4.1 Offline non-convex optimization",
      "text" : "For offline optimization on a fixed non-convex function f : K → R, we demonstrate that a bound on local regret translates to convergence. In particular, using Algorithm 1 one finds a point x ∈ K with ‖∇K,ηf(x)‖2 ≤ ε while making O ( 1 ε ) calls to the gradient oracle, matching the best known result for the convergence of gradient-based methods.\nCorollary 4.1. Let f : K → R satisfy Assumption 2.1. When online algorithm A is run on a sequence of T identical loss functions f(x), it holds that for any 1 ≤ w < T ,\nEt∼D[w,T ]‖∇K,ηf(xt)‖ 2 ≤ Rw(A)\nT − w .\nIn particular, Algorithm 1, with parameter choices T = 2w, η = 1β , δ = L, and w = (δ + 2L) √ 2 ε , yields\nEt∼Dw,T ‖∇K,ηf(xt)‖2 ≤ ε. Furthermore, the algorithm makes O ( 1 ε ) calls to the gradient oracle in total.\nProof. Since ft(x) = f(x) for all t, it follows that Ft,w(x) = f(x) for all t ≥ w. As a consequence, we have\nEt∼Dw,t‖∇K,ηf(xt)‖2 ≤ 1\nT − w T∑ t=1 ‖∇K,ηf(xt)‖2\n≤ Rw(A) T − w .\nWith the stated choice of parameters, Theorem 3.1 guarantees that\nEt∼Dw,t‖∇K,ηf(xt)‖2 ≤ ε 2 · T T − w = ε.\nAlso, since the loss functions are identical, the execution of line 7 of Algorithm 1 requires exactly one call to the gradient oracle at each iteration. This entails that the total number of gradient oracle calls made in the execution is O(Tw + w2) = O( 1ε )."
    }, {
      "heading" : "4.2 Stochastic non-convex optimization",
      "text" : "We examine the way in which our online framework captures stochastic non-convex optimization of a fixed function f : Rn → R, in which an algorithm has access to a noisy stochastic gradient oracle ∇̃f(x). We note that the reduction here will only apply in the unconstrained case; it becomes challenging to reason about the projected gradient under noisy information. From a local regret bound, we recover a stochastic algorithm\nwith oracle complexity O ( σ4\nε2\n) . We note that this black-box reduction recovers an optimal convergence rate\nin terms of ε, but not σ2. In the setting, the algorithm must operate on the noisy estimates of the gradient as the feedback. In particular, for any ft that the adversary chooses, the learning algorithm is supplied with a stochastic gradient oracle for ft. The discussion in the preceding sections may be viewed as a special case of this setting with σ = 0. We list the assumptions we make on the stochastic gradient oracle, which are standard:\nAssumption 4.2. We assume that each call to the stochastic gradient oracle yields an i.i.d. random vector ∇̃f(x) with the following properties:\n(i) Unbiased: E [ ∇̃f(x) ] = ∇f(x).\n(ii) Bounded variance: E [ ‖∇̃f(x)−∇f(x)‖2 ] ≤ σ2.\nWhen an online algorithm incurs small local regret in expectation, it has a convergence guarantee in offline stochastic non-convex optimization:\nProposition 4.3. Let 1 ≤ w < T . Suppose that online algorithm A is run on a sequence of T identical loss functions f(x) satisfying Assumption 2.1, with identical stochastic gradient oracles satisfying Assumption 4.2. Sample t ∼ D[w,T ]. Then, over the randomness of t and the oracles,\nE [ ‖∇f(xt)‖2 ] ≤ E [Rw(A)]\nT − w .\nProof. Observe that\nEt∼D[w,T ] [ ‖∇f(xt)‖2 ] ≤ ∑T t=1 ‖∇f(xt)‖2 T − w ≤ Rw(A) T − w .\nThe claim follows by taking the expectation of both sides, over the randomness of the oracles.\nFor a concrete online-to-stochastic reduction, we consider Algorithm 2, which exhibits such a bound on expected local regret.\nAlgorithm 2 Time-smoothed online gradient descent with stochastic gradient oracles\n1: Input: learning rate η > 0, window size w ≥ 1. 2: Set x1 = 0 ∈ Rn arbitrarily. 3: for t = 1, . . . , T do 4: Predict xt. Observe the cost function ft : Rn → R. 5: Update xt+1 := xt − ηw ∑w−1 i=0 ∇̃f t−i(xt). 6: end for\nTheorem 4.4. Let f1, . . . , ft satisfy Assumption 2.1. Then, Algorithm 2, with access to stochastic gradient oracles {∇̃f t(xt)} satisfying Assumption 4.2, and a choice of η = 1β , guarantees\nE [Rw(T )] ≤ ( 8βM + σ2 ) T w .\nFurthermore, Algorithm 2 makes a total of O(Tw) calls to the stochastic gradient oracles.\nUsing this expected local regret bound in Proposition 4.3, we obtain the reduction claimed at the beginning of the section:\nCorollary 4.5. Algorithm 2, with parameter choices w = 12Mβ+2σ 2\nε , T = 2w, and η = 1 β , yields\nE [ ‖∇f(xt)‖2 ] ≤ ε.\nFurthermore, the algorithm makes O ( σ4\nε2\n) stochastic gradient oracle calls in total."
    }, {
      "heading" : "5 An efficient algorithm with second-order guarantees",
      "text" : "We note that by modifying Algorithm 1 to exploit second-order information, our online algorithm can be improved to play approximate first-order critical points which are also locally almost convex. This entails replacing the gradient descent epochs with a cubic-regularized Newton method [NP06, AAZB+16].\nIn this setting, we assume that we have access to each ft through a value, gradient, and Hessian oracle. That is, once we have observed ft, we can obtain ft(x), ∇ft(x), and ∇2ft(x) for any x. Let MinEig(A) be the minimum (eigenvalue, eigenvector) pair for matrix A. As is standard for offline second-order algorithms, we must add the following additional smoothness restriction:\nAssumption 5.1. ft is twice differentiable and has an L2-Lipschitz Hessian:\n‖∇2f(x)−∇2f(y)‖ ≤ L2‖x− y‖.\nAdditionally, we consider only the unconstrained case where K = Rn; the second-order optimality condition is irrelevant when the gradient does not vanish at the boundary of K.\nThe second-order Algorithm 3 uses the same approach as in Algorithm 1, but terminates each epoch under a stronger approximate-optimality condition. We define\nΦt(x) := max { ‖∇Ft(x)‖2,− 4β\n3L22 · λmin(∇2Ft(x))3\n} ,\nso that the quantity ∑T t=1 Φt(xt) is termwise lower bounded by the costs in Rw(T ), but penalizes local concavity.\nAlgorithm 3 Time-smoothed online Newton method\n1: Input: window size w ≥ 1, tolerance δ > 0. 2: Set x1 ∈ K arbitrarily. 3: for t = 1, . . . , T do 4: Predict xt. Observe the cost function ft : Rn → R. 5: Initialize xt+1 := xt. 6: while Φt(xt+1) > δ\n3/w3 do 7: Update xt+1 := xt+1 − 1β∇Ft,w(xt+1). 8: Let (λ, v) := MinEig ( ∇2Ft,w(xt+1) ) .\n9: if λ < 0 then 10: Flip the sign of v so that 〈v,∇Ft,w(xt+1)〉 ≤ 0. 11: Compute yt+1 := xt +\n2λ L2 v.\n12: if Ft,w(yt+1) < Ft,w(xt+1) then 13: Set xt+1 := yt+1. 14: end if 15: end if 16: end while 17: end for\nWe characterize the convergence and oracle complexity properties of this algorithm:\nTheorem 5.2. Let f1, . . . , fT be the sequence of loss functions presented to Algorithm 3, satisfying Assumptions 2.1 and 5.1. Choose δ = β. Then, for some constants C1, C2 in terms of M,L, β, L2:\n(i) The iterates {xt} produced by Algorithm 3 satisfy\nT∑ t=1 Φt(xt) ≤ C1 · T w2 .\n(ii) The total number of iterations τ of the inner loop taken by Algorithm 3 satisfies\nτ ≤ C2 · Tw2.\nProof of (i). For each 1 ≤ t ≤ T , we have\nΦt−1(xt) ≤ δ3\nw3 .\nLet ht(x) := 1 w (ft(x)− ft−w(x)). Then, since ht(x) is 2L w -Lipschitz and 2β w -smooth,\nΦt(xt) = max { ‖∇Ft−1(xt) +∇ht(xt)‖2,\n− 4β 3L22 · λmin(∇2Ft(xt) +∇2ht(xt))3 } ≤ max {( δ3/2\nw3/2 +\n2L\nw\n)2 , 4β 3L22 · ( δ w + 2β w )3} ,\nwhich is bounded by C1/w 2, for some C1(M,L, β, L 2 2). The claim follows by summing this inequality across all 1 ≤ t ≤ T .\nProof of (ii). We first show the following progress lemma:\nLemma 5.3. Let z, z′ be two consecutive iterates of the inner loop in Algorithm 3 during round t. Then,\nFt(z ′)− Ft(z) ≤ −\nΦt(z)\n2β .\nProof. Let u denote the step z′ − z. Let g := ∇Ft(z), H := ∇2Ft(z), and (λ, v) := MinEig(H). Suppose that at time t, the algorithm takes a gradient step, so that u = g/β. Then, by second-order smoothness of Ft, we have\nFt(z ′)− Ft(z) ≤ 〈g, u〉+\nβ 2 ‖u‖2 = − 1 2β ‖g‖2.\nSupposing instead that the algorithm takes a second-order step, so that u = ± 2λL2 v (whichever sign makes 〈g, u〉 ≤ 0), the third-order smoothness of Ft implies\nFt(z ′)− Ft(z) ≤ 〈g, u〉+\n1 2 uTHtu+ L2 6 ‖u‖3\n= 〈g, u〉+ λ 2 ‖u‖2 + L2 6 ‖u‖3 ≤ 2λ 3\n3L22 =\n1 2β · 4βλ\n3\n3L22 .\nThe lemma follows due to the fact that the algorithm takes the step that gives a smaller value of Ft(z ′).\nFollowing the technique from Theorem 3.1, for 2 ≤ t ≤ T , let τt be the number of iterations of the inner loop during the execution of Algorithm 3 during round t− 1 (in order to generate the iterate xt). Then, we have the following lemma:\nLemma 5.4. For any 2 ≤ t ≤ T ,\nFt−1(xt)− Ft−1(xt−1) ≤ −τt · δ3\n2βw3 .\nProof. This follows by summing the inequality Lemma 5.3 for across all pairs of consecutive iterates of the inner loop within the same epoch, and noting that each term Φ(z) is at least δ 3\nw3 before the inner loop has terminated.\nFinally, we write (understanding F0(x0) := 0):\nFT (xT ) = T∑ t=1 Ft(xt)− Ft−1(xt−1)\n= T∑ t=1 Ft−1(xt)− Ft−1(xt−1) + ft(xt)− ft−w(xt)\n≤ T∑ t=2 [Ft−1(xt)− Ft−1(xt−1)] + 2MT w .\nUsing Lemma B.1, we have\nFT (xT ) ≤ 2MT w − δ\n3 2βw3 · T∑ t=1 τt,\nwhence\nτ = T∑ t=1 τt ≤ 2βw3 δ3 · ( 2MT w − FT (xT ) ) ≤ 2βM\nδ3 · ( 2Tw2 + w3 ) ≤ 6M\nβ2 · Tw2,\nas claimed (recalling that we chose δ = β for this analysis)."
    }, {
      "heading" : "6 A solution concept for non-convex games",
      "text" : "Finally, we discuss an application of our regret minimization framework to learning in k-player T -round iterated games with smooth, non-convex payoff functions. Suppose that each player i ∈ [k] has a fixed decision set Ki ⊂ Rn, and a fixed payoff function fi : K → R satisfies Assumption 2.1 as before. Here, K denotes the Cartesian product of the decision sets Ki: each payoff function is defined in terms of the choices made by every player.\nIn such a game, it is natural to consider the setting where players will only consider small local deviations from their strategies. This is a natural setting, which models risk aversion. This setting lends itself to the notion of a local equilibrium, to replace the stronger condition of Nash equilibrium: a joint strategy in which no player encounters a large gradient on her utility. However, finding an approximate local equilibrium in this sense remains computationally intractable when the utility functions are non-convex.\nUsing the idea of time-smoothing, we formulate a tractable relaxed notion of local equilibrium, defined over some time window w. Intuitively, this definition captures a state of an iterated game in which each player examines the past w actions played, and no player can make small deviations to improve the average performance of her play against her opponents’ historical play. We formulate this solution concept as follows:\nDefinition 6.1 (Smoothed local equilibrium). Fix some η > 0, w ≥ 1. Let { fi(x 1, . . . , xk) : K → R }k i=1 be the payoff functions for a k-player iterated game. A joint strategy (x1t , . . . , x k t ) is an ε-approximate (η, w)-\nsmoothed local equilibrium with respect to past iterates {\n(x1t−j , . . . , x k t−j) }w−1 j=0\nif, for every player i ∈ [k],∥∥∥∥∥∇K,η [∑w−1 j=0 f̃i,t−j w ] (xit) ∥∥∥∥∥ ≤ ε, where\nf̃i,t′(x) def = fi(x 1 t′ , . . . , x i−1 t′ , x, x i+1 t′ , . . . , x k t′).\nTo achieve such an equilibrium efficiently, we use Algorithm 4, which runs k copies of any online algorithm that achieves a w-local regret bound for some η > 0.\nAlgorithm 4 Time-smoothed game simulation\n1: Input: convex decision sets K1, . . . ,Kk ⊆ Rn, payoff functions fi : (K1, . . . ,Kk) → R, online algorithm A, window size 1 ≤ w < T . 2: Initialize k copies (A1, . . . ,Ak) of A with window size w, where each Ai plays on decision set Ki. 3: for t = 1, . . . , T do 4: Each Ai outputs xit. 5: Show each Ai the online loss function\nfi,t(x) := −fi(x1t , . . . , xi−1t , x, xi+1t , . . . , xkt ).\n6: end for\nWe show this meta-algorithm yields a subsequence of iterates that satisfy our solution concept, with error parameter dependent on the local regret guarantees of each player:\nTheorem 6.2. For some t such that w ≤ t ≤ T , the joint strategy (x1t , . . . , xkt ) produced by Algorithm 4 is an ε-approximate (η, w)-smoothed local equilibrium with respect to { (x1t−j , . . . , x k t−j) }t−1 j=0 , where\nε = √√√√ k∑ i=1 Rw,Ai(T ) T − w .\nProof. Summing up the definitions of w-regret bounds achieved by each A, and truncating the first w − 1 terms, we get\nk∑ i=1 T∑ t=w ‖∇K,ηF it (xit)‖2 ≤ k∑ i=1 Rw,Ai(T ).\nThus, for some t between w and T inclusive, it holds that\nk∑ i=1 ∥∥∥∥∥∇K,η [∑w−1 j=0 f̃i,t−j w ] (xit) ∥∥∥∥∥ 2 = k∑ i=1 ‖∇K,ηF it (xit)‖2\n≤ k∑ i=1 Rw,Ai(T ) T − w .\nThus, for the same t we have\nmax i∈[k] ∥∥∥∥∥∇K,η [∑w−1 j=0 f̃i,t−j w ] (xit) ∥∥∥∥∥ ≤ √√√√ k∑\ni=1\nRw,Ai(T )\nT − w ,\nas claimed."
    }, {
      "heading" : "6.1 Experience replay for GAN training",
      "text" : "The training of generative adversarial networks (GANs), a popular generative model, can be viewed as a symmetric game with a non-convex payoff function. In this section, we apply and contextualize our framework of smoothed local equilibrium for GANs.\nIn the seminal setting of [GPAM+14], there are two players: a generator who wants to imitate samples from a “true” distribution D on Rn, and a discriminator who wants to distinguish true samples from D and fake samples produced by the generator. The generator chooses some function G : Rm → Rn, which maps input randomness z ∼ D′ to fake samples. The discriminator chooses a function D : Rn → [0, 1], a guess for the likelihood that a data point is real. D and G are chosen from some function classes parameterized by θD and θG, often both neural networks. The generator and discriminator play an iterated game with the objective function\nL(θD, θG) := E x∼D,z∼D′ [logD(x) + log (1−D(G(z)))] .\nIn the language of our model, the discriminator’s payoff is L(θD, θG), while the generator’s payoff is−L(θD, θG), and the players access L via stochastic gradient oracles, as in Section 4.2. Indeed, in GAN training, it is a standard technique to update θD and θG incrementally in lockstep, via stochastic gradient descent steps. This is very similar to using Algorithm 2 as the local regret minimization algorithm driving Algorithm 4 with w = 1; the only difference is that the players’ updates are alternating rather than simultaneous.\nInstability is a major challenge for GAN training, and improving training stability is a highly active research area in deep learning. To this end, our local regret framework provides a meaningful yet attainable theoretical goal, which is met by our time-smoothed gradient-based algorithms. For this game, a smoothed local equilibrium with window parameter w guarantees that the generator and discriminator simultaneously encounter small averaged gradients on each other’s past w choices of functions. This is a particularly appealing notion of equilibrium in the setting of GAN training, as it implies that a gradient-based training process becomes approximately stationary.\nIndeed, maintaining a buffer of past discriminators (running Algorithm 2) is a known technique for stabilizing GAN training. [MPPSD16] In reinforcement learning, this corresponds to a form of experience replay. [PV16]"
    }, {
      "heading" : "7 Concluding remarks",
      "text" : "We have described how to extend the theory of online learning to non-convex loss functions, while permitting efficient algorithms. Our definitions give rise to efficient online and stochastic non-convex optimization algorithms that converge to local optima of first and second order. We give a game-theoretic solution concept which we call local equilibrium, which, in contrast to existing solution concepts such as Nash equilibrium, is efficiently attainable in any non-convex game."
    }, {
      "heading" : "Acknowledgments",
      "text" : "We thank Naman Agarwal, Brian Bullins, Matt Weinberg, and Yi Zhang for helpful discussions."
    }, {
      "heading" : "A Proof of Theorem 4.4",
      "text" : "Since each ft is β-smooth, it follows that each Ft is β-smooth. Define ∇̂ft = xt−xt+1η . Note that since the iterates (xt : t ∈ [T ]) depend on the gradient estimates, the iterates are stochastic variables, as are ∇̂ft. By β-smoothness of Ft, we have\nFt,w(xt+1)− Ft,w(xt)\n≤〈∇Ft,w(xt), xt+1 − xt〉+ β\n2 ‖xt+1 − xt‖2 =− η 〈 ∇Ft,w(xt), ∇̂ft 〉 + η2 β\n2 ‖∇̂ft‖2 =− η‖∇Ft,w(xt)‖2 − η 〈 ∇Ft,w(xt), ∇̂ft −∇Ft,w(xt) 〉 + η2 β\n2\n( ‖∇Ft,w(xt)‖2 ) + η2 β\n2\n( 2 〈 ∇Ft,w(xt), ∇̂ft −∇Ft,w(xt) 〉) + η2 β\n2\n( ‖∇̂ft −∇Ft,w(xt)‖2 ) =− ( η − β 2 η2 ) ‖∇Ft,w(xt)‖2\n− (η − βη2) 〈 ∇Ft,w(xt), ∇̂ft −∇Ft,w(xt) 〉 + η2 β\n2 ‖∇̂ft −∇f(xt)‖2.\nAdditionally, we each observe that ∇̂ft is an average of w independently sampled unbiased gradient estimates of variance σ2 each. It follows as a consequence that\nE [ ∇̂ft ∣∣xt] = ∇Ft,w(xt) E [ ‖∇̂ft −∇Ft,w(xt)‖2 ∣∣xt] ≤ σ2 w\nNow, applying E [·|xt] on both sides, it follows that( η − β 2 η2 ) · E‖∇Ft,w(xt)‖2\n≤ E [Ft,w(xt)− Ft,w(xt+1)] + η2 β\n2\nσ2 w .\nAlso, we note that\nFt+1,w(xt+1)− Ft,w(xt+1)\n= 1\nw w−1∑ i=0 ft+1−i(xt+1)− 1 w w−1∑ i=0 ft−i(xt+1)\n= 1\nw w−2∑ i=−1 ft−i(xt+1)− 1 w w−1∑ i=0 ft−i(xt+1)\n= ft+1(xt+1)− ft−w+1(xt+1) w ≤ 2M w\nAdding the last two inequalities, we proceed to sum the above inequality over all time steps:\nE [ T∑ t=1 ‖∇Ft,w(xt)‖2 ] ≤ 2M + 2MTw + Tβη2 2w σ 2 η − βη22 .\nSetting η = 1/β yields the claim from the theorem. Finally, note that for each round the number of stochastic gradient oracle calls required is w. Therefore,\nacross all T rounds, the number of noisy oracle calls is Tw."
    }, {
      "heading" : "B Proof of Theorem 5.1 (ii)",
      "text" : "Following the technique from Theorem 3.1, for 2 ≤ t ≤ T , let τt be the number of iterations of the inner loop during the execution of Algorithm 3 during round t− 1 (in order to generate the iterate xt). Then, we have the following lemma:\nLemma B.1. For any 2 ≤ t ≤ T ,\nFt−1(xt)− Ft−1(xt−1) ≤ −τt · δ3\n2βw3 .\nProof. This follows by summing the inequality Lemma 5.3 for across all pairs of consecutive iterates of the inner loop within the same epoch, and noting that each term Φ(z) is at least δ 3\nw3 before the inner loop has terminated.\nFinally, we write (understanding F0(x0) := 0):\nFT (xT ) = T∑ t=1 Ft(xt)− Ft−1(xt−1)\n= T∑ t=1 Ft−1(xt)− Ft−1(xt−1) + ft(xt)− ft−w(xt)\n≤ T∑ t=2 [Ft−1(xt)− Ft−1(xt−1)] + 2MT w .\nUsing Lemma B.1, we have\nFT (xT ) ≤ 2MT w − δ\n3 2βw3 · T∑ t=1 τt,\nwhence\nτ = T∑ t=1 τt ≤ 2βw3 δ3 · ( 2MT w − FT (xT ) ) ≤ 2βM\nδ3 · ( 2Tw2 + w3 ) ≤ 6M\nβ2 · Tw2,\nas claimed (recalling that we chose δ = β for this analysis)."
    }, {
      "heading" : "C Proof of Theorem 6.2",
      "text" : "Summing up the definitions of w-regret bounds achieved by each A, and truncating the first w − 1 terms, we get\nk∑ i=1 T∑ t=w ‖∇K,ηF it (xit)‖2 ≤ k∑ i=1 Rw,Ai(T ).\nThus, for some t between w and T inclusive, it holds that\nk∑ i=1 ∥∥∥∥∥∇K,η [∑w−1 j=0 f̃i,t−j w ] (xit) ∥∥∥∥∥ 2 = k∑ i=1 ‖∇K,ηF it (xit)‖2\n≤ k∑ i=1 Rw,Ai(T ) T − w .\nThus, for the same t we have\nmax i∈[k] ∥∥∥∥∥∇K,η [∑w−1 j=0 f̃i,t−j w ] (xit) ∥∥∥∥∥ ≤ √√√√ k∑\ni=1\nRw,Ai(T )\nT − w ,\nas claimed."
    } ],
    "references" : [ {
      "title" : "Finding approximate local minima for nonconvex optimization in linear time",
      "author" : [ "Naman Agarwal", "Zeyuan Allen-Zhu", "Brian Bullins", "Elad Hazan", "Tengyu Ma" ],
      "venue" : "arXiv preprint arXiv:1611.01146,",
      "citeRegEx" : "Agarwal et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Agarwal et al\\.",
      "year" : 2016
    }, {
      "title" : "Second order stochastic optimization for machine learning in linear time",
      "author" : [ "Naman Agarwal", "Brian Bullins", "Elad Hazan" ],
      "venue" : "arXiv preprint arXiv:1602.03943,",
      "citeRegEx" : "Agarwal et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Agarwal et al\\.",
      "year" : 2016
    }, {
      "title" : "The multiplicative weights update method: a meta-algorithm and applications",
      "author" : [ "Sanjeev Arora", "Elad Hazan", "Satyen Kale" ],
      "venue" : "Theory of Computing,",
      "citeRegEx" : "Arora et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Arora et al\\.",
      "year" : 2012
    }, {
      "title" : "Variance reduction for faster non-convex optimization",
      "author" : [ "Zeyuan Allen-Zhu", "Elad Hazan" ],
      "venue" : "In Proceedings of The 33rd International Conference on Machine Learning,",
      "citeRegEx" : "Allen.Zhu and Hazan.,? \\Q2016\\E",
      "shortCiteRegEx" : "Allen.Zhu and Hazan.",
      "year" : 2016
    }, {
      "title" : "From external to internal regret",
      "author" : [ "A. Blum", "Y. Mansour" ],
      "venue" : "In COLT,",
      "citeRegEx" : "Blum and Mansour.,? \\Q2005\\E",
      "shortCiteRegEx" : "Blum and Mansour.",
      "year" : 2005
    }, {
      "title" : "Prediction, Learning, and Games",
      "author" : [ "Nicolò Cesa-Bianchi", "Gábor Lugosi" ],
      "venue" : null,
      "citeRegEx" : "Cesa.Bianchi and Lugosi.,? \\Q2006\\E",
      "shortCiteRegEx" : "Cesa.Bianchi and Lugosi.",
      "year" : 2006
    }, {
      "title" : "Accelerated methods for non-convex optimization",
      "author" : [ "Yair Carmon", "John C. Duchi", "Oliver Hinder", "Aaron Sidford" ],
      "venue" : "arXiv preprint 1611.00756,",
      "citeRegEx" : "Carmon et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Carmon et al\\.",
      "year" : 2016
    }, {
      "title" : "Adaptive subgradient methods for online learning and stochastic optimization",
      "author" : [ "John Duchi", "Elad Hazan", "Yoram Singer" ],
      "venue" : "The Journal of Machine Learning Research,",
      "citeRegEx" : "Duchi et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Duchi et al\\.",
      "year" : 2011
    }, {
      "title" : "Convergence rates of sub-sampled newton methods",
      "author" : [ "Murat A Erdogdu", "Andrea Montanari" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Erdogdu and Montanari.,? \\Q2015\\E",
      "shortCiteRegEx" : "Erdogdu and Montanari.",
      "year" : 2015
    }, {
      "title" : "A decision-theoretic generalization of on-line learning and an application to boosting",
      "author" : [ "Yoav Freund", "Robert E. Schapire" ],
      "venue" : "J. Comput. Syst. Sci.,",
      "citeRegEx" : "Freund and Schapire.,? \\Q1997\\E",
      "shortCiteRegEx" : "Freund and Schapire.",
      "year" : 1997
    }, {
      "title" : "Stochastic first-and zeroth-order methods for nonconvex stochastic programming",
      "author" : [ "Saeed Ghadimi", "Guanghui Lan" ],
      "venue" : "SIAM Journal on Optimization,",
      "citeRegEx" : "Ghadimi and Lan.,? \\Q2013\\E",
      "shortCiteRegEx" : "Ghadimi and Lan.",
      "year" : 2013
    }, {
      "title" : "Generative adversarial nets",
      "author" : [ "Ian Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza", "Bing Xu", "David Warde-Farley", "Sherjil Ozair", "Aaron Courville", "Yoshua Bengio" ],
      "venue" : "In Advances in neural information processing systems,",
      "citeRegEx" : "Goodfellow et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Goodfellow et al\\.",
      "year" : 2014
    }, {
      "title" : "Introduction to online convex optimization",
      "author" : [ "Elad Hazan" ],
      "venue" : "Foundations and Trends in Optimization,",
      "citeRegEx" : "Hazan.,? \\Q2016\\E",
      "shortCiteRegEx" : "Hazan.",
      "year" : 2016
    }, {
      "title" : "Computational equivalence of fixed points and no regret algorithms, and convergence to equilibria",
      "author" : [ "Elad Hazan", "Satyen Kale" ],
      "venue" : "Advances in Neural Information Processing Systems",
      "citeRegEx" : "Hazan and Kale.,? \\Q2007\\E",
      "shortCiteRegEx" : "Hazan and Kale.",
      "year" : 2007
    }, {
      "title" : "A simple adaptive procedure leading to correlated",
      "author" : [ "Sergiu Hart", "Andreu Mas-Colell" ],
      "venue" : "equilibrium. Econometrica,",
      "citeRegEx" : "Hart and Mas.Colell.,? \\Q2000\\E",
      "shortCiteRegEx" : "Hart and Mas.Colell.",
      "year" : 2000
    }, {
      "title" : "Unrolled generative adversarial networks",
      "author" : [ "Luke Metz", "Ben Poole", "David Pfau", "Jascha Sohl-Dickstein" ],
      "venue" : "arXiv preprint arXiv:1611.02163,",
      "citeRegEx" : "Metz et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Metz et al\\.",
      "year" : 2016
    }, {
      "title" : "Introductory lectures on convex optimization, volume 87",
      "author" : [ "Yurii Nesterov" ],
      "venue" : "Springer Science & Business Media,",
      "citeRegEx" : "Nesterov.,? \\Q2004\\E",
      "shortCiteRegEx" : "Nesterov.",
      "year" : 2004
    }, {
      "title" : "Cubic regularization of newton method and its global performance",
      "author" : [ "Yurii Nesterov", "Boris T Polyak" ],
      "venue" : "Mathematical Programming,",
      "citeRegEx" : "Nesterov and Polyak.,? \\Q2006\\E",
      "shortCiteRegEx" : "Nesterov and Polyak.",
      "year" : 2006
    }, {
      "title" : "Connecting generative adversarial networks and actor-critic methods",
      "author" : [ "David Pfau", "Oriol Vinyals" ],
      "venue" : "arXiv preprint arXiv:1610.01945,",
      "citeRegEx" : "Pfau and Vinyals.,? \\Q2016\\E",
      "shortCiteRegEx" : "Pfau and Vinyals.",
      "year" : 2016
    }, {
      "title" : "Online learning and online convex optimization",
      "author" : [ "Shai Shalev-Shwartz" ],
      "venue" : "Foundations and Trends in Machine Learning,",
      "citeRegEx" : "Shalev.Shwartz.,? \\Q2011\\E",
      "shortCiteRegEx" : "Shalev.Shwartz.",
      "year" : 2011
    }, {
      "title" : "Aggregating strategies",
      "author" : [ "Volodimir G. Vovk" ],
      "venue" : "In Proceedings of the Third Annual Workshop on Computational Learning Theory, COLT",
      "citeRegEx" : "Vovk.,? \\Q1990\\E",
      "shortCiteRegEx" : "Vovk.",
      "year" : 1990
    } ],
    "referenceMentions" : [ ],
    "year" : 2017,
    "abstractText" : "We consider regret minimization in repeated games with non-convex loss functions. Minimizing the standard notion of regret is computationally intractable. Thus, we define a natural notion of regret which permits efficient optimization and generalizes offline guarantees for convergence to an approximate local optimum. We give gradient-based methods that achieve optimal regret, which in turn guarantee convergence to equilibrium in this framework.",
    "creator" : "LaTeX with hyperref package"
  }
}