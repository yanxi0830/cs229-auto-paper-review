{
  "name" : "1611.05132.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Convergence rate of stochastic k-means",
    "authors" : [ "Cheng Tang", "Claire Monteleoni" ],
    "emails" : [ "tangch@gwu.edu", "cmontel@gwu.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Lloyd’s algorithm (batch k-means) [13] is one of the most popular heuristics for clustering [9]. However, at every iteration it requires computation of the closest centroid to every point in the dataset. Even with fast implementations such as [7], which reduces the computation for finding the closest centroid of each point, the per-iteration running time still depends linearly on n, making it a computational bottleneck for large datasets. To scale up the centroid-update phase, a plausible recipe is the “stochastic approximation” scheme [4]: the overall idea is, at each iteration, the centroids are updated using one (online [5]) or a few (mini-batch [16]) randomly sampled points instead of the entire dataset. In the rest of the paper, we refer to both as stochastic k-means, which we formally present as Algorithm 1. Empirically, stochastic k-means has gained increasing attention for large-scale clustering and is included in widely used machine learning packages, such as Sofia-ML [16] and scikit-learn [14]. Figure 1a demonstrates the efficiency of stochastic k-means against batch k-means on the RCV1 dataset [12]. The advantage is clear, and the results raise some natural questions: Can we characterize the convergence rate of stochastic k-means? Why do the algorithms appear to converge to different “local optima”? Why and how does mini-batch size affect the quality of the final solution? Our goal is to address these questions rigorously.\nOur main contribution1 is the O( 1t ) global convergence of stochastic k-means. Our key idea is to keep track of the distance from the algorithm’s current clustering solution to the set of all “local optima” of batch k-means: when the distance is large with respect to all local optima, the drop in k-means objective after one iteration of stochastic k-means update is lower bounded; when the algorithm is close enough to a local optimum, the algorithm will be trapped by it and maintains the O( 1t ) convergence rate thanks to a geometric property of local optima.\n1 An improved and better (according to the authors’ opinion) version of this paper since the NIPS submission is available at https://arxiv.org/abs/1610.04900\n29th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nar X\niv :1\n61 1.\n05 13\n2v 1\n[ cs\n.L G\n] 1\n6 N\nov 2\n(a) Figure from [16], demonstrating the relative performance of online, mini-batch, and batch k-means. (b) An illustration of one run of Lloyd’s algorithm: the arrows represent k-means updates in action.\nFigure 1\nNotation The input to our clustering problem is a discrete dataset X; ∀x ∈ X , x ∈ Rd. We use letterA to denote clusterings ofX; we use letterC to denote a set of k-centroids. Superscripts are used to indicate a particular clustering, e.g.,At denotes the clustering at the t-th iteration in Algorithm 1 (or batch k-means); subscripts indicate individual clusters in a clustering: cr denotes the r-th centroid in C corresponding to the r-th clusterAr. We use letter n to denote cardinality, n = |X|, nr = |Ar|, etc. Fix a point set Y , we let m(Y ) denote the mean of Y . Each clustering A := {As, s ∈ [k]} induces a unique set of centroids m(A) := {m(As), s ∈ [k]}. Fix C = {cr, r ∈ [k]}, we let V (cr) denote the Voronoi cell belonging to centroid cr, i.e., {x ∈ Rd, ‖x− cr‖ ≤ ‖x− cs‖,∀s 6= r}, and we use V (C) to denote the Voronoi diagram induced by a set of centroids C. Fix C with k-centroids, we denote its k-means cost with respect to a k-clustering A by φ(C,A) := ∑k r=1 ∑ x∈Ar ‖x− cr‖\n2 (or simply φ(C) when A is induced by the Voronoi diagram of C). We let φ∗ := φ(C∗), φt := φ(Ct), and let φ∗r (φ t r) denote the k-means cost of cluster A ∗ r (A t r). φ\nopt and φoptr are similarly defined for the cost of an optimal k-means clustering. We use π : [k]→ [k] to denote permutations between two sets of the same cardinality.\n2 A framework for tracking batch k-means in the solution space\nFirst, we develop insights for batch k-means to facilitate our analysis of stochastic k-means.2 Batch k-means initializes the position of k centroids C0 via a seeding algorithm. Then ∀t ≥ 1,\n1. Obtain At by assigning each x to its closest centroid (Voronoi cell). 2. For all Atr that is not empty, obtain c t r := m(A t r).\nThe algorithm alternates between two solution spaces: the continuous space of all k-centroids, which we denote by {C}, and the finite set of all k-clusterings, which we denote by {A}. One problem with k-means is it may produce degenerate solutions: if the solution Ct has k centroids, it is possible that data points are mapped to only k′ < k centroids. To handle degenerate cases, starting with |C0| = k, we consider an enlarged clustering space {A}[k], which is the union of all k′-clusterings with 1 ≤ k′ ≤ k. Our key idea is that {C} can be partitioned into equivalence classes by the clustering they induce on X , and the algorithm stops if and only if two consecutive iterations stay within the same equivalence class in {C}. Specifically, for any C, let v(C) := V (C) ∩X ∈ {A}[k] denote the clustering they induce on X via their Voronoi diagram. Then C1, C2 are in the same equivalence class in {C} if v(C1) = v(C2) = A. In lieu of this construction, the algorithm goes from {C} to {A}[k] via mapping v : {C} → {A}[k]; it goes from {A}[k] to {C} via the mean operation m : {A}[k] → {C}. Figure 1b illustrates how batch k-means alternates between two solution spaces until convergence. We use the pre-image v−1(A) ∈ {C} to denote the equivalence class induced by clustering A. When batch k-means visits a clustering At, if m(At) /∈ v−1(At), the algorithms jumps to another clustering At+1. If m(At) ∈ v−1(At), the algorithm stops because At+1 = At and m(At+1) = m(At). We thus formalize the idea of “local optima” of batch k-means as below. Definition 1 (Stationary clusterings). We call A∗ a stationary clustering of X , if m(A∗) ∈ Cl(v−1(A∗)). We let {A∗}[k] ⊂ {A}[k] denote the set of all stationary clusterings of X with number of clusters k′ ∈ [k].\n2Due to space limit, we move the detailed construction of the framework to Appendix A, where more formal definitions and omitted discussions of issues such as degenerate cases can be found.\nAlgorithm 1 Stochastic k-means\nInput: dataset X , number of clusters k, mini-batch size m, learning rate ηtr, r ∈ [k], convergence_criterion Seeding: Apply seeding algorithm T on X and obtain seeds C0 = {c01, . . . , c0k}; repeat\nAt iteration t (t ≥ 1), obtain sample St ⊂ X of size m uniformly at random with replacement; set count n̂tr ← 0 and set Str ← ∅, ∀r ∈ [k] for s ∈ St do\nFind I(s) s.t. cI(s) = C(s) StI(s) ← S t I(s) ∪ s; n̂ t I(s) ← n̂ t I(s) + 1\nend for for ct−1r ∈ Ct−1 do\nif n̂tr 6= 0 then ctr ← (1− ηtr)ct−1r + ηtr ĉtr with ĉtr := ∑ s∈Str s n̂tr end if\nend for until convergence_criterion is satisfied\nThe operator Cl(·) denotes the “closure” of an equivalence class v−1(A∗), which includes its “boundary points”, a set of centroids that induces ambiguous clusterings (this happens when there is a data point on the bisector of two centroids in a solution; see Appendix A for details). For each A∗, we define a matching centroidal solution C∗.\nDefinition 2 (Stationary points). For a stationary clustering A∗ with k′ clusters, we define C∗ = {c∗r , r ∈ [k′]} to be a stationary point corresponding to A∗, so that ∀A∗r ∈ A∗, c∗r := m(A∗r). We let {C∗}[k] denote the corresponding set of all stationary points of X with k′ ∈ [k].\nAs preluded in the introduction, defining a distance measure on {C} is important to our subsequent analysis; For C ′ and C, we let ∆(C ′, C) := minπ:[k]→[k] ∑ r nr‖c′π(r) − cr‖\n2, where nr = |Ar|. This distance is asymmetric and non-negative, and evaluates to zero if and only if two sets of centroids coincide. In addition, if C∗ is a stationary point, then for any solution C, ∆(C,C∗) upper bounds the difference of k-means objective, φ(C)− φ(C∗) (Lemma 11).\n2.1 Stochastic k-means\nAlgorithm 1 and stochastic k-means [5, 16] are equivalent up to the choice of learning rate and sampling scheme (the proof of equivalence is in Appendix A). In [5, 16], the per-cluster learning rate is chosen as ηtr := n̂tr∑ i≤t n̂ i r ; in our analysis, we choose a flat learning rate ηt = c ′ to+t for all clusters, where c′, to > 0 are some fixed constants (empirically, no obvious differences are observed; see Section 3.1 for more discussion and Section 4 for empirical comparison). Unlike a usual gradientbased algorithm on a continuous domain, the discrete nature of the k-means problem causes major differences when stochastic approximation is applied.\nFirst, for batch k-means, at every iteration t, Ct is chosen as the means, m(At), of the current k-clustering At. Since {A}[k] is finite and m(A) is unique for a fixed A, the set of “legal moves” of batch k-means is finite, while {C} is continuous. In stochastic k-means, however, Ct can be any member of {C} due to both stochasticity and the learning rate. As such, its effective solution space on {C} is continuous and thus infinite. Our framework enables us to impose a finite structure on {C} by mapping points in {C} to points in {A}[k]. Second, in stochastic k-means, centroids are usually updated asynchronously, especially when the mini-batch size is small compared to k; in the extreme case of online k-means, centroids are updated one at a time. Since the positions of centroids implicitly determine the clustering assignment, asynchronous k-means updates will lead to a different solution path than fully synchronized ones, even if we ignore the noise introduced by sampling and choose the learning rate to be 1. Due to asynchronicity, it is also hard to detect when stochastic k-means produces a degenerate solution, since centroids may fail to be updated for a long time due to sampling. In practice, implementation such as\nscikit-learn re-locate a centroid randomly if it fails to be updated for too long. In Algorithm 1, we do not allow re-location of centroids and our analysis subsumes the degenerate cases.\nWhen analyzing Algorithm 1, we let Ω denote the sample space of all outcomes (C0, C1, . . . , Ct, . . .) and Ft the natural filtration of the stochastic process up to t (Ω is also used in our statements of Theorems 1 and 2 as the Big-Omega). We let ptr(m) := Pr{ct−1r is updated at t with mini-batch size m}."
    }, {
      "heading" : "3 Main result",
      "text" : "With two weak assumptions on the properties of stationary points of a datasetX , our first result shows stochastic k-means has an overall O( 1t ) convergence rate to a stationary point of batch k-means, regardless of initialization.\n(A0) We assume all stationary points are non-boundary points, i.e., ∀A∗ ∈ {A∗}[k], m(A∗) ∈ v−1(A∗) (By Lemma 5, under this assumption, ∃rmin > 0 such that all stationary points are (rmin, 0)-stable). (A1) ∀t > 0, we assume there is an upper bound B on\nmax{E[ ∑ r ∑ x∈At+1r ‖x− ĉt+1r ‖2 + φt|Ft], ∑ r n∗r〈ct−1r − c∗r , ĉtr − E[ĉtr|Ft−1]〉, ∑ r n∗r‖ĉtr − c∗r‖2}\nwhere n∗r , c ∗ r are the cardinality and centroid of the r-th cluster in a stationary clustering A ∗.\nTheorem 1. Assume (A0)(A1) holds. Fix any δ > 0, if we run Algorithm 1 with learning rate ηt = c ′\nt+to such that for all t ≥ 1,\nc′ > 1 2p+min(m)(1− √ 1− rminφopt2φt ) and to = Ω\n{ [\n(c′)2\nρ(m)2(2c′ − 1) ln\n1 δ ] 2 2c′−1\n}\nwhere p+min(m) := min r∈[k];\nptr(m)>0\nptr(m), ρ(m) := 1− (1− p∗min)m, and p∗min := min A∗∗∈{A∗}[k] min r n∗∗r n\nThen starting from any initial set of k-centroids C0, Let G denote the event {∃T, ∃A∗∗ ∈ {A∗}[k] s.t. At = A∗∗,∀t ≥ T}. Then Pr(G) ≥ 1 − δ, and there exists events parametrized by A∗∗, denoted by Go(A∗∗), such that Pr{∪A∗∗∈{A∗}[k]Go(A∗∗)} ≥ 1− δ. And for any Go(A∗∗), we have ∀t ≥ 1, E{φt − φ∗∗|Go(A∗∗)} = O( 1t ), where φ ∗∗ := φ(m(A∗∗)).\nThis result guarantees the expectedO( 1t ) convergence of Algorithm 1 towards a stationary point under a general condition. However, it does not guarantee Algorithm 1 converges to the same stationary clustering as its batch counterpart, even with the same initialization. Moreover, it is even possible that the final solution becomes degenerate.\nAlgorithm parameters in the convergence bound The exact convergence bound of Theorem 1, which we hide in the Big-O notation, reveals dependence of the convergence on the algorithm’s parameters. When c′ is sufficiently large, the exact bound we obtain is likely dominated by a2maxB β−1 ( t0+2 t0+1 )β+1 1t0+t+1 where β = 2c ′p+min(m)(1− √ φ̃t φt ) and amax := c′\nρ(m) . The bound becomes tighter when c′ decreases. Since the 1t -order convergence requires a sufficiently large c\n′, our analysis suggests we should choose c′ to be neither too large nor too small. The bound also becomes tighter when p+min(m) and ρ(m) becomes closer to 1. Both depend on m; less obviously, they also depend on the number of non-degenerate clusters. Since ptr = 1−(1− ntr n )\nm, which equals zero if and only if ntr = 0, p + min(m) = 1− (1−minr,t;ptr>0 p t r(1)) m < 1− (1− 1k′ ) m, where k′ is the smallest number of non-degenerate centroids in a run. The similar holds for ρ(m). This suggests the convergence rate may be slower with larger k′, which depends on the initial number of clusters k, and smaller m. For experimental results of the effect of algorithm parameters on convergence, see Section 4. A detailed explanation on the exact bound is included in Appendix B. The general convergence result in Theorem 1 is applicable to any seeding algorithm, including random sampling, which is probably the\nAlgorithm 2 Buckshot seeding [17] {νi, i ∈ [mo]} ← sample mo points from X uniformly at random with replacement {S1, . . . , Sk} ←run Single-Linkage on {νi, i ∈ [mo]} until there are only k connected components left C0 = {ν∗r , r ∈ [k]} ← take the mean of the points in each connected component Sr, r ∈ [k]\nmost scalable seeding heuristic one can use. However, it does not provide performance guarantee with respect to the k-means objective. We next show that stochastic k-means initialized by Algorithm 2 converges to a global optimum of k-means objective at rate O( 1t ), under additional geometric assumptions on the dataset. The major advantage of Algorithm 2 over other choices of initialization, such as the k-means++ [1] or random sampling, is that its running time is independent of the data size while providing seeding guarantee. When using it with stochastic k-means, both the seeding and the update phases are independent of the data size, making the overall algorithm highly scalable.\nLet (Aopt, Copt) denote an optimal k-means clustering of X . We assume, similar to [11], that the means of each pair of clusters are well-separated and that the points from the two clusters are separated by a “margin”, that is, ∀x ∈ Aoptr ∪Aopts , the distance from x to the bisector of coptr and copts is lower bounded. Formally, let x̄ denote the projection of x onto the line joining c opt r , c opt s , the margin between the two clusters is defined as ∆rs := minx∈Aoptr ∪Aopts |‖x̄− c opt r ‖ − ‖x̄− copts ‖|. In addition, we require that the size of the smallest cluster is not too small compared to the data size. The geometric assumptions are formally defined as below. (B1) Mean separation: ∀r ∈ [k], s 6= r, ‖m(Aoptr )−m(Aopts )‖ ≥ f(α) √ φopt( 1√\nnoptr + 1√ nopts ),\nwith f(α) > max{642, 5α+5256α ,maxr∈[k],s 6=r noptr nopts } for some α ∈ (0, 1) that is sufficiently small. (B2) Existence of margin: ∀r ∈ [k], s 6= r, ∆rs ≥ γ‖m(Aoptr )−m(Aopts )‖, for some γ > 8 √ 2√ f .\n(B3) Cluster balance: pmin ≥ γ162f(α) + √ α, where pmin := minr∈[k] noptr n .\nTheorem 2. Assume (B1)(B2) (B3) hold for an optimal k-means clustering Aopt. Fix any ξ > 0, if f(α) in addition satisfies f(α) ≥ 5 √ 1\n2wmin ln( 2ξpmin ln 2k ξ ), and we choose mo in Algorithm 2 such\nthat log 2kξ pmin < mo < ξ 2 exp{2( f(α) 4 − 1)\n2w2min}. And if we run Algorithm 1 initialized by Algorithm 2 and choosemini-batch size m and learning rate of the form ηt = c ′\nt+to so that\nm > 1 and c′ > 1\n2[1− √ α− (1− √ α)m]\nand\nto = Ω\n{ [\n(c′)2\nρ(m)2(2c′(ρ(m)− √ α)− 1)\nln 1\nδ ]\n2 2c′(ρ(m)− √ α)−1 } where ρ(m) := 1− [1− (pmin − γ162f(α) )] m. Then ∀t ≥ 1, there exists event Gt ⊂ Ω s.t.\nPr{Gt} ≥ (1− δ)(1− ξ) and E[φt|Gt]− φopt ≤ E[∆(Ct, Copt)|Gt] = O( 1\nt )\nInterestingly, we cannot provide performance guarantee for online k-means (m = 1) in Theorem 2. Our intuition is, instead of allowing stochastic k-means to converge to any stationary point as in Theorem 1, it studies convergence to a fixed optimal solution; a largerm provides more stability to the algorithm and prevents it from straying away from the target solution. The proposed clustering scheme is reminiscent to the Buckshot algorithm [6], widely used in the domain of document clustering. Readers may wonder how can the algorithm approach φopt for an NP-hard problem. The reason is that our geometric assumptions softens the problem. In this case, Algorithm 1 converges to the same (optimal) solution as its batch counterpart, provided the same initialization."
    }, {
      "heading" : "3.1 Related work and proof outline",
      "text" : "Our major source of inspiration comes from recent advances in non-convex stochastic optimization for unsupervised learning problems [8, 3]. [8] studies the convergence of stochastic gradient descent (SGD) for the tensor decomposition problem, which amounts to finding a local optimum of a nonconvex objective function composed exclusively of saddle points and local optima. Inspired by their analysis framework, we divide our analysis of Algorithm 1 into two phases, that of global convergence and local convergence, indicated by the distance from the current solution to stationary points, ∆(Ct, C∗). We use ∆t := ∆(Ct, C∗) as a shorthand.\nSignificant decrease in k-means objective when ∆t is large In the global convergence phase, the algorithm is not close to any stationary point, i.e., ∀C∗ ∈ {C∗}[k], ∆(Ct, C∗) is lower bounded. We first prove a black-box result showing that on non-stationary points, stochastic k-means decreases the k-means objective in expectation at every iteration.\nLemma 1. Suppose ∀r ∈ [k], ηtr ≤ ηtmax < 1 w.p. 1. Then, E[φt+1 − φt|Ft] ≤ −2 minr,t;pt+1r (m)>0[η t+1 r p t+1 r (m)]φ t(1− √ φ̃t φt ) + (η t+1 max) 2E[ ∑ r ∑ x∈At+1r ‖x− ĉ t+1 r ‖2 + φt|Ft],\nwhere φ̃t := ∑ r ∑ x∈At+1r ‖x−m(A t+1 r )‖2.\nBy Lemma 1, the term minr,t;pt+1r (m)>0[η t+1 r p t+1 r (m)]φ\nt(1− √ φ̃t\nφt ) lower bounds the per iteration\ndrop in k-means objective. Since minr;pt+1r (m)>0 p t+1 r (m) ≥ 1n , φ t ≥ φopt, and 1− φ̃tφt = φt−φ̃t φt = ∆(Ct,Ct+1) φt ≥ 0 (the second equality is by Lemma 12), the drop is always lower bounded by zero. We show that if ∆(Ct, C∗) is bounded away from zero (for any stationary point C∗), then so is ∆(Ct, Ct+1): the rough idea is, in case Ct+1 is a non-stationary point, Ct and Ct+1 must belong to different equivalence classes, as discussed in Section 2, and their distance must be lower bounded by Lemma 4; otherwise, Ct+1 is a stationary point, and by our assumption their distance is lower\nbounded. Thus, ∆(C t,Ct+1) φt is lower bounded by a positive constant, and so is 1−\n√ φ̃t\nφt . Since we chose ηt := Θ( 1t ), the expected per iteration drop of cost is of order Ω( 1 t ), which forms a divergent series; after a sufficient number of iterations the expected drop can be arbitrarily large. We conclude that ∆(Ct, C∗) cannot be bounded away from zero asymptotically, since the k-means cost of any clustering is positive. This result is presented in Lemma 2.\nBefore proceeding, note the drop increases with minr,t;pt+1r (m)>0[η t+1 r p t+1 r (m)]. This means if we can set a cluster-dependent learning rate that adapts to pt+1r (m), the drop could be larger than choosing a flat rate, as we do in our analysis. The learning rate in [16, 5], where ηtr := n̂tr∑ i≤t n̂ i r\n, is intuitively making this adaptation: in the case when the clustering assignment does not change between iterations, it can be seen that Eηtr ≈ 1tptr(m) , so the effective learning rate η t rp t r(m) is balanced for different clusters and is roughly 1t . However, in practice, the clustering assignment changes when the centroids are updated, and it is hard to analyze this adaptive learning rate due to its random dependence on all previous sampling outcomes.\nLemma 2. Assume (A1) holds. If we run Algorithm 1 on X with ηt = at+to , a ≥ 1 2p+min(m) , with p+min(m) as defined in Theorem 1, and to > 1, and choose any initial set of k centroids C 0. Then for any δ > 0, ∃t s.t. ∆(Ct, C∗) ≤ δ with C∗ := m(A∗) for some A∗ ∈ {A∗}[k].\nLemma 2 suggests that, starting from any initial point C0 in {C}, the algorithm always approaches a stationary point asymptotically, ending its global convergence phase after a finite number of iterations. We next examine its local behavior around stationary points.\nLocal convergence to stationary points when ∆t is small To obtain local convergence result, we first define “local attractors” and “basin of attraction” for batch k-means; the natural candidate for the former is the set of stationary points; a basin of attraction is a subset of the solution space so that once batch k-means enters it, it will not escape.\nDefinition 3. We call C∗ a (b0, α)-stable stationary point of batch k-means if it is a stationary point and for any clustering C such that ∆(C,C∗) ≤ b′φ∗, b′ ≤ b0, the Voronoi partition induced by\n{cr}, denoted by {Ar}, satisfies maxr |Aπ(r)4A∗r |\nn∗r ≤ b5b+4(1+φ(C)/φ∗) , where π is the permutation\nachieving ∆(C,C∗), with b ≤ αb′ for some α ∈ [0, 1).\nWe can view b0 as the radius of the basin and α the degree of the “slope” leading to the attractor. A key lemma to our analysis characterizes the iteration-wise local convergence property of batch k-means around stable stationary points, whose convergence rate depends on the slope α. Lemma 3. Let C∗ be a (b0, α)-stable stationary point. For any C such that ∆(C,C∗) ≤ b′φ∗, b′ ≤ b0, apply one step of batch k-means update on C results in a new solution C1 such that ∆(C1, C∗) ≤ αb′φ∗.\nLemma 3 resembles the standard iteration-wise convergence statement in SGD analysis, typically via convexity or smoothness of a function [15]. Here, we have neither at our dispense (we do not even have a gradient). Instead, our analysis relies on the geometric property of Voronoi diagram and the mean operation used in a k-means iteration, similar to those in recent works on batch k-means [11, 2, 17]. Although this lemma applies only to batch k-means, our hope is that stochastic k-means has similar iteration-wise convergence behavior in expectation even in the presence of noise.\nThe difficulty here is, due to non-convexity, the convergence result only holds within a local basin of attraction: if the algorithm’s solution is driven off the current basin of attraction by stochastic noise at any iteration, it may converge to a different attractor, causing trouble to our analysis. To deal with this, we exploit probability tools developed in [3]. [3] studies the convergence of stochastic PCA algorithms, where the objective function is the non-convex Rayleigh quotient, which has a plateau-like component. The tools developed there were used to show that stochastic PCA gradually escapes the plateau. Here, we adapted their analysis to show Algorithm 1 stays within a basin of attraction with high probability, and converges to the attractor at rate O( 1t ). We define a nested sequence of events Ωi ⊂ Ω: Ω ⊃ Ω1 ⊃ · · · ⊃ Ωi ⊃ . . . where Ωi := {∆t ≤ b0φ∗,∀t < i}. Then if Algorithm 1 is within the basin of attraction of a stable stationary point at time t, the event that it escapes this local basin of attraction is contained in the event ∪t≥i+1Ωt−1 \\ Ωt. We upper bound the probability of this bad event (Proposition 1) using techniques that derive tight concentration inequality via moment generating functions from [3], which in turn implies a lower bound on the probability of Ωt, t ≥ i. Then conditioning on Ωt and adapting Lemma 3 from batch to stochastic k-means proves the expected local convergence rate of O( 1t ). Theorem 3. Assume (A1) holds. Let C∗ be a (b0, α)-stable stationary point, and let ∆i = bφ∗ for some b ≤ 12b0 at some iteration i in Algorithm 1. Let a t := maxr p t r(m) mins pts(m) . Suppose we set c′ and m sufficiently large so that\nβ := 2c′min r,t ptr(m)(1−max t at √ α)) > 1\nFix any 0 < δ ≤ 1e , and let amax := c′ minr,t ptr(m) . If in addition,\nt0 ≥ max{( 16a2maxB\n∆i )\n1 β−1 , [\n48a2maxB 2\n(β − 1)(∆i)2 ln\n1 δ ] 2 β−1 , (ln 1 δ ) 2 β−1 }\nThen for all t > i,\nPr(Ωt) ≥ 1− δ and E[∆t|Ωt] ≤ t0 + i+ 1\nt0 + t ∆i +\na2maxB\nβ − 1 ( t0 + i+ 2 t0 + i+ 1 )β+1\n1\nt0 + t+ 1\nNote how, in contrast to Theorem 1, the local convergence result does not allow degeneracy here, by implicitly requiring that minr,t ptr(m) > 0. This is reasonable, since a degenerate set of k centroids cannot converge to a fixed stationary point with k centroids.\nBuilding on the ideas introduced above, we present the key ingredients of our main theorems.\nProof idea of Theorem 1 To prove Theorem 1, we first show that all stationary points satisfying (A0) must be (rmin, 0)-stable for some rmin > 0 (Lemma 5). Then we apply results from both the global and local convergence analysis of Algorithm 1. We define the global convergence phase as when ∆(Ct, C∗∗) > 12rminφ ∗, ∀C∗∗ ∈ {C∗}[k]. As discussed, since ∆(Ct, C∗∗) is bounded away\nfrom zero, the per-iteration drop of k-means cost is of order Ω(ηt), thus we get the expected O( 1t ) convergence rate. Lemma 2 suggests that this phase will eventually end and at some iteration T , ∆(CT , C∗∗) ≤ 12rminφ\n∗∗ must hold for some stationary point C∗∗. The first time when this happens signals the beginning of the local convergence phase: at this point, CT is in the basin of attraction of C∗∗ since C∗∗ is (rmin, 0)-stable. Thus, applying Theorem 3 implies that in this phase the algorithm converges to C∗∗ locally at rate O( 1t ). Hence, the overall global convergence rate is O( 1 t ).\nProof idea of Theorem 2 Here we only apply the local convergence result. The key step is to show that our clusterability assumption on the dataset, (B1) and (B2), implies that its optimal k-means solution, Copt, is a (b0, α)-stable stationary point with a sufficiently large b0 (Proposition 2). Then we adapt results from [17] to show that the seeds obtained from Algorithm 2 are within the basin of attraction of Copt with high probability (Lemmas 13). Using the other geometric assumption, (B3), we apply Theorem 3 to show an O( 1t ) convergence to C opt with high probability."
    }, {
      "heading" : "4 Experiments",
      "text" : "To verify the O( 1t ) global convergence rate of Theorem 1, we run stochastic k-means with varying learning rate, mini-batch size, and k on RCV1 [12]. The dataset is relatively large in size: it has manually categorized 804414 newswire stories with 103 topics, where each story is a 47236-dimensional sparse vector; it was used in [16] for empirical evaluation of mini-batch k-means. We used Python and its scikit-learn package [14] for our experiments, which has stochastic k-means implemented. We disabled centroid relocation and modified their source code to allow a user-defined learning rate (their learning rate is fixed as ηtr := n̂tr∑ i≤t n̂ i r , as in [5, 16], which we refer to as BBS-rate).\nFigure 2 shows the convergence in k-means cost of stochastic k-means algorithm over 100 iterations for varying m and k; fix each pair (m, k), we initialize Algorithm 1 with a same set of k random centroids and run stochastic k-means with varying learning rate parameters (c′, to), and we average the performance of each learning rate setup over 5 runs to obtain the original convergence plot. Figure 2b is an example of a convergence plot before transformation. The dashed black line in each log-log figure is φ 0−φmin\nt , a function of order Θ( 1 t ). To compare the performance of stochastic k-means with\nthis baseline, we first transform the original φt vs t plot to that of φt − φmin vs t. By Theorem 1, E[φt − φ∗∗|G(A∗∗)] = O( 1t ), so we expect the slope of the log-log plot of φ\nt − φ∗∗ vs t to be at least as large as that of Θ( 1t ). Although we do not know the exact cost of the stationary point, since the algorithm has reached a stable phase over 100 iterations, as illustrated by Figure 2b, we simply use φmin as an estimate of φ∗∗. Most log-log convergence graphs fluctuate around a line with a slope at least as steep as that of Θ( 1t ), and do not seem to be sensitive to the choice of learning rate in our experiment. Note in some plots, such as Figure 2a, the initial phase is flat. This is because we\nforce the plot to start at φ0 − φmin instead of their true intercept on the y-axis. BBS-rate exhibits similar behavior to our flat learning rates. Our experiment suggests the convergence rate of stochastic k-means may be sensitive to the ratio mk ; for largerm or smaller k, faster and more stable convergence is observed."
    }, {
      "heading" : "5 Appendix A: complete version of Section 2",
      "text" : "To facilitate our analysis of mini-batch k-means, we build a framework to track the solution path produced by batch k-means; it alternates between two solutions spaces: the space of all k-centroids, which we denote by {C}, and the space of all k-clusterings, which we denote by {A}. Note the latter is a finite set. Throughout the paper, we use π : [k]→ [k] to denote permutations between two sets of the same cardinality.\nDegenerate cases One problem with batch k-means algorithm is it may produce degenerate solutions: if the solution Ct has k centroids, it is possible that data points are mapped to only k′ < k centroids. To handle degenerate cases, starting with |C0| = k, we will consider the enlarged clustering space {A}[k], the union of all k′-clusterings, which we denote by {A}k′ , with 1 ≤ k′ ≤ k.\nPartitioning {C} via {A} Our first observation is that most part of {C} (with exception discussed below) can be partitioned into equivalence classes by the clustering they induce on X; for any C, let v(C) := V (C) ∩X ∈ {A}[k] to formally denote the clustering they induce via their Voronoi diagram. For most points in {C}, there is only one such clustering so v(C) is uniquely determined. We define v−1(A) as the set of points inducing a unique k′-clustering A, with k′ ≤ k. Then we let C1, C2 be in the same partition in {C} if v(C1), v(C2) are both unique and v(C1) = v(C2).\nAmbiguous cases However, it is not always clear which partition C belongs to: if ∃x ∈ X such that ‖x− c1(x)‖ = ‖x− c2(x)‖, where c1(x), c2(x) denote the centroids in C that are closest and second closest to x, x can be clustered into either the cluster of centroid c1(x) or that of c2(x). Centroids with this property can induce two or more clusterings due to ambiguity of Voronoi partition. Intuitively, they are at the boundary of v−1(Ai), for some clusterings Ai. We formalize v−1(A) and boundary points as below.\nDefinition 4 (members of v−1(A)). Fix a clustering A = {A1, . . . , Ak}, we define C ∈ v−1(A) if it contains a matching set of centroids and there exists a permutation of [k] s.t. ∀x ∈ Ar,∀r ∈ [k],\n‖x− cπ(r)‖ < ‖x− cπ(s)‖, ∀s 6= r\nWe say C is a boundary point of v−1(A), if ∀r ∈ [k],∀x ∈ Ar ,\n‖x− cπ(r)‖ ≤ ‖x− cπ(s)‖, ∀s 6= r\nwith equality attained for at least one data point x. Let B(v−1(A)) denote the set of all boundary points of v−1(A). Let Cl(v−1(A)) := v−1(A) ∪B(v−1(A)) denote the closure of v−1(A).\nNote that in the case C has k′ > k centroids, C ∈ v−1(A) implies all centroids in C \\ {cπ(1), . . . , cπ(k)} are degenerate.\nRepresenting k-means updates For now, let C∗ denote a “local minimum” of batch k-means and suppose C∗ is not a boundary point. Let A∗ := v−1(C∗). One run of batch k-means can be represented as\nC0 v(C0)→ A1 m(A 1)→ C1 → . . . m(A t−1)→ Ct−1 v(C t−1)→ At . . .→ A∗ → C∗\nFigure 1b illustrates how the algorithm alternates between two solution spaces. When batch k-means visits a clustering At, if m(At) /∈ Cl(v−1(At)), the algorithms jumps to another clustering At+1. Otherwise, if m(At) ∈ v−1(At), the algorithm stops because At+1 = At and m(At+1) = m(At). In the special case where m(At) is a boundary stationary point, since the algorithm arbitrarily breaks the tie, then it will continue to operate if the new clustering is chosen such that At+1 6= At, or stops if At+1 = At. In practice, it is unlikely to encounter a boundary point due to perturbations in the computing system, and regardless, a sufficient condition for batch k-means to converge at the t-th iteration is m(At) /∈ Cl(v−1(At)). This motivates us to formalize “local optima” of batch k-means as below.\nDefinition 5 (Stationary clusterings). We call A∗ a stationary clustering of X , if m(A∗) ∈ Cl(v−1(A∗)). We let {A∗}[k] ⊂ {A}[k] denote the set of all stationary clusterings of X with number of clusters k′ ∈ [k]. Definition 6 (Stationary points). For a stationary clustering A∗ with k′ clusters, we define C∗ = {c∗r , r ∈ [k′]} to be a stationary point corresponding to A∗, so that ∀A∗r ∈ A∗, c∗r := m(A∗r). We let {C∗}[k] denote the corresponding set of all stationary points of X with k′ ∈ [k].\nNote that the correspondence between A∗ and C∗ is one to one. And by our definition, stationary points cannot be degenerate.\nDistance function from C ′ to C Fix a clustering A with its induced k-centroids C := m(A), and another set of k′-centroids C′ (k′ ≥ k) with its induced clustering A′, if |A′| = |A| = k (this means if k′ > k, then C′ has at least one degenerate centroid), then we can pair the subset of non-degenerate k centroids in C′ with\nthose in C, and ignore the degenerate centroids. Under this condition, we define their centroidal distance as ∆(C′, C) := minπ:[k]→[k] ∑ r nr‖c ′ π(r) − cr‖2. Sometimes we use ∆t := ∆(Ct, C∗) as a shorthand, when we want to measure the distance between Ct from Algorithm 1 and a fixed stationary point C∗. This distance is asymmetric and non-negative, and evaluates to zero if and only if two sets of centroids coincide. Using this distance function, we have a sufficient test on whether a clustering A is stationary.\nNote that the permutation π∗ := arg minπ:[k]→[k] ∑ r nr‖c ′ π(r) − cr‖2 may not be unique, unless ∆(C′, C) is small. In the rest of our paper when we refer to such a permutation that defines ∆(C′, C) in our proofs, it can be any permutation that is a minimizer. The following lemma shows ∆ distance can be used as a test to determine whether two sets of centroids induces the same clustering (belong to the same partition).\nLemma 4. Fix a clustering A = {A1, . . . , Ak}, let C := m(A) and C′ ∈ v−1(A), then ∃δ > 0 such that the following statement holds:\n∆(C′, C) < δ =⇒ C ∈ v−1(A) (1)\nProof. Since C = m(A), |C| = |A| = k. Since C′ ∈ v−1(A), by Definition 4, |C′| = k′ ≥ k, and there is a permutation πo of [k] and some subset {c′πo(1), . . . , c ′ πo(k) } ⊂ C′ such that ∀x ∈ Ar,∀r ∈ [k],\n‖x− c′πo(r)‖ < ‖x− c ′ πo(s)‖,∀s 6= r\nNote also the prerequisite for defining a distance ∆ from C′ to C is satisfied, and we can choose δ > 0 s.t. ∀x ∈ Ar , ∀r ∈ [k], s 6= r,\n‖x− c′πo(r)‖ ≤ ‖x− c ′ πo(s)‖ − 2\n√ δ\nand we require the equality is attained by at least one triple (x, r, s). Let π∗ be a permutation satisfying\nπ∗ = arg min π ∑ r∈[k] nr‖c′π(r) − cr‖2\nLet π′ := π−1∗ ◦ πo. We have ∀r, s 6= r,\n‖x− cπ′(s)‖ − ‖x− cπ′(r)‖ ≥ ‖x− c′πo(s)‖ − ‖c ′ πo(s) − cπ′(s)‖\n−(‖x− c′πo(r)‖+ ‖c ′ πo(r) − cπ′(r)‖) > ‖x− c ′ πo(s)‖ − ‖x− c ′ πo(r)‖ − 2\n√ δ ≥ 0\nwhere the second inequality is by the fact that\nmax r ‖c′πo(r) − cπ′(r)‖ 2 ≤ ∆(C′, C) < δ\nSince π′ is the composition of two permutations of [k], it is also a permutation of [k], and ∀r, s 6= r, ‖x − cπ′(r)‖ < ‖x− cπ′(s)‖, so C ∈ v−1(A) by Definition 4.\nRemark: For any two consecutive iterations of batch k-means, Ct, Ct+1, if we let At+1 be A, then Ct satisfies the condition for C′ and Ct+1 for C. Applying Lemma 4, we can conclude that when ∆(Ct, Ct+1) is sufficiently small, batch k-means converges. Lemma 4 also implies ∃δ > 0, such that the contrapositive of statement (1) holds. This will be used in the proof of Lemma 2.\nEquivalence of Algorithm 1 to stochastic k-means Here, we formally show that Algorithm 1 with specific instantiation of sample size m and learning rates ηtr is equivalent to online k-means [5] and mini-batch k-means [16].\nClaim 1. In Algorithm 1, if we set a counter for N̂ tr := ∑t i=1 n̂ i r and if we set the learning rate η t r :=\nn̂tr N̂tr\n, then provided the same random sampling scheme is used,\n1. When mini-batch size m = 1, the update of Algorithm 1 is equivalent to that described in [Section 3.3, [5]].\n2. When m > 1, the update of Algorithm 1 is equivalent to that described from line 3 to line 14 in [Algorithm 1, [16]] with mini-batch size m.\nProof. For the first claim, we first re-define the variables used in [Section 3.3, [5]]. We substitute index k in [5] with r used in Algorithm 1. For any iteration t, we define the equivalence of definitions: s ← xi, ctr ← wk, n̂tr ← ∆nk, N̂ tr ← nk. According to the update rule in [5], ∆nk = 1 if the sampled point xi is assigned to cluster with center wk. Therefore, the update of the k-th centroid according to online k-means in [5] is:\nwk ← wk + 1\nnk (xi − wk)1{∆nk=1}\nUsing the re-defined variables, at iteration t, this is equivalent to\nctr = c t−1 r +\n1\nN̂ tr (s− ct−1r )1{n̂tr=1}\nNow the update defined by Algorithm 1 with m = 1 and ηtr = n̂tr N̂tr is:\nctr = c t−1 r + η t r(ĉ t r − ct−1r )1{n̂tr 6=0}\n= ct−1r + n̂tr\nN̂ tr (s− ct−1r )1{n̂tr=1} = c t−1 r +\n1\nN̂ tr (s− ct−1r )1{n̂tr=1}\nsince n̂tr can only take value from {0, 1}. This completes the first claim.\nFor the second claim, consider line 4 to line 14 in [Algorithm 1, [16]]. We substitute their index of time i with t in Algorithm 1. We define the equivalence of definitions: m← b, St ←M , s← x, ct−1I(s) ← d[x], c t−1 r ← c.\nAt iteration t, we let v[ct−1r ]t denote the value of counter v[c] upon completion of the loop from line 9 to line 14 for each center c, then N̂ tr ← v[ct−1r ]t. Since according to Lemma 15, from line 9 to line 14, the updated centroid ctr after iteration t is\nctr = 1\nv[ct−1r ]t ∑ s∈∪ti=1S i r s = 1 N̂ tr ∑ s∈∪ti=1S i r s\nThis implies\nctr − ct−1r = 1\nN̂ tr ∑ s∈∪ti=1S i r s− ct−1r\n= 1 N̂ tr [ ∑ s∈Str s+ ∑\ns′∈∪t−1i=1S i r\ns′]− ct−1r\n= 1 N̂ tr [ ∑ s∈Str s+ N̂ t−1r c t−1 r ]− ct−1r\n= − n̂ t r\nN̂ tr ct−1r +\nn̂tr\nN̂ tr\n∑ s∈Str s\nn̂tr = −ηtrct−1r + ηtr ĉtr\nHence, the updates in Algorithm 1 and line 4 to line 14 in [Algorithm 1, [16]] are equivalent."
    }, {
      "heading" : "6 Appendix B: proofs of main theorems",
      "text" : "One subtlety we need to point out before the proofs is that, in Algorithm 1, the learning rate ηtr as well as the update rule: ctr ← (1− ηtr)ct−1r + ηtr ĉtr is only defined for a cluster r that is “sampled” at the t-th iteration. However, even if the cluster is not “sampled”, i.e., ctr = ct−1r , the same update rule with ĉtr = ct−1r and and the same learning rate still holds for this case. So in our analysis, we equivalently treat each cluster r as updated with the same learning rate ηt = c ′\nto+t , and\ndifferentiates between a sampled and not-sampled cluster only through the definition of ĉtr ."
    }, {
      "heading" : "6.1 Proofs leading to Theorem 1",
      "text" : "Proof of Lemma 1. For simplicity, we denote E[·|Ft] by Et[·] (the same notation is also used as a shorthand to E[·|Ωt] in the proof of Theorem 3; we abuse the notation here).\nEt[φ t+1] = Et[ k∑ r=1 ∑ x∈At+2r ‖x− ct+1r ‖2]\n≤ Et[ ∑ r ∑ x∈At+1r ‖x− ct+1r ‖2] = Et[ ∑ r ∑ x∈At+1r ‖x− (1− ηt+1r )ctr − ηt+1r ĉt+1r ‖2]\n= Et[ ∑ r ∑ x∈At+1r (1− ηt+1r )2‖x− ctr‖2 + (ηt+1r )2‖x− ĉt+1r ‖2\n+2ηt+1r (1− ηt+1r )〈x− ctr, x− ĉt+1r 〉]\nwhere the inequality is due to the optimality of clustering At+2 for centroids Ct+1. Since Et[ĉt+1r ] = (1− pt+1r )ctr + pt+1r m(At+1r ), we have\n〈x− ctr, x− ĉt+1r 〉 = (1− pt+1r )‖x− ctr‖2 + pt+1r 〈x− ctr, x−m(At+1r )〉 Plug this into the previous inequality, we get\nEt[φ t+1] ≤ ∑ r (1− 2ηt+1r )φtr + (ηt+1r )2φtr + (ηt+1r )2 ∑\nx∈At+1r\n‖x− ĉt+1r ‖2\n+2ηt+1r {(1− pt+1r ) ∑\nx∈At+1r\n‖x− ctr‖2 + pt+1r ∑\nx∈At+1r\n〈x− ctr, x−m(At+1r )〉}\n= φt − 2 ∑ r ηt+1r p t+1 r φ t r + 2 ∑ r ηt+1r p t+1 r ∑ x∈At+1r 〈x− ctr, x−m(At+1r )〉}\n+(ηt+1r ) 2φtr + (η t+1 r )\n2 ∑\nx∈At+1r\n‖x− ĉt+1r ‖2\nNote by Cauchy-Schwarz,∑ x∈At+1r 〈x− ctr, x−m(At+1r )〉 ≤ √ ∑ x∈At+1r ‖x− ctr‖2 ∑ x∈At+1r ‖x−m(At+1r )‖2\n≤ ∑\nx∈At+1r\n‖x− ctr‖2 = φtr\nNow consider the two sums, −2 ∑ r ηt+1r p t+1 r φ t r + 2 ∑ r ηt+1r p t+1 r ∑ x∈At+1r 〈x− ctr, x−m(At+1r )〉\nFor each r, if pt+1r = 0, both the left and right term are zero; if pt+1r > 0, we know the term is negative. Hence −2 ∑ r ηt+1r p t+1 r φ t r + 2 ∑ r ηt+1r p t+1 r ∑ x∈At+1r 〈x− ctr, x−m(At+1r )〉\n≤ −2 min r,t;pt+1r >0 ηt+1r p t+1 r ∑ r;pt+1r >0 (φtr − ∑ x∈At+1r 〈x− ctr, x−m(At+1r )〉)\nOur key observation is that pt+1r = 0 if and only if cluster At+1r is empty, i.e., degenerate. Since the degenerate clusters do not contribute to the k-means cost, we have ∑ r;pt+1r >0 φtr = φ t. Moreover, applying CauchySchwarz again, ∑ r;pt+1r >0 √ ∑ x∈At+1r ‖x− ctr‖2 √ ∑ x∈At+1r ‖x−m(At+1r )‖2 ≤ √ φtφ̃t\nTherefore,\nEt[φ t+1] ≤ φt − 2 min\nr,t;pt+1r >0\nηt+1r p t+1 r (φ t − √ φtφ̃t) + (ηt+1max) 2(Et ∑ r ∑ x∈At+1r ‖x− ĉt+1r ‖2 + φt)\n= φt − 2 min r,t;pt+1r >0 ηt+1r p t+1 r φ t(1−\n√ φ̃t\nφt ) + (ηt+1max) 2(Et ∑ r ∑ x∈At+1r ‖x− ĉt+1r ‖2 + φt)\nProof of Lemma 2. First note that since {A∗}[k] includes all stationary clusterings of 1 ≤ k′ ≤ k number of clusters. At any t, Ct must have k′ ∈ [k] non-degenerate centroids, so there exists C∗ = m(A∗) with A∗ ∈ {A∗}k′ ∈ {A∗}[k] such that ∆(Ct, C∗) is well defined. For a contradiction, suppose ∃δ > 0 such that ∀t, ∆(Ct, C∗) > δ, for all A∗ ∈ {A∗}[k]. At any t ≥ 1, let k′ denote the number of non-degenerate clusters in Ct, then\nCase 1: If At+1 ∈ {A∗}k′ , then ∃C∗ = m(At+1). Therefore,\n∆(Ct,m(At+1)) = ∆(Ct, C∗) > δ\nby our assumption.\nCase 2: If At+1 /∈ {A∗}k′ , then Ct+1 = m(At+1) /∈ Cl(v−1(At+1)). Then by the contrapositive of statement (1) in Lemma 4,\n∃δ′ > 0 s.t. ∀t,∆(Ct, Ct+1) ≥ δ′\nCombining the two cases, ∆(Ct,m(At+1)) > min{δ, δ′} > 0. By Lemma 1 and assumption (A1), for any t,\nE[φt+1 − φt|Ft] ≤ − 2aminr∈[k],t;ptr(m)>0 p\nt r(m)\nt+ to φt(1−\n√ φ̃t\nφt ) + (\na\nt+ to )2B\nSince φt − φ̃t = ∑ r∈[k′] ∑ x∈At+1r ‖x − Ct‖2 − ‖x − m(At+1r )‖2 = ∑ r ‖c t r − m(At+1r )‖2nt+1r =\n∆(Ct,m(At+1)) ≥ min{δ, δ′}, we get 1− √ φ̃t\nφt ≥ 1−\n√ 1− min{δ,δ′}\nφt > 0. Since min{δ, δ′} is a constant\nand φt is upper bounded, the previous term is bounded away from zero for all t. For convenience, let’s denote by\nmin r∈[k],t;ptr(m)>0\nptr(m)(1−\n√ φ̃t\nφt ) :=\nh φt > 0\nThen ∀t ≥ 1,\nE[φt+1]− E[φt] ≤ − 2ah t+ to + a2B (t+ to)2\nfor some positive constants B, a, h. Summing up all inequalities, E[φt+1]−E[φ0] ≤ −2ah ln t+to+1 to\n+ a 2B\nto−1 .\nSince t is unbounded and ln t+to+1 to\nincreases with t while a 2B\nto−1 is a constant, ∃T such that for all t ≥ T , Eφt − φ0 ≤ −φ0, which means E[φt] ≤ 0, for all t large enough. This implies the k-means cost of some clusterings is negative, which is impossible. So we have a contradiction.\nLemma 5. If ∀C∗ ∈ {C∗}[k], C∗ is a non-boundary stationary point, that is, C∗ := m(A∗) ∈ v−1(A∗). Then ∃rmin > 0 such that ∀C∗ ∈ {C∗}[k], C∗ is a (rmin, 0)-stable stationary point.\nProof. Fix any k in the range of [k] (we abuse the notation with the same k here). For any C such that ∆(C,C∗) exists (i.e., |C| = k′ ≥ k = |C∗|), we first show ∃r∗ > 0, such that the following statement holds:\n∆(C,C∗) < r∗φ∗ =⇒ C ∈ v−1(A∗)\nThus, we proceed by argument analogous to that of Lemma 4. By Definition 4, there is a permutation πo of [k] such that ∀x ∈ Ar, ∀r ∈ [k] and ∀s 6= r,\n‖x− c∗πo(r)‖ < ‖x− c ∗ πo(s)‖\nWe choose r∗ > 0 so that ∀x ∈ Ar, ∀r ∈ [k], ∀s 6= r,\n‖x− c∗πo(r)‖ ≤ ‖x− c ∗ πo(s)‖ − 2\n√ r∗φ∗, ∀r ∈ [k], s 6= r\nwith equality holds for at least one triple of (x, r, s). Let π∗ be a permutation satisfying\nπ∗ = arg min π ∑ r∈[k] n∗r‖cπ(r) − c∗r‖2\nLet π′ := π∗ ◦ πo. We have ∀(x, r, s) triples,\n‖x− cπ′(s)‖ − ‖x− cπ′(r)‖ ≥ ‖x− c∗πo(s)‖ − ‖c ∗ πo(s) − cπ′(s)‖\n−(‖x− c∗πo(r)‖+ ‖c ∗ πo(r) − cπ′(r)‖) > ‖x− c ∗ πo(s)‖ − ‖x− c ∗ πo(r)‖ − 2\n√ r∗φ∗ ≥ 0\nwhere the second inequality is by the fact that\nmax r ‖cπ∗(r) − c∗r‖2 ≤ ∆(C,C∗) < r∗φ∗ =⇒ max r ‖cπ∗(r) − c∗r‖ <\n√ r∗φ∗\nSince π′ is the composition of two permutations of [k], it is also a permutation of [k], and ∀r, s 6= r, ‖x − cπ′(r)‖ < ‖x− cπ′(s)‖, so C ∈ v−1(A∗) by Definition 4. Since by our definition, r∗ is unique for each C∗. Since {C∗}[k] is finite, taking the minimum over all such r∗, i.e., rmin := minC∗∈{C∗}[k] r\n∗ completes the proof.\nRemark: r∗φ∗ is intuitively the “radius” or basin of attraction of a stationary point C∗. rmin is smallest such radius and is only determined by the geometry of the dataset.\nProof setup of Theorem 1 The goal of the proof is to show that first, (with high probability) the algorithm converges to some stationary clustering, A∗∗ ∈ {A∗}[k]. We call this event G; formally,"
    }, {
      "heading" : "G := {∃T ≥ 1,∃A∗∗ ∈ {A∗}[k], s.t. At = A∗∗, ∀t ≥ T}",
      "text" : "Second, conditioning on G, we want to establish that the expected convergence rate of the algorithm to any stationary clustering A∗∗, which we formulate as\nE[φt − φ(A∗∗)|Go(A∗∗)]\nis of order O( 1 t ), where Go(A∗∗) ⊂ G is defined in the subsequent proof.\nTo prove the two claims, we consider an eventGo ⊂ G ⊂ Ω, which we partition into disjoint sets F (T−, A∗∗)∩ H(T+, A∗∗), where by “disjoint” we mean disjoint w.r.t. different (T,A∗∗), for T ≥ 1 and A∗∗ ∈ {A∗}[k]. Formally,\nF (T−, A∗∗) := {∀t < T,∆(Ct, C∗∗) > 1 2 rminφ ∗∗, ∀A∗∗ ∈ {A∗}t[k]}\n∩{∆(CT , C∗∗) ≤ 1 2 rminφ ∗∗}\nwhere we denote byC∗∗ := m(A∗∗), and we use {A∗}t[k] to denote the subset of {A∗}[k] such that ∆(Ct, C∗∗) exists, and H(T+, A∗∗) := {∆(Ct, C∗∗) ≤ rminφ∗∗, ∀t ≥ T} Under the event F (T−, A∗∗), time T is the first time the algorithm “hits” (hitting time) a stationary clustering, and this clustering isA∗∗. Note this event only depends on information of the sample space prior to and including time T , and we use T− to emphasize this.\nSimilarly, the event H(T+, A∗∗) only depends on information post and including T . Thus, for a fixed pair (T,A∗∗), F (T−, A∗∗) ∩ H(T+, A∗∗) 6= ∅; for t 6= T , the two events are complementary to each other, and for t = T , they intersect since {∆T ≤ 1\n2 rminφ ∗∗} implies {∆T ≤ rminφ∗∗}. Moreover, fixing T , F (T−, A∗∗) are disjoint for different A∗∗; fixing A∗∗, F (T−, A∗∗) are disjoint for different T . Thus, the events F (T−, A∗∗) ∩H(T+, A∗∗) are disjoint for different pairs of (T,A∗∗).\nProof of Theorem 1. Now we define Go to be\nGo := ∪T≥1 ∪A∗∗∈{A∗}[k] F (T −, A∗∗) ∩H(T+, A∗∗)\nBy Lemma 2\nPr{∪T≥1 ∪A∗∗∈{A∗}[k] F (T −, A∗∗)} = 1 (2)\nConditioning on any F (T−, A∗∗), provided\nc′ > 1\n2 min r∈[k],t; ptr(m)>0\nptr(m)(1− √ 1− rminφopt φt ) ≥ 1\n2 min r∈[k],t; ptr(m)>0\nptr(m)(1− √ 1− rminφ∗∗ φt )\nWe apply Lemma 6 to get ∀t ≤ T ,\nE{φt − φ(A∗∗)|F (T−, A∗∗)} = O(1 t )\nNow let’s consider the case t ≥ T . Since A∗∗ is (rmin, 0)-stable, we can apply Theorem 3; specifically, for each parameters in the statement of Theorem 3, α = 0, ptr(m) = 1 − ( n−n∗∗r n )m, at = maxr p t r(m) minr ptr(m) , and amax = c′\nminr,t ptr(m) . Thus,\nβ := 2c′(1−max t at √ α) = 2c′ > 1\nis satisfied by setting c′ ≥ 1 2 . Fix any 0 < δ < 1 e , the condition on to in Theorem 3 is satisfied by setting\nto ≥ max  ( 16(c′)2B [1−(1−p∗ min )m]2∆(CT ,C∗∗) ) 1 β−1 ,\n[ 48(c′)2B2\n(β−1)[1−(1−p∗ min\n)m]2∆(CT ,C∗∗)2 ln 1 δ\n] 2\nβ−1 ,(ln 1 δ\n) 2 β−1  Since T is the hitting time of the event {∆(CT , C∗∗) ≤ 1\n2 rminφ ∗∗}, ∆(CT , C∗∗) ≈ 1 2 rminφ ∗∗, and we treat it as a constant. So the conditions by our requirements on c′ and to. Let β′ = 2c′, amax := c ′\nρ(m) . Thus we can\napply Theorem 3 to get\nPr{H(T+, A∗∗)|F (T−, A∗∗)} ≥ 1− δ (3)\nand ∀t ≥ T , E{φt − φ(A∗∗)|H(T+, A∗∗)} ≤ E{∆(Ct, C∗∗)|H(T+, A∗∗)}\n≤ ( to + T + 1 to + t )β ′ ∆(CT , C∗∗) +\na2maxB\nβ′ − 1 ( t0 + T + 2 t0 + T + 1 )β ′+1 1 t0 + t+ 1\n≤ ( to + T + 1 to + t )β ′ rminφ(A ∗∗) + a2maxB β′ − 1 ( t0 + T + 2 t0 + T + 1 )β ′+1 1 t0 + t+ 1 = O( 1 t ) (4)\nwhere the first inequality is by Lemma 11. Now observe\nPr{G} ≥ Pr{Go} = Pr{∪T≥1 ∪A∗∗∈{A∗}[k] F (T −, A∗∗) ∩H(T+, A∗∗)} = ∑\nT≥1,A∗∗∈{A∗}[k]\nPr{F (T−, A∗∗) ∩H(T+, A∗∗)}\nwhere the second equality holds because the events F (T−, A∗∗) ∩H(T+, A∗∗) are disjoint with respect to different (T,A∗∗). Since ∑\nT≥1,A∗∗∈{A∗}[k]\nPr{F (T−, A∗∗) ∩H(T+, A∗∗)}\n= ∑\nT≥1,A∗∗∈{A∗}[k]\nPr{H(T+, A∗∗)|F (T−, A∗∗)}Pr{F (T−, A∗∗)}\n≥ (1− δ) ∑ T,A∗∗ Pr{F (T,A∗∗)} = (1− δ)Pr{∪T,A∗∗F (T,A∗∗)} = (1− δ)\nwhere the inequality is by Inequality (3), and the last equality is due to Equality (2). Therefore, Pr{G} ≥ 1− δ, which completes the proof of the first statement.\nLet Go(A∗∗) := ∪T≥1F (T−, A∗∗) ∩ H(T+, A∗∗), i.e., Go(A∗∗) denotes the event where the algorithm converges to stationary clustering A∗∗, and\nPr{∪A∗∗∈{A∗}[k]Go(A ∗∗)}\n= Pr{∪T≥1,A∗∗∈{A∗}[k]F (T −, A∗∗) ∩H(T+, A∗∗)} ≥ 1− δ\nwhich proves the second statement. Finally, combining inequalities (6) and (4), we have ∀T ≥ 1 and ∀t ≥ 1,\nE{φt − φ(A∗∗)|F (T−, A∗∗) ∩H(T+, A∗∗)} = O(1 t )\nSince the quantity φt − φ(A∗∗) is independent of information about T , we reach the conclusion\nE{φt − φ(A∗∗)|Go(A∗∗)} = O( 1\nt )\nLemma 6. Suppose the assumptions and settings in Theorem 1 hold, conditioning on any F (T−, A∗∗), we have ∀1 ≤ t < T ,\nE{φt − φ(A∗∗)|F (T−, A∗∗)} = O(1 t )\nProof. First observe that conditioning on the event F (T−, A∗∗), ∆(Ct, C∗∗) > 1 2 rminφ ∗∗, ∀t < T . Now we are in a setup similar to that in the proof Lemma 2, and the argument therein will lead us to the conclusion that\nφt − φ̃t > min{1 2 rmin, rmin}φ∗∗ = 1 2 rminφ ∗∗\nBy Lemma 1, we have conditioning on F (T−, A∗∗),\nEt[φ t|F (T−, A∗∗)] ≤ φt−1{1−\n2c′minr∈[k],t;ptr(m)>0 p t r(m)\nto + t− 1 (1−\n√ φ̃t\nφt )}\n+ (c′)2B\n(to + t− 1)2 (5)\nwhere B is the bound in (A1). Since by choosing\nc′ > 1\n2 min r∈[k],t; ptr(m)>0\nptr(m)(1− √ 1− rminφopt φt ) ≥ 1\n2 min r∈[k],t; ptr(m)>0\nptr(m)(1− √ 1− rminφ∗∗ φt )\nwe have\nβ = 2c′ min r∈[k],t;ptr(m)>0 ptr(m)(1−\n√ φ̃t\nφt ) > 1\nThen subtracting φ(A∗∗) from both sides of Inequality (5) and applying Lemma 17 with a := β > 1, we conclude that ∀1 ≤ t < T ,\nE[φt − φ(A∗∗)|F (T−, A∗∗)] ≤ to + 1 to + t [φ0 − φ(A∗∗)]\n+ (c′)2B\nβ − 1 ( to + 2 to + 1 )β+1\n1\nto + t+ 1 = O(\n1 t ) (6)\nThe overall exact convergence bound There are two convergence bound corresponding to the two phases of analysis, global and local convergence, in Theorem 1. For the first global convergence phase from t = 1 to T for some random T , the bound is\n( to + 1 to + t )β [φ0 − φ(A∗∗)] + (c\n′)2B\nβ − 1 ( to + 2 to + 1 )β+1\n1\nto + t+ 1 (by Lemma 6)\nwhere β = 2c′p+min(m)(1− √ φ̃t φt ). For the second, local convergence phase, ∀t ≥ T ,\n( to + T + 1 to + t )β ′ rminφ(A ∗∗) + a2maxB β′ − 1 ( t0 + T + 2 t0 + T + 1 )β ′+1 1 t0 + t+ 1 (by Theorem 3)\nwhere β′ = 2c′, amax := c ′ ρ(m) . So the overall bound is the maximum of the two bounds. When c′ is sufficiently large, the first term of both bounds are likely dominated by the second term, so the overall bound is likely dominated by a 2 maxB\nβ−1 ( t0+2 t0+1 )β+1 1 t0+t+1 ."
    }, {
      "heading" : "6.2 Proofs leading to Theorem 3",
      "text" : "In the analysis of this section, we use Et[·] as a shorthand notation for E[·|Ωt], where Ωt is as defined in the main paper.\nProof of Theorem 3. By Proposition 1, for any t > 1, Pr(Ωt) ≥ 1 − Pr(∪t>iΩt−1 \\ Ωt) ≥ 1 − δ. This proves the first statement. By Lemma 7,\nEt[∆ t|Ft−1] ≤ ∆t−1(1−\nβ\nto + t ) + [ amax to + t ]2B + 2amax to + t Et{ ∑ r n∗r〈ct−1r − c∗r , ξtr〉|Ft−1}\n= ∆t−1(1− β to + t ) + [ amax to + t ]2B\nwhere the last term vanishes since Et{ξtr|Ft−1} = 0, ∀r ∈ [k]. Therefore,\nEt[∆ t] ≤ Et−1[∆t−1](1−\nβ\nto + t ) +\na2maxB\n(t+ to)2 ≤ · · · ≤ Ei[∆i]Πtτ=i+1(1−\nβ\nto + τ ) + t∑ τ=i+1 a2maxB (τ + to)2\nBy Lemma 17, for β > 1,\nEt[∆ t] ≤ ( to + i+ 1\nto + t )β∆i +\na2maxB\nβ − 1 ( t0 + i+ 2 t0 + i+ 1 )β+1\n1\nt0 + t+ 1\nLemma 7. Suppose the conditions in Theorem 3 hold. If c to+i ≤ ηipir(m) ≤ cato+i , ∀r ∈ [k], with a ≤ 1√ α , then\n∆i ≤ ∆i−1(1− β to + i ) + [ amax to + i ]2 ∑ r n∗r‖ĉir − c∗r‖2 + 2amax to + i ∑ r n∗r〈ci−1r − c∗r , ξir〉\nwhere ξir := ĉ i r − E[ĉir|Fi−1].\nProof. Let ∆ir := n∗r‖cir − c∗r‖2, so ∆i = ∑ r ∆ i r . By the update rule of Algorithm 1,\n∆ir = n ∗ r‖(1− ηi)(ci−1r − c∗r) + ηi(ĉir − c∗r)‖2\n≤ n∗r{(1− 2ηi)‖ci−1r − c∗r‖2 + 2ηi〈ci−1r − c∗r , ĉir − c∗r〉 +(ηi)2[‖ci−1r − c∗r‖2 + ‖ĉir − c∗r‖2]}\nLet ξir = ĉir − E[ĉir|Fi−1], where E[ĉir|Fi−1] = (1− pir)ci−1r + pirm(Air), and pir := pir(m).\nSince\n〈ci−1r − c∗r , ĉir − c∗r〉 = 〈ci−1r − c∗r , E[ĉir|Fi−1] + ξir − c∗r〉 ≤ (1− pir)‖ci−1r − c∗r‖2 + pir‖m(Air)− c∗r‖‖ci−1r − c∗r‖+ 〈ci−1r − c∗r , ξir〉\nwe have\n∆ir ≤ n∗r{−2ηi[‖ci−1r − c∗r‖2 − (1− pir)‖ci−1r − c∗r‖2 − pir‖ci−1r − c∗r‖‖m(Air)− c∗r‖] +‖ci−1r − c∗r‖2 + 2ηi〈ξir, ci−1r − c∗r〉+ (ηi)2[‖ci−1r − c∗r‖2 + ‖ĉir − c∗r‖2]}\n≤ n∗r{− 2c to + i ‖ci−1r − c∗r‖2 + 2ca to + i ‖ci−1r − c∗r‖‖m(Air)− c∗r‖\n+‖ci−1r − c∗r‖2 + 2ηi〈ξir, ci−1r − c∗r〉+ (ηi)2[‖ci−1r − c∗r‖2 + ‖ĉir − c∗r‖2}\nNote ∑ r n∗r‖cir − c∗r‖‖m(Air)− c∗r‖ ≤ √ ( ∑ r n∗r‖ci−1r − c∗r‖2)( ∑ r n∗r‖m(Air)− c∗r‖2)\n= √ ∆i−1∆(m(Ai), C∗) ≤ √ α∆i−1\nwhere the first inequality is by Cauchy-Schwartz and the last inequality is by applying Lemma 3. Finally, summing over ∆ir , we get\n∆i = ∑ r ∆ir ≤ ∆i−1[1− 2c to + i (1− a √ α)]\n+[ ca (to + i)pir ]2 ∑ r n∗r‖ĉir − c∗r‖2 + 2ca (to + i)pir ∑ r n∗r〈ci−1r − c∗r , ξir〉\n≤ ∆i−1(1− β to + i ) + [ amax to + i ]2 ∑ r n∗r‖ĉir − c∗r‖2 + 2amax to + i ∑ r n∗r〈ci−1r − c∗r , ξir〉\nThe second inequality is by definition of β := 2c′minr,t ptr(m)(1 − maxt at √ α)), and the fact that c ≥ c′minr,t p t r(m) and a ≤ maxt at.\nLemma 8. Suppose the conditions in Theorem 3 hold. For any λ > 0, Ei{exp{λ∆i}|Fi−1} ≤ exp { λ{(1− β\nt0 + i )∆i−1 +\na2maxB (t0 + i)2 + λa2maxB 2 2(t0 + i)2 } }\nProof. By Lemma 7, we have\nEi{exp(λ∆i)|Fi−1} ≤ expλ[∆i−1(1− β\nto + i ) +\na2maxB\n(to + i)2 ]\nEi{expλ 2amax to + i ∑ r n∗r〈ci−1r − c∗r , ξir〉|Fi−1}\nSince 2λamax i+t0 ∑ r n ∗ r〈ξir, ci−1r − c∗r〉 ≤ 2λamaxi+t0 B and Ei{ 2λamax i+t0 ∑ r n ∗ r〈ξir, ci−1r − c∗r〉|Fi−1} = 0, by Hoeffding’s lemma\nEi { exp{2λamax\ni+ t0 ∑ r n∗r〈ξir, ci−1r − c∗r〉|Fi−1}\n} ≤ exp{λ 2 maxa 2 maxB 2\n2(i+ t0)2 }\nCombining this with the previous bound completes the proof.\nLemma 9 (adapted from [3]). For any λ > 0, Ei{eλ∆ i−1 } ≤ Ei−1{eλ∆ i−1 }\nProof. By our partitioning of the sample space, Ωi−1 = Ωi ∪ (Ωi−1 \\ Ωi), and for any ω ∈ Ωi and ω′ ∈ Ωi−1 \\ Ωi, ∆i−1(ω) ≤ ∆0 < ∆i−1(ω′). Taking expectation over Ωi and Ωi−1, we get Ei{eλ∆ i−1 } ≤ Ei−1{eλ∆ i−1 }.\nProposition 1. Suppose the conditions in Theorem 3 hold. Fix any 0 < δ ≤ 1 e . If\nt0 ≥ max{( 16a2maxB\n∆0 )\n1 β−1 , [\n48a2maxB 2\n(β − 1)(∆0)2 ln 1 δ ] 2 β−1 , (ln 1 δ ) 2 β−1 }\nthen P (∪i≥1Ωi−1 \\ Ωi) ≤ δ (here we used ∆0 instead of ∆i and treat the starting time, the i-th iteration in Theorem 3 as the zeroth iteration for cleaner presentation).\nProof. By Lemma 8,\nEi{eλ∆ i } ≤ Ei{eλ{(1− β to+i )∆i−1} exp{ λa\n2 maxB (to + i)2 + λ2a2maxB 2 2(to + i)2 }\n≤ Ei−1{eλ (1)∆i−1r } exp{ λa\n2 maxB (to + i)2 + λ2a2maxB 2 2(to + i)2 }\nwhere λ(1) = λ(1 − β to+i ), and the second inequality is by Lemma 9. Similarly, the following recurrence relation holds for k = 0, . . . , i:\nEi−k{eλ (k)∆i−k} ≤ Ei−(k+1){eλ (k+1)∆i−k−1} exp{ λ (k)a2maxB\n(to + i− k)2 +\n(λ(k))2a2maxB 2 2(to + i− k)2 }\nwhere λ(0) := λ, and for k ≥ 1, λ(k) := Πkt=1(1− 2to+(i−t+1) )λ (0).\nSince (see, e.g., [3]) ∀β > 0, k ≥ 1,\nΠkt=1(1− β to + (i− t+ 1) ) ≤ ( to + i− k + 1 to + i )β\nwe have, for 0 ≤ k ≤ i (this inequality is also satisfied when k = 0 by definition of λ(0)),\nλ(k) (t0 + i− k)2 ≤ ( to + i− k + 1 (to + i)(to + i− k) )2λ ≤ (1 + 2 to + 1 t2o )\nλ\n(to + i)β\nRepeatedly applying the relation, we get\nEi{eλ∆ i } ≤ eλ (i)∆0 exp{ i−1∑ k=0 ( λ(k)a2maxB (to + i− k)2 + (λ(k))2a2maxB 2 2(to + i− k)2 )}\n≤ exp{λ( to + 1 to + i )β∆0 + (λB + λ2B2 2 ) (1 + 2 to + 1 t2o )a2max (to + i)β−1 }\nThen by Markov’s inequality, for any λi > 0,\nPr(ω ∈ Ωi−1 \\ Ωi) ≤ Pri(∆i > 2∆0) = Pri(eλi∆ i > eλi2∆ 0 ) ≤ Eie λi∆\ni r\neλi2∆ 0 r\nCombining this with the upper bound on Eieλi∆ i , we get\nPr(ω ∈ Ωi−1 \\ Ωi) ≤ exp { −λi{∆0[2− ( to + 1\nto + i )β ]− (B + λiB\n2 2 ) (1 + 2 to + 1 t2o )a2max (to + i)β−1 }\n}\n≤ exp { −λi{∆0 − (B + λiB 2\n2 ) 4a2max (to + i)β−1\n} }\nsince i ≥ 1, to ≥ 1. We choose λi = 1∆ ln (i+1)2 δ with ∆ = ∆ 0 2 .\nCase 1: B > λiB 2\n2 . We get ∆0 − (B + λiB\n2\n2 ) 4a2max (to+i)β−1 ≥ ∆, since to ≥ ( 16a 2 maxB ∆0 ) 1 β−1 .\nCase 2: B ≤ λiB 2\n2 . We get\n∆0 − (B + λiB 2\n2 ) 4a2max (to + i)β−1 ≥ ∆0 − λiB2 4a2max (to + i)β−1\n= 2∆− 1 ∆ ln (1 + i)2 δ 4a2maxB 2 (to + i)β−1 ≥ 2∆− 1 ∆ ln (to + i) 2 δ 4a2maxB 2 (to + i)β−1\nNow we show 1\n∆ ln\n(to + i) 2\nδ\n4a2maxB 2\n(to + i)β−1 ≤ ∆\nSince to + i ≥ to ≥ max{[ 48a 2 maxB 2\n(β−1)(∆0)2 ln 1 δ ]\n2 β−1 , (ln 1\nδ )\n2 β−1 }, we can apply Lemma 16 with C :=\nmax{ 16a 2 maxB 2 (∆0)2 , β−1 3 }, t := to + i ≥ ( 3Cβ−1 ln 1 δ ) 2 β−1 , and get\n4a2maxB 2\n∆2 ln\n(to + i) 2\nδ = (ln\n(to + i) 2 δ ) 16a2maxB 2 (∆0r)2 ≤ 2C ln t+ C ln 1 δ < tβ−1 = (to + i) β−1\nThat is, 1 ∆\nln (to+i) 2\nδ\n4a2maxB 2\n(to+i)β−1 ≤ ∆. Thus, for both cases, Pr(ω ∈ Ωi−1 \\ Ωi) ≤ e− 1 ∆\n(ln (1+i)2\nδ )∆ ≤ δ\n(i+1)2 . Finally, we have ∑∞ i=1 Pr(ω ∈ Ωi−1 \\ Ωi) ≤ δ."
    }, {
      "heading" : "7 Appendix C: Proofs leading to Theorem 2",
      "text" : ""
    }, {
      "heading" : "7.1 Existence of stable stationary point under geometric assumptions on the dataset",
      "text" : "Lemma 10 (Theorem 5.4 of [11]). Suppose the datasetX admits a stationary clusteringA∗ satisfying (B1) and (B2). If ∀r ∈ [k], s 6= r, ∆tr + ∆ts ≤ ∆rs16 . Then for any s 6= r, |A ∗ r ∩Ats| ≤ b 2 f , where b ≥ maxr,s ∆ t r+∆ t s ∆rs .\nThe proof is almost verbatim to Theorem 5.4 of [11]; we include it here for completeness.\nProof. Let x ∈ A∗r ∩Ats. Split x into its projection on the line joining c∗r and c∗s , and its orthogonal component. This implies\nx = 1 2 (c∗r + c ∗ s) + λ(c ∗ r − c∗s) + u\nwith u ⊥ c∗r − c∗s . Note λ measures the degree of departure of the projected point to the mid-point of c∗r and c∗s . Thus, by our definition of the margin, we have\n‖x̄− 1 2 (c∗r + c ∗ s)‖ = ‖λ(c∗r − c∗s)‖ ≥ 1 2 ∆rs (7)\nSince the projection of x on the line joining ctr, cts is closer to s, we have\nx(cts − ctr) ≥ 1\n2 (cts − ctr)(cts + ctr)\nSo 1\n2 (c∗r + c ∗ s)(c t s − ctr) + λ(c∗r − c∗s)(cts − ctr)\n+u(cts − ctr) ≥ 1\n2 (cts − ctr)(cts + ctr) (8)\nSince u ⊥ c∗r − c∗s , let ∆ = ∆ts + ∆tr . We have\nu(cts − ctr) = u(cts − c∗s − (ctr − c∗r)) ≤ ‖u‖∆\nRearranging Inequality (8), we have\n1 2 (c∗r + c ∗ s − cts − ctr)(cts − ctr)\n+λ(c∗r − c∗s)(cts − ctr) + u(cts − ctr) ≥ 0\n≡ ∆ 2\n2 +\n∆ 2 ‖c∗r − c∗s‖ − λ‖c∗r − c∗s‖2 +λ∆‖c∗r − c∗s‖+ ‖u‖∆ ≥ 0\nTherefore,\n‖x− c∗r‖ = ‖( 1 2 − λ)(c∗s − c∗r) + u‖ ≥ ‖u‖\n≥ λ ∆ ‖c∗r − c∗s‖2 − ∆ 2\n−1 2 ‖c∗r − c∗s‖ − λ‖c∗r − c∗s‖ ≥ ∆rs‖c∗r − c∗s‖ 64∆\nwhere the last inequality is by our assumption that ∆ ≤ ∆rs 16 , and λ ≥ ∆rs 2‖c∗r−c∗s‖ by (7). Therefore, for all s 6= r\n|A∗r ∩Ats| ∆2rs‖c∗r − c∗s‖2\nf∆2 ≤ ∑ A∗r∩Ats ‖x− c∗r‖2\nSo |A∗r ∩ Ats| ≤ ∑ A∗r∩Ats ‖x − c∗r‖2 f(∆tr+∆ t s) 2 ∆2rs‖c∗r−c∗s‖2 ≤ fb 2\nf2φ∗( 1 n∗r\n) ( ∑ A∗r∩Ats ‖x − c∗r‖2). That is, |A∗r∩A t s| n∗r ≤\nb2 fφ∗ ∑ A∗r∩Ats ‖x − c∗r‖2. Similarly, for all s 6= r, |A∗s∩A t r| n∗r ≤ b 2 fφ∗ ∑ A∗s∩Atr ‖x − c∗s‖2 Summing over all s 6= r, |Ar4A ∗ r |\nn∗r = ρout + ρin ≤ b\n2\nfφ∗ φ ∗ = b\n2 f .\nLemma 11. Fix a stationary point C∗ with k centroids, and any other set of k′-centroids, C, with k′ ≥ k so that C has exactly k non-degenerate centroids. We have\nφ(C)− φ∗ ≤ min π ∑ r n∗r‖cπ(r) − c∗r‖2 = ∆(C,C∗)\nProof. Since degenerate centroids do not contribute to k-means cost, in the following we only consider the sets of non-degenerate centroids {cs, s ∈ [k]} ⊂ C and {c∗r , r ∈ [k]} ⊂ C∗. We have for any permutation π,\nφ(C)− φ∗ = ∑ s ∑ x∈As ‖x− cs‖2 − ∑ r ∑ x∈A∗r ‖x− c∗r‖2\n≤ ∑ r ∑ x∈A∗r ‖x− cπ(r)‖2 − ∑ r ∑ x∈A∗r ‖x− c∗r‖2 = ∑ r n∗r‖cπ(r) − c∗r‖2\nwhere the last inequality is by optimality of clustering assignment based on Voronoi diagram, and the second inequality is by applying the centroidal property in Lemma 12 to each centroid in C∗. Since the inequality holds for any π, it must holds for minπ ∑ r n ∗ r‖cπ(r) − c∗r‖2, which completes the proof.\nLemma 12 (Centroidal property, Lemma 2.1 of [10]). For any point set Y and any point c in Rd, φ(c, Y ) = φ(m(Y ), Y ) + |Y |‖m(Y )− c‖2. Proposition 2. Assume (B1) (B2) hold for a stationary clusteringA∗ with corresponding k centroids denoted by C∗. Then, for any C such that ∆(C,C∗) ≤ bφ∗ for some b ≤ γ 2f(α)2\n162 , we have maxr∈[k] |Ar4A∗r | n∗r ≤ b γf(α)3 .\nAnd C∗ is a ( γ 2f(α)2\n162 , α) -stable stationary point.\nProof. The condition implies for all r ∈ [k], ‖cr − c∗r‖ ≤ √ bφ∗\nn∗r . Then for all r 6= s,\n‖cr − c∗r‖+ ‖cs − c∗s‖ ≤ √ b √ φ∗(\n1√ n∗r + 1√ n∗s ) =\n√ b\nγf(α) γf(α)\n√ φ∗(\n1√ n∗r + 1√ n∗s )\n≤ √ b\nγf(α) ∆rs ≤\n1\n16 ∆rs\nwhere the second inequality is by assumptions (B1) and (B2), and the last inequality by our assumption on b. Thus, we may apply Lemma 10 to get |Ar4A ∗ r |\nn∗r ≤ b γ2f3(α) for all r, proving the first statement. Now by Lemma\n11, φ(C) ≤ (b+ 1)φ∗, so we get αb\n5αb+ 4(1 + φ(C) φ∗ )\n≥ αb 5αb+ 4(2 + b)\n≥ αb 5αγ2f2(α)/162 + 4(2 + γ2f2(α)/162) ≥ b γ2f3(α)\n≥ |Ar4A ∗ r |\nn∗r\nwhere the last inequality holds since f(α) ≥ 5α+5 162α\nand γ ≥ 8 √\n2√ f by (B1) and (B2), respectively. This proves\nthe second statement since C∗ is then ( γ 2f(α)2\n162 , α)-stable by Definition 3."
    }, {
      "heading" : "7.2 Proofs regarding seeding guarantee",
      "text" : "Lemma 13 (Theorem 4 of [17]). Assume (B1) and (B2) hold for a stationary clustering A∗ with C∗ := m(A∗). If we obtain seeds from Algorithm 2, then\n∆(C0, C∗) ≤ 1 2\nγ2f(α)2\n162 φ∗\nwith probability at least 1−mo exp(−2( f(α)4 − 1) 2w2min)− k exp(−mopmin).\nProof. First note that assumption (B1) satisfies center-separability assumption in Definition 1 of [17]. Therefore, applying Theorem 4 of [17] with µr = c∗r and νr = c0r , we get ∀r ∈ [k], ‖c0r − c∗r‖ ≤ √ f(α)\n2 √ φ∗r n∗r with\nprobability at least 1−mo exp(−2( f(α)4 − 1) 2w2min)− k exp(−mopmin). Summing over all r, the previous event implies ∑ r n ∗ r‖c0r − c∗r‖2 ≤ f(α)4 φ ∗ ≤ 1 2 γ2f(α)2 162 φ∗, where the second inequality is by γ ≥ 8 √ 2√ f .\nLemma 14. Assume the conditions Lemma 13 hold. For any ξ > 0, if in addition,\nf(α) ≥ 5\n√ 1\n2wmin ln(\n2\nξpmin ln\n2k\nξ )\nIf we obtain seeds from Algorithm 2 choosing\nln 2k ξ pmin < mo < ξ 2 exp{2(f(α) 4 − 1)2w2min}\nThen ∆(C0, C∗) ≤ 1 2 γ2f(α)2 162 φ∗ with probability at least 1− ξ.\nProof. By Lemma 13, a sufficient condition for the success probability to be at least 1− ξ is:\nmo exp(−2( f(α)\n4 − 1)2w2min) ≤\nξ\n2\nand k exp(−mopmin) ≤ ξ 2 This translates to requiring\n1\npmin ln\n2k\nξ ≤ mo ≤\nξ 2 exp(2( f(α) 4 − 1)2w2min)\nNote for this inequality to be possible, we also need 1 pmin ln 2k ξ ≤ ξ 2 exp(2( f(α) 4 − 1)2w2min), imposing a constraint on f(α). Taking logarithm on both sides and rearrange, we get\n( f(α) 4 − 1)2 ≥ 1 2wmin ln( 2 ξpmin ln 2k ξ )\nThat is, f(α) ≥ 5 √\n1 2wmin ln( 2 ξpmin ln 2k ξ ).\nProof of Theorem 2. We first show clusterability of the dataset implies stability of the optimal solution: since Copt, which is necessarily a stationary point, satisfies (B1)(B2), Copt is a ( γf(α) 2\n162 , α)-stable stationary point\nby Proposition 2. Let b0 := γf(α) 2\n162 , and we denote event F := {∆(C0, Copt) ≤ 1 2 b0φ opt}. Since f(α) ≥ 5 √\n1 2wmin ln( 2 ξpmin ln 2k ξ\n), and log 2k ξ\npmin < mo < ξ 2 exp{2( f(α) 4 − 1)2w2min}, we can apply Lemma 14 to get\nPr{F} ≥ 1− ξ\nConditioning on F , we can invoke Theorem 3, with c′, to sufficiently large; both depends on ptr(m) as defined in Theorem 3. Since Copt is (b0, α)-stable, conditioning on F\nmax r Atr4Aoptr noptr ≤ b0 γf(α)3 ≤ γ 162f(α)\nSo\nmin r,t ptr(1)|F ≥ pmin −max r Atr4Aoptr noptr ≥ pmin − γ 162f(α)\nAnd min r,t ptr(m)|F ≥ 1− [1− (pmin − γ 162f(α) )]m where pmin − γ162f(α) > √ α by (B3). To apply Theorem 3, it is sufficient to have\nβ := 2c′min r,t ptr(m)(1−max t at √ α)) ≥ 2c′(min r,t ptr(m)− √ α)\n≥ 2c′(1− √ α− [1− (pmin −\nγ\n162f(α) )]m) > 2c′(1−\n√ α− [1− √ α]m) > 1\nby our requirement that m > 1, and c′ > 1 2[1− √ α−(1− √ α)m] .\nt0 ≥ max  ( 16(c′)2B (1−[1−(pmin− γ 162f(α) )]m)2∆0 ) 1 β−1 , [ 48(c′)2B2\n(1−[1−(pmin− γ 162f(α) )]m)2(β−1)(∆0)2\nln 1 δ\n] 2\nβ−1 ,(ln 1 δ\n) 2 β−1  ≥ max{(16a 2 maxB\n∆0 )\n1 β−1 , [\n48a2maxB 2\n(β − 1)(∆0)2 ln 1 δ ] 2 β−1 , (ln 1 δ ) 2 β−1 }\nwith amax := c ′ minr,t ptr(m) . Both are satisfied by our requirement on c′ and to, so applying Theorem 3 we get ∀t ≥ 1,\nE{∆t|Ωt, F} = E{∆t|Ωt} = O( 1\nt )\nwhere Ωt := {∆t−1 ≤ b0φopt} and Pr{Ωt|F} ≥ 1− δ. So\nPr{Ωt, F} = Pr{Ωt|F}Pr{F} ≥ (1− δ)(1− ξ)\nFinally, using Lemma 11, and letting Gt := Ωt ∩ F , we get the desired result."
    }, {
      "heading" : "8 Appendix D: technical lemmas",
      "text" : "Lemma 15. Letwt, gt denote vectors of dimension Rd at time t. If we choosew0 arbitrarily, and for t = 1 . . . T , we repeatdly apply the following update\nwt = (1− 1\nt )wt−1 +\n1 t gt\nThen\nwT = 1\nT T∑ t=1 gt\nProof. We prove by induction on T . For T = 1, w1 = (1− 1)w0 + g1 = 11 ∑1 t=1 gt. So the claim holds for T = 1.\nSuppose the claim holds for T , then for T + 1, by the update rule\nwT+1 = (1− 1\nT + 1 )wT +\n1\nT + 1 gT+1\n= (1− 1 T + 1 ) 1 T T∑ t=1 gt + 1 T + 1 gT+1\n= T\nT + 1\n1\nT T∑ t=1 gt + 1 T + 1 gT+1\n= 1\nT + 1 T+1∑ t=1 gt\nSo the claim holds for any T ≥ 1.\nLemma 16 (technical lemma). For β ∈ (1, 2]. If C ≥ β−1 3 , δ ≤ 1 e , and t ≥ ( 3C β−1 ln 1 δ ) 2 β−1 , then tβ−1 − 2C ln t− C ln 1 δ > 0.\nProof. Let f(t) := tβ−1−2C ln t−C ln 1 δ . Taking derivative, we get f ′(t) = (β−1)tβ−2− 2C t ≥ 0 when t ≥ ( 2C β−1 ) 1 β−1 . Since ln 1 δ 3C β−1 ≥ 3C β−1 ≥ 1, (ln 1 δ 3C β−1 ) 2 β−1 ≥ ( 2C β−1 ) 1 β−1 , it suffices to show f((ln 1 δ 3C β−1 ) 2 β−1 ) >\n0 for our statement to hold. f((ln 1 δ 3C β−1 )\n2 β−1 ) = (ln 1\nδ 3C β−1 ) 2 − 2C ln{(ln 1 δ 3C β−1 )\n2 β−1 } − C ln 1\nδ =\n(ln 1 δ )2 9C\n2\n(β−1)2 − 4C β−1 ln(ln 1 δ 3C β−1 ) − C ln 1 δ = 4C β−1 [\n3 2 C\nβ−1 ln 1 δ − ln( 3C β−1 ln 1 δ )] + C ln 1 δ [ 3C (β−1)2 − 1] > 0,\nwhere the first term is greater than zero because x− ln(2x) > 0 for x > 0, and the second term is greater than zero by our assumption on C.\nLemma 17 (Lemma D1 of [3]). Consider a nonnegative sequence (ut : t ≥ to), such that for some constants a, b > 0 and for all t > to ≥ 0, ut ≤ (1− at )ut−1 + b t2 . Then, if a > 1,\nut ≤ ( to + 1\nt+ 1 )auto +\nb a− 1(1 + 1 to + 1 )a+1 1 t+ 1"
    } ],
    "references" : [ {
      "title" : "k-means++: the advantages of careful seeding",
      "author" : [ "David Arthur", "Sergei Vassilvitskii" ],
      "venue" : "In Proceedings of the Eighteenth Annual ACM-SIAM Symposium on Discrete Algorithms,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2007
    }, {
      "title" : "Improved spectral-norm bounds for clustering. In Approximation, Randomization, and Combinatorial Optimization. Algorithms and Techniques - 15th International Workshop",
      "author" : [ "Pranjal Awasthi", "Or Sheffet" ],
      "venue" : "APPROX 2012, and 16th International Workshop,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2012
    }, {
      "title" : "The fast convergence of incremental PCA. In Advances in Neural Information Processing Systems",
      "author" : [ "Akshay Balsubramani", "Sanjoy Dasgupta", "Yoav Freund" ],
      "venue" : "Annual Conference on Neural Information Processing Systems",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2013
    }, {
      "title" : "Online learning and stochastic approximations",
      "author" : [ "Léon Bottou" ],
      "venue" : "On-line learning in neural networks,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 1998
    }, {
      "title" : "Convergence properties of the k-means algorithms",
      "author" : [ "Léon Bottou", "Yoshua Bengio" ],
      "venue" : "In Advances in Neural Information Processing Systems 7, [NIPS Conference,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 1994
    }, {
      "title" : "Scatter/gather: A cluster-based approach to browsing large document collections",
      "author" : [ "Douglas R. Cutting", "Jan O. Pedersen", "David R. Karger", "John W. Tukey" ],
      "venue" : "In Proceedings of the 15th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 1992
    }, {
      "title" : "Using the triangle inequality to accelerate k-means",
      "author" : [ "Charles Elkan" ],
      "venue" : "In Machine Learning, Proceedings of the Twentieth International Conference (ICML",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2003
    }, {
      "title" : "Escaping from saddle points - online stochastic gradient for tensor decomposition",
      "author" : [ "Rong Ge", "Furong Huang", "Chi Jin", "Yang Yuan" ],
      "venue" : "In Proceedings of The 28th Conference on Learning Theory, COLT",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2015
    }, {
      "title" : "Data clustering: 50 years beyond k-means",
      "author" : [ "Anil K. Jain" ],
      "venue" : "Pattern Recognition Letters,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2010
    }, {
      "title" : "A local search approximation algorithm for k-means clustering",
      "author" : [ "Tapas Kanungo", "David M. Mount", "Nathan S. Netanyahu", "Christine D. Piatko", "Ruth Silverman", "Angela Y. Wu" ],
      "venue" : "Comput. Geom.,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2004
    }, {
      "title" : "Clustering with spectral norm and the k-means algorithm",
      "author" : [ "Amit Kumar", "Ravindran Kannan" ],
      "venue" : "In 51th Annual IEEE Symposium on Foundations of Computer Science,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2010
    }, {
      "title" : "Rcv1: A new benchmark collection for text categorization research",
      "author" : [ "David D. Lewis", "Yiming Yang", "Tony G. Rose", "Fan Li" ],
      "venue" : "J. Mach. Learn. Res.,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2004
    }, {
      "title" : "Least squares quantization in pcm",
      "author" : [ "S. Lloyd" ],
      "venue" : "Information Theory, IEEE Transactions on,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 1982
    }, {
      "title" : "Scikit-learn: Machine learning in Python",
      "author" : [ "F. Pedregosa", "G. Varoquaux", "A. Gramfort", "V. Michel", "B. Thirion", "O. Grisel", "M. Blondel", "P. Prettenhofer", "R. Weiss", "V. Dubourg", "J. Vanderplas", "A. Passos", "D. Cournapeau", "M. Brucher", "M. Perrot", "E. Duchesnay" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2011
    }, {
      "title" : "Making gradient descent optimal for strongly convex stochastic optimization",
      "author" : [ "Alexander Rakhlin", "Ohad Shamir", "Karthik Sridharan" ],
      "venue" : "In Proceedings of the 29th International Conference on Machine Learning,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2012
    }, {
      "title" : "Web-scale k-means clustering",
      "author" : [ "D. Sculley" ],
      "venue" : "In Proceedings of the 19th International Conference on World Wide Web, WWW",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2010
    } ],
    "referenceMentions" : [ {
      "referenceID" : 4,
      "context" : "We analyze online [5] and mini-batch [16] k-means variants.",
      "startOffset" : 18,
      "endOffset" : 21
    }, {
      "referenceID" : 15,
      "context" : "We analyze online [5] and mini-batch [16] k-means variants.",
      "startOffset" : 37,
      "endOffset" : 41
    }, {
      "referenceID" : 7,
      "context" : "The k-means objective is non-convex and non-differentiable: we exploit ideas from recent work on stochastic gradient descent for non-convex problems [8, 3] by providing a novel characterization of the trajectory of k-means algorithm on its solution space, and circumvent the non-differentiability problem via geometric insights about k-means update.",
      "startOffset" : 149,
      "endOffset" : 155
    }, {
      "referenceID" : 2,
      "context" : "The k-means objective is non-convex and non-differentiable: we exploit ideas from recent work on stochastic gradient descent for non-convex problems [8, 3] by providing a novel characterization of the trajectory of k-means algorithm on its solution space, and circumvent the non-differentiability problem via geometric insights about k-means update.",
      "startOffset" : 149,
      "endOffset" : 155
    }, {
      "referenceID" : 12,
      "context" : "Lloyd’s algorithm (batch k-means) [13] is one of the most popular heuristics for clustering [9].",
      "startOffset" : 34,
      "endOffset" : 38
    }, {
      "referenceID" : 8,
      "context" : "Lloyd’s algorithm (batch k-means) [13] is one of the most popular heuristics for clustering [9].",
      "startOffset" : 92,
      "endOffset" : 95
    }, {
      "referenceID" : 6,
      "context" : "Even with fast implementations such as [7], which reduces the computation for finding the closest centroid of each point, the per-iteration running time still depends linearly on n, making it a computational bottleneck for large datasets.",
      "startOffset" : 39,
      "endOffset" : 42
    }, {
      "referenceID" : 3,
      "context" : "To scale up the centroid-update phase, a plausible recipe is the “stochastic approximation” scheme [4]: the overall idea is, at each iteration, the centroids are updated using one (online [5]) or a few (mini-batch [16]) randomly sampled points instead of the entire dataset.",
      "startOffset" : 99,
      "endOffset" : 102
    }, {
      "referenceID" : 4,
      "context" : "To scale up the centroid-update phase, a plausible recipe is the “stochastic approximation” scheme [4]: the overall idea is, at each iteration, the centroids are updated using one (online [5]) or a few (mini-batch [16]) randomly sampled points instead of the entire dataset.",
      "startOffset" : 188,
      "endOffset" : 191
    }, {
      "referenceID" : 15,
      "context" : "To scale up the centroid-update phase, a plausible recipe is the “stochastic approximation” scheme [4]: the overall idea is, at each iteration, the centroids are updated using one (online [5]) or a few (mini-batch [16]) randomly sampled points instead of the entire dataset.",
      "startOffset" : 214,
      "endOffset" : 218
    }, {
      "referenceID" : 15,
      "context" : "Empirically, stochastic k-means has gained increasing attention for large-scale clustering and is included in widely used machine learning packages, such as Sofia-ML [16] and scikit-learn [14].",
      "startOffset" : 166,
      "endOffset" : 170
    }, {
      "referenceID" : 13,
      "context" : "Empirically, stochastic k-means has gained increasing attention for large-scale clustering and is included in widely used machine learning packages, such as Sofia-ML [16] and scikit-learn [14].",
      "startOffset" : 188,
      "endOffset" : 192
    }, {
      "referenceID" : 11,
      "context" : "Figure 1a demonstrates the efficiency of stochastic k-means against batch k-means on the RCV1 dataset [12].",
      "startOffset" : 102,
      "endOffset" : 106
    }, {
      "referenceID" : 15,
      "context" : "(a) Figure from [16], demonstrating the relative performance of online, mini-batch, and batch k-means.",
      "startOffset" : 16,
      "endOffset" : 20
    }, {
      "referenceID" : 4,
      "context" : "Algorithm 1 and stochastic k-means [5, 16] are equivalent up to the choice of learning rate and sampling scheme (the proof of equivalence is in Appendix A).",
      "startOffset" : 35,
      "endOffset" : 42
    }, {
      "referenceID" : 15,
      "context" : "Algorithm 1 and stochastic k-means [5, 16] are equivalent up to the choice of learning rate and sampling scheme (the proof of equivalence is in Appendix A).",
      "startOffset" : 35,
      "endOffset" : 42
    }, {
      "referenceID" : 4,
      "context" : "In [5, 16], the per-cluster learning rate is chosen as η r := n̂tr ∑ i≤t n̂ i r ; in our analysis, we choose a flat learning rate η = c ′ to+t for all clusters, where c′, to > 0 are some fixed constants (empirically, no obvious differences are observed; see Section 3.",
      "startOffset" : 3,
      "endOffset" : 10
    }, {
      "referenceID" : 15,
      "context" : "In [5, 16], the per-cluster learning rate is chosen as η r := n̂tr ∑ i≤t n̂ i r ; in our analysis, we choose a flat learning rate η = c ′ to+t for all clusters, where c′, to > 0 are some fixed constants (empirically, no obvious differences are observed; see Section 3.",
      "startOffset" : 3,
      "endOffset" : 10
    }, {
      "referenceID" : 0,
      "context" : "The major advantage of Algorithm 2 over other choices of initialization, such as the k-means++ [1] or random sampling, is that its running time is independent of the data size while providing seeding guarantee.",
      "startOffset" : 95,
      "endOffset" : 98
    }, {
      "referenceID" : 10,
      "context" : "We assume, similar to [11], that the means of each pair of clusters are well-separated and that the points from the two clusters are separated by a “margin”, that is, ∀x ∈ A r ∪A s , the distance from x to the bisector of c r and c s is lower bounded.",
      "startOffset" : 22,
      "endOffset" : 26
    }, {
      "referenceID" : 5,
      "context" : "The proposed clustering scheme is reminiscent to the Buckshot algorithm [6], widely used in the domain of document clustering.",
      "startOffset" : 72,
      "endOffset" : 75
    }, {
      "referenceID" : 7,
      "context" : "Our major source of inspiration comes from recent advances in non-convex stochastic optimization for unsupervised learning problems [8, 3].",
      "startOffset" : 132,
      "endOffset" : 138
    }, {
      "referenceID" : 2,
      "context" : "Our major source of inspiration comes from recent advances in non-convex stochastic optimization for unsupervised learning problems [8, 3].",
      "startOffset" : 132,
      "endOffset" : 138
    }, {
      "referenceID" : 7,
      "context" : "[8] studies the convergence of stochastic gradient descent (SGD) for the tensor decomposition problem, which amounts to finding a local optimum of a nonconvex objective function composed exclusively of saddle points and local optima.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 15,
      "context" : "The learning rate in [16, 5], where η r := n̂tr ∑ i≤t n̂ i r , is intuitively making this adaptation: in the case when the clustering assignment does not change between iterations, it can be seen that Eη r ≈ 1 tpr(m) , so the effective learning rate η t rp t r(m) is balanced for different clusters and is roughly 1t .",
      "startOffset" : 21,
      "endOffset" : 28
    }, {
      "referenceID" : 4,
      "context" : "The learning rate in [16, 5], where η r := n̂tr ∑ i≤t n̂ i r , is intuitively making this adaptation: in the case when the clustering assignment does not change between iterations, it can be seen that Eη r ≈ 1 tpr(m) , so the effective learning rate η t rp t r(m) is balanced for different clusters and is roughly 1t .",
      "startOffset" : 21,
      "endOffset" : 28
    }, {
      "referenceID" : 14,
      "context" : "Lemma 3 resembles the standard iteration-wise convergence statement in SGD analysis, typically via convexity or smoothness of a function [15].",
      "startOffset" : 137,
      "endOffset" : 141
    }, {
      "referenceID" : 10,
      "context" : "Instead, our analysis relies on the geometric property of Voronoi diagram and the mean operation used in a k-means iteration, similar to those in recent works on batch k-means [11, 2, 17].",
      "startOffset" : 176,
      "endOffset" : 187
    }, {
      "referenceID" : 1,
      "context" : "Instead, our analysis relies on the geometric property of Voronoi diagram and the mean operation used in a k-means iteration, similar to those in recent works on batch k-means [11, 2, 17].",
      "startOffset" : 176,
      "endOffset" : 187
    }, {
      "referenceID" : 2,
      "context" : "To deal with this, we exploit probability tools developed in [3].",
      "startOffset" : 61,
      "endOffset" : 64
    }, {
      "referenceID" : 2,
      "context" : "[3] studies the convergence of stochastic PCA algorithms, where the objective function is the non-convex Rayleigh quotient, which has a plateau-like component.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 2,
      "context" : "We upper bound the probability of this bad event (Proposition 1) using techniques that derive tight concentration inequality via moment generating functions from [3], which in turn implies a lower bound on the probability of Ωt, t ≥ i.",
      "startOffset" : 162,
      "endOffset" : 165
    }, {
      "referenceID" : 11,
      "context" : "To verify the O( 1t ) global convergence rate of Theorem 1, we run stochastic k-means with varying learning rate, mini-batch size, and k on RCV1 [12].",
      "startOffset" : 145,
      "endOffset" : 149
    }, {
      "referenceID" : 15,
      "context" : "The dataset is relatively large in size: it has manually categorized 804414 newswire stories with 103 topics, where each story is a 47236-dimensional sparse vector; it was used in [16] for empirical evaluation of mini-batch k-means.",
      "startOffset" : 180,
      "endOffset" : 184
    }, {
      "referenceID" : 13,
      "context" : "We used Python and its scikit-learn package [14] for our experiments, which has stochastic k-means implemented.",
      "startOffset" : 44,
      "endOffset" : 48
    }, {
      "referenceID" : 4,
      "context" : "We disabled centroid relocation and modified their source code to allow a user-defined learning rate (their learning rate is fixed as η r := n̂tr ∑ i≤t n̂ i r , as in [5, 16], which we refer to as BBS-rate).",
      "startOffset" : 167,
      "endOffset" : 174
    }, {
      "referenceID" : 15,
      "context" : "We disabled centroid relocation and modified their source code to allow a user-defined learning rate (their learning rate is fixed as η r := n̂tr ∑ i≤t n̂ i r , as in [5, 16], which we refer to as BBS-rate).",
      "startOffset" : 167,
      "endOffset" : 174
    }, {
      "referenceID" : 0,
      "context" : "[1] David Arthur and Sergei Vassilvitskii.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 1,
      "context" : "[2] Pranjal Awasthi and Or Sheffet.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 2,
      "context" : "[3] Akshay Balsubramani, Sanjoy Dasgupta, and Yoav Freund.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 3,
      "context" : "[4] Léon Bottou.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 4,
      "context" : "[5] Léon Bottou and Yoshua Bengio.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 5,
      "context" : "[6] Douglas R.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 6,
      "context" : "[7] Charles Elkan.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 7,
      "context" : "[8] Rong Ge, Furong Huang, Chi Jin, and Yang Yuan.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 8,
      "context" : "[9] Anil K.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 9,
      "context" : "[10] Tapas Kanungo, David M.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 10,
      "context" : "[11] Amit Kumar and Ravindran Kannan.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 11,
      "context" : "[12] David D.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 12,
      "context" : "[13] S.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 13,
      "context" : "[14] F.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 14,
      "context" : "[15] Alexander Rakhlin, Ohad Shamir, and Karthik Sridharan.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 15,
      "context" : "[16] D.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 4,
      "context" : "Equivalence of Algorithm 1 to stochastic k-means Here, we formally show that Algorithm 1 with specific instantiation of sample size m and learning rates η r is equivalent to online k-means [5] and mini-batch k-means [16].",
      "startOffset" : 189,
      "endOffset" : 192
    }, {
      "referenceID" : 15,
      "context" : "Equivalence of Algorithm 1 to stochastic k-means Here, we formally show that Algorithm 1 with specific instantiation of sample size m and learning rates η r is equivalent to online k-means [5] and mini-batch k-means [16].",
      "startOffset" : 216,
      "endOffset" : 220
    }, {
      "referenceID" : 4,
      "context" : "3, [5]].",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 15,
      "context" : "When m > 1, the update of Algorithm 1 is equivalent to that described from line 3 to line 14 in [Algorithm 1, [16]] with mini-batch size m.",
      "startOffset" : 110,
      "endOffset" : 114
    }, {
      "referenceID" : 4,
      "context" : "3, [5]].",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 4,
      "context" : "We substitute index k in [5] with r used in Algorithm 1.",
      "startOffset" : 25,
      "endOffset" : 28
    }, {
      "referenceID" : 4,
      "context" : "According to the update rule in [5], ∆nk = 1 if the sampled point xi is assigned to cluster with center wk.",
      "startOffset" : 32,
      "endOffset" : 35
    }, {
      "referenceID" : 4,
      "context" : "Therefore, the update of the k-th centroid according to online k-means in [5] is: wk ← wk + 1 nk (xi − wk)1{∆nk=1}",
      "startOffset" : 74,
      "endOffset" : 77
    }, {
      "referenceID" : 15,
      "context" : "For the second claim, consider line 4 to line 14 in [Algorithm 1, [16]].",
      "startOffset" : 66,
      "endOffset" : 70
    }, {
      "referenceID" : 15,
      "context" : "Hence, the updates in Algorithm 1 and line 4 to line 14 in [Algorithm 1, [16]] are equivalent.",
      "startOffset" : 73,
      "endOffset" : 77
    }, {
      "referenceID" : 2,
      "context" : "Lemma 9 (adapted from [3]).",
      "startOffset" : 22,
      "endOffset" : 25
    }, {
      "referenceID" : 2,
      "context" : ", [3]) ∀β > 0, k ≥ 1, Πt=1(1− β to + (i− t+ 1) ) ≤ ( to + i− k + 1 to + i )",
      "startOffset" : 2,
      "endOffset" : 5
    }, {
      "referenceID" : 10,
      "context" : "4 of [11]).",
      "startOffset" : 5,
      "endOffset" : 9
    }, {
      "referenceID" : 10,
      "context" : "4 of [11]; we include it here for completeness.",
      "startOffset" : 5,
      "endOffset" : 9
    }, {
      "referenceID" : 9,
      "context" : "1 of [10]).",
      "startOffset" : 5,
      "endOffset" : 9
    }, {
      "referenceID" : 2,
      "context" : "Lemma 17 (Lemma D1 of [3]).",
      "startOffset" : 22,
      "endOffset" : 25
    } ],
    "year" : 2016,
    "abstractText" : "We analyze online [5] and mini-batch [16] k-means variants. Both scale up the widely used k-means algorithm via stochastic approximation, and have become popular for large-scale clustering and unsupervised feature learning. We show, for the first time, that starting with any initial solution, they converge to a “local optimum” at rateO( 1t ) (in terms of the k-means objective) under general conditions. In addition, we show if the dataset is clusterable, when initialized with a simple and scalable seeding algorithm, mini-batch k-means converges to an optimal k-means solution at rate O( 1t ) with high probability. The k-means objective is non-convex and non-differentiable: we exploit ideas from recent work on stochastic gradient descent for non-convex problems [8, 3] by providing a novel characterization of the trajectory of k-means algorithm on its solution space, and circumvent the non-differentiability problem via geometric insights about k-means update.",
    "creator" : "LaTeX with hyperref package"
  }
}