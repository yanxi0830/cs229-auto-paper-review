{
  "name" : "1503.06394.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Large-scale Log-determinant Computation through Stochastic Chebyshev Expansions",
    "authors" : [ "Insu Han", "Dmitry Malioutov", "Jinwoo Shin" ],
    "emails" : [ "hawki17@kaist.ac.kr", "dmaliout@gmail.com" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Scalability of machine learning algorithms for extremely large data-sets and models has been increasingly the focus of attention for the machine learning community, with prominent examples such as first-order stochastic optimization methods and randomized linear algebraic computations. One of the important tasks from linear algebra that appears in a variety of machine learning problems is computing the log-determinant of a large positive definite matrix. For example, serving as the normalization constant for multivariate Gaussian models, log-determinants of covariance (and precision) matrices play an important role in inference, model selection and learning both the structure and the parameters for Gaussian Graphical models and Gaussian processes [25, 23, 10]. Log-determinants also play an important role in a variety of Bayesian machine learning problems, including sampling and variational inference [17]. In addition, metric and kernel learning problems attempt to learn quadratic forms adapted to the data, and formulations involving Bregman divergences of log-determinants have become very popular [9, 30]. Finally, log-determinant computation also appears in some discrete probabilistic models, e.g., tree mixture models [20, 1] and Markov random fields [31]. In planar Markov random fields [26, 16] inference and learning involve log-determinants of general non-singular matrices.\nFor a positive semi-definite matrix B ∈ Rd×d, numerical linear algebra experts recommend to compute logdeterminant using the Cholesky decomposition. Suppose the Cholesky decomposition isB = LLT , then log det(B) = 2 ∑ i logLii. The computational complexity of Cholesky decomposition is cubic with respect to the number of variables, i.e., O(d3).1 For large-scale applications involving more than tens of thousands of variables, this operation is not feasible. Our aim in this paper is to compute accurate approximate log-determinants for matrices of much larger size involving tens of millions of variables. ∗Department of Electrical Engineering, Korea Advanced Institute of Science and Technology, Korea. Emails: hawki17@kaist.ac.kr †IBM T. J. Watson Research, Yorktown Heights, NY, USA, Email: dmaliout@gmail.com ‡Department of Electrical Engineering, Korea Advanced Institute of Science and Technology, Korea. Email: jinwoos@kaist.ac.kr 1 For sparse matrices with a small tree-width, the complexity of Cholesky decomposition is cubic in the tree-width.\nar X\niv :1\n50 3.\n06 39\n4v 1\n[ cs\n.D S]\n2 2\nM ar\nContribution. Our approach to compute accurate approximations of log-determinant for a positive definite matrix uses a combination of stochastic trace-estimators and Chebyshev polynomial expansions. Using the Chebyshev polynomials, we first approximate the log-determinant by the trace of power series of the input matrix. We then use a stochastic trace-estimator, called the Hutchison method [14], to estimate the trace using multiplications between the input matrix and random vectors. The main assumption for our method is that the matrix-vector product can be computed efficiently. For example, the time-complexity of the proposed algorithm grows linearly with respect to the number of non-zero entries in the input matrix. We also extend our approach to general non-singular matrices to compute the absolute values of their log-determinants. We establish rigorous additive and multiplicative approximation error bounds for approximating the log-determinant under the proposed algorithm. Our theoretical results provide an analytic understanding on our Chebyshev-Hutchison method depending on sampling number, polynomial degree and the condition number (i.e., the ratio between the largest and smallest singular values) of the input matrix. In particular, they imply that if the condition number is O(1), then the algorithm provides ε-approximation guarantee (in multiplicative or additive) in linear time for any constant ε > 0.\nWe first apply our algorithm to obtain a randomized linear-time approximation scheme for counting the number of spanning trees in a certain class of graphs where it could be used for efficient inference in tree mixture models [20, 1]. We also apply our algorithm for finding maximum likelihood parameter estimates of Gaussian Markov random fields of size 5000× 5000 (involving 25 million variables!), which is infeasible for the Cholesky decomposition. Our experiments show that our proposed algorithm is orders of magnitude faster than the Cholesky decomposition and Schur completion for sparse matrices and provides solutions with 99.9% accuracy in approximation. It can also solve problems of dimension tens of millions in a few minutes on our single commodity computer. Furthermore, the proposed algorithm is very easy to parallelize and hence has a potential to handle even a bigger size. In particular, the Schur method was used as a part of QUIC algorithm [13] for sparse inverse covariance estimation with over million variables, hence our algorithm could be used to further improve its speed and scale.\nRelated work. Stochastic trace estimators have been studied in the literature in a number of applications. [6, 18] have used a stochastic trace estimator to compute the diagonal of a matrix or of matrix inverse. Polynomial approximations to band-pass filters have been used to count the number of eigenvalues in certain intervals [11]. Stochastic approximations of score equations have been applied in [27] to learn large-scale Gaussian processes. The works closest to ours which have used stochastic trace estimators for Gaussian process parameter learning are [33] and [3] which instead use Taylor expansions and Cauchy integral formula, respectively. A recent improved analysis using Taylor expansions has also appeared in [8]. However, as reported in Section 5, our method using Chebyshev expansions provides much better accuracy in experiments than that using Taylor expansions, and [3] need Krylov-subspace linear system solver that is computationally expensive. [22] also use Chebyshev polynomials for log-determinant computation, but the method is deterministic and only applicable to polynomials of small degree. The novelty of our work is combining the Chebyshev approximation with Hutchison trace estimators, which allows us to design a linear-time algorithm with rigorous approximation guarantees.\nOrganization. The structure of the paper is as follows. We introduce the necessary background in Section 2.2, and describe our algorithm with approximation guarantees in Section 3. Section 4 provides the proof of approximation guarantee of our algorithm, and we report experimental results in Section 5."
    }, {
      "heading" : "2 Background",
      "text" : "In this section, we describe the preliminaries for our approach to approximate the log-determinant of a positive definite matrix. Our approach combines the following two techniques: (a) designing a trace-estimator for the log-determinant of positive definite matrix via Chebyshev approximation [19] and (b) approximating the trace of positive definite matrix via Monte Carlo methods, e.g., Hutchison method [14]."
    }, {
      "heading" : "2.1 Chebyshev Approximation",
      "text" : "The Chebyshev approximation technique is used to approximate analytic function with certain orthonormal polynomials. We use pn(x) to denote the Chebyshev approximation of degree n for a given function f : [−1, 1]→ R:\nf(x) ≈ pn(x) = n∑ j=0 cjTj(x),\nwhere the coefficient ci and the i-th Chebyshev polynomial Ti(x) are defined as\nci =  1 n+ 1 n∑ k=0 f(xk) T0(xk) if i = 0 2\nn+ 1 n∑ k=0 f(xk) Ti(xk) otherwise\n(1)\nTi+1(x) = 2xTi(x)− Ti−1(x) for i ≥ 1 (2)\nwhere xk = cos ( π(k+1/2) n+1 ) for k = 0, 1, 2, . . . n and T0(x) = 1, T1(x) = x.\nChebyshev approximation for scalar functions can be naturally generalized to matrix functions. Using the Chebyshev approximation pn(x) for function f(x) = log(1−x) we obtain the following approximation to the log-determinant of a positive definite matrix B ∈ Rd×d:\nlog detB = log det (I −A) = d∑ i=1 log(1− λi)\n≈ d∑ i=1 pn(λi) = d∑ i=1 n∑ j=0 cjTj(λi)\n= n∑ j=0 cj d∑ i=1 Tj(λi) = n∑ j=0 cjtr (Tj (A)) ,\nwhere A = I − B has eigenvalues 0 ≤ λ1, . . . , λd ≤ 1 and the last equality is from the fact that ∑d i=1 p(λi) = tr(p(A)) for any polynomial p.2 We remark that other polynomial approximations, e.g., Taylor, can also be used to approximate log-determinants. We focus on the Chebyshev approximation in this paper due to its superior empirical performance and rigorous error analysis."
    }, {
      "heading" : "2.2 Trace Approximation via Monte-Carlo Method",
      "text" : "The main challenge to compute the log-determinant of a positive definite matrix in the previous section is calculating the trace of Tj (A) efficiently without evaluating the entire matrixAk. We consider a Monte-Carlo approach for estimating the trace of a matrix. First, a random vector z is drawn from some fixed distribution, such that the expectation of z>Az is equal to the trace of A. By sampling m such i.i.d random vectors, and averaging we obtain an estimate of tr(A).\nIt is known that the Hutchinson method, where components of the random vectors Z are i.i.d Rademacher random variables, i.e., Pr(+1) = Pr(−1) = 12 , has the smallest variance among such Monte-Carlo methods [14, 5]. It has been used extensively in many applications [4, 14, 2]. Formally, the Hutchinson trace estimator trm(A) is known to satisfy the following:\nE [ trm(A) := 1\nm m∑ i=1 z>i Azi\n] = tr(A)\n2tr(·) denotes the trace of a matrix.\nVar [trm(A)] = 2\n( ‖A‖2 −\nn∑ i=1 A2ii\n) .\nNote that computing z>Az requires only multiplications between a matrix and a vector, which is particularly appealing when evaluating A itself is expensive, e.g., A = Bk for some matrix B and large k. Furthermore, for the case A = Tj (X), one can compute z>Tj (X) z more efficiently using the following recursion on the vector wj = Tj(X)z:\nwj+1 = 2Xwj − wj−1,\nwhich follows directly from (2)."
    }, {
      "heading" : "3 Log-determinant Approximation Scheme",
      "text" : "Now we are ready to present algorithms to approximate the absolute value of log-determinant of an arbitrary nonsingular square matrixC. Without loss of generality, we assume that singular values ofC are in the interval [σmin, σmax] for some σmin, σmax > 0, i.e., the condition number κ(C) is at most κmax := σmax/σmin. The proposed algorithms are not sensitive to tight knowledge of σmin, σmax, but some loose lower and upper bounds on them, respectively, suffice.\nWe first present a log-determinant approximation scheme for positive definite matrices in Section 3.1 and that for general non-singular ones in Section 3.2 later."
    }, {
      "heading" : "3.1 Algorithm for Positive Definite Matrices",
      "text" : "In this section, we describe our proposed algorithm for estimating the log-determinant of a positive definite matrix whose eigenvalues are less than one, i.e., σmax < 1. It is used as a subroutine for estimating the log-determinant of a general non-singular matrix in the next section. The formal description of the algorithm is given in what follows.\nAlgorithm 1 Log-determinant approximation for positive definite matrices with σmax < 1 Input: positive definite matrix B ∈ Rd×d with eigenvalues in [δ , 1 − δ] for some δ > 0, sampling number m and polynomial degree n Initialize: A← I −B, Γ← 0 for i = 0 to n do ci ← i-th coefficient of Chebyshev approximation for log(1− (1−2δ)x+12 )\nend for for i = 1 to m do\nDraw a Rademacher random vector v and u← c0 v if n > 1 then\nw0 ← v and w1 ← Av u← u + c1Av for j = 2 to n do w2 ← 2Aw1 −w0 u← u + cj w2 w0 ← w1 and w1 ← w2\nend for end if Γ← Γ + v>u/m\nend for Output: Γ\nWe establish the following theoretical guarantee of the above algorithm, where its proof is given in Section 4.3.\nTheorem 1 Given ε, ζ ∈ (0, 1), consider the following inputs for Algorithm 1:\n• B ∈ Rd×d be a positive definite matrix with eigenvalues in [δ, 1− δ] for some δ ∈ (0, 1/2). • m ≥ 54ε−2 log (\n2 ζ ) • n ≥ log ( 20 ε (√ 2 δ−1−1 ) log(2(1/δ−1)) log (1/1−δ) ) log (√ 2−δ+ √ δ√\n2−δ− √ δ ) = O (√ 1δ log ( 1εδ )) Then, it follows that\nPr [ |log detB − Γ| ≤ ε |log detB| ] ≥ 1− ζ\nwhere Γ is the output of Algorithm 1.\nThe bound on polynomial degree n in the above theorem is relatively tight, e.g., it implies to choose n = 14 for δ = 0.1 and ε = 0.01. However, our bound on sampling number m is not, where we observe that m ≈ 30 is sufficient for high accuracy in our experiments. We also remark that the time-complexity of Algorithm 1 is O(mn‖B‖0), where ‖B‖0 is the number of non-zero entries of B. This is because the algorithm requires only multiplications of matrices and vectors. In particular, if m,n = O(1), the complexity is linear with respect to the input size. Therefore, Theorem 1 implies that one can choose m,n = O(1) for ε-multiplicative approximation with probability 1− ζ given constants ε, ζ > 0."
    }, {
      "heading" : "3.2 Algorithm for General Non-Singular Matrices",
      "text" : "Now, we are ready to present our linear-time approximation scheme for the log-determinant of general non-singular matrix C, through generalizing the algorithm in the previous section. The idea is simple: run Algorithm 1 with normalization of positive definite matrix CTC. This is formally described in what follows.\nAlgorithm 2 Log-determinant approximation for general non-singular matrices Input: matrix C ∈ Rd×d with singular values are in the interval [σmin, σmax] for some σmin, σmax > 0, sampling number m and polynomial degree n\nInitialize: B ← 1 σ2min+σ 2 max\nCTC, δ ← σ 2 min\nσ2min+σ 2 max\nΓ← Output of Algorithm 1 for inputs B,m, n, δ Output: Γ← ( Γ + d log (σ2min + σ 2 max) ) /2\nAlgorithm 2 is motivated to design from the equality log |detC| = 12 log detC TC. Given non-singular matrix C, one need to choose appropriate σmax, σmin to run it. In most applications, σmax is easy to choose, e.g., one can choose\nσmax = √ ‖C‖1‖C‖∞,\nor one can run the power iteration [15] to estimate a better bound. On the other hand, σmin is relatively not easy to obtain depending on problems. It is easy to obtain in the problem of counting spanning trees we studied in Section 3.3, and it is explicitly given as a parameter in many machine learning log-determinant applications [31]. In general, one can use the inverse power iteration [15] to estimate it. Furthermore, the smallest singular value is easy to compute for random matrices [29, 28] and diagonal-dominant matrices [12, 21].\nThe time-complexity of Algorithm 2 is still O(mn‖C‖0) instead of O(mn‖CTC‖0) since Algorithm 1 requires multiplication of matrix CTC and vectors. We state the following additive error bound of the above algorithm.\nTheorem 2 Given ε, ζ ∈ (0, 1), consider the following inputs for Algorithm 2:\n• C ∈ Rd×d be a matrix such that singular values are in the interval [σmin, σmax] for some σmin, σmax > 0. • m ≥M ( ε, σmaxσmin , ζ ) and n ≥ N ( ε, σmaxσmin ) , where\nM(ε, κ, ζ) := 14 ε2 ( log ( 1 + κ2 ))2 log 2 ζ\nN (ε, κ) := log ( 20 ε (√ 2κ2 + 1− 1 ) log (1+κ2) log(2κ2) log(1+κ−2) ) log (√\n2κ2+1+1√ 2κ2+1−1\n) = O (κ log κ ε ) Then, it follows that\nPr [ |log (|detC|)− Γ| ≤ εd ] ≥ 1− ζ\nwhere Γ is the output of Algorithm 2.\nProof. The proof of Theorem 2 is quite straightforward using Theorem 1 for B with the facts that\n2 log |detC| = log detB + d log (σ2min + σ2max)\nand | log detB| ≤ d log (\n1 + σ2max σ2min\n) .\nWe remark that the condition number σmax/σmin decides the complexity of Algorithm 2. As one can expect, the approximation quality and algorithm complexity become worse for matrices with very large condition numbers, as the Chebyshev approximation for the function log x near the point 0 is more challenging and requires higher degree approximations.\nWhen σmax ≥ 1 and σmin ≤ 1, i.e. we have mixed signs for logs of the singular values, a multiplicative error bound (as stated in Theorem 1) can not be obtained since the log-determinant can be zero in the worst case. On the other hand, when σmax < 1 or σmin > 1, we further show that the above algorithm achieves an ε-multiplicative approximation guarantee, as stated in the following corollaries.\nCorollary 3 Given ε, ζ ∈ (0, 1), consider the following inputs for Algorithm 2:\n• C ∈ Rd×d be a matrix such that singular values are in the interval [σmin, σmax] for some σmax < 1. • m ≥M ( ε log 1σmax , σmax σmin , ζ )\n• n ≥ N ( ε log 1σmax , σmax σmin ) Then, it follows that\nPr [ |log |detC| − Γ| ≤ ε |log |detC||] ≥ 1− ζ\nwhere Γ is the output of Algorithm 2.\nCorollary 4 Given ε, ζ ∈ (0, 1), consider the following inputs for Algorithm 2:\n• C ∈ Rd×d be a matrix such that singular values are in the interval [σmin, σmax] for some σmin > 1. • m ≥M ( ε log σmin,\nσmax σmin\n, ζ )\n• n ≥ N ( ε log σmin,\nσmax σmin ) Then, it follows that\nPr [ |log detC − Γ| ≤ ε log detC] ≥ 1− ζ\nwhere Γ is the output of Algorithm 2.\nThe proofs of the above corollaries are given in the supplementary material due to the space limitation."
    }, {
      "heading" : "3.3 Application to Counting Spanning Trees",
      "text" : "We apply Algorithm 2 to a concrete problem, where we study counting the number of spanning trees in a simple undirected graph G = (V,E) where there exists a vertex i∗ such that (i∗, j) ∈ E for all j ∈ V \\ {i∗}. Counting spanning trees is one of classical well-studied counting problems, and also necessary in machine learning applications, e.g., tree mixture models [20, 1]. We denote the maximum and average degrees of vertices in V \\ {i∗} by ∆max and ∆avg > 1, respectively. In addition, we let L(G) denote the Laplacian matrix ofG. Then, from Kirchhoff’s matrix-tree theorem, the number of spanning tree τ(G) is equal to\nτ(G) = detL(i∗),\nwhere L(i∗) is the (|V | − 1) × (|V | − 1) sub matrix of L(G) that is obtained by eliminating the row and column corresponding to i∗. Now, it is easy to check that eigenvalues of L(i∗) are in [1, 2∆max − 1]. Under these observations, we derive the following corollary.\nCorollary 5 Given 0 < ε < 2∆avg−1 , ζ ∈ (0, 1), consider the following inputs for Algorithm 2:\n• C = L(i∗) • m ≥M ( ε(∆avg−1) 4 , 2∆max − 1, ζ )\n• n ≥ N ( ε(∆avg−1) 4 , 2∆max − 1 )\nThen, it follows that"
    }, {
      "heading" : "Pr [| log τ(G)− Γ| ≤ ε log τ(G)] ≥ 1− ζ",
      "text" : "where Γ is the output of Algorithm 2.\nThe proof of the above corollary is given in the supplementary material due to the space limitation. We remark that the running time of Algorithm 2 with inputs in the above theorem is O(nm∆avg|V |). Therefore, for ε, ζ = Ω(1) and ∆avg = O(1), i.e., G is sparse, one can choose n,m = O(1) so that the running time of Algorithm 2 is O(|V |)."
    }, {
      "heading" : "4 Proof of Theorem 1",
      "text" : "In order to prove Theorem 1, we first introduce some necessary background and lemmas on error bounds of Chebyshev approximation and Hutchinson method we introduced in Section 2.1 and Section 2.2, respectively."
    }, {
      "heading" : "4.1 Convergence Rate for Chebyshev Approximation",
      "text" : "Intuitively, one can expect that the approximated Chebyshev polynomial converges to its original function as degree n goes to∞. Formally, the following error bound is known [7, 32].\nTheorem 6 Suppose f is analytic with |f(z)| ≤ M in the region bounded by the ellipse with foci ±1 and major and minor semiaxis lengths summing to K > 1. Let pn denote the interpolant of f of degree n in th Chebyshev points as defined in section 2.1, then for each n ≥ 0,\nmax x∈[−1,1]\n|f(x)− pn(x)| ≤ 4M\n(K − 1)Kn\nTo prove Theorem 1 and Theorem 2, we are in particular interested in\nf(x) = log(1− x), for x ∈ [δ, 1− δ].\nSince Chebyshev approximation is defined in the interval [−1, 1], e.g., see Section 2.1, one can use the following linear mapping g : [δ, 1− δ]→ [−1, 1] so that\nmax x∈[−1,1]\n|(f ◦ g)(x)− pn(x)|\n= max x∈[δ,1−δ] ∣∣f (x)− (pn ◦ g−1)(x)∣∣ For notational convenience, we use pn(x) to denote (pn ◦ g−1)(x) in what follows.\nWe choose the ellipse region, denoted by EK , in the complex plane with foci ±1 and its semimajor axis length is 1/(1−δ) where f◦g is analytic on and inside. The length of semimajor axis of the ellipse is equal to √ (1/(1− δ))2 − 1. Hence, the convergence rate K can be set to\nK = 1\n1− δ +\n√( 1\n1− δ\n)2 − 1 = √ 2− δ + √ δ\n√ 2− δ − √ δ > 1\nThe constant M can be also obtained using the fact that |log z| = |log |z|+ i arg (z)| ≤ √\n(log |z|)2 + π2 for any z ∈ C as follows:\nmax z∈EK |(f ◦ g)(z)| = max z∈EK |(f ◦ g)(z)| = max z∈EK |log (1− g(z))|\n≤ max z∈EK\n√ (log |1− g(z)|)2 + π2\n= √ log2 ( 2 ( 1 δ − 1 )) + π2 ≤ 5 log ( 2 ( 1 δ − 1 )) := M.\nHence, for x ∈ [δ, 1− δ],\n|log (1− x)− pn(x)| ≤ 20 log\n( 2 (\n1 δ − 1 )) (K − 1)Kn\nUnder these observations, we establish the following lemma that is a ‘matrix version’ of Theorem 6.\nLemma 7 Let B ∈ Rd×d be a positive definite matrix whose eigenvalues are in [δ, 1 − δ] for δ ∈ (0, 1/2). Then, it holds that ∣∣ log detB − tr(pn(I −B))∣∣ ≤ 20d log (2 ( 1δ − 1))\n(K − 1)Kn\nwhere K = √ 2−δ+ √ δ√\n2−δ− √ δ .\nProof. Let λ1, λ2, · · · , λd ∈ [δ, 1− δ] be eigenvalues of matrix A = I −B. Then, we have\n|log det(I −A)− tr (pn(A))| = |tr (log(I −A))− tr (pn(A))|\n= ∣∣∣∣∣ d∑ i=1 log(1− λi)− d∑ i=1 pn(λi) ∣∣∣∣∣ ≤\nd∑ i=1 |log(1− λi)− pn(λi)|\n≤ d∑ i=1\n20 log ( 2 (\n1 δ − 1 )) (K − 1)Kn\nwhere we use Theorem 6. This completes the proof of Lemma 7."
    }, {
      "heading" : "4.2 Approximation Error of Hutchinson Method",
      "text" : "In this section, we use the same notation, e.g., f, pn, used in the previous section and we analyze the Hutchinson’s trace estimator trm(·) defined in Section 2.2. To begin with, we state the following theorem that is proven in [24].\nTheorem 8 Let A ∈ Rd×d be a positive definite or negative definite matrix. Given ε0, ζ0 ∈ (0, 1), it holds that\nPr [|trm(A)− tr(A)| ≤ ε0 tr(A)] ≥ 1− ζ0\nif sampling number m is no smaller than 6 ε−20 log(2/ζ0).\nThe theorem above provides a lower-bound on the sampling complexity of Hutchinson method, which is independent of a given matrix A. To prove Theorem 1, we need an error bound on trm(pn(A)). However, in general we may not know whether or not pn(A) is positive definite or negative definite. We can guarantee that the eigenvalues of pn(A) will be negative using the following lemma.\nLemma 9 pn(x) is a negative-valued polynomial in the interval [δ, 1− δ] if\n20 log ( 2 (\n1 δ − 1 )) (K − 1)Kn ≤ log ( 1 1− δ ) where we recall that K = √ 2−δ+ √ δ√\n2−δ− √ δ .\nProof. From Theorem 6, we have\nmax [δ,1−δ] pn(x) = max [δ,1−δ]\nf(x) + (pn(x)− f(x))\n≤ max [δ,1−δ] f(x) + max [δ,1−δ] |pn(x)− f(x)|\n≤ log (1− δ) + 20 log\n( 2( 1δ − 1) ) (K − 1)Kn ≤ 0,\nwhere we use 20 log(2(1/δ−1))(K−1)Kn ≤ − log(1− δ). This completes the proof of Lemma 9."
    }, {
      "heading" : "4.3 Proof of the Theorem 1",
      "text" : "Now we are ready to prove Theorem 1. First, one can check that sampling number n in the condition of Theorem 1 satisfies\n20 log ( 2( 1δ − 1) ) (K − 1)Kn ≤ ε 2 log ( 1 1− δ ) . (3)\nHence, from Lemma 9, it follows that pn(A) is negative definite whereA = I−B and eigenvalues ofB are in [δ, 1−δ]. Hence, we can apply Theorem 8 as\nPr [ |tr (pn(A))− trm (pn(A))| ≤ ε\n3 |tr (pn(A))|\n] ≥ 1− ζ, (4)\nfor m ≥ 54ε−2 log (\n2 ζ\n) . In addition, from Theorem 7, we have\n|tr (pn(A))| − |log detB| ≤ |log detB − tr (pn(A))|\n≤ 20d log (2(1/δ − 1)) (K − 1)Kn\n≤ ε 2 d log\n( 1\n1− δ\n) ≤ ε\n2 |log detB| ,\nwhich implies that\n|tr (pn(A))| ≤ (ε 2 + 1 ) |log detB| ≤ 3 2 |log detB| . (5)\nCombining (3), (4) and (5) leads to the conclusion of Theorem 1 as follows: 1− ζ ≤ Pr [ |tr (pn(A))− trm (pn(A))| ≤ ε\n3 |tr (pn(A))| ] ≤ Pr [ |tr (pn(A))− trm (pn(A))| ≤ ε\n2 |log detB| ] ≤ Pr[|tr (pn(A))− trm (pn(A))|+ | log detB − tr (pn(A)) |\n≤ ε 2 |log detB|+ ε 2 |log detB|]\n≤ Pr [|log detB − trm (pn(A))| ≤ ε |log detB|] = Pr [|log detB − Γ| ≤ ε |log detB|] ,\nwhere Γ = trm (pn(A))."
    }, {
      "heading" : "5 Experiments",
      "text" : "We now study our proposed algorithm on numerical experiments with simulated and real data."
    }, {
      "heading" : "5.1 Performance Evaluation and Comparison",
      "text" : "We first investigate the empirical performance of our proposed algorithm on large sparse random matrices. We generate a random matrix C ∈ Rd×d, where the number of non-zero entries per each row is around 10. We first select five nonzero off-diagonal entries in each row with values uniformly distributed in [−1, 1]. To make the matrix symmetric, we set the entries in transposed positions to the same values. Finally, to guarantee positive definiteness, we set its diagonal entries to absolute row-sums and add a small weight, 10−3.\nFigure 1 (a) shows the running time of Algorithm 2 from d = 103 to 3× 107, where we choose m = 10, n = 15, σmin = 10\n−3 and σmax = ‖C‖1. It scales roughly linearly over a large range of sizes. We use a machine with 3.40 Ghz Intel I7 processor with 24 GB RAM. It takes only 500 seconds for a matrix of size 3× 107 with 3× 108 non-zero entries. In Figure 1 (b), we study the relative accuracy compared to the exact log-determinant computation up-to size 3× 104. Relative errors are very small, below 0.1%, and appear to only improve for higher dimensions.\nUnder the same setup, we also compare the running time of our algorithm with other algorithm for computing determinants: Cholesky decomposition and Schur complement. The latter was used for sparse inverse covariance\nestimation with over a million variables [13] and we run the code implemented by the authors. The running time of the algorithms are reported in Figure 1 (c). The proposed algorithm is dramatically faster than both exact algorithms. We also compare the accuracy of our algorithm to a related stochastic algorithm that uses Taylor expansions [33]. For a fair comparison we use a large number of samples, n = 1000, for both algorithms to focus on the polynomial approximation errors. The results are reported in Figure 1 (d), showing that our algorithm using Chebyshev expansions is superior in accuracy compared to the one based on Taylor series."
    }, {
      "heading" : "5.2 Maximum Likelihood Estimation for GMRF",
      "text" : "GMRF with 25 million variables for synthetic data. We now apply our proposed algorithm for maximum likelihood (ML) estimation in Gaussian Markov Random Fields (GMRF) [25]. GMRF is a multi-variate joint Gaussian distribution defined with respect to a graph. Each node of the graph corresponds to a random variable in the Gaussian distribution, where the graph captures the conditional independence relationships (Markov properties) among the random variables. The model has been extensively used in many applications in computer vision, spatial statistics, and other fields. The inverse covariance matrix J (also called information or precision matrix) is positive definite and sparse: Jij is non-zero only if the edge {i, j} is contained in the graph.\nWe first consider a GMRF on a square grid of size 5000 × 5000 (with d = 25 million variables) with precision matrix J ∈ Rd×d parameterized by ρ, i.e., each node has four neighbors with partial correlation ρ. We generate a sample x from the GMRF model (using Gibbs sampler) for parameter ρ = −0.22. The log-likelihood of the sample is: log p(x|ρ) = log det J(ρ) − x>J(ρ)x + G, where J(ρ) is a matrix of dimension 25 × 106 and 108 non-zero entries, and G is a constant independent of ρ. We use Algorithm 2 to estimate the log-likelihood as a function of ρ, as reported in Figure 3. The estimated log-likelihood is maximized at the correct (hidden) value ρ = −0.22.\nGMRF with 6 million variables for Ozone data. We also consider GMRF parameter estimation from real spatial data with missing values. We use the data-set from [3] that provides satellite measurements of Ozone levels over the entire earth following the satellite tracks. We use a resolution of 0.1 degrees in lattitude and longitude, giving a spatial field of size 1681 × 3601, with over 6 million variables. The data-set includes 172 thousands measurements. To estimate the log-likelihood in presence of missing values, we use the Schur-complement formula for determinants.\nLet the precision matrix for the entire field be J = ( Jo Jo,z Jz,o Jz ) , where subsets xo and xz denote the observed and unobserved components of x. The marginal precision matrix of xo is J̄o = Jo − Jo,zJ−1z Jz,o. Its log-determinant is computed as log(det(J̄o)) = log det(J)− log det(Jz) via Schur complements. To evaluate the quadratic term x′oJ̄oxo of the log-likelihood we need a single linear solve using an iterative solver. We use a linear combination of the thinplate model and the thin-membrane models [25], with two parameters α and β: J = αI + (β)Jtp + (1 − β)Jtm and\nobtain ML estimates using Algorithm 2. Note that σmin(J) = α. We show the sparse measurements in Figure 2 (a) and the GMRF interpolation using fitted values of parameters in Figure 2 (b)."
    }, {
      "heading" : "6 Conclusion",
      "text" : "Tools from numerical linear algebra, e.g. determinants, matrix inversion and linear solvers, eigenvalue computation and other matrix decompositions, have been playing an important theoretical and computational role for machine learning applications. While most matrix computations admit polynomial-time algorithms, they are often infeasible for largescale or high-dimensional data-sets. In this paper, we design and analyze a high accuracy linear-time approximation algorithm for the logarithm of matrix determinants, where its exact computation requires cubic-time. Furthermore, it is very easy to parallelize since it requires only (separable) matrix-vector multiplications. We believe that the proposed algorithm will find numerous applications in machine learning problems."
    }, {
      "heading" : "Acknowledgement",
      "text" : "We would like to thank Haim Avron and Jie Chen for fruitful comments on Chebyshev approximations, and Cho-Jui Hsieh for providing the code for Shur complement-based log-det computation."
    }, {
      "heading" : "A Proof of Corollary 3",
      "text" : "For given ε < 2log(σ2max) , set ε0 = ε 2 log\n( 1\nσ2max\n) . Since all eigenvalues of CTC are positive and less than 1, it follows\nthat\n∣∣log det (CTC)∣∣ = ∣∣∣∣∣ d∑ i=1 log λi ∣∣∣∣∣ ≥ d log ( 1 σ2max ) where λi are i-th eigenvalues of CTC. Thus,\nε0 = ε\n2 log\n( 1\nσ2max\n) ≤ ε\n2 ∣∣log detCTC∣∣ d = ε |log (|detC|)| d\nWe use ε0 instead of ε from Theorem 2, then following\nPr [ |log (|detC|)− Γ| ≤ ε |log (|detC|)| ] ≥ 1− ζ\nholds if m and n satifies below condition."
    }, {
      "heading" : "B Proof of Corollary 4",
      "text" : "Similar to proof of Corollary 3, set ε0 = ε2 log σ 2 min. Since eigenvalues of C\nTC are greater than 1,∣∣log det (CTC)∣∣ ≥ d log σ2min and ε0 ≤ ε |log(| detC|)|d . From Theorem 2, we substitute ε0 into ε and\nPr [ |log detC − Γ| ≤ ε |log detC| ] ≥ 1− ζ\nholds if m and n satifies below condition."
    }, {
      "heading" : "C Proof of Corollary 5",
      "text" : "For ε0 = ε(∆avg − 1)/2, ζ ∈ (0, 1), Theorem 2 provides the following inequality:"
    }, {
      "heading" : "Pr (| log detL(i∗)− Γ| ≤ ε0(|V | − 1)) ≥ 1− ζ.",
      "text" : "Observe that since vertex i∗ is connected all other vertices, the number of spanning tree, i.e., detL(i∗), is greater than 2(|V |−1)(∆avg−1)/2. Hence, we have\nPr (| log detL(i∗)− Γ| ≤ ε0(|V | − 1)) ≤ Pr (| log detL(i∗)− Γ| ≤ ε log detL(i∗)) .\nThis completes the proof of Corollary 5."
    } ],
    "references" : [ {
      "title" : "Learning mixtures of tree graphical models",
      "author" : [ "A. Anandkumar", "F. Huang", "D.J. Hsu", "S.M. Kakade" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2012
    }, {
      "title" : "Robust inversion, dimensionality reduction, and randomized sampling",
      "author" : [ "A. Aravkin", "M.P. Friedlander", "F.J. Herrmann", "T. Van Leeuwen" ],
      "venue" : "Mathematical Programming,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2012
    }, {
      "title" : "Parameter estimation in high dimensional gaussian distributions",
      "author" : [ "E. Aune", "D.P. Simpson", "J. Eidsvik" ],
      "venue" : "Statistics and Computing,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2014
    }, {
      "title" : "Counting triangles in large graphs using randomized matrix trace estimation",
      "author" : [ "H. Avron" ],
      "venue" : "In Workshop on Largescale Data Mining: Theory and Applications,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2010
    }, {
      "title" : "Randomized algorithms for estimating the trace of an implicit symmetric positive semi-definite matrix",
      "author" : [ "H. Avron", "S. Toledo" ],
      "venue" : "Journal of the ACM,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2011
    }, {
      "title" : "An estimator for the diagonal of a matrix",
      "author" : [ "C Bekas", "E Kokiopoulou", "Y. Saad" ],
      "venue" : "Applied numerical mathematics,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2007
    }, {
      "title" : "Barycentric lagrange interpolation",
      "author" : [ "J.P. Berrut", "L.N. Trefethen" ],
      "venue" : "SIAM Review,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2004
    }, {
      "title" : "A randomized algorithm for approximating the log determinant of a symmetric positive definite matrix",
      "author" : [ "Boutsidis", "Christos", "Drineas", "Petros", "Kambadur", "Prabhanjan", "Zouzias", "Anastasios" ],
      "venue" : "arXiv preprint arXiv:1503.00374,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2015
    }, {
      "title" : "Information-theoretic metric learning",
      "author" : [ "J.V. Davis", "B. Kulis", "P. Jain", "S. Sra", "I.S. Dhillon" ],
      "venue" : "In ICML,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2007
    }, {
      "title" : "Efficient estimation of eigenvalue counts in an interval",
      "author" : [ "E. Di Napoli", "E. Polizzi", "Y. Saad" ],
      "venue" : "arXiv preprint arXiv:1308.4275,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2013
    }, {
      "title" : "Uber die abgrenzung der eigenwerte einer matrix",
      "author" : [ "Gershgorin", "Semyon Aranovich" ],
      "venue" : null,
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 1931
    }, {
      "title" : "BIG & QUIC: Sparse inverse covariance estimation for a million variables",
      "author" : [ "C.J. Hsieh", "M.A. Sustik", "I.S. Dhillon", "P.K. Ravikumar", "R. Poldrack" ],
      "venue" : "In Adv. in Neural Information Processing Systems,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2013
    }, {
      "title" : "A stochastic estimator of the trace of the influence matrix for laplacian smoothing splines",
      "author" : [ "M.F. Hutchinson" ],
      "venue" : "Communications in Statistics-Simulation and Computation,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 1989
    }, {
      "title" : "Computing an eigenvector with inverse iteration",
      "author" : [ "Ipsen", "Ilse CF" ],
      "venue" : "SIAM review,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 1997
    }, {
      "title" : "Learning planar ising models",
      "author" : [ "J.K. Johnson", "P. Netrapalli", "M. Chertkov" ],
      "venue" : "preprint arXiv:1011.3494,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2010
    }, {
      "title" : "Information theory, inference, and learning algorithms",
      "author" : [ "D.J.C. MacKay" ],
      "venue" : null,
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2003
    }, {
      "title" : "Low-rank variance estimation in large-scale gmrf models",
      "author" : [ "D.M. Malioutov", "J.K. Johnson", "A.S. Willsky" ],
      "venue" : "In IEEE Int. Conf. on Acoustics, Speech and Signal Processing, 2006.,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2006
    }, {
      "title" : "Learning with mixtures of trees",
      "author" : [ "M. Meila", "M.I. Jordan" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2001
    }, {
      "title" : "Bounds for norms of the matrix inverse and the smallest singular value",
      "author" : [ "N. Morača" ],
      "venue" : "Linear Algebra and its Applications,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2008
    }, {
      "title" : "Chebyshev approximation of log-determinants of spatial weight matrices",
      "author" : [ "R.K. Pace", "J.P. LeSage" ],
      "venue" : "Computational Statistics & Data Analysis,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2004
    }, {
      "title" : "Gaussian processes for machine learning",
      "author" : [ "C.E. Rasmussen", "C.K. Williams" ],
      "venue" : "MIT press,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2005
    }, {
      "title" : "Improved bounds on sample size for implicit matrix trace estimators",
      "author" : [ "F. Roosta-Khorasani", "U. Ascher" ],
      "venue" : "arXiv preprint arXiv:1308.2475,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2013
    }, {
      "title" : "Gaussian Markov random fields: theory and applications",
      "author" : [ "H. Rue", "L. Held" ],
      "venue" : "CRC Press,",
      "citeRegEx" : "25",
      "shortCiteRegEx" : "25",
      "year" : 2005
    }, {
      "title" : "Efficient exact inference in planar ising models",
      "author" : [ "N.N. Schraudolph", "D. Kamenetsky" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "26",
      "shortCiteRegEx" : "26",
      "year" : 2009
    }, {
      "title" : "Stochastic approximation of score functions for gaussian processes",
      "author" : [ "M.L. Stein", "J. Chen", "M. Anitescu" ],
      "venue" : "The Annals of Applied Statistics,",
      "citeRegEx" : "27",
      "shortCiteRegEx" : "27",
      "year" : 2013
    }, {
      "title" : "Random matrices: The distribution of the smallest singular values",
      "author" : [ "T. Tao", "V. Vu" ],
      "venue" : "Geometric And Functional Analysis,",
      "citeRegEx" : "28",
      "shortCiteRegEx" : "28",
      "year" : 2010
    }, {
      "title" : "Inverse littlewood-offord theorems and the condition number of random discrete matrices",
      "author" : [ "T. Tao", "V.H. Vu" ],
      "venue" : "Annals of Mathematics,",
      "citeRegEx" : "29",
      "shortCiteRegEx" : "29",
      "year" : 2009
    }, {
      "title" : "Minimum volume ellipsoid",
      "author" : [ "S. Van Aelst", "P. Rousseeuw" ],
      "venue" : "Wiley Interdisciplinary Reviews: Computational Statistics,",
      "citeRegEx" : "30",
      "shortCiteRegEx" : "30",
      "year" : 2009
    }, {
      "title" : "Log-determinant relaxation for approximate inference in discrete markov random fields",
      "author" : [ "M.J. Wainwright", "M.I. Jordan" ],
      "venue" : "Signal Processing, IEEE Trans. on,",
      "citeRegEx" : "31",
      "shortCiteRegEx" : "31",
      "year" : 2006
    }, {
      "title" : "Error bounds for approximation in chebyshev points",
      "author" : [ "Xiang", "Shuhuang", "Chen", "Xiaojun", "Wang", "Haiyong" ],
      "venue" : "Numerische Mathematik,",
      "citeRegEx" : "32",
      "shortCiteRegEx" : "32",
      "year" : 2010
    }, {
      "title" : "Approximate implementation of the logarithm of the matrix determinant in gaussian process regression",
      "author" : [ "Y. Zhang", "W.E. Leithead" ],
      "venue" : "Journal of Statistical Computation and Simulation,",
      "citeRegEx" : "33",
      "shortCiteRegEx" : "33",
      "year" : 2007
    } ],
    "referenceMentions" : [ {
      "referenceID" : 22,
      "context" : "For example, serving as the normalization constant for multivariate Gaussian models, log-determinants of covariance (and precision) matrices play an important role in inference, model selection and learning both the structure and the parameters for Gaussian Graphical models and Gaussian processes [25, 23, 10].",
      "startOffset" : 298,
      "endOffset" : 310
    }, {
      "referenceID" : 20,
      "context" : "For example, serving as the normalization constant for multivariate Gaussian models, log-determinants of covariance (and precision) matrices play an important role in inference, model selection and learning both the structure and the parameters for Gaussian Graphical models and Gaussian processes [25, 23, 10].",
      "startOffset" : 298,
      "endOffset" : 310
    }, {
      "referenceID" : 15,
      "context" : "Log-determinants also play an important role in a variety of Bayesian machine learning problems, including sampling and variational inference [17].",
      "startOffset" : 142,
      "endOffset" : 146
    }, {
      "referenceID" : 8,
      "context" : "In addition, metric and kernel learning problems attempt to learn quadratic forms adapted to the data, and formulations involving Bregman divergences of log-determinants have become very popular [9, 30].",
      "startOffset" : 195,
      "endOffset" : 202
    }, {
      "referenceID" : 27,
      "context" : "In addition, metric and kernel learning problems attempt to learn quadratic forms adapted to the data, and formulations involving Bregman divergences of log-determinants have become very popular [9, 30].",
      "startOffset" : 195,
      "endOffset" : 202
    }, {
      "referenceID" : 17,
      "context" : ", tree mixture models [20, 1] and Markov random fields [31].",
      "startOffset" : 22,
      "endOffset" : 29
    }, {
      "referenceID" : 0,
      "context" : ", tree mixture models [20, 1] and Markov random fields [31].",
      "startOffset" : 22,
      "endOffset" : 29
    }, {
      "referenceID" : 28,
      "context" : ", tree mixture models [20, 1] and Markov random fields [31].",
      "startOffset" : 55,
      "endOffset" : 59
    }, {
      "referenceID" : 23,
      "context" : "In planar Markov random fields [26, 16] inference and learning involve log-determinants of general non-singular matrices.",
      "startOffset" : 31,
      "endOffset" : 39
    }, {
      "referenceID" : 14,
      "context" : "In planar Markov random fields [26, 16] inference and learning involve log-determinants of general non-singular matrices.",
      "startOffset" : 31,
      "endOffset" : 39
    }, {
      "referenceID" : 12,
      "context" : "We then use a stochastic trace-estimator, called the Hutchison method [14], to estimate the trace using multiplications between the input matrix and random vectors.",
      "startOffset" : 70,
      "endOffset" : 74
    }, {
      "referenceID" : 17,
      "context" : "We first apply our algorithm to obtain a randomized linear-time approximation scheme for counting the number of spanning trees in a certain class of graphs where it could be used for efficient inference in tree mixture models [20, 1].",
      "startOffset" : 226,
      "endOffset" : 233
    }, {
      "referenceID" : 0,
      "context" : "We first apply our algorithm to obtain a randomized linear-time approximation scheme for counting the number of spanning trees in a certain class of graphs where it could be used for efficient inference in tree mixture models [20, 1].",
      "startOffset" : 226,
      "endOffset" : 233
    }, {
      "referenceID" : 11,
      "context" : "In particular, the Schur method was used as a part of QUIC algorithm [13] for sparse inverse covariance estimation with over million variables, hence our algorithm could be used to further improve its speed and scale.",
      "startOffset" : 69,
      "endOffset" : 73
    }, {
      "referenceID" : 5,
      "context" : "[6, 18] have used a stochastic trace estimator to compute the diagonal of a matrix or of matrix inverse.",
      "startOffset" : 0,
      "endOffset" : 7
    }, {
      "referenceID" : 16,
      "context" : "[6, 18] have used a stochastic trace estimator to compute the diagonal of a matrix or of matrix inverse.",
      "startOffset" : 0,
      "endOffset" : 7
    }, {
      "referenceID" : 9,
      "context" : "Polynomial approximations to band-pass filters have been used to count the number of eigenvalues in certain intervals [11].",
      "startOffset" : 118,
      "endOffset" : 122
    }, {
      "referenceID" : 24,
      "context" : "Stochastic approximations of score equations have been applied in [27] to learn large-scale Gaussian processes.",
      "startOffset" : 66,
      "endOffset" : 70
    }, {
      "referenceID" : 30,
      "context" : "The works closest to ours which have used stochastic trace estimators for Gaussian process parameter learning are [33] and [3] which instead use Taylor expansions and Cauchy integral formula, respectively.",
      "startOffset" : 114,
      "endOffset" : 118
    }, {
      "referenceID" : 2,
      "context" : "The works closest to ours which have used stochastic trace estimators for Gaussian process parameter learning are [33] and [3] which instead use Taylor expansions and Cauchy integral formula, respectively.",
      "startOffset" : 123,
      "endOffset" : 126
    }, {
      "referenceID" : 7,
      "context" : "A recent improved analysis using Taylor expansions has also appeared in [8].",
      "startOffset" : 72,
      "endOffset" : 75
    }, {
      "referenceID" : 2,
      "context" : "However, as reported in Section 5, our method using Chebyshev expansions provides much better accuracy in experiments than that using Taylor expansions, and [3] need Krylov-subspace linear system solver that is computationally expensive.",
      "startOffset" : 157,
      "endOffset" : 160
    }, {
      "referenceID" : 19,
      "context" : "[22] also use Chebyshev polynomials for log-determinant computation, but the method is deterministic and only applicable to polynomials of small degree.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 12,
      "context" : ", Hutchison method [14].",
      "startOffset" : 19,
      "endOffset" : 23
    }, {
      "referenceID" : 12,
      "context" : ", Pr(+1) = Pr(−1) = 12 , has the smallest variance among such Monte-Carlo methods [14, 5].",
      "startOffset" : 82,
      "endOffset" : 89
    }, {
      "referenceID" : 4,
      "context" : ", Pr(+1) = Pr(−1) = 12 , has the smallest variance among such Monte-Carlo methods [14, 5].",
      "startOffset" : 82,
      "endOffset" : 89
    }, {
      "referenceID" : 3,
      "context" : "It has been used extensively in many applications [4, 14, 2].",
      "startOffset" : 50,
      "endOffset" : 60
    }, {
      "referenceID" : 12,
      "context" : "It has been used extensively in many applications [4, 14, 2].",
      "startOffset" : 50,
      "endOffset" : 60
    }, {
      "referenceID" : 1,
      "context" : "It has been used extensively in many applications [4, 14, 2].",
      "startOffset" : 50,
      "endOffset" : 60
    }, {
      "referenceID" : 13,
      "context" : "σmax = √ ‖C‖1‖C‖∞, or one can run the power iteration [15] to estimate a better bound.",
      "startOffset" : 54,
      "endOffset" : 58
    }, {
      "referenceID" : 28,
      "context" : "3, and it is explicitly given as a parameter in many machine learning log-determinant applications [31].",
      "startOffset" : 99,
      "endOffset" : 103
    }, {
      "referenceID" : 13,
      "context" : "In general, one can use the inverse power iteration [15] to estimate it.",
      "startOffset" : 52,
      "endOffset" : 56
    }, {
      "referenceID" : 26,
      "context" : "Furthermore, the smallest singular value is easy to compute for random matrices [29, 28] and diagonal-dominant matrices [12, 21].",
      "startOffset" : 80,
      "endOffset" : 88
    }, {
      "referenceID" : 25,
      "context" : "Furthermore, the smallest singular value is easy to compute for random matrices [29, 28] and diagonal-dominant matrices [12, 21].",
      "startOffset" : 80,
      "endOffset" : 88
    }, {
      "referenceID" : 10,
      "context" : "Furthermore, the smallest singular value is easy to compute for random matrices [29, 28] and diagonal-dominant matrices [12, 21].",
      "startOffset" : 120,
      "endOffset" : 128
    }, {
      "referenceID" : 18,
      "context" : "Furthermore, the smallest singular value is easy to compute for random matrices [29, 28] and diagonal-dominant matrices [12, 21].",
      "startOffset" : 120,
      "endOffset" : 128
    }, {
      "referenceID" : 17,
      "context" : ", tree mixture models [20, 1].",
      "startOffset" : 22,
      "endOffset" : 29
    }, {
      "referenceID" : 0,
      "context" : ", tree mixture models [20, 1].",
      "startOffset" : 22,
      "endOffset" : 29
    }, {
      "referenceID" : 6,
      "context" : "Formally, the following error bound is known [7, 32].",
      "startOffset" : 45,
      "endOffset" : 52
    }, {
      "referenceID" : 29,
      "context" : "Formally, the following error bound is known [7, 32].",
      "startOffset" : 45,
      "endOffset" : 52
    }, {
      "referenceID" : 21,
      "context" : "To begin with, we state the following theorem that is proven in [24].",
      "startOffset" : 64,
      "endOffset" : 68
    }, {
      "referenceID" : 30,
      "context" : "dimension, (b) relative accuracy, (c) comparison in running time with Cholesky decomposition and Schur complement and (d) comparison in accuracy with Taylor approximation in [33].",
      "startOffset" : 174,
      "endOffset" : 178
    }, {
      "referenceID" : 11,
      "context" : "estimation with over a million variables [13] and we run the code implemented by the authors.",
      "startOffset" : 41,
      "endOffset" : 45
    }, {
      "referenceID" : 30,
      "context" : "We also compare the accuracy of our algorithm to a related stochastic algorithm that uses Taylor expansions [33].",
      "startOffset" : 108,
      "endOffset" : 112
    }, {
      "referenceID" : 22,
      "context" : "We now apply our proposed algorithm for maximum likelihood (ML) estimation in Gaussian Markov Random Fields (GMRF) [25].",
      "startOffset" : 115,
      "endOffset" : 119
    }, {
      "referenceID" : 2,
      "context" : "We use the data-set from [3] that provides satellite measurements of Ozone levels over the entire earth following the satellite tracks.",
      "startOffset" : 25,
      "endOffset" : 28
    }, {
      "referenceID" : 22,
      "context" : "We use a linear combination of the thinplate model and the thin-membrane models [25], with two parameters α and β: J = αI + (β)Jtp + (1 − β)Jtm and",
      "startOffset" : 80,
      "endOffset" : 84
    } ],
    "year" : 2015,
    "abstractText" : "Logarithms of determinants of large positive definite matrices appear ubiquitously in machine learning applications including Gaussian graphical and Gaussian process models, partition functions of discrete graphical models, minimum-volume ellipsoids, metric learning and kernel learning. Log-determinant computation involves the Cholesky decomposition at the cost cubic in the number of variables, i.e., the matrix dimension, which makes it prohibitive for large-scale applications. We propose a linear-time randomized algorithm to approximate log-determinants for very large-scale positive definite and general non-singular matrices using a stochastic trace approximation, called the Hutchinson method, coupled with Chebyshev polynomial expansions that both rely on efficient matrix-vector multiplications. We establish rigorous additive and multiplicative approximation error bounds depending on the condition number of the input matrix. In our experiments, the proposed algorithm can provide very high accuracy solutions at orders of magnitude faster time than the Cholesky decomposition and Schur completion, and enables us to compute log-determinants of matrices involving tens of millions of variables.",
    "creator" : "LaTeX with hyperref package"
  }
}