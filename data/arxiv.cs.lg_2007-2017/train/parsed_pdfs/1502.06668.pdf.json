{
  "name" : "1502.06668.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Learning Fast-Mixing Models for Structured Prediction",
    "authors" : [ "Jacob Steinhardt", "Percy Liang" ],
    "emails" : [ "JSTEINHARDT@CS.STANFORD.EDU", "PLIANG@CS.STANFORD.EDU" ],
    "sections" : [ {
      "heading" : "1. Introduction",
      "text" : "Conventional wisdom suggests that rich features and highly-dependent variables necessitate intractable inference. Indeed, the dominant paradigm is to first define a joint model, and then use approximate inference (e.g., MCMC) to learn that model. While this recipe can generate good results in practice, it has two notable drawbacks: (i) diagnosing convergence of Markov chains is extremely difficult (Gelman and Rubin, 1992; Cowles and Carlin, 1996); and (ii) approximate inference can be highly suboptimal in the context of learning (Wainwright, 2006; Kulesza and Pereira, 2007).\nIn this paper, we instead use MCMC to define the model family itself: For a given T , we construct a family of Markov chains using arbitrary rich features, but whose mixing time is guaranteed to be at most O(T ). The corresponding stationary distributions make up the model family. We can think of our Markov chains as parameterizing a family of “computationally accessible” distributions, where the amount of computation is controlled by T .\nFor concreteness, suppose we are performing a structured prediction task from input x to a complex output y. We construct Markov chains of the following form, called\nstrong Doeblin chains (Doeblin, 1940):\nÃθ(yt | yt−1, x) = (1− )Aθ(yt | yt−1, x) + uθ(yt | x), (1)\nwhere is a mixture coefficient and θ parameterizesAθ and uθ. Importantly, uθ does not depend on the previous state yt−1. For intuition, think of uθ as a simple tractable model and Aθ as Gibbs sampling in a complex intractable model. With probability 1 − , we progress according to Aθ, and with probability we draw a fresh sample from uθ, which performs an informed random restart. When = 1, we are drawing i.i.d. samples from uθ; we therefore mix in a single step, but our stationary distribution must necessarily be very simple. When = 0, the stationary distribution can be much richer, but we have no guarantees on the mixing time. For intermediate values of , we trade off between representational power and mixing time.\nA classic result is that a given strong Doeblin chain mixes in time at most 1 (Doeblin, 1940), and that we can draw an exact sample from the stationary distribution in expected timeO( 1 ) (Corcoran and Tweedie, 1998). In this work, we prove new results that help us understand the strong Doeblin model families. Let F and F̃ be the family of stationary distributions corresponding to Aθ and Ãθ as defined in (1), respectively. Our first result is that as decreases, the stationary distribution of any Ãθ monotonically approaches the stationary distribution of the correspondingAθ (as measured by either direction of the KL divergence). Our second result is that if 1 is much larger than the mixing time of Aθ, then the stationary distributions of Aθ and Ãθ are close under a certain Mahalanobis distance. This shows that any member of F that is computationally accessible via the Markov chain is well-approximated by its counterpart in F̃ .\nF F̃\nF0\nThe figure above shows F and F̃ , together with the subset\nar X\niv :1\n50 2.\n06 66\n8v 1\n[ cs\n.L G\n] 2\n4 Fe\nb 20\n15\nF0 of F whose Markov chains mix quickly. F̃ (approximately) covers F0, and contains some distributions outside of F entirely.\nIn order to learn over F̃ , we show how to maximize the likelihood of the data under the stationary distribution of Ãθ. Specifically, we show that we can compute a stochastic gradient of the log-likelihood in expected timeO( 1 ). Thus, in a strong sense, our objective function explicitly accounts for computational constraints.\nWe also generalize strong Doeblin chains, which are a mixture of two base chains, uθ and Aθ, to staged strong Doeblin chains, which allow us to combine more than two base chains. We introduce an auxiliary variable z representing the “stage” that the chain is in. We then transition between stages, using the base chain corresponding to the current stage z to advance the concrete state y. A common application of this generalization is defining a sequence of increasingly more complex chains, similar in spirit to annealing. This allows sampling to become gradually more sensitive to the structure of the problem.\nWe evaluated our methods on two tasks: (i) inferring words from finger gestures on a touch screen and (ii) inferring DNF formulas for program verification. Unlike many structured prediction problems where local potentials provide a large fraction of the signal, in the two tasks above, local potentials offer a very weak signal; reasoning carefully about the higher-order potentials is necessary to perform well. On word inference, we showed that learning strong Doeblin chains obtained a 3.6% absolute improvement in character accuracy over Gibbs sampling while requiring 5x fewer samples. On DNF formula inference, our staged strong Doeblin chain obtains an order of magnitude speed improvement over plain Metropolis-Hastings.\nTo summarize, the contributions of this paper are: We formally define a family of MCMC algorithms based on strong Doeblin chains with guaranteed fast mixing times (Section 2). We provide an extensive analysis of the theoretical properties of this family (Section 3), together with a generalization to a staged version (Section 3.1). We provide an algorithm for learning the parameters of a strong Doeblin chain (Section 4). We demonstrate superior experimental results relative to baseline MCMC samplers on two tasks, word inference and DNF formula synthesis (Section 5)."
    }, {
      "heading" : "2. A Fast-Mixing Family of Markov Chains",
      "text" : "Given a Markov chain with transition matrix A(yt | yt−1) and a distribution u(yt), define a new Markov chain with transitions given by Ã(yt | yt−1) def = (1− )A(yt | yt−1) +\nu(yt). (We suppress the dependence on θ and x for now.)\nIn matrix notation, we can write Ã as\nÃ def = (1− )A+ u1>. (2)\nIn other words, with probability we restart from u; otherwise, we transition according to A. Intuitively, Ã should mix quickly because a restart from u renders the past independent of the future (we formalize this in Section 3). We think of u as a simple tractable model that provides coverage, and A as a complex model that provides precision.\nSimple example. To gain some intuition, we work through a simple example with the Markov chain A depicted in Figure 1. The stationary distribution of this chain is [\n1 2+3δ 3δ 2+3δ 1 2+3δ\n] , splitting most of the probabil-\nity mass evenly between states 1 and 3. The mixing time of this chain is approximately 1δ , since once the chain falls into either state 1 or state 3, it will take about 1δ steps for it to escape back out. If we run this Markov chain for T steps with T 1δ , then our samples will be either almost all in state 1 or almost all in state 3, and thus will provide a poor summary of the distribution. If instead we perform random restarts with probability from a uniform distribution u over {1, 2, 3}, then the restarts give us the opportunity to explore both modes of the distribution. After a restart, however, the chain will more likely fall into state 3 than state 1 ( 59 probability vs. 4 9 ), so for δ the stationary distribution will be noticeably perturbed by the restarts. If δ, then there will be enough time for the chain to mix between restarts, so this bias will vanish. See Figure 1 for an illustration of this phenomenon."
    }, {
      "heading" : "3. Theoretical Properties",
      "text" : "Markov chains that can be expressed according to (2) are said to have strong Doeblin parameter (Doeblin, 1940). In this section, we characterize the stationary distribution and mixing time of Ã, and also relate the stationary distribution of Ã to that of A as a function of . Often the easiest way to study the mixing time of Ã is via its spectral gap,\nwhich is defined as 1− λ2(Ã), where λ2(Ã) is the secondlargest eigenvalue (in complex norm). A standard result for Markov chains is that, under mild assumptions, the mixing time of Ã isO ( 1\n1−λ2(Ã)\n) . We assume throughout this sec-\ntion thatA is ergodic but not necessarily that it is reversible. See Section 12.4 of Levin et al. (2009) for more details.\nOur first result relates the spectral gap (and hence the mixing time) to . This result (as well as the next) are wellknown but we include them for completeness. For most results in this section, we sketch the proof here and provide the full details in the appendix.\nProposition 3.1. The spectral gap of Ã is at least ; that is, 1− λ2(Ã) ≥ . In particular, Ã mixes in time O( 1 ).\nThe key idea is that all eigenvectors of Ã and A (except for the stationary distribution) are equal, and that λk(Ã) = (1− )λk(A) for k > 1.\nHaving established that Ã mixes quickly, the next step is to determine its stationary distribution:\nProposition 3.2. Let π̃ be the stationary distribution of Ã. Then\nπ̃ = ∞∑ j=0 (1− )jAju = (I − (1− )A)−1u. (3)\nThis can be directly verified algebraically. The summation over j shows that we can in fact draw an exact sample from π̃ by drawing T ∼ Geometric( ),1 initializing from u, and transitioning T times according to A. This is intuitive, since at a generic point in time we expect the most recent sample from u to have occurred Geometric( ) steps ago. Note that E[T + 1] = 1 , which is consistent with the fact that the mixing time is O( 1 ) (Proposition 3.1).\nWe would like to relate the stationary distributions π̃ and π of Ã and A. The next two results (which are new) do so.\nLet π̃ denote the stationary distribution of Ã at a particular value of ; note that π̃1 = u and π̃0 = π. We will show that π̃ approaches π monotonically, for both directions of the KL divergence. In particular, for any < 1, π̃ is at least as good as u at approximating π.\nTo show this, we make use of the following lemma from Murray and Salakhutdinov (2008):\nLemma 3.3. If B is a transition matrix with stationary distribution π, then KL (π ‖ Bπ′) ≤ KL (π ‖ π′) and KL (Bπ′ ‖ π) ≤ KL (π′ ‖ π).\nUsing this lemma, we can prove the following monotonicity result:\n1If T ∼ Geometric( ), we have P[T = j] = (1 − )j for j ≥ 0.\nProposition 3.4. Both KL (π̃ ‖ π) and KL (π ‖ π̃ ) are monotonic functions of .\nThe idea is to construct a transition matrix B that maps π̃ 1 to π̃ 2 for given 2 < 1, then show that its stationary distribution is π and apply Lemma 3.3.\nWith Proposition 3.4 in hand, a natural next question is how small must be before π̃ is reasonably close to π. Proposition 3.5 provides one such bound: π̃ is close to π if is small compared to the spectral gap 1− λ2(A). Proposition 3.5. Suppose that A satisfies detailed balance with respect to π. Let π̃ be the stationary distribution of Ã. Define dπ(π′) def = ‖π−π′‖diag(π)−1 = √ −1 + ∑ y π′(y)2 π(y) , where ‖v‖M is the Mahalonobis distance √ v>Mv. Then dπ(π̃) ≤ 1−λ2(A) · dπ(u). (In particular, dπ(π̃) 1 if (1− λ2(A))/dπ(u).)\nThe proof is somewhat involved, but the key step is to establish that dπ(π′) is convex in π′ and contractive with respect to A (more precisely, that dπ(Aπ′) ≤ λ2(A)dπ(π′)).\nProposition 3.5 says that if A mixes quickly, then Ã and A will have similar stationary distributions. This serves as a sanity check: if A already mixes quickly, then π̃ is a good approximation to π; otherwise, the Doeblin construction ensures that we are at least converging to some distribution, which by Proposition 3.4 approximates π at least as well as u does."
    }, {
      "heading" : "3.1. Staged strong Doeblin chains",
      "text" : "Recall that to run a strong Doeblin chain Ã, we first sample from u, and then transition according to A for approximately 1 steps. The intuition is that sampling from the crude distribution u faciliates global exploration of the state space, while the refined transition A hones in on a mode. However, for complex problems, there might be a considerable gap between what is possible with exact inference (u) and what is needed for accurate modeling (A). This motivates using multiple stages of MCMC to bridge the gap.\nTo do this, we introduce an auxiliary variable z ∈ Z denoting which stage of MCMC we are currently in. For each\nstage z, we have a Markov chain Az(yt | yt−1) over the original state space. We also define a Markov chain C(zt | zt−1) over the stages. To transition from (yt−1, zt−1) to (yt, zt), we first sample zt from C(zt | zt−1) and then yt from Azt(yt | yt−1). If there is a special state z∗ for which Az∗(yt | yt−1) = u(yt) (i.e., Az∗ does not depend on yt−1), then we call the resulting chain a staged strong Doeblin chain.\nFor example, if z ∈ {0, 1} and we transition from 0 to 1 with probability 1 − and from 1 to 0 with probability , then we recover strong Doeblin chains assuming z∗ = 0 (Figure 2(a)). As another example (Figure 2(b)), let z ∈ {0, 1, 2}. When z = z∗ = 0, transition according to a restart distribution u1>; when z = 1, transition according to a simple chain A1; and when z = 2 transition according to a more complex chain A2. If we transition from z = 0 to z = 1 with probability 1, from z = 1 to z = 2 with probability 1, and from z = 2 to z = 0 with probability 2, then we will on average draw 1 sample from u, 1 1 samples from A1, and 1 2 samples from A2.\nWe now show that staged strong Doeblin chains mix quickly as long as we visit z∗ reasonably often. In particular, the following theorem provides guarantees on the mixing time that depend only on z∗ and on the structure of C(zt | zt−1), analogous to the previous dependence only on . The condition of the theorem asks for times a and b such that the first time after a that we hit z∗ is almost independent of the starting state z0, and is less than b with high probability.\nTheorem 3.6. Let M be a staged strong Doeblin chain on Z × Y . Let τa be the earliest time s ≥ a for which zs = z∗. Let βa,s = minz∈Z P[τa = s | z0 = z] and γa,b\ndef =∑b\ns=a βa,s. Then M b has strong Doeblin parameter γa,b. In particular, the spectral gap ofM is at least γa,bb . (Setting a = b = 1 recovers Proposition 3.1.)\nThe key idea is that, conditioned on τa, (yb, zb) is independent of (y0, z0) for all b ≥ τa. For the special case that the stages form a cycle as in Figure 2, we have the following corollary:\nCorollary 3.7. Let C be a transition matrix on {0, . . . , k− 1} such that C(zt = i | zt−1 = i) = 1 − δi and C(zt = (i + 1) mod k | zt−1 = i) = δi. Suppose that δk−1 ≤ 1 max(2,k−1) min{δ0, . . . , δk−2}. Then the spectral gap of the joint Markov chain is at least δk−178 .\nThe key idea is that, when restricting to the time interval [2/δk−1, 3/δk−1], the time of first transition from k − 1 to 0 is approximately Geometric(δk−1)-distributed (independent of the initial state), which allows us to invoke Theorem 3.6. We expect the optimal constant to be much smaller than 78."
    }, {
      "heading" : "4. Learning strong Doeblin chains",
      "text" : "Section 3 covered properties of strong Doeblin chains (1− )Aθ + uθ1\n> for a fixed parameter vector θ. Now we turn to the problem of learning θ from data. We will focus on the discriminative learning setting where we are given a dataset {(x(i), y(i))}ni=1 and want to maximize the conditional loglikelihood:\nO(θ) = 1 n n∑ i=1 log pθ(y (i) | x(i)), (4)\nwhere now pθ is the stationary distribution of Ãθ = (1 − )Aθ + uθ1\n>. We assume for simplicity that the chains Aθ and uθ are given by conditional exponential families:\nAθ(y | y′, x) def = exp ( θ>φ(x, y′, y)− logZ(θ;x, y) ) ,\nuθ(y | x) def = exp ( θ>φ(x, y)− logZ(θ;x) ) , (5)\nwhere each φ outputs a feature vector and the Z are partition functions. By Proposition 3.1, Ãθ mixes quickly for all θ. On the other hand, the parameterization ofAθ captures a rich family of transition kernels, including Gibbs sampling.\nAt a high level, our learning algorithm performs stochastic gradient descent on the negative log-likelihood. However, the negative log-likelihood is only defined implicitly in terms of the stationary distribution of a Markov chain, so the main challenge is to show that it can be computed efficiently. To start, we assume that we can operate on the base chains uθ and Aθ for one step efficiently: Assumption 4.1. We can efficiently sample y from uθ(· | x) and Aθ(· | y′, x), as well as compute ∂ log uθ(y|x)∂θ and ∂ logAθ(y|y′,x)\n∂θ .\nUnder Asssumption 4.1, we will show how to efficiently compute the gradient of log pθ(y(i) | x(i)) with respect to θ. The impatient reader may skip ahead to the final pseudocode, which is given in Algorithm 1.\nFor convenience, we will suppress the dependence on x and i and just refer to pθ(y) instead of pθ(y(i) | x(i)). Computing the gradient of log pθ(y) is non-trivial, since the formula for pθ is somewhat involved:\npθ(y) = ∞∑ j=0 (1− )j [Ajθuθ](y). (6)\nWe are helped by the following generic identity on gradients of conditional log-probabilities, proved in the appendix. Lemma 4.2. Let z have distribution pθ(z) parameterized by a vector θ. Let S be any measurable set. Then\n∂ log pθ(z ∈ S) ∂θ\n= Ez [ ∂ log pθ(z)\n∂θ\n∣∣∣∣z ∈ S] . (7)\nWe can utilize Lemma 4.2 by interpreting y | θ as the output of the following generative process, which by Proposition 3.2 yields the stationary distribution of Ãθ:\n• Sample y0 from uθ and yt+1 | yt from Aθ for t = 0, 1, . . ..\n• Sample T ∼ Geometric( ) and let y = yT .\nWe then invoke Lemma 4.2 with z = (T, y0:T ) and S encoding the event that yT = y. As long as we can sample from the posterior distribution of (T, y0:T ) conditioned on yT = y, we can compute an estimate of ∂∂θ log pθ(y) as follows:\n• Sample (T, y0:T ) | yT = y. • Return ∂ log pθ(T,y0:T )∂θ = ∂ log uθ(y0) ∂θ\n+ ∑T t=1 ∂ logAθ(yt|yt−1) ∂θ .\n4.1. Sampling schemes for (T, y0:T )\nBy the preceding comments, it suffices to construct a sampler for (T, y0:T ) | yT = y. A natural approach is to use importance sampling: sample (T, y0:T−1), then weight by p(yT = y | yT−1). However, this throws away a lot of work — we make T MCMC transitions but obtain only one sample (T, y0:T ) with which to estimate the gradient.\nWe would like to ideally make use of all the MCMC transitions when constructing our estimate of (T, y0:T ) | yT = y. For any t ≤ T , the pair (t, y0:t) would itself have been a valid sample under different randomness, and we would like to exploit this. Suppose that we sample T from some distribution F and let q(t) be the probability that T ≥ t under F . Then we can use the following scheme:\n• Sample T from F , then sample y0:T−1.\n• For t = 0, . . . , T , weight (t, y0:t−1) by (1− ) t\nq(t) × p(yt = y | yt−1).\nFor any q, this yields unbiased (although unnormalized) weights (see Section B in the appendix). Typically we will choose q(t) = (1 − )t, e.g. F is a geometric distribution. If the yt are perfectly correlated, this will not be any more effective than vanilla importance sampling, but in practice this method should perform substantially better. Even though we obtain weights on all of y0:T , these weights will typically be highly correlated, so we should still repeat the sampling procedure multiple times to minimize the bias from estimating the normalization constant. The full procedure is given as pseudocode in Algorithm 1."
    }, {
      "heading" : "4.2. Implementation",
      "text" : "With the theory above in place, we now describe some important implementation details of our learning algorithm.\nAlgorithm 1 Algorithm for computing an estimate of ∂ ∂θ log pθ(y | x). This estimate is unbiased in the limit of infinitely many samples k, but will be biased for a finite number of samples due to variance in the estimate of the partition function.\nSampleGradient(x, y, θ, , k) k is the number of samples to take Z ← 0; g ← 0 Z is the total importance mass of all samples, gZ is the gradient for i = 1 to k do\nSample T ∼ Geometric( ) Sample y0 from uθ(· | x) For 1 ≤ t ≤ T−1: sample yt fromAθ(· |yt−1, x) w0 ← · uθ(y) For 1 ≤ t ≤ T : wt ← ·Aθ(y | yt−1, x) Z ← Z + ∑T t=0 wt g←g + w0 ∂ log uθ(y|x)∂θ + ∑T t=1 wt ( ∂ log uθ(y0|x) ∂θ\n+ ∑t−1 s=1 ∂ logAθ(ys|ys−1,x) ∂θ + ∂ logAθ(y|yt−1,x) ∂θ ) .\nend for Output gZ\nAt a high level, we can just use Algorithm 1 to compute estimates of the gradient and then apply an online learning algorithm such as ADAGRAD (Duchi et al., 2011) to identify a good choice of θ. Since the log-likelihood is a nonconvex function of θ, the initialization is important. We make the following (weak) assumption:\nAssumption 4.3. The chains uθ and Aθ are controlled by disjoint coordinates of θ, and for any setting of uθ there is a corresponding choice of Aθ that leaves uθ invariant (i.e., Aθuθ = uθ).\nIn practice, Assumption 4.3 is easy to satisfy. For instance, suppose that φ : Y → Rd is a feature function, θ = [θ0 θ1] ∈ Rd0+d are the features controlling u and A, and uθ0 is made tractable by zeroing some features out: uθ0(y) ∝ exp([θ0 ~0d−d0 ]>φ(y)). Also suppose that Aθ1 is a Gibbs sampler that uses all the features: Aθ1(y | y′) ∝ exp(θ>1 φ(yi, y′¬i)), where i is a randomly chosen coordinate of y. Then, we can satisfy Assumption 4.3 by setting θ1 = [θ0 ~0d−d0 ].\nUnder Assumption 4.3, we can initialize θ by first training u in isolation (which is a convex problem if uθ parameterizes an exponential family), then initializing A to leave u invariant; this guarantees that the initial log-likelihood is what we would have obtained by just using u by itself. We found this to work well empirically.\nAs another note, Algorithm 1 naı̈vely looks like it takes O(T 2) time to compute the gradient for each sample, due\nto the nested sum. However, most terms are of the form wt ∂ logAθ(ys|ys−1,x) ∂θ ; by grouping them for a fixed s we can compute the sum in O(T ) time, leading to expected runtime O ( k ) for Algorithm 1 (since E[T + 1] = 1 )."
    }, {
      "heading" : "5. Experiments",
      "text" : "We validated our method on two challenging inference tasks. These tasks are difficult due to the importance of high-arity factors; local information is insufficient to even identify high-probability regions of the space.\nInferring Words from Keyboard Gestures We first considered the task of inferring words from keyboard gestures. We generated the data by sampling words from the New York Times corpus (Sandhaus, 2008). For each word, we used a time series model to synthetically generate finger gestures for the word. A typical instantiation of this process is given in Figure 3. The learning task is to discriminatively infer the intended word y given the sequence of keys x that the finger was over (for instance, predicting banana from bdsadbnnnfaassjjj). In our model, we posit a latent alignment z between key presses and intended letter. Given an input x of length l, the alignment z also has length l; each zi is either ‘c’ (xi starts an output letter c), ‘-c’ (xi continues an output letter c), or ‘#’ (xi is unaligned); see Figure 3 for an example. Note that y is a deterministic function of z.\nThe base model uθ consists of indicator features on (xi, zi), (xi, zi−1, zi), and (xi, xi−1, zi). The full Aθ is a Gibbs sampler in a model where we include the following features in addition to those above:\n• indicator features on (xi, yi, yi−1) • indicator of y being in the dictionary, as well as log of\nword frequency (conditioned on being in the dictionary) • for each i, indicator of y1:i matching a prefix of a word\nin the dictionary\nWe compared three approaches:\n• Our approach (Doeblin sampling) • Regular Gibbs sampling, initialized by setting zi = xi\nfor all i (basic-Gibbs) • Gibbs sampling initialized from uθ (uθ-Gibbs)\nAt test time, all three of these methods are almost identical: they all initialize from some distribution, then make a certain number of Gibbs samples. For basic-Gibbs and uθ-Gibbs, this is always a fixed number of steps T , while for Doeblin sampling the number of steps is a geometric distribution with mean T .\nThe main difference is in how the methods are trained. Our method is trained using the ideas in Section 4; for the other two methods, we train by approximating the gradient:\n∇ log pθ(y | x) = Eẑ∼pθ(z|x,y)[φ(y, ẑ, x)] − Eŷ,ẑ∼pθ(y,z|x)[φ(ŷ, ẑ, x)],\nwhere φ(y, z, x) is the feature function and pθ is the stationary distribution of Aθ. For the second term, we use MCMC samples from Aθ to approximate pθ(y, z | x). For the first term, we could take the subset of samples where ŷ = y, but this is problematic if no such samples exist. Instead, we reweight all samples with ŷ 6= y by exp(−(D+1)), whereD is the edit distance between y and ŷ. We use the same reweighting approach for the Doeblin sampler, using this as the importance weight rather than using Aθ(y | yt−1) as in Algorithm 1.\nTo provide a fair comparison of the methods, we set in the Doeblin sampler to the inverse of the number of transitions T , so that the expected number of transitions of all algorithms is the same. We also devoted the first half of each chain to burn-in.\nAll algorithms are trained with AdaGrad (Duchi et al., 2011) with 16 independent chains run for each example. We measure word-level accuracy by computing the fraction of (non-burn-in) samples whose output y is correct.\nThe results are reported in Figure 4. Overall, our Doeblin sampler outperforms uθ-Gibbs by a significant margin, which in turn outperforms basic-Gibbs. Interestingly, while the accuracy of our method continues to improve with more training time, uθ-Gibbs quickly asymptotes and then slightly decreases, even for training accuracy.\nWhat is happening to uθ-Gibbs? Since the inference problem in this task is hard, the samples provide a poor gradient approximation. As a result, optimization methods that take the approximation at face value may not converge to even a local optimum. This phenomenon has already been studied in other contexts, for instance by Kulesza and Pereira\n(2007) and Huang et al. (2012).\nIn contrast, our method directly optimizes the loglikelihood of the data under the distribution π̃θ, so that accuracy continues to increase with more passes through the training data. This demonstrates that the MCMC samples do provide enough signal to train from, but that naı̈vely plugging them into a method designed for exact inference will fail to exploit that signal.\nInferring DNF Formulas We next study the use of our staged Doeblin chain construction as a tool for hierarchical initialization. We ignore learning for now, instead treating MCMC as a stochastic search algorithm. Our task of interest is to infer a DNF formula f from its inputoutput behavior. This is an important subroutine in loop invariant synthesis, where MCMC methods have recently shown great promise (Gulwani and Jojic, 2007; Sharma and Aiken, 2014).\nConcretely, the input x might look like this:\nf(1, 2, 3) = True\nf(1, 4, 4) = True\nf(0, 1, 0) = False\nf(0, 2, 2) = True\nOur task is to reconstruct f ; in this case, f(x1, x2, x3) = [x1 6= 0] ∨ [x2 = x3].\nMore formally, we consider DNF formulae with linear inequality predicates: f(x) = ∨n i=1 ∧m j=1[a > ijx ≤ bij ], where aij , x ∈ Zd and bij ∈ Z. The formula f maps input vectors to {True, False}. Given a collection of example inputs and outputs, our goal is to find an f consistent with all examples. Our evaluation metric is the time to find such\na formula.\nThe search space for this problem is extremely large. Even if we set n = m = 3 and restrict our search to aij ∈ {−1, 0, 1}5, b ∈ {−1, 0, 1}, the total number of candidate formulae is still ( 36 )3×3 ≈ 5.8× 1025.\nWe consider three MCMC methods: no restarts (0-stage), uniformly random restarts (1-stage), and a staged method (2-stage) as in Section 3.1. All base chains perform Metropolis-Hastings using proposals that edit individual atoms (e.g., [a>ijx ≤ bij ]), either by changing a single entry of [aij bij ] or by changing all entries of [aij bij ] at once. For the staged method, we initialize uniformly at random, then take Geometric(0.04) transitions based on a simplified cost function, then take Geometric(0.0002) steps with the full cost (this is the staged Doeblin chain in Figure 2).\nThe full cost function is I(f), the number of examples f errs on. We stop the Markov chain when it finds a formula with I(f) = 0. The simplified cost function decomposes over the disjuncts: for each disjunct d(x), if f(x) = False while d(x) = True, we incur a large cost (since in order for f(x) to be false, all disjuncts comprising f(x) must also be false). If f(x) = True while d(x) = False, then we incur a smaller cost. If f(x) = d(x) then we incur no cost.\nWe used all three methods as a subroutine in verifying properties of C programs; each such verification requires solving many instances of DNF formula inference. Using the staged method we are able to obtain a 30% speedup over uniformly random restarts and a 50x improvement over no restarts, as shown in Table 1."
    }, {
      "heading" : "6. Discussion",
      "text" : "We have proposed a model family based on strong Doeblin Markov chains, which guarantee fast mixing. Our construction allows us to simultaneously leverage a simple, tractable model (uθ) that provides coverage together with a complex, accurate model (Aθ) that provides precision. As such, we sidestep a typical dilemma—whether to use a simple model with exact inference, or to deal with the consequences of approximate inference in a more complex model.\nWhile our approach works well in practice, there are still some outstanding issues. One is the non-convexity of the learning objective, which makes the procedure dependent on initialization. Another issue is that the gradients returned by Algorithm 1 can be large, heterogeneous, and high-variance. The adaptive nature of ADAGRAD alleviates this somewhat, but it would still be ideal to have a sampling procedure that had lower variance than Algorithm 1.\nThough Gibbs sampling is the de facto method for many practitioners, there are also many more sophisticated approaches to MCMC (Green, 1995; Earl and Deem, 2005). Since our framework is orthogonal to the particular choice of transition kernel, it would be interesting to apply our method in these contexts.\nFinally, we would like to further explore the staged construction from Section 3.1. As the initial results on DNF formula synthesis are promising, it would be interesting to apply the construction to high-dimensional feature spaces as well as rich, multi-level hierarchies. We believe this might be a promising approach for extremely rich models in which a single level of re-initialization is insufficient to capture the complexity of the cost landscape.\nRelated work. Our learning algorithm is reminiscent of policy gradient algorithms in reinforcement learning (Sutton et al., 2000), as well as Searn, which tries to learn an optimal search policy for structured prediction (Daumé III et al., 2009); see also Shi et al. (2015), who apply reinforcement learning in the context of MCMC. Our staged construction is also similar in spirit to path sampling (Gelman and Meng, 1998), as it uses a multi-stage approach to smoothly transition from a very simple to a very complex\ndistribution.\nOur staged Doeblin construction belongs to the family of coarse-to-fine inference methods, which operate on progressively more complex models (Viola and Jones, 2004; Shen et al., 2004; Collins and Koo, 2005; Charniak et al., 2006; Carreras et al., 2008; Gu et al., 2009; Weiss et al., 2010; Sapp et al., 2010; Petrov, 2011; Yadollahpour et al., 2013).\nOn the theoretical front, we make use of the well-developed theory of strong Doeblin chains, often also referred to with the terms minorization or regeneration time (Doeblin, 1940; Roberts and Tweedie, 1999; Meyn and Tweedie, 1994; Athreya and Ney, 1978). The strong Doeblin property is typically used to study convergence of continuousspace Markov chains, but Rosenthal (1995) has used it to analyze Gibbs sampling, and several authors have provided algorithms for sampling exactly from arbitrary strong Doeblin chains (Propp and Wilson, 1996; Corcoran and Tweedie, 1998; Murdoch and Green, 1998). We are the first to use strong Doeblin properties to construct model families and learn them from data.\nAt a high level, our idea is to identify a family of models for which an approximate inference algorithm is known to work well, thereby constructing a computationally tractable model family that is nevertheless more expressive than typical tractable families such as low-treewidth graphical models. We think this general program is very interesting, and could be applied to other inference algorithms as well, thus solidfying the link between statistical theory and practical reality."
    }, {
      "heading" : "A. Proofs",
      "text" : "Proof of Proposition 3.1. We will in fact show that, for all k > 1, λk(Ã) = (1 − )λk(A), with the same eigenvector for both matrices. In other words, while the stationary distribution of Ã is different from A, all other eigenvectors are unchanged.\nLet wk be the eigenvector of A corresponding to λk. First note that 1>wk = 0. This is because\n1>Awk = 1 >wk (8)\nsince A is stochastic, and\n1>Awk = λk1 >wk (9)\nsince wk is an eigenvector of A. Since λk 6= 1, this implies that 1>wk = 0.\nNow we have\nÃwk = (1− )Awk + u1>wk = (1− )λkwk,\nwhich proves that λk(Ã) = (1− )λk(A). In particular, λ2(Ã) = (1− )λ2(A) ≤ 1− . The mixing time of Ã is 11−λ2(Ã) , and is therefore upper bounded by 1 , which completes the proof.\nProof of Proposition 3.2. We can verify algebraically that Ãπ̃ = π̃, as follows:\nÃπ̃ = (1− )Aπ̃ + u1>π̃ = (1− )A(I − (1− )A)−1u+ u = [ (1− )A(I − (1− )A)−1 + I ] u\n= [(1− )A+ (I − (1− )A)] (I − (1− )A)−1u = (I − (1− )A)−1u = π̃,\nso that π̃ is indeed the stationary distribution of Ã.\nProof of Proposition 3.5. From the characterization of π̃ in Proposition 3.2, we know that π̃ is equal to\n∞∑ j=0 (1− )jAju. (10)\nThe rest of the proof consists of determining some useful properties of dπ(π′). The most important (and the motivation for defining dπ in the first place) is given in the following lemma, which we prove separately:\nLemma A.1. If π is the stationary distribution of A and A satisfies detailed balance, then dπ(Aπ′) ≤ λ2(A)dπ(π′).\nThe other important property of dπ(π′) is convexity: dπ(wπ′ + (1− w)π′′) ≤ wdπ(π′) + (1− w)dπ(π′′), which follows directly from the characterization of dπ(π′) as a Mahalanobis distance.\nPutting these two properties together, we have\ndπ(π̃) ≤ ∞∑ j=0 (1− )jdπ(Aju)\n≤ ∞∑ j=0 (1− )jλ2(A)jdπ(u)\n≤ 1− (1− )λ2(A) dπ(u)\n≤ 1− λ2(A) dπ(u),\nwhich completes the proof.\nProof of Lemma A.1. Recall we want to show that dπ(Aπ′) ≤ λ2(A)dπ(π′). To see this, first define S = diag(π)−1/2Adiag(π)1/2, which is symmetric by the detailed balance condition, and satisfies λk(S) = λk(A) by similarity. Furthermore, the top eigenvector of S is 1> diag(π)1/2. Putting these together, we have\ndπ(Aπ ′) = ‖ diag(π)−1/2(π −Aπ′)‖2\n= ‖ diag(π)−1/2A(π − π′)‖2 = ‖S diag(π)−1/2(π − π′)‖2 ≤ λ2(S)‖ diag(π)−1/2(π − π′)‖2 = λ2(S)dπ(π ′) = λ2(A)dπ(π ′).\nThe inequality step ‖S diag(π)−1/2(π − π′)‖2 ≤ λ2(S)‖diag(π)−1/2(π − π′)‖2 follows because diag(π)−1/2(π − π′) is orthogonal to the top eigenvector 1> diag(π)1/2 of S.\nProof of Proposition 3.4. For any value of , the stationary distribution π̃ of (1− )A+ u1> can be obtained by applying A a Geometric( )-distributed number of times to u (by Proposition 3.2). For 2 < 1, it therefore suffices to construct a random variable F ≥ 0 such that if s ∼ F and t ∼ Geometric( 1) then s + t ∼ Geometric( 2); if we can do this, then we can let B be the matrix that applies A an F -distributed number of times, and we would have Bπ̃ 1 = π̃ 2 ; but B would clearly have stationary distribution π, and so Lemma 3.3 would give KL (π ‖ π̃ 2) ≤ KL (π ‖ π̃ 1) and KL (π̃ 2 ‖ π) ≤ KL (π̃ 1 ‖ π), which is the desired result.\nTo construct the desired F , we use the fact that addition of random variables corresponds to convolution of the probability mass functions, and furthermore represent the probability mass functions as formal power series; in particular, we let\nf(x) = ∞∑ n=0 P[t = n | t ∼ F ]xn, (11)\nand similarly\ng (x) = ∞∑ n=0 P[t = n | t ∼ Geometric( )]xn\n= ∞∑ n=0 (1− )nxn\n= 1− (1− )x .\nWe want f(x)g 1(x) to equal g 2(x), so we take\nf(x) = g 2(x)\ng 1(x)\n= 2 1 1− (1− 1)x 1− (1− 2)x\n= 2 1\n( 1 +\n∞∑ n=1 [ (1− 2)n − (1− 2)n−1(1− 1) ] xn\n)\n= 2 1\n( 1 +\n∞∑ n=1\n(1− 2)n−1( 1 − 2)xn ) .\nFrom this we see that the random variable F with probability function P[t = n | t ∼ F ] = { 2 1 : n = 0\n2 1\n(1− 2)n−1( 1 − 2) : n > 0 (12)\nsatisfies the required property that F + Geometric( 1) = Geometric( 2). Note that the condition 2 < 1 is necessary here so that all of the probability masses are positive in the above expression.\nWe can also prove the result purely algebraically. Motivated by the above construction, we define\nB = 2(I − (1− 2)A)−1 [ 1(I − (1− 1)A)−1 ]−1 = 2 1 [ I + ( 1 − 2)A(I − (1− 2)A)−1 ] .\nBy construction we have Bπ̃ 1 = π̃ 2 , but Taylor expanding the second expression for B shows that we can write it as a (infinite) convex combination of non-negative powers of A, and hence that B has stationary distribution π. This again yields the desired result by Lemma 3.3.\nProof of Theorem 3.6. We use an equivalent characterization of the strong Doeblin parameter as the quantity Γ(A) =∑ y infy′ A(y | y′). In the context of the Markov chain M , this yields\nΓ(M b) = ∑\n(zb,yb)\ninf (z0,y0)\nP[zb, yb | z0, y0]\n= ∑\n(zb,yb)\ninf (z0,y0) b∑ τ=a P[τa = τ | y0]× P[zb, yb | τa = τ ]\n≥ ∑\n(zb,yb)\nb∑ τ=a inf y0 P[τa = τ | y0]× P[zb, yb | τa = τ ]\n= b∑ τ=a inf y0 P[τa = τ | y0] ∑\n(zb,yb)\nP[zb, yb | τa = τ ]\n= b∑ τ=a inf y0 P[τa = τ | y0]\n= γa,b.\nFinally, by Proposition 3.1, the spectral gap of M b is at least γa,b, hence the spectral gap of M is at least 1bγa,b, which proves the theorem.\nProof of Corollary 3.7. Note that the time to transition from i to i + 1 is Geometric(δi)-distributed. Suppose we start from an arbitrary j ∈ {0, . . . , k − 1}. Then the time t′ to get to k − 1 is distributed as ∑k−2 i=j Geometric(δi). t ′ has\nmean ∑k−2 i=j 1 δi ≤ 1δk−1 , and variance ∑k−2 i=j 1−δi δ2i ≤ 1 2δ2k−1 . In particular, with probability 12 , t\n′ lies between 0 and⌊ 2\nδk−1\n⌋ . Now, consider the time t′′ to get from k − 1 to 0; this is Geometric(δk−1)-distributed, and conditioned on\nt′′ being at least 2δk−1 , t ′′ + t′ − 2δk−1 is also Geometric(δk−1)-distributed. But t ′′ is at least b 2δk−1 c with probability at least (1 − δk−1)2/δk−1 ≥ 116 (since δk−1 ≤ 1 2 ). Hence independently of j, t\n′′ + t′ is, with probability at least 116 , distributed according to b 2δk−1 c + Geometric(δk−1). But t\n′′ + t′ = τ by construction, and so we need only compute the probability that τ ≤ d 3δk−1 c; but this is just the probability that the geometric distribution is less than 1 δk−1 , which is 1 − (1 − δk−1)1/δk−1 ≥ 1 − e−1. Therefore, γ(t0, t) ≥ 1−e −1 16 ≥ 1 26 ; expanding the definitions of t0 and t, we have that γb2/δk−1c,d3/δk−1e ≥ 126 . Applying Theorem 3.6 then implies that the spectral gap of M is at least δk−1 78 , as was to be shown.\nProof of Lemma 4.2. The key idea is to use the identity ∂f∂x = f(x) ∂ log f(x) ∂x in two places. We have\npθ(z ∈ S) ∂ log pθ(z ∈ S)\n∂θ =\n∂\n∂θ pθ(z ∈ S)\n= ∫ S ∂pθ(z) ∂θ dz\n= ∫ S pθ(z) ∂ log pθ(z) ∂θ dz\n= pθ(z ∈ S)Ez [ ∂ log pθ(z)\n∂θ ∣∣∣∣z ∈ S] , which completes the lemma."
    }, {
      "heading" : "B. Correctness of Importance Sampling Algorithm",
      "text" : "In Section 4.1 of the main text, we had a distribution u over Y and a Markov chain A(yt | yt−1) on the same space. We then built a distribution over Y∗ def= ⋃ T≥0{T} × YT by sampling T ∼ Geometric( ), y0 ∼ u, and yt | yt−1 ∼ A for y = 1, . . . , T (we use pT (y0:T ) to represent the distribution over y0:T given T ).\nFor a given y, we were interested in constructing an importance sampler for (T, y0:T ) | yT = y. The following Lemma establishes the correctness of the importance sampler that was presented. We assume we are interested in computing the expectation of some function g : Y∗ → R and show that the given importance weights correctly estimate E[g]. Lemma B.1. For a distribution F , suppose that we sample T ∼ F and then sample y0:T−1 ∼ pT−1. Let wt = (1− )t P[T≥t|T∼F ]A(y | yt−1). Consider the random variable\nĝ def = T∑ t=0 wtg(t, y0:t−1, y). (13)\nThen\nET∼F,y0:T−1∼pT−1 [ĝ] = ET∼Geometric( ),y0:T∼pT [g(T, y0:T )I[yT = y]] . (14)\nProof. We have\nET∼F,y0:T−1∼p[ĝ] = ET∼F,y0:T−1∼pT−1 [ T∑ t=0 wtg(t, y0:t−1, y) ]\n= ∞∑ t=0 P[T ≥ t | T ∼ F ]Ey0:t−1∼pt−1 [wtg(t, y0:t−1, y)]\n= ∞∑ t=0 (1− )tEy0:t−1∼pt−1 [A(y | yt−1)g(t, y0:t−1, y)]\n= ∞∑ t=0 (1− )tEy0:t∼pt [g(t, y0:t)I[yt = y]]\n= ET∼Geometric( ),y0:T∼pT [g(T, y0:T )I[yT = y]] ,\nas was to be shown."
    } ],
    "references" : [ {
      "title" : "A new approach to the limit theory of recurrent Markov chains",
      "author" : [ "KB Athreya", "P Ney" ],
      "venue" : "Transactions of the AMS,",
      "citeRegEx" : "Athreya and Ney.,? \\Q1978\\E",
      "shortCiteRegEx" : "Athreya and Ney.",
      "year" : 1978
    }, {
      "title" : "Tag, dynamic programming, and the perceptron for efficient, feature-rich parsing",
      "author" : [ "Xavier Carreras", "Michael Collins", "Terry Koo" ],
      "venue" : "In CoNLL,",
      "citeRegEx" : "Carreras et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Carreras et al\\.",
      "year" : 2008
    }, {
      "title" : "Multilevel coarse-to-fine PCFG parsing",
      "author" : [ "I Haxton", "C Hill", "R Shrivaths", "J Moore", "M Pozar" ],
      "venue" : "In NAACL,",
      "citeRegEx" : "Haxton et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Haxton et al\\.",
      "year" : 2006
    }, {
      "title" : "Discriminative reranking for natural language parsing",
      "author" : [ "Michael Collins", "Terry Koo" ],
      "venue" : "Computational Linguistics,",
      "citeRegEx" : "Collins and Koo.,? \\Q2005\\E",
      "shortCiteRegEx" : "Collins and Koo.",
      "year" : 2005
    }, {
      "title" : "Perfect sampling of Harris recurrent Markov chains",
      "author" : [ "JN Corcoran", "RL Tweedie" ],
      "venue" : null,
      "citeRegEx" : "Corcoran and Tweedie.,? \\Q1998\\E",
      "shortCiteRegEx" : "Corcoran and Tweedie.",
      "year" : 1998
    }, {
      "title" : "Markov chain Monte Carlo convergence diagnostics: a comparative review",
      "author" : [ "MK Cowles", "BP Carlin" ],
      "venue" : "Journal of the American Statistical Association,",
      "citeRegEx" : "Cowles and Carlin.,? \\Q1996\\E",
      "shortCiteRegEx" : "Cowles and Carlin.",
      "year" : 1996
    }, {
      "title" : "Search-based structured prediction",
      "author" : [ "H Daumé III", "J Langford", "D Marcu" ],
      "venue" : "Machine learning,",
      "citeRegEx" : "III et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "III et al\\.",
      "year" : 2009
    }, {
      "title" : "Elements d’une theorie generale des chaines simples constantes de markoff",
      "author" : [ "W Doeblin" ],
      "venue" : "In Annales scientifiques de l’École Normale Supérieure,",
      "citeRegEx" : "Doeblin.,? \\Q1940\\E",
      "shortCiteRegEx" : "Doeblin.",
      "year" : 1940
    }, {
      "title" : "Adaptive subgradient methods for online learning and stochastic optimization",
      "author" : [ "J Duchi", "E Hazan", "Y Singer" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "Duchi et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Duchi et al\\.",
      "year" : 2011
    }, {
      "title" : "Parallel tempering: Theory, applications, and new perspectives",
      "author" : [ "David J Earl", "Michael W Deem" ],
      "venue" : "Physical Chemistry Chemical Physics,",
      "citeRegEx" : "Earl and Deem.,? \\Q2005\\E",
      "shortCiteRegEx" : "Earl and Deem.",
      "year" : 2005
    }, {
      "title" : "Simulating normalizing constants: From importance sampling to bridge sampling to path sampling",
      "author" : [ "A Gelman", "XL Meng" ],
      "venue" : "Statistical science,",
      "citeRegEx" : "Gelman and Meng.,? \\Q1998\\E",
      "shortCiteRegEx" : "Gelman and Meng.",
      "year" : 1998
    }, {
      "title" : "A single series from the Gibbs sampler provides a false sense of security",
      "author" : [ "A Gelman", "DB Rubin" ],
      "venue" : "Bayesian statistics,",
      "citeRegEx" : "Gelman and Rubin.,? \\Q1992\\E",
      "shortCiteRegEx" : "Gelman and Rubin.",
      "year" : 1992
    }, {
      "title" : "Reversible jump Markov chain Monte Carlo computation and Bayesian model determination",
      "author" : [ "PJ Green" ],
      "venue" : null,
      "citeRegEx" : "Green.,? \\Q1995\\E",
      "shortCiteRegEx" : "Green.",
      "year" : 1995
    }, {
      "title" : "Recognition using regions",
      "author" : [ "Chunhui Gu", "Joseph J Lim", "Pablo Arbeláez", "Jitendra Malik" ],
      "venue" : "In CVPR,",
      "citeRegEx" : "Gu et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Gu et al\\.",
      "year" : 2009
    }, {
      "title" : "Program verification as probabilistic inference",
      "author" : [ "S Gulwani", "N Jojic" ],
      "venue" : "In ACM SIGPLAN Notices,",
      "citeRegEx" : "Gulwani and Jojic.,? \\Q2007\\E",
      "shortCiteRegEx" : "Gulwani and Jojic.",
      "year" : 2007
    }, {
      "title" : "Structured perceptron with inexact search",
      "author" : [ "Liang Huang", "Suphan Fayong", "Yang Guo" ],
      "venue" : "In Proceedings of the 2012 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies,",
      "citeRegEx" : "Huang et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Huang et al\\.",
      "year" : 2012
    }, {
      "title" : "Structured learning with approximate inference",
      "author" : [ "Alex Kulesza", "Fernando Pereira" ],
      "venue" : "In Advances in neural information processing systems,",
      "citeRegEx" : "Kulesza and Pereira.,? \\Q2007\\E",
      "shortCiteRegEx" : "Kulesza and Pereira.",
      "year" : 2007
    }, {
      "title" : "Markov chains and mixing times",
      "author" : [ "DA Levin", "Y Peres", "EL Wilmer" ],
      "venue" : null,
      "citeRegEx" : "Levin et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Levin et al\\.",
      "year" : 2009
    }, {
      "title" : "Computable bounds for geometric convergence rates of Markov chains",
      "author" : [ "SP Meyn", "RL Tweedie" ],
      "venue" : "The Annals of Applied Probability,",
      "citeRegEx" : "Meyn and Tweedie.,? \\Q1994\\E",
      "shortCiteRegEx" : "Meyn and Tweedie.",
      "year" : 1994
    }, {
      "title" : "Exact sampling from a continuous state space",
      "author" : [ "DJ Murdoch", "PJ Green" ],
      "venue" : "Scandinavian Journal of Stat.,",
      "citeRegEx" : "Murdoch and Green.,? \\Q1998\\E",
      "shortCiteRegEx" : "Murdoch and Green.",
      "year" : 1998
    }, {
      "title" : "Notes on the KLdivergence between a Markov chain and its equilibrium distribution",
      "author" : [ "I Murray", "R Salakhutdinov" ],
      "venue" : null,
      "citeRegEx" : "Murray and Salakhutdinov.,? \\Q2008\\E",
      "shortCiteRegEx" : "Murray and Salakhutdinov.",
      "year" : 2008
    }, {
      "title" : "Coarse-to-fine natural language processing",
      "author" : [ "S Petrov" ],
      "venue" : null,
      "citeRegEx" : "Petrov.,? \\Q2011\\E",
      "shortCiteRegEx" : "Petrov.",
      "year" : 2011
    }, {
      "title" : "Exact sampling with coupled Markov chains and applications to statistical mechanics",
      "author" : [ "JG Propp", "DB Wilson" ],
      "venue" : "Random structures and Algorithms,",
      "citeRegEx" : "Propp and Wilson.,? \\Q1996\\E",
      "shortCiteRegEx" : "Propp and Wilson.",
      "year" : 1996
    }, {
      "title" : "Bounds on regeneration times and convergence rates for Markov chains",
      "author" : [ "GO Roberts", "RL Tweedie" ],
      "venue" : "Stochastic Processes and their applications,",
      "citeRegEx" : "Roberts and Tweedie.,? \\Q1999\\E",
      "shortCiteRegEx" : "Roberts and Tweedie.",
      "year" : 1999
    }, {
      "title" : "Minorization conditions and convergence rates for markov chain monte carlo",
      "author" : [ "JS Rosenthal" ],
      "venue" : "JASA,",
      "citeRegEx" : "Rosenthal.,? \\Q1995\\E",
      "shortCiteRegEx" : "Rosenthal.",
      "year" : 1995
    }, {
      "title" : "The new york times annotated corpus",
      "author" : [ "Evan Sandhaus" ],
      "venue" : "Linguistic Data Consortium, Philadelphia,",
      "citeRegEx" : "Sandhaus.,? \\Q2008\\E",
      "shortCiteRegEx" : "Sandhaus.",
      "year" : 2008
    }, {
      "title" : "Cascaded models for articulated pose estimation",
      "author" : [ "B Sapp", "A Toshev", "B Taskar" ],
      "venue" : "In ECCV,",
      "citeRegEx" : "Sapp et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Sapp et al\\.",
      "year" : 2010
    }, {
      "title" : "From invariant checking to invariant inference using randomized search",
      "author" : [ "R Sharma", "A Aiken" ],
      "venue" : "In CAV,",
      "citeRegEx" : "Sharma and Aiken.,? \\Q2014\\E",
      "shortCiteRegEx" : "Sharma and Aiken.",
      "year" : 2014
    }, {
      "title" : "Discriminative reranking for machine translation",
      "author" : [ "Libin Shen", "Anoop Sarkar", "Franz Josef Och" ],
      "venue" : "In NAACL,",
      "citeRegEx" : "Shen et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Shen et al\\.",
      "year" : 2004
    }, {
      "title" : "Learning where to sample in structured prediction",
      "author" : [ "Tianlin Shi", "Jacob Steinhardt", "Percy Liang" ],
      "venue" : null,
      "citeRegEx" : "Shi et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Shi et al\\.",
      "year" : 2015
    }, {
      "title" : "Policy gradient methods for reinforcement learning with function approximation",
      "author" : [ "RS Sutton", "D Mcallester", "S Singh", "Y Mansour" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Sutton et al\\.,? \\Q2000\\E",
      "shortCiteRegEx" : "Sutton et al\\.",
      "year" : 2000
    }, {
      "title" : "Robust real-time face detection",
      "author" : [ "Paul Viola", "Michael J Jones" ],
      "venue" : "International journal of computer vision,",
      "citeRegEx" : "Viola and Jones.,? \\Q2004\\E",
      "shortCiteRegEx" : "Viola and Jones.",
      "year" : 2004
    }, {
      "title" : "Estimating the wrong graphical model: Benefits in the computation-limited setting",
      "author" : [ "Martin J Wainwright" ],
      "venue" : "The Journal of Machine Learning Research,",
      "citeRegEx" : "Wainwright.,? \\Q2006\\E",
      "shortCiteRegEx" : "Wainwright.",
      "year" : 2006
    }, {
      "title" : "Sidestepping intractable inference with structured ensemble cascades",
      "author" : [ "David Weiss", "Benjamin Sapp", "Ben Taskar" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Weiss et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Weiss et al\\.",
      "year" : 2010
    }, {
      "title" : "Discriminative re-ranking of diverse segmentations",
      "author" : [ "Payman Yadollahpour", "Dhruv Batra", "Gregory Shakhnarovich" ],
      "venue" : "In CVPR,",
      "citeRegEx" : "Yadollahpour et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Yadollahpour et al\\.",
      "year" : 2013
    } ],
    "referenceMentions" : [ {
      "referenceID" : 11,
      "context" : "While this recipe can generate good results in practice, it has two notable drawbacks: (i) diagnosing convergence of Markov chains is extremely difficult (Gelman and Rubin, 1992; Cowles and Carlin, 1996); and (ii) approximate inference can be highly suboptimal in the context of learning (Wainwright, 2006; Kulesza and Pereira, 2007).",
      "startOffset" : 154,
      "endOffset" : 203
    }, {
      "referenceID" : 5,
      "context" : "While this recipe can generate good results in practice, it has two notable drawbacks: (i) diagnosing convergence of Markov chains is extremely difficult (Gelman and Rubin, 1992; Cowles and Carlin, 1996); and (ii) approximate inference can be highly suboptimal in the context of learning (Wainwright, 2006; Kulesza and Pereira, 2007).",
      "startOffset" : 154,
      "endOffset" : 203
    }, {
      "referenceID" : 32,
      "context" : "While this recipe can generate good results in practice, it has two notable drawbacks: (i) diagnosing convergence of Markov chains is extremely difficult (Gelman and Rubin, 1992; Cowles and Carlin, 1996); and (ii) approximate inference can be highly suboptimal in the context of learning (Wainwright, 2006; Kulesza and Pereira, 2007).",
      "startOffset" : 288,
      "endOffset" : 333
    }, {
      "referenceID" : 16,
      "context" : "While this recipe can generate good results in practice, it has two notable drawbacks: (i) diagnosing convergence of Markov chains is extremely difficult (Gelman and Rubin, 1992; Cowles and Carlin, 1996); and (ii) approximate inference can be highly suboptimal in the context of learning (Wainwright, 2006; Kulesza and Pereira, 2007).",
      "startOffset" : 288,
      "endOffset" : 333
    }, {
      "referenceID" : 7,
      "context" : "We construct Markov chains of the following form, called strong Doeblin chains (Doeblin, 1940):",
      "startOffset" : 79,
      "endOffset" : 94
    }, {
      "referenceID" : 7,
      "context" : "A classic result is that a given strong Doeblin chain mixes in time at most 1 (Doeblin, 1940), and that we can draw an exact sample from the stationary distribution in expected timeO( 1 ) (Corcoran and Tweedie, 1998).",
      "startOffset" : 78,
      "endOffset" : 93
    }, {
      "referenceID" : 4,
      "context" : "A classic result is that a given strong Doeblin chain mixes in time at most 1 (Doeblin, 1940), and that we can draw an exact sample from the stationary distribution in expected timeO( 1 ) (Corcoran and Tweedie, 1998).",
      "startOffset" : 188,
      "endOffset" : 216
    }, {
      "referenceID" : 7,
      "context" : "Markov chains that can be expressed according to (2) are said to have strong Doeblin parameter (Doeblin, 1940).",
      "startOffset" : 95,
      "endOffset" : 110
    }, {
      "referenceID" : 17,
      "context" : "4 of Levin et al. (2009) for more details.",
      "startOffset" : 5,
      "endOffset" : 25
    }, {
      "referenceID" : 20,
      "context" : "To show this, we make use of the following lemma from Murray and Salakhutdinov (2008): Lemma 3.",
      "startOffset" : 54,
      "endOffset" : 86
    }, {
      "referenceID" : 8,
      "context" : "At a high level, we can just use Algorithm 1 to compute estimates of the gradient and then apply an online learning algorithm such as ADAGRAD (Duchi et al., 2011) to identify a good choice of θ.",
      "startOffset" : 142,
      "endOffset" : 162
    }, {
      "referenceID" : 25,
      "context" : "We generated the data by sampling words from the New York Times corpus (Sandhaus, 2008).",
      "startOffset" : 71,
      "endOffset" : 87
    }, {
      "referenceID" : 8,
      "context" : "All algorithms are trained with AdaGrad (Duchi et al., 2011) with 16 independent chains run for each example.",
      "startOffset" : 40,
      "endOffset" : 60
    }, {
      "referenceID" : 15,
      "context" : "(2007) and Huang et al. (2012). In contrast, our method directly optimizes the loglikelihood of the data under the distribution π̃θ, so that accuracy continues to increase with more passes through the training data.",
      "startOffset" : 11,
      "endOffset" : 31
    }, {
      "referenceID" : 14,
      "context" : "This is an important subroutine in loop invariant synthesis, where MCMC methods have recently shown great promise (Gulwani and Jojic, 2007; Sharma and Aiken, 2014).",
      "startOffset" : 114,
      "endOffset" : 163
    }, {
      "referenceID" : 27,
      "context" : "This is an important subroutine in loop invariant synthesis, where MCMC methods have recently shown great promise (Gulwani and Jojic, 2007; Sharma and Aiken, 2014).",
      "startOffset" : 114,
      "endOffset" : 163
    }, {
      "referenceID" : 12,
      "context" : "Though Gibbs sampling is the de facto method for many practitioners, there are also many more sophisticated approaches to MCMC (Green, 1995; Earl and Deem, 2005).",
      "startOffset" : 127,
      "endOffset" : 161
    }, {
      "referenceID" : 9,
      "context" : "Though Gibbs sampling is the de facto method for many practitioners, there are also many more sophisticated approaches to MCMC (Green, 1995; Earl and Deem, 2005).",
      "startOffset" : 127,
      "endOffset" : 161
    }, {
      "referenceID" : 30,
      "context" : "Our learning algorithm is reminiscent of policy gradient algorithms in reinforcement learning (Sutton et al., 2000), as well as Searn, which tries to learn an optimal search policy for structured prediction (Daumé III et al.",
      "startOffset" : 94,
      "endOffset" : 115
    }, {
      "referenceID" : 10,
      "context" : "Our staged construction is also similar in spirit to path sampling (Gelman and Meng, 1998), as it uses a multi-stage approach to smoothly transition from a very simple to a very complex distribution.",
      "startOffset" : 67,
      "endOffset" : 90
    }, {
      "referenceID" : 31,
      "context" : "Our staged Doeblin construction belongs to the family of coarse-to-fine inference methods, which operate on progressively more complex models (Viola and Jones, 2004; Shen et al., 2004; Collins and Koo, 2005; Charniak et al., 2006; Carreras et al., 2008; Gu et al., 2009; Weiss et al., 2010; Sapp et al., 2010; Petrov, 2011; Yadollahpour et al., 2013).",
      "startOffset" : 142,
      "endOffset" : 350
    }, {
      "referenceID" : 28,
      "context" : "Our staged Doeblin construction belongs to the family of coarse-to-fine inference methods, which operate on progressively more complex models (Viola and Jones, 2004; Shen et al., 2004; Collins and Koo, 2005; Charniak et al., 2006; Carreras et al., 2008; Gu et al., 2009; Weiss et al., 2010; Sapp et al., 2010; Petrov, 2011; Yadollahpour et al., 2013).",
      "startOffset" : 142,
      "endOffset" : 350
    }, {
      "referenceID" : 3,
      "context" : "Our staged Doeblin construction belongs to the family of coarse-to-fine inference methods, which operate on progressively more complex models (Viola and Jones, 2004; Shen et al., 2004; Collins and Koo, 2005; Charniak et al., 2006; Carreras et al., 2008; Gu et al., 2009; Weiss et al., 2010; Sapp et al., 2010; Petrov, 2011; Yadollahpour et al., 2013).",
      "startOffset" : 142,
      "endOffset" : 350
    }, {
      "referenceID" : 1,
      "context" : "Our staged Doeblin construction belongs to the family of coarse-to-fine inference methods, which operate on progressively more complex models (Viola and Jones, 2004; Shen et al., 2004; Collins and Koo, 2005; Charniak et al., 2006; Carreras et al., 2008; Gu et al., 2009; Weiss et al., 2010; Sapp et al., 2010; Petrov, 2011; Yadollahpour et al., 2013).",
      "startOffset" : 142,
      "endOffset" : 350
    }, {
      "referenceID" : 13,
      "context" : "Our staged Doeblin construction belongs to the family of coarse-to-fine inference methods, which operate on progressively more complex models (Viola and Jones, 2004; Shen et al., 2004; Collins and Koo, 2005; Charniak et al., 2006; Carreras et al., 2008; Gu et al., 2009; Weiss et al., 2010; Sapp et al., 2010; Petrov, 2011; Yadollahpour et al., 2013).",
      "startOffset" : 142,
      "endOffset" : 350
    }, {
      "referenceID" : 33,
      "context" : "Our staged Doeblin construction belongs to the family of coarse-to-fine inference methods, which operate on progressively more complex models (Viola and Jones, 2004; Shen et al., 2004; Collins and Koo, 2005; Charniak et al., 2006; Carreras et al., 2008; Gu et al., 2009; Weiss et al., 2010; Sapp et al., 2010; Petrov, 2011; Yadollahpour et al., 2013).",
      "startOffset" : 142,
      "endOffset" : 350
    }, {
      "referenceID" : 26,
      "context" : "Our staged Doeblin construction belongs to the family of coarse-to-fine inference methods, which operate on progressively more complex models (Viola and Jones, 2004; Shen et al., 2004; Collins and Koo, 2005; Charniak et al., 2006; Carreras et al., 2008; Gu et al., 2009; Weiss et al., 2010; Sapp et al., 2010; Petrov, 2011; Yadollahpour et al., 2013).",
      "startOffset" : 142,
      "endOffset" : 350
    }, {
      "referenceID" : 21,
      "context" : "Our staged Doeblin construction belongs to the family of coarse-to-fine inference methods, which operate on progressively more complex models (Viola and Jones, 2004; Shen et al., 2004; Collins and Koo, 2005; Charniak et al., 2006; Carreras et al., 2008; Gu et al., 2009; Weiss et al., 2010; Sapp et al., 2010; Petrov, 2011; Yadollahpour et al., 2013).",
      "startOffset" : 142,
      "endOffset" : 350
    }, {
      "referenceID" : 34,
      "context" : "Our staged Doeblin construction belongs to the family of coarse-to-fine inference methods, which operate on progressively more complex models (Viola and Jones, 2004; Shen et al., 2004; Collins and Koo, 2005; Charniak et al., 2006; Carreras et al., 2008; Gu et al., 2009; Weiss et al., 2010; Sapp et al., 2010; Petrov, 2011; Yadollahpour et al., 2013).",
      "startOffset" : 142,
      "endOffset" : 350
    }, {
      "referenceID" : 7,
      "context" : "On the theoretical front, we make use of the well-developed theory of strong Doeblin chains, often also referred to with the terms minorization or regeneration time (Doeblin, 1940; Roberts and Tweedie, 1999; Meyn and Tweedie, 1994; Athreya and Ney, 1978).",
      "startOffset" : 165,
      "endOffset" : 254
    }, {
      "referenceID" : 23,
      "context" : "On the theoretical front, we make use of the well-developed theory of strong Doeblin chains, often also referred to with the terms minorization or regeneration time (Doeblin, 1940; Roberts and Tweedie, 1999; Meyn and Tweedie, 1994; Athreya and Ney, 1978).",
      "startOffset" : 165,
      "endOffset" : 254
    }, {
      "referenceID" : 18,
      "context" : "On the theoretical front, we make use of the well-developed theory of strong Doeblin chains, often also referred to with the terms minorization or regeneration time (Doeblin, 1940; Roberts and Tweedie, 1999; Meyn and Tweedie, 1994; Athreya and Ney, 1978).",
      "startOffset" : 165,
      "endOffset" : 254
    }, {
      "referenceID" : 0,
      "context" : "On the theoretical front, we make use of the well-developed theory of strong Doeblin chains, often also referred to with the terms minorization or regeneration time (Doeblin, 1940; Roberts and Tweedie, 1999; Meyn and Tweedie, 1994; Athreya and Ney, 1978).",
      "startOffset" : 165,
      "endOffset" : 254
    }, {
      "referenceID" : 22,
      "context" : "The strong Doeblin property is typically used to study convergence of continuousspace Markov chains, but Rosenthal (1995) has used it to analyze Gibbs sampling, and several authors have provided algorithms for sampling exactly from arbitrary strong Doeblin chains (Propp and Wilson, 1996; Corcoran and Tweedie, 1998; Murdoch and Green, 1998).",
      "startOffset" : 264,
      "endOffset" : 341
    }, {
      "referenceID" : 4,
      "context" : "The strong Doeblin property is typically used to study convergence of continuousspace Markov chains, but Rosenthal (1995) has used it to analyze Gibbs sampling, and several authors have provided algorithms for sampling exactly from arbitrary strong Doeblin chains (Propp and Wilson, 1996; Corcoran and Tweedie, 1998; Murdoch and Green, 1998).",
      "startOffset" : 264,
      "endOffset" : 341
    }, {
      "referenceID" : 19,
      "context" : "The strong Doeblin property is typically used to study convergence of continuousspace Markov chains, but Rosenthal (1995) has used it to analyze Gibbs sampling, and several authors have provided algorithms for sampling exactly from arbitrary strong Doeblin chains (Propp and Wilson, 1996; Corcoran and Tweedie, 1998; Murdoch and Green, 1998).",
      "startOffset" : 264,
      "endOffset" : 341
    }, {
      "referenceID" : 2,
      "context" : ", 2000), as well as Searn, which tries to learn an optimal search policy for structured prediction (Daumé III et al., 2009); see also Shi et al. (2015), who apply reinforcement learning in the context of MCMC.",
      "startOffset" : 106,
      "endOffset" : 152
    }, {
      "referenceID" : 0,
      "context" : "On the theoretical front, we make use of the well-developed theory of strong Doeblin chains, often also referred to with the terms minorization or regeneration time (Doeblin, 1940; Roberts and Tweedie, 1999; Meyn and Tweedie, 1994; Athreya and Ney, 1978). The strong Doeblin property is typically used to study convergence of continuousspace Markov chains, but Rosenthal (1995) has used it to analyze Gibbs sampling, and several authors have provided algorithms for sampling exactly from arbitrary strong Doeblin chains (Propp and Wilson, 1996; Corcoran and Tweedie, 1998; Murdoch and Green, 1998).",
      "startOffset" : 232,
      "endOffset" : 378
    } ],
    "year" : 2015,
    "abstractText" : "Markov Chain Monte Carlo (MCMC) algorithms are often used for approximate inference inside learning, but their slow mixing can be difficult to diagnose and the approximations can seriously degrade learning. To alleviate these issues, we define a new model family using strong Doeblin Markov chains, whose mixing times can be precisely controlled by a parameter. We also develop an algorithm to learn such models, which involves maximizing the data likelihood under the induced stationary distribution of these chains. We show empirical improvements on two challenging inference tasks.",
    "creator" : "LaTeX with hyperref package"
  }
}