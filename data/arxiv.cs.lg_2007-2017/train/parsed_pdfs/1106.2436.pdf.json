{
  "name" : "1106.2436.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "From Bandits to Experts: On the Value of Side-Observations",
    "authors" : [ "Shie Mannor", "Ohad Shamir" ],
    "emails" : [ "shie@ee.technion.ac.il", "ohad@microsoft.com" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "One of the most basic learning settings studied in the online learning framework is that of learning from experts. In this setting, we assume that each round t, the learning algorithm must choose one of k possible actions, which can be interpreted as following the advice of one of k “experts.” At the end of the round, the performance of all actions, measured here in terms of some reward, is revealed. This process is iterated for T rounds, and our goal is to minimize the regret, namely the difference between the total reward of the single best action in hindsight, and our own accumulated reward. We follow the standard online learning framework, in which nothing whatsoever can be assumed on the process generating the rewards, and they might even be chosen by an adversary who has full knowledge of our learning algorithm.\nA crucial assumption in this setting is that we get to see the rewards of all actions at the end of each round. However, in many real-world scenarios, this assumption is unrealistic. A canonical example is web advertising, where at any timepoint one may choose only a single ad (or small number of ads) to display, and observe whether it was clicked, but not whether other ads would have been clicked or not if presented to the user. This partial information constraint has led to a flourishing literature on multi-armed bandits problems, which model the setting where we can only observe the reward of the action we chose. While this setting has been long studied under stochastic assumptions, the landmark paper [4] showed that this setting can also be dealt with under adversarial conditions, making the setting comparable to the experts setting discussed above. The price in terms of the provable regret is usually an extra √ k multiplicative factor in the bound. The intuition for this factor has long been that in the bandit setting, we only get “1/k of the information” obtained in the expert setting (as we observe just a single reward rather than k). While the bandits setting received much theoretical interest, it has also been criticized for not capturing additional side-information we often have on the rewards of the different actions. This has led to studying richer settings, which make various assumptions on the relationship between the rewards; see below for more details.\nIn this paper, we formalize and initiate a study on a range of settings that interpolates between the bandits setting and the experts setting. Intuitively, we assume that after choosing some action i, and obtaining the action’s reward, we observe not just action i’s reward (as in the bandit setting), and not the rewards of all actions (as in the experts setting),\nar X\niv :1\n10 6.\n24 36\nv1 [\ncs .L\nG ]\n1 3\nJu n\n20 11\nbut rather some (possibly noisy) information on a subset of the other actions. This subset may depend on action i in an arbitrary way, and may change from round to round. This information feedback structure can be modeled as a sequence of directed graphs G1, . . . , GT (one per round t), so that an edge from action i to action j implies that by choosing action i, “sufficiently good” information is revealed on the reward of action j as well. The case of Gt being the complete graph corresponds to the experts setting. The case of Gt being the empty graph corresponds to the bandit setting. The broad scenario of arbitrary graphs in between the two is the focus of our study.\nAs a motivating example, consider the problem of web advertising mentioned earlier. In the standard multi-armed bandits setting, we assume that we have no information whatsoever on whether undisplayed ads would have been clicked on. However, in many cases, we do have some side-information. For instance, if two ads i, j are for similar vacation packages in Hawaii, and ad i was displayed and clicked on by some user, it is likely that the other ad j would have been clicked on as well. In contrast, if ad i is for running shoes, and ad j is for wheelchair accessories, then a user who clicked on one ad is unlikely to clique on the other. This sort of side-information can be better captured in our setting.\nAs another motivating example, consider a sensor network where each sensor collects data from a certain geographic location. Each sensor covers an area that may overlap the area covered by other sensors. At every stage a centralized controller activates one of the sensors and receives input from it. The value of this input is modeled as the integral of some “information” in the covered area. Since the area covered by each of the sensors overlaps the area covered by other sensors, the reward obtained when choosing sensor i provides an indication of the reward that would have been obtained when sampling sensor j.\nOur results portray an interesting picture, with the attainable regret depending on non-trivial properties of these graphs. We provide two practical algorithms with regret guarantees: the ExpBan algorithm that is based on a combination of existing methods, and the more fundamentally novel ELP algorithm that has superior guarantees. We also study lower bounds for our setting. In the case of undirected graphs, we show that the information-theoretically attainable regret is precisely characterized by the average independence number (or stability number) of the graph, namely the size of its largest independent set. Moreover, there is an interesting gap from the efficiently-obtainable regret, as the optimal parameter choice for our algorithms may depend on the independence number, which is NP-hard to compute (in the worst case over all graphs). For the case of directed graphs, we obtain a weaker regret which depends on the average clique-partition number of the graphs. More specifically, our contributions are as follows:\n• We formally define and initiate a study of the setting that interpolates between learning with expert advice (withO( √ log(k)T ) regret) that assumes that all rewards are revealed and the multi-armed bandits setting (with\nÕ( √ kT ) regret) that assumes that only the reward of the action selected is revealed. We provide an answer to a range of models in between.\n• The framework we consider assumes that by choosing each action, other than just obtaining that action’s reward, we can also observe some side-information about the rewards of other actions. We formalize this as a graph Gt over the actions, where an edge between two actions means that by choosing one action, we can also get a “sufficiently good” estimate of the reward of the other action. We consider both the case where Gt changes at each round t, as well as the case that Gt = G is fixed throughout all rounds.\n• We establish upper and lower bounds on the achievable regret, which depends on two combinatorial properties of Gt: Its independence number α(Gt) (namely, the largest number of nodes without edges between them), and its clique partition number χ̄(Gt) (namely, the smallest number of cliques into which the nodes can be partitioned).\n• We present two practical algorithms to deal with this setting. The first algorithm, called ExpBan, combines existing algorithms in a natural way, and applies only when Gt = G is fixed at all T rounds. Ignoring computational constraints, the algorithm achieves a regret bound of O( √ χ̄(G) log(k)T ). With computational constraints, its\nregret bound is O( √ c log(k)T ), where c is the size of the minimal clique partition one can efficiently find for G. However, note that for general graphs, it is NP-hard to find a clique partition for which c = O(k1− ) for any > 0.\n• The second algorithm, called ELP, is an improved algorithm, which can handle graphs which change between rounds. For undirected graphs, where sampling i gives an observation on j and vice versa, it achieves a regret\nbound ofO( √ log(k) ∑T t=1 α(Gt)). For directed graphs (where the observation structure is not symmetric), our\nregret bound is at mostO( √ log(k) ∑T t=1 χ̄(Gt)). These bounds hold ignoring computational constraints. With computational efficiency imposed, one can still get similar bounds which have a somewhat worse dependence on the average value of α(Gt) (respectively χ̄(Gt)). This is in contrast to the ExpBan algorithm, which in the worst case, cannot efficiently achieve regret significantly better than O( √ k log(k)T ).\n• For the case of a fixed graph Gt = G, we present an information-theoretic Ω (√ α(G)T )\nlower bound on the regret, which holds regardless of computational efficiency.\n• We present some simple synthetic experiments, which demonstrate that the potential advantage of the ELP algorithm over other approaches is real, and not just an artifact of our analysis."
    }, {
      "heading" : "1.1 Related Work",
      "text" : "The standard multi-armed bandits problem assumes no relationship between the actions. Quite a few papers studied alternative models, where the actions are endowed with a richer structure. However, in the large majority of such papers, the feedback structure is the same as in the standard multi-armed bandits. Examples include [12], where the actions’ rewards are assumed to be drawn from a statistical distribution, with correlations between the actions; and [1, 9], where the actions reward’s are assumed to satisfy some Lipschitz continuity property with respect to a distance measure between the actions.\nIn terms of other approaches, the combinatorial bandits framework [8] considers a setting slightly similar to ours, in that one chooses and observes the rewards of some subset of actions. However, it is crucially assumed that the reward obtained is the sum of the rewards of all actions in the subset. In other words, there is no separation between earning a reward and obtaining information on its value. Another relevant approach is partial monitoring, which is a very general framework for online learning under partial feedback. However, this generality comes at the price of tractability for all but specific cases, which do not include our model.\nOur work is also somewhat related to the contextual bandit problem (e.g., [10, 11]), where the standard multi-armed bandits setting is augmented with some side-information provided in each round, which can be used to determine which action to pick. While we also consider additional side-information, it is in a more specific sense. Moreover, our goal is still to compete against the best single action, rather than some set of policies which use this side-information."
    }, {
      "heading" : "2 Problem Setting",
      "text" : "Let [k] = {1, . . . , k} and [T ] = {1, . . . , T}. We consider a set of actions 1, 2, . . . , k. Choosing an action i at round t results in receiving a reward gi(t), which we shall assume without loss of generality to be bounded in [0, 1]. Following the standard adversarial framework, we make no assumptions whatsoever about how the rewards are selected, and they might even be chosen by an adversary. We denote our choice of action at round t as it. Our goal is to minimize regret with respect to the best single action in hindsight, namely\nmax i T∑ t=1 gi(t)− T∑ t=1 git(t).\nFor simplicity, we will focus on a finite-horizon setting (where the number of rounds T is known in advance), on regret bounds which hold in expectation, and on oblivious adversaries, namely that the reward sequence gi(t) is unknown but fixed in advance. These conditions can be relaxed under certain conditions, using standard techniques (see, e.g., [4]).\nEach round t, the learning algorithm chooses a single action it. In the standard multi-armed bandits setting, this results in git(t) being revealed to the algorithm, while gj(t) remains unknown for any j 6= it. In our setting, we assume that by choosing an action i, other than getting gi(t), we also get some side-observations about the rewards of the other actions. Formally, we assume that one receives gi(t), and for some fixed parameter b is able to construct unbiased\nAlgorithm 1 The ExpBan Algorithm Input: neighborhood sets {Ni(t)}i∈[k]. Split the graph induced by the neighborhood sets into c cliques (c ≤ k as small as possible) For each clique, define a “meta-action” to be a standard experts algorithm over the actions in the clique Run a multi-armed-bandits algorithm over the c meta-actions\nestimates ĝj(t) for all actions j in some subset of [k], such that E[ĝj(t)|action i chosen] = gj(t) and Pr(|ĝj(t)| ≤ b) = 1. For any action j, we let Nj(t) be the set of actions, for which we can get such an estimate ĝj(t) on the reward of action j. This is essentially the “neighborhood” of action j, which receives sufficiently good information (as parameterized by b) on the reward of action j. We note that j is always a member of Nj , and moreover, Nj may be larger or smaller depending on the value of b we choose. We assume that Nj(t) for all j, t are known to the learner in advance.\nIntuitively, one can think of this setting as a sequence of directed graphs, one graph per round t, which captures the information feedback structure between the actions. Formally, we define Gt to be a graph on the k nodes 1, . . . , k, with an edge from node i to node j if and only if j ∈ Ni(t). We will use this graph viewpoint extensively in the remainder of the paper."
    }, {
      "heading" : "3 The ExpBan Algorithm",
      "text" : "We begin by presenting the ExpBan algorithm (see Algorithm 1 above), which builds on existing algorithms to deal with our setting, in the special case where the graph structure remains fixed throughout the rounds - namely, Gt = G for all t. The idea of the algorithm is to split the actions into c cliques, such that choosing an action in a clique reveals unbiased estimates of the rewards of all the other actions in the clique. By running a standard experts algorithm (such as the exponentially weighted forecaster - see [7, Chapter 2]), we can get low regret with respect to any action in that clique. We then treat each such expert algorithm as a meta-action, and run a standard bandits algorithm (such as the EXP3 [4]) over these c meta-actions. We denote this algorithm as ExpBan, since it combines an experts algorithm with a bandit algorithm.\nThe following result provides a bound on the expected regret of the algorithm. The proof is deferred to the supplementary material.\nTheorem 1. Suppose Gt = G is fixed for all T rounds. If we run ExpBan using the exponentially weighted forecaster and the EXP3 algorithm, then the expected regret is bounded as follows:1\nT∑ t=1 gj(t)− E [ T∑ t=1 git(t) ] ≤ 5b √ c log(k)T . (1)\nFor the optimal clique partition, we have c = χ̄(G), the clique partition number of G.\nIt is easily seen that χ̄(G) is a number between 1 and k. The case χ̄(G) = 1 corresponds to G being a clique, namely, that choosing any action allows us to estimate the rewards of all other actions. This corresponds to the standard experts setting, in which case the algorithm attains the optimal O( √ log(k)T ) regret. At the other extreme, χ̄(G) = k corresponds to G being the empty graph, namely, that choosing any action only reveals the reward of that action. This corresponds to the standard bandit setting, in which case the algorithm attains the standardO( √ log(k)kT ) regret. For general graphs, our algorithm interpolates between these regimes, in a way which depends on χ̄(G). While being simple and using off-the-shelf components, the ExpBan algorithm has some disadvantages. First of all, for a general graph G, it is NP -hard to find c ≤ O(k1− ) for any > 0. (This follows from [15] and the fact that the clique partition number of G equals the chromatic number of its complement.) Thus, with computational\n1Using more sophisticated methods, it is now known that the log(k) factor can be removed (e.g., [3]). However, we will stick with this slightly less tight analysis for simplicity.\nconstraints, one cannot hope to obtain a bound better than Õ( √ kT ). That being said, we note that this is only a worstcase result, and in practice or for specific classes of graphs, computing a good clique partition might be relatively easy. A second disadvantage of the algorithm is that it is not applicable for an observation structure that changes with time."
    }, {
      "heading" : "4 The ELP Algorithm",
      "text" : "We now turn to present the ELP algorithm (which stands for “Exponentially-weighted algorithm with Linear Programming”). Like all multi-armed bandits algorithms, it is based on a tradeoff between exploration and exploitation. However, unlike standard algorithms, the exploration component is not uniform over the actions, but is chosen carefully to reflect the graph structure at each round. In fact, the optimal choice of the exploration requires us to solve a simple linear program, hence the name of the algorithm. Below, we present the pseudo-code as well as a couple of theorems that bound the expected regret of the algorithm under appropriate parameter choices. The proofs of the theorems are deferred to the supplementary material. The first theorem concerns the symmetric observation case, where if choosing action i gives information on action j, then choosing action j must also give information on i. The second theorem concerns the general case. We note that in both cases the graph Gt may change arbitrarily in time.\nAlgorithm 2 The ELP Algorithm Input: β, {γ(t)}t∈[T ], {si(t)}i∈[k],t∈[T ], neighborhood sets {Ni(t)}i∈[k],t∈[T ]. ∀ j ∈ [k] wj(1) := 1/k. for t = 1, . . . , T do ∀ i ∈ [k] pi(t) := (1− γ(t)) wi(t)∑k\nl=1 wl(k) + γ(t)si(t)\nChoose action it with probability pit(t), and receive reward git(t) Compute ĝj(t) for all j ∈ Nit(t) For all j ∈ [k], let g̃j(t) = ĝj(t)∑\nl∈Nj(t) pl(t) if it ∈ Nj(t), and g̃j(t) = 0 otherwise. ∀ j ∈ [k] wj(t+ 1) = wj(t) exp(βg̃j(t))\nend for"
    }, {
      "heading" : "4.1 Undirected Graphs",
      "text" : "The following theorem provides a regret bound for the algorithm, as well as appropriate parameter choices, in the case of undirected graphs. Later on, we will discuss the case of directed graphs.\nTheorem 2. Suppose that for all t Gt is an undirected graph (i.e., i ∈ Nj(t) if and only if j ∈ Ni(t)). Assume b ≥ 1. Suppose we run Algorithm 2 using some β ∈ (0, 1/2bk), and choosing\n{si(t)}i∈[k] = argmax ∀i si(t)≥0, ∑ i si(t)=1 min j∈[k] ∑ l∈Nj(t) sl(t),\n(which can be easily done via linear programming) and\nγ(t) = βb minj∈[k] ∑ l∈Nj(t) sl(t) .\nAlso, for any graph Gt at round t, let α(Gt) be its independence number (i.e., the size of its largest independent set). Then it holds for any fixed action j that\nT∑ t=1 gj(t)− E [ T∑ t=1 git(t) ] ≤ 5βb2 T∑ t=1 α(Gt) + log(k) β . (2)\nIf we choose β = √ log(k)/5b2 ∑ t α(Gt), then the bound equals\nb √√√√5 log(k) T∑ t=1 α(Gt). (3)\nComparing Thm. 2 with Thm. 1, we note that for any graph Gt, its independence number α(Gt) lower bounds its clique-partition number χ̄(Gt). In fact, the gap between them can be very large (see Sec. 6). Thus, the attainable regret using the ELP algorithm is better than the one attained by the ExpBan algorithm. Moreover, the ELP algorithm is able to deal with time-changing graphs, unlike the ExpBan algorithm.\nHowever, if we take worst-case computational efficiency into account, things are more involved. For the ELP algorithm, the optimal value of β, needed to obtain Eq. (3), requires knowledge of ∑T t=1 α(Gt), but computing or ap-\nproximating the α(Gt) is NP-hard in the worst case. One option is to compute some upper bound c on 1T ∑T t=1 α(Gt).\nGiven such a c, we can optimize β with respect to the new bound, leading to an b √\n5 log(k)cT regret bound. The problem of efficiently approximating or bounding the independence number (or equivalently, the clique number of the complement graph) has been extensively studied, and various algorithms often work quite well in practice (see for instance [2, 6]).\nAnother option is to pick β non-optimally, in a way which does not depend on hard-to-compute values. In particular, picking β = √ log(k)/2b √ T results in the bound O ( 1 T ∑T t=1 α(Gt) )√ log(k)T . If we are guaranteed that 1 T ∑T t=1 α(Gt) ≤ √ k, this results in a non-trivial bound which improves on the standard bandit setting. In contrast, such a guarantee does not help at all the ExpBan algorithm, since even with such a guarantee, finding a non-trivial clique partition is still NP-hard, and its regret will still scale with √ k in the worst case."
    }, {
      "heading" : "4.2 Directed Graphs",
      "text" : "So far, we assumed that the graphs we are dealing with are all undirected. However, a natural extension of this setting is to assume a directed graph, where choosing an action i may give us information on the reward of action j, but not vice-versa.\nIt is readily seen that the ExpBan algorithm would still work in this setting, with the same guarantee. For the ELP algorithm, we can provide the following guarantee:\nTheorem 3. Under the conditions of Thm. 2 (with the relaxation that the graphs Gt may be directed), it holds for any fixed action j that\nT∑ t=1 gj(t)− E [ T∑ t=1 git(t) ] ≤ 5βb2 T∑ t=1 χ̄(Gt),+ log(k) β . (4)\nwhere χ̄(Gt) is the clique-partition number of Gt. If we choose β = √ log(k)/5b2 ∑ t χ̄(Gt), then the bound equals\nb √√√√5 log(k) T∑ t=1 χ̄(Gt). (5)\nNote that this bound is weaker than the one of Thm. 2, since α(Gt) ≤ χ̄(Gt) as discussed earlier. We do not know whether this bound (relying on the clique-partition number) is tight, but we conjecture that the independence number, which appears to be the key quantity in undirected graphs, is not the correct combinatorial measure for the case of directed graphs2. In any case, we note that even with the weaker bound above, the ELP algorithm still seems superior to the ExpBan algorithm, in the sense that it allows us to deal with time-changing graphs, and that an explicit clique decomposition of the graph is not required. Also, we again have here an interesting issue of computational complexity, since computing χ̄(Gt) is NP-hard in the worst case. However, as in the context of Thm. 2, one can simply replace\n2It is possible to construct examples where the analysis of the ELP algorithm necessarily leads to an O( √ k log(k)T ) bound, even when the\nindependence number is 1\nβ by other values, which are efficiently computable and result in somewhat worse regret bounds. For example, if we pick β = O( √ log(k)/b2T ), then we get a bound of the formO ( 1 T ∑T t=1 α(Gt) )√ log(k)T . In contrast, an efficient\nimplementation of the ExpBan algorithm cannot guarantee a regret better than O( √ log(k)kT ) in the worst case."
    }, {
      "heading" : "5 Lower Bound",
      "text" : "The following theorem provides a lower bound on the regret in terms of the independence number α(G), for a constant graph Gt = G.\nTheorem 4. SupposeGt = G for all t, and that actions which are not linked inG get no side-observations whatsoever between them. Then there exists a (randomized) adversary strategy, such that for every T ≥ 374α(G)3 and any learning strategy, the expected regret is at least 0.06 √ α(G)T .\nA proof is provided in the supplementary material. The intuition of the proof is that if the graph G has α(G) independent vertices, then an adversary can make this problem as hard as a standard multi-armed bandits problem, played on α(G) actions. Using a known lower bound of Ω( √ nT ) for multi-armed bandits on n actions, our result follows3. For constant undirected graphs, this lower bound matches the regret upper bound for the ELP algorithm (Thm. 2) up to logarithmic factors. For directed graphs, we see that the difference between them boils down to the difference between χ̄(G) and α(G). For many well-behaved graphs, this gap is rather small. However, if we look at any possible graph, the difference can be huge - see the next section for details."
    }, {
      "heading" : "6 Examples",
      "text" : "Here, we briefly discuss some concrete examples of graphsG, and show how the regret performance of our algorithms depend on their structure. An interesting issue to notice is the potential gap between the performance of our algorithms, through the graph’s independence number α(G) and clique-partition number χ̄(G).\nFirst, consider the case where there exists a single action, such that choosing it reveals the rewards of all the other actions. In contrast, choosing the other actions only reveal their own reward. At first blush, it may seem that having such a “super-action”, which reveals everything that happens in the current round, should help us improve our regret. However, the independence number α(G) of such a graph is easily seen to be k − 1. Based on our lower bound, we see that this “super-action” is actually not helpful at all (up to negligible factors).\nSecond, consider the case where the actions are endowed with some metric distance function, and edge (i, j) is in G if and only if the distance between i, j is at most some fixed constant r. We can think of each action i as being in the center of a sphere of radius r, such that the reward of action i is propagated to every other action in that sphere. In this case, α(G) is essentially the number of non-overlapping spheres we can pack in G. In contrast, χ̄(G) is essentially the number of spheres we need to cover G. Both numbers shrink rapidly as r increases, improving the regret of our algorithms. However, the sphere covering size can be much larger than the sphere packing size. For example, if the actions are placed as the elements in {0, 1/2, 1}n, we use the l∞ metric, and r ∈ (1/2, 1), it is easily seen that the sphere packing number is just 1. In contrast, the sphere covering number is at least 2n = klog3(2) ≈ k0.63, since we need a separate sphere to cover every element in the corners {0, 1}n.\nThird, consider the random Erdös - Rényi graph G = G(k, p), which is formed by linking every action i to every action j with probability p independently. It is well known that when p is a constant, the independence number α(G) of this graph is only O(log(k)), whereas the clique-partition number χ̄(G) is at least Ω(k/ log(k)). This translates to a regret bound of O( √ kT ) for the ExpBan algorithm, and only O( √ log2(k)T ) for the ELP algorithm. Such a gap\nwould also hold for a directed random graph.\n3We note that if the maximal degree of every node is bounded by d, it is possible to get the lower bound for T ≥ Ω(d2α(G)) (as opposed to T ≥ Ω(α(G)3)); see the proof for details."
    }, {
      "heading" : "7 Empirical Performance Gap between ExpBan and ELP",
      "text" : "In this section, we show that the gap between the performance of the ExpBan algorithm and the ELP algorithm can be real, and is not just an artifact of our analysis.\nTo show this, we performed the following simple experiment: we created a random Erdös - Rényi graph over 300 nodes, where each pair of nodes were linked independently with probability p. Choosing any action results in observing the rewards of neighboring actions in the graph. The reward of each action at each round was chosen randomly and independently to be 1 with probability 1/2 and 0 with probability 1/2, except for a single node, whose reward equals 1 with a higher probability of 3/4. We then implemented the ExpBan and ELP algorithms in this setting, for T = 30, 000. For comparison, we also implemented the standard EXP3 multi-armed bandits algorithm [4], which doesn’t use any side-observations. All the parameters were set to their theoretically optimal values, based on the regret bounds. The experiment was repeated for varying values of p and over 10 independent runs.\nThe results are displayed in Figure 1. The X-axis is the iteration number, and the Y -axis is the mean payoff obtained so far, averaged over the 10 runs (the variance in the numbers was minuscule, and therefore we do not report confidence intervals). For p = 0.05, the graph is rather empty, and the advantage of using side observations is not large. As a result, all 3 algorithms perform roughly the same for this choice of T . As p increases, the value of side-obervations increase, and the the performance of our two algorithms, which utilize side-observations, improves over the standard multi-armed bandits algorithm. Moreover, for intermediate values of p, there is a noticeable gap between the performance of ExpBan and ELP. This is exactly the regime where the gap between the clique partition number (governing the regret bound of ExpBan) and the independence number (governing the regret bound for the ELP algorithm) tends to be larger as well4. Finally, for large p, the graph is almost complete, and the advantage of ELP over ExpBan becomes small again (since most actions give information on most other actions)."
    }, {
      "heading" : "8 Discussion",
      "text" : "In this paper, we initiated a study of a large family of online learning problems with side observations. In particular, we studied the broad regime which interpolates between the experts setting and the bandits setting of online learning. We provided algorithms, as well as upper and lower bounds on the attainable regret. The regret seems to have an interesting and non-trivial dependence on the information feedback structure. Moreover, the results lead to what seems like a trade-off between the information-theoretically attainable regret, and what can be attained with computationally efficient methods, at least from a worst-case viewpoint. This contributes to an ongoing line of work which explores the relationship between the information-theoretic and computational aspects of learning (e.g., [13, 14]).\n4Intuitively, this can be seen by considering the extreme cases - for a complete graph over k nodes, both numbers equal 1, and for an empty graph over k nodes, both numbers equal k. For constant p ∈ (0, 1), there is a real gap between the two, as discussed in Sec. 6\nThere are many open questions that warrant further study. First, the upper and lower bounds essentially match only in particular settings (i.e., in undirected graphs and ignoring computational constraints). Can this gap be narrowed or closed? Second, while we used certain graph theoretical combinatorial parameters for the upper and lower bounds, there might be other, information-theoretic parameters which more fully capture the essence of the problem in its full generality. Third, our lower bounds depend on a reduction which essentially assumes that the graph is constant over time. We do not have a lower bound for changing graphs. Fourth, our results hint towards a tradeoff between regret performance and computational complexity. A formal result indicating that it is provably hard to get the optimal regret would be interesting.\nThe model we have studied assumed that the observation structure is known. In many practical cases, it is unlikely that the graph structure is known. The observation structure may be known approximately, or just locally (i.e., the decision maker on knows the local neighborhood). It would be interesting to study such a setup and see if other “random-combinatorial” properties affect the performance of relevant algorithms."
    }, {
      "heading" : "A Supplementary Material: Proofs",
      "text" : "A.1 Proof of Thm. 1 Suppose we split the actions into c cliquesC1, C2, . . . , Cc. First, let us consider the expected regret of the exponentially weighted forecaster ran over any such clique. Denoting the actions of the clique by 1, . . . , n, the forecaster works as follows: first, it initializes weights w1, . . . , wn to be 1. At each round, it picks an action i with probability wi/ ∑ wi, receives the reward gi(t), and observes the noisy reward value ĝj(t) for each of the other actions. It then updates wi = wi exp(βĝi(t)) (for some parameter β ∈ (0, 1/b)) for all i = 1, . . . , n.\nThe analysis of this algorithm is rather standard, with the main twist being that we only observe unbiased estimates of the rewards, rather than the actual reward. For completeness, we provide this analysis in the following lemma.\nLemma 1. The expected regret of the forecaster described above, with respect to the actions in clique |Ci| and under the optimal choice of the parameter β is at most b √ 2 log(|Ci|)T .\nProof. We define the potential function Wt = ∑n j=1 wj(t), and get that\nWt+1 Wt ≤ n∑ j=1 wj(t)∑n l=1 wl(t) exp(βg̃j(t)).\nFor notational convenience, let pj(t) = wj(t)∑n l=1 wl(t)\n. Since g̃j(t) ≤ b, and β ≤ 1/b, we have βg̃j(t) ≤ 1. Thus, we can use the inequality exp(x) ≤ 1 + x+ 2x2 (which holds for any x ≤ 1), and get the upper bound\nn∑ j=1 pj(t) ( 1 + βg̃j(t) + 2β 2g̃j(t) 2 ) = 1 + β n∑ j=1 g̃j(t) + 2β 2 n∑ j=1 pj(t)g̃j(t) 2.\nTaking logarithms and using the fact that log(1 + x) ≤ x, we get\nlog ( Wt+1 Wt ) ≤ β n∑ j=1 pj(t)g̃j(t) + 2β 2 n∑ j=1 pj(t)g̃j(t) 2.\nSumming over all t, and canceling the resulting telescopic series, we get\nlog ( WT+1 W1 ) ≤ T∑ t=1 β n∑ j=1 pj(t)g̃j(t) + 2β 2 n∑ j=1 pj(t)g̃j(t) 2  . (6) Also, for any fixed action i, we have\nlog ( WT+1 W1 ) ≥ log ( wi(T + 1) W1 ) = β T∑ t=1 g̃i(t)− log(n). (7)\nCombining Eq. (6) with Eq. (7) and rearranging, we get\nT∑ t=1 g̃i(t)− T∑ t=1 n∑ j=1 pj(t)g̃j(t) ≤ log(n) β + 2β T∑ t=1 n∑ j=1 pj(t)g̃j(t) 2.\nTaking expectations on both sides, and using the facts that E[g̃j(t)] = gj(t) for all j, t, and |g̃j(t)| ≤ b with probability 1, we get\nT∑ t=1 gi(t)− T∑ t=1 n∑ j=1 pj(t)gj(t) ≤ log(n) β + 2βb2T.\nThus, by picking β = √ log(n)/2b2T , we get that the expected regret is at most b √ 2 log(n)T .\nNow, we define each such forecaster (one per clique Ci) as a meta-action, and run the EXP3 algorithm on the c meta-actions. By the standard guarantee for this algorithm (see corollary 3.2 in [4]), the expected regret incurred by that algorithm with respect to any fixed meta-action is at most 3b √ c log(c)T . Combining this with Lemma 1, we get that the total expected regret of the ExpBan algorithm with respect to any single action is at most\nmax i b √ 2 log(|Ci|)T + 3b √ c log(c)T ≤ b √ 2 log(k)T + 3b √ c log(k)T ,\nwhich is at most 5b √ log(k)cT since c ≥ 1.\nA.2 Proof of Thm. 2 To prove the theorem, we will need three lemmas. The first one is straightforward and follows from the definition of g̃\n( jt). The second is a key combinatorial inequality. We were unable to find an occurrence of this inequality in any previous literature, although we are aware of very special cases proven in the context of cyclic sums (see for instance [5]). The third lemma allows us to derive a more explicit bound by examining a particular choice of {si(t)}i∈[k],t∈[T ]. Lemma 2. For all fixed t, j, we have\nE [g̃j(t)] = gj(t)\nas well as\nE  k∑ j=1 pj(t)g̃j(t) 2  ≤ b2 k∑ j=1 pj(t)∑ l∈Nj(t) pl(t) .\nProof. It holds that\nE [ g̃ij(t) ] = k∑ i=1 pi(t)E[g̃j(t) | action i was picked] = ∑\ni∈Nj(t)\npi(t) gj(t)∑\nl∈Nj(t) pl(t) = gj(t).\nAs to the second part, we have\nE  k∑ j=1 pj(t)g̃j(t) 2  = k∑ i,j=1 pj(t)pi(t)E [ g̃j(t) 2 | action i was picked ]\n≤ k∑ j=1 ∑ i∈Nj(t) pj(t)pi(t) b2(∑ l∈Nj(t) pl(t) )2 = b2 k∑ j=1 pj(t)∑ l∈Nj(t) pl(t) .\nLemma 3. Let G be a graph over k nodes, and let α(G) denote the independence number of G (i.e., the size of its largest independent set). For any j ∈ [k], define Nj to be the nodes adjacent to node j (including node j). Let p1, . . . , pk be arbitrary positive weights assigned to the node. Then it holds that\nk∑ i=1 pi∑ l∈Ni pl ≤ α(G).\nProof. We will actually prove the claim for any nonnegative weights p1, . . . , pk (i.e., they are allowed to take 0 values), under the convention that if pj = 0 and ∑ l∈Nj pi = 0 as well, then ∑k i=1 pi/ ∑ l∈Ni pi = 1.\nSuppose on the contrary that there exist some values for p1, . . . , pk such that ∑k i=1 pi/ ∑ l∈Ni pi > α(G). Now,\nif p1, . . . , pk are non-zero only on an independent set S, then\nk∑ i=1 pi∑ l∈Ni pi = ∑ i∈S pi pi = |S|.\nSince |S| ≤ α(G), it follows that there exist some adjacent nodes r, s such that pr, ps > 0. However, we will show that in that case, we can only increase the value of ∑k i=1 pi/ ∑ l∈Ni pi by shifting the entire weight pr + ps to either node r or node s, and putting weight 0 at the other node. By repeating this process, we are guaranteed to eventually arrive at a configuration where the weights are non-zero on an independent set. But we’ve shown above that in that case, ∑k i=1 pi/ ∑ l∈Ni pi ≤ α(G), so this means the value of this expression with respect to the original configuration was at most α(G) as well. To show this, let us fix pr + ps = c (so that ps = c− pr) and consider how the value of the expression changes as\nwe vary pr. The sum in the expression ∑k i=1 pi/ ∑ l∈Ni pi can be split to 6 parts: when i = r, when i = s, when i is a node adjacent to s but not to r, when i is adjacent to r but not to s, when i is adjacent to both, and when i is adjacent to neither of them. Decomposing the sum in this way, so that pr appears everywhere explicitly, we get\npr c+ ∑ l∈Nr\\r,s pl + c− pr c+ ∑ l∈Nj\\r,s pl\n+ ∑\ni:{r,s}∩Ni=s\npi c− pr + ∑ l∈Ni\\s pl\n+ ∑\ni:{r,s}∩Ni=r\npi pr + ∑ l∈Ni\\r pl\n+ ∑\ni:i/∈{r,s},r,s⊆Ni\npi c+ ∑ l∈Ni\\{r,s} pl\n+ ∑\ni:{r,s}∩Ni=∅\npi∑ l∈Ni pl .\nIt is readily seen that each of the 6 elements in the sum above is convex in pr. This implies that the maximum of this expression is attained at the extremes, namely either pr = 0 (hence ps = c) or pr = c (hence ps = 0). This proves that indeed shifting weights between adjacent nodes can only increase the value of ∑k i=1 pi/ ∑ l∈Ni pi, and as discussed earlier, implies the result stated in the lemma.\nLemma 4. Consider a graphG over nodes 1, . . . , k, and let α(G) be its independence number. For any j ∈ [k], define Nj to be the nodes adjacent to node j (including node j). Then there exist values of s1, . . . , sk on the k-simplex, such that\n1 minj∈[k] ∑ l∈Nj sl ≤ α(G). (8)\nProof. Let S be a largest independent set of G, so that |S| = α(G). Consider the following specific choice for the values of s1, . . . , sk: For any j such that j ∈ S, let sj = 1/α(G), and sj = 0 otherwise. Suppose there was some node j such that ∑ l∈Nj sl = 0. By the way we chose values for s1, . . . , sk, this implies that node j is not adjacent to any node in S, so S ∪ {j} would also be an independent set, contradicting the assumption that S is a largest independent set. But since each value of sl is either 0 or 1/α(G), it follows that ∑ l∈Nj sl > 1/α(G). This is true for any node j, from which Eq. (8) follows.\nWe now turn to the proof of the theorem itself.\nProof of Thm. 2. With the key lemmas at hand, most of the remaining proof is rather similar to the standard analysis for multi-armed bandits (e.g., [4]). We define the potential function Wt = ∑k j=1 wj(t), and get that\nWt+1 Wt ≤ k∑ j=1 wj(t)∑k l=1 wl(t) exp(βg̃j(t)). (9)\nWe have that βg̃j(t) ≤ 1, since by definition of β and g̃j(t),\nβg̃j(t) ≤ β∑ l∈Nj(t) pl(t) ≤ β∑ l∈Nj(t) γ(t)sl(t) = β∑ l∈Nj(t) sl(t)\nminj∈[k] ∑ l∈Nj(t) sl(t)\nβb ≤ 1 b ≤ 1.\nUsing the definition of pj(t) and the inequality exp(x) ≤ 1 + x+ 2x2 for any x ≥ 1, we can upper bound Eq. (9) by k∑ j=1 pj(t)− γ(t)sj(t) 1− γ(t) ( 1 + βg̃j(t) + 2β 2g̃j(t) 2 )\n≤ 1 + β 1− γ(t) k∑ j=1 pj(t)g̃j(t) + 2β2 1− γ(t) k∑ j=1 pj(t)g̃j(t) 2.\nTaking logarithms and using the fact that log(1 + x) ≤ x, we get\nlog ( Wt+1 Wt ) ≤ β 1− γ(t) k∑ j=1 pj(t)g̃j(t) + 2β2 1− γ(t) k∑ j=1 pj(t)g̃j(t) 2.\nSumming over all t, and canceling the resulting telescopic series, we get\nlog ( WT+1 W1 ) ≤ T∑ t=1 k∑ j=1\nβ 1− γ(t)pj(t)g̃j(t) + T∑ t=1 k∑ j=1 (exp(1)− 2)β2 1− γ(t) pj(t)g̃j(t) 2. (10)\nAlso, for any fixed action i, we have\nlog ( WT+1 W1 ) ≥ log ( wi(T + 1) W1 ) = β T∑ t=1 g̃i(t)− log(k). (11)\nCombining Eq. (10) with Eq. (11) and rearranging, we get\nβ T∑ t=1 g̃i(t)− T∑ t=1 k∑ j=1\nβ 1− γ(t)pj(t)g̃j(t) ≤ log(k) + T∑ t=1 k∑ j=1 2β2 1− γ(t)pj(t)g̃j(t) 2.\nTaking expectations on both sides, and using Lemma 2, we get\nβ T∑ t=1 gi(t)− T∑ t=1 k∑ j=1\nβ 1− γ(t)pj(t)gj(t) ≤ log(k) + T∑ t=1 k∑ j=1 2b2β2 1− γ(t) pj(t)∑ l∈Nj(t) pl(t) .\nAfter some slight manipulations, and using the fact that gj(t) ∈ [0, 1] for all j, t, we get T∑ t=1 gi(t)− T∑ t=1 k∑ j=1 pj(t)gj(t) ≤ T∑ t=1 γ(t) + log(k) β + T∑ t=1 2b2β 1− γ(t) k∑ j=1 pj(t)∑ l∈Nj(t) pl(t) .\nWe note that 1/(1− γ(t)) can be upper bounded by 2, since by definition of si(t),\nγ(t) = βb maxa1,...,ak minj∈[k] ∑ l∈Nj(t) al(t) ≤ βb minj∈[k] ∑ l∈Nj(t)(1/k) ≤ βbk ≤ 1/2.\nPlugging this in as well as our choice of γ(t) in the ∑ t γ(t) term, and slightly simplifying, we get the upper bound\nT∑ t=1 gi(t)− T∑ t=1 E[gj(t)] ≤ βb2  T∑ t=1\n1 minj∈[k] ∑ l∈Nj(t) sl(t) + 4 k∑ j=1 pj(t)∑ l∈Nj(t) pl(t) + log(k) β . (12)\nNow, we recall that the {si(t)} terms were chosen so as to minimize the bound above. Thus, we can upper bound it by any fixed choice of {si(t)}. Invoking Lemma 4, as well as Lemma 3, the theorem follows.\nA.3 Proof of Thm. 3 The proof is very similar to the one of Thm. 2, so we’ll only point out the differences.\nReferring to the proof of Thm. 2 in Subsection A.2, The analysis is identical up to Eq. (12). To upper bound the terms there, we can still invoke Lemma 4. However, Lemma 3, which was used to upper bound ∑k j=1 pj(t)/ ∑ l∈Nj(t) pl(t), not longer applies (in fact, one can show specific counter-examples). Thus, in lieu of Lemma 3, we will opt for the following weaker bound: Let C1, . . . , Cχ̄(Gt) be a smallest possible clique partition of Gt. Then we have\nχ̄(Gt)∑ i=1 ∑ j∈Ci pj(t)∑ l∈Nj(t) pl(t) ≤ χ̄(Gt)∑ i=1 ∑ j∈Ci pj(t)∑ l∈Ci pl(t) = χ̄(Gt).\nPlugging this upper bound as well as Lemma 4 into Eq. (12), and using the fact that α(Gt) ≤ χ̄(Gt) for any graph Gt, the result follows.\nA.4 Proof of Theorem 4 Suppose that we are given a graph G with an independence number α(G). Let N denote an independent set of α(G) nodes (i.e., no two nodes are connected). Suppose we have an algorithm A with a low expected regret for every sequence of rewards. We will use this algorithm to form an algorithm for the standard multi-armed bandits problem (with no-side observations). We will then resort to the known lower bound for this problem, to get a lower bound for our setting as well.\nConsider first a standard multi-armed bandits game on α(G) actions (with no side-observations), with the following randomized strategy for the adversary: the adversary picks one of the α(G) actions uniformly at random, and at each round, assigns it a random Bernoulli reward with parameter 1/2+ (where will be specified later). The other actions are assigned a random Bernoulli reward with parameter 1/2. Roughly speaking, Theorem 6.11 of [7] shows that with this strategy and for = Θ( √ α(G)/T ), the expected regret of any learning algorithm is at least Ω( √ α(G)T ).\nNow, suppose that for the setting with side-observations, played over the graph G, there exists a learning strategy A that achieves expected cumulative regret of at most RA(T ), for the graph G over T rounds, with respect to any adversary strategy. We will now show how to use A for the standard multi-armed bandits game described above. To that end, arbitrarily assign the α(G) actions to the α(G) independent nodes in N . We will then implement the following strategy A′: whenever A chooses one of the actions inN , we choose the corresponding action in the multiarmed bandits problem and feed the reward back toA (the reward of all neighboring nodes is 0, which we feed back to A as well). Whenever A chooses a node j not inN , we use the next |Nj ∩N| rounds (where Nj is the neighborhood set of j) to do “pure exploration:” we go over all the neighbors of node j that belong to N in some fixed order, and choose each of them once (since rewards are assumed stochastic the order does not matter). Nodes inNj\\N are known to yield a reward of 0. The rewards of node j and all its neighbors are then fed to A, as if they were side observations obtained in a single round by choosing a node not in N . Since the rewards are chosen i.i.d., the distribution of these rewards is identical to the case where A was really implemented with side-observations. We denote RA′(T ) as the expected regret of this strategy A′, after T rounds.\nWe make the following observation: suppose A achieves an expected regret satisfying RA(T ) ≤ √ α(G)T\n(we can assume this since our goal is to provide a lower bound which will only be smaller). Then the number of times A chose actions outside N must be smaller than 2 √ α(G)T . This is because whenever A chooses an action not in N it receives a reward of 0 while the highest expected reward is bigger than 1/2, so the expected per-round regret would increase by at least 1/2.\nWe apply A′ at each round, till A is called T times. Let T ′ be the (possibly random) number of rounds which elapsed. It holds that T ′ ≥ T , since we have the T ′ − T pure exploration rounds where A is not called. In these exploration rounds, we pull arms inN , so our expected regret in those rounds is at most . Moreover, by the observation above, the number of such rounds is at most 2α(G) √ α(G)T , since A may choose an action outside N at most\n2 √ α(G)T times, and this follows by at most |N | = α(G) pure exploration steps. In rounds where we do not do exploration steps, the expected per-round regret of A′ is the same as the expected per-round regret of A. Overall, this implies that\nRA′(T ′) ≤ RA(T ) + 2 α(G) √ α(G)T (13)\nSince the expected regret is monotone in the number of rounds, we can lower boundRA′(T ′) byRA′(T ). Rearranging, we get\nRA(T ) ≥ RA′(T )− 2 α(G) √ α(G)T .\nNow, A′ is a strategy for the standard multi-armed bandits setting, with a randomized adversary strategy which is identical to the one used to establish the lower bound of [7, Theorem 6.11]. Using this lower bound, by selecting = √ c1α(G)/T with c1 = 1/(8 ln(4/3)), we obtain\nRA(T ) ≥ √ Tα(G)c2 − 2 √ c1α(G) 2, (14)\nwhere the first term of the right hand side comes from Page 168 in [7] and\nc2 =\n√ 2− 1√\n32 ln(4/3) .\nSince T ≥ 16α(G)3c1/c22, we have that RA(T ) ≥ √ Tα(G)c2/2. Plugging in the values of c1, c2 above, the result follows. Finally, we note that if the maximal degree of any node in G is bounded by d, then Eq. (13) can be improved to\nRA′(T ′) ≤ RA(T ) + 2 d √ α(G)T ,\nsince the number of pure-exploration steps following a call to A is at most d rather than α(G). Repeating the analysis above, we get that Eq. (14) is replaced by\nRA(T ) ≥ √ Tα(G)c2 − 2 √ c1dα(G).\nThis allows us to give the same lower bound, for any T ≥ 16α(G)d2c1/c22, as opposed to T ≥ 16α(G)3c1/c22 as before."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2017,
    "abstractText" : "<lb>We consider an adversarial online learning setting where a decision maker can choose an action in every stage<lb>of the game. In addition to observing the reward of the chosen action, the decision maker gets side observations on<lb>the reward he would have obtained had he chosen some of the other actions. The observation structure is encoded<lb>as a graph, where node i is linked to node j if sampling i provides information on the reward of j. This setting<lb>naturally interpolates between the well-known “experts” setting, where the decision maker can view all rewards, and<lb>the multi-armed bandits setting, where the decision maker can only view the reward of the chosen action. We develop<lb>practical algorithms with provable regret guarantees, as well as partially-matching lower bounds. The regret depends<lb>on non-trivial graph theoretic properties of the information feedback structure, and reveals an interesting trade-off<lb>between regret optimality and computational efficiency.",
    "creator" : "LaTeX with hyperref package"
  }
}