{
  "name" : "1302.3639.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "A Latent Source Model for Nonparametric Time Series Classification",
    "authors" : [ "George H. Chen", "Stanislav Nikolov", "Devavrat Shah" ],
    "emails" : [ "georgehc@mit.edu", "snikolov@twitter.com", "devavrat@mit.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "For classifying time series, a nearest-neighbor approach is widely used in practice with performance often competitive with or better than more elaborate methods such as neural networks, decision trees, and support vector machines. We develop theoretical justification for the effectiveness of nearest-neighbor-like classification of time series. Our guiding hypothesis is that in many applications, such as forecasting which topics will become trends on Twitter, there aren’t actually that many prototypical time series to begin with, relative to the number of time series we have access to, e.g., topics become trends on Twitter only in a few distinct manners whereas we can collect massive amounts of Twitter data. To operationalize this hypothesis, we propose a latent source model for time series, which naturally leads to a “weighted majority voting” classification rule that can be approximated by a nearest-neighbor classifier. We establish nonasymptotic performance guarantees of both weighted majority voting and nearest-neighbor classification under our model accounting for how much of the time series we observe and the model complexity. Experimental results on synthetic data show weighted majority voting achieving the same misclassification rate as nearest-neighbor classification while observing less of the time series. We then use weighted majority to forecast which news topics on Twitter become trends, where we are able to detect such “trending topics” in advance of Twitter 79% of the time, with a mean early advantage of 1 hour and 26 minutes, a true positive rate of 95%, and a false positive rate of 4%."
    }, {
      "heading" : "1 Introduction",
      "text" : "Recent years have seen an explosion in the availability of time series data related to virtually every human endeavor — data that demands to be analyzed and turned into valuable insights. A key recurring task in mining this data is being able to classify a time series. As a running example used throughout this paper, consider a time series that tracks how much activity there is for a particular news topic on Twitter. Given this time series up to present time, we ask “will this news topic go viral?” Borrowing Twitter’s terminology, we label the time series a “trend” and call its corresponding news topic a trending topic if the news topic goes viral; otherwise, the time series has label “not trend”. We seek to forecast whether a news topic will become a trend before it is declared a trend (or not) by Twitter, amounting to a binary classification problem. Importantly, we skirt the discussion of what makes a topic considered trending as this is irrelevant to our mathematical development.1 Furthermore, we remark that handling the case where a single time series can have different labels at different times is beyond the scope of this paper.\n1While it is not public knowledge how Twitter defines a topic to be a trending topic, Twitter does provide information for which topics are trending topics. We take these labels to be ground truth, effectively treating how a topic goes viral to be a black box supplied by Twitter.\nar X\niv :1\n30 2.\n36 39\nv5 [\nst at\n.M L\n] 1\n3 D\nec 2\nNumerous standard classification methods have been tailored to classify time series, yet a simple nearest-neighbor approach is hard to beat in terms of classification performance on a variety of datasets [22], with results competitive to or better than various other more elaborate methods such as neural networks [17], decision trees [18], and support vector machines [21]. More recently, researchers have examined which distance to use with nearest-neighbor classification [3, 8, 20] or how to boost classification performance by applying different transformations to the time series before using nearest-neighbor classification [2]. These existing results are mostly experimental, lacking theoretical justification for both when nearest-neighbor-like time series classifiers should be expected to perform well and how well.\nIf we don’t confine ourselves to classifying time series, then as the amount of data tends to infinity, nearest-neighbor classification has been shown to achieve a probability of error that is at worst twice the Bayes error rate, and when considering the nearest k neighbors with k allowed to grow with the amount of data, then the error rate approaches the Bayes error rate [6]. However, rather than examining the asymptotic case where the amount of data goes to infinity, we instead pursue nonasymptotic performance guarantees in terms of how large of a training dataset we have and how much we observe of the time series to be classified. To arrive at these nonasymptotic guarantees, we impose a low-complexity structure on time series.\nOur contributions. We present a model for which nearest-neighbor-like classification performs well by operationalizing the following hypothesis: In many time series applications, there are only a small number of prototypical time series relative to the number of time series we can collect. For example, posts on Twitter are generated by humans, who are often behaviorally predictable in aggregate. This suggests that topics they post about only become trends on Twitter in a few distinct manners, yet we have at our disposal enormous volumes of Twitter data. In this context, we present a novel latent source model: time series are generated from a small collection of m unknown latent sources, each having one of two labels, say “trend” or “not trend”. Our model’s maximum a posteriori (MAP) time series classifier can be approximated by weighted majority voting, which compares the time series to be classified with each of the time series in the labeled training data. Each training time series casts a weighted vote in favor of its ground truth label, with the weight depending on how similar the time series being classified is to the training example. The final classification is “trend” or “not trend” depending on which label has the higher overall vote. The voting is nonparametric in that it does not learn parameters for a model and is driven entirely by the training data. The unknown latent sources are never estimated; the training data serve as a proxy for these latent sources. Weighted majority voting itself can be approximated by a nearest-neighbor classifier, which we also analyze.\nUnder our model, we show sufficient conditions so that if we have n = Θ(m log mδ ) time series in our training data, then weighted majority voting and nearest-neighbor classification correctly classify a new time series with probability at least 1− δ after observing its first Ω(log mδ ) time steps. As our analysis accounts for how much of the time series we observe, our results readily apply to the “online” setting in which a time series is to be classified while it streams in (as is the case for forecasting trending topics) as well as the “offline” setting where we have access to the entire time series. Also, while our analysis yields matching error upper bounds for the two classifiers, experimental results on synthetic data suggests that weighted majority voting outperforms nearest-neighbor classification early on when we observe very little of the time series to be classified. Meanwhile, a specific instantiation of our model leads to a spherical Gaussian mixture model, where the latent sources are Gaussian mixture components. We show that existing performance guarantees on learning spherical Gaussian mixture models [7, 11, 19] require more stringent conditions than what our results need, suggesting that learning the latent sources is overkill if the goal is classification.\nLastly, we apply weighted majority voting to forecasting trending topics on Twitter. We emphasize that our goal is precognition of trends: predicting whether a topic is going to be a trend before it is actually declared to be a trend by Twitter or, in theory, any other third party that we can collect ground truth labels from. Existing work that identify trends on Twitter [4, 5, 15] instead, as part of their trend detection, define models for what trends are, which we do not do, nor do we assume we have access to such definitions. (The same could be said of previous work on novel document detection on Twitter [12, 13].) In our experiments, weighted majority voting is able to predict whether a topic will be a trend in advance of Twitter 79% of the time, with a mean early advantage of 1 hour and 26 minutes, a true positive rate of 95%, and a false positive rate of 4%. We empirically find that the Twitter activity of a news topic that becomes a trend tends to follow one of a finite number of patterns, which could be thought of as latent sources.\nOutline. Weighted majority voting and nearest-neighbor classification for time series are presented in Section 2. We provide our latent source model and theoretical performance guarantees of weighted majority voting and nearest-neighbor classification under this model in Section 3. Experimental results for synthetic data and forecasting trending topics on Twitter are in Section 4."
    }, {
      "heading" : "2 Weighted Majority Voting and Nearest-Neighbor Classification",
      "text" : "Given a time-series2 s : Z → R, we want to classify it as having either label +1 (“trend”) or −1 (“not trend”). To do so, we have access to labeled training data R+ and R−, which denote the sets of all training time series with labels +1 and −1 respectively. Weighted majority voting. Each positively-labeled example r ∈ R+ casts a weighted vote e−γd\n(T )(r,s) for whether time series s has label +1, where d(T )(r, s) is some measure of similarity between the two time series r and s, superscript (T ) indicates that we are only allowed to look at the first T time steps (i.e., time steps 1, 2, . . . , T ) of s (but we’re allowed to look outside of these time steps for the training time series r), and constant γ ≥ 0 is a scaling parameter that determines the “sphere of influence” of each example. Similarly, each negatively-labeled example in R− also casts a weighted vote for whether time series s has label −1. The similarity measure d(T )(r, s) could, for example, be squared Euclidean distance: d(T )(r, s) =∑T t=1(r(t) − s(t))2 , ‖r − s‖2T . However, this similarity measure only looks at the first T time steps of training time series r. Since time series in our training data are known, we need not restrict our attention to their first T time steps. Thus, we use the following similarity measure:\nd(T )(r, s) = min ∆∈{−∆max,...,0,...,∆max} T∑ t=1 (r(t+∆)−s(t))2 = min ∆∈{−∆max,...,0,...,∆max} ‖r∗∆−s‖2T , (1) where we minimize over integer time shifts with a pre-specified maximum allowed shift ∆max ≥ 0. Here, we have used q∗∆ to denote time series q advanced by ∆ time steps, i.e., (q∗∆)(t) = q(t+∆). Finally, we sum up all of the weighted +1 votes and then all of the weighted −1 votes. The label with the majority of overall weighted votes is declared as the label for s:\nL̂(T )(s; γ) =\n{ +1 if ∑ r∈R+ e −γd(T )(r,s) ≥ ∑ r∈R− e −γd(T )(r,s),\n−1 otherwise. (2)\nUsing a larger time window size T corresponds to waiting longer before we make a prediction. We need to trade off how long we wait and how accurate we want our prediction. Note that knearest-neighbor classification corresponds to only considering the k nearest neighbors of s among all training time series; all other votes are set to 0. With k = 1, we obtain the following classifier:\nNearest-neighbor classifier. Let r̂ = arg minr∈R+∪R− d(T )(r, s) be the nearest neighbor of s. Then we declare the label for s to be:\nL̂ (T ) NN (s) = { +1 if r̂ ∈ R+, −1 if r̂ ∈ R−.\n(3)"
    }, {
      "heading" : "3 A Latent Source Model and Theoretical Guarantees",
      "text" : "We assume there to be m unknown latent sources (time series) that generate observed time series. Let V denote the set of all such latent sources; each latent source v : Z → R in V has a true label +1 or −1. Let V+ ⊂ V be the set of latent sources with label +1, and V− ⊂ V be the set of those with label −1. The observed time series are generated from latent sources as follows:\n1. Sample latent source V from V uniformly at random.3 Let L ∈ {±1} be the label of V . 2We index time using Z for notationally convenience but will assume time series to start at time step 1. 3While we keep the sampling uniform for clarity of presentation, our theoretical guarantees can easily be extended to the case where the sampling is not uniform. The only change is that the number of training data needed will be larger by a factor of 1\nmπmin , where πmin is the smallest probability of a particular latent source\noccurring.\n2. Sample integer time shift ∆ uniformly from {0, 1, . . . ,∆max}. 3. Output time series S : Z → R to be latent source V advanced by ∆ time steps, followed\nby adding noise signal E : Z → R, i.e., S(t) = V (t + ∆) + E(t). The label associated with the generated time series S is the same as that of V , i.e., L. Entries of noise E are i.i.d. zero-mean sub-Gaussian with parameter σ, which means that for any time index t,\nE[exp(λE(t))] ≤ exp (1\n2 λ2σ2\n) for all λ ∈ R. (4)\nThe family of sub-Gaussian distributions includes a variety of distributions, such as a zeromean Gaussian with standard deviation σ and a uniform distribution over [−σ, σ].\nThe above generative process defines our latent source model. Importantly, we make no assumptions about the structure of the latent sources. For instance, the latent sources could be tiled as shown in Figure 1, where they are evenly separated vertically and alternate between the two different classes +1 and −1. With a parametric model like a k-component Gaussian mixture model, estimating these latent sources could be problematic. For example, if we take any two adjacent latent sources with label +1 and cluster them, then this cluster could be confused with the latent source having label −1 that is sandwiched in between. Noise only complicates estimating the latent sources. In this example, the k-component Gaussian mixture model needed for label +1 would require k to be the exact number of latent sources with label +1, which is unknown. In general, the number of samples we need from a Gaussian mixture mixture model to estimate the mixture component means is exponential in the number of mixture components [16]. As we discuss next, for classification, we sidestep learning the latent sources altogether, instead using training data as a proxy for latent sources. At the end of this section, we compare our sample complexity for classification versus some existing sample complexities for learning Gaussian mixture models.\nClassification. If we knew the latent sources and if noise entries E(t) were i.i.d.N (0, 12γ ) across t, then the maximum a posteriori (MAP) estimate for label L given an observed time series S = s is\nL̂ (T ) MAP(s; γ) = { +1 if Λ(T )MAP(s; γ) ≥ 1, −1 otherwise,\n(5)\nwhere\nΛ (T ) MAP(s; γ) ,\n∑ v+∈V+ ∑ ∆+∈D+ exp ( − γ‖v+ ∗∆+ − s‖2T )∑ v−∈V− ∑ ∆−∈D+ exp ( − γ‖v− ∗∆− − s‖2T\n) , (6) and D+ , {0, . . . ,∆max}. However, we do not know the latent sources, nor do we know if the noise is i.i.d. Gaussian. We assume that we have access to training data as given in Section 2. We make a further assumption that the training data were sampled from the latent source model and that we have n different training time series. Denote D , {−∆max, . . . , 0, . . . ,∆max}. Then we approximate the MAP classifier by using training data as a proxy for the latent sources. Specifically, we take ratio (6), replace the inner sum by a minimum in the exponent, replace V+ and V− by R+ and R−, and replace D+ by D to obtain the ratio:\nΛ(T )(s; γ) ,\n∑ r+∈R+ exp ( − γ ( min∆+∈D ‖r+ ∗∆+ − s‖2T ))∑\nr−∈R− exp ( − γ ( min∆−∈D ‖r− ∗∆− − s‖2T )) . (7)\nPlugging Λ(T ) in place of Λ(T )MAP in classification rule (5) yields the weighted majority voting rule (2). Note that weighted majority voting could be interpreted as a smoothed nearest-neighbor approximation whereby we only consider the time-shifted version of each example time series that is closest to the observed time series s. If we didn’t replace the summations over time shifts with minimums in the exponent, then we have a kernel density estimate in the numerator and in the denominator [10, Chapter 7] (where the kernel is Gaussian) and our main theoretical result for weighted majority voting to follow would still hold using the same proof.4\nLastly, applications may call for trading off true and false positive rates. We can do this by generalizing decision rule (5) to declare the label of s to be +1 if Λ(T )(s, γ) ≥ θ and vary parameter θ > 0. The resulting decision rule, which we refer to as generalized weighted majority voting, is thus:\nL̂ (T ) θ (s; γ) = { +1 if Λ(T )(s, γ) ≥ θ, −1 otherwise, (8)\nwhere setting θ = 1 recovers the usual weighted majority voting (2). This modification to the classifier can be thought of as adjusting the priors on the relative sizes of the two classes. Our theoretical results to follow actually cover this more general case rather than only that of θ = 1.\nTheoretical guarantees. We now present the main theoretical results of this paper which identify sufficient conditions under which generalized weighted majority voting (8) and nearest-neighbor classification (3) can classify a time series correctly with high probability, accounting for the size of the training dataset and how much we observe of the time series to be classified. First, we define the “gap” betweenR+ andR− restricted to time length T and with maximum time shift ∆max as:\nG(T )(R+,R−,∆max) , min r+∈R+,r−∈R−,\n∆+,∆−∈D\n‖r+ ∗∆+ − r− ∗∆−‖2T . (9)\nThis quantity measures how far apart the two different classes are if we only look at length-T chunks of each time series and allow all shifts of at most ∆max time steps in either direction.\nOur first main result is stated below. We defer proofs for this section to Appendices A and B. Theorem 1. (Performance guarantee for generalized weighted majority voting) Let m+ = |V+| be the number of latent sources with label +1, and m− = |V−| = m −m+ be the number of latent sources with label−1. For any β > 1, under the latent source model with n > βm logm time series in the training data, the probability of misclassifying time series S with label L using generalized weighted majority voting L̂(T )θ (·; γ) satisfies the bound\nP(L̂(T )θ (S; γ) 6= L) ≤ (θm+ m + m− θm ) (2∆max + 1)n exp ( − (γ − 4σ2γ2)G(T )(R+,R−,∆max) ) +m−β+1. (10)\nAn immediate consequence is that given error tolerance δ ∈ (0, 1) and with choice γ ∈ (0, 14σ2 ), then upper bound (10) is at most δ (by having each of the two terms on the right-hand side be ≤ δ2 ) if n > m log 2mδ (i.e., β = 1 + log 2 δ / logm), and\nG(T )(R+,R−,∆max) ≥ log( θm+m + m− θm ) + log(2∆max + 1) + log n+ log 2 δ\nγ − 4σ2γ2 . (11)\nThis means that if we have access to a large enough pool of labeled time series, i.e., the pool has Ω(m log mδ ) time series, then we can subsample n = Θ(m log m δ ) of them to use as training data. Then with choice γ = 18σ2 , generalized weighted majority voting (8) correctly classifies a new time series S with probability at least 1− δ if\nG(T )(R+,R−,∆max) = Ω ( σ2 ( log (θm+ m + m− θm ) + log(2∆max + 1) + log m δ )) . (12)\nThus, the gap between setsR+ andR− needs to grow logarithmic in the number of latent sourcesm in order for weighted majority voting to classify correctly with high probability. Assuming that the\n4We use a minimum rather a summation over time shifts to make the method more similar to existing time series classification work (e.g., [22]), which minimize over time warpings rather than simple shifts.\noriginal unknown latent sources are separated (otherwise, there is no hope to distinguish between the classes using any classifier) and the gap in the training data grows as G(T )(R+,R−,∆max) = Ω(σ2T ) (otherwise, the closest two training time series from opposite classes are within noise of each other), then observing the first T = Ω(log(θ+ 1θ ) + log(2∆max + 1) + log m δ ) time steps from the time series is sufficient to classify it correctly with probability at least 1− δ. A similar result holds for the nearest-neighbor classifier (3). Theorem 2. (Performance guarantee for nearest-neighbor classification) For any β > 1, under the latent source model with n > βm logm time series in the training data, the probability of misclassifying time series S with label L using the nearest-neighbor classifier L̂(T )NN (·) satisfies the bound\nP(L̂(T )NN (S) 6= L) ≤ (2∆max + 1)n exp ( − 1\n16σ2 G(T )(R+,R−,∆max)\n) +m−β+1. (13)\nOur generalized weighted majority voting bound (10) with θ = 1 (corresponding to regular weighted majority voting) and γ = 18σ2 matches our nearest-neighbor classification bound, suggesting that the two methods have similar behavior when the gap grows with T . In practice, we find weighted majority voting to outperform nearest-neighbor classification when T is small, and then as T grows large, the two methods exhibit similar performance in agreement with our theoretical analysis. For small T , it could still be fairly likely that the nearest neighbor found has the wrong label, dooming the nearest-neighbor classifier to failure. Weighted majority voting, on the other hand, can recover from this situation as there may be enough correctly labeled training time series close by that contribute to a higher overall vote for the correct class. This robustness of weighted majority voting makes it favorable in the online setting where we want to make a prediction as early as possible.\nSample complexity of learning the latent sources. If we can estimate the latent sources accurately, then we could plug these estimates in place of the true latent sources in the MAP classifier and achieve classification performance close to optimal. If we restrict the noise to be Gaussian and assume ∆max = 0, then the latent source model corresponds to a spherical Gaussian mixture model. We could learn such a model using Dasgupta and Schulman’s modified EM algorithm [7]. Their theoretical guarantee depends on the true separation between the closest two latent sources, namely G(T )∗ , minv,v′∈V s.t. v 6=v′ ‖v − v′‖22, which needs to satisfy G(T )∗ σ2 √ T . Then with number of training time series n = Ω(max{1, σ 2T\nG(T )∗ }m log mδ ), gap G (T )∗ = Ω(σ2 log mε ), and number of initial time steps observed\nT = Ω ( max { 1, σ4T 2\n(G(T )∗)2\n} log [ m\nδ max\n{ 1, σ4T 2\n(G(T )∗)2\n}]) , (14)\ntheir algorithm achieves, with probability at least 1 − δ, an additive εσ √ T error (in Euclidean distance) close to optimal in estimating every latent source. In contrast, our result is in terms of gap G(T )(R+,R−,∆max) that depends not on the true separation between two latent sources but instead on the minimum observed separation in the training data between two time series of opposite labels. In fact, our gap, in their setting, grows as Ω(σ2T ) even when their gap G(T )∗ grows sublinear in T . In particular, while their result cannot handle the regime where O(σ2 log mδ ) ≤ G (T )∗ ≤ σ2 √ T , ours can, using n = Θ(m log mδ ) training time series and observing the first T = Ω(log m δ ) time steps to classify a time series correctly with probability at least 1− δ; see Appendix D for details. Vempala and Wang [19] have a spectral method for learning Gaussian mixture models that can handle smallerG(T )∗ than Dasgupta and Schulman’s approach but requires n = Ω̃(T 3m2) training data, where we’ve hidden the dependence on σ2 and other variables of interest for clarity of presentation. Hsu and Kakade [11] have a moment-based estimator that doesn’t have a gap condition but, under a different non-degeneracy condition, requires substantially more samples for our problem setup, i.e., n = Ω((m14 +Tm11)/ε2) to achieve an ε approximation of the mixture components. These results need substantially more training data than what we’ve shown is sufficient for classification.\nTo fit a Gaussian mixture model to massive training datasets, in practice, using all the training data could be prohibitively expensive. In such scenarios, one could instead non-uniformly subsample O(Tm3/ε2) time series from the training data using the procedure given in [9] and then feed the resulting smaller dataset, referred to as an (m, ε)-coreset, to the EM algorithm for learning the latent sources. This procedure still requires more training time series than needed for classification and lacks a guarantee that the estimated latent sources will be close to the true latent sources."
    }, {
      "heading" : "4 Experimental Results",
      "text" : "Synthetic data. We generate m = 200 latent sources, where each latent source is constructed by first sampling i.i.d. N (0, 100) entries per time step and then applying a 1D Gaussian smoothing filter with scale parameter 30. Half of the latent sources are labeled +1 and the other half −1. Then n = βm logm training time series are sampled as per the latent source model where the noise added is i.i.d. N (0, 1) and ∆max = 100. We similarly generate 1000 time series to use as test data. We set γ = 1/8 for weighted majority voting. For β = 8, we compare the classification error rates on test data for weighted majority voting, nearest-neighbor classification, and the MAP classifier with oracle access to the true latent sources as shown in Figure 2(a). We see that weighted majority voting outperforms nearest-neighbor classification but as T grows large, the two methods’ performances converge to that of the MAP classifier. Fixing T = 100, we then compare the classification error rates of the three methods using varying amounts of training data, as shown in Figure 2(b); the oracle MAP classifier is also shown but does not actually depend on training data. We see that as β increases, both weighted majority voting and nearest-neighbor classification steadily improve in performance.\nForecasting trending topics on twitter. We provide only an overview of our Twitter results here, deferring full details to Appendix E. We sampled 500 examples of trends at random from a list of June 2012 news trends, and 500 examples of non-trends based on phrases appearing in user posts during the same month. As we do not know how Twitter chooses what phrases are considered as candidate phrases for trending topics, it’s unclear what the size of the non-trend category is in\n−10 −8 −6 −4 −2 0 2 4 6 8\n0\n10000\n20000\n30000\n40000\n50000\n60000\nco u n t\nP(early) =0.79\nP(late) =0.21〈 early 〉 =2.90 hrs.〈\nlate 〉 =1.08 hrs.\nearly late\n−10 −8 −6 −4 −2 0 2 4 6 8 0\n10000\n20000\n30000\n40000\n50000\nco u n t\nP(early) =0.40\nP(late) =0.60〈 early 〉 =1.29 hrs.〈\nlate 〉 =1.65 hrs.\ncenter\n−10 −8 −6 −4 −2 0 2 4 6 8 hours late\n0\n1000\n2000\n3000\n4000\n5000\n6000\nco u n t\nP(early) =0.13\nP(late) =0.87〈 early 〉 =1.71 hrs.〈\nlate 〉 =2.91 hrs.\nbottom\n0.8\n1.0\ntop\ncenter\nEarly detection vs. position on ROC curve\ncomparison to the size of the trend category. Thus, for simplicity, we intentionally control for the class sizes by setting them equal. In practice, one could still expressly assemble the training data to have pre-specified class sizes and then tune θ for generalized weighted majority voting (8). In our experiments, we use the usual weighted majority voting (2) (i.e., θ = 1) to classify time series, where ∆max is set to the maximum possible (we consider all shifts).\nPer topic, we created its time series based on a pre-processed version of the raw rate of how often the topic was shared, i.e., its Tweet rate. We empirically found that how news topics become trends tends to follow a finite number of patterns; a few examples of these patterns are shown in Figure 3. We randomly divided the set of trends and non-trends into into two halves, one to use as training data and one to use as test data. We applied weighted majority voting, sweeping over γ, T , and data pre-processing parameters. As shown in Figure 4(a), one choice of parameters allows us to detect trending topics in advance of Twitter 79% of the time, and when we do, we detect them an average of 1.43 hours earlier. Furthermore, we achieve a true positive rate (TPR) of 95% and a false positive rate (FPR) of 4%. Naturally, there are tradeoffs between TPR, FPR, and how early we make a prediction (i.e., how small T is). As shown in Figure 4(c), an “aggressive” parameter setting yields early detection and high TPR but high FPR, and a “conservative” parameter setting yields low FPR but late detection and low TPR. An “in-between” setting can strike the right balance.\nAcknowledgements. This work was supported in part by the Army Research Office under MURI Award 58153-MA-MUR. GHC was supported by an NDSEG fellowship."
    }, {
      "heading" : "A Proof of Theorem 1",
      "text" : "Let S be the time series with an unknown label that we wish to classify using training data. Denote m+ , |V+|, m− , |V−| = m −m+, n+ , |R+|, n− , |R−|, and R , R+ ∪ R−. Recall that D+ , {0, 1, . . . ,∆max}, and D , {−∆max, . . . ,−1, 0, 1, . . . ,∆max}. As per the model, there exists a latent source V , shift ∆′ ∈ D+, and noise signal E′ such that\nS = V ∗∆′ + E′. (15)\nApplying a standard coupon collector’s problem result, with a training set of size n > βm logm, then with probability at least 1−m−β+1, for each latent source V ∈ V , there exists at least one time series R in the set R of all training data that is generated from V . Henceforth, we assume that this event holds. In Appendix C, we elaborate on what happens if the latent sources are not uniformly sampled.\nNote that R is generated from V as\nR = V ∗∆′′ + E′′, (16)\nwhere ∆′′ ∈ D+ and E′′ is a noise signal independent of E′. Therefore, we can rewrite S in terms of R as follows:\nS = R ∗∆ + E, (17)\nwhere ∆ = ∆′ −∆′′ ∈ D (note the change from D+ to D) and E = E′ − E′′ ∗∆. Since E′ and E′′ are i.i.d. over time and sub-Gaussian with parameter σ, one can easily verify that E is i.i.d. over time and sub-Gaussian with parameter √ 2σ.\nWe now bound the probability of error of classifier L̂(T )θ (·; γ). The probability of error or misclassification using the first T time steps of S is given by\nP ( misclassify S using its first T time steps ) = P(L̂(T )θ (S; γ) = −1|L = +1)P(L = +1)︸ ︷︷ ︸\nm+/m +P(L̂(T )θ (S; γ) = +1|L = −1)P(L = −1)︸ ︷︷ ︸ m−/m . (18)\nIn the remainder of the proof, we primarily show how to bound P(L̂(T )θ (S; γ) = −1|L = +1). The bound for P(L̂(T )θ (S; γ) = +1|L = −1) is almost identical. By Markov’s inequality,\nP(L̂(T )θ (S; γ) = −1|L = +1) = P (\n1 Λ(T )(S; γ) ≥ 1 θ ∣∣∣L = +1) ≤ θE[ 1 Λ(T )(S; γ) ∣∣∣L = +1]. (19)\nNow,\nE [\n1\nΛ(T )(S; γ) ∣∣∣L = +1] ≤ max r+∈R+,∆+∈D EE [\n1\nΛ(T )(r+ ∗∆+ + E; γ)\n] . (20)\nWith the above inequality in mind, we next bound 1/Λ(T )(r̃+ ∗ ∆̃+ + E; γ) for any choice of r̃+ ∈ R+ and ∆̃+ ∈ D. Note that for any time series s,\n1\nΛ(T )(s; γ) ≤\n∑ r−∈R−, ∆−∈D exp ( − γ‖r− ∗∆− − s‖2T ) exp ( − γ‖r̃+ ∗ ∆̃+ − s‖2T\n) . (21) After evaluating the above for s = r̃+ ∗ ∆̃+ + E, a bit of algebra shows that\n1\nΛ(T )(r̃+ ∗ ∆̃+ + E; γ) ≤ ∑ r−∈R−, ∆−∈D { exp ( − γ‖r̃+ ∗ ∆̃+ − r− ∗∆−‖2T ) exp ( − 2γ〈r̃+ ∗ ∆̃+ − r− ∗∆−, E〉T )} , (22)\nwhere 〈q, q′〉T , ∑T t=1 q(t)q ′(t) for time series q and q′.\nTaking the expectation of (22) with respect to noise signal E, we obtain the following bound: EE [ 1\nΛ(T )(r̃+ ∗ ∆̃+ + E; γ) ] ≤ EE\n[ ∑ r−∈R−, ∆−∈D { exp ( − γ‖r̃+ ∗ ∆̃+ − r− ∗∆−‖2T ) exp ( − 2γ〈r̃+ ∗ ∆̃+ − r− ∗∆−, E〉T )}]\n(i) = ∑ r−∈R−, ∆−∈D exp ( − γ‖r̃+ ∗ ∆̃+ − r− ∗∆−‖2T ) T∏ t=1 EE(t)[exp ( − 2γ(r̃+(t+ ∆̃+)− r−(t+ ∆−))E(t) ) ]\n(ii) ≤ ∑\nr−∈R−, ∆−∈D\nexp ( − γ‖r̃+ ∗ ∆̃+ − r− ∗∆−‖2T ) T∏ t=1 exp ( 4σ2γ2(r̃+(t+ ∆̃+)− r−(t+ ∆−))2 ) =\n∑ r−∈R−, ∆−∈D exp ( − (γ − 4σ2γ2)‖r+ ∗∆+ − r− ∗∆−‖2T ) ≤ (2∆max + 1)n− exp ( − (γ − 4σ2γ2)G(T ) ) , (23)\nwhere step (i) uses independence of entries of E, step (ii) uses the fact that E(t) is zero-mean subGaussian with parameter √ 2σ, and the last line abbreviates the gap G(T ) ≡ G(T )(R+,R−,∆max).\nStringing together inequalities (19), (20), and (23), we obtain P(L̂(T )θ (S; γ) = −1|L = +1) ≤ θ(2∆max + 1)n− exp ( − (γ − 4σ2γ2)G(T ) ) . (24)\nRepeating a similar argument yields\nP(L̂(T )θ (S; γ) = +1|L = −1) ≤ 1\nθ (2∆max + 1)n+ exp\n( − (γ − 4σ2γ2)G(T ) ) . (25)\nFinally, plugging (24) and (25) into (18) gives\nP(L̂(T )θ (S; γ) 6= L) ≤ θ(2∆max + 1) n−m+ m\nexp ( − (γ − 4σ2γ2)G(T ) ) + 1\nθ (2∆max + 1) n+m− m\n(2∆max + 1)n+ exp ( − (γ − 4σ2γ2)G(T ) ) = (θm+ m + m− θm ) (2∆max + 1)n exp ( − (γ − 4σ2γ2)G(T ) ) . (26)\nThis completes the proof of Theorem 1."
    }, {
      "heading" : "B Proof of Theorem 2",
      "text" : "The proof uses similar steps as the weighted majority voting case. As before, we consider the case when our training data sees each latent source at least once (this event happens with probability at least 1−m−β+1). We decompose the probability of error into terms depending on which latent source V generated S:\nP(L̂(T )NN (S) 6= L) = ∑ v∈V P(V = v)P(L̂(T )NN (S) 6= L|V = v) = ∑ v∈V 1 m P(L̂(T )NN (S) 6= L|V = v).\n(27) Next, we bound each P(L̂(T )NN (S) 6= L|V = v) term. Suppose that v ∈ V+, i.e., v has label L = +1; the case when v ∈ V− is similar. Then we make an error and declare L̂(T )NN (S) = −1 when the nearest neighbor r̂ to time series S is in the setR−, where\n(r̂, ∆̂) = arg min (r,∆)∈R×D\n‖r ∗∆− S‖2T . (28)\nBy our assumption that every latent source is seen in the training data, there exists r∗ ∈ R+ generated by latent source v, and so S = r∗ ∗∆∗ + E (29) for some shift ∆∗ ∈ D and noise signalE consisting of i.i.d. entries that are zero-mean sub-Gaussian with parameter √ 2σ.\nBy optimality of (r̂, ∆̂) for optimization problem (28), we have\n‖r ∗∆− (r∗ ∗∆∗ + E)‖2T ≥ ‖r̂ ∗ ∆̂− (r∗ ∗∆∗ + E)‖2T for all r ∈ R,∆ ∈ D. (30)\nPlugging in r = r∗ and ∆ = ∆∗, we obtain\n‖E‖2T ≥ ‖r̂ ∗ ∆̂− (r∗ ∗∆∗ + E)‖2T = ‖(r̂ ∗ ∆̂− r∗ ∗∆∗)− E‖2T = ‖r̂ ∗ ∆̂− r∗ ∗∆∗‖2T − 2〈r̂ ∗ ∆̂− r∗ ∗∆∗, E〉T + ‖E‖2T , (31)\nor, equivalently, 2〈r̂ ∗ ∆̂− r∗ ∗∆∗, E〉T ≥ ‖r̂ ∗ ∆̂− r∗ ∗∆∗‖2T . (32)\nThus, given V = v ∈ V+, declaring L̂(T )NN (S) = −1 implies the existence of r̂ ∈ R− and ∆̂ ∈ D such that optimality condition (32) holds. Therefore,\nP(L̂(T )NN (S) = −1|V = v) ≤ P ( ⋃ r̂∈R−,∆̂∈D {2〈r̂ ∗ ∆̂− r∗ ∗∆∗, E〉T ≥ ‖r̂ ∗ ∆̂− r∗ ∗∆∗‖2T } )\n(i) ≤ (2∆max + 1)n−P(2〈r̂ ∗ ∆̂− r∗ ∗∆∗, E〉T ≥ ‖r̂ ∗ ∆̂− r∗ ∗∆∗‖2T ) ≤ (2∆max + 1)n−P(exp(2λ〈r̂ ∗ ∆̂− r∗ ∗∆∗, E〉T ) ≥ exp(λ‖r̂ ∗ ∆̂− r∗ ∗∆∗‖2T )) (ii) ≤ (2∆max + 1)n− exp(−λ‖r̂ ∗ ∆̂− r∗ ∗∆∗‖2T )E[exp(2λ〈r̂ ∗ ∆̂− r∗ ∗∆∗, E〉T )] (iii)\n≤ (2∆max + 1)n− exp(−λ‖r̂ ∗ ∆̂− r∗ ∗∆∗‖2T ) exp(4λ2σ2‖r̂ ∗ ∆̂− r∗ ∗∆∗‖2T ) = (2∆max + 1)n− exp(−(λ− 4λ2σ2)‖r̂ ∗ ∆̂− r∗ ∗∆∗‖2T ) ≤ (2∆max + 1)n exp(−(λ− 4λ2σ2)G(T ))\n(iv) ≤ (2∆max + 1)n exp ( − 1\n16σ2 G(T )\n) , (33)\nwhere step (i) is by a union bound, step (ii) is by Markov’s inequality, step (iii) is by subGaussianity, and step (iv) is by choosing λ = 18σ2 .\nAs bound (33) also holds for P(L̂(T )NN (S) = +1|V = v) when instead v ∈ V−, we can now piece together (27) and (33) to yield the final result:\nP(L̂(T )NN (S) 6= L) = ∑ v∈V 1 m P(L̂(T )NN (S) 6= L|V = v) ≤ (2∆max + 1)n exp ( − 1 16σ2 G(T ) ) . (34)"
    }, {
      "heading" : "C Handling Non-uniformly Sampled Latent Sources",
      "text" : "When each time series generated from the latent source model is sampled uniformly at random, then having n > m log 2mδ (i.e., β = 1 + log 2 δ / logm) ensures that with probability at least 1 − δ 2 , our training data sees every latent source at least once. When the latent sources aren’t sampled uniformly at random, we show that we can simply replace the condition n > m log 2mδ with n ≥ 8 πmin\nlog 2mδ to achieve a similar (in fact, stronger) guarantee, where πmin is the smallest probability of a particular latent source occurring.\nLemma 3. Suppose that the i-th latent source occurs with probability πi in the latent source model. Denote πmin , mini∈{1,2,...,m} πi. Let ξi be the number of times that the i-th latent source appears in the training data. If n ≥ 8πmin log 2m δ , then with probability at least 1 − δ 2 , every latent source appears strictly greater than 12nπmin times in the training data.\nProof. Note that ξi ∼ Bin(n, πi). We have\nP ( ξi ≤ 1\n2 nπmin\n) ≤ P ( ξi ≤ 1 2 nπi )\n(i) ≤ exp ( − 1\n2 ·\n(nπi − 12nπi) 2\nn · πi ) = exp ( − nπi\n8 ) ≤ exp ( − nπmin\n8\n) . (35)\nwhere step (i) uses a standard binomial distribution lower tail bound. Applying a union bound, P ( ⋃ i∈{1,2,...,m} { ξi ≤ 1 2 nπmin }) ≤ m exp ( − nπmin 8 ) , (36)\nwhich is at most δ2 when n ≥ 8 πmin log 2mδ ."
    }, {
      "heading" : "D Sample Complexity for the Gaussian Setting Without Time Shifts",
      "text" : "Existing results on learning mixtures of Gaussians by Dasgupta and Schulman [7] and by Vempala and Wang [19] use a different notion of gap than we do. In our notation, their gap can be written as\nG(T )∗ , min v,v′∈V s.t.v 6=v′ ‖v − v′‖2T , (37)\nwhich measures the minimum separation between the true latent sources, disregarding their labels.\nWe now translate our main theoretical guarantees to be in terms of gap G(T )∗ under the assumption that the noise is Gaussian and that there are no time shifts. Theorem 4. Under the latent source model, suppose that the noise is zero-mean Gaussian with variance σ2, that there are no time shifts (i.e., ∆max = 0), and that we have sampled n > m log 4mδ training time series. Then if\nG(T )∗ ≥ 4σ2 log 4n 2\nδ , (38)\nT ≥ (12 + 8 √ 2) log 4n2\nδ , (39)\nthen weighted majority voting (with θ = 1, γ = 18σ2 ) and nearest-neighbor classification each classify a new time series correctly with probability at least 1− δ.\nIn particular, with access to a pool of Ω(m log mδ ) time series, we can subsample n = Θ(m log m δ ) of them to use as training data. Then provided that G(T )∗ = Ω(σ2 log mδ ) and T = Ω(log m δ ), we correctly classify a new time series with probability at least 1− δ.\nProof. The basic idea is to show that with high probability, our gap G(T ) ≡ G(T )(R+,R−,∆max) satisfies G(T ) ≥ G(T )∗ + 2σ2T − 4σ √ G(T )∗ log 4n2\nδ − 4σ2\n√ T log 4n2\nδ . (40)\nThe worst-case scenario occurs when G(T )∗ = 4σ2 log 4n 2\nδ , at which point we have\nG(T ) ≥ 2σ2T − 4σ2 log 4n 2\nδ − 4σ2\n√ T log 4n2\nδ . (41)\nThe right-hand side is at least σ2T when\nT ≥ (12 + 8 √ 2) log 4n2\nδ , (42)\nwhich ensures that, with high probability, G(T ) ≥ σ2T . Theorems 1 and 2 each say that if we further have n > m log 4mδ , and T ≥ 16 log 4n δ , then we classify a new time series correctly with high probability, where we note that T ≥ (12 + 8 √ 2) log 4n 2\nδ ≥ 16 log 4n δ .\nWe now fill in the details. Let r+ and r− be two time series in the training data that have labels +1 and −1 respectively, where we assume that ∆max = 0. Let v(r+) ∈ V and v(r−) ∈ V be the true latent sources of r+ and r−, respectively. This means that r+ ∼ N (v(r+), σ2IT×T ) and r− ∼ N (v(r−), σ2IT×T ). Denoting E(r+) ∼ N (0, σ2IT×T ) and E(r−) ∼ N (0, σ2IT×T ) to be noise associated with time series r+ and r−, we have\n‖r+ − r−‖2T = ‖(v(r+) + E(r+))− (v(r−) + E(r−))‖2T = ‖v(r+) − v(r−)‖2T + 2〈v(r+) − v(r−), E(r+) − E(r−)〉+ ‖E(r+) − E(r−)‖2T .\n(43) We shall show that with high probability, for all r+ ∈ R+ and for all r− ∈ R−:\n〈v(r+) − v(r−), E(r+) − E(r−)〉 ≥ −2σ‖v(r+) − v(r−)‖T √ log 4n2\nδ , (44) ‖E(r+) − E(r−)‖2T ≥ 2σ2T − 4σ2 √ T log 4n2\nδ . (45)\n• Bound (44): 〈v(r+) − v(r−), E(r+) − E(r−)〉 is zero-mean sub-Gaussian with parameter√ 2σ‖v(r+) − v(r−)‖T , so\nP(〈v(r+)−v(r−), E(r+)−E(r−)〉 ≤ −a) ≤ exp ( − a 2\n4σ2‖v(r+) − v(r−)‖2T\n) = δ\n4n2 (46) with choice a = 2σ‖v(r+)−v(r−)‖T √ log 4n 2\nδ . A union bound over all pairs of time series in the training data with opposite labels gives\nP ( ⋃ r+∈R+, r−∈R− { 〈v(r+)−v(r−), E(r+)−E(r−)〉 ≤ −2σ‖v(r+)−v(r−)‖T √ log 4n2 δ }) ≤ δ 4 .\n(47)\n• Bound (45): Due to a result by Laurent and Massart [14, Lemma 1], we have\nP(‖E(r+) − E(r−)‖2T ≤ 2σ2T − 4σ2 √ Ta) ≤ e−a = δ\n4n2 (48)\nwith choice a = log 4n 2\nδ . A union bound gives\nP ( ⋃ r+∈R+, r−∈R− { ‖E(r+) − E(r−)‖2T ≤ 2σ2T − 4σ2 √ T log 4n2 δ }) ≤ δ 4 . (49)\nAssuming that bounds (44) and (45) both hold, then for all r+ ∈ R+, r− ∈ R−, we have ‖r+ − r−‖2T = ‖v(r+) − v(r−)‖2T + 2〈v(r+) − v(r−), E(r+) − E(r−)〉+ ‖E(r+) − E(r−)‖2T\n≥ ‖v(r+) − v(r−)‖2T − 4σ‖v(r+) − v(r−)‖T\n√ log 4n2\nδ + 2σ2T − 4σ2\n√ T log 4n2\nδ\n(i) = ( ‖v(r+) − v(r−)‖T − 2σ √ log 4n2\nδ\n)2 − 4σ2 log 4n 2\nδ + 2σ2T − 4σ2\n√ T log 4n2\nδ\n(ii) ≥ (√ G(T )∗ − 2σ √ log 4n2\nδ\n)2 + 2σ2T − 4σ2 log 4n 2\nδ − 4σ2\n√ T log 4n2\nδ , (50)\nwhere step (i) follows from completing the square, and step (ii) uses our assumption that G(T )∗ ≥ 4σ2 log 4n 2\nδ . Minimizing over r+ ∈ R+ and r− ∈ R−, we get G(T ) ≥ (√ G(T )∗ − 2σ √ log 4n2\nδ\n)2 + 2σ2T − 4σ2 log 4n 2\nδ − 4σ2\n√ T log 4n2\nδ . (51)\nThe worst-case scenario occurs when G(T )∗ = 4σ2 log 4n 2\nδ , in which case\nG(T ) ≥ 2σ2T − 4σ2 log 4n 2\nδ − 4σ2\n√ T log 4n2\nδ . (52)\nTheorems 1 and 2 imply that having G(T ) ≥ σ2T , n > m log 4mδ , and T ≥ 16 log 4n δ allows weighted majority voting (with θ = 1, γ = 18σ2 ) and nearest-neighbor classification to each succeed with high probability. We achieve G(T ) ≥ σ2T by asking that\n2σ2T − 4σ2 log 4n 2\nδ − 4σ2\n√ T log 4n2\nδ ≥ σ2T, (53)\nwhich happens when\nT ≥ (12 + 8 √ 2) log 4n2\nδ . (54)\nA union bound over the following four bad events (each controlled to happen with probability at most δ4 ) yields the final result:\n• Not every latent source is seen in the training data.\n• Bound (44) doesn’t hold.\n• Bound (45) doesn’t hold.\n• Assuming that the above three bad events don’t happen, we still misclassify."
    }, {
      "heading" : "E Forecasting Trending Topics on Twitter",
      "text" : "Twitter is a social network whose users post messages called Tweets, which are then broadcast to a user’s followers. Often, emerging topics of interest are discussed on Twitter in real time. Inevitably, certain topics gain sudden popularity and — in Twitter speak — begin to trend. Twitter surfaces such topics as a list of top ten trending topics, or trends.\nData. We sampled 500 examples of trends at random from a list of June 2012 news trends and recorded the earliest time each topic trended within the month. Before sampling, we filtered out trends that never achieved a rank of 3 or better on the Twitter trends list5 as well as trends that lasted for less than 30 minutes as to keep our trend examples reasonably salient. We also sampled 500 examples of non-trends at random from a list of n-grams (of sizes 1, 2, and 3) appearing in Tweets created in June 2012, where we filter out any n-gram containing words that appeared in one of our 500 chosen trend examples. Note that as we do not know how Twitter chooses what phrases are considered as topic phrases (and are candidates for trending topics), it’s unclear what the size of the non-trend category is in comparison to the size of the trend category. Thus, for simplicity, we intentionally control for the class sizes by setting them equal. In practice, one could still expressly assemble the training data to have pre-specified class sizes and then tune θ for generalized weighted majority voting (8). In our experiments, we just use the usual weighted majority voting (2) (i.e., θ = 1) to classify time series.\nFrom these examples of trends and non-trends, we then created time series of activity for each topic based on the rate of Tweets about that topic over time. To approximate this rate, we gathered 10% of all Tweets from June 2012, placed them into two-minute buckets according to their timestamps, and counted the number of Tweets in each bucket. We denote the count at the t-th time bucket as ρ(t), which we refer to as the raw rate. We then transform the raw rate in a number of ways, summarized in Figure 5, before using the resulting time series for classification.\n5On Twitter, trending topics compete for the top ten spots whereas we are only detecting whether a topic will trend or not.\nWe observed that trending activity is characterized by spikes above some baseline rate, whereas non-trending activity has fewer, if any spikes. For example, a non-trending topic such as “city” has a very high, but mostly constant rate because it is a common word. In contrast, soon-to-be-trending topics like “Miss USA” will initially have a low rate, but will also have bursts in activity as the news spreads. To emphasize the parts of the rate signal above the baseline and de-emphasize the parts below the baseline, we define a baseline-normalized signal ρb(t) , ρ(t)/ ∑t τ=1 ρ(τ).\nA related observation is that the Tweet rate for a trending topic typically contains larger and more sudden spikes than those of non-trending topics. We reward such spikes by emphasizing them, while de-emphasizing smaller spikes. To do so, we define a baseline-and-spike-normalized rate ρb,s(t) , |ρb(t)− ρb(t− 1)|α in terms of the already baseline-normalized rate ρb; parameter α ≥ 1 controls how much spikes are rewarded (we used α = 1.2). In addition, we convolve the result with a smoothing window to eliminate noise and effectively measure the volume of Tweets in a sliding window of length Tsmooth: ρb,s,c(t) , ∑t τ=t−Tsmooth+1 ρb,s(τ).\nFinally, the spread of a topic from person to person can be thought of as a branching process in which a population of users “affected” by a topic grows exponentially with time, with the exponent depending on the details of the model [1]. This intuition suggests using a logarithmic scaling for the volume of Tweets: ρb,s,c,l(t) , log ρb,s,c(t).\nThe resulting time series ρb,s,c,l contains data from the entire window in which data was collected. To construct the sets of training time seriesR+ andR−, we keep only a small h-hour slice of representative activity r for each topic. Namely, each of the final time series r used in the training data is truncated to only contain the h hours of activity in the corresponding transformed time series ρb,s,c,l. For time series corresponding to trending topics, these h hours are taken from the time leading up to when the topic was first declared by Twitter to be trending. For time series corresponding to non-trending topics, the h-hour window of activity is sampled at random from all the activity for the topic. We empirically found that how news topics become trends tends to follow a finite number of patterns; a few examples of these patterns are shown in Figure 3.\nExperiment. For a fixed choice of parameters, we randomly divided the set of trends and non-trends into two halves, one for training and one for testing. Weighted majority voting with the training data was used to classify the test data. Per time series in the test data, we looked within a window of 2h hours, centered at the trend onset for trends, and sampled randomly for non-trends. We restrict detection to this time window to avoid detecting earlier times that a topic became trending, if it trended multiple times. We then measured the false positive rate (FPR), true positive rate (TPR), and the time of detection if any. For trends, we computed how early or late the detection was compared to the true trend onset. We explored the following parameters: h, the length in hours of each example time series; T , the number of initial time steps in the observed time series s that we use for classification; γ, the scaling parameter; Tsmooth, the width of the smoothing window. In all cases, constant ∆max in the decision rule (2) is set to be the maximum possible, i.e., since observed signal s has T samples, we compare s with all T -sized chunks of each time series r in training data.\nFor a variety of parameters, we detect trending topics before they appear on Twitter’s trending topics list. Figure 4 (a) shows that for one such choice of parameters, we detect trending topics before Twitter does 79% of the time, and when we do, we detect them an average of 1.43 hours earlier. Furthermore, we achieve a TPR of 95% and a FPR of 4%. Naturally, there are tradeoffs between the FPR, the TPR, and relative detection time that depend on parameter settings. An aggressive parameter setting will yield early detection and a high TPR, but at the expense of a high FPR. A conservative parameter setting will yield a low FPR, but at the expense of late detection and a low\nTPR. An in-between setting can strike the right balance. We show this tradeoff in two ways. First, by varying a single parameter at a time and fixing the rest, we generated an ROC curve that describes the tradeoff between FPR and TPR. Figure 4 (b) shows the envelope of all ROC curves, which can be interpreted as the best “achievable” ROC curve. Second, we broke the results up by where they fall on the ROC curve — top (“aggressive”), bottom (“conservative”), and center (“in-between”) — and showed the distribution of early and late relative detection times for each (Figure 4(c)).\nWe discuss some fine details of the experimental setup. Due to restrictions on the Twitter data available, while we could determine whether a trending topic is categorized as news based on usercurated lists of “news” people on Twitter, we did not have such labels for individual Tweets. Thus, the example time series that we use as training data contain Tweets that are both news and non-news. We also reran our experiments using only non-news Tweets and found similar results except that we do not detect trends as early as before; however, weighted majority voting still detects trends in advance of Twitter 79% of the time."
    } ],
    "references" : [ {
      "title" : "Trends in social media: Persistence and decay",
      "author" : [ "Sitaram Asur", "Bernardo A. Huberman", "Gábor Szabó", "Chunyan Wang" ],
      "venue" : "In Proceedings of the Fifth International Conference on Weblogs and Social Media,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2011
    }, {
      "title" : "Transformation based ensembles for time series classification",
      "author" : [ "Anthony Bagnall", "Luke Davis", "Jon Hills", "Jason Lines" ],
      "venue" : "In Proceedings of the 12th SIAM International Conference on Data Mining,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2012
    }, {
      "title" : "A complexity-invariant distance measure for time series",
      "author" : [ "Gustavo E.A.P.A. Batista", "Xiaoyue Wang", "Eamonn J. Keogh" ],
      "venue" : "In Proceedings of the 11th SIAM International Conference on Data Mining,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2011
    }, {
      "title" : "Beyond trending topics: Real-world event identification on Twitter",
      "author" : [ "Hila Becker", "Mor Naaman", "Luis Gravano" ],
      "venue" : "In Proceedings of the Fifth International Conference on Weblogs and Social Media,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2011
    }, {
      "title" : "Emerging topic detection on twitter based on temporal and social terms evaluation",
      "author" : [ "Mario Cataldi", "Luigi Di Caro", "Claudio Schifanella" ],
      "venue" : "In Proceedings of the 10th International Workshop on Multimedia Data Mining,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2010
    }, {
      "title" : "Nearest neighbor pattern classification",
      "author" : [ "Thomas M. Cover", "Peter E. Hart" ],
      "venue" : "IEEE Transactions on Information Theory,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 1967
    }, {
      "title" : "A probabilistic analysis of EM for mixtures of separated, spherical gaussians",
      "author" : [ "Sanjoy Dasgupta", "Leonard Schulman" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2007
    }, {
      "title" : "Querying and mining of time series data: experimental comparison of representations and distance measures",
      "author" : [ "Hui Ding", "Goce Trajcevski", "Peter Scheuermann", "Xiaoyue Wang", "Eamonn Keogh" ],
      "venue" : "Proceedings of the VLDB Endowment,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2008
    }, {
      "title" : "Scalable training of mixture models via coresets",
      "author" : [ "Dan Feldman", "Matthew Faulkner", "Andreas Krause" ],
      "venue" : "In Advances in Neural Information Processing Systems",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2011
    }, {
      "title" : "Introduction to statistical pattern recognition (2nd ed.)",
      "author" : [ "Keinosuke Fukunaga" ],
      "venue" : null,
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1990
    }, {
      "title" : "Learning mixtures of spherical gaussians: Moment methods and spectral decompositions",
      "author" : [ "Daniel Hsu", "Sham M. Kakade" ],
      "venue" : null,
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2013
    }, {
      "title" : "Emerging topic detection using dictionary learning",
      "author" : [ "Shiva Prasad Kasiviswanathan", "Prem Melville", "Arindam Banerjee", "Vikas Sindhwani" ],
      "venue" : "In Proceedings of the 20th ACM Conference on Information and Knowledge Management,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2011
    }, {
      "title" : "Online l1dictionary learning with application to novel document detection",
      "author" : [ "Shiva Prasad Kasiviswanathan", "Huahua Wang", "Arindam Banerjee", "Prem Melville" ],
      "venue" : "In Advances in Neural Information Processing Systems",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2012
    }, {
      "title" : "Adaptive estimation of a quadratic functional by model selection",
      "author" : [ "Beatrice Laurent", "Pascal Massart" ],
      "venue" : "Annals of Statistics,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2000
    }, {
      "title" : "Twittermonitor: trend detection over the Twitter stream",
      "author" : [ "Michael Mathioudakis", "Nick Koudas" ],
      "venue" : "In Proceedings of the 2010 ACM SIGMOD International Conference on Management of Data,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2010
    }, {
      "title" : "Settling the polynomial learnability of mixtures of gaussians",
      "author" : [ "Ankur Moitra", "Gregory Valiant" ],
      "venue" : "In 51st Annual IEEE Symposium on Foundations of Computer Science,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2010
    }, {
      "title" : "Feature-based classification of time-series data",
      "author" : [ "Alex Nanopoulos", "Rob Alcock", "Yannis Manolopoulos" ],
      "venue" : "International Journal of Computer Research,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2001
    }, {
      "title" : "Interval and dynamic time warping-based decision trees",
      "author" : [ "Juan J. Rodrı́guez", "Carlos J. Alonso" ],
      "venue" : "In Proceedings of the 2004 ACM Symposium on Applied Computing,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2004
    }, {
      "title" : "A spectral algorithm for learning mixture models",
      "author" : [ "Santosh Vempala", "Grant Wang" ],
      "venue" : "Journal of Computer and System Sciences,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2004
    }, {
      "title" : "Distance metric learning for large margin nearest neighbor classification",
      "author" : [ "Kilian Q. Weinberger", "Lawrence K. Saul" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2009
    }, {
      "title" : "Distance-function design and fusion for sequence data",
      "author" : [ "Yi Wu", "Edward Y. Chang" ],
      "venue" : "In Proceedings of the 2004 ACM International Conference on Information and Knowledge Management,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2004
    } ],
    "referenceMentions" : [ {
      "referenceID" : 16,
      "context" : "Numerous standard classification methods have been tailored to classify time series, yet a simple nearest-neighbor approach is hard to beat in terms of classification performance on a variety of datasets [22], with results competitive to or better than various other more elaborate methods such as neural networks [17], decision trees [18], and support vector machines [21].",
      "startOffset" : 314,
      "endOffset" : 318
    }, {
      "referenceID" : 17,
      "context" : "Numerous standard classification methods have been tailored to classify time series, yet a simple nearest-neighbor approach is hard to beat in terms of classification performance on a variety of datasets [22], with results competitive to or better than various other more elaborate methods such as neural networks [17], decision trees [18], and support vector machines [21].",
      "startOffset" : 335,
      "endOffset" : 339
    }, {
      "referenceID" : 20,
      "context" : "Numerous standard classification methods have been tailored to classify time series, yet a simple nearest-neighbor approach is hard to beat in terms of classification performance on a variety of datasets [22], with results competitive to or better than various other more elaborate methods such as neural networks [17], decision trees [18], and support vector machines [21].",
      "startOffset" : 369,
      "endOffset" : 373
    }, {
      "referenceID" : 2,
      "context" : "More recently, researchers have examined which distance to use with nearest-neighbor classification [3, 8, 20] or how to boost classification performance by applying different transformations to the time series before using nearest-neighbor classification [2].",
      "startOffset" : 100,
      "endOffset" : 110
    }, {
      "referenceID" : 7,
      "context" : "More recently, researchers have examined which distance to use with nearest-neighbor classification [3, 8, 20] or how to boost classification performance by applying different transformations to the time series before using nearest-neighbor classification [2].",
      "startOffset" : 100,
      "endOffset" : 110
    }, {
      "referenceID" : 19,
      "context" : "More recently, researchers have examined which distance to use with nearest-neighbor classification [3, 8, 20] or how to boost classification performance by applying different transformations to the time series before using nearest-neighbor classification [2].",
      "startOffset" : 100,
      "endOffset" : 110
    }, {
      "referenceID" : 1,
      "context" : "More recently, researchers have examined which distance to use with nearest-neighbor classification [3, 8, 20] or how to boost classification performance by applying different transformations to the time series before using nearest-neighbor classification [2].",
      "startOffset" : 256,
      "endOffset" : 259
    }, {
      "referenceID" : 5,
      "context" : "If we don’t confine ourselves to classifying time series, then as the amount of data tends to infinity, nearest-neighbor classification has been shown to achieve a probability of error that is at worst twice the Bayes error rate, and when considering the nearest k neighbors with k allowed to grow with the amount of data, then the error rate approaches the Bayes error rate [6].",
      "startOffset" : 375,
      "endOffset" : 378
    }, {
      "referenceID" : 6,
      "context" : "We show that existing performance guarantees on learning spherical Gaussian mixture models [7, 11, 19] require more stringent conditions than what our results need, suggesting that learning the latent sources is overkill if the goal is classification.",
      "startOffset" : 91,
      "endOffset" : 102
    }, {
      "referenceID" : 10,
      "context" : "We show that existing performance guarantees on learning spherical Gaussian mixture models [7, 11, 19] require more stringent conditions than what our results need, suggesting that learning the latent sources is overkill if the goal is classification.",
      "startOffset" : 91,
      "endOffset" : 102
    }, {
      "referenceID" : 18,
      "context" : "We show that existing performance guarantees on learning spherical Gaussian mixture models [7, 11, 19] require more stringent conditions than what our results need, suggesting that learning the latent sources is overkill if the goal is classification.",
      "startOffset" : 91,
      "endOffset" : 102
    }, {
      "referenceID" : 3,
      "context" : "Existing work that identify trends on Twitter [4, 5, 15] instead, as part of their trend detection, define models for what trends are, which we do not do, nor do we assume we have access to such definitions.",
      "startOffset" : 46,
      "endOffset" : 56
    }, {
      "referenceID" : 4,
      "context" : "Existing work that identify trends on Twitter [4, 5, 15] instead, as part of their trend detection, define models for what trends are, which we do not do, nor do we assume we have access to such definitions.",
      "startOffset" : 46,
      "endOffset" : 56
    }, {
      "referenceID" : 14,
      "context" : "Existing work that identify trends on Twitter [4, 5, 15] instead, as part of their trend detection, define models for what trends are, which we do not do, nor do we assume we have access to such definitions.",
      "startOffset" : 46,
      "endOffset" : 56
    }, {
      "referenceID" : 11,
      "context" : "(The same could be said of previous work on novel document detection on Twitter [12, 13].",
      "startOffset" : 80,
      "endOffset" : 88
    }, {
      "referenceID" : 12,
      "context" : "(The same could be said of previous work on novel document detection on Twitter [12, 13].",
      "startOffset" : 80,
      "endOffset" : 88
    }, {
      "referenceID" : 15,
      "context" : "In general, the number of samples we need from a Gaussian mixture mixture model to estimate the mixture component means is exponential in the number of mixture components [16].",
      "startOffset" : 171,
      "endOffset" : 175
    }, {
      "referenceID" : 6,
      "context" : "We could learn such a model using Dasgupta and Schulman’s modified EM algorithm [7].",
      "startOffset" : 80,
      "endOffset" : 83
    }, {
      "referenceID" : 18,
      "context" : "Vempala and Wang [19] have a spectral method for learning Gaussian mixture models that can handle smallerG )∗ than Dasgupta and Schulman’s approach but requires n = Ω̃(T m) training data, where we’ve hidden the dependence on σ and other variables of interest for clarity of presentation.",
      "startOffset" : 17,
      "endOffset" : 21
    }, {
      "referenceID" : 10,
      "context" : "Hsu and Kakade [11] have a moment-based estimator that doesn’t have a gap condition but, under a different non-degeneracy condition, requires substantially more samples for our problem setup, i.",
      "startOffset" : 15,
      "endOffset" : 19
    }, {
      "referenceID" : 8,
      "context" : "In such scenarios, one could instead non-uniformly subsample O(Tm/ε) time series from the training data using the procedure given in [9] and then feed the resulting smaller dataset, referred to as an (m, ε)-coreset, to the EM algorithm for learning the latent sources.",
      "startOffset" : 133,
      "endOffset" : 136
    } ],
    "year" : 2013,
    "abstractText" : "For classifying time series, a nearest-neighbor approach is widely used in practice with performance often competitive with or better than more elaborate methods such as neural networks, decision trees, and support vector machines. We develop theoretical justification for the effectiveness of nearest-neighbor-like classification of time series. Our guiding hypothesis is that in many applications, such as forecasting which topics will become trends on Twitter, there aren’t actually that many prototypical time series to begin with, relative to the number of time series we have access to, e.g., topics become trends on Twitter only in a few distinct manners whereas we can collect massive amounts of Twitter data. To operationalize this hypothesis, we propose a latent source model for time series, which naturally leads to a “weighted majority voting” classification rule that can be approximated by a nearest-neighbor classifier. We establish nonasymptotic performance guarantees of both weighted majority voting and nearest-neighbor classification under our model accounting for how much of the time series we observe and the model complexity. Experimental results on synthetic data show weighted majority voting achieving the same misclassification rate as nearest-neighbor classification while observing less of the time series. We then use weighted majority to forecast which news topics on Twitter become trends, where we are able to detect such “trending topics” in advance of Twitter 79% of the time, with a mean early advantage of 1 hour and 26 minutes, a true positive rate of 95%, and a false positive rate of 4%.",
    "creator" : "LaTeX with hyperref package"
  }
}