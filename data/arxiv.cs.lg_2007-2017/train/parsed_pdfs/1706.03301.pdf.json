{
  "name" : "1706.03301.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Neural networks and rational functions",
    "authors" : [ "Matus Telgarsky" ],
    "emails" : [ "<mjt@illinois.edu>." ],
    "sections" : [ {
      "heading" : "1. Overview",
      "text" : "Significant effort has been invested in characterizing the functions that can be efficiently approximated by neural networks. The goal of the present work is to characterize neural networks more finely by finding a class of functions which is not only well-approximated by neural networks, but also well-approximates neural networks.\nThe function class investigated here is the class of rational functions: functions represented as the ratio of two polynomials, where the denominator is a strictly positive polynomial. For simplicity, the neural networks are taken to always use ReLU activation σr(x) := max{0, x}; for a review of neural networks and their terminology, the reader is directed to Section 1.4. For the sake of brevity, a network with ReLU activations is simply called a ReLU network."
    }, {
      "heading" : "1.1. Main results",
      "text" : "The main theorem here states that ReLU networks and rational functions approximate each other well in the sense\n1University of Illinois, Urbana-Champaign; work completed while visiting the Simons Institute. Correspondence to: your friend <mjt@illinois.edu>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\n−1.00 −0.75 −0.50 −0.25 0.00 0.25 0.50 0.75 1.00\n0\n1\n2\n3\n4 spike\nrat poly net\nFigure 1. Rational, polynomial, and ReLU network fit to “spike”, a function which is 1/x along [1/4, 1] and 0 elsewhere.\nthat -approximating one class with the other requires a representation whose size is polynomial in ln(1 / ), rather than being polynomial in 1/ . Theorem 1.1. 1. Let ∈ (0, 1] and nonnegative inte-\nger k be given. Let p : [0, 1]d → [−1,+1] and q : [0, 1]d → [2−k, 1] be polynomials of degree ≤ r, each with≤ smonomials. Then there exists a function f : [0, 1]d → R, representable as a ReLU network of size (number of nodes)\nO ( k7 ln(1 / )3\n+ min { srk ln(sr / ), sdk2 ln(dsr / )2 }) ,\nsuch that\nsup x∈[0,1]d ∣∣∣∣f(x)− p(x)q(x) ∣∣∣∣ ≤ .\n2. Let ∈ (0, 1] be given. Consider a ReLU network f : [−1,+1]d → R with at most m nodes in each of at most k layers, where each node computes z 7→ σr(a\n>z + b) where the pair (a, b) (possibly distinct across nodes) satisfies ‖a‖1 + |b| ≤ 1. Then there exists a rational function g : [−1,+1]d → R with degree (maximum degree of numerator and denominator)\nO ( ln(k/ )kmk )\nsuch that\nsup x∈[−1,+1]d\n∣∣f(x)− g(x)∣∣ ≤ .\nar X\niv :1\n70 6.\n03 30\n1v 1\n[ cs\n.L G\n] 1\n1 Ju\nn 20\n17\nPerhaps the main wrinkle is the appearance of mk when approximating neural networks by rational functions. The following theorem shows that this dependence is tight.\nTheorem 1.2. Let any integer k ≥ 3 be given. There exists a function f : R → R computed by a ReLU network with 2k layers, each with ≤ 2 nodes, such that any rational function g : R → R with ≤ 2k−2 total terms in the numerator and denominator must satisfy∫\n[0,1]\n|f(x)− g(x)|dx ≥ 1 64 .\nNote that this statement implies the desired difficulty of approximation, since a gap in the above integral (L1) distance implies a gap in the earlier uniform distance (L∞), and furthermore an r-degree rational function necessarily has ≤ 2r + 2 total terms in its numerator and denominator.\nAs a final piece of the story, note that the conversion between rational functions and ReLU networks is more seamless if instead one converts to rational networks, meaning neural networks where each activation function is a rational function.\nLemma 1.3. Let a ReLU network f : [−1,+1]d → R be given as in Theorem 1.1, meaning f has at most l layers and each node computes z 7→ σr(a>z+b) where where the pair (a, b) (possibly distinct across nodes) satisfies ‖a‖1 + |b| ≤ 1. Then there exists a rational function R of degree O(ln(l/ )2) so that replacing each σr in f with R yields a function g : [−1,+1]d → R with\nsup x∈[−1,+1]d\n|f(x)− g(x)| ≤ .\nCombining Theorem 1.2 and Lemma 1.3 yields an intriguing corollary.\nCorollary 1.4. For every k ≥ 3, there exists a function f : R → R computed by a rational network with O(k) layers andO(k) total nodes, each node invoking a rational activation of degreeO(k), such that every rational function g : R→ R with less than 2k−2 total terms in the numerator and denominator satisfies∫\n[0,1]\n|f(x)− g(x)|dx ≥ 1 128 .\nThe hard-to-approximate function f is a rational network which has a description of size O(k2). Despite this, attempting to approximate it with a rational function of the usual form requires a description of size Ω(2k). Said another way: even for rational functions, there is a benefit to a neural network representation!"
    }, {
      "heading" : "1.2. Auxiliary results",
      "text" : "The first thing to stress is that Theorem 1.1 is impossible with polynomials: namely, while it is true that ReLU networks can efficiently approximate polynomials (Yarotsky, 2016; Safran & Shamir, 2016; Liang & Srikant, 2017), on the other hand polynomials require degree Ω(poly(1/ )), rather than O(poly(ln(1/ ))), to approximate a single ReLU, or equivalently the absolute value function (Petrushev & Popov, 1987, Chapter 4, Page 73).\nAnother point of interest is the depth needed when converting a rational function to a ReLU network. Theorem 1.1 is impossible if the depth is o(ln(1/ )): specifically, it is impossible to approximate the degree 1 rational function x 7→ 1/x with size O(ln(1/ )) but depth o(ln(1/ )). Proposition 1.5. Set f(x) := 1/x, the reciprocal map. For any > 0 and ReLU network g : R→ R with l layers and m < (27648 )−1/(2l)/2 nodes,∫\n[1/2,3/4]\n|f(x)− g(x)|dx > .\nLastly, the implementation of division in a ReLU network requires a few steps, arguably the most interesting being a “continuous switch statement”, which computes reciprocals differently based on the magnitude of the input. The ability to compute switch statements appears to be a fairly foundational operation available to neural networks and rational functions (Petrushev & Popov, 1987, Theorem 5.2), but is not available to polynomials (since otherwise they could approximate the ReLU)."
    }, {
      "heading" : "1.3. Related work",
      "text" : "The results of the present work follow a long line of work on the representation power of neural networks and related functions. The ability of ReLU networks to fit continuous functions was no doubt proved many times, but it appears the earliest reference is to Lebesgue (Newman, 1964, Page 1), though of course results of this type are usu-\nally given much more contemporary attribution (Cybenko, 1989). More recently, it has been shown that certain function classes only admit succinct representations with many layers (Telgarsky, 2015). This has been followed by proofs showing the possibility for a depth 3 function to require exponentially many nodes when rewritten with 2 layers (Eldan & Shamir, 2016). There are also a variety of other result giving the ability of ReLU networks to approximate various function classes (Cohen et al., 2016; Poggio et al., 2017).\nMost recently, a variety of works pointed out neural networks can approximate polynomials, and thus smooth functions essentially by Taylor’s theorem (Yarotsky, 2016; Safran & Shamir, 2016; Liang & Srikant, 2017). This somewhat motivates this present work, since polynomials can not in turn approximate neural networks with a dependence O(poly log(1/ )): they require degree Ω(1/ ) even for a single ReLU.\nRational functions are extensively studied in the classical approximation theory literature (Lorentz et al., 1996; Petrushev & Popov, 1987). This literature draws close connections between rational functions and splines (piecewise polynomial functions), a connection which has been used in the machine learning literature to draw further connections to neural networks (Williamson & Bartlett, 1991). It is in this approximation theory literature that one can find the following astonishing fact: not only is it possible to approximate the absolute value function (and thus the ReLU) over [−1,+1] to accuracy > 0 with a rational function of degreeO(ln(1/ )2) (Newman, 1964), but moreover the optimal rate is known (Petrushev & Popov, 1987; Zolotarev, 1877)! These results form the basis of those results here which show that rational functions can approximate ReLU networks. (Approximation theory results also provide other functions (and types of neural networks) which rational functions can approximate well, but the present work will stick to the ReLU for simplicity.)\nAn ICML reviewer revealed prior work which was embarrassingly overlooked by the author: it has been known, since decades ago (Beame et al., 1986), that neural networks using threshold nonlinearities (i.e., the map x 7→ 1[x ≥ 0]) can approximate division, and moreover the proof is similar to the proof of part 1 of Theorem 1.1! Moreover, other work on threshold networks invoked Newman polynomials to prove lower bound about linear threshold networks (Paturi & Saks, 1994). Together this suggests that not only the connections between rational functions and neural networks are tight (and somewhat known/unsurprising), but also that threshold networks and ReLU networks have perhaps more similarities than what is suggested by the differing VC dimension bounds, approximation results, and algorithmic results (Goel et al., 2017)."
    }, {
      "heading" : "1.4. Further notation",
      "text" : "Here is a brief description of the sorts of neural networks used in this work. Neural networks represent computation as a directed graph, where nodes consume the outputs of their parents, apply a computation to them, and pass the resulting value onward. In the present work, nodes take their parents’ outputs z and compute σr(a>z + b), where a is a vector, b is a scalar, and σr(x) := max{0, x}; another popular choice of nonlineary is the sigmoid x 7→ (1 + exp(−x))−1. The graphs in the present work are acyclic and connected with a single node lacking children designated as the univariate output, but the literature contains many variations on all of these choices.\nAs stated previously, a rational function f : Rd → R is ratio of two polynomials. Following conventions in the approximation theory literature (Lorentz et al., 1996), the denominator polynomial will always be strictly positive. The degree of a rational function is the maximum of the degrees of its numerator and denominator."
    }, {
      "heading" : "2. Approximating ReLU networks with rational functions",
      "text" : "This section will develop the proofs of part 2 of Theorem 1.1, Theorem 1.2, Lemma 1.3, and Corollary 1.4."
    }, {
      "heading" : "2.1. Newman polynomials",
      "text" : "The starting point is a seminal result in the theory of rational functions (Zolotarev, 1877; Newman, 1964): there exists a rational function of degree O(ln(1/ )2) which can approximate the absolute value function along [−1,+1] to accuracy > 0. This in turn gives a way to approximate the ReLU, since\nσr(x) = max{0, x} = x+ |x|\n2 . (2.1)\nThe construction here uses the Newman polynomials (New-\nman, 1964): given an integer r, define\nNr(x) := r−1∏ i=1 (x+ exp(−i/ √ r)).\nThe Newman polynomials N5, N9, and N13 are depicted in Figure 3. Typical polynomials in approximation theory, for instance the Chebyshev polynomials, have very active oscillations; in comparison, the Newman polynomials look a little funny, lying close to 0 over [−1, 0], and quickly increasing monotonically over [0, 1]. The seminal result of Newman (1964) is that\nsup |x|≤1 ∣∣∣∣∣|x| − x ( Nr(x)−Nr(−x) Nr(x) +Nr(−x) )∣∣∣∣∣ ≤ 3 exp(−√r)/2. Thanks to this bound and eq. (2.1), it follows that the ReLU can be approximated to accuracy > 0 by rational functions of degree O(ln(1/ )2).\n(Some basics on Newman polynomials, as needed in the present work, can be found in Appendix A.1.)"
    }, {
      "heading" : "2.2. Proof of Lemma 1.3",
      "text" : "Now that a single ReLU can be easily converted to a rational function, the next task is to replace every ReLU in a ReLU network with a rational function, and compute the approximation error. This is precisely the statement of Lemma 1.3.\nThe proof of Lemma 1.3 is an induction on layers, with full details relegated to the appendix. The key computation, however, is as follows. Let R(x) denote a rational approximation to σr. Fix a layer i + 1, and let H(x) denote the multi-valued mapping computed by layer i, and let HR(x) denote the mapping obtained by replacing each σr in H with R. Fix any node in layer i + 1, and let x 7→ σr(a>H(x) + b) denote its output as a function of the input. Then∣∣∣σr(a>H(x) + b)−R(a>HR(x) + b)∣∣∣\n≤ ∣∣∣σr(a>H(x) + b)− σr(a>HR(x) + b)∣∣∣︸ ︷︷ ︸\n♥ + ∣∣∣σr(a>HR(x) + b)−R(a>HR(x) + b)∣∣∣︸ ︷︷ ︸\n♣\n.\nFor the first term ♥, note since σr is 1-Lipschitz and by Hölder’s inequality that\n♥ ≤ ∣∣∣a>(H(x)−HR(x))∣∣∣ ≤ ‖a‖1‖H(x)−HR(x)‖∞,\nmeaning this term has been reduced to the inductive hypothesis since ‖a‖1 ≤ 1. For the second term ♣, if\na>HR(x) + b can be shown to lie in [−1,+1] (which is another easy induction), then ♣ is just the error between R and σr on the same input."
    }, {
      "heading" : "2.3. Proof of part 2 of Theorem 1.1",
      "text" : "It is now easy to find a rational function that approximates a neural network, and to then bound its size. The first step, via Lemma 1.3, is to replace each σr with a rational functionR of low degree (this last bit using Newman polynomials). The second step is to inductively collapse the network into a single rational function. The reason for the dependence on the number of nodes m is that, unlike polynomials, summing rational functions involves an increase in degree:\np1(x) q1(x) + p1(x) q2(x) = p1(x)q2(x) + p2(x)q1(x) q1(x)q2(x) ."
    }, {
      "heading" : "2.4. Proof of Theorem 1.2",
      "text" : "The final interesting bit is to show that the dependence on ml in part 2 of Theorem 1.1 (where m is the number of nodes and l is the number of layers) is tight.\nRecall the “triangle function”\n∆(x) :=  2x x ∈ [0, 1/2], 2(1− x) x ∈ (1/2, 1], 0 otherwise.\nThe k-fold composition ∆k is a piecewise affine function with 2k−1 regularly spaced peaks (Telgarsky, 2015). This function was demonstrated to be inapproximable by shallow networks of subexponential size, and now it can be shown to be a hard case for rational approximation as well.\nConsider the horizontal line through y = 1/2. The function ∆k will cross this line 2k times. Now consider a rational function f(x) = p(x)/q(x). The set of points where f(x) = 1/2 corresponds to points where 2p(x)−q(x) = 0.\nA poor estimate for the number of zeros is simply the degree of 2p−q, however, since f is univariate, a stronger tool becomes available: by Descartes’ rule of signs, the number of zeros in f − 1/2 is upper bounded by the number of terms in 2p− q."
    }, {
      "heading" : "3. Approximating rational functions with ReLU networks",
      "text" : "This section will develop the proof of part 1 of Theorem 1.1, as well as the tightness result in Proposition 1.5"
    }, {
      "heading" : "3.1. Proving part 1 of Theorem 1.1",
      "text" : "To establish part 1 of Theorem 1.1, the first step is to approximate polynomials with ReLU networks, and the second is to then approximate the division operation.\nThe representation of polynomials will be based upon constructions due to Yarotsky (2016). The starting point is the following approximation of the squaring function. Lemma 3.1 ((Yarotsky, 2016)). Let any > 0 be given. There exists f : x → [0, 1], represented as a ReLU network with O(ln(1/ )) nodes and layers, such that supx∈[0,1] |f(x)− x2| ≤ and f(0) = 0.\nYarotsky’s proof is beautiful and deserves mention. The approximation of x2 is the function fk, defined as\nfk(x) := x− k∑ i=1 ∆i(x) 4i ,\nwhere ∆ is the triangle map from Section 2. For every k, fk is a convex, piecewise-affine interpolation between points along the graph of x2; going from k to k + 1 does not adjust any of these interpolation points, but adds a new set of O(2k) interpolation points.\nOnce squaring is in place, multiplication comes via the polarization identity xy = ((x+ y)2 − x2 − y2)/2. Lemma 3.2 ((Yarotsky, 2016)). Let any > 0 and B ≥ 1 be given. There exists g(x, y) : [0, B]2 → [0, B2], represented by a ReLU network with O(ln(B/ ) nodes and layers, with\nsup x,y∈[0,1]\n|g(x, y)− xy| ≤\nand g(x, y) = 0 if x = 0 or y = 0.\nNext, it follows that ReLU networks can efficiently approximate exponentiation thanks to repeated squaring. Lemma 3.3. Let ∈ (0, 1] and positive integer y be given. There exists h : [0, 1] → [0, 1], represented by a ReLU network with O(ln(y/ )2) nodes and layers, with\nsup x,y∈[0,1]\n∣∣h(x)− xy∣∣ ≤\nWith multiplication and exponentiation, a representation result for polynomials follows.\nLemma 3.4. Let ∈ (0, 1] be given. Let p : [0, 1]d → [−1,+1] denote a polynomial with ≤ s monomials, each with degree ≤ r and scalar coefficient within [−1,+1]. Then there exists a function q : [0, 1]d → [−1,+1] computed by a network of size O ( min{sr ln(sr/ ), sd ln(dsr/ )2} ) , which satisfies supx∈[0,1]d |p(x)− q(x)| ≤ .\nThe remainder of the proof now focuses on the division operation. Since multiplication has been handled, it suffices to compute a single reciprocal.\nLemma 3.5. Let ∈ (0, 1] and nonnegative integer k be given. There exists a ReLU network q : [2−k, 1] → [1, 2k], of sizeO(k2 ln(1/ )2) and depthO(k4 ln(1/ )3) such that\nsup x∈[2−k,1] ∣∣∣∣q(x)− 1x ∣∣∣∣ ≤ .\nThis proof relies on two tricks. The first is to observe, for x ∈ (0, 1], that\n1 x =\n1 1− (1− x) = ∑ i≥0 (1− x)i.\nThanks to the earlier development of exponentiation, truncating this summation gives an expression easily approximate by a neural network as follows.\nLemma 3.6. Let 0 < a ≤ b and > 0 be given. Then there exists a ReLU network q : R → R with O(ln(1/(a ))2) layers and O((b/a) ln(1/(a ))3) nodes satisfying\nsup x∈[a,b] ∣∣∣∣q(x)− 1x ∣∣∣∣ ≤ 2 .\nUnfortunately, Lemma 3.6 differs from the desired statement Lemma 3.6: inverting inputs lying within [2−k, 1] requires O(2k ln(1/ )2) nodes rather than O(k4 ln(1/ )3)!\nTo obtain a good estimate with only O(ln(1/ )) terms of the summation, it is necessary for the input to be x bounded below by a positive constant (not depending on k). This leads to the second trick (which was also used by Beame et al. (1986)!).\nConsider, for positive constant c > 0, the expression\n1 x =\nc\n1− (1− cx) = c ∑ i≥0 (1− cx)i.\nIf x is small, choosing a larger c will cause this summation to converge more quickly. Thus, to compute 1/x accurately over a wide range of inputs, the solution here is to multiplex approximations of the truncated sum for many choices of c. In order to only rely on the value of one of them, it is possible to encode a large “switch” style statement in a neural network. Notably, rational functions can also representat switch statements (Petrushev & Popov, 1987, Theorem 5.2), however polynomials can not (otherwise they could approximate the ReLU more efficiently, seeing as it is a switch statement of 0 (a degree 0 polynomial) and x (a degree 1 polynomial). Lemma 3.7. Let > 0, B ≥ 1, reals a0 ≤ a1 ≤ · · · ≤ an ≤ an+1 and a function f : [a0, an+1] → R be given. Moreover, suppose for i ∈ {1, . . . , n}, there exists a ReLU network gi : R → R of size ≤ mi and depth ≤ ki with gi ∈ [0, B] along [ai−1, ai+1] and\nsup x∈[ai−1,ai+1]\n|gi(x)− f | ≤ .\nThen there exists a function g : R → R computed by a ReLU network of size O ( n ln(B/ ) + ∑ imi ) and depth\nO ( ln(B/ ) + maxi ki ) satisfying\nsup x∈[a1,an]\n|g(x)− f(x)| ≤ 3 ."
    }, {
      "heading" : "3.2. Proof of Proposition 1.5",
      "text" : "It remains to show that shallow networks have a hard time approximating the reciprocal map x 7→ 1/x.\nThis proof uses the same scheme as various proofs in (Telgarsky, 2016), which was also followed in more recent works (Yarotsky, 2016; Safran & Shamir, 2016): the idea is to first upper bound the number of affine pieces in ReLU networks of a certain size, and then to point out that each linear segment must make substantial error on a curved function, namely 1/x.\nThe proof is fairly brute force, and thus relegated to the appendices."
    }, {
      "heading" : "4. Summary of figures",
      "text" : "Throughout this work, a number of figures were presented to show not only the astonishing approximation properties\nof rational functions, but also the higher fidelity approximation achieved by both ReLU networks and rational functions as compared with polynomials. Of course, this is only a qualitative demonstration, but still lends some intuition.\nIn all these demonstrations, rational functions and polynomials have degree 9 unless otherwise marked. ReLU networks have two hidden layers each with 3 nodes. This is not exactly apples to apples (e.g., the rational function has twice as many parameters as the polynomial), but still reasonable as most of the approximation literature fixes polynomial and rational degrees in comparisons.\nFigure 1 shows the ability of all three classes to approximate a truncated reciprocal. Both rational functions and ReLU networks have the ability to form “switch statements” that let them approximate different functions on different intervals with low complexity (Petrushev & Popov, 1987, Theorem 5.2). Polynomials lack this ability; they can not even approximate the ReLU well, despite it being low degree polynomials on two separate intervals.\nFigure 2 shows that rational functions can fit the threshold function errily well; the particular rational function used here is based on using Newman polynomials to approximate (1 + |x|/x)/2 (Newman, 1964).\nFigure 3 shows Newman polynomialsN5,N9,N13. As discussed in the text, they are unlike orthogonal polynomials, and are used in all rational function approximations except Figure 1, which used a least squares fit.\nFigure 4 shows that rational functions (via the Newman polynomials) fit ∆ very well, whereas polynomials have trouble. These errors degrade sharply after recursing, namely when approximating ∆3 as in Figure 6.\nFigure 5 shows how polynomials and rational functions fit the ReLU, where the ReLU representation, based on Newman polynomials, is the one used in the proofs here. Despite the apparent slow convergence of polynomials in this regime, the polynomial fit is still quite respectable."
    }, {
      "heading" : "5. Open problems",
      "text" : "There are many next steps for this and related results.\n1. Can rational functions, or some other approximating class, be used to more tightly bound the generalization properties of neural networks? Notably, the VC dimension of sigmoid networks uses a conversion to polynomials (Anthony & Bartlett, 1999).\n2. Can rational functions, or some other approximating class, be used to design algorithms for training neural networks? It does not seem easy to design reasonable algorithms for minimization over rational functions; if this is fundamental and moreover in contrast with neural networks, it suggests an algorithmic benefit of neural networks.\n3. Can rational functions, or some other approximating class, give a sufficiently refined complexity estimate of neural networks which can then be turned into a regularization scheme for neural networks?"
    }, {
      "heading" : "Acknowledgements",
      "text" : "The author thanks Adam Klivans and Suvrit Sra for stimulating conversations. Adam Klivans and the author both thank Almare Gelato Italiano, in downtown Berkeley, for necessitating further stimulating conversations, but now on the topic of health and exercise. Lastly, the author thanks the University of Illinois, Urbana-Champaign, and the Simons Institute in Berkeley, for financial support during this work."
    }, {
      "heading" : "A. Deferred material from Section 2",
      "text" : "This section collects technical material omitted from Section 2. The first step is to fill in some missing details regarding Newman polynomials.\nA.1. Newman polynomials\nDefine the Newman polynomial (Newman, 1964)\nNr(x) := r−1∏ i=1 (x+ αir) where αr := exp(−1/ √ r). (A.1)\nDefine Ar(x), the Newman approximation to |x|, as\nAr(x) := x ( Nr(x)−Nr(−x) Nr(x) +Nr(−x) ) .\nLemma A.2 (Newman (1964)). Suppose r ≥ 5.\n• Nr(x) +Nr(−x) > 0; in particular, Ar is well-defined over R.\n• Given any b ≥ 1, sup\nx∈[−b,+b] ∣∣bAr(x/b)− |x|∣∣ ≤ 3b exp(−√r). Proof. • If x = 0, then Nr(−x) = Nr(x) = ∏r−1 i=1 α i r > 0. Otherwise x > 0, and note for any i ∈ {1, . . . , r − 1} that\n– x ∈ (0, αir] means |x− αir| = αir − x < αir + x, – x > αir means |x− αir| = x− αir < x+ αir.\nTogether, |x− αir| < x+ αir, and\nNr(x) = r−1∏ i=1 (x+ αir) > r−1∏ i=1 |x− αir| = ∣∣∣∣∣∣ r−1∏ i=1 (x− αir) ∣∣∣∣∣∣ = |Nr(−x)|. Since Nr(x) > 0 when x > 0, thus Nr(x) +Nr(−x) > Nr(x)− |Nr(x)| = 0. Lastly, the case x < 0 follows from the case x > 0 since x 7→ Nr(x) +Nr(−x) is even.\n• For any x ∈ [−b,+b],\n||x| − bAr(x/b)| = ∣∣∣b (|x/b| −Ar(x/b))∣∣∣ = b ∣∣x/b−Ar(x/b)∣∣ ≤ 3b exp(−√r),\nwhere the last step was proved by Newman (Lorentz et al., 1996, Theorem 7.3.1).\nFinally, define\nR̃r,b(x) := Rr(x; b) := x+ bAr(x/b)\n2 ,\nr,b := 3 exp(− √ r)/2,\nRr,b(x) := (1− 2 r,b)R̃r,b(x) + b r,b.\nLemma A.3. If r ≥ 5 and b ≥ 1 and r,b ≤ 1/2, then Rr,b is a degree-r rational function over R, and\nsup x∈[−b,+b] ∣∣∣σr(x)− R̃r,b(x)∣∣∣ ≤ b r,b, sup x∈[−b,+b]\n∣∣σr(x)−Rr,b(x)∣∣ ≤ 3b r,b. If r,b ≤ 1, then Rr,b ∈ [0, b] along [−b,+b].\nProof. Let r, b be given, and for simplicity omit the various subscripts. The denominator of R̃ is positive over R by Lemma A.2. Now fix x ∈ [−b,+b]. Using the second part of Lemma A.2,∣∣∣σr(x)− R̃(x)∣∣∣ = ∣∣∣∣x+ |x|2 − x+ bA(x/b)2\n∣∣∣∣ = 12 ∣∣|x| − bA(x/b)∣∣ ≤ 3b exp(−√r)/2 = b . Next, note that R̃ ∈ [−b , b(1 + )]:\nR̃(x) ≤ σr(x) + b ≤ b(1 + ), R̃(x) ≥ σr(x)− b ≥ −b .\nThus ∣∣σr(x)−R(x)∣∣ ≤ ∣∣∣σr(x)− R̃(x)∣∣∣+∣∣∣R̃(x)−R(x)∣∣∣ ≤ b + 0 + 2\n∣∣∣R̃(x)− b/2∣∣∣ ≤ 3b .\nMoreover\nR(x) = (1− 2 )R̃(x) + b ≥ (1− 2 )(−b ) + b ≥ 0, R(x) ≤ (1− 2 )b(1 + ) + b ≤ b.\nA.2. Remaining deferred proofs\nThe details of converting a ReLU network into a rational network are as follows.\nLemma A.4. Let f : Rd → R be represented by a ReLU network with ≤ l layers, and with each node computing a map z 7→ σr(a>z + b) where ‖a‖1 + |b| ≤ 1. Then for every > 0 there exists a function g : Rd → R with |g(x)− f(x)| ≤ for ‖x‖∞ ≤ 1 where g is obtained from f by replacing each ReLU with an r-rational function with r = O(ln(1/ )2).\nProof of Lemma 1.3. This construction will use the Newman-based approximation R := Rr,b to σr with degree O(ln(l/ )2). By Lemma A.3, this degree suffices to guarantee R(x) ∈ [0, 1] and |R(x)− σr(x)| ≤ /l for |x| ≤ 1.\nFirst note, by induction on layers, that the output of every node has absolute value at most 1. The base case is the inputs themselves, and thus the statement holds by the assumption ‖x‖∞ ≤ 1. In the inductive step, consider any node z 7→ R(a>z + b), where z is the multivariate input to this node. By the inductive hypothesis, ‖z‖∞ ≤ 1, thus\n|a>z + b| ≤ ‖a‖1‖z‖∞ + |b| ≤ 1.\nAs such, R(a>z + b) ∈ [0, 1].\nIt remains to prove the error bound. For any node, if h : Rd → R denote the function (of the input x) compute by this node, then let hR denote the function obtained by replacing all ReLUs with R. It will be shown that every node in layer i has |hR(x)− h(x)| ≤ i /l when ‖x‖∞ ≤ 1. The base case is the inputs themselves, and thus there is no approximation error, meaning the bound holds with error 0 ≤ 1 · /l. Now consider any node in layer i + 1 with i ≥ 0, and suppose the claim holds for nodes in layers i and lower. For convenience, let H denote the multivalued map computed by the previous layer,\nand HR denote the multivalued map obtained by replacing all activations in earlier layers with R. Since σr is 1-Lipschitz, and since the earlier boundedness property grants∣∣∣a>HR(x) + b∣∣∣ ≤ ‖a‖1‖HR(x)‖∞ + |b| ≤ 1, then\n|h(x)− hR(x)| = ∣∣∣σr(a>H(x) + b)−R(a>HR(x) + b)∣∣∣ ≤ ∣∣∣σr(a>H(x) + b)− σr(a>HR(x) + b)∣∣∣+∣∣∣σr(a>HR(x) + b)−R(a>HR(x) + b)∣∣∣ ≤ ∣∣∣a>H(x)− a>HR(x)∣∣∣+ /l ≤ ‖a‖1‖H −HR‖∞ + /l ≤ (i+ 1) /l.\nNext, collapsing a rational network down into a single rational function is proved as follows.\nLemma A.5. Let f : Rd → R be a rational network with ≤ m nodes in each of ≤ l layers, and the activation function has degree r. Then the rational function obtained by collapsing f has degree at most (rm)l.\nProof. Throughout this proof, let R denote the rational activation function at each node, and write R(x) = p(x)/q(x) where p and q are polynomials of degree at most r. The proof establishes, by induction on layers, that the nodes of layer i compute rational functions of degree at most (rm)i. The base case is layer 1, where each node computes a rational function of degree r ≤ rm. For the case of layer i > 1, fix any node, and denote its computation by h(x) = R( ∑n j=1 ajgj(x) + b), where n ≤ m and gj = pj/qj is a rational function of degree at most (rm)i−1. Note\ndeg ∑ j ajpj(x) qj(x) + b  = deg(b∏j qj(x) +∑j ajpj(x)∏k 6=j qk(x)∏ j qj(x) ) ≤ m(mr)i−1.\nthe map f := ∑ j ajgj + b is rational of degree m(mr)\ni−1. Let pf and qf denote its numerator and denominator. Since R is univariate, its numerator p and denominator q have the form p(x) := ∑ j≤r cjx j and q(x) ∑ j≤r djx\nj . Thus, using the fact that q > 0,\ndeg(h(x)) = deg(R(f(x))) = deg ∑j≤r cj(pf (x)/qf (x))j∑ j≤r dj(pf (x)/qf (x)) j ( qf (x) r qf (x)r ) = deg (∑ j≤r cjpf (x) jqf (x)) r−j∑\nj≤r djpf (x) jqf (x))r−j\n) ≤ rm(rm)i−1 = (rm)i.\nThe proof of part 2 of Theorem 1.1 now follows by combining Lemmas 1.3, A.3 and A.5.\nThe last piece is a slighly more detailed account of Theorem 1.2.\nProof of Theorem 1.2. Let ∆ : R→ R denote the triangle function from (Telgarsky, 2015):\n∆(x) :=  2x x ∈ [0, 1/2], 2(1− x) x ∈ (1/2, 1], 0 otherwise.\nDefine the target function f = ∆k, which as in (Telgarsky, 2015) has 2k regular-spaced crossings of 0 along [0, 1], and can be written as a network with 2k layers, each with ≤ 2 nodes.\nNext consider the rational function g. As in the text, it is necessary to count the zeros of g − 1/2 (the case g = 1/2 is trivial). Writing g = p/q, equivalently this means the zeros of 2p − q. Since p and q together have ≤ 2k−2 terms, by Descartes’ rule of signs, g crosses 1/2 at most 2k−2 times along (0, 1]. Therefore, following a similar calculation to the proof in (Telgarsky, 2016, Proof of Theorem 1.1),∫\n(0,1]\n|f(x)− g(x)|dx ≥ 1 32\n( 1− 2(2 k−2)\n2k\n) = 1\n64 ."
    }, {
      "heading" : "B. Deferred material from Section 3",
      "text" : "B.1. Towards the proof of part 1 of Theorem 1.1\nTo start, the lemmas due to Yarotsky are slightly adjusted to clip the range to [0, 1].\nProof of Lemma 3.1. Inspecting Yarotsky’s proof, the construction provides g(x) with g(0) = 0 and supx∈[0,1] |g(x) − x2| ≤ . To provide the desired f , it suffices to define f(x) = σr(g(x))− σr(g(x)− 1).\nProof of Lemma 3.2. First suppose B = 1, let f be as in Lemma 3.1 at resolution /8, and define h via the polarization identity (as in Yarotsky’s proof):\nh(x, y) = 2(f(x/2 + y/2)− f(x/2)− f(y/2))\n(where x/2 appears since f has domain [0, 1]2). Since f(0) = 0,\nh(x, 0) = 2(f(x/2)− f(x/2)− 0) = 0, h(0, y) = 2(f(y/2)− 0− f(y/2)) = 0.\nMoreover, for any x, y ∈ [0, 1]\nh(x, y)− xy ≤ 2 ( (x/2 + y/2)2 + /8− x2/4 + /8− y2/4 + /8 ) − xy ≤ xy + ,\nh(x, y)− xy ≥ 2 ( (x/2 + y/2)2 − /8− x2/4− /8− y2/4− /8 ) − xy ≤ xy − .\nFinally, set g̃(x, y) := σr(h(x, y))− σr(h(x, y)− 1), which preserves the other properties.\nNow consider the case B ≥ 1, and set g(x, y) = B2g(x/B, y/B). Then (x, y) ∈ [0, B]2 implies∣∣g(x, y)− xy∣∣ = B2∣∣g̃(x/B, y/B)− (x/B)(y/B)∣∣ ≤ B2, and g ∈ [0, B2] over [0, B]2 since g̃ ∈ [0, 1] over [0, 1]2.\nThe full details for the proof of fast exponentiation are as follows.\nProof of Lemma 3.3. This proof constructs a network implementing the russian peasant algorithm for exponentiation:\n1. Set v := 1.\n2. For b ∈ bits-ltr(y) (the bits of y from left to right):\n(a) Set v := v2. (b) If b = 1, set v := vx.\nFor example, x101012 = ((((12 · x)2)2 · x)2)2 · x = x2 4 · x2 2 · x.\nThe two lines in the inner loop will use the squaring function f from Lemma 3.1 and the multiplication function g from Lemma 3.2, each with accuracy c where c := 1/y2. At the end, the network returns σr(v)−σr(v−1) to ensure the output lies in [0, 1]; this procedure can not increase the error. Since the loop is invokeO(ln(y)) times and each inner loop requires a network of size O(ln(1/(c ))) = O(ln(y/ )), the full network has size O(ln(y/ )2).\nIt remains to show that the network computes a function h which satisfies\nh(x) = xy.\nLet zj denote the integer corresponding to the first j bits of y when read left-to-right; it will be shown by induction (on the bits of y from left to right) that, at the end of the jth invocation of the loop,\n|v − xzj | ≤ z2j c .\nThis suffices to establish the claim since then |v − xy| ≤ y2c = .\nFor the base case, consider j = 0; then v = 1 = xz0 = x0 as desired. For the inductive step, let w denote v at the end of the previous iteration, whereby the inductive hypothesis grants\n|w − xzj−1 | ≤ z2j−1c .\nThe error after the approximate squaring step can be upper bounded as\nf(w)− x2zj−1 ≤ ( f(w)− w2 ) + ( w2 − x2zj−1 ) ≤ c + ( (xzj−1 + z2j−1c ) 2 − x2zj−1 )\n≤ c + 2z2j−1c + z4j−1c2 2 ≤ c + 2z2j−1c + z2j−1c ≤ (2zj−1)2c .\nThe reverse inequality is proved analogously, thus∣∣∣f(w)− x2zj−1 ∣∣∣ ≤ (2zj−1)2c . If the bit b in this iteration is 0, then 2zj−1 = zj and the proof for this loop iteration is complete. Otherwise b = 1, and\nv − xzj = g(f(w), x)− x2zj−1+b\n≤ xf(w) + c − x2zj−1+b ≤ ( (2zj−1) 2 + 1 ) c\n≤ (zj)2c .\nThe proof of the reverse inequality is analogous, which establishes the desired error bound on v for this loop iteration.\nUsing the preceding exponentiation lemma, the proof of polynomial approximation is as follows.\nProof of Lemma 3.4. It will be shown momentarily that a single monomial term can be approximating to accuracy /swith a network of size O ( min{r ln(sr/ ), d ln(dsr/ )2} ) . This implies the result by summing ≤ s monomials comprising a polynomial, along with their errors.\nFor a single monomial, here are two constructions.\n• One approach is to product together ≤ r individual variables (and lastly multiple by a fixed scalar coefficient), with no concern of the multiplicities of individual variables. To this end, let (y1, . . . , yk) with s ≤ r denote coordinates of the input variable so that ∏k i=1 yi is the desired multinomial. Let g denote multiplication with error 0 := /(rs)\nas provided by Lemma 3.2. The network will compute αgi(y), where α ∈ [−1,+1] is the scalar coefficient on the monomial, and gi is recursively defined as\ng1(y) = y1, gi+1(y) := f(yi+1, gi(y))\nIt is established by induction that ∣∣∣∣∣∣gi(y)− i∏\nj=1\nyj ∣∣∣∣∣∣ ≤ j 0 The base case is immediate since g1(y) = y1 = ∏1 j=1 yj . For the inductive step, gi+1(y)− i+1∏ j=1 yj = f(yi+1, gi(y))− i+1∏ j=1 yj ≤ yi+1gi(y)+ 0− i+1∏ j=1 yj ≤ yi+1(i 0 + i∏ j=1 yj)+ 0− i+1∏ j=1 yj ≤ (i+1) 0,\nand the reverse inequality is proved analogously.\n• Alternatively, the network uses the fast exponentiation routine from Lemma 3.3, and then multiplies together the terms for individual coordinates. In particular, the exponentiation for each coordinate with accuracy 1 := /(ds) requires a network of size O(ln(r/ 1)2). By an analysis similar to the preceding construction, multiplying ≤ d such networks will result in a network approximating the monomial with error /s and size O(d ln(r/ 1)2).\nNext, the proof that ReLU networks can efficiently compute reciprocals, namely Lemma 3.5. As stated in the text, it is first necessary to establish Lemma 3.6, which gives computes reciprocals at a choice of magnitude, and then Lemma 3.7, which combines these circuits across scales.\nProof of Lemma 3.7. For each i ∈ {1, . . . , n}, define the function\npi(z) :=  z−ai−1 ai−ai−1 z ∈ [ai−1, ai], ai+1−z ai+1−ai z ∈ (ai, ai+1], 0 otherwise.\nThe functions (pi)ni=1 have the following properties.\n• Each pi can be represented by a ReLU network with three nodes in 2 layers.\n• For any x ∈ [a1, an], there exists j ∈ {1, . . . , n} so that i ∈ {j, j + 1} implies pi(x) ≥ 0 and i 6∈ {j, j + 1} implies pi(x) = 0. Indeed, it suffices to let j be the smallest element of {1, . . . , n− 1}. satisfying x ∈ [aj , aj+1].\n• For any x ∈ [a1, an], ∑n i=1 pi(x) = 1.\nThe family (pi)ni=1 thus forms a partition of unity over [a1, an], moreover with the property that at most two elements, necessarily consecutive, are nonzero at any point in the interval.\nLet h : [0, B]2 → [0, B] be a uniform -approximation via ReLU networks to the multiplication map (x, y) 7→ xy; by Lemma 3.2, h has O(ln(B/ )) nodes and layers, and moreover the multiplication is exact when either input is 0. Finally, define g : R→ R as\ng(x) := n∑ i=1 h(pi(x), gi(x)).\nBy construction, g is a ReLU network with O(ln(B/ ) + maxi ki) layers and O(n ln(B/ ) + ∑ imi) nodes.\nIt remains to check the approximation properties of g. Let x ∈ [a1, an] be given, and set j := min { j ∈ {1, n− 1} : x ∈ [aj , aj+1] } . Then∣∣f(x)− g(x)∣∣ = ∣∣f(x)− h(pj(x), gj(x))− h(pj+1(x), gj+1(x))∣∣\n≤ ∣∣f(x)− pj(x)gj(x)− pj+1(x)gj+1(x)∣∣\n+ ∣∣pj(x)gj(x)− h(pj(x), gj(x))∣∣+∣∣pj+1(x)gj+1(x)− h(pj+1(x), gj+1(x))∣∣\n≤ pj(x) ∣∣f(x)− gj(x)∣∣+ pj+1(x)∣∣f(x)− gj+1(x)∣∣+ +\n≤ pj(x) + pj+1(x) + 2 .\nProof of Lemma 3.6. Set c := 1/b and r := db ln(1/( a))/ae and 0 := /(r2c). For i ∈ {0, . . . , r}, let hi : [0, 1]→ [0, 1] denote a ReLU network 0-approximation to the map x 7→ xi; by Lemma 3.3, hi hasO(ln(1/ 0)2 nodes and layers. Define q : [0, 1]→ R as\nq(x) := c r∑ i=0 hi(1− cx).\nBy construction, q is a ReLU network with O(r ln(1/ 0)2) nodes and O(ln(1/ 0)2) layers.\nFor the approximation property of q, let x ∈ [a, b] be given, and note\n∣∣∣∣q(x)− 1x ∣∣∣∣ ≤ ∣∣∣∣∣∣q(x)− c r∑ i=0 (1− cx)i ∣∣∣∣∣∣+ ∣∣∣∣∣∣c r∑ i=0 (1− cx)i − 1 x ∣∣∣∣∣∣ ≤ c\nr∑ i=0 ∣∣∣hi(1− cx)− (1− cx)i∣∣∣+ ∣∣∣∣∣∣c r∑ i=0 (1− cx)i − c 1− (1− cx) ∣∣∣∣∣∣ ≤ +\n∣∣∣∣∣∣c r∑ i=0 (1− cx)i − c ∞∑ i=0 (1− cx)i ∣∣∣∣∣∣\n= + c ∞∑ i=r+1 (1− cx)i\n= + c(1− cx)r+1)\n1− (1− cx)\n≤ + exp(−cx(r + 1)) x ≤ + exp(−car) a ≤ + .\nProof of Lemma 3.5. Set 0 := /3. For i ∈ {1, . . . , k}, Let q̃i denote the ReLU network 0-approximation to 1/x along [2−i, 2−i+1]; by Lemma 3.6, q̃i has O(k2 ln(1/ )2) layers and O(k3 ln(1/ )3) nodes. Furthermore, set qi := max{2i,min{0, q̃i}}, which has the same approximation and size properties of q̃i. Applying Lemma 3.7 with B := 2k and reals ai := 2i−k−1 for i ∈ {0, . . . , k + 2} and functions (qi)ki=1, it follows that there exists q : R → R which -approximates 1/x along [2−k, 1] with size O(k2 ln(1/ ) + k4 ln(1/ )3) and depth O(k ln(1/ ) + k2 ln(1/ )2).\nPutting the pieces together gives the proof of the second part of the main theorem.\nProof of part 1 of Theorem 1.1. Define 0 := /22k+3, and use Lemmas 3.2, 3.4 and 3.5 to choose ReLU network approximations fp and fq to p and q at resolution 0, as well as ReLU network f for multiplication along [0, 1]2 and g to approximate x 7→ 1/x along [2−k−1, 1], again at resolution 0. The desired network will compute the function h, defined as\nh(x) := 2k+1f(fp(x), 2 −k−1g(fq(x))).\nCombining the size bounds from the preceding lemmas, h itself has size bound\nO ( min { sr ln(sr/ 0), sd ln(dsr/ 0) 2 }) +O ( ln(1/ 0) ) +O ( k4 ln(1/ 0) 3 )\n= O ( min { srk ln(sr/ ), sdk2 ln(dsr/ )2 } + k7 ln(1/ )3 ) .\nBefore verifying the approximation guarantee upon h, it is necessary to verify that the inputs to f and g are of the correct magnitude, so that Lemmas 3.2 and 3.5 may be applied. Note firstly that g(fq(x)) ∈ [1, 2k+1], since q(x) ∈ [2−k, 1] implies fq(x) ∈ [2−k − 0, 1] ⊆ [2−k−1, 1]. Thus 2−k−1g(fq(x)) ∈ [0, 1], and so both arguments to f within the definition of h are within [0, 1]. Consequently, the approximation guarantees of Lemmas 3.2, 3.4 and 3.5 all hold, whereby\nh(x)− p(x) q(x)\n= 2k+1f ( fp(x), 2 −k−1g(fq(x)) ) − p(x) q(x)\n≤ fp(x)g(fq(x))− p(x)\nq(x) + 2k+1 0\n≤ fp(x) fq(x) − p(x) q(x) + fp(x) 0 + 2 k+1 0\n≤ p(x) + 0 q(x)− 0 − p(x) q(x) + fp(x) 0 + 2 k+1 0 ≤ p(x)q(x) + q(x) 0 − p(x)q(x) + p(x) 0 q(x)(q(x)− 0) + fp(x) 0 + 2 k+1 0\n= 0\nq(x)− 0 + p(x) 0 q(x)(q(x)− 0) + fp(x) 0 + 2 k+1 0\n≤ 2k+1 0 + 22k+1 0 + fp(x) 0 + 2k+1 0 ≤ .\nThe proof of the reverse inequality is analogous.\nB.2. Proof of Proposition 1.5\nProof of Proposition 1.5. By (Telgarsky, 2015, Lemma 2.1), a ReLU network g with at most m nodes in each of at most l layers computes a function which is affine along intervals forming a partition of R of cardinality at most N ′ ≤ (2m)l. Further subdivide this collection of intervals at any point where g intersects f(x) = 1/x; since f is convex and g is affine within each existing piece of the subdivision, then the number of intervals is at most three times as large as before. Together, the total number of intervals N ′′ now satisfies N ′′ ≤ 3(2m)l. Finally, intersect the family of intervals with [1/2, 3/4], obtaining a final number of intervals N ≤ 3(2m)l.\nLet (U1, . . . , UN ) denote this final partition of [1/2, 3/4], and let (δ1, . . . , δN ) denote the corresponding interval lengths. Let S ⊆ {1, . . . , N} index the subcollection of intervals with length at least 1/(8N), meaning S := {j ∈ {1, . . . , N} : δj ≥ 1/(8N)}. Then ∑\nj∈S δj =\n1 4 − ∑ j 6∈S δj > 1 4 − N 8N = 1 8 .\nConsider now any interval Uj with endpoints {a, b}. Since 1/2 ≤ a < b ≤ 3/4, then f satisfies 128/27 ≤ f ′′ ≤ 16. In order to control the difference between f and g along Uj , consider two cases: either f ≥ g along this interval, or f ≤ g along this interval (these are the only two cases due to the subdivisions above).\n• If f ≥ g, then g can be taken to be a tangent to f at some point along the interval [a, b] (otherwise, the distance can always be only decreased by moving g up to be a tangent). Consequently, g(x) := f(c) + f ′(c)(x − c) for some c ∈ [a, b], and by convexity and since f ′′ ≥ 128/27 over this interval,∫ b\na\n|f(x)− g(x)|dx ≥ min c∈[a,b] ∫ b a ( (f(c) + f ′(c)(x− c) + f ′′(b)(x− c)2/2)− (f(c) + f ′(c)(x− c)) ) dx\n= min c∈[a,b] ∫ b a f ′′(b)(x− c)2/2 dx\n≥ 64 27 min c∈[a,b]\n( (b− c)3 − (a− c)3\n3\n) .\n= 64\n81 min α∈[0,1]\n( (α(b− a))3 + ((1− α)(b− a))3 ) = 16(b− a)3\n81 .\n• On the other hand, if g ≥ f , then g passes above the secant line h between (a, f(a)) and (b, f(b)). The area between f and g is at least the area between f and h, and this latter area is bounded above by a triangle of width (b − a) and height\nf(a) + f(b)\n2 − f\n( (a+ b)/2 ) = 1\n2\n( 1\na +\n1 b − 1 a+ b ) = 1\n2ab(a+ b)\n( b(a+ b) + a(a+ b)− ab ) ≥ 1\n2ab(a+ b)\n( b(a+ b) + a(a+ b)− ab ) ≥ 3/2\n4 .\nCombining this with b− a ≤ 1/4, the triangle has area at least 3(b− a)/16 ≥ 3(b− a)3.\nCombining these two cases and summing across the intervals of S (where j ∈ Sj implies δj ≥ 1/(8N)),∫ [1/2,3/4] |f(x)− g(x)|dx ≥ ∑ j∈S ∫ Uj |f(x)− g(x)|dx\n≥ ∑ j∈S δ3j 6\n≥ 1 6(8N)2 ∑ j∈S δj\n≥ 1 27648(2m)2l .\nIf m < (27648 )−1/(2l)/2, then ∫ [1/2,3/4] |f(x)− g(x)|dx ≥ 1 27648(2m)2l > ."
    } ],
    "references" : [ {
      "title" : "Neural Network Learning: Theoretical Foundations",
      "author" : [ "Anthony", "Martin", "Bartlett", "Peter L" ],
      "venue" : null,
      "citeRegEx" : "Anthony et al\\.,? \\Q1999\\E",
      "shortCiteRegEx" : "Anthony et al\\.",
      "year" : 1999
    }, {
      "title" : "Log depth circuits for division and related problems",
      "author" : [ "Beame", "Paul", "Cook", "Stephen A", "Hoover", "H. James" ],
      "venue" : "SIAM Journal on Computing,",
      "citeRegEx" : "Beame et al\\.,? \\Q1986\\E",
      "shortCiteRegEx" : "Beame et al\\.",
      "year" : 1986
    }, {
      "title" : "On the expressive power of deep learning: A tensor analysis",
      "author" : [ "Cohen", "Nadav", "Sharir", "Or", "Shashua", "Amnon" ],
      "venue" : "COLT",
      "citeRegEx" : "Cohen et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Cohen et al\\.",
      "year" : 2016
    }, {
      "title" : "Approximation by superpositions of a sigmoidal function",
      "author" : [ "Cybenko", "George" ],
      "venue" : "Mathematics of Control, Signals and Systems,",
      "citeRegEx" : "Cybenko and George.,? \\Q1989\\E",
      "shortCiteRegEx" : "Cybenko and George.",
      "year" : 1989
    }, {
      "title" : "The power of depth for feedforward neural networks",
      "author" : [ "Eldan", "Ronen", "Shamir", "Ohad" ],
      "venue" : "In COLT,",
      "citeRegEx" : "Eldan et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Eldan et al\\.",
      "year" : 2016
    }, {
      "title" : "Reliably learning the relu in polynomial time",
      "author" : [ "Goel", "Surbhi", "Kanade", "Varun", "Klivans", "Adam", "Thaler", "Justin" ],
      "venue" : "In COLT,",
      "citeRegEx" : "Goel et al\\.,? \\Q2017\\E",
      "shortCiteRegEx" : "Goel et al\\.",
      "year" : 2017
    }, {
      "title" : "Why deep neural networks for function approximation",
      "author" : [ "Liang", "Shiyu", "R. Srikant" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Liang et al\\.,? \\Q2017\\E",
      "shortCiteRegEx" : "Liang et al\\.",
      "year" : 2017
    }, {
      "title" : "Constructive approximation : advanced problems",
      "author" : [ "G.G. Lorentz", "Golitschek", "Manfred von", "Makovoz", "Yuly" ],
      "venue" : "Michigan Math. J., 11(1):11–14,",
      "citeRegEx" : "Lorentz et al\\.,? \\Q1996\\E",
      "shortCiteRegEx" : "Lorentz et al\\.",
      "year" : 1996
    }, {
      "title" : "Approximating threshold circuits by rational functions",
      "author" : [ "Paturi", "Ramamohan", "Saks", "Michael E" ],
      "venue" : "Inf. Comput.,",
      "citeRegEx" : "Paturi et al\\.,? \\Q1994\\E",
      "shortCiteRegEx" : "Paturi et al\\.",
      "year" : 1994
    }, {
      "title" : "Rational approximation of real functions. Encyclopedia of mathematics and its applications",
      "author" : [ "Petrushev", "P.P. Penco Petrov", "Popov", "Vasil A" ],
      "venue" : null,
      "citeRegEx" : "Petrushev et al\\.,? \\Q1987\\E",
      "shortCiteRegEx" : "Petrushev et al\\.",
      "year" : 1987
    }, {
      "title" : "Why and when can deep – but not shallow – networks avoid the curse of dimensionality: a review",
      "author" : [ "Poggio", "Tomaso", "Mhaskar", "Hrushikesh", "Rosasco", "Lorenzo", "Miranda", "Brando", "Liao", "Qianli" ],
      "venue" : null,
      "citeRegEx" : "Poggio et al\\.,? \\Q2017\\E",
      "shortCiteRegEx" : "Poggio et al\\.",
      "year" : 2017
    }, {
      "title" : "Depth separation in relu networks for approximating smooth non-linear functions. 2016",
      "author" : [ "Safran", "Itay", "Shamir", "Ohad" ],
      "venue" : null,
      "citeRegEx" : "Safran et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Safran et al\\.",
      "year" : 2016
    }, {
      "title" : "Representation benefits of deep feedforward networks",
      "author" : [ "Telgarsky", "Matus" ],
      "venue" : null,
      "citeRegEx" : "Telgarsky and Matus.,? \\Q2015\\E",
      "shortCiteRegEx" : "Telgarsky and Matus.",
      "year" : 2015
    }, {
      "title" : "Benefits of depth in neural networks",
      "author" : [ "Telgarsky", "Matus" ],
      "venue" : "In COLT,",
      "citeRegEx" : "Telgarsky and Matus.,? \\Q2016\\E",
      "shortCiteRegEx" : "Telgarsky and Matus.",
      "year" : 2016
    }, {
      "title" : "Splines, rational functions and neural networks",
      "author" : [ "Williamson", "Robert C", "Bartlett", "Peter L" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Williamson et al\\.,? \\Q1991\\E",
      "shortCiteRegEx" : "Williamson et al\\.",
      "year" : 1991
    }, {
      "title" : "Error bounds for approximations with deep relu networks. 2016",
      "author" : [ "Yarotsky", "Dmitry" ],
      "venue" : null,
      "citeRegEx" : "Yarotsky and Dmitry.,? \\Q2016\\E",
      "shortCiteRegEx" : "Yarotsky and Dmitry.",
      "year" : 2016
    }, {
      "title" : "denote the triangle function from (Telgarsky",
      "author" : [ "R R" ],
      "venue" : null,
      "citeRegEx" : "R→,? \\Q2015\\E",
      "shortCiteRegEx" : "R→",
      "year" : 2015
    } ],
    "referenceMentions" : [ {
      "referenceID" : 2,
      "context" : "There are also a variety of other result giving the ability of ReLU networks to approximate various function classes (Cohen et al., 2016; Poggio et al., 2017).",
      "startOffset" : 117,
      "endOffset" : 158
    }, {
      "referenceID" : 10,
      "context" : "There are also a variety of other result giving the ability of ReLU networks to approximate various function classes (Cohen et al., 2016; Poggio et al., 2017).",
      "startOffset" : 117,
      "endOffset" : 158
    }, {
      "referenceID" : 7,
      "context" : "Rational functions are extensively studied in the classical approximation theory literature (Lorentz et al., 1996; Petrushev & Popov, 1987).",
      "startOffset" : 92,
      "endOffset" : 139
    }, {
      "referenceID" : 1,
      "context" : ") An ICML reviewer revealed prior work which was embarrassingly overlooked by the author: it has been known, since decades ago (Beame et al., 1986), that neural networks using threshold nonlinearities (i.",
      "startOffset" : 127,
      "endOffset" : 147
    }, {
      "referenceID" : 5,
      "context" : "Together this suggests that not only the connections between rational functions and neural networks are tight (and somewhat known/unsurprising), but also that threshold networks and ReLU networks have perhaps more similarities than what is suggested by the differing VC dimension bounds, approximation results, and algorithmic results (Goel et al., 2017).",
      "startOffset" : 335,
      "endOffset" : 354
    }, {
      "referenceID" : 7,
      "context" : "Following conventions in the approximation theory literature (Lorentz et al., 1996), the denominator polynomial will always be strictly positive.",
      "startOffset" : 61,
      "endOffset" : 83
    }, {
      "referenceID" : 1,
      "context" : "This leads to the second trick (which was also used by Beame et al. (1986)!).",
      "startOffset" : 55,
      "endOffset" : 75
    } ],
    "year" : 2017,
    "abstractText" : "Neural networks and rational functions efficiently approximate each other. In more detail, it is shown here that for any ReLU network, there exists a rational function of degreeO(poly log(1/ )) which is -close, and similarly for any rational function there exists a ReLU network of size O(poly log(1/ )) which is -close. By contrast, polynomials need degree Ω(poly(1/ )) to approximate even a single ReLU. When converting a ReLU network to a rational function as above, the hidden constants depend exponentially on the number of layers, which is shown to be tight; in other words, a compositional representation can be beneficial even for rational functions. 1. Overview Significant effort has been invested in characterizing the functions that can be efficiently approximated by neural networks. The goal of the present work is to characterize neural networks more finely by finding a class of functions which is not only well-approximated by neural networks, but also well-approximates neural networks. The function class investigated here is the class of rational functions: functions represented as the ratio of two polynomials, where the denominator is a strictly positive polynomial. For simplicity, the neural networks are taken to always use ReLU activation σr(x) := max{0, x}; for a review of neural networks and their terminology, the reader is directed to Section 1.4. For the sake of brevity, a network with ReLU activations is simply called a ReLU network. 1.1. Main results The main theorem here states that ReLU networks and rational functions approximate each other well in the sense University of Illinois, Urbana-Champaign; work completed while visiting the Simons Institute. Correspondence to: your friend <mjt@illinois.edu>. Proceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s). −1.00 −0.75 −0.50 −0.25 0.00 0.25 0.50 0.75 1.00 0 1 2 3 4 spike rat poly net Figure 1. Rational, polynomial, and ReLU network fit to “spike”, a function which is 1/x along [1/4, 1] and 0 elsewhere. that -approximating one class with the other requires a representation whose size is polynomial in ln(1 / ), rather than being polynomial in 1/ . Theorem 1.1. 1. Let ∈ (0, 1] and nonnegative integer k be given. Let p : [0, 1] → [−1,+1] and q : [0, 1] → [2−k, 1] be polynomials of degree ≤ r, each with≤ smonomials. Then there exists a function f : [0, 1] → R, representable as a ReLU network of size (number of nodes) O ( k ln(1 / ) + min { srk ln(sr / ), sdk ln(dsr / ) }) ,",
    "creator" : "LaTeX with hyperref package"
  }
}