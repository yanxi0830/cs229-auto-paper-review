{
  "name" : "0809.1493.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Exploring Large Feature Spaces with Hierarchical Multiple Kernel Learning",
    "authors" : [ "Francis Bach" ],
    "emails" : [ "francis.bach@mines.org" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :0\n80 9.\n14 93\nv1 [\ncs .L"
    }, {
      "heading" : "1 Introduction",
      "text" : "In the last two decades, kernel methods have been a prolific theoretical and algorithmic machine learning framework. By using appropriate regularization by Hilbertian norms, representer theorems enable to consider large and potentially infinite-dimensional feature spaces while working within an implicit feature space no larger than the number of observations. This has led to numerous works on kernel design adapted to specific data types and generic kernel-based algorithms for many learning tasks (see, e.g., [1, 2]).\nRegularization by sparsity-inducing norms, such as the ℓ1-norm has also attracted a lot of interest in recent years. While early work has focused on efficient algorithms to solve the convex optimization problems, recent research has looked at the model selection properties and predictive performance of such methods, in the linear case [3] or within the multiple kernel learning framework [4].\nIn this paper, we aim to bridge the gap between these two lines of research by trying to use ℓ1-norms inside the feature space. Indeed, feature spaces are large and we expect the estimated predictor function to require only a small number of features, which is exactly the situation where\n1\nℓ1-norms have proven advantageous. This leads to two natural questions that we try to answer in this paper: (1) Is it feasible to perform optimization in this very large feature space with cost which is polynomial in the size of the input space? (2) Does it lead to better predictive performance and feature selection?\nMore precisely, we consider a positive definite kernel that can be expressed as a large sum of positive definite basis or local kernels. This exactly corresponds to the situation where a large feature space is the concatenation of smaller feature spaces, and we aim to do selection among these many kernels, which may be done through multiple kernel learning [5]. One major difficulty however is that the number of these smaller kernels is usually exponential in the dimension of the input space and applying multiple kernel learning directly in this decomposition would be intractable.\nIn order to peform selection efficiently, we make the extra assumption that these small kernels can be embedded in a directed acyclic graph (DAG). Following [6, 7], we consider in Section 2 a specific combination of ℓ2-norms that is adapted to the DAG, and will restrict the authorized sparsity patterns; in our specific kernel framework, we are able to use the DAG to design an optimization algorithm which has polynomial complexity in the number of selected kernels (Section 3). In simulations (Section 5), we focus on directed grids, where our framework allows to perform non-linear variable selection. We provide extensive experimental validation of our novel regularization framework; in particular, we compare it to the regular ℓ2-regularization and shows that it is always competitive and often leads to better performance, both on synthetic examples, and standard regression and classification datasets from the UCI repository.\nFinally, we extend in Section 4 some of the known consistency results of the Lasso and multiple kernel learning [3, 4], and give a partial answer to the model selection capabilities of our regularization framework by giving necessary and sufficient conditions for model consistency. In particular, we show that our framework is adapted to estimating consistently only the hull of the relevant variables. Hence, by restricting the statistical power of our method, we gain computational efficiency."
    }, {
      "heading" : "2 Hierarchical multiple kernel learning (HKL)",
      "text" : "We consider the problem of predicting a random variable Y ∈ Y ⊂ R from a random variable X ∈ X , where X and Y may be quite general spaces. We assume that we are given n i.i.d. observations (xi, yi) ∈ X × Y , i = 1, . . . , n. We define the empirical risk of a function f from X to R as 1 n ∑n i=1 ℓ(yi, f(xi)), where ℓ : Y × R 7→ R+ is a loss function. We only assume that ℓ is convex with respect to the second parameter (but not necessarily differentiable). Typical examples of loss functions are the square loss for regression, i.e., ℓ(y, ŷ) = 12(y− ŷ)2 for y ∈ R, and the logistic loss ℓ(y, ŷ) = log(1+ e−yŷ) or the hinge loss ℓ(y, ŷ) = max{0, 1−yŷ} for binary classification, where y ∈ {−1, 1}, leading respectively to logistic regression and support vector machines. Other losses may be used for other settings (see, e.g., [2] or the Appendix)."
    }, {
      "heading" : "2.1 Graph-structured positive definite kernels",
      "text" : "We assume that we are given a positive definite kernel k : X × X → R, and that this kernel can be expressed as the sum, over an index set V , of basis kernels kv, v ∈ V , i.e, for all x, x′ ∈ X , k(x, x′) = ∑\nv∈V kv(x, x ′). For each v ∈ V , we denote by Fv and Φv the feature space and feature\nmap of kv, i.e., for all x, x′ ∈ X , kv(x, x′) = 〈Φv(x),Φv(x′)〉. Throughout the paper, we denote\n2\nby ‖u‖ the Hilbertian norm of u and by 〈u, v〉 the associated dot product, where the precise space is omitted and can always be inferred from the context.\nOur sum assumption corresponds to a situation where the feature map Φ(x) and feature space F for k is the concatenation of the feature maps Φv(x) for each kernel kv, i.e, F = ∏\nv∈V Fv and Φ(x) = (Φv(x))v∈V . Thus, looking for a certain β ∈ F and a predictor function f(x) = 〈β,Φ(x)〉 is equivalent to looking jointly for βv ∈ Fv, for all v ∈ V , and f(x) = ∑\nv∈V 〈βv,Φv(x)〉. As mentioned earlier, we make the assumption that the set V can be embedded into a directed acyclic graph. Directed acyclic graphs (referred to as DAGs) allow to naturally define the notions of parents, children, descendants and ancestors. Given a node w ∈ V , we denote by A(w) ⊂ V the set of its ancestors, and by D(w) ⊂ V , the set of its descendants. We use the convention that any w is a descendant and an ancestor of itself, i.e., w ∈ A(w) and w ∈ D(w). Moreover, for W ⊂ V , we let denote sources(W ) the set of sources of the graph G restricted to W (i.e., nodes in W with no parents belonging to W ). Given a subset of nodes W ⊂ V , we can define the hull of W as the union of all ancestors of w ∈ W , i.e., hull(W ) = ⋃w∈W A(w). Given a set W , we define the set of extreme points of W as the smallest subset T ⊂ W such that hull(T ) = hull(W ) (note that it is always well defined, as ⋂\nT⊂V, hull(T )=hull(W ) T ). See Figure 1 for examples of these notions. The goal of this paper is to perform kernel selection among the kernels kv , v ∈ V . We essentially use the graph to limit the search to specific subsets of V . Namely, instead of considering all possible subsets of active (relevant) vertices, we are only interested in estimating correctly the hull of these relevant vertices; in Section 2.2, we design a specific sparsity-inducing norms adapted to hulls.\nIn this paper, we primarily focus on kernels that can be expressed as “products of sums”, and on the associated p-dimensional directed grids, while noting that our framework is applicable to many other kernels. Namely, we assume that the input space X factorizes into p components X = X1 × · · ·×Xp and that we are given p sequences of length q+1 of kernels kij(xi, x′i), i ∈ {1, . . . , p}, j ∈ {0, . . . , q}, such that k(x, x′) =\n∑q j1,...,jp=0 ∏p i=1 kiji(xi, x ′ i) = ∏p i=1\n(\n∑q ji=0 kiji(xi, x ′ i) ) . We\nthus have a sum of (q+1)p kernels, that can be computed efficiently as a product of p sums. A natural DAG on V =\n∏p i=1{0, . . . , q} is defined by connecting each (j1, . . . , jp) to (j1+1, j2, . . . , jp),\n. . . , (j1, . . . , jp−1, jp+1). As shown in Section 2.2, this DAG will correspond to the constraint of selecting a given product of kernels only after all the subproducts are selected. Those DAGs are especially suited to nonlinear variable selection, in particular with the polynomial and Gaussian\n3\nkernels. In this context, products of kernels correspond to interactions between certain variables, and our DAG implies that we select an interaction only after all sub-interactions were already selected.\nPolynomial kernels We consider Xi = R, kij(xi, x′i) = (q j ) (xix ′ i) j ; the full kernel is then\nequal to k(x, x′) = ∏p\ni=1 ∑q j=0 (q j ) (xix ′ i) j = ∏p i=1(1 + xix ′ i) q. Note that this is not exactly\nthe usual polynomial kernel (whose feature space is the space of multivariate polynomials of total degree less than q), since our kernel considers polynomials of maximal degree q.\nGaussian kernels We also consider Xi = R, and the Gaussian-RBF kernel e−b(x−x ′)2 . The following decomposition is the eigendecomposition of the non centered covariance operator for a normal distribution with variance 1/4a (see, e.g., [8]):\ne−b(x−x ′)2 = ∑∞ k=0\n(b/A)k\n2kk! [e−\nb A (a+c)x2Hk( √ 2cx)][e− b A (a+c)(x′)2Hk( √ 2cx′)],\nwhere c2 = a2 + 2ab, A = a + b + c, and Hk is the k-th Hermite polynomial. By appropriately truncating the sum, i.e, by considering that the first q basis kernels are obtained from the first q single Hermite polynomials, and the (q + 1)-th kernel is summing over all other kernels, we obtain a decomposition of a uni-dimensional Gaussian kernel into q + 1 components (q of them are one-dimensional, the last one is infinite-dimensional, but can be computed by differencing). The decomposition ends up being close to a polynomial kernel of infinite degree, modulated by an exponential [2]. One may also use an adaptive decomposition using kernel PCA (see, e.g., [2, 1]), which is equivalent to using the eigenvectors of the empirical covariance operator associated with the data (and not the population one associated with the Gaussian distribution with same variance). In simulations, we tried both with no significant differences.\nFinally, by taking product over all variables, we obtain a decomposition of the p-dimensional Gaussian kernel into (q + 1)p components, that are adapted to nonlinear variable selection. Note that for q = 1, we obtain ANOVA-like decompositions [2].\nKernels or features? In this paper, we emphasize the kernel view, i.e., we are given a kernel (and thus a feature space) and we explore it using ℓ1-norms. Alternatively, we could use the feature view, i.e., we have a large structured set of features that we try to select from; however, the techniques developed in this paper assume that (a) each feature might be infinite-dimensional and (b) that we can sum all the local kernels efficiently (see in particular Section 3.2). Following the kernel view thus seems slightly more natural."
    }, {
      "heading" : "2.2 Graph-based structured regularization",
      "text" : "Given β ∈ ∏v∈V Fv, the natural Hilbertian norm ‖β‖ is defined through ‖β‖2 = ∑ v∈V ‖βv‖2. Penalizing with this norm is efficient because summing all kernels kv is assumed feasible in polynomial time and we can bring to bear the usual kernel machinery; however, it does not lead to sparse solutions, where many βv will be exactly equal to zero.\nAs said earlier, we are only interested in the hull of the selected elements βv ∈ Fv, v ∈ V ; the hull of a set I is characterized by the set of v, such that D(v) ⊂ Ic, i.e., such that all descendants of v are in the complement Ic: hull(I) = {v ∈ V,D(v) ⊂ Ic}c. Thus, if we try to estimate hull(I), we need to determine which v ∈ V are such that D(v) ⊂ Ic. In our context, we are hence looking at selecting vertices v ∈ V for which βD(v) = (βw)w∈D(v) = 0.\nWe thus consider the following structured block ℓ1-norm defined as ∑\nv∈V\ndv‖βD(v)‖ = ∑\nv∈V\ndv( ∑\nw∈D(v)\n‖βw‖2)1/2,\n4\nwhere (dv)v∈V are positive weights. Penalizing by such a norm will indeed impose that some of the vectors βD(v) ∈ ∏\nw∈D(v) Fw are exactly zero. We thus consider the following minimization problem1:\nminβ∈ Q v∈V Fv 1 n ∑n i=1 ℓ(yi, ∑ v∈V 〈βv ,Φv(xi)〉) + λ2 ( ∑ v∈V dv‖βD(v)‖ )2 . (1)\nOur Hilbertian norm is a Hilbert space instantiation of the hierarchical norms recently introduced by [6]. If all Hilbert spaces are finite dimensional, our particular choice of norms corresponds to an “ℓ1-norm of ℓ2-norms”. While with uni-dimensional groups or kernels, the “ℓ1-norm of ℓ∞-norms” allows an efficient path algorithm for the square loss and when the DAG is a tree [6], this is not possible anymore with groups of size larger than one, or when the DAG is a not a tree. In Section 3, we propose a novel algorithm to solve the associated optimization problem in time polynomial in the number of selected groups or kernels, for all group sizes, DAGs and losses. Moreover, in Section 4, we show under which conditions a solution to the problem in Eq. (1) consistently estimates the hull of the sparsity pattern.\nFinally, note that in certain settings (finite dimensional Hilbert spaces and distributions with absolutely continuous densities), these norms have the effect of selecting a given kernel only after all of its ancestors [6]. This is another explanation why hulls end up being selected, since to include a given vertex in the models, the entire set of ancestors must also be selected."
    }, {
      "heading" : "3 Optimization problem",
      "text" : "In this section, we give optimality conditions for the problems in Eq. (1), as well as optimization algorithms with polynomial time complexity in the number of selected kernels. In simulations we consider total numbers of kernels larger than 1030, and thus such efficient algorithms are essential to the success of hierarchical multiple kernel learning (HKL)."
    }, {
      "heading" : "3.1 Reformulation in terms of multiple kernel learning",
      "text" : "Following [9, 10], we can simply derive an equivalent formulation of Eq. (1). Using CauchySchwarz inequality, we have that for all η ∈ RV such that η > 0 and ∑v∈V d2vηv 6 1,\n( ∑ v∈V dv‖βD(v)‖)2 6 ∑ v∈V ‖βD(v)‖\n2\nηv =\n∑ w∈V ( ∑ v∈A(w) η −1 v )‖βw‖2,\nwith equality if and only if ηv = d−1v ‖βD(v)‖( ∑ v∈V dv‖βD(v)‖)−1. We associate to the vector η ∈ RV , the vector ζ ∈ RV such that ∀w ∈ V , ζ−1w = ∑ v∈A(w) η −1 v . We use the natural convention that if ηv is equal to zero, then ζw is equal to zero for all descendants w of v. We let denote H the set of allowed η and Z the set of all associated ζ . The set H and Z are in bijection, and we can interchangeably use η ∈ H or the corresponding ζ(η) ∈ Z . Note that Z is in general not convex (unless the DAG is a tree, see the Appendix), and if ζ ∈ Z , then ζw 6 ζv for all w ∈ D(v), i.e., weights of descendant kernels are smaller, which is consistent with the known fact that kernels should always be selected after all their ancestors.\nThe problem in Eq. (1) is thus equivalent to\nmin η∈H min β∈ Q\nv∈V Fv\n1 n ∑n i=1 ℓ(yi, ∑ v∈V 〈βv ,Φv(xi)〉) + λ2 ∑ w∈V ζw(η) −1‖βw‖2. (2)\n1Following [5], we consider the square of the norm, which does not change the regularization properties, but allow simple links with multiple kernel learning.\n5\nUsing the change of variable β̃v = βvζ −1/2 v and Φ̃(x) = (ζ 1/2 v Φv(x))v∈V , this implies that given the optimal η (and associated ζ), β corresponds to the solution of the regular supervised learning problem with kernel matrix K = ∑\nw∈V ζwKw, where Kw is n × n the kernel matrix associated with kernel kw. Moreover, the solution is then βw = ζw ∑n i=1 αiΦw(xi), where α ∈ Rn are the dual parameters associated with the single kernel learning problem. Thus, the solution is entirely determined by α ∈ Rn and η ∈ RV (and its corresponding ζ ∈ R V ). More precisely, we have (see proof in the Appendix):\nProposition 1 The pair (α, η) is optimal for Eq. (1), with ∀w, βw = ζw ∑n\ni=1 αiΦw(xi), if and only if (a) given η, α is optimal for the single kernel learning problem with kernel matrix K = ∑\nw∈V ζw(η)Kw , and (b) given α, η ∈ H maximizes ∑\nw∈V\n( ∑\nv∈A(w)\nη−1v ) −1α⊤Kwα.\nMoreover, the total duality gap can be upperbounded as the sum of the two separate duality gaps for the two optimization problems, which will be useful in Section 3.2 (see Appendix for more details). Note that in the case of “flat” regular multiple kernel learning, where the DAG has no edges, we obtain back usual optimality conditions [9, 10].\nFollowing a common practice for convex sparsity problems [11], we will try to solve a small problem where we assume we know the set of v such that ‖βD(v)‖ is equal to zero (Section 3.3). We then “simply” need to check that variables in that set may indeed be left out of the solution. In the next section, we show that this can be done in polynomial time although the number of kernels to consider leaving out is exponential (Section 3.2)."
    }, {
      "heading" : "3.2 Conditions for global optimality of reduced problem",
      "text" : "We let denote J the complement of the set of norms which are set to zero. We thus consider the optimal solution β of the reduced problem (on J), namely,\nminβJ∈ Q v∈JFv 1 n ∑n i=1 ℓ(yi, ∑ v∈J 〈βv,Φv(xi)〉) + λ2 ( ∑ v∈V dv‖βD(v)∩J‖ )2 , (3)\nwith optimal primal variables βJ , dual variables α and optimal pair (ηJ , ζJ). We now consider necessary conditions and sufficient conditions for this solution (augmented with zeros for non active variables, i.e., variables in Jc) to be optimal with respect to the full problem in Eq. (1). We denote by δ = ∑\nv∈J dv‖βD(v)∩J‖ the optimal value of the norm for the reduced problem.\nProposition 2 (NJ ) If the reduced solution is optimal for the full problem in Eq. (1) and all kernels in the extreme points of J are active, then we have\nmax t∈sources(Jc)\nα⊤Ktα/d 2 t 6 δ 2.\nProposition 3 (SJ,ε) If maxt∈sources(Jc) ∑ w∈D(t) α ⊤Kwα/( ∑ v∈A(w)∩D(t) dv) 2 6 δ2+ε/λ, then the total duality gap is less than ε.\n6\nThe proof is fairly technical and can be found in the Appendix; this result constitutes the main technical contribution of the paper: it essentially allows to solve a very large optimization problem over exponentially many dimensions in polynomial time.\nThe necessary condition (NJ) does not cause any computational problems. However, the sufficient condition (SJ,ε) requires to sum over all descendants of the active kernels, which is impossible in practice (as shown in Section 5, we consider V of cardinal often greater than 1030). Here, we need to bring to bear the specific structure of the kernel k. In the context of directed grids we consider in this paper, if dv can also be decomposed as a product, then ∑\nv∈A(w)∩D(t) dv is also factorized, and we can compute the sum over all v ∈ D(t) in linear time in p. Moreover we can cache the sums ∑\nw∈D(t) Kw/( ∑ v∈A(w)∩D(t) dv) 2 in order to save running time."
    }, {
      "heading" : "3.3 Dual optimization for reduced or small problems",
      "text" : "When kernels kv, v ∈ V have low-dimensional feature spaces, we may use a primal representation and solve the problem in Eq. (1) using generic optimization toolboxes adapted to conic constraints (see, e.g., [12]). However, in order to reuse existing optimized supervised learning code and use high-dimensional kernels, it is preferable to use a dual optimization. Namely, we use the same technique as [9]: we consider for ζ ∈ Z , the function B(ζ) = minβ∈Qv∈V Fv 1 n ∑n i=1 ℓ(yi, ∑\nv∈V 〈βv,Φv(xi)〉)+ λ 2 ∑ w∈V ζ −1 w ‖βw‖2, which is the optimal value of the single kernel learning problem with kernel matrix ∑\nw∈V ζwKw. Solving Eq. (2) is equivalent to minimizing B(ζ(η)) with respect to η ∈ H . If a ridge (i.e., positive diagonal) is added to the kernel matrices, the function B is differentiable. Moreover, the function η 7→ ζ(η) is differentiable on (R∗+)V . Thus, the function η 7→ B[ζ((1 − ε)η + ε|V |d\n−2)] , where d−2 is the vector with elements d−2v , is differentiable if ε > 0. We can then use the same projected gradient descent strategy as [9] to minimize it. The overall complexity of the algorithm is then proportional to O(|V |n2)—to form the kernel matrices—plus the complexity of solving a single kernel learning problem—typically between O(n2) and O(n3)."
    }, {
      "heading" : "3.4 Kernel search algorithm",
      "text" : "We are now ready to present the detailed algorithm which extends the feature search algorithm of [11]. Note that the kernel matrices are never all needed explicitly, i.e., we only need them (a) explicitly to solve the small problems (but we need only a few of those) and (b) implicitly to compute the sufficient condition (SJ,ε), which requires to sum over all kernels, as shown in Section 3.2.\n• Input: kernel matrices Kv ∈ Rn×n, v ∈ V , maximal gap ε, maximal # of kernels Q • Algorithm\n1. Initialization: set J = sources(V ), compute (α, η) solutions of Eq. (3), obtained using Section 3.3\n2. while (NJ) and (SJ,ε) are not satisfied and #(V ) 6 Q\n– If (NJ) is not satisfied, add violating variables in sources(Jc) to J else, add violating variables in sources(Jc) of (SJ,ε) to J – Recompute (α, η) optimal solutions of Eq. (3)\n• Output: J , α, η\n7\nThe previous algorithm will stop either when the duality gap is less than ε or when the maximal number of kernels Q has been reached. In practice, when the weights dv increase with the depth of v in the DAG (which we use in simulations), the small duality gap generally occurs before we reach a problem larger than Q. Note that some of the iterations only increase the size of the active sets to check the sufficient condition for optimality; forgetting those does not change the solution, only the fact that we may actually know that we have an ε-optimal solution.\nIn the directed p-grid case, the total running time complexity is a function of the number of observations n, and the number R of selected kernels; with proper caching, we obtain the following complexity, assuming O(n3) for the single kernel learning problem, which is conservative: O(n3R+n2Rp2+n2R2p), which decomposes into solving O(R) single kernel learning problems, caching O(Rp) kernels, and computing O(R2p) quadratic forms for the sufficient conditions. Note that the kernel search algorithm is also an efficient algorithm for unstructured MKL."
    }, {
      "heading" : "4 Consistency conditions",
      "text" : "As said earlier, the sparsity pattern of the solution of Eq. (1) will be equal to its hull, and thus we can only hope to obtain consistency of the hull of the pattern, which we consider in this section.\nFor simplicity, we consider the case of finite dimensional Hilbert spaces (i.e., Fv = Rfv ) and the square loss. We also hold fixed the vertex set of V , i.e., we assume that the total number of features is fixed, and we let n tend to infinity and λ = λn decrease with n.\nFollowing [4], we make the following assumptions on the underlying joint distribution of (X,Y ): (a) the joint covariance matrix Σ of (Φ(xv))v∈V (defined with appropriate blocks of size fv × fw) is invertible, (b) E(Y |X) = ∑\nw∈W 〈βw,Φw(x)〉 with W ⊂ V and var(Y |X) = σ2 > 0 almost surely. With these simple assumptions, we obtain (see proof in the Appendix):\nProposition 4 (Sufficient condition) If we have\nmax t∈sources(Wc)\n∑\nw∈D(t)\n‖ΣwW Σ −1 W W Diag(dv‖βD(v)‖ −1)v∈W βW ‖ 2\n( P v∈A(w)∩D(t) dv) 2 < 1,\nthen β and the hull of W are consistently estimated when λnn1/2 → ∞ and λn → 0.\nProposition 5 (Necessary condition) If the β and the hull of W are consistently estimated for some sequence λn, then\nmax t∈sources(Wc)\n‖ΣwWΣ−1WW Diag(dv/‖βD(v)‖)v∈WβW‖2/d2t 6 1.\nNote that the last two propositions are not consequences of the similar results for flat MKL [4], because the groups that we consider are overlapping. Moreover, the last propositions show that we indeed can estimate the correct hull of the sparsity pattern if the sufficient condition is satisfied. In particular, if we can make the groups such that the between-group correlation is as small as possible, we can ensure correct hull selection. Finally, it is worth noting that if the ratios dw/maxv∈A(w) dv tend to infinity slowly with n, then we always consistently estimate the depth of the hull, i.e., the optimal interaction complexity. We are currently investigating extensions to the non parametric case [4], in terms of pattern selection and universal consistency.\n8"
    }, {
      "heading" : "5 Simulations",
      "text" : "Synthetic examples We generated regression data as follows: n = 1024 samples of p ∈ [22, 27] variables were generated from a random covariance matrix, and the label y ∈ R was sampled as a random sparse fourth order polynomial of the input variables (with constant number of monomials). We then compare the performance of our hierarchical multiple kernel learning method (HKL) with the polynomial kernel decomposition presented in Section 2 to other methods that use the same kernel and/or decomposition: (a) the greedy strategy of selecting basis kernels one after the other, a procedure similar to [13], and (b) the regular polynomial kernel regularization with the full kernel (i.e., the sum of all basis kernels). In Figure 2, we compare the two approaches on 40 replications in the following two situations: original data (left) and rotated data (right), i.e., after the input variables were transformed by a random rotation (in this situation, the generating polynomial is not sparse anymore). We can see that in situations where the underlying predictor function is sparse (left), HKL outperforms the two other methods when the total number of variables p increases, while in the other situation where the best predictor is not sparse (right), it performs only slightly better: i.e., in non sparse problems, ℓ1-norms do not really help, but do help a lot when sparsity is expected.\nUCI datasets For regression datasets, we compare HKL with polynomial (degree 4) and Gaussian-RBF kernels (each dimension decomposed into 9 kernels) to the following approaches with the same kernel: regular Hilbertian regularization (L2), same greedy approach as earlier (greedy), regularization by the ℓ1-norm directly on the vector α, a strategy which is sometimes used in the context of sparse kernel learning [14] but does not use the Hilbertian structure of the kernel (lasso-α), multiple kernel learning with the p kernels obtained by summing all kernels associated with a single variable, a strategy suggested by [5] (MKL). For all methods, the kernels were held fixed, while in Table 1, we report the performance for the best regularization parameters obtained by 10 random half splits.\nWe can see from Table 1, that HKL outperforms other methods, in particular for the datasets bank-32nm, bank-32nh, pumadyn-32nm, pumadyn-32nh, which are datasets dedicated to non linear regression. Note also, that we efficiently explore DAGs with very large numbers of vertices #(V ).\nFor binary classification datasets, we compare HKL (with the logistic loss) to two other methods (L2, greedy) in Table 2. For some datasets (e.g., spambase), HKL works better, but for some others, in particular when the generating problem is known to be non sparse (ringnorm, twonorm), it performs slightly worse than other approaches.\n9\n10"
    }, {
      "heading" : "6 Conclusion",
      "text" : "We have shown how to perform hierarchical multiple kernel learning (HKL) in polynomial time in the number of selected kernels. This framework may be applied to many positive definite kernels and we have focused on polynomial and Gaussian kernels used for nonlinear variable selection. In particular, this paper shows that trying to use ℓ1-type penalties may be advantageous inside the feature space. We are currently investigating applications to other kernels, such as the pyramid match kernel [15], string kernels, and graph kernels [2]."
    }, {
      "heading" : "A Optimization results",
      "text" : "In this first section, we give proofs of all results related to the optimization problems. We first recall precisely how we obtained the relationships between η and ζ . Using Cauchy-Schwarz inequality, we know that for all η ∈ RV such that η > 0 and ∑\nv∈V d 2 vηv 6 1,\n(\n∑\nv∈V\ndv‖βD(v)‖ )2 = ( ∑\nv∈V\n(dvη 1/2 v ) ‖βD(v)‖ η 1/2 v\n)2\n6 ∑\nv∈V\nd2vηv × ∑\nv∈V\n‖βD(v)‖2 ηv 6 ∑\nw∈V\n\n\n∑\nv∈A(w)\nη−1v\n\n ‖βw‖2,\nwith equality if and only if ηv = d−1v ‖βD(v)‖( ∑ v∈V dv‖βD(v)‖)−1.\nA.1 Set of weights for trees\nWhen the DAG is a tree (i.e., when each vertex has at most one parent), then, without loss of generality we may consider that only one vertex has no parent (the root r) while all others w have exactly one parent π(w). In this situation, we have for all v 6= r, ζ−1π(v) − ζ−1v = −η −1 π(v). Moreover, for all leaves v, ζv = ηv. This implies that the constraint η > 0 is equivalent to ζ > 0 and for all v 6= r, ζπ(v) > ζv. The final constraint ∑ v∈V ηvd 2 v 6 1, may then be written as:\n∑\nv 6=r\nd2v 1\nζ−1v − ζ−1π(v) +\n∑\nv leaf\nζvd 2 v 6 1,\nthat is, ∑\nv 6=r\nd2v\n(\nζv + ζ2v\nζπ(v) − ζv\n)\n+ ∑\nv leaf\nζvd 2 v 6 1,\nwhich is clearly convex [12]. When the DAG is not a tree, we conjecture that the set Z is not convex.\nA.2 Fenchel conjugates\nFollowing [16, 17], in order to derive optimality conditions for all losses, we need to introduce Fenchel conjugates. Let ψi : R 7→ R, be the Fenchel conjugate [12] of the convex function ϕi : a 7→ ℓ(yi, a), defined as\nψi(b) = max a∈R\nab− ϕi(a).\n11\nThe function ψi is always convex and, because we have assumed that ϕi is convex and continuous, we can represent ϕi as the Fenchel conjugate of ψi, i.e., for all a ∈ R,\nϕi(a) = max b∈R\nab− ψi(b).\nIn particular, we have for the following standard examples:\n• for least-squares regression, we have ϕi(a) = 12(yi − a)2 and ψi(b) = 12b2 + byi,\n• for logistic regression, we have ϕi(a) = log(1 + exp(−yiai)), where yi ∈ {−1, 1}, and ψi(b) = (1 + byi) log(1 + byi)− byi log(−byi) if byi ∈ [−1, 0], +∞ otherwise.\n• for support vector machine classification, we have ϕi(a) = max(0, 1 − yia), where yi ∈ {−1, 1}, and ψi(b) = yib if byi ∈ [−1, 0], +∞ otherwise.\nA.3 Preliminary propositions\nWe first recall the duality result for the regular ℓ2-norm kernel learning problem:\nProposition 6 For all nonnegative ζ ∈ RV , the dual of the optimization problem\nmin β∈ Q\nv∈V Fv\n1 n ∑n i=1 ℓ(yi, ∑ v∈V 〈βv,Φv(xi)〉) + λ2 ∑ w∈V ζ −1 w ‖βw‖2\nis\nmax α∈Rn − 1 n\nn ∑\ni=1\nψi(−nλαi)− λ\n2 α⊤\n(\n∑\nw∈V\nζwKw\n)\nα,\nand the optimal β can be found from an optimal α as βw = ∑n i=1 αiΦw(xi).\nProof We introduce auxiliary variables ui = ∑ v∈V 〈βv ,Φv(xi)〉 and consider the Lagrangian:\nL = 1 n\nn ∑\ni=1\nϕi(ui) + λ\n2\n∑\nw∈V\nζ−1w ‖βw‖2 + λ n ∑\ni=1\nαi(ui − ∑\nv∈V\n〈βv,Φv(xi)〉)\nMinimizing with respect to the primal variables u, β, we get the dual problem.\nWe will use the following simple result, which implies that each component ζw(η) is a concave function of η:\nLemma 1 The minimum of ∑m j=1 ajx 2 j subject to ∑m j=1 xj = 1 is equal to\n(\n∑m j=1 a −1 i\n)−1 and is\nattained at xi = a −1 i\n(\n∑m j=1 a −1 i\n)−1 .\nThe following proposition derives the dual of the problem in η:\n12\nProposition 7 Let L = {κ ∈ RV×V ,∀w ∈ V, ∑ v∈A(w) κvw = 1}. The following optimization problems are dual to each other, and there is no duality gap :\nmin κ∈L max v∈V\nd−2v ∑\nw∈D(v)\nκ2vwα ⊤Kwα\nmax η∈H\n∑\nw∈V\nα⊤ζw(η)Kwα.\nProof We have the Lagrangian\nL = δ2 + ∑\nv∈V\nηv\n\n\n∑\nw∈D(v)\nκ2vwα ⊤Kwα− δ2d2v\n\n ,\nwhich can be minimized in closed form with respect to δ2 and κ ∈ L, and leads to (using Lemma 1):\nmin κ∈L max v∈V\nd−2v ∑\nw∈D(v)\nκ2vwα ⊤Kwα = max η α⊤\n(\n∑\nw∈V\nζw(η)Kw\n)\nα.\nA.4 Duality gaps\nWe consider the following function of η ∈ H and α ∈ Rn:\nF (η, α) = − 1 n\nn ∑\ni=1\nψi(−nλαi)− λ\n2 α⊤\n∑\nw∈V\nζw(η)Kwα.\nThis function is convex in η (because of Lemma 1) and concave in α, standard arguments (e.g., primal and dual strict feasibilities) show that there is no duality gap to the variational problems:\ninf η∈H sup α∈Rn F (η, α) = sup α∈Rn inf η∈H F (η, α).\n13\nWe can decompose the duality gap, given a pair (η, α) as\nsup α′∈Rn F (η, α′)− inf η′∈H F (η′, α)\n= min β\n{\n1\nn\nn ∑\ni=1\nℓ(yi, ∑\nv∈V\n〈βv ,Φv(xi)〉) + λ\n2\n∑\nw∈V\nζw(η) −1‖βw‖2\n}\n− inf η′∈H F (η′, α)\n6 1\nn\nn ∑\ni=1\nℓ(yi, ∑\nw∈V\nζw(η)(Kwα)i) + λ\n2\n∑\nw∈V\nζwα ⊤Kwα+\n1\nn\nn ∑\ni=1\nψi(−nλαi)\n+ sup η′∈H\nλ 2 α⊤ ∑\nw∈V\nζw(η ′)α\n= 1\nn\nn ∑\ni=1\nℓ(yi, ∑\nw∈V\nζw(η)(Kwα)i) + 1\nn\nn ∑\ni=1\nψi(−nλαi) + λ ∑\nw∈V\nζw(η)α ⊤Kwα\n+ sup η′∈H\nλ 2 α⊤ ∑\nw∈V\nζw(η ′)α− λ\n2\n∑\nw∈V\nζw(η)α ⊤Kwα.\nWe thus get the desired upper bound from which proposition 1 (of the main paper) follows, as well as the upper bound on the duality gap.\nA.5 Necessary and sufficient conditions - truncated problem\nWe assume that we know the optimal solution of a truncated problem where the entire set of decendants of some nodes have been removed. We let denote J the hull of the set of active variables. We now consider necessary conditions and sufficient conditions for this solution to be optimal with respect to the full problem. This will lead to Proposition 2 and 3 of the main paper.\nWe first use Proposition 2 of the Appendix, to get a set of κvw for (v,w) ∈ J for the reduced problem; the goal here is to get necessary conditions by relaxing the dual problem defining κ ∈ L and find an approximate solution, while for the sufficient condition, any candidate leads to a sufficient condition. It turns out that we will use the solution of the relaxed solution required for the necessary condition for the sufficient condition.\nIf we assume that all variables in J are indeed active, then any optimal κ ∈ L must be such that κvw = 0 if v ∈ J and w ∈ Jc. We then let free κvw for v,w in J . Our goal is to find good candidates for those free dual parameters.\nWe first derive necessary conditions by lowerbounding the sums by maxima:\nmax v∈V ∩Jc\nd−2v ∑\nw∈D(v)\nκ2vwα ⊤Kwα > max v∈V ∩Jc d−2v max w∈D(v) κ2vwα ⊤Kwα,\nwhich can be minimized in closed form with respect to κ leading to\nκvw = dv( ∑\nv′∈A(w)∩Jc\ndv′) −1\n14\nand to the lower bound\nmin κ∈L max v∈V ∩Jc\nd−2v ∑\nw∈D(v)\nκ2vwα ⊤Kwα > max\nw∈Jc\nα⊤Kwα\n( ∑ v∈A(w)∩Jc dv) 2 . (4)\nFor sufficient conditions, we simply take the value obtained before for κ, which leads to\nmin κ∈L max v∈V ∩Ic\nd−2v ∑\nw∈D(v)\nκ2vwα ⊤Kwα 6 max\nv∈V ∩Jc\n∑\nw∈D(v)\nα⊤Kwα\n( ∑ v∈A(w)∩Jc dv) 2\n= max v∈sources(Jc)\n∑\nw∈D(v)\nα⊤Kwα\n( ∑ v∈A(w)∩Jc dv) 2 .\nWe have moreover ∑\nv∈A(w)\ndv > ∑\nv∈A(w)∩Jc\ndv > ∑\nv∈A(w)∩D(t)\ndv,\nleading to the desired upper bound\nmin κ∈L max v∈V ∩Jc\nd−2v ∑\nw∈D(v)\nκ2vwα ⊤Kwα 6 max\nt∈sources(Jc)\n∑\nw∈D(t)\nα⊤Kwα\n( ∑ v∈A(w)∩D(t) dv) 2 . (5)\nA.6 Optimality conditions for the primal formulation\nWe know derive optimality conditions for the problem in the paper, which we will need in Section B, i.e.:\nmin β∈ Q\nv∈V Fv\n1 n ∑n i=1 ϕi( ∑ v∈V 〈βv ,Φv(xi)〉) + λ2 ( ∑ v∈V dv‖βD(v)‖ )2 .\nLet β ∈ RV , with J being the hull of the active variables. The directional derivative in the direction ∆ ∈ RV is equal to\n1\nn\nn ∑\ni=1\n∑\nw∈V\nϕ′i( ∑\nv∈J\n〈βv,Φv(xi)〉)Φw(xi)⊤∆w\n+λ\n(\n∑\nv∈J\ndv‖βD(v)‖ )( ∑\nv∈J\ndv βD(v)∩J ‖βD(v)∩J‖ ⊤ ∆v + ∑\nv∈Jc\ndv‖∆D(v)‖ )\nand thus β if optimal if and ony if, we have, with δ = ∑ v∈J dv‖βD(v)∩J‖:\n∀w ∈ J, 1 n\nn ∑\ni=1\nϕ′i( ∑\nv∈J\n〈βv,Φv(xi)〉)Φw(xi) + λδ\n\n\n∑\nv∈A(w)\ndv ‖βD(v)∩J‖\n\nβw = 0\n∀∆Jc ∈ RJ c , 1\nn\nn ∑\ni=1\n∑\nw∈Jc\nϕ′i( ∑\nv∈J\n〈βv ,Φv(xi)〉)Φw(xi)⊤∆w + λδ ( ∑\nv∈Jc\ndv‖∆D(v)‖ ) > 0.\nNote that when regularizing by λ ∑ v∈V dv‖βD(v)‖ instead of λ2 ( ∑ v∈V dv‖βD(v)‖ )2\n, we have the same optimality condition with δ = 1.\n15"
    }, {
      "heading" : "B Consistency conditions",
      "text" : "We assume that we are in the finite dimensional setting (i.e., each Fv has finite dimensions fv) with the square loss. For w ∈ V , we let denote Xw ∈ Rn×fw the matrix whose n-th row is Φw(xi). We let denote Σvw ∈ Rfv×fw the population covariance between Φv(x) and Φw(x). The full covariance matrix, defined from the blocks Σvw is assumed invertible. With these assumptions, we can follow the approach of [18, 19, 20] : that is, if λn tends to zero faster than n−1/2, then the estimate β̂ converges in probability to the generating β, and we have the expansion β̂ = β + λnγ̂ where γ̂ is the solution of the following optimization problem, with δ = ∑\nv∈W dv‖βD(v)‖:\nmin γ∈ Q\nw R fw\n1 2 γ⊤Σγ + δ ∑\nv∈W\ndv βD(v)∩W\n‖βD(v)∩W‖\n⊤\nγv + δ ∑\nv∈Wc\ndv‖γD(v)‖.\nThe consistency condition is then obtained by studying when the first order expansion indeed has the correct sparsity pattern (for more precise statements and arguments, see [19]). We let denote γW the solution of the previous problem, restricted to γWc = 0. We have:\nγW = δΣ −1 WW Diag\n(\n∑\nv∈A(w) dv\n‖βD(v)∩W ‖\n)\nw∈W βW .\nFollowing the previous section, it is optimal if and only for all ∆ ∈ W c,\n∆⊤WcΣWcWγW + δ\n(\n∑\nv∈Wc\ndv‖∆D(v)‖ ) > 0.\nWe let denote\nAWc = δ −1 ΣWcWγW = ΣWcWΣ −1 WW Diag\n(\n∑\nv∈A(w) dv\n‖βD(v)∩W ‖\n)\nw∈W βW .\nThe condition for good pattern selection is that for all ∆ ∈ W c,\n∆⊤WcAWc + ∑\nv∈Wc\ndv‖∆D(v)‖ > 0,\nwhich is exactly equivalent to ‖AWc‖∗ 6 1, where x 7→ ‖x‖∗ is the dual norm of the norm ∆Wc 7→ ∑\nv∈Wc dv‖∆D(v)‖. This dual norm may be computed in closed form in the unstructured case, where D(v) = v, and is equal to the ℓ∞-norm. In general, it cannot be computed in closed form. However, we can give the following lower and upper bounds that lead to the desired propositions of the main paper.\nWe have:\n∑\nv∈Wc\ndv‖∆D(v)‖ 6 ∑\nv∈Wc\n∑\nw∈D(v)\ndv‖∆w‖ = ∑\nw∈Wc\n\n\n∑\nv∈A(v)∩W c\ndv\n\n ‖∆w‖,\nwhich leads to the upper bound\n‖x‖∗ 6 max w∈Wc\n‖xw‖ ∑\nv∈A(v)∩W c dv\n16\nMoreover, we have:\n(\n∑\nv∈W c\ndv‖∆D(v)‖ )2 = ∑\nv∈W c\n∑\nv′∈Wc\ndvdv′‖∆D(v)‖‖∆D(v′)‖\n> ∑\nv∈W c\n∑\nv′∈Wc\ndvdv′‖∆D(v)∩D(v′)‖2\n= ∑\nv∈W c\n∑\nv′∈Wc\n‖∆w‖2 ∑\nw∈D(v)∩D(v′)\ndvdv′\n= ∑\nw∈Wc\n‖∆w‖2 ∑\nv∈A(w)∩W c\n∑\nv′∈A(w)∩Wc\ndvdv′\n= ∑\nw∈Wc\n‖∆w‖2  \n∑\nv∈A(w)∩Wc\ndv\n\n\n2\n.\nwhich leads to the lower bound:\n(‖x‖∗)2 > ∑\nw∈Wc\n‖xw‖2 (\n∑\nv∈A(v)∩W c dv\n)2 ."
    } ],
    "references" : [ {
      "title" : "Learning with Kernels",
      "author" : [ "B. Schölkopf", "A.J. Smola" ],
      "venue" : null,
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2002
    }, {
      "title" : "Kernel Methods for Pattern Analysis",
      "author" : [ "J. Shawe-Taylor", "N. Cristianini" ],
      "venue" : "Camb. U. P.,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2004
    }, {
      "title" : "On model selection consistency of Lasso",
      "author" : [ "P. Zhao", "B. Yu" ],
      "venue" : "J. Mach. Learn. Res.,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2006
    }, {
      "title" : "Consistency of the group Lasso and multiple kernel learning",
      "author" : [ "F.R. Bach" ],
      "venue" : "Technical Report 00164735,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2008
    }, {
      "title" : "Multiple kernel learning, conic duality, and the SMO algorithm",
      "author" : [ "F.R. Bach", "G.R.G. Lanckriet", "M.I. Jordan" ],
      "venue" : "In Proc. ICML,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2004
    }, {
      "title" : "Grouped and hierarchical model selection through composite absolute penalties",
      "author" : [ "P. Zhao", "G. Rocha", "B. Yu" ],
      "venue" : "Annals of Statistics, To appear,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2008
    }, {
      "title" : "Composite kernel learning",
      "author" : [ "M. Szafranski", "Y. Grandvalet", "A. Rakotomamonjy" ],
      "venue" : "In Proc. ICML,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2008
    }, {
      "title" : "The effect of the input density distribution on kernel-based classifiers",
      "author" : [ "C.K.I. Williams", "M. Seeger" ],
      "venue" : "In Proc. ICML,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2000
    }, {
      "title" : "More efficiency in multiple kernel learning",
      "author" : [ "A. Rakotomamonjy", "F.R. Bach", "S. Canu", "Y. Grandvalet" ],
      "venue" : "In Proc. ICML,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2007
    }, {
      "title" : "Learning the kernel function via regularization",
      "author" : [ "M. Pontil", "C.A. Micchelli" ],
      "venue" : "J. Mach. Learn. Res.,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2005
    }, {
      "title" : "Efficient sparse coding algorithms",
      "author" : [ "H. Lee", "A. Battle", "R. Raina", "A. Ng" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2007
    }, {
      "title" : "Convex Optimization",
      "author" : [ "S. Boyd", "L. Vandenberghe" ],
      "venue" : null,
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2003
    }, {
      "title" : "Mark: A boosting algorithm for heterogeneous kernel models",
      "author" : [ "K. Bennett", "M. Momma", "J. Embrechts" ],
      "venue" : "In Proc. SIGKDD,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2002
    }, {
      "title" : "The generalized Lasso",
      "author" : [ "V. Roth" ],
      "venue" : "IEEE Trans. on Neural Networks,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2004
    }, {
      "title" : "The pyramid match kernel: Efficient learning with sets of features",
      "author" : [ "K. Grauman", "T. Darrell" ],
      "venue" : "J. Mach. Learn. Res.,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2007
    }, {
      "title" : "Computing regularization paths for learning multiple kernels",
      "author" : [ "F.R. Bach", "R. Thibaux", "M.I. Jordan" ],
      "venue" : "In Adv. NIPS",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2004
    }, {
      "title" : "Large scale multiple kernel learning",
      "author" : [ "S. Sonnenburg", "G. Rätsch", "C. Schäfer", "B. Schölkopf" ],
      "venue" : "J. Mach. Learn. Res., 7:1531–1565,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2006
    }, {
      "title" : "The adaptive Lasso and its oracle properties",
      "author" : [ "H. Zou" ],
      "venue" : "Journal of the American Statistical Association,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2006
    }, {
      "title" : "Asymptotics for Lasso-type estimators",
      "author" : [ "W. Fu", "K. Knight" ],
      "venue" : "Annals of Statistics,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2000
    }, {
      "title" : "On the non-negative garrotte estimator",
      "author" : [ "M. Yuan", "Y. Lin" ],
      "venue" : "Journal of The Royal Statistical Society Series B,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2007
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : ", [1, 2]).",
      "startOffset" : 2,
      "endOffset" : 8
    }, {
      "referenceID" : 1,
      "context" : ", [1, 2]).",
      "startOffset" : 2,
      "endOffset" : 8
    }, {
      "referenceID" : 2,
      "context" : "While early work has focused on efficient algorithms to solve the convex optimization problems, recent research has looked at the model selection properties and predictive performance of such methods, in the linear case [3] or within the multiple kernel learning framework [4].",
      "startOffset" : 220,
      "endOffset" : 223
    }, {
      "referenceID" : 3,
      "context" : "While early work has focused on efficient algorithms to solve the convex optimization problems, recent research has looked at the model selection properties and predictive performance of such methods, in the linear case [3] or within the multiple kernel learning framework [4].",
      "startOffset" : 273,
      "endOffset" : 276
    }, {
      "referenceID" : 4,
      "context" : "This exactly corresponds to the situation where a large feature space is the concatenation of smaller feature spaces, and we aim to do selection among these many kernels, which may be done through multiple kernel learning [5].",
      "startOffset" : 222,
      "endOffset" : 225
    }, {
      "referenceID" : 5,
      "context" : "Following [6, 7], we consider in Section 2 a specific combination of l2-norms that is adapted to the DAG, and will restrict the authorized sparsity patterns; in our specific kernel framework, we are able to use the DAG to design an optimization algorithm which has polynomial complexity in the number of selected kernels (Section 3).",
      "startOffset" : 10,
      "endOffset" : 16
    }, {
      "referenceID" : 6,
      "context" : "Following [6, 7], we consider in Section 2 a specific combination of l2-norms that is adapted to the DAG, and will restrict the authorized sparsity patterns; in our specific kernel framework, we are able to use the DAG to design an optimization algorithm which has polynomial complexity in the number of selected kernels (Section 3).",
      "startOffset" : 10,
      "endOffset" : 16
    }, {
      "referenceID" : 2,
      "context" : "Finally, we extend in Section 4 some of the known consistency results of the Lasso and multiple kernel learning [3, 4], and give a partial answer to the model selection capabilities of our regularization framework by giving necessary and sufficient conditions for model consistency.",
      "startOffset" : 112,
      "endOffset" : 118
    }, {
      "referenceID" : 3,
      "context" : "Finally, we extend in Section 4 some of the known consistency results of the Lasso and multiple kernel learning [3, 4], and give a partial answer to the model selection capabilities of our regularization framework by giving necessary and sufficient conditions for model consistency.",
      "startOffset" : 112,
      "endOffset" : 118
    }, {
      "referenceID" : 1,
      "context" : ", [2] or the Appendix).",
      "startOffset" : 2,
      "endOffset" : 5
    }, {
      "referenceID" : 7,
      "context" : ", [8]): e−b(x−x ′)2 = ∑∞ k=0 (b/A) 2kk! [e b A 2Hk( √ 2cx)][e b A ′2Hk( √ 2cx′)], where c2 = a2 + 2ab, A = a + b + c, and Hk is the k-th Hermite polynomial.",
      "startOffset" : 2,
      "endOffset" : 5
    }, {
      "referenceID" : 1,
      "context" : "The decomposition ends up being close to a polynomial kernel of infinite degree, modulated by an exponential [2].",
      "startOffset" : 109,
      "endOffset" : 112
    }, {
      "referenceID" : 1,
      "context" : ", [2, 1]), which is equivalent to using the eigenvectors of the empirical covariance operator associated with the data (and not the population one associated with the Gaussian distribution with same variance).",
      "startOffset" : 2,
      "endOffset" : 8
    }, {
      "referenceID" : 0,
      "context" : ", [2, 1]), which is equivalent to using the eigenvectors of the empirical covariance operator associated with the data (and not the population one associated with the Gaussian distribution with same variance).",
      "startOffset" : 2,
      "endOffset" : 8
    }, {
      "referenceID" : 1,
      "context" : "Note that for q = 1, we obtain ANOVA-like decompositions [2].",
      "startOffset" : 57,
      "endOffset" : 60
    }, {
      "referenceID" : 5,
      "context" : "(1) Our Hilbertian norm is a Hilbert space instantiation of the hierarchical norms recently introduced by [6].",
      "startOffset" : 106,
      "endOffset" : 109
    }, {
      "referenceID" : 5,
      "context" : "While with uni-dimensional groups or kernels, the “l1-norm of l∞-norms” allows an efficient path algorithm for the square loss and when the DAG is a tree [6], this is not possible anymore with groups of size larger than one, or when the DAG is a not a tree.",
      "startOffset" : 154,
      "endOffset" : 157
    }, {
      "referenceID" : 5,
      "context" : "Finally, note that in certain settings (finite dimensional Hilbert spaces and distributions with absolutely continuous densities), these norms have the effect of selecting a given kernel only after all of its ancestors [6].",
      "startOffset" : 219,
      "endOffset" : 222
    }, {
      "referenceID" : 8,
      "context" : "1 Reformulation in terms of multiple kernel learning Following [9, 10], we can simply derive an equivalent formulation of Eq.",
      "startOffset" : 63,
      "endOffset" : 70
    }, {
      "referenceID" : 9,
      "context" : "1 Reformulation in terms of multiple kernel learning Following [9, 10], we can simply derive an equivalent formulation of Eq.",
      "startOffset" : 63,
      "endOffset" : 70
    }, {
      "referenceID" : 4,
      "context" : "(2) Following [5], we consider the square of the norm, which does not change the regularization properties, but allow simple links with multiple kernel learning.",
      "startOffset" : 14,
      "endOffset" : 17
    }, {
      "referenceID" : 8,
      "context" : "Note that in the case of “flat” regular multiple kernel learning, where the DAG has no edges, we obtain back usual optimality conditions [9, 10].",
      "startOffset" : 137,
      "endOffset" : 144
    }, {
      "referenceID" : 9,
      "context" : "Note that in the case of “flat” regular multiple kernel learning, where the DAG has no edges, we obtain back usual optimality conditions [9, 10].",
      "startOffset" : 137,
      "endOffset" : 144
    }, {
      "referenceID" : 10,
      "context" : "Following a common practice for convex sparsity problems [11], we will try to solve a small problem where we assume we know the set of v such that ‖βD(v)‖ is equal to zero (Section 3.",
      "startOffset" : 57,
      "endOffset" : 61
    }, {
      "referenceID" : 11,
      "context" : ", [12]).",
      "startOffset" : 2,
      "endOffset" : 6
    }, {
      "referenceID" : 8,
      "context" : "Namely, we use the same technique as [9]: we consider for ζ ∈ Z , the function B(ζ) = minβ∈Qv∈V Fv 1 n ∑n i=1 l(yi, ∑ v∈V 〈βv,Φv(xi)〉)+ λ 2 ∑ w∈V ζ −1 w ‖βw‖, which is the optimal value of the single kernel learning problem with kernel matrix ∑ w∈V ζwKw.",
      "startOffset" : 37,
      "endOffset" : 40
    }, {
      "referenceID" : 8,
      "context" : "We can then use the same projected gradient descent strategy as [9] to minimize it.",
      "startOffset" : 64,
      "endOffset" : 67
    }, {
      "referenceID" : 10,
      "context" : "4 Kernel search algorithm We are now ready to present the detailed algorithm which extends the feature search algorithm of [11].",
      "startOffset" : 123,
      "endOffset" : 127
    }, {
      "referenceID" : 3,
      "context" : "Following [4], we make the following assumptions on the underlying joint distribution of (X,Y ): (a) the joint covariance matrix Σ of (Φ(xv))v∈V (defined with appropriate blocks of size fv × fw) is invertible, (b) E(Y |X) = ∑ w∈W 〈βw,Φw(x)〉 with W ⊂ V and var(Y |X) = σ2 > 0 almost surely.",
      "startOffset" : 10,
      "endOffset" : 13
    }, {
      "referenceID" : 3,
      "context" : "Note that the last two propositions are not consequences of the similar results for flat MKL [4], because the groups that we consider are overlapping.",
      "startOffset" : 93,
      "endOffset" : 96
    }, {
      "referenceID" : 3,
      "context" : "We are currently investigating extensions to the non parametric case [4], in terms of pattern selection and universal consistency.",
      "startOffset" : 69,
      "endOffset" : 72
    }, {
      "referenceID" : 12,
      "context" : "We then compare the performance of our hierarchical multiple kernel learning method (HKL) with the polynomial kernel decomposition presented in Section 2 to other methods that use the same kernel and/or decomposition: (a) the greedy strategy of selecting basis kernels one after the other, a procedure similar to [13], and (b) the regular polynomial kernel regularization with the full kernel (i.",
      "startOffset" : 313,
      "endOffset" : 317
    }, {
      "referenceID" : 13,
      "context" : "UCI datasets For regression datasets, we compare HKL with polynomial (degree 4) and Gaussian-RBF kernels (each dimension decomposed into 9 kernels) to the following approaches with the same kernel: regular Hilbertian regularization (L2), same greedy approach as earlier (greedy), regularization by the l1-norm directly on the vector α, a strategy which is sometimes used in the context of sparse kernel learning [14] but does not use the Hilbertian structure of the kernel (lasso-α), multiple kernel learning with the p kernels obtained by summing all kernels associated with a single variable, a strategy suggested by [5] (MKL).",
      "startOffset" : 412,
      "endOffset" : 416
    }, {
      "referenceID" : 4,
      "context" : "UCI datasets For regression datasets, we compare HKL with polynomial (degree 4) and Gaussian-RBF kernels (each dimension decomposed into 9 kernels) to the following approaches with the same kernel: regular Hilbertian regularization (L2), same greedy approach as earlier (greedy), regularization by the l1-norm directly on the vector α, a strategy which is sometimes used in the context of sparse kernel learning [14] but does not use the Hilbertian structure of the kernel (lasso-α), multiple kernel learning with the p kernels obtained by summing all kernels associated with a single variable, a strategy suggested by [5] (MKL).",
      "startOffset" : 619,
      "endOffset" : 622
    }, {
      "referenceID" : 14,
      "context" : "We are currently investigating applications to other kernels, such as the pyramid match kernel [15], string kernels, and graph kernels [2].",
      "startOffset" : 95,
      "endOffset" : 99
    }, {
      "referenceID" : 1,
      "context" : "We are currently investigating applications to other kernels, such as the pyramid match kernel [15], string kernels, and graph kernels [2].",
      "startOffset" : 135,
      "endOffset" : 138
    }, {
      "referenceID" : 11,
      "context" : "v leaf ζvd 2 v 6 1, which is clearly convex [12].",
      "startOffset" : 44,
      "endOffset" : 48
    }, {
      "referenceID" : 15,
      "context" : "2 Fenchel conjugates Following [16, 17], in order to derive optimality conditions for all losses, we need to introduce Fenchel conjugates.",
      "startOffset" : 31,
      "endOffset" : 39
    }, {
      "referenceID" : 16,
      "context" : "2 Fenchel conjugates Following [16, 17], in order to derive optimality conditions for all losses, we need to introduce Fenchel conjugates.",
      "startOffset" : 31,
      "endOffset" : 39
    }, {
      "referenceID" : 11,
      "context" : "Let ψi : R 7→ R, be the Fenchel conjugate [12] of the convex function φi : a 7→ l(yi, a), defined as ψi(b) = max a∈R ab− φi(a).",
      "startOffset" : 42,
      "endOffset" : 46
    }, {
      "referenceID" : 17,
      "context" : "With these assumptions, we can follow the approach of [18, 19, 20] : that is, if λn tends to zero faster than n−1/2, then the estimate β̂ converges in probability to the generating β, and we have the expansion β̂ = β + λnγ̂ where γ̂ is the solution of the following optimization problem, with δ = ∑ v∈W dv‖βD(v)‖: min γ∈ Q",
      "startOffset" : 54,
      "endOffset" : 66
    }, {
      "referenceID" : 18,
      "context" : "With these assumptions, we can follow the approach of [18, 19, 20] : that is, if λn tends to zero faster than n−1/2, then the estimate β̂ converges in probability to the generating β, and we have the expansion β̂ = β + λnγ̂ where γ̂ is the solution of the following optimization problem, with δ = ∑ v∈W dv‖βD(v)‖: min γ∈ Q",
      "startOffset" : 54,
      "endOffset" : 66
    }, {
      "referenceID" : 19,
      "context" : "With these assumptions, we can follow the approach of [18, 19, 20] : that is, if λn tends to zero faster than n−1/2, then the estimate β̂ converges in probability to the generating β, and we have the expansion β̂ = β + λnγ̂ where γ̂ is the solution of the following optimization problem, with δ = ∑ v∈W dv‖βD(v)‖: min γ∈ Q",
      "startOffset" : 54,
      "endOffset" : 66
    }, {
      "referenceID" : 18,
      "context" : "The consistency condition is then obtained by studying when the first order expansion indeed has the correct sparsity pattern (for more precise statements and arguments, see [19]).",
      "startOffset" : 174,
      "endOffset" : 178
    } ],
    "year" : 2008,
    "abstractText" : "For supervised and unsupervised learning, positive definite kernels allow to use large and potentially infinite dimensional feature spaces with a computational cost that only depends on the number of observations. This is usually done through the penalization of predictor functions by Euclidean or Hilbertian norms. In this paper, we explore penalizing by sparsity-inducing norms such as the l-norm or the block l-norm. We assume that the kernel decomposes into a large sum of individual basis kernels which can be embedded in a directed acyclic graph; we show that it is then possible to perform kernel selection through a hierarchical multiple kernel learning framework, in polynomial time in the number of selected kernels. This framework is naturally applied to non linear variable selection; our extensive simulations on synthetic datasets and datasets from the UCI repository show that efficiently exploring the large feature space through sparsity-inducing norms leads to state-of-the-art predictive performance.",
    "creator" : "LaTeX with hyperref package"
  }
}