{
  "name" : "1408.5823.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Improved Distributed Principal Component Analysis",
    "authors" : [ "Maria-Florina Balcan", "Vandana Kanchanapally", "Yingyu Liang", "David Woodruff" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Since data is often partitioned across multiple servers (Olston et al., 2003; Corbett et al., 2012; Mitra et al., 2011), there is an increased interest in computing on it in the distributed model. A basic tool for distributed data analysis is Principal Component Analysis (PCA). The goal of PCA is to find an r-dimensional (affine) subspace that captures as much of the variance of the data as possible. Hence, it can reveal lowdimensional structure in very high dimensional data. Moreover, it can serve as a preprocessing step to reduce the data dimension in various machine learning tasks, such as k-means, Non-Negative Matrix Factorization (NNMF) (Lee and Seung, 2001) and Latent Dirichlet Allocation (LDA) (Blei et al., 2003).\nIn the distributed model, approximate PCA was used by Feldman et al. (2013) for solving a number of shape fitting problems such as k-means clustering, where the approximation PCA solution is computed based on a summary of the data called coreset. The coreset has the property that local coresets can be easily combined across servers into a global coreset, which then leads to an approximate PCA solution to the union of the data sets. Designing small coresets therefore leads to communication-efficient protocols. Coresets have the nice property that their size typically does not depend on the number n of points being approximated. A beautiful property of the coresets developed in (Feldman et al., 2013) is that for approximate PCA their size also only depends linearly on the dimension d, whereas previous coresets depended quadratically on d (Feldman and Langberg, 2011). This gives the best known communication protocols for approximate PCA and k-means clustering.\n∗School of Computer Science, Georgia Institute of Technology. Contact: {yliang39,ninamf,vvandana}@gatech.edu †IBM Research, Almaden. Contact: dpwoodru@us.ibm.com\nar X\niv :1\n40 8.\n58 23\nv1 [\ncs .L\nG ]\n2 5\nA ug\n2 01\n4\nDespite this recent exciting progress, several important questions remain. First, can we improve the communication further as a function of the number of servers, the approximation error, and other parameters of the downstream applications (such as the number k of clusters in k-means clustering)? Second, while preserving optimal or nearly-optimal communication, can we improve the computational costs of the protocols? We note that in the protocols of Feldman et al. each server has to run a singular value decomposition (SVD) on her local data set, while additional work needs to be performed to combine the outputs of each server into a global approximate PCA. Third, are these algorithms practical and do they scale well with large-scale datasets? In this paper we give answers to the above questions. To state our results more precisely, we first define the model and the problems.\nIn the distributed setting, we consider a set of s servers each of which can communicate with a central coordinator. The global data P ∈ Rn×d, consisting of n points in d dimension, is arbitrarily partitioned on the servers, where the server i holds ni points Pi. The PCA problem is to find an r-dimensional subspace which minimizes the sum of the `2 distances of the points to their projections on the subspace.\nFor approximate distributed PCA, the following protocol is implicit in (Feldman et al., 2013): each server i computes its top O(r/ ) principal components Yi of Pi and sends them to the coordinator. The coordinator stacks the matrices Yi on top of each other, forming an O(sr/ ) × d matrix Y, and computes the top r principal components of Y, and returns these to the servers. This provides a relative-error approximation to the PCA problem. We refer to this algorithm as Algorithm disPCA. Our Contributions. Our results are summarized as follows.\nImproved Communication: We improve the communication cost for using distributed PCA for k-means clustering and similar `2-fitting problems. The best previous approach is to use Corollary 4.5 in (Feldman et al., 2013), which shows that given a data matrix P, if we project the rows onto the space spanned by the top O(k/ 2) principal components, and solve the k-means problem in this subspace, we obtain a (1 + )- approximation. In the distributed setting, this would require first running Algorithm disPCA with parameter r = O(k/ 2), and thus communication at least O(skd/ 3) to compute the O(k/ 2) global principal components. Then one can solve a distributed k-means problem in this subspace, and an α-approximation in it translates to an overall α(1 + ) approximation.\nOur Theorem 3 shows that it suffices to run Algorithm disPCA while only incurring O(skd/ 2) communication to compute the O(k/ 2) global principal components, preserving the k-means solution cost up to a (1 + )-factor. Our communication is thus a 1/ factor better, and illustrates that for downstream applications it is sometimes important to “open up the box” rather than to directly use the guarantees of a generic PCA algorithm (which would give O(skd/ 3) communication). One feature of this approach is that by using the distributed k-means algorithm in (Balcan et al., 2013) on the projected data, the coordinator can sample points from the servers proportional to their local k-means cost solutions, which reduces the communication roughly by a factor of s in the k-means step, which would come from each server sending their local k-means coreset to the coordinator. Furthermore, before applying disPCA and distributed k-means algorithms, one can first run any other dimension reduction to dimension d′ so that the k-means cost is preserved up to certain accuracy. For example, if we want a 1 + approximation factor, we can set d′ = O(log n/ 2) by a Johnson-Lindenstrauss transform; if we want a larger 2 + approximation factor, we can set d′ = O(k/ 2) using (Boutsidis et al., 2011). In this way the parameter d in the above communication cost bound can be replaced by d′. Note that unlike these dimension reduction methods, our algorithm for projecting onto principal components is deterministic and does not incur error probability.\nImproved Computation: We turn to the computational cost of Algorithm disPCA, which to the best of our knowledge has not been addressed. A major bottleneck is that each server is computing a singular value decomposition (SVD) of its point set Pi, which takes min(nid2, n2i d) time. We change Algorithm disPCA\nto instead have each server first sample an oblivious subspace embedding (OSE) (Sarlós, 2006; Clarkson and Woodruff, 2013; Nelson and Nguyên, 2012; Meng and Mahoney, 2013) matrix Hi, and instead run the algorithm on the point set defined by the rows of HiPi. Using known OSEs, one can choose Hi to have only a single non-zero entry per column and thus HiPi can be computed in nnz(Pi) time. Moreover, the number of rows of Hi isO(d2/ 2), which may be significantly less than the original ni number of rows. This number of rows can be further reducted to O(d logO(1) d/ 2) if one is willing to spend O(nnz(Pi) logO(1) d/ ) time (Nelson and Nguyên, 2012). We note that the number of non-zero entries of HiPi is no more than that of Pi.\nOne technical issue is that each of s servers is locally performing a subspace embedding, which succeeds with only constant probability. If we want a single non-zero entry per column of Hi, to achieve success probability 1 − O(1/s) so that we can union bound over all s servers succeeding, we naively would need to increase the number of rows of Hi by a factor linear in s. We give a general technique, which takes a subspace embedding that succeeds with constant probability as a black box, and show how to perform a procedure which applies it O(log 1/δ) times independently and from these applications finds one which is guaranteed to succeed with probability 1 − δ. Thus, in this setting the players can compute a subspace embedding of their data in nnz(Pi) time, for which the number of non-zero entries of HiPi is no larger than that of Pi, and without incurring this additional factor of s. This may be of independent interest.\nIt may still be expensive to perform the SVD of HiPi and for the coordinator to perform an SVD on Y in Algorithm disPCA. We therefore replace the SVD computation with a randomized approximate SVD computation with spectral norm error. Our contribution here is to analyze the error in distributed PCA and k-means after performing these speedups.\nEmpirical Results: Our speedups result in significant computational savings. The randomized techniques we use reduce the time by orders of magnitude on medium and large-scal data sets, while preserving the communication cost. Although the theory predicts a new small additive error because of our speedups, in our experiments the solution quality was only negligibly affected. Related Work A number of algorithms for approximate distributed PCA have been proposed (Qu et al., 2002; Bai et al., 2005; Le Borgne et al., 2008; Macua et al., 2010; Feldman et al., 2013), but either without theoretical guarantees, or without considering communication. Qu et al. (2002) proposed an algorithm but provided no analysis on the tradeoff between communication and approximation. Most closely related to our work is (Feldman et al., 2013), which observes that the top singular vectors of the local point set can be viewed as its summary and the union of the local summaries can be viewed as a summary of the global data, i.e., Algorithm disPCA discussed above.\nIn (Kannan et al., 2013) the authors study algorithms in the arbitrary partition model in which each server holds a matrix Pi and P = ∑s i=1 Pi. Thus, each row of P is additively shared across the s servers, whereas in our model each row of P belongs to a single server, though duplicate rows are allowed. Our model is motivated by applications in which points are indecomposable entities. As our model is a special case of the arbitrary partition model, we can achieve more efficient algorithms. For instance, our distributed PCA algorithms provide much stronger guarantees, see, e.g., Lemma 4, which are needed for the downstream k-means application. Moreover, our k-means algorithms are more general, in the sense that they do not make a well-separability assumption, and more efficient in that the communication of (Kannan et al., 2013) is O(sd2) + s(k/ )O(1) words as opposed to our O(sdk/ 2) + sk + (k/ )O(1).\nOther related work includes the recent (Ghashami and Phillips, 2013) (see also the references therein), who give a deterministic streaming algorithm for low rank approximation in which each point of P is seen one at a time and uses O(dk/ ) words of communication. Their algorithm naturally gives an O(sdk/ ) communication algorithm for low rank approximation in the distributed model. However, their algorithm\nfor PCA doesn’t satisfy the stronger guarantees of Lemma 4, and therefore it is unclear how to use it for k-means clustering. It also involves an SVD computation for each point, making the overall computation per server O(nidr2/ 2), which is slower than what we achieve, and it is not clear how their algorithm can exploit sparsity.\nSpeeding up large scale PCA using different versions of subspace embeddings was also considered in (Karampatziakis and Mineiro, 2013), though not in a distributed setting and not for `2-error shape fitting problems. Also, their error guarantees are in terms of the r-th singular value gap, and are incomparable to ours."
    }, {
      "heading" : "2 Preliminaries",
      "text" : "Communication Model. In the distributed setting, we consider a set of s nodes V = {vi, 1 ≤ i ≤ s}, each of which can communicate with a central coordinator v0. On each node vi, there is a local data matrix Pi ∈ Rni×d having ni data points in d dimension (ni > d). The global data P ∈ Rn×d is then a concatenation of the local data matrix, i.e. P> = [ P>1 ,P > 2 , . . . ,P > s ] and n = ∑s i=1 ni. Let pi denote the\ni-th row of P. Throughout the paper, we assume that the data points are centered to have zero mean, i.e.,∑n i=1 pi = 0. Uncentered data requires a rank-one modification to the algorithms, whose communication and computation costs are dominated by those in the other steps. Approximate PCA and `2-Error Fitting. For a matrix A = [aij ], let ‖A‖2F = ∑ i,j a 2 ij be its Frobenius norm, and let σi(A) be the i-th singular value of A. Let A(t) denote the matrix that contains the first t columns of A. Let LX denote the linear subspace spanned by the columns of X. Note that for an orthonormal matrix X, the projection of a point p to LX will be pX using the coordinates with respect to the column space of X, and will be pXX> using the original coordinates. Let πL(p) be its projection onto subspace L and let πX(p) be shorthand for πLX(p) = pXX\n>. For a point p ∈ Rd and a subspace L ⊆ Rd, we denote the squared distance between p and L by\nd2(p, L) := min q∈L ‖p− q‖22 = ‖p− πL(p)‖22.\nDefinition 1. The linear (or affine) r-Subspace k-Clustering on P ∈ Rn×d is\nmin L d2(P,L) := n∑ i=1 min L∈L d2(pi, L) (1)\nwhere P is an n×dmatrix whose rows are p1, . . . , pn, and L = {Lj}kj=1 is a set of k centers, each of which is an r-dimensional linear (or affine) subspace.\nPCA is a special case when k = 1 and the center is an r-dimensional subspace. It is well known that the optimal r-dimensional subspace is spanned by the top r eigen-vectors of the covariance matrix P>P, also known as the principal components. Equivalently, these vectors are the right singular vectors of P, and can be found using the singular value decomposition (SVD) on P.\nAnother special case of r-Subspace k-Clustering is k-means clustering when the centers are points (r = 0). Constrained versions of this problem include NNMF where the r-dimensional subspace should be spanned by positive vectors, and LDA which assumes a prior distribution defining a probability for each r-dimensional subspace. We will primarily be concerned with relative-error approximation algorithms, for which we would like to output a set L′ of k centers for which d2(P,L′) ≤ (1 + ) minL d2(P,L).\nAlgorithm 1 Distributed PCA algorithm disPCA Input: local data {Pi}si=1 and parameter t1, t2 ∈ N+.\n1: for each node vi ∈ V do 2: Compute local SVD: Pi = UiΣiV>i . 3: Send Σi(t1),Vi(t1) to the central coordinator. 4: dimension: [Pi]ni×d, [Ui]ni×ni , [Σi]ni×d, [Vi]d×d, [Σi (t1)]ni×t1 , [Vi (t1)]d×t1 5: end for 6: for the central coordinator do 7: Set Yi = Σi(t1)(Vi(t1))>, Y> = [Y>1 , . . . ,Y > s ]. 8: Compute global SVD: Y = UΣV>. 9: dimension: [Yi]ni×d, [Y]n×d, [U]n×n, [Σ]n×d, [V]d×d, [V\n(t2)]d×t2 10: end for Output: V(t2)."
    }, {
      "heading" : "3 Tradeoff between Communication and Solution Quality",
      "text" : "Algorithm disPCA for distributed PCA is suggested in (Qu et al., 2002; Feldman et al., 2013), which consists of a local stage and a global stage. In the local stage, each node performs SVD on its local data matrix, and communicates the first t1 singular values Σi(t1) and the first t1 right singular vectors Vi(t1) to the central coordinator. Then in the global stage, the coordinator concatenates Σi(t1)(Vi(t1))> to form a matrix Y, and performs SVD on it to get the first t2 right singular vectors. See Algorithm 1 for the details and see Figure 1 for an illustration.\nTo get some intuition, consider the easy case when the data points actually lie in an r-dimensional subspace. We can run Algorithm disPCA with t1 = t2 = r. Since Pi has rank r, its projection to the subspace spanned by its first t1 = r right singular vectors, P̂i = UiΣi(r)(Vi(r))>, is identical to Pi. Then we only need to do PCA on P̂, the concatenation of P̂i. Observing that P̂ = ŨY where Ũ is orthonormal, it suffices to compute SVD on Y, and only Σi(r)Vi(r) needs to be communicated. In the general case when the data may have rank higher than r, it turns out that one needs to set t1 sufficiently large, so that P̂i approximates Pi well enough and does not introduce too much error into the final solution. In particular, the following close projection property about SVD is the key for the analysis:\nLemma 1. Suppose A has SVD A = UΣV and let Â = AV(t)(V(t))> denote its SVD truncation. If t = O(r/ ), then for any d× r matrix X with orthonormal columns,\n0 ≤ ‖AX− ÂX‖2F ≤ d2(A, LX), and 0 ≤ ‖AX‖2F − ‖ÂX‖2F ≤ d2(A, LX).\nThis means that the projections of Â and A on any r-dimensional subspace are close, when the projected dimension t is sufficiently large compared to r. Now, note that the difference between ‖P−PXX>‖2F and\n‖P̂ − P̂XX>‖2F is only related to ‖PX‖2F − ‖P̂X‖2F = ∑\ni[‖PiX‖2F − ‖P̂iX‖2F ], each term in which is bounded by the lemma. So we can use P̂ as a proxy for P in the PCA task. Again, computing PCA on P̂ is equivalent to computing SVD on Y, as done in Algorithm disPCA. These lead to the following theorem, which is implicit in (Feldman et al., 2013), stating that the algorithm can produce a (1 + )-approximation for the distributed PCA problem.\nTheorem 2. Suppose Algorithm disPCA takes parameters t1 ≥ r + d4r/ e − 1 and t2 = r. Then\n‖P−PV(r)(V(r))>‖2F ≤ (1 + ) min X ‖P−PXX>‖2F\nwhere the minimization is over d× r orthonormal matrices X. The communication is O( srd ) words.\n3.1 Guarantees for Distributed `2-Error Fitting\nAlgorithm disPCA can also be used as a pre-processing step for applications such as `2-error fitting. In this section, we prove the correctness of Algorithm disPCA as pre-processing for these applications. In particular, we show that by setting t1, t2 sufficiently large, the objective value of any solution merely changes when the original data P is replaced the projected data P̃ = PV(t2)(V(t2))>. Therefore, the projected data serves as a proxy of the original data, i.e. , any distributed algorithm can be applied on the projected data to get a solution on the original data. As the dimension is lower, the communication cost is reduced. Formally,\nTheorem 3. Let t1 = t2 = O(rk/ 2) in Algorithm disPCA for ∈ (0, 1/3). Then there exists a constant c0 ≥ 0 such that for any set of k centers L in r-Subspace k-Clustering,\n(1− )d2(P,L) ≤ d2(P̃,L) + c0 ≤ (1 + )d2(P,L).\nThe theorem implies that any α-approximate solution L on the projected data P̃ is a (1 + 3 )αapproximation on the original data P. To see this, let L∗ denote the optimal solution. Then\n(1− )d2(P,L) ≤ d2(P̃,L) + c0 ≤ αd2(P̃,L∗) + c0 ≤ α(1 + )d2(P,L∗)\nwhich leads to d2(P,L) ≤ (1 + 3 )αd2(P,L∗). In other words, the distributed PCA step only introduces a small multiplicative approximation factor of (1 + 3 ).\nThe key to prove the theorem is the following close projection property of Algorithm disPCA in Lemma 4. Intuitively, it means that for any low dimensional subspace spanned by X, the projections of P and P̃ on the subspace are close. To prove Theorem 3 by this, we choose X to be the orthonormal basis of the subspace spanning the centers. Since the problem only involves l2 error, the difference between the objective values of P and P̃ can be decomposed into two terms depending only on ‖PX − P̃X‖2F and ‖PX‖2F −‖P̃X‖2F respectively, which are small as shown by the lemma. The complete proof of Theorem 3 is provided in Appendix B.2.\nLemma 4. Let t1 = t2 = O(k/ ) in Algorithm disPCA. Then for any d × k matrix X with orthonormal columns, 0 ≤ ‖PX− P̃X‖2F ≤ d2(P, LX), and 0 ≤ ‖PX‖2F − ‖P̃X‖2F ≤ d2(P, LX).\nProof Sketch: We first introduce some auxiliary variables for the analysis, which act as intermediate connections between P and P̃. Imagine we perform two kinds of projections: first project Pi to P̂i = PiVi (t1)(Vi (t1))>, then project P̂i to Pi = P̂iV(t2)(V(t2))>. Let P̂ denote the vertical concatenation of P̂i and let P denote the vertical concatenation of Pi. These variables are designed so that the difference between P and P̂ and that between P̂ and P are easily bounded.\nAlgorithm 2 Distributed k-means clustering Input: {Pi}si=1, k ∈ N+ and ∈ (0, 1/3), a non-distributed α-approximation algorithm Aα\n1: Run Algorithm disPCA with t1 = t2 = O(k/ 2) to get E = V(t2), and send E to all nodes. 2: Run the distributed k-means clustering algorithm in (Balcan et al., 2013) on {PiEE>}si=1, usingAα as\na subroutine, to get k centers L. Output: L.\nOur proof then proceeds by first bounding these differences, and then bounding that between P and P̃. Take the second statement as an example. We have the following decomposition:\n‖PX‖2F − ‖P̃X‖2F = [ ‖PX‖2F − ‖P̂X‖2F ] + [ ‖P̂X‖2F − ‖PX‖2F ] + [ ‖PX‖2F − ‖P̃X‖2F ] .\nThe first term is just ∑s\ni=1 [ ‖PiX‖2F − ‖P̂iX‖2F ] , each of which can be bounded by Lemma 1, since P̂i\nis the SVD truncation of P. The second term can be bounded similarly. The more difficult part is the third term. Note that Pi = P̂iZ, P̃i = PiZ where Z := V(t2)(V(t2))>X, leading to\n‖PX‖2F − ‖P̃X‖2F = s∑ i=1 [ ‖P̂iZ‖2F − ‖PiZ‖2F ] .\nAlthough Z is not orthonormal as required by Lemma 1, we prove a generalization (Lemma 7 in the appendix) which can be applied to show that the third term is indeed small.\nThe bound on ‖PX− P̃X‖2F can be proved by a similar argument. See Appendix B.1 for details. Application to k-Means Clustering To see the implication of Theorem 3, consider the k-means clustering problem. We can first perform any other possible dimension reduction to dimension d′ so that the k-means cost is preserved up to accuracy , and then run Algorithm disPCA and finally run any distributed k-means clustering algorithm on the projected data to get a good approximate solution. For example, in the first step we can set d′ = O(log n/ 2) using a Johnson-Lindenstrauss transform, or we can perform no reduction and simply use the original data.\nAs a concrete example, we can use original data (d′ = d), then run Algorithm disPCA, and finally run the distributed clustering algorithm in (Balcan et al., 2013) which uses any non-distributed α-approximation algorithm as a subroutine and computes a (1 + )α-approximate solution. The resulting algorithm is presented in Algorithm 2.\nTheorem 5. With probability at least 1 − δ, Algorithm 2 outputs a (1 + )2α-approximate solution for distributed k-means clustering. The total communication cost of Algorithm 2 is O( sk 2 ) vectors in Rd plus\nO ( 1 4 (k 2 2 + log 1δ ) + sk log sk δ ) vectors in RO(k/ 2)."
    }, {
      "heading" : "4 Fast Distributed PCA",
      "text" : "Subspace Embeddings One can significantly improve the time of the distributed PCA algorithms by using subspace embeddings, while keeping similar guarantees as in Lemma 4, which suffice for l2-error fitting. More precisely, a subspace embedding matrix H ∈ R`×n for a matrix A ∈ Rn×d has the property that for all vectors y ∈ Rd, ‖HAy‖2 = (1 ± )‖Ay‖2. Suppose independently, each node vi chooses a random subspace embedding matrix Hi for its local data Pi. Then, they run Algorithm disPCA on the embedded data {HiPi}si=1 instead of on the original data {Pi}si=1.\nThe work of (Sarlós, 2006) pioneered subspace embeddings. The recent fast sparse subspace embeddings (Clarkson and Woodruff, 2013) and its optimizations (Meng and Mahoney, 2013; Nelson and Nguyên, 2012) are particularly suitable for large scale sparse data sets, since their running time is linear in the number of non-zero entries in the data matrix, and they also preserve the sparsity of the data. The algorithm takes as input an n × d matrix A and a parameter `, and outputs an ` × d embedded matrix A′ = HA (the embedded matrix H does need to be built explicitly). The embedded matrix is constructed as follows: initialize A′ = 0; for each row in A, multiply it by +1 or −1 with equal probability, then add it to a row in A′ chosen uniformly at random.\nThe success probability is constant, while we need to set it to be 1−δ where δ = Θ(1/s). Known results which preserve the number of non-zero entries of H to be 1 per column increase the dimension of H by a factor of s. To avoid this, we propose an approach to boost the success probability by computing O(log 1δ ) independent embeddings, each with only constant success probability, and then run a cross validation style procedure to find one which succeeds with probability 1 − δ. More precisely, we compute the SVD of all embedded matrices HjA = UjΣjV>j , and find a j ∈ [r] such that for at least half of the indices j′ 6= j, all singular values of ΣjV>j Vj′Σ > j′ are in [1 ± O( )] (see Algorithm 5 in the appendix). The reason why such an embedding HjA succeeds with high probability is as follows. Any two successful embeddings HjA and Hj′A, by definition, satisfy that ‖HjAx‖22 = (1±O( ))‖Hj′Ax‖22 for all x, which we show is equivalent to passing the test on the singular values. Since with probability at least 1 − δ, 9/10 fraction of the embeddings are successful, it follows that the one we choose is successful with probability 1− δ. Randomized SVD The exact SVD of an n × d matrix is impractical in the case when n or d is large. Here we show that the randomized SVD algorithm from (Halko et al., 2011) can be applied to speed up the computation without compromising the quality of the solution much. We need to use their specific form of randomized SVD since the error is with respect to the spectral norm, rather than the Frobenius norm, and so can be much smaller as needed by our applications.\nThe algorithm first probes the row space of the ` × d input matrix A with an ` × 2t random matrix Ω and orthogonalizes the image of Ω to get a basis Q (i.e., QR-factorize A>Ω); projects the data to this basis and computes the SVD factorization on the smaller matrix AQ. It also performs q power iterations to push the basis towards the top t singular vectors. Fast Distributed PCA for l2-Error Fitting We modify Algorithm disPCA by first having each node do a subspace embedding locally, then replace each SVD invocation with a randomized SVD invocation. We thus arrive at Algorithm 3. For `2-error fitting problems, by combining approximation guarantees of the randomized techniques with that of distributed PCA, we are able to prove:\nTheorem 6. Suppose Algorithm 3 takes ∈ (0, 1/2], t1 = t2 = O(max { k 2 , log sδ } ), ` = O(d 2 2 ), q = O(max{log d , log sk }) as input, and sets the failure probability of each local subspace embedding to δ ′ = δ/2s. Let P̃ = PVV>. Then with probability at least 1 − δ, there exists a constant c0 ≥ 0, such that for any set of k points L,\n(1− )d2(P,L)− ‖PX‖2F ≤ d2(P̃,L) + c0 ≤ (1 + )d2(P,L) + ‖PX‖2F\nwhere X is an orthonormal matrix whose columns span L. The total communication is O(skd/ 2) and the total time is O ( nnz(P) + s [ d3k 4 + k 2d2 6 ] log d log sk δ ) .\nProof Sketch: It suffices to show that P̃ enjoys the close projection property as in Lemma 4, i.e., ‖PX − P̃X‖2F ≈ 0 and ‖PX‖2F − ‖P̃X‖2F ≈ 0 for any orthonormal matrix X whose columns span a low dimensional subspace. Note that Algorithm 3 is just running Algorithm disPCA (with randomized SVD) on TP\nAlgorithm 3 Fast Distributed PCA for l2-Error Fitting Input: {Pi}si=1; parameters t1, t2 for Algorithm disPCA; `, q for randomized techniques.\n1: for each node vi ∈ V do 2: Compute subspace embedding P′i = HiPi. 3: end for 4: Run Algorithm disPCA on {P′i}si=1 to get V, where the SVD is randomized. 5: dimension: [Pi]ni×d, [P ′ i]`×d, [V]d×2t2\nOutput: V.\nwhere T = diag(H1,H2, . . . ,Hs), so we first show that TP̃ enjoys this property. But now exact SVD is replaced with randomized SVD, for which we need to use the spectral error bound to argue that the error introduced is small. More precisely, for a matrix A and its SVD truncation Â computed by randomized SVD, it is guaranteed that the spectral norm of A− Â is small, then ‖(A− Â)X‖F is small for any X with small Frobenius norm, in particular, the orthonormal basis spanning a low dimensional subspace. This then suffices to guarantee TP̃ enjoys the close projection property. Given this, it suffices to show that P̃ enjoys this property as TP̃, which follows from the definition of a subspace embedding."
    }, {
      "heading" : "5 Experiments",
      "text" : "Our focus is to show the randomized techniques used in Algorithm 3 reduce the time taken significantly without compromising the quality of the solution. We perform experiments for three tasks: rank-r approximation, k-means clustering and principal component regression (PCR). Datasets We choose the following real world datasets from UCI repository (Bache and Lichman, 2013) for our experiments. For low rank approximation and k-means clustering, we choose two medium size datasets NewsGroups (18774 × 61188) and MNIST (70000 × 784), and two large-scale Bag-of-Words datasets: NYTimes news articles (BOWnytimes) (300000× 102660) and PubMed abstracts (BOWpubmed) (8200000 × 141043). We use r = 10 for rank-r approximation and k = 10 for k-means clustering. For PCR, we use MNIST and further choose YearPredictionMSD (515345× 90), CTslices (53500× 386), and a large dataset MNIST8m (800000× 784). Experimental Methodology The algorithms are evaluated on a star network. The number of nodes is s = 25 for medium-size datasets, and s = 100 for the larger ones. We distribute the data over the nodes using a weighted partition, where each point is distributed to the nodes with probability proportional to the node’s weight chosen from the power law with parameter α = 2.\nFor each projection dimension, we first construct the projected data using distributed PCA. For low rank approximation, we report the ratio between the cost of the obtained solution to that of the solution computed by SVD on the global data. For k-means, we run the algorithm in (Balcan et al., 2013) (with Lloyd’s method as a subroutine) on the projected data to get a solution. Then we report the ratio between the cost of the above solution to that of a solution obtained by running Lloyd’s method directly on the global data. For PCR, we perform regression on the projected data to get a solution. Then we report the ratio between the error of the above solution to that of a solution obtained by PCR directly on the global data. We stop the algorihtm if it takes more than 24 hours. For each projection dimension and each algorithm with randomness, the average ratio over 5 runs is reported. Results Figure 2 shows the results for low rank approximation. We observe that the error of the fast distributed PCA is comparable to that of the exact solution computed directly on the global data. This is also\nobserved for distributed PCA with one or none of subspace embedding and randomized SVD. Furthermore, the error of the fast PCA is comparable to that of normal PCA, which means that the speedup techniques merely affects the accuracy of the solution. The second row shows the computational time, which suggests a significant decrease in the time taken to run the fast distributed PCA. For example, on NewsGroups, the time of the fast distributed PCA improves over that of normal distributed PCA by a factor between 10 to 100. On the large dataset BOWpubmed, the normal PCA takes too long to finish and no results are presented, while the speedup versions produce good results in reasonable time. The use of the randomized techniques gives us a good performance improvement while keeping the solution quality almost the same.\nFigure 3 and Figure 4 show the results for k-means clustering and PCR respectively. Similar to that for low rank approximation, we observe that the distributed solutions are almost as good as that computed directly on the global data, and the speedup merely affects the solution quality. We again observe a huge decrease in the running time by the speedup techniques.\nAcknowledgments This work was supported in part by NSF grants CCF-0953192 and CCF-1101215, AFOSR grant FA9550-09-1-0538, ONR grant N00014-09-1-0751, a Google Research Award, and a Microsoft Research Faculty Fellowship."
    }, {
      "heading" : "A Guarantees for Distributed PCA",
      "text" : ""
    }, {
      "heading" : "A.1 Proof of Lemma 1",
      "text" : "We first prove a generalization of Lemma 1.\nLemma 7. Let A ∈ Rn×d be an n × d matrix with singular value decomposition A = UΣV>. Let ∈ (0, 1] and r, t ∈ N+ with d− 1 ≥ t ≥ r + dr/ e − 1, and let Â = AV(t)(V(t))>. Then for any matrix X with d rows and ‖X‖2F ≤ r, we have\n‖(A− Â)X‖2F = ‖AX‖2F − ‖ÂX‖2F ≤ d∑\ni=r+1\nσ2i (A).\nProof. The proof follows the idea in the proof of Lemma 6.1 in (Feldman et al., 2013). For convenience, let Σ(t) denote the diagonal matrix that contains the first t diagonal entries in Σ and is 0 otherwise. Then Â = UΣ(t)V> We first have\n‖AX‖2F − ‖ÂX‖2F = ‖UΣV>X‖2F − ‖UΣ(t)V>X‖2F = ‖ΣV>X‖2F − ‖Σ(t)V>X‖2F = ‖(Σ−Σ(t))V>X‖2F = ‖U(Σ−Σ(t))V>X‖2F = ‖AX− ÂX‖2F .\nwhere the second and fourth equalities follow since U has orthonormal columns, and the third equality follows since for M = V>X we have\n‖ΣM‖2F − ‖Σ(t)M‖2F = d∑ i=1 d∑ j=1 σ2i (A)m 2 ij − t∑ i=1 d∑ j=1 σ2i (A)m 2 ij\n= d∑\ni=t+1 d∑ j=1 σ2i (A)m 2 ij = ‖(Σ−Σ(t))M‖2F .\nNext, we bound ‖AX− ÂX‖2F . We have\n‖AX− ÂX‖2F = ‖(Σ−Σ(t))V>X‖2F ≤ ‖(Σ−Σ(t))‖2S‖X‖2F = rσ2t+1(A)\nwhere the inequality follows because the spectral norm is consistent with the Euclidean norm. This implies the lemma since\nrσ2t+1(A) ≤ (t− r + 1)σ2t+1(A) ≤ t+1∑ i=r+1 σ2i (A) ≤ d∑ i=r+1 σ2i (A). (2)\nwhere the first inequality follows for our choice of t.\nThen Lemma 1 immediately follows from Lemma 7 since any d× r orthonormal matrix A has ‖A‖2F ≤ r, and ∑d i=r+1 σ 2 i (A) ≤ d2(A, LX) by the property of the singular value decomposition."
    }, {
      "heading" : "A.2 Proof of Theorem 2",
      "text" : "Theorem 2. Suppose Algorithm disPCA takes parameters t1 ≥ r + d4r/ e − 1 and t2 = r, and outputs V(r). Then\n‖P−PV(r)(V(r))>‖2F ≤ (1 + ) min X d2(P, LX)\nwhere the minimization is over d× r orthonormal matrices X. The communication is O( srd ) words.\nProof. Let P̂i := PiV (t) i (V (t) i ) >, and let P̂ be the concadenation of P̂i.\nFirst, we show that P̂ serves as a proxy of P for optimizing d2(P, LX). By Pythagorean Theorem, for any orthonormal matrix X of size d× r,\nd2(P̂, LX)− d2(P, LX) = (‖P̂‖2F − ‖P̂X‖2F )− (‖P‖2F − ‖PX‖2F ) = ∆(X)− c0 (3)\nwhere ∆(X) := ‖PX‖2F − ‖P̂X‖2F and c0 := ‖P‖2F − ‖P̂‖2F . Since ∆(X) is small by Lemma 1 and c0 is a constant, P̂ approximates P for optimizing d2(P, LX).\nNext, we note that the optimal principal components for P̂ are V(r). This is because P̂ = ŨY where Ũ is a block-diagonal matrix with blocks U1, . . . ,Us, and thus the right singular vectors of Y are also the right singular vectors of P̂.\nNow, we are ready to bound ‖P − PV(r)(V(r))>‖2F = d2(P, LV(r)). Suppose the r optimal loadings for P are X∗. See Figure 5 for an illustration. Then\n‖P−PV(r)(V(r))>‖2F = d2(P̂, LV(r)) + c0 −∆(V (r))\n≤ d2(P̂, LX∗) + c0 −∆(V(r)) = d2(P, LX∗) + ∆(X ∗)−∆(V(r)) (4)\nwhere the first and third line follow from (3) and the second follows from the fact that V(r) are the optimal principal loadings for P̂. By Lemma 1, ∆(V(r)) ≥ 0 and ∆(X∗) ≤ d2(P, LX∗). Combining these with (4) leads to the theorem.\nNote A refinement of the proof of Lemma 1 leads to the following data dependent bound.\nLemma 8. The statement in Lemma 7 holds if t > τ(A, r, ) where\nτ(A, r, ) := argmin t\n{ σ2t (A) ≤\nr ∑ i>r σ2i (A)\n} ."
    }, {
      "heading" : "Furthermore, τ(A, r, ) = O( r ).",
      "text" : "Proof. Note that the bound on t is only used in proving (2), for which t > τ(A, r, ) suffices. τ(A, r, ) = O( r ) follows by definition.\nTheorem 9. Suppose Algorithm disPCA takes parameters t1 ≥ maxi τ(Pi, r, ) and t2 = r,and outputs V(r). Then\n‖P−PV(r)(V(r))>‖2F ≤ (1 + ) min X d2(P, LX)\nwhere the minimization is over orthonormal matrices X ∈ Rd×r. The total communication cost isO(sdmaxi τ(Pi, r, )) words.\nτ(Pi, r, ) is typically much less than O(r/ ) in practice. This provides an explanation for the fact that t1 much smaller than O(r/ ) can still lead to good solution for many practical instances. Similar data dependent bounds can be derived for the other theorems in our paper.\nB Guarantees for Distributed `2-Error Fitting"
    }, {
      "heading" : "B.1 Proof of Lemma 4",
      "text" : "We first introduce some intermediate variables for our analysis. Imagine we perform two projections: first project Pi to P̂i = PiVi(t)(Vi(t))>, then project P̂i to Pi = P̂iV(t)(V(t))> where t = t1 = t2. Let P̂ denote the vertical concatenation of P̂i and let P denote the vertical concatenation of Pi, i.e.\nP̂ =  P̂1... P̂s  and P =  P1... Ps  Lemma 4. Let t1 = t2 ≥ k + d8k/ e − 1 in Algorithm disPCA for k ∈ N+ and ∈ (0, 1). Then for any d× k matrix X with orthonormal columns,\n0 ≤ ‖PX− P̃X‖2F ≤ d 2(P, LX), 0 ≤ ‖PX‖2F − ‖P̃X‖2F ≤ d 2(P, LX).\nProof. For the first statement, we have\n‖PX− P̃X‖2F ≤ 2‖PX− P̂X‖2F (5) + 2‖P̂X−PX‖2F (6) + 2‖PX− P̃X‖2F . (7)\nFor (5), we have by Lemma 7\n‖PX− P̂X‖2F = s∑ i=1 ‖PiX− P̂iX‖2F ≤ s∑ i=1 4 d2(Pi, LX) = 8 d2(P, LX). (8)\nSimilarly, for (6) we have by Lemma 7\n‖P̂X−PX‖2F ≤ 8 d2(P̂, LX). (9)\nTo bound (7), let Y = V(t)(V(t))>X. Then by definition, PiX = P̂iY and P̃iX = PiY. By Lemma 7, we have\n‖PX− P̃X‖2F = s∑ i=1 ‖P̂iY −PiY‖2F (10)\n≤ s∑ i=1 8 s∑ i=r+1 σ2i (Pi) ≤ 8 s∑ i=1 d2(Pi, LX) = 8 d2(P, LX). (11)\nCombining (8)(9) and (11) leads to\n‖PX− P̃X‖2F ≤ 2 d2(P, LX) + 4 d2(P̂, LX). (12)\nWe now only need to bound d2(P̂, LX) is similar to d2(P, LX), which is done in Lemma 10. The first statement then follows.\nFor the second statement, we have a similar argument.\n‖PX‖2F − ‖P̃X‖2F = ‖PX‖2F − ‖P̂X‖2F (13) + ‖P̂X‖2F − ‖PX‖2F (14) + ‖PX‖2F − ‖P̃X‖2F . (15)\nFor (13), we have by Lemma 7\n‖PX‖2F − ‖P̂X‖2F = s∑ i=1 [ ‖PiX‖2F − ‖P̂iX‖2F ] ≤ s∑ i=1 4 d2(Pi, LX) = 4 d2(P, LX). (16)\nSimilarly, for (14) we have by Lemma 7\n‖P̂X‖2F − ‖PX‖2F ≤ 4 d2(P̂, LX). (17)\nBy Lemma 7, we have\n‖PX‖2F − ‖P̃X‖2F = s∑ i=1 [ ‖P̂iY‖2F − ‖PiY‖2F ] ≤\ns∑ i=1 4 s∑ i=r+1 σ2i (Pi) ≤ 4 s∑ i=1 d2(Pi, LX) = 4 d2(P, LX). (18)\nCombining (16)(17) and (18) leads to\n‖PX‖2F − ‖P̃X‖2F ≤ 2 d2(P, LX) + 4 d2(P̂, LX). (19)\nThe second statement then follows from (19) and Lemma 10.\nThe following is a technical lemma that will be used in the proof of Lemma 4.\nLemma 10. d2(P̂, LX) ≤ (1 + )d2(P, LX).\nProof. We have\nd2(P̂, LX)− d2(P, LX) = ‖P̂− P̂XX>‖2F − ‖P−PXX>‖2F = ‖P̂‖2F − ‖P̂XX>‖2F − (‖P‖2F − ‖PXX>‖2F )\n= s∑ i=1 [ ‖P̂i‖2F − ‖Pi‖2F ] + s∑ i=1 [ ‖PiXX>‖2F − ‖P̂iXX>‖2F ] .\nBy the Pythagorean Theorem, ‖P̂i‖2F ≤ ‖Pi‖2F . Also, since X is orthonormal, ‖PiXX>‖2F = ‖PiX‖2F and ‖P̂iXX>‖2F = ‖P̂iX‖2F . Then\nd2(P̂, LX)− d2(P, LX) ≤ s∑ i=1 [ ‖PiX‖2F − ‖P̂iX‖2F ] ≤ s∑ i=1 d2(Pi, LX) = d 2(P, LX) (20)\nwhere the second inequality follows from Lemma 1."
    }, {
      "heading" : "B.2 Proof of Theorem 3",
      "text" : "The following weak triangle inequality is useful for our analysis.\nFact 1. For any a, b ∈ R and ∈ (0, 1), |a2 − b2| ≤ 3(a−b) 2 + 2 a 2.\nProof. Either |a| ≤ |a−b| or |a− b| ≤ |a|, so we have |a||a− b| ≤ (a−b)2 + a 2. This leads to\n|a2 − b2| = |a− b||a+ b| ≤ |a− b|(|2a|+ |b− a|) = 2|a||a− b|+ (a− b)2 ≤ 2(a− b) 2 + 2 a2 + (a− b)2\nwhich completes the proof.\nWe first prove the theorem for the special case of k-means clustering, and the same argument leads to the guarantee for general l2-error fitting problems.\nTheorem 11. Let t1 = t2 ≥ k + d4k/ 2e − 1 in Algorithm disPCA.Then there exists a constant c0 ≥ 0, such that for any set of k points L,\n(1− )d2(P,L) ≤ d2(P̃,L) + c0 ≤ (1 + )d2(P,L).\nProof. The proof follows that in (Feldman et al., 2013), with slight modification for the distributed setting. Let X ∈ Rd×k has orthonormal columns that span L. Let p̃i be the point in P̃ corresponding to pi in P. Let c0 = ‖P‖2F − ‖P̃‖2F . Then by Pythagorean theorem we have |d2(P,L)− d2(P̃,L)− c0| ≤ ∣∣∣∣d2(P, L(X))− d2(P̃, LX)− c0∣∣∣∣+ ∣∣∣∣ |P|∑\ni=1\n[ d(πX(pi),L)2 − d(πX(p̃i),L)2 ]∣∣∣∣.\nAlgorithm 4 Fast Sparse Subspace Embedding (Clarkson and Woodruff, 2013) Input: parameters n, ` ∈ N+.\n1: Let h : [n] 7→ [`] be a random map, so that for each i ∈ [n], h(i) = j for j ∈ [`] with probability 1/`. 2: Let Φ be an `× n binary matrix with Φh(i),i = 1, and all remaining entries 0. 3: Let Σ be an n × n diagonal matrix, with each diagonal entry independently chosen as +1 or −1 with\nequal probability. Output: H = ΦΣ.\nFor the first part, we have by Pythagorean theorem\nd2(P, L(X))− d2(P̃, LX)− c0 = (‖P‖2F − ‖PX‖2F )− (‖P̃‖2F − ‖P̃X‖2F )− c0 = ‖P̃X‖2F − ‖PX‖2F . (21)\nFor the second part, by Fact 1 we have\n|P|∑ i=1 ∣∣d(πX(pi),L)2 − d(πX(p̃i),L)2∣∣ ≤ |P|∑ i=1 [ 12d(πX(pi), πX(p̃i)) 2 + 2 d(πX(pi),L)2 ]\n= 12\n‖(P− P̃)X‖2F +\n2 |P|∑ i=1 d(πX(pi),L)2\n≤ 12 ‖(P− P̃)X‖2F +\n2 |P|∑ i=1 d(pi,L)2. (22)\nCombining (21)(22) with Lemma 4 leads to the theorem, since d2(P, LX) ≤ d2(P,L).\nThe general statement for `2-error geometric fitting problems follows from the same argument. Theorem 3. Let t1 = t2 = O(rk/ 2) in Algorithm disPCA for ∈ (0, 1/3). Then there exists a constant c0 ≥ 0 such that for any set of k centers L in r-Subspace k-Clustering,\n(1− )d2(P,L) ≤ d2(P̃,L) + c0 ≤ (1 + )d2(P,L)."
    }, {
      "heading" : "C Fast Distributed PCA",
      "text" : ""
    }, {
      "heading" : "C.1 Proofs for Subspace Embedding",
      "text" : "The construction of the embedding matrix H is presented in Algorithm 4. Note that the embedding matrix H does not need to be built explicitly; we can compute the embedding HA for an given matrix A in a direct and faster way. Algorithm 4 has the following guarantee.\nTheorem 12. (Clarkson and Woodruff, 2013; Meng and Mahoney, 2013; Nelson and Nguyên, 2012) Suppose n > d and ` = O(d 2 2 ). With probability at least 99/100, ‖HAy‖2 = (1 ± )‖Ay‖2 for all vectors y ∈ Rd. Moreover, HA can be computed in time O(nnz(A)) where nnz(A) is the number of non-zero entries in A.\nAlgorithm 5 Boosting success probability of embedding Input: A ∈ Rn×d, parameters , δ.\n1: Construct r = O(log 1δ ) independent subspace embeddings HjA, each having accuracy /9 and success probability 99/100. 2: Compute SVD HjA = UjΣjV>j for j ∈ [r]. 3: for j ∈ [r] do 4: Check if for at least half j′ 6= j,\nσi(Σj′V > j′VjΣ −1 j ) ∈ [1± /3], ∀i.\n5: If so, output HjA. 6: end for\nLemma 13. Let ∈ (0, 1/2] and k, t ∈ N+ with d− 1 ≥ t ≥ k + d4k/ e − 1. Suppose Algorithm disPCA takes input {HiPi}si=1 and outputs V(t). Let P̃ = PV(t)(V(t))>. Then for any d × k matrix X with orthonormal columns,\n‖PX− P̃X‖2F ≤ d2(P, LX),∣∣‖PX‖2F − ‖P̃X‖2F ∣∣ ≤ 3 ‖PX‖2F + d2(P, LX). Proof. First note that the input to Algorithm disPCA is TP where T is a block-diagonal matrix with blocks H1, . . . ,Hs. Then the projection of the input to V(t) is TPV(t)(V(t))> = TP̃. By Lemma 4, for any d×k matrix X with orthonormal columns, we have\n0 ≤ ‖TPX−TP̃X‖2F ≤ 4 d2(TP, LX), (23)\n0 ≤ ‖TPX‖2F − ‖TP̃X‖2F ≤ 4 d2(TP, LX). (24)\nBy properties of T, we have\n‖TPX−TP̃X‖2F = ‖T(PX− P̃X)‖2F ≥ (1− )‖PX− P̃X‖2F\nand\nd2(TP, LX) = ‖TP−TPXX>‖2F ≤ (1 + )‖P−PXX>‖2F = (1 + )d2(P, LX).\nCombined with (23), these lead to the first claim. Similarly, we also have ‖TPX‖2F = (1± )‖PX‖2F and ‖TP̃X‖2F = (1± )‖P̃X‖2F . Plugging these into (24), we obtain\n−3 ‖PX‖2F ≤ ‖PX‖2F − ‖P̃X‖2F ≤ 3 ‖PX‖2F + d2(P, LX)\nwhich establishes the lemma.\nTheorem 14. Algorithm 5 outputs a subspace embedding with probability at least 1−δ. In expectation Step 3 is run only a constant number of times with expected time O(d3r2/ 2).\nAlgorithm 6 Randomized SVD (Halko et al., 2011) Input: matrix A ∈ R`×d; parameters t, q ∈ N+.\n1: Stage A 2: Generate an `× 2t Gaussian test matrix Ω. 3: Set Y = (A>A)qA>Ω, and compute QR-factorization: Y = QR. 4: dimension: [A]`×d, [Ω]`×2t, [Y]d×2t, [Q]d×2t 5: Stage B 6: Set B = AQ, and compute SVD: B = UΣṼ>. 7: Set V = QṼ. 8: dimension: [B]`×2t, [U]`×`, [Σ]`×2t, [Ṽ]2t×2t, [V]d×2t\nOutput: Σ,V.\nProof. For each j, HjA succeeds with probability 99/100, meaning that for all x we have ‖HjAx‖2 = (1± /9)‖Ax‖2. Suppose for some j 6= j′, HjA and Hj′A are both successful. By definition we have\n‖HjAx‖2 = (1± /3)‖Hj′Ax‖2\nfor all x. Taking the SVD of the embeddings, this is equivalent to\n‖ΣjV>j x‖2 = (1± /3)‖Σj′V>j′x‖2\nfor all x. Making the change of variable y := ΣjV>j x, this is equivalent to\n‖y‖2 = (1± /3)‖Σj′V>j′VjΣ−1j y‖2\nfor all y, which is true if and only if all singular values of Σj′V>j′VjΣ −1 j are in [1− /3, 1 + /3].\nConversely, if all singular values of Σj′V>j′VjΣ −1 j are in [1 − /3, 1 + /3], one can trace the steps backward to conclude that ‖HjAx‖2 = (1± /3)‖Hj′Ax‖2 for all x. Since with probability at least 1−δ, a 9/10 fraction of the embeddings succeed with accuracy /9, there exists a j that can pass the test. It follows that any index j which passes the test in the algorithm with a majority of the j′ 6= j is a successful subspace embedding with accuracy .\nMoreover, if we choose a random j to compare to the remaining j′, the expected number of choices of j until the test passes is only constant. Then finding the index j only takes an expected O(r) SVDs.\nThe time to do the SVD naively is O(d4/ 2). We can improve this by letting T be a fast JohnsonLindenstrauss transform matrix of dimensionO(dr/ 2)×O(d2/ 2), then we can replace HjA with THjA for all j ∈ [d]. Then the verification procedure would only take O(d3r2/ 2) time."
    }, {
      "heading" : "C.2 Proofs for Randomized SVD",
      "text" : "The details of randomized SVD are presented in Algorithm 6, rephrased in our notations. We have the following analog of Lemma 1.\nLemma 15. Let A ∈ R`×d be an ` × d matrix (` > d). Let ∈ (0, 1], k, t ∈ N+ with d − 1 ≥ t ≥ k+ d6k/ 2e− 1. Let Â = AVV> where V is computed by Algorithm 6 with q = O(log max{`, d}). Then\nwith probability at least 1− 3e−t, for any matrix X with d rows and ‖X‖2F ≤ k, we have\n‖(A− Â)X‖2F ≤ 2\n3 d∑ i=k+1 σ2i (A),\n∣∣‖AX‖2F − ‖ÂX‖2F ∣∣ ≤ d∑ i=k+1 σ2i (A) + 2 ‖AX‖2F .\nThe algorithm runs in time O(qt`d+ t2(`+ d)).\nProof. As stated in Section 10.4 in (Halko et al., 2011), with probability at least 1− 3e−t, we have\n‖A− Â‖S ≤ 2σt+1(A). (25)\nThen we have\n‖(A− Â)X‖2F ≤ ‖X‖2F ‖A− Â‖2S ≤ 2kσ2t+1(A)\nwhere the first inequality follows because the spectral norm is consistent with the Euclidean norm, and the second inequality follows from (25). For our choice of t, we have\nkσ2t+1(A) ≤ 2\n6 (t− k + 1)σ2t+1(A) ≤\n2\n6 t+1∑ i=k+1 σ2i (A) ≤ 2 6 d∑ i=k+1 σ2i (A) ≤ 2 6 d2(A, LX),\nwhich leads to the first claim in the lemma. To prove the second claim, first note that ∣∣‖AX‖F − ‖ÂX‖F ∣∣2 ≤ ‖(A− Â)X‖2F ≤ 23 d2(A, LX). Then by Fact 1, we have ∣∣‖AX‖2F − ‖ÂX‖2F ∣∣ ≤ 3 ∣∣‖AX‖F − ‖ÂX‖F ∣∣2 + 2 ‖AX‖2F ≤ d2(A, LX) + 2 ‖AX‖2F which completes the proof."
    }, {
      "heading" : "C.3 Proof of Theorem 6",
      "text" : "Let T to be a diagonal block matrix with H1,H2, . . . ,Hs on the diagonal. Then Algorithm 3 is just to run Algorithm disPCA on TP to get the principal components V. Recall that the goal is to show P̃ = PVV> is a good proxy for the original data P with respect to `2 error fitting problems. It suffices to show that P̃ satisfies enjoys properties similar to those stated in Lemma 4.\nTo prove this, we begin with a lemma saying that TP̃ enjoys such properties, i.e. such properties are approximately preserved when replacing exact SVD with randomized SVD in Algorithm disPCA (Lemma 16). Then we can show that P̃ enjoys similar properties as TP̃, i.e. these properties are approximately preserved under subspace embedding (Lemma 18).\nLemma 16. For any d× k matrix X with orthonormal columns,\n‖TPX−TP̃X‖2F ≤ O( 2)d2(TP, LX) +O( 3)‖TPX‖2F ,∣∣∣‖TPX‖2F − ‖TP̃X‖2F ∣∣∣ ≤ O( )d2(TP, LX) +O( )‖TPX‖2F . Proof. The proof follows that of Lemma 4 to TP. But now exact SVD is replaced with randomized SVD, so we need to argue that randomized SVD produces similar result as exact SVD in the sense of Lemma 7. This is already proved in Lemma 15. Also note that we need a technical lemma bounding the small error terms incurred on the intermediate result TP̂. This is done by Lemma 17.\nLemma 17.\n‖TP̂X‖2F ≤ d2(TP, LX) + (1 + 2 )‖TPX‖2F , d2(TP̂, LX) ≤ (1 + )d2(TP, LX) + ‖TPX‖2F .\nProof. For the first statement, by Lemma 15, we have∣∣∣‖TP̂X‖2F − ‖TPX‖2F ∣∣∣ ≤ s∑ i=1 ∣∣∣‖TPiX‖2F − ‖TP̂iX‖2F ∣∣∣ ≤\ns∑ i=1 d2(TPi, LX) + 2 s∑ i=1 ‖TPiX‖2F\n≤ d2(TP, LX) + 2 ‖TPX‖2F . (26)\nFor the second statement, by Pythagorean Theorem, d2(TP̂, LX)− d2(TP, LX) = [ ‖TP̂‖2F − ‖TP̂X‖2F ] − [ ‖TP‖2F − ‖TPX‖2F ] = [ ‖TP̂‖2F − ‖TP‖2F ] + [ ‖TPX‖2F − ‖TP̂X‖2F\n] ≤ ‖TPX‖2F − ‖TP̂X‖2F .\nThe second statement then follows from the last inequality and (26).\nLemma 18. For any d× k matrix X with orthonormal columns,\n‖PX− P̃X‖2F ≤ O( 2)d2(P, LX) +O( 3)‖PX‖2F ,∣∣∣‖PX‖2F − ‖P̃X‖2F ∣∣∣ ≤ O( )d2(P, LX) +O( )‖PX‖2F . Proof. By the property of subspace embedding, we have ‖TPX − TP̃X‖2F = (1 ± )‖PX − P̃X‖2F , ‖TPX‖2F = (1 ± )‖PX‖2F and d2(TP, LX) = ‖TP − TPXX>‖2F = (1 ± )‖P − PXX>‖2F = (1± )d2(P, LX). Then\n(1 + )‖PX− P̃X‖2F ≤ ‖TPX−TP̃X‖2F ≤ O( 2)d2(TP, LX) +O( 3)‖TPX‖2F ≤ O( 2)d2(P, LX) +O( 3)‖PX‖2F\nwhere the second inequality is from Lemma 16. This then leads to the first statement.\nFor the second statement, we have\n(1 + )‖PX‖2F − (1− )‖P̃X‖2F ≤ ‖TPX‖2F − ‖TP̃X‖2F ≤ O( )d2(TP, LX) +O( )‖TPX‖2F ≤ O( )d2(P, LX) +O( )‖PX‖2F\nwhich leads to\n‖PX‖2F − ‖P̃X‖2F ≤ O( )d2(P, LX) +O( )‖PX‖2F .\nA similar argument bounds ‖P̃X‖2F − ‖PX‖2F , which completes the proof.\nWe represent Theorem 6 in a general form for `2-error geometric fitting problems. Theorem 6. Suppose Algorithm 3 takes ∈ (0, 1/2], t1 = t2 = O(max { k 2 , log sδ } ), ` = O(d 2 2 ), q = O(max{log d , log sk }) as input, and sets the failure probability of each local subspace embedding to δ ′ = δ/2s. Let P̃ = PVV>. Then with probability at least 1 − δ, there exists a constant c0 ≥ 0, such that for any set of k points L,\n(1− )d2(P,L)− ‖PX‖2F ≤ d2(P̃,L) + c0 ≤ (1 + )d2(P,L) + ‖PX‖2F\nwhere X is an orthonormal matrix whose columns span L. The total communication is O(skd/ 2) and the total time is O ( nnz(P) + s [ d3k 4 + k 2d2 6 ] log d log sk δ ) .\nProof. The proof of correctness follows the proof of Theorem 3, replacing the use of Lemma 4 with Lemma 18.\nOn each node vi, the subspace embedding takes time O(nnz(Pi)), and the randomized SVD takes time O(qt1`d+t 2 1(`+d)); on the central coordinator, the randomized SVD takes timeO(qt1(st1)d+t 2 1(st1+d)) since Y has O(st1) non-zero rows. The total running time then follows from the choice of the parameters. The total communication cost follows from the fact that the algorithm only sends Σi(t1),Vi(t1) from each node to the central coordinator."
    } ],
    "references" : [ {
      "title" : "Principal component analysis for distributed data sets with updating",
      "author" : [ "Zheng-Jian Bai", "Raymond H Chan", "Franklin T Luk" ],
      "venue" : "In Proceedings of the International Conference on Advanced Parallel Processing Technologies,",
      "citeRegEx" : "Bai et al\\.,? \\Q2005\\E",
      "shortCiteRegEx" : "Bai et al\\.",
      "year" : 2005
    }, {
      "title" : "Distributed k-means and k-median clustering on general communication topologies",
      "author" : [ "Maria-Florina Balcan", "Steven Ehrlich", "Yingyu Liang" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Balcan et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Balcan et al\\.",
      "year" : 2013
    }, {
      "title" : "Stochastic dimensionality reduction for k-means clustering",
      "author" : [ "Christos Boutsidis", "Anastasios Zouzias", "Michael W. Mahoney", "Petros Drineas" ],
      "venue" : "CoRR, abs/1110.2897,",
      "citeRegEx" : "Boutsidis et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Boutsidis et al\\.",
      "year" : 2011
    }, {
      "title" : "Low rank approximation and regression in input sparsity time",
      "author" : [ "Kenneth L Clarkson", "David P Woodruff" ],
      "venue" : "In Proceedings of the 45th Annual ACM Symposium on Theory of Computing,",
      "citeRegEx" : "Clarkson and Woodruff.,? \\Q2013\\E",
      "shortCiteRegEx" : "Clarkson and Woodruff.",
      "year" : 2013
    }, {
      "title" : "Spanner: Googles globallydistributed database",
      "author" : [ "James C Corbett", "Jeffrey Dean", "Michael Epstein", "Andrew Fikes", "Christopher Frost", "JJ Furman", "Sanjay Ghemawat", "Andrey Gubarev", "Christopher Heiser", "Peter Hochschild" ],
      "venue" : "In Proceedings of the USENIX Symposium on Operating Systems Design and Implementation,",
      "citeRegEx" : "Corbett et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Corbett et al\\.",
      "year" : 2012
    }, {
      "title" : "A unified framework for approximating and clustering data",
      "author" : [ "Dan Feldman", "Michael Langberg" ],
      "venue" : "In Proceedings of the Annual ACM Symposium on Theory of Computing,",
      "citeRegEx" : "Feldman and Langberg.,? \\Q2011\\E",
      "shortCiteRegEx" : "Feldman and Langberg.",
      "year" : 2011
    }, {
      "title" : "Turning big data into tiny data: Constant-size coresets for k-means, pca and projective clustering",
      "author" : [ "Dan Feldman", "Melanie Schmidt", "Christian Sohler" ],
      "venue" : "In Proceedings of the Annual ACM-SIAM Symposium on Discrete Algorithms,",
      "citeRegEx" : "Feldman et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Feldman et al\\.",
      "year" : 2013
    }, {
      "title" : "Relative errors for deterministic low-rank matrix approximations",
      "author" : [ "Mina Ghashami", "Jeff M. Phillips" ],
      "venue" : "CoRR, abs/1307.7454,",
      "citeRegEx" : "Ghashami and Phillips.,? \\Q2013\\E",
      "shortCiteRegEx" : "Ghashami and Phillips.",
      "year" : 2013
    }, {
      "title" : "Finding structure with randomness: Probabilistic algorithms for constructing approximate matrix decompositions",
      "author" : [ "Nathan Halko", "Per-Gunnar Martinsson", "Joel A Tropp" ],
      "venue" : "SIAM review,",
      "citeRegEx" : "Halko et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Halko et al\\.",
      "year" : 2011
    }, {
      "title" : "Nimble algorithms for cloud computing",
      "author" : [ "Ravindran Kannan", "Santosh Vempala", "David Woodruff" ],
      "venue" : "arXiv preprint arXiv:1304.3162,",
      "citeRegEx" : "Kannan et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Kannan et al\\.",
      "year" : 2013
    }, {
      "title" : "Combining structured and unstructured randomness in large scale pca",
      "author" : [ "Nikos Karampatziakis", "Paul Mineiro" ],
      "venue" : "CoRR, abs/1310.6304,",
      "citeRegEx" : "Karampatziakis and Mineiro.,? \\Q2013\\E",
      "shortCiteRegEx" : "Karampatziakis and Mineiro.",
      "year" : 2013
    }, {
      "title" : "Distributed principal component analysis for wireless sensor",
      "author" : [ "Yann-Aël Le Borgne", "Sylvain Raybaud", "Gianluca Bontempi" ],
      "venue" : "networks. Sensors,",
      "citeRegEx" : "Borgne et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Borgne et al\\.",
      "year" : 2008
    }, {
      "title" : "Algorithms for non-negative matrix factorization",
      "author" : [ "Daniel D. Lee", "H. Sebastian Seung" ],
      "venue" : "Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Lee and Seung.,? \\Q2001\\E",
      "shortCiteRegEx" : "Lee and Seung.",
      "year" : 2001
    }, {
      "title" : "Consensus-based distributed principal component analysis in wireless sensor networks",
      "author" : [ "Sergio Valcarcel Macua", "Pavle Belanovic", "Santiago Zazo" ],
      "venue" : "In Proceedings of the IEEE International Workshop on Signal Processing Advances in Wireless Communications (SPAWC),",
      "citeRegEx" : "Macua et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Macua et al\\.",
      "year" : 2010
    }, {
      "title" : "Low-distortion subspace embeddings in input-sparsity time and applications to robust linear regression",
      "author" : [ "Xiangrui Meng", "Michael W Mahoney" ],
      "venue" : "In Proceedings of the Annual ACM symposium on Symposium on theory of computing,",
      "citeRegEx" : "Meng and Mahoney.,? \\Q2013\\E",
      "shortCiteRegEx" : "Meng and Mahoney.",
      "year" : 2013
    }, {
      "title" : "Characterizing web-based video sharing workloads",
      "author" : [ "Siddharth Mitra", "Mayank Agrawal", "Amit Yadav", "Niklas Carlsson", "Derek Eager", "Anirban Mahanti" ],
      "venue" : "ACM Transactions on the Web,",
      "citeRegEx" : "Mitra et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Mitra et al\\.",
      "year" : 2011
    }, {
      "title" : "Osnap: Faster numerical linear algebra algorithms via sparser subspace embeddings",
      "author" : [ "Jelani Nelson", "Huy L Nguyên" ],
      "venue" : "arXiv preprint arXiv:1211.1002,",
      "citeRegEx" : "Nelson and Nguyên.,? \\Q2012\\E",
      "shortCiteRegEx" : "Nelson and Nguyên.",
      "year" : 2012
    }, {
      "title" : "Adaptive filters for continuous queries over distributed data streams",
      "author" : [ "Chris Olston", "Jing Jiang", "Jennifer Widom" ],
      "venue" : "In Proceedings of the ACM SIGMOD International Conference on Management of Data,",
      "citeRegEx" : "Olston et al\\.,? \\Q2003\\E",
      "shortCiteRegEx" : "Olston et al\\.",
      "year" : 2003
    }, {
      "title" : "Principal component analysis for dimension reduction in massive distributed data sets",
      "author" : [ "Yongming Qu", "George Ostrouchov", "Nagiza Samatova", "Al Geist" ],
      "venue" : "In Proceedings of IEEE International Conference on Data Mining,",
      "citeRegEx" : "Qu et al\\.,? \\Q2002\\E",
      "shortCiteRegEx" : "Qu et al\\.",
      "year" : 2002
    }, {
      "title" : "Improved approximation algorithms for large matrices via random projections",
      "author" : [ "Tamás Sarlós" ],
      "venue" : "In FOCS,",
      "citeRegEx" : "Sarlós.,? \\Q2006\\E",
      "shortCiteRegEx" : "Sarlós.",
      "year" : 2006
    }, {
      "title" : "The algorithm runs in time O(qt`d+ t2(`+ d))",
      "author" : [ "‖AX‖F" ],
      "venue" : "(Halko et al.,",
      "citeRegEx" : ".,? \\Q2011\\E",
      "shortCiteRegEx" : ".",
      "year" : 2011
    } ],
    "referenceMentions" : [ {
      "referenceID" : 17,
      "context" : "Since data is often partitioned across multiple servers (Olston et al., 2003; Corbett et al., 2012; Mitra et al., 2011), there is an increased interest in computing on it in the distributed model.",
      "startOffset" : 56,
      "endOffset" : 119
    }, {
      "referenceID" : 4,
      "context" : "Since data is often partitioned across multiple servers (Olston et al., 2003; Corbett et al., 2012; Mitra et al., 2011), there is an increased interest in computing on it in the distributed model.",
      "startOffset" : 56,
      "endOffset" : 119
    }, {
      "referenceID" : 15,
      "context" : "Since data is often partitioned across multiple servers (Olston et al., 2003; Corbett et al., 2012; Mitra et al., 2011), there is an increased interest in computing on it in the distributed model.",
      "startOffset" : 56,
      "endOffset" : 119
    }, {
      "referenceID" : 12,
      "context" : "Moreover, it can serve as a preprocessing step to reduce the data dimension in various machine learning tasks, such as k-means, Non-Negative Matrix Factorization (NNMF) (Lee and Seung, 2001) and Latent Dirichlet Allocation (LDA) (Blei et al.",
      "startOffset" : 169,
      "endOffset" : 190
    }, {
      "referenceID" : 6,
      "context" : "A beautiful property of the coresets developed in (Feldman et al., 2013) is that for approximate PCA their size also only depends linearly on the dimension d, whereas previous coresets depended quadratically on d (Feldman and Langberg, 2011).",
      "startOffset" : 50,
      "endOffset" : 72
    }, {
      "referenceID" : 5,
      "context" : ", 2013) is that for approximate PCA their size also only depends linearly on the dimension d, whereas previous coresets depended quadratically on d (Feldman and Langberg, 2011).",
      "startOffset" : 148,
      "endOffset" : 176
    }, {
      "referenceID" : 4,
      "context" : ", 2003; Corbett et al., 2012; Mitra et al., 2011), there is an increased interest in computing on it in the distributed model. A basic tool for distributed data analysis is Principal Component Analysis (PCA). The goal of PCA is to find an r-dimensional (affine) subspace that captures as much of the variance of the data as possible. Hence, it can reveal lowdimensional structure in very high dimensional data. Moreover, it can serve as a preprocessing step to reduce the data dimension in various machine learning tasks, such as k-means, Non-Negative Matrix Factorization (NNMF) (Lee and Seung, 2001) and Latent Dirichlet Allocation (LDA) (Blei et al., 2003). In the distributed model, approximate PCA was used by Feldman et al. (2013) for solving a number of shape fitting problems such as k-means clustering, where the approximation PCA solution is computed based on a summary of the data called coreset.",
      "startOffset" : 8,
      "endOffset" : 737
    }, {
      "referenceID" : 6,
      "context" : "For approximate distributed PCA, the following protocol is implicit in (Feldman et al., 2013): each server i computes its top O(r/ ) principal components Yi of Pi and sends them to the coordinator.",
      "startOffset" : 71,
      "endOffset" : 93
    }, {
      "referenceID" : 6,
      "context" : "5 in (Feldman et al., 2013), which shows that given a data matrix P, if we project the rows onto the space spanned by the top O(k/ 2) principal components, and solve the k-means problem in this subspace, we obtain a (1 + )approximation.",
      "startOffset" : 5,
      "endOffset" : 27
    }, {
      "referenceID" : 1,
      "context" : "One feature of this approach is that by using the distributed k-means algorithm in (Balcan et al., 2013) on the projected data, the coordinator can sample points from the servers proportional to their local k-means cost solutions, which reduces the communication roughly by a factor of s in the k-means step, which would come from each server sending their local k-means coreset to the coordinator.",
      "startOffset" : 83,
      "endOffset" : 104
    }, {
      "referenceID" : 2,
      "context" : "For example, if we want a 1 + approximation factor, we can set d′ = O(log n/ 2) by a Johnson-Lindenstrauss transform; if we want a larger 2 + approximation factor, we can set d′ = O(k/ 2) using (Boutsidis et al., 2011).",
      "startOffset" : 194,
      "endOffset" : 218
    }, {
      "referenceID" : 19,
      "context" : "to instead have each server first sample an oblivious subspace embedding (OSE) (Sarlós, 2006; Clarkson and Woodruff, 2013; Nelson and Nguyên, 2012; Meng and Mahoney, 2013) matrix Hi, and instead run the algorithm on the point set defined by the rows of HiPi.",
      "startOffset" : 79,
      "endOffset" : 171
    }, {
      "referenceID" : 3,
      "context" : "to instead have each server first sample an oblivious subspace embedding (OSE) (Sarlós, 2006; Clarkson and Woodruff, 2013; Nelson and Nguyên, 2012; Meng and Mahoney, 2013) matrix Hi, and instead run the algorithm on the point set defined by the rows of HiPi.",
      "startOffset" : 79,
      "endOffset" : 171
    }, {
      "referenceID" : 16,
      "context" : "to instead have each server first sample an oblivious subspace embedding (OSE) (Sarlós, 2006; Clarkson and Woodruff, 2013; Nelson and Nguyên, 2012; Meng and Mahoney, 2013) matrix Hi, and instead run the algorithm on the point set defined by the rows of HiPi.",
      "startOffset" : 79,
      "endOffset" : 171
    }, {
      "referenceID" : 14,
      "context" : "to instead have each server first sample an oblivious subspace embedding (OSE) (Sarlós, 2006; Clarkson and Woodruff, 2013; Nelson and Nguyên, 2012; Meng and Mahoney, 2013) matrix Hi, and instead run the algorithm on the point set defined by the rows of HiPi.",
      "startOffset" : 79,
      "endOffset" : 171
    }, {
      "referenceID" : 16,
      "context" : "This number of rows can be further reducted to O(d log d/ 2) if one is willing to spend O(nnz(Pi) log d/ ) time (Nelson and Nguyên, 2012).",
      "startOffset" : 112,
      "endOffset" : 137
    }, {
      "referenceID" : 18,
      "context" : "Related Work A number of algorithms for approximate distributed PCA have been proposed (Qu et al., 2002; Bai et al., 2005; Le Borgne et al., 2008; Macua et al., 2010; Feldman et al., 2013), but either without theoretical guarantees, or without considering communication.",
      "startOffset" : 87,
      "endOffset" : 188
    }, {
      "referenceID" : 0,
      "context" : "Related Work A number of algorithms for approximate distributed PCA have been proposed (Qu et al., 2002; Bai et al., 2005; Le Borgne et al., 2008; Macua et al., 2010; Feldman et al., 2013), but either without theoretical guarantees, or without considering communication.",
      "startOffset" : 87,
      "endOffset" : 188
    }, {
      "referenceID" : 13,
      "context" : "Related Work A number of algorithms for approximate distributed PCA have been proposed (Qu et al., 2002; Bai et al., 2005; Le Borgne et al., 2008; Macua et al., 2010; Feldman et al., 2013), but either without theoretical guarantees, or without considering communication.",
      "startOffset" : 87,
      "endOffset" : 188
    }, {
      "referenceID" : 6,
      "context" : "Related Work A number of algorithms for approximate distributed PCA have been proposed (Qu et al., 2002; Bai et al., 2005; Le Borgne et al., 2008; Macua et al., 2010; Feldman et al., 2013), but either without theoretical guarantees, or without considering communication.",
      "startOffset" : 87,
      "endOffset" : 188
    }, {
      "referenceID" : 6,
      "context" : "Most closely related to our work is (Feldman et al., 2013), which observes that the top singular vectors of the local point set can be viewed as its summary and the union of the local summaries can be viewed as a summary of the global data, i.",
      "startOffset" : 36,
      "endOffset" : 58
    }, {
      "referenceID" : 9,
      "context" : "In (Kannan et al., 2013) the authors study algorithms in the arbitrary partition model in which each server holds a matrix Pi and P = ∑s i=1 Pi.",
      "startOffset" : 3,
      "endOffset" : 24
    }, {
      "referenceID" : 9,
      "context" : "Moreover, our k-means algorithms are more general, in the sense that they do not make a well-separability assumption, and more efficient in that the communication of (Kannan et al., 2013) is O(sd2) + s(k/ )O(1) words as opposed to our O(sdk/ 2) + sk + (k/ )O(1).",
      "startOffset" : 166,
      "endOffset" : 187
    }, {
      "referenceID" : 7,
      "context" : "Other related work includes the recent (Ghashami and Phillips, 2013) (see also the references therein), who give a deterministic streaming algorithm for low rank approximation in which each point of P is seen one at a time and uses O(dk/ ) words of communication.",
      "startOffset" : 39,
      "endOffset" : 68
    }, {
      "referenceID" : 0,
      "context" : ", 2002; Bai et al., 2005; Le Borgne et al., 2008; Macua et al., 2010; Feldman et al., 2013), but either without theoretical guarantees, or without considering communication. Qu et al. (2002) proposed an algorithm but provided no analysis on the tradeoff between communication and approximation.",
      "startOffset" : 8,
      "endOffset" : 191
    }, {
      "referenceID" : 10,
      "context" : "Speeding up large scale PCA using different versions of subspace embeddings was also considered in (Karampatziakis and Mineiro, 2013), though not in a distributed setting and not for `2-error shape fitting problems.",
      "startOffset" : 99,
      "endOffset" : 133
    }, {
      "referenceID" : 18,
      "context" : "Algorithm disPCA for distributed PCA is suggested in (Qu et al., 2002; Feldman et al., 2013), which consists of a local stage and a global stage.",
      "startOffset" : 53,
      "endOffset" : 92
    }, {
      "referenceID" : 6,
      "context" : "Algorithm disPCA for distributed PCA is suggested in (Qu et al., 2002; Feldman et al., 2013), which consists of a local stage and a global stage.",
      "startOffset" : 53,
      "endOffset" : 92
    }, {
      "referenceID" : 6,
      "context" : "These lead to the following theorem, which is implicit in (Feldman et al., 2013), stating that the algorithm can produce a (1 + )-approximation for the distributed PCA problem.",
      "startOffset" : 58,
      "endOffset" : 80
    }, {
      "referenceID" : 1,
      "context" : "2: Run the distributed k-means clustering algorithm in (Balcan et al., 2013) on {PiEE}i=1, usingAα as a subroutine, to get k centers L.",
      "startOffset" : 55,
      "endOffset" : 76
    }, {
      "referenceID" : 1,
      "context" : "As a concrete example, we can use original data (d′ = d), then run Algorithm disPCA, and finally run the distributed clustering algorithm in (Balcan et al., 2013) which uses any non-distributed α-approximation algorithm as a subroutine and computes a (1 + )α-approximate solution.",
      "startOffset" : 141,
      "endOffset" : 162
    }, {
      "referenceID" : 19,
      "context" : "The work of (Sarlós, 2006) pioneered subspace embeddings.",
      "startOffset" : 12,
      "endOffset" : 26
    }, {
      "referenceID" : 3,
      "context" : "The recent fast sparse subspace embeddings (Clarkson and Woodruff, 2013) and its optimizations (Meng and Mahoney, 2013; Nelson and Nguyên, 2012) are particularly suitable for large scale sparse data sets, since their running time is linear in the number of non-zero entries in the data matrix, and they also preserve the sparsity of the data.",
      "startOffset" : 43,
      "endOffset" : 72
    }, {
      "referenceID" : 14,
      "context" : "The recent fast sparse subspace embeddings (Clarkson and Woodruff, 2013) and its optimizations (Meng and Mahoney, 2013; Nelson and Nguyên, 2012) are particularly suitable for large scale sparse data sets, since their running time is linear in the number of non-zero entries in the data matrix, and they also preserve the sparsity of the data.",
      "startOffset" : 95,
      "endOffset" : 144
    }, {
      "referenceID" : 16,
      "context" : "The recent fast sparse subspace embeddings (Clarkson and Woodruff, 2013) and its optimizations (Meng and Mahoney, 2013; Nelson and Nguyên, 2012) are particularly suitable for large scale sparse data sets, since their running time is linear in the number of non-zero entries in the data matrix, and they also preserve the sparsity of the data.",
      "startOffset" : 95,
      "endOffset" : 144
    }, {
      "referenceID" : 8,
      "context" : "Here we show that the randomized SVD algorithm from (Halko et al., 2011) can be applied to speed up the computation without compromising the quality of the solution much.",
      "startOffset" : 52,
      "endOffset" : 72
    }, {
      "referenceID" : 1,
      "context" : "For k-means, we run the algorithm in (Balcan et al., 2013) (with Lloyd’s method as a subroutine) on the projected data to get a solution.",
      "startOffset" : 37,
      "endOffset" : 58
    }, {
      "referenceID" : 6,
      "context" : "1 in (Feldman et al., 2013).",
      "startOffset" : 5,
      "endOffset" : 27
    }, {
      "referenceID" : 6,
      "context" : "The proof follows that in (Feldman et al., 2013), with slight modification for the distributed setting.",
      "startOffset" : 26,
      "endOffset" : 48
    }, {
      "referenceID" : 3,
      "context" : "Algorithm 4 Fast Sparse Subspace Embedding (Clarkson and Woodruff, 2013) Input: parameters n, ` ∈ N+.",
      "startOffset" : 43,
      "endOffset" : 72
    }, {
      "referenceID" : 3,
      "context" : "(Clarkson and Woodruff, 2013; Meng and Mahoney, 2013; Nelson and Nguyên, 2012) Suppose n > d and ` = O( 2 2 ).",
      "startOffset" : 0,
      "endOffset" : 78
    }, {
      "referenceID" : 14,
      "context" : "(Clarkson and Woodruff, 2013; Meng and Mahoney, 2013; Nelson and Nguyên, 2012) Suppose n > d and ` = O( 2 2 ).",
      "startOffset" : 0,
      "endOffset" : 78
    }, {
      "referenceID" : 16,
      "context" : "(Clarkson and Woodruff, 2013; Meng and Mahoney, 2013; Nelson and Nguyên, 2012) Suppose n > d and ` = O( 2 2 ).",
      "startOffset" : 0,
      "endOffset" : 78
    }, {
      "referenceID" : 8,
      "context" : "Algorithm 6 Randomized SVD (Halko et al., 2011) Input: matrix A ∈ R`×d; parameters t, q ∈ N+.",
      "startOffset" : 27,
      "endOffset" : 47
    }, {
      "referenceID" : 8,
      "context" : "4 in (Halko et al., 2011), with probability at least 1− 3e−t, we have ‖A− Â‖S ≤ 2σt+1(A).",
      "startOffset" : 5,
      "endOffset" : 25
    } ],
    "year" : 2017,
    "abstractText" : "We study the distributed computing setting in which there are multiple servers, each holding a set of points, who wish to compute functions on the union of their point sets. A key task in this setting is Principal Component Analysis (PCA), in which the servers would like to compute a low dimensional subspace capturing as much of the variance of the union of their point sets as possible. Given a procedure for approximate PCA, one can use it to approximately solve problems such as k-means clustering and low rank approximation. The essential properties of an approximate distributed PCA algorithm are its communication cost and computational efficiency for a given desired accuracy in downstream applications. We give new algorithms and analyses for distributed PCA which lead to improved communication and computational costs for k-means clustering and related problems. Our empirical study on real world data shows a speedup of orders of magnitude, preserving communication with only a negligible degradation in solution quality. Some of these techniques we develop, such as a general transformation from a constant success probability subspace embedding to a high success probability subspace embedding with a dimension and sparsity independent of the success probability, may be of independent interest.",
    "creator" : "LaTeX with hyperref package"
  }
}