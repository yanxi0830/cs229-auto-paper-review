{
  "name" : "1206.4674.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Comparison-Based Learning with Rank Nets",
    "authors" : [ "Amin Karbasi", "Stratis Ioannidis" ],
    "emails" : [ "amin.karbasi@epfl.ch", "stratis.ioannidis@technicolor.com", "laurent.massoulie@technicolor.com" ],
    "sections" : [ {
      "heading" : "1. Introduction",
      "text" : "In search through comparisons, a user locates a target object in a database as follows. At each step, the database presents two objects to the user, who then selects among the pair the object closest to the target that she has in mind. This process continues until, based on the user’s answers, the database can uniquely identify the target she has in mind.\nThis kind of interactive navigation, also known as exploratory search, has numerous real-life applications (Marchionini, 2006; Ruthven, 2008), such as navigation in a database of pictures of people photographed in an uncontrolled environment (Tschopp et al., 2011). Automated methods may fail to extract meaningful features from such photos. Even if this were possible, in many practical cases, images with similar\nAppearing in Proceedings of the 29 th International Conference on Machine Learning, Edinburgh, Scotland, UK, 2012. Copyright 2012 by the author(s)/owner(s).\nlow-level descriptors may have very different semantic content, and thus be perceived differently by users (Smeulders et al., 2000; Lew et al., 2006). On the other hand, a human can easily sort images of people w.r.t. their similarity to a given person, and her answers can be used to rank images in the database in terms of this similarity.\nFormally, the human user’s feedback can be modelled as a “comparison oracle” (Goyal et al., 2008). Assuming a database N endowed with a distance metric d, capturing the “distance” or “dissimilarity” between different objects, a comparison oracle answers questions of the kind: “Between two objects x and y in N , which one is closest to t under the metric d?”.\nIn this paper, we study algorithms for identifying an unknown target with as few queries to such an oracle as possible. Most importantly, the algorithms we consider do not rely on a priori knowledge of the distance between objects: they cannot access an embedding of N in a metric space, nor can they compute the distance between two objects. Decisions on which queries to submit to the oracle depend only on (a) ranking relationships between objects, which can indeed be obtained through a comparison oracle and (b) the prior distribution µ from which the target is sampled.\nAs discussed in Section 3.3, content search through comparisons can be framed as an active learning problem. A well-known active learning algorithm is the Generalized Binary Search (GBS) or splitting algorithm (Dasgupta, 2005). Using GBS to submit queries to the oracle locates the target in OPT · ( Hmax(µ)+1 ) queries, where Hmax(µ) = maxx∈supp(µ) log 1 µ(x) and OPT is the number of queries submitted by an optimal algorithm. In practice, GBS performs very well in terms of query complexity, suggesting that this bound can be tightened. However, the computational complexity of GBS is Θ(n3) for n = |N |, which makes it intractable for most large databases.\nRecently, Karbasi et al. (2011) proposed an algorithm that determines the target in O ( c3H(µ)Hmax(µ) ) queries, whose computational complexity is O(1) per query. Here, H(µ) is the entropy of the prior µ and c, defined formally in Section 3.2, is the doubling constant of the prior µ. It captures the dimension of the database, as determined by the underlying distance d (Clarkson, 2006). Karbasi et al. also show that OPT = Ω(cH(µ)), indicating that their algorithm is within a c2Hmax(µ) factor from the optimal.\nWe make the following contributions: First, we propose a new adaptive algorithm, RankNetSearch, locating the target with O(c6H(µ)) queries to the oracle, in expectation. Our algorithm therefore improves on GBS and Karbasi et al. by removing the term Hmax— which can be quite large in practice—at a cost of a higher exponent in the dependence on the constant c. Its computational complexity is O ( n(logn+ c6) log c ) per query, which is manageable compared to GBS; moreover, this cost can be reduced to O(1) by precomputing an additional data structure.\nSecond, we extend RankNetSearch to the case of a faulty oracle that lies with a probability ǫ > 0, and show that it locates the target w.h.p. at an expected query cost O( ∑\nx∈N µ(x) log 1 µ(x) log log(µ(x))\nand, thereby, close to H(µ).\nThird, we evaluate RankNetSearch and prior art algorithms over several datasets. We observe that RankNetSearch establishes a desirable trade-off between query and computational complexity.\nThe remainder of this paper is organized as follows. We overview related work in Section 2, and discuss definitions and preliminaries in Section 3. Our algorithm and the analysis of its complexity are presented in Section 4, and its robustness to noise in Section 5. Section 6 includes our numerical evaluations."
    }, {
      "heading" : "2. Related Work",
      "text" : "Search through comparisons was first introduced by Goyal et al. (2008), and further explored by Lifshitz and Zhang (2009) and Tschopp et al. (2011). The above works study the problem in terms of worst-case (prior-free) bounds, so our work departs in introducing a prior µ and studying query complexity in expectation. All these works introduce a disorder constant, that plays the same role as the quantity c in our setup. Lifshitz and Zhang also employ hierarchical data structures similar to the rank-nets we study here. Our upper bound coincides with theirs when µ is uniform over N and can thus be seen as an extension to the more general Bayesian setting under prior µ.\nCover trees based on nets have been extensively studied in the context of nearest neighbour search (Clarkson, 1999; Beygelzimer et al., 2006). These works too focus on worst-case bounds and, crucially, assume full access to the underlying distance metric d. Our approach thus differs in both of these respects. In earlier work, Fredman (1976) and others have considered decision trees for determining a complete ordering of objects rather than just the first one in the list.\nTo the best of our knowledge, the work closest to our is (Karbasi et al., 2011), which was the first to study search through comparisons in a Bayesian setting. Our work improves their bound by the factor of Hmax and establishes the connection to active learning and GBS."
    }, {
      "heading" : "3. Definitions and Preliminaries",
      "text" : ""
    }, {
      "heading" : "3.1. Search through Comparisons",
      "text" : "Consider a large finite set of objects N of size n = |N |, endowed with a distance metric d, capturing the “dissimilarity” between objects. A user selects a target t ∈ N from a prior distribution µ; our goal will be to design an interactive algorithm that queries the user with the purpose of discovering t.\nComparison Oracle. Though we assume that the metric d exists, our view of distances is constrained to only observing order relationships. More precisely, we only have access to information that can be obtained through a comparison oracle (Goyal et al., 2008). Given object z, a comparison oracleOz receives as a query an ordered pair (x, y) ∈ N 2 and answers the question “is z strictly closer to x than to y?”, i.e.,\nOz(x, y) =\n{\n+1 if d(x, z) < d(y, z), −1 if d(x, z) ≥ d(y, z)\n(1)\nNote that a tie d(x, z) = d(y, z) is revealed by two calls Oz(x, y) and Oz(y, x). Our algorithm for determining the unknown target t can submit queries to a comparison oracle Ot—namely, the user. We thus assume, effectively, that the user can order objects w.r.t. their distance from t, but does not need to disclose (or even know) the exact values of these distances. We will first assume that the oracle always gives correct answers; in Section 5, we relax this assumption by considering a faulty oracle that lies with probability ǫ < 0.5.\nPrior Knowledge and Performance Metrics. The algorithms we study rely only on a priori knowledge of (a) the distribution µ and (b) the values of the mapping Oz : N\n2 → {−1,+1}, for every z ∈ N . This is in line with our assumption that, although the distance metric d exists, it cannot be directly observed.\nOur focus is on adaptive algorithms, whose decision on which query in N 2 to submit next are determined by the oracle’s previous answers.\nThe prior µ can be estimated empirically as the frequency with which objects have been targets in the past. The order relationships can be computed off-line by submitting Θ(n2 logn) queries to a comparison oracle, and requiring Θ(n2) space: for each possible target z ∈ N , objects in N can be sorted w.r.t. their distance from z with Θ(n logn) queries to Oz . We store the result of this sorting in (a) a linked list, whose elements are sets of objects at equal distance from z, and (b) a hash-map, that associates every element y with its rank in the sorted list. Note that Oz(x, y) can thus be retrieved in O(1) time by comparing the relative ranks of x and y with respect to their distance from z.\nWe measure the performance of an algorithm through two metrics. The first is the query complexity, determined by the expected number of queries the algorithm needs to submit to the oracle to determine the target. The second is the computational complexity, determined by the time-complexity of determining the query to submit to the oracle at each step."
    }, {
      "heading" : "3.2. A Lower Bound",
      "text" : "Recall that the entropy of µ is defined as H(µ) = ∑\nx∈supp(µ) µ(x) log 1 µ(x) where supp(µ) is the support of µ. Given an object x ∈ N , let Bx(r) = {y ∈ N : d(x, y) ≤ r} be the closed ball of radius r ≥ 0 around x. Given a set A ⊆ N let µ(A) = ∑\nx∈A µ(x). The doubling constant1 c(µ) of a distribution µ is the minimum c > 0 for which µ(Bx(2R)) ≤ c · µ(Bx(R)), for any x ∈ supp(µ) and any R ≥ 0.\nThe doubling constant has a natural connection to the underlying dimension of the dataset (Clarkson, 2006; Karbasi et al., 2011), as determined by the distance d. Both the entropy and the doubling constant are also inherently connected to content search through comparisons. Karbasi et al. show that any adaptive mechanism for locating a target t must submit at least Ω ( c(µ)H(µ) )\nqueries to the oracle Ot, in expectation. Moreover, they provide an algorithm for determining the target in O ( c3H(µ)Hmax(µ) )\nqueries, where Hmax(µ) = maxx∈supp(µ) log 1 µ(x) ."
    }, {
      "heading" : "3.3. Active Learning",
      "text" : "Search through comparisons can be seen as a special case of active learning (Dasgupta, 2005; Nowak, 2012). In active learning, a hypothesis space H is a set of bi-\n1c relates to the doubling dimension δ through c = 2δ.\nnary valued functions defined over a finite setQ, called the query space. Each hypothesis h ∈ H generates a label from {−1,+1} for every query q ∈ Q. A target hypothesis h∗ is sampled from H according to some prior µ; asking a query q amounts to revealing the value of h∗(q), thereby restricting the possible candidate hypotheses. The goal is to determine h∗ in an adaptive fashion, by asking as few queries as possible.\nIn our setting, the hypothesis space H is the set N , and the query space Q is the set of ordered pairs N 2. The target hypothesis sampled from µ is the unknown target t. Each hypothesis/object z ∈ N is uniquely2 identified by the mapping Oz : N 2 → {−1,+1}, which we have assumed to be a priori known.\nGeneralized Binary Search A well-known algorithm for determining the true hypothesis in the general active-learning setting is the so-called generalized binary search (GBS) or splitting algorithm (Dasgupta, 2005; Nowak, 2012). Define the version space V ⊆ H to be the set of possible hypotheses that are consistent with the query answers observed so far. At each step, GBS selects the query q ∈ Q that minimizes | ∑\nh∈V µ(h)h(q)|. Put differently, GBS selects the query that separates the current version space into two sets of roughly equal probability mass; this leads, in expectation, to the largest reduction in the mass of the version space as possible, so GBS can be seen as a greedy query selection policy.\nA bound on the query complexity of GBS originally obtained by Dasgupta (2005) and recently tightened (w.r.t. constants) by Golovin and Krause (2010) is given by the following theorem:\nTheorem 1. GBS makes at most OPT · ( Hmax(µ)+1 ) queries in expectation to identify hypothesis h∗ ∈ N , were OPT is the minimum expected number of queries made by any adaptive policy.\nGBS in Search through Comparisons. In our setting, the version space V comprises all possible objects in z ∈ N that are consistent with oracle answers given so far. In other words, z ∈ V iff Oz(x, y) = Ot(x, y) for all queries (x, y) submitted to the oracle. Selecting the next query therefore amounts to finding the pair (x, y) ∈ N 2 that minimizes\nf(x, y) = ∣ ∣ ∑ z∈V µ(z)Oz(x, y) ∣ ∣. (2)\nAs the simulations in Section 6 show, the query complexity of GBS is excellent in practice. This suggests\n2Note that, for any two objects/hypotheses z, z′ ∈ N , there exists at least one query in N 2 that differentiates them, namely (z′, z).\nAlgorithm 1 RankNetSearch(Ot) Input: Oracle Ot Output: Target t 1: Let E ← N ; select arbitrary x ∈ E 2: repeat 3: ( R, {By(ry)}y∈R )←RankNet(x,E) 4: Find y∗, the object in R closest to t, using Ot. 5: Let E ← By∗(ry∗) and x← y\n∗; 6: until E is a singleton 7: return y\nAlgorithm 2 RankNet(x,E)\nInput: Root object x, Ball E = Bx(R) Output: ρ-rank net R, Voronoi balls {By(ry)}y∈R 1: ρ ← 1 2: repeat 3: ρ ← ρ/2; construct a ρ-net R of E 4: ∀ y ∈ R, construct ball By(ry) 5: Let I ← {y ∈ E : |By(ry)| > 1} 6: until I = ∅ or maxy∈I µ(By(ry)) ≤ 0.5µ(E) 7: return (R,{By(ry)}y∈R)\nthat the bound of Theorem 1 could be improved in the specific context of search through comparisons.\nNevertheless, the computational complexity of GBS is Θ(n2|V |) operations per query, as it requires minimizing f(x, y) over all pairs in N 2. For large sets N , this can be truly prohibitive. This motivates us to propose a new algorithm, RankNetSearch, whose computational complexity is almost linear and its query complexity is within a O(c5(µ)) factor from the optimal."
    }, {
      "heading" : "4. An Efficient Adaptive Algorithm",
      "text" : "Our algorithm is inspired by ǫ-nets, a structure introduced by Clarkson (1999; 2006) in the context of Nearest Neighbor Search (NNS). The main challenge that we face is that, contrary to standard NNS, we have no access to the underlying distance metric. In addition, the query complexity bounds on ǫ-nets are worst-case (i.e., prior-free); our construction takes the prior µ into account to provide bounds in expectation."
    }, {
      "heading" : "4.1. Rank Nets",
      "text" : "To address the above issues, we introduce the notion of rank nets, which will play the role of ǫ-nets in our setting. For some x ∈ N , consider the ball E = Bx(R) ⊆ N . For any y ∈ E, we define\ndy(ρ,E) = inf{r : µ(By(r)) ≥ ρµ(E)} (3)\nto be the radius of the smallest ball around y that\nmaintains a mass above ρµ(E). Using this definition3, we define a ρ-rank net as follows.\nDefinition 1. For some ρ < 1, a ρ-rank net of E = Bx(r) ⊆ N is a maximal4 set of objects R ⊂ E such that for any two distinct y, y′ ∈ R\nd(y, y′) > min{dy(ρ,E), dy′(ρ,E)}. (4)\nFor any y ∈ R, consider the Voronoi cell Vy = {z ∈ E : d(y, z) ≤ d(y′, z), ∀y′ ∈ R, y′ 6= y}. We also define the radius ry of the Voronoi cell Vy as ry = inf{r : Vy ⊆ By(r)}. Critically, a rank net and the Voronoi tessellation it defines can both be computed using only ordering information:\nLemma 1. A ρ-rank net R of E can be constructed in O(|E|(log |E| + |R|)) steps, and the balls By(ry) ⊂ E circumscribing the Voronoi cells around R can be constructed in O(|E||R|) steps using only (a) µ and (b) the mappings Oz : N 2 → {−1,+1} for every z ∈ E.\nThe proof is in Appendix A. Armed with this result, we turn our attention to how the selection of ρ affects the size of the net as well as the mass of the Voronoi balls around it. Our next lemma, whose proof is in Appendix B, bounds |R|.\nLemma 2. The size of the net R is at most c3/ρ.\nFinally, our last lemma determines the mass of the Voronoi balls in the net.\nLemma 3. If ry > 0 then µ(By(ry)) ≤ c3ρµ(E).\nThe proof is in Appendix C. Note that Lemma 3 does not bound the mass of Voronoi balls of radius zero."
    }, {
      "heading" : "4.2. Rank Net Data Structure and Algorithm",
      "text" : "Rank nets can be used to identify a target t using a comparison oracle Ot as described in Algorithm 1. Initially, a net R covering N is constructed; nodes y ∈ R are compared w.r.t. their distance from t, and the closest to the target is determined, say y∗. Note that this requires submitting |R| − 1 queries to the oracle. The version space V (the set of possible hypotheses) is thus the Voronoi cell Vy∗ , and is a subset of the ball By∗(ry∗). The algorithm then proceeds by limiting the search to By∗(ry∗) and repeating the above process. Note that, at all times, the version space is included in the current ball to be covered by a net. The process terminates when this ball becomes a singleton which, by construction, must contain the target.\n3Whenever ρ and E are unambiguous, we simply write dy rather than dy(ρ,E).\n4I.e., a set to which no more objects can be added.\nA question in the above setup is how to select ρ: by Lemma 3, small values lead to a sharp decrease in the mass of Voronoi balls from one level to the next, hence reaching the target with fewer iterations. On the other hand, by Lemma 2, small values also imply larger nets, leading to more queries to the oracle per iteration. We select ρ in an iterative fashion, as indicated in the pseudocode of Algorithm 2: we repeatedly halve ρ until all non-singleton Voronoi balls By(ry) of the resulting net have a mass bounded by 0.5µ(E). This selection leads to the following bounds on the corresponding query and computational complexity of RankNetSearch:\nTheorem 2. RankNetSearch locates the target by making 4c6(1 +H(µ)) queries to a comparison oracle, in expectation. The cost of determining which query to submit next is O ( n(logn+ c6) log c ) .\nIn light of the Ω(cH(µ)) lower bound on query complexity by Karbasi et al. (2011), RankNetSearch is within a O(c5) factor of the optimal algorithm, and is thus order-optimal for constant c. Moreover, the computational complexity per query is O (\nn(log n+ c6), in contrast to the cubic cost of GBS. As shown in Section 6, in practice, this leads to drastic reductions in the computational costs compared to GBS.\nThe computational complexity can be further reduced to O(1) through amortization. In particular, it is easy to see that the possible paths followed by RankNetSearch define a hierarchy, whereby every object serves as a parent to the rank net of its Voronoi ball. This tree can be pre-constructed, and search reduces descending this tree; we elaborate on this in Section 6."
    }, {
      "heading" : "5. Noisy Comparison Oracle",
      "text" : "In a noisy setting the search must be robust against erroneous answers. Specifically, assume that for any query Ot(x, y), the noisy oracle returns the wrong answer with probability bounded by ǫ, for some ǫ < 1/2, independently of previous answers. In this context, a problem with RankNetSearch arises in line 4 of Algorithm 1: it is not clear how to identify the object closest to the target among elements in a net. We resolve this by introducing repetitions at each iteration. Specifically, at the ℓ-th step of the search, ℓ ≥ 1, and rank-net size m, we define a repetition factor\nkδ(ℓ,m) := 2 log\n( (ℓ+ 1/δ)2⌈log2(m)⌉ )\n(1− ǫ)2 (5)\nfor some design parameter δ ∈ (0, 1). The modified algorithm then proceeds down the hierarchy, starting at the top level for ℓ = 1. The basic step at step ℓ with a netR proceeds as follows. A tournament is organized\namong elements of R, who are initially paired. Pairs of competing members are compared kδ(ℓ, |R|) times. The “player” from a given pair winning the largest number of games moves to the next stage, where it will be paired again with another winner of the first round, and so forth until only one player is left. Note that the number of repetitions kδ(ℓ,m) increases only logarithmically with the level ℓ.\nTo find the closest object to target t with the noiseless oracle, clearly we need to make O(|R|) number of queries. The proposed algorithm achieves the same goal with high probability by making at most a factor 2kδ(ℓ, |R|) more comparisons. In this context we have the following\nTheorem 3. For a comparison oracle with error probability ǫ, the algorithm with repetitions (5) outputs the correct target with probability at least 1 − δ in O( 1\n( 1 2 −ǫ)2\n∑\nx∈N µ(x) log 1 µ(x) log( 1 δ+log 1 µ(x) )) queries,\nwith constants depending on c.\nThe proof is given in Appendix E. For uniform distribution µ(x) ≡ 1/n, for all x ∈ N , this yields an extra log log(n) factor in addition to the term of order H(µ) = log(n) which, by the lower bound by Karbasi et al., is optimal."
    }, {
      "heading" : "6. Numerical Evaluation",
      "text" : "We evaluate RankNetSearch over six publicly available datasets: iris, abalone, ad, faces, swiss roll, and netflix. We subsampled the latter two, taking 1000 randomly selected data points from swiss roll, and the 1000 most rated movies in netflix. We map these datasets to Rd (categorical variables are mapped to binary values in the standard fashion) for d as shown in Fig. 1(a). For netflix, movies were mapped to 50- dimensional vectors by obtaining a low rank approximation of the user/movie rating matrix through SVD. For all experiments, the distance metric d is the ℓ2 distance and the prior µ is power-law with α = 0.4.\nWe evaluated the performance of two versions of RankNetSearch: one as described by Algo. 1, and another one (T-RankNetSearch) in which the hierarchy of rank nets is precomputed and stored as a tree. Both propose exactly the same queries to the oracle, so have the same query complexity; however, TRankNetSearch has only O(1) computational cost per query. The sizes of the trees precomputed by T-RankNetSearch for each dataset are shown in Fig. 1(a).\nWe compare these algorithms to (a) the policy proposed by Karbasi et al. (2011), denoted by Memo-\nryless, and (b) two heuristics based on GBS (the Θ(n3) computational cost of GBS per query makes it intractable over the datasets we consider). The first heuristic, termed F-GBS for fast GBS, selects like GBS the query that minimizes (2); however, it does so by restricting the queries to pairs of objects in the current version space V . This reduces the computational cost per query to Θ(|V |3), rather than Θ(n2|V |). The second heuristic, termed S-GBS for sparse GBS, exploits rank nets as follows. First, we costruct the rank-net hierarchy over the dataset, as in T-RankNetSeach. Then, we minimize (2) restricted only on pairs of objects that appear in the same net. Intuitively, S-GBS assumes that an equitable partition of the objects exists among such pairs.\nQuery vs. Computational Complexity. The query complexity of different algorithms, expressed as average number of queries per search, is shown in Fig. 1(b). Although there are no known guarantees for either F-GBS nor S-GBS both algorithms are excellent in terms of query complexity across all datasets, finding the target within about 10 queries, in expectation. As GBS should perform as well as\nthese algorithms, these suggest that it should also have low query cost. The query complexity of RankNetSearch is between 2 to 10 times higher; the impact is greater for high-dimensional datasets, as expected through the dependence of the rank net size on the c doubling constant. Finally, Memoryless performs worse compared to all other algorithms. As shown in Fig. 1, the above ordering is fully reversed w.r.t. computational costs, measured as the aggregate number of operations performed per search. Differences from one algorithm to the next range between 50 to 100 orders of magnitude. F-GBS requires close to 109 operations in expectation for some datasets; in contrast, RankNetSearch ranges between 100 and 1000 operations and, in conclusion, presents an excellent trade-off between query and computational complexity.\nScalability and Robustness. To study how the above algorithms scale with the dataset size, we also evaluate them on a synthetic dataset comprising objects placed uniformly at random at R3. The query and computational complexity of the five algorithms is shown in Fig. 2(a) and (b).\nWe observe the same discrepancies betwen algorithms we noted in Fig. 1. The linear growth in terms of logn implies a linear relationship between both measures of complexity w.r.t. the entropy H(µ) for all methods (we ommit the relevant figure for lack of space). In Fig. 2(b), we plot the query complexity of the robust RankNetSearch algorithm outlined in Section 5. For all simulations, the target success rate was set to 0.9, but the actual success rates we observed were considerably higher, close to 0.99. We observe that, even for high error rates ǫ, the query complexity remains low. Moreover, the high success rates that we observe, combined with the independence of the cost on n, suggest that we can further reduce the number of queries to lower values than the ones required by (5)."
    }, {
      "heading" : "7. Conclusion",
      "text" : "We presented RankNetSearch, an algorithm that strikes an excellent balance between query and computational costs. Further improving this trade-off, in particular for more general kinds of noise, is an interesting future direction for this line of work. Throughout, we assumed that human inference of proximity is accurately captured by a metric space structure. An interesting research direction is assessing the validity of this assumption through user trials."
    }, {
      "heading" : "A. Proof of Lemma 1",
      "text" : "Using the ordered list containing the sets of equidistant objects described in Section 3.1, for any z ∈ N , we can partitionN into equivalence classesAz1, A z 2, . . . , A z k such that for any two objects y, y′ ∈ N , y ∈ Azi and y′ ∈ Azj with i < j if and only if d(y, z) < d(y ′, z).\nTo construct R, it suffices to show that (4) can be verified for any z, z′ ∈ E using only the above partition and µ. If so, a ρ-rank net can be constructed in a greedy fashion as a maximal set whose points verify (4). This can be obtained by adding sequentially an arbitrary object to the net and excluding from future selections any nodes that violate (4) w.r.t. this newly added object. Indeed, for all y ∈ E, By(dy) = ⋃ℓ\nj=1 A y j , where ℓ = inf{i : ∑i j=1 µ(A y j ) ≥ ρµ(E)}. The statement thus follows as (4) is equivalent to y′ /∈ By(dy) ∨ y /∈ By′(dy′). To construct the Voronoi balls By(ry) ⊆ E, y ∈ R, we initialize each such ball to contain its center y. For each z ∈ E \\R, let jmin be the smallest j such that R ∩ Azj 6= ∅; the object z is then added to the ball By(ry) of every y ∈ N ∩Azjmin .\nFor each y, By(dy) can constructed in O(log |E|) time via binary search on the ordered list of equidistant objects. Constructing the rank net in a greedy fashion requires determining which objects violate (4) w.r.t. a newly added object on the net, which may take O(|E|) time. Hence, the overall complexity of constructing R is O(|E|(|R| + log |E|)). Finally, the construction of the Voronoi balls requires O(|R|) steps per object in E to assign each object to a ball."
    }, {
      "heading" : "B. Proof of Lemma 2",
      "text" : "Note first that, for all distinct y, y′ ∈ R, the balls B(y, dy(ρ,E)/4) ∩B(y′, dy′(ρ,E)/4) = ∅. To see this, assume w.l.o.g. that dy ≥ dy′ which implies that d(y, y′) ≥ dy − dy′ . This is due to the fact that µ(B(y, dy′)) ≥ ρµ(E), and hence, by (3), dy can be at most dy′ + d(y, y ′). In case dy or dy′ is zero, clearly\nd(y, y′) > dy/2 > dy/4+dy′/4. If 0 < dy′ < dy/2, then d(y, y′) > dy/2 ≥ dy/4 + dy′/4.. If dy′ ≥ dy/2 > 0, then d(y, y′) ≥ dy′ ≥ dy/2 > dy/4 + dy′/4.. Hence, in all cases d(y, y′) > dy/4 + dy′/4 and as a result B(y, dy/4) ∩B(y′, dy′/4) = ∅.\nTo prove Lemma 2, observe that dy ≤ 2R for all y ∈ R since µ(y, d) ≥ µ(E) > ρµ(E) for d ≤ 2R. Therefore, dy/4 ≤ R/2 and thus B(y, dy/4) ⊆ B(x, 2R). Hence, by the definition of c(µ), ∑\ny∈R µ(B(y, dy/4)) ≤ µ(B(x, 2R)) ≤ cµ(E). More-\nover, ∑ y∈R µ(B(y, dy/4)) ≥ c −2 ∑ y∈R µ(B(y, dy)) ≥ c−2ρµ(E)|R|. Therefore, |R| ≤ c3/ρ."
    }, {
      "heading" : "C. Proof of Lemma 3",
      "text" : "Observe first that, for all z ∈ E, there exists a y ∈ R such that z ∈ B(y, dy(ρ,E)). To see this, assume otherwise. Then for any y ∈ R, d(z, y) > dy(ρ,E) ≥ min{dy(ρ,E), dz(ρ,E)} and we can add z to R, which contradicts its maximality.\nTo prove Lemma 3, we consider the following two cases. Suppose first 0 < ry ≤ dy. By (3), for any r̃ < dy, we have µ(B(y, r̃) < ρµ(E). In particular, µ(B(y, dy/2) < ρµ(E). By the definition of c, µ(B(y, ry) ≤ µ(B(y, dy) ≤ cρµ(E). For the second case, suppose that ry > dy. Let z ∈ Vy is the point for which d(y, z) = ry. By the above observation, we know that there exists a y′ ∈ R such that d(z, y′) ≤ dy′ . As ry > dy, y 6= y′. On the other hand, d(z, y′) ≥ d(z, y) since z ∈ Vy. Using the triangle inequality, we get d(y, y′) ≤ d(y, z) + d(y′, z) ≤ 2d(y′, z) ≤ 2dy′ . We know that B(y, ry) ⊆ B(y′, d(y, y′) + ry). Since ry = d(y, z) ≤ dy′ we can say B(y, ry) ⊆ B(y′, 3dy′). Finally, by the definition of c, we have µ(B(y, ry)) ≤ µ(B(y′, 3dy′)) ≤ c 2µ(B(y′, dy′)) ≤ c 3ρµ(E)."
    }, {
      "heading" : "D. Proof of Theorem 2",
      "text" : "Note first that, by induction, it can be shown that the version space is a subset of E; correctness is implied by this fact and the termination condition. To bound the number of queries, we first show that the process RankNet constructs a net with small cardinality.\nLemma 4. RankNet terminates at ρ > 14c3 .\nProof. To see that the while loop terminates, observe that, by Lemma 3, for small enough ρ < minz∈E µ(z)/(c\n3µ(E)), all Voronoi balls By(ry) of the ρ-rank net R will be singletons, so I will indeed be empty. Suppose thus that the loop terminates at some ρ = ρ∗. Since it did not terminate at ρ = 2ρ∗, there exists a ball By(ry) of the 2ρ-rank net R such that ry > 0 and µ(By(ry)) > 0.5µ(E). By Lemma 3, µ(By(ry)) ≤ c32ρµ(E), and the lemma follows. Hence, from Lemmas 2 and 4, we get that the rank nets returned by RankNet have cardinality at most\n4c6. On the other hand, by construction, a net covering a ball Byry consists of either singletons or balls with mass less than 0.5µ(By(ry)). As a result, at each iteration, moving to the next object either halves the mass of the version space or leads to a leaf, and the search terminates. As at any point the version space has a mass greater than µ(t), the search will terminate after traversing most ⌈log2(1/µ(t))⌉ iterations. Since, at each level, the number of accesses to the oracle are R − 1 ≤ 4c3, the total query cost for finding target t is at most 4c6⌈log2(1/µ(t)⌉, and the query complexity statement follows. Finally, from Lemmas 1 and 4, the computational complexity of each RankNet call is at most O ( n(logn+ c3) log c ) ."
    }, {
      "heading" : "E. Proof of Theorem 3",
      "text" : "We first show the following auxiliary result.\nLemma 5. Given a target t and a noisy oracle with error probability bounded by ǫ, the tournament among elements of the net R with repetitions kδ(ℓ, |R|) returns the element in the set R that is closest to target t with probability at least 1− (ℓ + 1/δ)−2.\nProof. We assume for simplicity that there are no ties, i.e. there is a unique point in R that is closest to t. The case with ties can be deduced similarly. We first bound the probability p(k) that upon repeating k times queries Ot(x, y), among x and y the one that wins the majority of comparisons is not the closest to t. Because of the bound ǫ on the error probability, one has p(k) ≤ Pr(Bin(k, ǫ) ≥ k/2), where Bin(·, ·) denotes the Binomial distribution. Azuma-Hoeffding inequality ensures that the right-hand side of the above is no larger than exp(−k(1/2 − ǫ)2/2). Upon replacing the number of repetitions k by the expression (5), one finds that p(kδ(ℓ, |R|)) ≤ (ℓ+1/δ)−2/⌈log2(|R|)⌉. Consider now the games to be played by the element within R that is closest to t. There are at most ⌈log2(|R|)⌉ such games. By the union bound, the probability that the closest element loses on any one of these games is no less than (ℓ+ 1/δ)−2, as announced. By the union bound and the previous Lemma we have conditionally on any target t ∈ N that Pr(success|T = t) ≥ 1 − ∑\nℓ≥1(ℓ + 1/δ) −2).\nThe latter sum is readily bounded by δ. The number of comparisons given that the target is T = t is at most ∑⌈log 2 (1/µ(t))⌉\nℓ=1 2|Rℓ|kδ(ℓ, |Rℓ|) =\nO (\n1 ( 1 2 −ǫ)2 log 1µ(t) log( 1 δ + log 1 µ(t) )\n)\n, where the O-\nterm depends only on the doubling constant c. The bound on the expected number of queries follows by averaging over t ∈ N ."
    } ],
    "references" : [ {
      "title" : "Cover trees for nearest neighbor",
      "author" : [ "A. Beygelzimer", "S. Kakade", "J. Langford" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Beygelzimer et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Beygelzimer et al\\.",
      "year" : 2006
    }, {
      "title" : "Nearest-neighbor searching and metric space dimensions. In Nearest-Neighbor Methods for Learning and Vision",
      "author" : [ "K.L. Clarkson" ],
      "venue" : null,
      "citeRegEx" : "Clarkson,? \\Q2006\\E",
      "shortCiteRegEx" : "Clarkson",
      "year" : 2006
    }, {
      "title" : "Nearest neighbor queries in metric spaces",
      "author" : [ "K.L. Clarkson" ],
      "venue" : "Discrete & Computational Geometry,",
      "citeRegEx" : "Clarkson,? \\Q1999\\E",
      "shortCiteRegEx" : "Clarkson",
      "year" : 1999
    }, {
      "title" : "Analysis of a greedy active learning strategy",
      "author" : [ "S. Dasgupta" ],
      "venue" : null,
      "citeRegEx" : "Dasgupta,? \\Q2005\\E",
      "shortCiteRegEx" : "Dasgupta",
      "year" : 2005
    }, {
      "title" : "How good is the information theory bound in sorting",
      "author" : [ "M.L. Fredman" ],
      "venue" : "In Theoretical Computer Science,",
      "citeRegEx" : "Fredman,? \\Q1976\\E",
      "shortCiteRegEx" : "Fredman",
      "year" : 1976
    }, {
      "title" : "Adaptive submodularity: A new approach to active learning and stochastic optimization",
      "author" : [ "D. Golovin", "A. Krause" ],
      "venue" : "In COLT,",
      "citeRegEx" : "Golovin and Krause,? \\Q2010\\E",
      "shortCiteRegEx" : "Golovin and Krause",
      "year" : 2010
    }, {
      "title" : "Disorder inequality: a combinatorial approach to nearest neighbor search",
      "author" : [ "N. Goyal", "Y. Lifshits", "H. Schutze" ],
      "venue" : "In WSDM,",
      "citeRegEx" : "Goyal et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Goyal et al\\.",
      "year" : 2008
    }, {
      "title" : "Content search through comparisons",
      "author" : [ "A. Karbasi", "S. Ioannidis", "L. Massoulié" ],
      "venue" : "In ICALP,",
      "citeRegEx" : "Karbasi et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Karbasi et al\\.",
      "year" : 2011
    }, {
      "title" : "Contentbased multimedia information retrieval: State of the art and challenges",
      "author" : [ "M.S. Lew", "N. Sebe", "C. Djeraba", "R. Jain" ],
      "venue" : "ACM Trans. Multimedia Comput. Commun. Appl.,",
      "citeRegEx" : "Lew et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Lew et al\\.",
      "year" : 2006
    }, {
      "title" : "Combinatorial algorithms for nearest neighbors, near-duplicates and small-world design",
      "author" : [ "Y. Lifshits", "S. Zhang" ],
      "venue" : "In SODA,",
      "citeRegEx" : "Lifshits and Zhang,? \\Q2009\\E",
      "shortCiteRegEx" : "Lifshits and Zhang",
      "year" : 2009
    } ],
    "referenceMentions" : [ {
      "referenceID" : 8,
      "context" : "low-level descriptors may have very different semantic content, and thus be perceived differently by users (Smeulders et al., 2000; Lew et al., 2006).",
      "startOffset" : 107,
      "endOffset" : 149
    }, {
      "referenceID" : 6,
      "context" : "Formally, the human user’s feedback can be modelled as a “comparison oracle” (Goyal et al., 2008).",
      "startOffset" : 77,
      "endOffset" : 97
    }, {
      "referenceID" : 3,
      "context" : "A well-known active learning algorithm is the Generalized Binary Search (GBS) or splitting algorithm (Dasgupta, 2005).",
      "startOffset" : 101,
      "endOffset" : 117
    }, {
      "referenceID" : 7,
      "context" : "Recently, Karbasi et al. (2011) proposed an algorithm that determines the target in O (",
      "startOffset" : 10,
      "endOffset" : 32
    }, {
      "referenceID" : 1,
      "context" : "It captures the dimension of the database, as determined by the underlying distance d (Clarkson, 2006).",
      "startOffset" : 86,
      "endOffset" : 102
    }, {
      "referenceID" : 2,
      "context" : "Cover trees based on nets have been extensively studied in the context of nearest neighbour search (Clarkson, 1999; Beygelzimer et al., 2006).",
      "startOffset" : 99,
      "endOffset" : 141
    }, {
      "referenceID" : 0,
      "context" : "Cover trees based on nets have been extensively studied in the context of nearest neighbour search (Clarkson, 1999; Beygelzimer et al., 2006).",
      "startOffset" : 99,
      "endOffset" : 141
    }, {
      "referenceID" : 2,
      "context" : "Search through comparisons was first introduced by Goyal et al. (2008), and further explored by Lifshitz and Zhang (2009) and Tschopp et al.",
      "startOffset" : 51,
      "endOffset" : 71
    }, {
      "referenceID" : 2,
      "context" : "Search through comparisons was first introduced by Goyal et al. (2008), and further explored by Lifshitz and Zhang (2009) and Tschopp et al.",
      "startOffset" : 51,
      "endOffset" : 122
    }, {
      "referenceID" : 2,
      "context" : "Search through comparisons was first introduced by Goyal et al. (2008), and further explored by Lifshitz and Zhang (2009) and Tschopp et al. (2011). The above works study the problem in terms of worst-case (prior-free) bounds, so our work departs in introducing a prior μ and studying query complexity in expectation.",
      "startOffset" : 51,
      "endOffset" : 148
    }, {
      "referenceID" : 0,
      "context" : "Cover trees based on nets have been extensively studied in the context of nearest neighbour search (Clarkson, 1999; Beygelzimer et al., 2006). These works too focus on worst-case bounds and, crucially, assume full access to the underlying distance metric d. Our approach thus differs in both of these respects. In earlier work, Fredman (1976) and others have considered decision trees for determining a complete ordering of objects rather than just the first one in the list.",
      "startOffset" : 116,
      "endOffset" : 343
    }, {
      "referenceID" : 7,
      "context" : "To the best of our knowledge, the work closest to our is (Karbasi et al., 2011), which was the first to study search through comparisons in a Bayesian setting.",
      "startOffset" : 57,
      "endOffset" : 79
    }, {
      "referenceID" : 6,
      "context" : "More precisely, we only have access to information that can be obtained through a comparison oracle (Goyal et al., 2008).",
      "startOffset" : 100,
      "endOffset" : 120
    }, {
      "referenceID" : 1,
      "context" : "The doubling constant has a natural connection to the underlying dimension of the dataset (Clarkson, 2006; Karbasi et al., 2011), as determined by the distance d.",
      "startOffset" : 90,
      "endOffset" : 128
    }, {
      "referenceID" : 7,
      "context" : "The doubling constant has a natural connection to the underlying dimension of the dataset (Clarkson, 2006; Karbasi et al., 2011), as determined by the distance d.",
      "startOffset" : 90,
      "endOffset" : 128
    }, {
      "referenceID" : 3,
      "context" : "Search through comparisons can be seen as a special case of active learning (Dasgupta, 2005; Nowak, 2012).",
      "startOffset" : 76,
      "endOffset" : 105
    }, {
      "referenceID" : 3,
      "context" : "Generalized Binary Search A well-known algorithm for determining the true hypothesis in the general active-learning setting is the so-called generalized binary search (GBS) or splitting algorithm (Dasgupta, 2005; Nowak, 2012).",
      "startOffset" : 196,
      "endOffset" : 225
    }, {
      "referenceID" : 3,
      "context" : "A bound on the query complexity of GBS originally obtained by Dasgupta (2005) and recently tightened (w.",
      "startOffset" : 62,
      "endOffset" : 78
    }, {
      "referenceID" : 3,
      "context" : "A bound on the query complexity of GBS originally obtained by Dasgupta (2005) and recently tightened (w.r.t. constants) by Golovin and Krause (2010) is given by the following theorem:",
      "startOffset" : 62,
      "endOffset" : 149
    }, {
      "referenceID" : 7,
      "context" : "In light of the Ω(cH(μ)) lower bound on query complexity by Karbasi et al. (2011), RankNetSearch is within a O(c) factor of the optimal algorithm, and is thus order-optimal for constant c.",
      "startOffset" : 60,
      "endOffset" : 82
    }, {
      "referenceID" : 7,
      "context" : "We compare these algorithms to (a) the policy proposed by Karbasi et al. (2011), denoted by Memo-",
      "startOffset" : 58,
      "endOffset" : 80
    } ],
    "year" : 2012,
    "abstractText" : "We consider the problem of search through comparisons, where a user is presented with two candidate objects and reveals which is closer to her intended target. We study adaptive strategies for finding the target, that require knowledge of rank relationships but not actual distances between objects. We propose a new strategy based on rank nets, and show that for target distributions with a bounded doubling constant, it finds the target in a number of comparisons close to the entropy of the target distribution and, hence, of the optimum. We extend these results to the case of noisy oracles, and compare this strategy to prior art over multiple datasets.",
    "creator" : "LaTeX with hyperref package"
  }
}