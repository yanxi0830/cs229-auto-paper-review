{
  "name" : "1709.00155.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Order-Planning Neural Text Generation From Structured Data",
    "authors" : [ "Lei Sha", "Lili Mou", "Tianyu Liu", "Pascal Poupart", "Sujian Li", "Baobao Chang", "Zhifang Sui" ],
    "emails" : [ "szf}@pku.edu.cn", "doublepower.mou@gmail.com,", "ppoupart@uwaterloo.ca" ],
    "sections" : [ {
      "heading" : "Introduction",
      "text" : "Generating texts from structured data (e.g., a table) is important for various natural language processing tasks such as question answering and dialog systems. Table 1 shows an example of a Wikipedia infobox (containing fields and values) and a text summary.\nIn early years, text generation is usually accomplished by human-designed rules and templates (Green 2006; Turner, Sripada, and Reiter 2010), and hence the generated texts are not flexible. Recently, researchers apply neural networks to generate texts from structured data (Lebret, Grangier, and Auli 2016), where a neural encoder captures table information and a recurrent neural network (RNN) decodes these information to a natural language sentence.\nAlthough such neural network-based approach is capable of capturing complicated language and can be trained in an end-to-end fashion, it lacks explicit modeling of content order during text generation. That is to say, an RNN generates a word at a time step conditioned on previous generated words as well as table information, which is more or less “shortsighted” and differs from how a human writer does. As suggested in the book The Elements of Style,\nA basic structural design underlies every kind of writing . . . in most cases, planning must be a deliberate prelude to writing. (William and White 1999)"
    }, {
      "heading" : "Table:",
      "text" : ""
    }, {
      "heading" : "Text:",
      "text" : "This motivates order planning for neural text generation. In other words, a neural network should model not only word order (as has been well captured by RNN) but also the order of contents, i.e., fields in a table.\nWe also observe from real summaries that table fields by themselves provide illuminating clues and constraints of text generation. In the biography domain, for example, the nationality of a person is typically mentioned before the occupation. This could benefit from explicit planning of content order during neural text generation.\nIn this paper, we propose an order-planning method for table-to-text generation. Our model is built upon the encoder-decoder framework and use RNN for text synthesis with attention to table entries. Different from exiting neural models, we design a table field linking mechanism, inspired by temporal memory linkage in the Differentiable Neural Computer (Graves et al. 2016, DNC). Our field linking mechanism explicitly models the relationship between different fields, enabling our neural network to better plan what to say first and what next. Further, we incorporate a copy mechanism (Gu et al. 2016) into our model to cope with rare words.\nWe evaluated our method on the WIKIBIO dataset (Lebret, Grangier, and Auli 2016). Experimental results show that our order-planning approach significantly outperforms\nar X\niv :1\n70 9.\n00 15\n5v 1\n[ cs\n.C L\n] 1\nS ep\n2 01\n7\nprevious state-of-the-art results in terms of BLEU, ROUGE, and NIST metrics. Extensive ablation tests verify the effectiveness of each component in our model; we also perform visualization analysis to better understand the proposed order-planning mechanism."
    }, {
      "heading" : "Approach",
      "text" : "Our model takes as input a table (e.g., a Wikipedia infobox) and generates a natural language summary describing the information based on an RNN. The neural network contains three main components:\n• An encoder captures table information; • A dispatcher—a hybrid content- and linkage-based atten-\ntion mechanism over table contents—plans what to generate next; and\n• A decoder generates a natural language summary using RNN, where we also incorporate a copy mechanism (Gu et al. 2016) to cope with rare words.\nWe elaborate these components in the rest of this section."
    }, {
      "heading" : "Encoder: Table Representation",
      "text" : "We design a neural encoder to represent table information. As shown in Figure 1, the content of each field is split into separate words and the entire table is transformed into a large sequence. Then we use a recurrent neural network (RNN) with long short term memory (LSTM) units (Hochreiter and Schmidhuber 1997) to read the contents as well as their corresponding field names.\nConcretely, let C be the number of content words in a table; let ci and fi be the embeddings of a content and its corresponding field, respectively (i = 1 · · ·C). The input of LSTM-RNN is the concatenation of fi and ci, denoted as xi = [fi; ci], and the output, denoted as hi, is the encoded information corresponding to a content word, i.e.,[\ngin; gforget; gout ] = σ(Wgxi + Ughi−1) (1)\nx̃i = tanh(Wxxi + Uxhi−1) (2)\nh̃i = gin ◦ x̃i + gforget ◦ h̃i−1 (3)\nhi = gout ◦ tanh(h̃i) (4)\nwhere ◦ denotes element-wise product, and σ denotes the sigmoid function. W ’s and U ’s are weights, and bias terms are omitted in the equations for clarity. gin, gforget, and gout are known as input, forget, and output gates.\nNotice that, we have two separate embedding matrices for fields and content words. We observe the field names of different data samples mostly come from a fixed set of candidates, which is reasonable in a particular domain. Therefore, we assign an embedding to a field, regardless of the number of words in the field name. For example, the field Notable work in Table 1 is represented by a single field embedding instead of the embeddings of notable and work.\nFor content words, we represent them with conventional word embeddings (which are randomly initialized), and use LSTM-RNN to integrate information. In a table, some fields contain a sequence of words (e.g., Name=“Arthur Ignatius\n(a) Encoder (b) Dispatcher Table Representation Planning What to Generate Next\nConan Doyle”), whereas other fields contain a set of words (e.g., Occupation = “writer, physician”). We do not have much human engineering here, but let an RNN to capture such subtlety by itself."
    }, {
      "heading" : "Dispatcher: Planning What to Generate Next",
      "text" : "After encoding table information, we use another RNN to decode a natural language summary (deferred to the next part). During the decoding process, the RNN is augmented with a dispatcher that plans what to generate next.\nGenerally, a dispatcher is an attention mechanism over table contents. At each decoding time step t, the dispatcher computes a probabilistic distribution αt,i (i = 1 · · ·C), which is further used for weighting content representations hi. In our model, the dispatcher is a hybrid of contentand link-based attention, discussed in detail as follows.\nContent-Based Attention. Traditionally, the computation of attention αt,i is based on the content representation hi as well as some state during decoding (Bahdanau, Cho, and Bengio 2015; Mei, Bansal, and Walter 2016). We call this content-based attention, which is also one component in our dispatcher.\nSince both the field name and the content contain important clues for text generation, we compute the attention weights based on not only the encoded vector of table content hi but also the field embedding fi, thus obtaining the final attention αcontentt,i by re-weighting one with the other.\nFormally, we have\nα̃ (f) t,i = f > i ( W (f)yt−1 + b (f) )\n(5)\nα̃ (c) t,i = h > i ( W (c)yt−1 + b (c) )\n(6)\nαcontentt,i = exp\n{ α̃ (f) t,i α̃ (c) t,i }∑C j=1 exp { α̃ (f) t,j α̃ (c) t,j\n} (7) where W (f), b(f),W (c), b(c) are learnable parameters; fi and hi are vector representations of the field name and encoded content, respectively, for the ith row. αcontentt,i is the content-based attention weights. Ideally, a larger contentbased attention indicates a more relevant content to the last generated word.\nLink-Based Attention. We further propose a link-based attention mechanism that directly models the relationship between different fields.\nOur intuition stems from the observation that, a wellorganized text typically has a reasonable order of its contents. As illustrated previously, the nationality of a person is often mentioned before his occupation (e.g., a British writer). Therefore, we propose an link-based attention to explicitly model such order information.\nWe construct a link matrix L ∈ Rnf×nf , where nf is the number possible field names in the dataset. An element L [fj , fi] is a real-valued score indicating how likely the field fj is mentioned after the field fi. (Here, [·, ·] indexes a matrix.) The link matrix L is a part of model parameters and learned by backpropagation. Although the link matrix appears to be large in size (1475×1475), a large number of its elements are not used because most fields do not co-occur in at least one data sample; in total, we have 53422 effective parameters here. In other scenarios, low-rank approximation may be used to reduce the number of parameters.\nFormally, let αt−1,i (i = 1 . . . C) be an attention probability1 over table contents in the last time step during generation. For a particular data sample whose content words are of fields f1, f2, · · · , fC , we first weight the linking scores by the previous attention probability, and then normalize the weighted score to obtain link-based attention probability, given by\nαlinkt,i = softmax { C∑\nj=1\nαt−1,j ·L [fj , fi] }\n(8)\n= exp\n{∑C j=1 αt−1,j ·L [fj , fi′ ] }∑C i′=1 exp {∑ j αt−1,j ·L [fj , fi′ ]\n} (9) Intuitively, the link matrix is analogous to the transition matrix in a Markov chain (Karlin 2014), whereas the term∑C j=1 αt−1,j · L [fj , fi] is similar to one step of transition in the Markov chain. However, in our scenario, a table in a particular data sample contains only a few fields, but a field may occur several times because it contains more than one\n1Here, αt−1,i refers to the hybrid content- and link-based attention, which will be introduced shortly.\ncontent words. Therefore, we do not require our link matrix L to be a probabilistic distribution in each row, but normalize the probability afterwards by Equation 9, which turns out to work well empirically.\nBesides, we would like to point out that the link-based attention is inspired by the Differentiable Neural Computer (Graves et al. 2016, DNC). DNC contains a “linkagebased addressing” mechanism to track consecutively used memory slots and thus to integrate order information during memory addressing. Likewise, we design the link-based attention to capture the temporal order of different fields. But different from the linking strength heuristically defined in DNC, the link matrix in our model is directly parameterized and trained in an end-to-end manner.\nHybrid Attention. To combine the above two attention mechanisms, we use a self-adaptive gate zt ∈ (0, 1) by a sigmoid unit\nzt = σ ( w>[h′t−1; e (f) t ;yt−1] ) (10)\nwhere w is a parameter vector. h′t−1 is the last step’s hidden state of the decoder RNN. yt−1 is the embedding of the word generated in the last step; e(f)t is the sum of field embeddings fi weighted by the current step’s field attention αlinkt,i . As yt−1 and e (f) t emphasize the content and link aspects, respectively, the self-adaptive gate z is aware of both. In practice, we find z tends to address link-based attention too much and thus adjust it by z̃t = 0.2zt + 0.5 empirically.\nFinally, the hybrid attention, a probabilistic distribution over all content words, is given by\nαhybridt = z̃t ·αcontentt + (1− z̃t) ·αlinkt (11)"
    }, {
      "heading" : "Decoder: Sentence Generation",
      "text" : "The decoder is an LSTM-RNN that predicts target words in sequence. We also have an attention mechanism (Bahdanau, Cho, and Bengio 2015) that summarizes source information, i.e., the table in our scenario, by weighted sum, yielding an attention vector at by\nat = C∑ i=1 αhybridt,i hi (12)\nwhere hi is the hidden representation obtained by the table encoder. As αhybridt,i is a probabilistic distribution— determined by both content and link information—over content words, it enables the decoder RNN to focus on relevant information at a time, serving as an order-planning mechanism for table-to-text generation.\nThen we concatenate the attention vector at and the embedding of the last step’s generated word yt−1, and use a single-layer neural network to mix information before feeding to the decoder RNN. In other words, the decoder RNN’s input (denoted as xt) is\nxt = tanh(Wd[at;yt−1] + bd) (13)\nwhere Wd and bd are weights. Similar to Equations 1–4, at a time step t during decoding, the decoder RNN yields a"
    }, {
      "heading" : "Decoder",
      "text" : "hidden representation h′t, based on which a score function sLSTM is computed suggesting the next word to generate. The score function is computed by\nsLSTMt =Wsh ′ t + bs (14)\nwhere h′t is the decoder RNN’s state. (Ws and bs are weights.) The score function can be thought of as the input of a softmax layer for classification before being normalized to a probabilistic distribution. We incorporate a copy mechanism (Gu et al. 2016) into our approach, and the normalization is accomplished after considering a copying score, introduced as follows.\nCopy Mechanism. The copy mechanism scores a content word ci by its hidden representation hi in the encoder side, indicating how likely the content word ci is directly copied during target generation. That is,\nst,i = σ(h > i Wc)h ′ t (15)\nand st,i is a real number for i = 1, · · · , C (the number of content words). HereWc is a parameter matrix, and h′ is the decoding state.\nIn other words, when a word appears in the table content, it has a copying score computed as above. If a wordw occurs multiple times in the table contents, the scores are added, given by\nscopyt (w) = C∑ i=1 st,i · 1{ci=w} (16)\nwhere 1{ci=w} is a Boolean variable indicating whether the content word ci is the same as the word w we are considering.\nFinally, the LSTM score and the copy score are added for a particular word and further normalized to obtain a probabilistic distribution, given by\nst(w) = s LSTM t (w) + s copy t (w) (17) pt(w) = softmax (st(w)) = exp{st(w)}∑\nw′∈V ⋃ C exp{st(w′)}\n(18)\nwhere V refers to the vocabulary list and C refers to the set of content words in a particular data sample. In this way, the copy mechanism can either generate a word from the vocabulary or directly copy a word from the source side. This is hepful in our scenario because some fields in a table (e.g., Name) may contain rare or unseen words and the copy mechanism can cope with them naturally.\nFor simplicity, we use greedy search during inference, i.e., for each time step t, the word with the largest probability is chosen, given by yt = argmaxw pt(w). The decoding process terminates when a special symbol <eos> is generated, indicating the end of a sequence."
    }, {
      "heading" : "Training Objective",
      "text" : "Our training objective is the negative log-likelihood of a sentence y1 · · · yT in the training set.\nJ = − T∑\nt=1\nlog p(yt|y0 · · · yt−1) (19)\nwhere p(yt|·) is computed by Equation 18. An `2 penalty is also added as most other studies.\nSince all the components described above are differentiable, our entire model can be trained end-to-end by backpropagation, and we use Adam (Kingma and Ba 2015) for optimization.\nExperiments"
    }, {
      "heading" : "Dataset",
      "text" : "We used the newly published WIKIBIO dataset (Lebret, Grangier, and Auli 2016),2 which contains 728,321 biographies from WikiProject Biography3 (originally from English Wikipedia, September 2015).\nEach data sample comprises an infobox table of fieldcontent pairs, being the input of our system. The generation target is the first sentence in the biography, which follows the setting in previous work (Lebret, Grangier, and Auli 2016). Although only the first sentence is considered in the experiment, the sentence typically serves as a summary of the article. In fact, the target sentence has 26.1 tokens on average, which is actually long. Also, the sentence contains information spanning multiple fields, and hence our order-planning mechanism is useful in this scenario.\n2https://github.com/DavidGrangier/ wikipedia-biography-dataset\n3https://en.wikipedia.org/wiki/Wikipedia: WikiProject_Biography\nWe applied the standard data split: 80% for training and 10% for testing, except that model selection was performed on a validaton subset of 1000 samples (based on BLEU-4)."
    }, {
      "heading" : "Settings",
      "text" : "We decapitalized all words and kept a vocabulary size of 20,000 for content words and generation candidates, which also followed previous work (Lebret, Grangier, and Auli 2016). Even with this reasonably large vocabulary size, we had more than 900k out-of-vocabulary words. This rationalizes the use of the copy mechanism.\nFor the names of table fields, we treated each as a special token. By removing nonsensical fields whose content is “none” and grouping fields occurring less than 100 times as an “Unknown” field, we had 1475 different field names in total.\nIn our experiments, both words’ and table fields’ embeddings were 400-dimensional and LSTM layers were 500- dimensional. Notice that, a field (e.g., “name”) and a content/generation word (e.g., also “name”), even with the same string, were considered as different tokens; hence, they had different embeddings. We randomly initialized all embeddings, which are tuned during training.\nWe used Adam (Kingma and Ba 2015) as the optimization algorithm with a batch size of 32; other hyperparameters were set to default values."
    }, {
      "heading" : "Baselines",
      "text" : "We compared our model with previous results using either traditional language models or neural networks.\n• KN and Template KN (Heafield et al. 2013): Lebret, Grangier, and Auli (2016) train an interpolated KneserNey (KN) language model for comparison with the KenLM toolkit. They also train a KN language model with templates.\n• Table NLM: Lebret, Grangier, and Auli (2016) propose an RNN-based model with attention and copy mechanisms. They have several model variants, and we quote the highest reported results.\nWe report model performance in terms of several metrics, namely BLEU-4, ROUGE-4, and NIST-4, which are computed by standard software, NIST mteval-v13a.pl (for BLEU and NIST) and MSR rouge-1.5.5 (for ROUGE). We did not include the perplexity measure in Lebret, Grangier,\nand Auli (2016) because the copy mechanism makes the vocabulary size vary among data samples, and thus the perplexity is not comparable among different approaches."
    }, {
      "heading" : "Results",
      "text" : "Overall Performance. Table 2 compares the overall performance with previous work. We see that, modern neural networks are considerably better than traditional KN models with or without templates. Moreover, our base model (with content-attention only) outperforms Lebret, Grangier, and Auli (2016), showing our better engineering efforts. After adding up all proposed components, we obtain +2.5 BLEU and ROUGE improvement and +0.3 NIST improvement, achieving new state-of-the-art results.\nAblation Test. Table 3 provides an extensive ablation test to verify the effectiveness of each component in our model. The top half of the table shows the results without the copy mechanism, and the bottom half incorporates the copying score as described previously. We observe that the copy mechasnim is consistently effective with different types of attention.\nWe then compare content-based attention and link-based attention, as well as their hybrid (also Table 3). The results show that, link-based attention alone is not as effective as content-based attention. However, we achieve better performance if combining them together with an adaptive gate, i.e., the proposed hybrid attention. The results are consistent in both halves of Table 3 (with or without copying) and in terms of all metrics (BLEU, ROUGE, and NIST). This implies that content-based attention and link-based attention do capture different aspects of information, and their hybrid is more suited to the task of table-to-text generation.\nEffect of the gate. We are further interested in the effect of the gate z, which balances content-based attentionαcontent\nand link-based attention αlink. As defined in Equation 11, the computation of z depends on the decoding state as well as table information; hence it is “self-adaptive.” We would like to verify if such adaptiveness is useful. To verify this, we designed a controlled experiment where the gate z was manually assigned in advance and fixed during training. In other words, the setting was essentially a (fixed) interpolation betweenαcontent andαlink. Specifically, we tuned z from 0 to 1 with a granularity of 0.1, and plot BLEU scores as the comparison metric in Figure 3.\nAs seen, interpolation of content- and link-based attention is generally better than either single mechanism, which again shows the effectiveness of hybrid attention. However, the peak performance of simple interpolation (42.89 BLEU when z = 0.4) is worse than the self-adaptive gate, implying that our gating mechanism can automatically adjust the importance of αcontent and αlink at a particular time based on the current state and input.\nDifferent Ways of Using Field Information. We are curious whether the proposed order-planning mechanism is better than other possible ways of using field information. We conducted two controlled experiments as follows. Similar to the proposed approach, we multiplied the attention probability by a field matrix and thus obtained a weighted field embedding. We fed it to either (1) the computation of content-based attention, i.e., Equations 5–6, or (2) the RNN decoder’s input, i.e., Equation 13. In both cases, the last step’s weighted field embedding was concatenated with the embedding of the generated word yt−1.\nFrom Table 4, we see that feeding field information to the computation ofαcontent interferes content attention and leads to performance degradation, and that feeding it to decoder RNN slightly improves model performance. However, both controlled experiments are worse than the proposed method. The results confirm that our order-planning mechanism is indeed useful in modeling the order of fields, outperforming several other approaches that use the same field information in a naı̈ve fashion."
    }, {
      "heading" : "Case Study and Visualization",
      "text" : "We showcase an example in Table 5. With only contentbased attention, the network is confused about when the\nword American is appropriate in the sentence, and corrupts the phrase former governor of the federal reserve system as appears in the reference. However, when link-based attention is added, the network is more aware of the order between fields “Nationality” and “Occupation,” and generates the nationality American before the occupation economist. This process could also be visualized in Figure 4. Here, we plot our model’s content-based attention, link-based attention and their hybrid. (The content- and link-based attention probabilities may be different from those separately trained in the ablation test.) After generating “emmett john rice ( december 21, 1919 – march 10, 2011 ) was,” content-based attention skips the nationality and focuses more on the occupation. Link-based attention, on the other hand, provides a strong clue suggesting to generate the nationality first and then occupation. In this way, the obtained sentence is more compliant with conventions."
    }, {
      "heading" : "Related Work",
      "text" : "Text generation has long aroused interest in the NLP community due to is wide applications including automated navigation (Dale, Geldof, and Prost 2003) and weather forecasting (Reiter et al. 2005). Traditionally, text generation can be divided into several steps (Stent, Prassad, and Walker 2004): content planning defines what information should be conveyed in the generated sentence; (2) sentence planning determines what to generate in each sentence; and (3) surface realization actually generates those sentences with words.\nIn early years, surface realization is often accomplished by templates (Van Deemter, Theune, and Krahmer 2005) or statistically learned (shallow) models, e.g., probabilistic context-free grammar (Belz 2008) and language models (Angeli, Liang, and Klein 2010), with hand-crafted features or rules. Therefore, these methods are weak in terms of the quality of generated sentences. For planning, researchers also apply (shallow) machine learning approaches. Barzilay and Lapata (2005), for example, model it as a collective classification problem, whereas Liang, Jordan, and Klein (2009) use a generative semi-Markov model to align text segment and assigned meanings. Generally, planning and realization in the above work are separate and have difficulty in capturing the complexity of language due to the nature of shallow models.\nRecently, the recurrent neural network (RNN) is playing a key role in natural language generating. As RNN can au-\ntomatically capture highly complicated patterns during endto-end training, it has successful applications including machine translation (Bahdanau, Cho, and Bengio 2015), dialog systems (Shang, Lu, and Li 2015), and text summarization (Tan, Wan, and Xiao 2017).\nResearchers are then beginning to use RNN for text generation from structured data. Mei, Bansal, and Walter (2016) propose a coarse-to-fine grained attention mechanism that selects one or more records (e.g., a piece of weather forecast) by a precomputed but fixed probability and then dynamically attends to relevant contents during decoding. Lebret, Grangier, and Auli (2016) incorporate the copy mechanism (Gu et al. 2016) into the generation process. However, the above approaches do not explicitly model the order of contents. It is also nontrivial to combine traditional planning techniques to such end-to-end learned RNN.\nOur paper proposes an order-planning approach by designing a hybrid of content- and link-based attention. The model is inspired by hybrid content- and location-based addressing in the Differentiable Neural Computer (Graves et al. 2016, DNC), where the location-based addressing is defined heuristically. Instead, we propose a transition-like link matrix that models how likely a field is mentioned after another, which is more suited in our scenario.\nMoreover, our entire model is differentiable, and thus the planning and realization steps in traditional language generation can be learned end-to-end in our model."
    }, {
      "heading" : "Conclusion and Future Work",
      "text" : "In this paper, we propose an order-planning neural network that generates texts from a table (Wikipedia infobox). The text generation process is built upon an RNN with attention to table contents. Different from traditional content-based attention, we explicitly model the order of contents by a link matrix, based on which we compute a link-based attention. Then a self-adaptive gate balances the content- and link-based attention mechanisms. We further incorporate a copy mechanism to our model to cope with rare or unseen words.\nWe evaluated our approach on a newly proposed large scale dataset, WIKIBIO. Experimental results show that we outperform previous results by a large margin in terms of BLEU, ROUGE, and NIST scores. We also had extensive ablation test showing the effectiveness of the copy mechanism, as well as the hybrid attention of content and linking information. We compared our order-planning mechanism with other possible ways of modeling field; the results confirm that the proposed method is better than feeding field embedding to the network in a naı̈ve fashion. Finally we provide a case study and visualize the attention scores so as to better understand our model.\nIn future work, we would like to deal with text generation from multiple tables. In particular, we would design hierarchical attention mechanisms that can first select a table containing the information and then select a field for generation, which would improve the attention efficiency. We would also like to apply the proposed method to text generation from other structured data, e.g., a knowledge graph."
    }, {
      "heading" : "Acknowledgments",
      "text" : "We thank Jing He from AdeptMind.ai for helpful discussions on different ways of using field information."
    } ],
    "references" : [ {
      "title" : "A simple domain-independent probabilistic approach to generation",
      "author" : [ "Liang Angeli", "G. Klein 2010] Angeli", "P. Liang", "D. Klein" ],
      "venue" : "In Proceedings of the Conference on Empirical Methods in Natural Language Processing,",
      "citeRegEx" : "Angeli et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Angeli et al\\.",
      "year" : 2010
    }, {
      "title" : "Neural machine translation by jointly learning to align and translate",
      "author" : [ "Cho Bahdanau", "D. Bengio 2015] Bahdanau", "K. Cho", "Y. Bengio" ],
      "venue" : "In Proceedings of the International Conference on Learning Representations",
      "citeRegEx" : "Bahdanau et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Bahdanau et al\\.",
      "year" : 2015
    }, {
      "title" : "and Lapata",
      "author" : [ "R. Barzilay" ],
      "venue" : "M.",
      "citeRegEx" : "Barzilay and Lapata 2005",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "CORAL: Using natural language generation for navigational assistance",
      "author" : [ "Geldof Dale", "R. Prost 2003] Dale", "S. Geldof", "J.-P. Prost" ],
      "venue" : "In Proceedings of the 26th Australasian Computer Science Conference,",
      "citeRegEx" : "Dale et al\\.,? \\Q2003\\E",
      "shortCiteRegEx" : "Dale et al\\.",
      "year" : 2003
    }, {
      "title" : "Hybrid computing using a neural network with dynamic external memory",
      "author" : [ "Graves" ],
      "venue" : "Nature",
      "citeRegEx" : "Graves,? \\Q2016\\E",
      "shortCiteRegEx" : "Graves",
      "year" : 2016
    }, {
      "title" : "V",
      "author" : [ "J. Gu", "Z. Lu", "H. Li", "Li" ],
      "venue" : "O.",
      "citeRegEx" : "Gu et al. 2016",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "J",
      "author" : [ "K. Heafield", "I. Pouzyrevsky", "Clark" ],
      "venue" : "H.; and Koehn, P.",
      "citeRegEx" : "Heafield et al. 2013",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "and Schmidhuber",
      "author" : [ "S. Hochreiter" ],
      "venue" : "J.",
      "citeRegEx" : "Hochreiter and Schmidhuber 1997",
      "shortCiteRegEx" : null,
      "year" : 1997
    }, {
      "title" : "and Ba",
      "author" : [ "D. Kingma" ],
      "venue" : "J.",
      "citeRegEx" : "Kingma and Ba 2015",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Neural text generation from structured data with application to the biography domain",
      "author" : [ "Grangier Lebret", "R. Auli 2016] Lebret", "D. Grangier", "M. Auli" ],
      "venue" : "In Proceedings of the Conference on Empirical Methods in Natural Language Processing,",
      "citeRegEx" : "Lebret et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Lebret et al\\.",
      "year" : 2016
    }, {
      "title" : "M",
      "author" : [ "Liang, P.", "Jordan" ],
      "venue" : "I.; and Klein, D.",
      "citeRegEx" : "Liang. Jordan. and Klein 2009",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "M",
      "author" : [ "H. Mei", "M. Bansal", "Walter" ],
      "venue" : "R.",
      "citeRegEx" : "Mei. Bansal. and Walter 2016",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Choosing words in computer-generated weather forecasts",
      "author" : [ "Reiter" ],
      "venue" : "Artificial Intelligence",
      "citeRegEx" : "Reiter,? \\Q2005\\E",
      "shortCiteRegEx" : "Reiter",
      "year" : 2005
    }, {
      "title" : "Neural responding machine for short-text conversation",
      "author" : [ "Lu Shang", "L. Li 2015] Shang", "Z. Lu", "H. Li" ],
      "venue" : "In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing,",
      "citeRegEx" : "Shang et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Shang et al\\.",
      "year" : 2015
    }, {
      "title" : "Trainable sentence planning for complex information presentations in spoken dialog systems",
      "author" : [ "Prassad Stent", "A. Walker 2004] Stent", "R. Prassad", "M. Walker" ],
      "venue" : "In Proceedings of the 42nd Meeting of the Association for Computational Linguistics,",
      "citeRegEx" : "Stent et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Stent et al\\.",
      "year" : 2004
    }, {
      "title" : "Abstractive document summarization with a graphbased attentional neural model",
      "author" : [ "Wan Tan", "J. Xiao 2017] Tan", "X. Wan", "J. Xiao" ],
      "venue" : "In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics,",
      "citeRegEx" : "Tan et al\\.,? \\Q2017\\E",
      "shortCiteRegEx" : "Tan et al\\.",
      "year" : 2017
    }, {
      "title" : "Generating approximate geographic descriptions",
      "author" : [ "Sripada Turner", "R. Reiter 2010] Turner", "S. Sripada", "E. Reiter" ],
      "venue" : "In Empirical Methods in Natural Language Generation,",
      "citeRegEx" : "Turner et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Turner et al\\.",
      "year" : 2010
    }, {
      "title" : "Real versus template-based natural language generation: A false opposition? Computational Linguistics 31(1):15–24",
      "author" : [ "Theune Van Deemter", "K. Krahmer 2005] Van Deemter", "M. Theune", "E. Krahmer" ],
      "venue" : null,
      "citeRegEx" : "Deemter et al\\.,? \\Q2005\\E",
      "shortCiteRegEx" : "Deemter et al\\.",
      "year" : 2005
    }, {
      "title" : "E",
      "author" : [ "S. William", "White" ],
      "venue" : "B.",
      "citeRegEx" : "William and White 1999",
      "shortCiteRegEx" : null,
      "year" : 1999
    } ],
    "referenceMentions" : [ ],
    "year" : 2017,
    "abstractText" : "Generating texts from structured data (e.g., a table) is important for various natural language processing tasks such as question answering and dialog systems. In recent studies, researchers use neural language models and encoder-decoder frameworks for table-to-text generation. However, these neural network-based approaches do not model the order of contents during text generation. When a human writes a summary based on a given table, he or she would probably consider the content order before wording. In a biography, for example, the nationality of a person is typically mentioned before occupation in a biography. In this paper, we propose an order-planning text generation model to capture the relationship between different fields and use such relationship to make the generated text more fluent and smooth. We conducted experiments on the WIKIBIO dataset and achieve significantly higher performance than previous methods in terms of BLEU, ROUGE, and NIST scores.",
    "creator" : "LaTeX with hyperref package"
  }
}