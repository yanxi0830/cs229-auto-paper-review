{
  "name" : "1602.07415.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Ensuring Rapid Mixing and Low Bias for Asynchronous Gibbs Sampling",
    "authors" : [ "Christopher De Sa", "Kunle Olukotun" ],
    "emails" : [ "cdesa@stanford.edu", "kunle@stanford.edu", "chrismre@stanford.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n60 2.\n07 41\n5v 1\n[ cs\n.L G\n] 2\n4 Fe"
    }, {
      "heading" : "1 Introduction",
      "text" : "Gibbs sampling is one of the most common Markov Chain Monte Carlo methods used with graphical models Koller & Friedman (2009). In this setting, Gibbs sampling (Algorithm 1) operates iteratively by choosing at random a variable from the model at each timestep, and updating it by sampling from its conditional distribution given the other variables in the model. Often, it is applied to inference problems, in which we are trying to estimate the marginal probabilities of some query events in a given distribution.\nAlgorithm 1 Gibbs sampling Require: Variables xi for 1 ≤ i ≤ n, and distribution π.\nfor t = 1 to T do Sample s uniformly from {1, . . . , n}. Re-sample xs uniformly from Pπ(Xs|X{1,...,n}\\{s}). end for\nFor sparse graphical models, to which Gibbs sampling is often applied, each of these updates needs to read the values of only a small subset of the variables; therefore each update can be computed very quickly on modern hardware. Because of this and other useful properties of Gibbs sampling, many systems use Gibbs sampling to perform inference on big data Newman et al. (2007); Lunn et al. (2009); McCallum et al. (2009); Smola & Narayanamurthy (2010); Theis et al. (2012); Zhang & Ré (2014).\nSince Gibbs sampling is such a ubiquitous algorithm, it is important to try to optimize its execution speed on modern hardware. Unfortunately, while modern computer hardware has been trending towards more parallel architectures Sutter (2005), traditional Gibbs sampling is an inherently sequential algorithm; that is, the outer loop in Algorithm 1 is not embarrassingly parallel. Furthermore, for sparse models, very little work happens within each iteration, meaning it is difficult to extract much parallelism from the body of this outer loop. Since traditional Gibbs sampling parallelizes so poorly, it is interesting to study variants of Gibbs sampling that can be parallelized. Several such variants have been proposed, including applications to latent Dirichlet allocation Newman et al. (2007); Smola & Narayanamurthy (2010) and distributed constraint optimization problems Nguyen et al. (2013).\nIn one popular variant, multiple threads run the Gibbs sampling update rule in parallel without locks, a strategy called asynchronous or HOGWILD! execution—in this paper, we use these two terms interchangeably. This idea was\nproposed, but not analyzed theoretically, in Smola & Narayanamurthy (2010), and has been shown to give empirically better results on many models Zhang & Ré (2014). But when can we be sure that HOGWILD! Gibbs sampling will produce accurate results? Except for the case of Gaussian random variables Johnson et al. (2013), there is no existing analysis by which we can ensure that asynchronous Gibbs sampling will be appropriate for a particular application. Even the problems posed by HOGWILD!-Gibbs are poorly understood, and their solutions more so.\nAs we will see in the following sections, there are two main issues when analyzing asynchronous Gibbs sampling. Firstly, we will show by example that, surprisingly, HOGWILD!-Gibbs can be biased—unlike sequential Gibbs, it does not always produce samples that are arbitrarily close to the target distribution. Secondly, we will show that the mixing time (the time for the chain to become close to its stationary distribution) of asynchronous Gibbs sampling can be at worst exponentially greater than that of the corresponding sequential chain.\nTo address the issue of bias, we need some way to describe the distance between the target distribution π and the distribution of the samples produced by HOGWILD!-Gibbs. The standard notion to use here is the total variation distance, but for the task of computing marginal probabilities, it gives an overestimate on the error caused by bias. To better describe the bias, we introduce a new notion of statistical distance, the sparse variation distance. While this relaxed notion of statistical distance is interesting in its own right, its main benefit here is that it more tightly measures the effect of bias on marginal estimation.\nOur main goal is to identify conditions under which the bias and mixing time of asynchronous Gibbs can be bounded. One parameter that has been used to great effect in the analysis of Gibbs sampling is the total influence α of a model. The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions:\n• We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling.\n• To bound the bias, we prove that for classes of models with bounded total influence α = O(1), if sequential Gibbs sampling achieves small sparse variation distance to π in O(n) steps, where n is the number of variables, then HOGWILD!-Gibbs samples achieve the same distance in at most O(1) more steps.\n• For models that satisfy Dobrushin’s condition (α < 1), we show that the mixing time bounds of sequential and HOGWILD!-Gibbs sampling differ only by a factor of 1 +O(n−1).\n• We validate our results experimentally and show that, by using asynchronous execution, we can achieve wallclock speedups of up to 2.8× on real problems."
    }, {
      "heading" : "2 Related Work",
      "text" : "Much work has been done on the analysis of parallel Gibbs samplers. One simple way to parallelize Gibbs sampling is to run multiple chains independently in parallel: this heuristic uses parallelism to produce more samples overall, but does not produce accurate samples more quickly. Additionally, this strategy is sometimes worse than other strategies on a systems level Smola & Narayanamurthy (2010); Zhang & Ré (2014), typically because it requires additional memory to maintain multiple models of the chain. Another strategy for parallelizing Gibbs sampling involves taking advantage of the structure of the underlying factor graph to run in parallel while still maintaining an execution pattern to which the standard sequential Gibbs sampling analysis can be applied Gonzalez et al. (2011). Much further work has focused on parallelizing sampling for specific problems, such as LDA Newman et al. (2007); Smola & Narayanamurthy (2010) and others Nguyen et al. (2013).\nOur approach follows on the paper of Johnson et al. (2013), which proposes the HOGWILD!-Gibbs sampling algorithm and analyzes it for the case of Gaussian models. Their main contribution is an analysis framework that includes a sufficient condition under which HOGWILD! Gaussian Gibbs samples are guaranteed to have the correct asymptotic mean. Recent work Terenin et al. (2015) has analyzed a similar algorithm under even stronger regularity conditions. Here, we seek to give more general results for the analysis of HOGWILD!-Gibbs sampling on discrete-valued factor graphs.\nThe HOGWILD!-Gibbs sampling algorithm was inspired by a line of work on parallelizing stochastic gradient descent (SGD) by running it asynchronously. HOGWILD! SGD was first proposed by Niu et al. (2011), who proved that\nwhile running without locks causes race conditions, they do not impede the convergence of the algorithm. The asynchronous execution strategy has been applied to many problems—such as PageRank approximations Mitliagkas et al. (2015), deep learning Noel & Osindero (2014) and recommender systems Yu et al. (2012)—so it is not surprising that it has been proposed for use with Gibbs sampling. Our goal in this paper is to combine analysis ideas that have been applied to Gibbs sampling and HOGWILD!, in order to characterize the behavior of asynchronous Gibbs. In particular, we are motivated by some recent work on the analysis of HOGWILD! for SGD Liu et al. (2015); De Sa et al. (2015a); Mania et al. (2015); Liu & Wright (2015). Several of these results suggest modeling the race conditions inherent in HOGWILD! SGD as noise in a stochastic process; this lets them bring a trove of statistical techniques to bear on the analysis of HOGWILD! SGD. Therefore, in this paper, we will apply a similar stochastic process model to Gibbs sampling.\nSeveral recent papers have focused on the mixing time of Gibbs sampling for factor graphs. Gotovos et al. (2015) and De Sa et al. (2015b) each show that Gibbs sampling mixes in polynomial time for a class of distributions bounded by some parameter. Unfortunately, these results both depend on spectral methods (that try to bound the spectral gap of the Markov transition matrix), which are difficult to apply to HOGWILD! Gibbs sampling for two reasons. First, spectral methods don’t let us represent the sampler as a stochastic process, which limits the range of techniques we can use to model the noise. Secondly, while most spectral methods only apply to reversible Markov chains—and sequential Gibbs sampling is always a reversible chain—for HOGWILD!-Gibbs sampling the asynchronicity and parallelism make the chain non-reversible. Because of this, we were unable to use these spectral results in our asynchronous setting. We are forced to rely on the other method Guruswami (2000) for analyzing Markov processes, coupling—the type of analysis used with the Dobrushin condition—which we will describe in the following sections."
    }, {
      "heading" : "3 Modeling Asynchronicity",
      "text" : "In this section, we describe a statistical model for asynchronous Gibbs sampling by adapting the hardware model outlined in De Sa et al. (2015a). Because we are motivated by the factor graph inference problem, we will focus on the case where the distribution π that we want to sample comes from a sparse, discrete graphical model.\nAny HOGWILD!-Gibbs implementation involves some number of threads each repeatedly executing the Gibbs update rule on a single copy of the model (typically stored in RAM). We assume that this model serializes all writes, such that we can speak of the state of the system after t writes have occurred. We call this time t, and we will model the HOGWILD! system as a stochastic process adapted to the natural filtration Ft — Ft contains all events that have occurred up to time t, and we say an event is Ft measurable if it is known deterministically by time t.\nWe begin our construction by letting xi,t denote the (Ft measurable) value of variable i at time t, and letting Ĩt be the (Ft+1 measurable) index of the variable that we choose to sample at time t. For Gibbs sampling, we have\n∀i ∈ {1, . . . , n}, P ( Ĩt = i ∣ ∣ ∣ Ft ) = 1\nn ;\nthis represents the fact that we have an equal probability of sampling each variable. Now that we have defined which variables are to be sampled, we proceed to describe how they are sampled. For HOGWILD!-Gibbs sampling, we must model the fact that the sampler does not get to use exactly the values of xi,t; rather it has access to a cache containing potentially stale values. To do this, we define (Ft+1 measurable) ṽi,t where\nṽi,t = xi,t−τ̃i,t ,\nwhere τ̃i,t ≥ 0 is a delay parameter (Ft+1 measurable and independent of Ĩt) that represents how old the currentlycached value for variable i could be. A variable resampled using this stale data would have distribution\nP (z̃i,t = z|Ft) ∝ π(ṽ1,t, . . . , ṽi−1,t, z, ṽi+1,t, . . . , ṽn,t).\nUsing this, we can relate the values of the variables across time with\nxi,t+1 =\n{\nz̃i,t if i = Ĩt xi,t otherwise.\nSo far, our model is incompletely specified, because we have not described the distribution of the delays τ̃i,t. Unfortunately, since these delays are a property of the underlying hardware, their distribution is difficult to measure.\nInstead of specifying a particular distribution, we require only a bound on the expected delay\nE [τ̃i,t|Ft] ≤ τ.\nIn this model, the τ parameter represents everything that is relevant about the hardware; representing the hardware in this way has been successful for the analysis of asynchronous SGD Niu et al. (2011), so it is reasonable to use it for Gibbs sampling. In addition to this, we will need a similar parameter that bounds the tails of τ̃i,t slightly more aggressively. We require that for some parameter τ∗, and for all i and t,\nE [ exp ( n−1τ̃i,t ) ∣ ∣Ft ] ≤ 1 + n−1τ∗.\nThis parameter is typically very close to the expected value bound τ ; in particular, as n approaches infinity, τ∗ approaches τ ."
    }, {
      "heading" : "4 The First Challenge: Bias",
      "text" : "Perhaps the most basic result about sequential Gibbs sampling is the fact that, in the limit of large numbers of samples, it is unbiased. In order to measure convergence of Markov chains to their stationary distribution, it is standard to use the total variation distance.\nDefinition 1 (Total Variation Distance). The total variation distance (Levin et al., 2009, p. 48) between two probability measures µ and ν on probability space Ω is defined as\n‖µ− ν‖TV = max A⊂Ω |µ(A) − ν(A)| ,\nthat is, the maximum difference between the probabilities that µ and ν assign to a single event A.\nIt is a well-known result that, for Gibbs sampling on a strictly-positive target distribution π, it will hold that\nlim t→∞ ‖µt − π‖TV = 0, (1)\nwhere µt denotes the distribution of the t-th sample. One of the difficulties that arises when applying HOGWILD! to Gibbs sampling is that the race conditions from the asynchronous execution add bias to the samples — Equation 1 no longer holds. To understand why, we can consider a simple example."
    }, {
      "heading" : "4.1 Bias Example",
      "text" : "Consider a simple model with two variables X1 and X2 each taking on values in {0, 1}, and having distribution\np(0, 1) = p(1, 0) = p(1, 1) = 1\n3 p(0, 0) = 0.\nSequential Gibbs sampling on this model will produce unbiased samples from the target distribution. Unfortunately, this is not the case if we run HOGWILD!-Gibbs sampling on this model. Assume that the state is currently (1, 1) and two threads, T1 and T2, simultaneously update X1 and X2 respectively. Since T1 reads state (1, 1) it will update X1 to 0 or 1 each with probability 0.5; the same will be true for T2 and X2. Therefore, after this happens, every state will have probability 0.25; this includes the state (0, 0) which should never occur! Over time, this race condition will produce samples with value (0, 0) with some non-zero frequency; this is an example of bias introduced by the HOGWILD! sampling. Worse, this bias is not just theoretical: Figure 2 illustrates how the measured distribution for this model is affected by two-thread asynchronous execution. In particular, we observe that almost 5% of the mass is erroneously measured to be in the state (0, 0), which has no mass at all in the true distribution. The total variation distance to the target distribution is quite large at 9.8%, and, unlike in the sequential case, this bias doesn’t disappear as the number of samples goes to infinity."
    }, {
      "heading" : "4.2 Bounding the Bias",
      "text" : "The previous example has shown that asynchronous Gibbs sampling will not necessarily produce a sequence of samples arbitrarily close to the target distribution. Instead, the samples will approach some other distribution, which we hope is sufficiently similar for some practical purpose. Often, the purpose of Gibbs sampling is to estimate the marginal distributions of individual variables or of events that each depend on only a small number of variables in the model. To characterize the accuracy of these estimates, the total variation distance is too conservative: it depends on the difference over all the events in the space, when most of these are events that we do not care about. To address this, we introduce the following definition.\nDefinition 2 (Sparse Variation Distance). For any event A in a probability space Ω over a set of variables V , let |A| denote the number of variables upon which A depends. Then, for any two distributions µ and ν over Ω, we define the ω-sparse variation distance to be\n‖µ− ν‖SV(ω) = max |A|≤ω |µ(A) − ν(A)| .\nFor the wide variety of applications that use sampling for marginal estimation, the sparse variation distance measures the quantity we actually care about: the maximum possible bias in the marginal distribution of the samples. As we will show, asynchronous execution seems to have less effect on the sparse variation distance than the total variation distance. For example, in Figure 2, the total variation distance between the sequential and HOGWILD! distributions is 9.8%, while the 1-sparse variation distance is only 0.4%. That is, while HOGWILD! execution does introduce great bias into the distribution, it still estimates marginals of the individual variables accurately.\nThis definition suggests the question: how long do we have to run before our samples have low sparse variation distance from the target distribution? To answer this question, we introduce the following definition.\nDefinition 3 (Sparse Estimation Time). The ω-sparse estimation time of a stochastic sampler with distribution µt at time t and target distribution π is the first time t at which, for any initial distribution µ0, the estimated distribution is\nwithin sparse variation distance ǫ of π. That is,\ntSE(ω)(ǫ) = min { t ∈ N ∣ ∣ ∣ ∀µ0, ‖µt − π‖SV(ω) ≤ ǫ } .\nIn many practical systems Neubig (2014); Shin et al. (2015), Gibbs sampling is used without a proof that it works; instead, it is naively run for some fixed number of passes through the dataset. This naive strategy works for models for which accurate marginal estimates can be achieved after O(n) samples. This O(n) runtime is necessary for Gibbs sampling to be feasible at all on big data, meaning roughly that models in this class are those which it is interesting to try to speed up using asynchronous execution. Therefore, for the rest of this section, we will focus on bias of the HOGWILD! chain for this class of models. When analyzing Gibbs sampling, we can bound the bias within the context of a coupling argument using a parameter called the total influence. While we arrived at this condition independently, it has been studied before, especially in the context of Dobrushin’s condition, which ensures rapid mixing of Gibbs sampling.\nDefinition 4 (Total Influence). Let π be a probability distribution over some set of variables I . Let Bj be the set of state pairs (X,Y ) which differ only at variable j. Let πi(·|XI\\{i}) denote the conditional distribution in π of variable i given all the other variables in state X . Then, define α, the total influence of π, as\nα = max i∈I\n∑\nj∈I\nmax (X,Y )∈Bj\n∥ ∥πi(·|XI\\{i})− πi(·|YI\\{i}) ∥ ∥\nTV .\nWe say the model satisfies Dobrushin’s condition if α < 1.\nOne way to think of total influence for factor graphs is as a generalization of maximum degree; indeed, if a factor graph has maximum degree ∆, it can easily be shown that α ≤ ∆. It turns out that if we can bound both this parameter and the sparse estimation time of sequential Gibbs sampling, we can give a simple bound on the sparse estimation time for asynchronous Gibbs sampling.\nClaim 1. Assume that we have a class of distributions with bounded total influence α = O(1). For each distribution π in the class, let t̄SE−seq(ω)(π, ǫ) be an upper bound on the ω-sparse estimation time of its sequential Gibbs sampler, and assume that it is a convex, decreasing function of ǫ. Further assume that, for any ǫ, across all models,\nt̄SE−seq(ω)(π, ǫ) = O(n),\nwhere n is the number of variables in the model. Then, for any ǫ, the sparse estimation time of HOGWILD!-Gibbs across all models is bounded by\ntSE−hog(ω)(π, ǫ) ≤ t̄SE−seq(ω)(π, ǫ) + O(1).\nRoughly, this means that HOGWILD!-Gibbs sampling “works” on all problems for which we know marginal estimation is “fast” and the total influence is bounded. Since the sparse estimation times here are measured in iterations, and the asynchronous sampler is able, due to parallelism, to run many more iterations in the same amount of wall clock time, this result implies that HOGWILD!-Gibbs can be much faster than sequential Gibbs for producing estimates of similar quality. While this corollary tells us that any error ǫ can be achieved for sufficiently large problem sizes, it does not actually tell us what error can be achieved for any particular n. To prove Claim 1, and specify a more explicit bound on the bias of HOGWILD!-Gibbs, we present the following theorem.\nTheorem 1. Assume that we run HOGWILD!-Gibbs sampling on a distribution π with total influenceα. Let t̄SE−seq(ω)(ǫ) be some upper bound on the ω-sparse estimation time of the corresponding sequential chain, and assume that it is a convex and decreasing function of ǫ. For any ǫ > 0, define\nc = 1\nn t̄SE−seq(ω)\n( ǫ\n2\n)\n.\nThen, as long as ǫ is large enough that\nǫ ≥ 2ωατc\nn ec·(α−1)+ ,\nwhere we use the notation (x)+ = max(0, x), the ω-sparse estimation time of the HOGWILD! chain can be bounded with\ntSE−hog(ω)(ǫ) ≤\n⌈\nt̄SE−seq(ω)(ǫ) + 2ωατc2\nǫ ec·(α−1)+\n⌉\n.\nThe required bound on ǫ in Theorem 1 is to be expected: because of bias, it is impossible to produce arbitrarily good samples with HOGWILD!-Gibbs. Looked at another way, this bound on ǫ characterizes the inherent bias of HOGWILD! sampling, in the limit as t becomes large. When c = Õ(1), this bias is Õ(n−1), which has an intuitive explanation: for HOGWILD! execution, race conditions occur about once every Θ(n) iterations, so the bias is roughly proportional to the frequency of race conditions. This gives us a relationship between the statistical error of the algorithm and a more traditional notion of computational error.\nUp until now, we have been assuming that we have a class for which the sparse estimation time is O(n). Using the total influence α, we can identify a class of models known to meet this criterion.\nTheorem 2. For any distribution that satisfies Dobrushin’s condition, α < 1, the ω-sparse estimation time of the sequential Gibbs sampling process will be bounded by\ntSE−seq(ω)(ǫ) ≤\n⌈\nn 1− α log (ω ǫ )\n⌉\n.\nThis surprising result says that, in order to produce good marginal estimates for any model that satisfies Dobrushin’s condition, we need onlyO(n) samples! While we could now apply Theorem 1 to bound the sparse estimation time for HOGWILD!-Gibbs, a more direct analysis produces a slightly better result, which we present here.\nTheorem 3. For any distribution that satisfies Dobrushin’s condition, α < 1, and for any ǫ that satisfies\nǫ ≥ 2ωατ\n(1 − α)n ,\nthe ω-sparse estimation time of the HOGWILD! Gibbs sampling process will be bounded by\ntSE−hog(ω)(ǫ) ≤\n⌈\nn 1− α log (ω ǫ ) + 2ωατ (1− α)2ǫ\n⌉\n.\nThis result gives us a definite class of models for which HOGWILD!-Gibbs sampling is guaranteed to produce accurate marginal estimates quickly."
    }, {
      "heading" : "5 The Second Challenge: Mixing Times",
      "text" : "Even though the HOGWILD!-Gibbs sampler produces biased estimates, it is still interesting to analyze how long we need to run it before the samples it produces are independent of its initial conditions. To measure the efficiency of a Markov chain, it is standard to use the mixing time, the time necessary to produce samples that are close, in terms of total variation distance, to the stationary distribution.\nDefinition 5 (Mixing Time). The mixing time (Levin et al., 2009, p. 55) of a stochastic process with distribution µt at time t and stationary distribution π̄ is the first time t at which, for any initial distribution µ0, the estimated distribution is within TV-distance ǫ of π̄. That is,\ntmix(ǫ) = min {t|∀µ0, ‖µt − π̄‖TV ≤ ǫ} ."
    }, {
      "heading" : "5.1 Mixing Time Example",
      "text" : "As we did with bias, here we construct an example model for which asynchronous execution disastrously increases the mixing time. The model we will construct is rather extreme; we choose this model because simpler, practical models do not seem to exhibit this type of catastrophic increase in the mixing time. We start, for some odd constant N , with N variables X1, . . . , XN all in {−1, 1}, and one factor with energy\nφX(X) = −M1 ∣ ∣1 TX ∣ ∣ .\nfor some very large energy parameter M1. The resulting distribution will be almost uniform over all states with 1 TX ∈ {−1, 1}. To this model, we add another bank of variables Y1, . . . , YN all in {−1, 1}. These variables also have a single associated factor with energy\nφY (X,Y ) =\n{\nβ N\n( 1 TY )2\nif ∣ ∣1 TX ∣ ∣ = 1\nM2 ( 1 TY )2 if ∣ ∣1 TX ∣ ∣ > 1\nCombining these two factors gives us the overall distribution for our model,\nπ(X,Y ) = 1\nZ exp (φX(X) + φY (X,Y )) ,\nwhere Z is the constant necessary for this to be a distribution. Roughly, the X dynamics are constructed to regularly “generate” race conditions, while the Y dynamics are chosen to “detect” these race conditions and mix very slowly as a result. This model is illustrated in Figure 3.\nWe simulated two-thread HOGWILD!-Gibbs on this model, measuring the marginal probability that 1TY > 0; by symmetry, this event has probability 0.5 in the stationary distribution for both the sequential and asynchronous samplers. Our results, for a model with N = 2001, β = 0.3, M1 = 1010, and M2 = 100, and initial state X = Y = 1, are plotted in Figure 4. Notice that, while the sequential sampler achieves the correct marginal probability relatively quickly, the asynchronous samplers take a much longer time to achieve the correct result, even for a relatively small expected delay (τ = 0.5). These results suggest that something catastrophic is happening to the mixing time when we switch from sequential to asynchronous execution — and in fact we can prove this is the case.\nStatement 1. For the example model described above, there exist parameters M1, M2, and β (as a function of N ) such that the mixing time of sequential Gibbs sampling is O(N logN) but the mixing time of HOGWILD!-Gibbs sampling, even with τ = O(1), can be exp(Ω(N)).\nThe intuition behind this statement is that for sequential Gibbs, the dynamics of the X part of the chain quickly causes it to have ∣ ∣1 TX ∣\n∣ = 1, and then remain there for the remainder of the simulation with high probability. This in turn causes the energy of the φY factor to be essentially β N (1TY )2, a model which is known to be fast-mixing. On the other hand, for HOGWILD! Gibbs, due to race conditions we will see ∣ ∣1 TX ∣\n∣ 6= 1 with constant probability; this will cause the effective energy of the φY factor to be dominated by the M2(1TY )2 term, a model that is known to take exponential time to mix."
    }, {
      "heading" : "5.2 Bounding the Mixing Time",
      "text" : "This example illustrates that fast mixing of the sequential sampler alone is not sufficient to guarantee fast mixing of the HOGWILD! chain. Consequently, we try to look for classes of models for which we can say something about the mixing time of both sequential and HOGWILD!-Gibbs. Dobrushin’s condition is well known to imply rapid mixing of sequential Gibbs, and it turns out that we can leverage it again here to bound the mixing time of the asynchronous sampler.\nTheorem 4. Assume that we run Gibbs sampling on a distribution that satisfies Dobrushin’s condition, α < 1. Then the mixing time of sequential Gibbs will be bounded by\ntmix−seq(ǫ) ≤ n 1− α log (n ǫ ) .\nUnder the same conditions, the mixing time of HOGWILD!-Gibbs will be bounded by\ntmix−hog(ǫ) ≤ n+ ατ∗ 1− α log (n ǫ ) .\nWe can compare these two mixing time results as\ntmix−hog(ǫ) ≈ ( 1 + ατ∗n−1 ) tmix−seq(ǫ); (2)\nthe bounds on the mixing times differ by a negligible factor of 1 + O(n−1). This result shows that, for problems that satisfy Dobrusin’s condition, HOGWILD!-Gibbs sampling mixes in about the same time as sequential Gibbs sampling, and is therefore a practical choice for generating samples."
    }, {
      "heading" : "5.3 A Positive Example: Ising Model",
      "text" : "To gain intuition here, we consider a simple example. The Ising model Ising (1925) on a graph G = (V,E) is a model over probability space {−1, 1}V , and has distribution\np(σ) = 1\nZ exp\n(\nβ ∑\n(x,y)∈E\nσ(x)σ(y) + ∑\nx∈V\nBxσ(x)\n)\n,\nwhere β is a parameter that is called the inverse temperature, the Bx are parameters that encode a prior on the variables, and Z is the normalization constant necessary for this to be a distribution. For graphs of maximum degree ∆ and sufficiently small β, a bound on the mixing time of Gibbs sampling is known when ∆tanhβ ≤ 1. It turns out that the total influence of the Ising model can be bounded by α ≤ ∆tanhβ, and so this condition is simply another way of writing Dobrushin’s condition. We can therefore apply Theorem 4 to bound the mixing time of HOGWILD!Gibbs with\ntmix(ǫ) ≤ n+ τ∗∆tanhβ 1−∆tanhβ log (n ǫ ) .\nThis illustrates that the class of graphs we are considering includes some common, well-studied models."
    }, {
      "heading" : "5.4 Proof Outline",
      "text" : "Here, we briefly describe the technique used to prove Theorem 4; for ease of presentation, we focus on the case where every variable takes on values in {−1, 1}. We start by introducing the idea of a coupling-based argument (Levin et al., 2009, p. 64). The argument starts with constructing two copies of the same Markov chain, X and X̄ , starting from different states but running together in the same probability space (i.e. using the same sources of randomness). For analyzing HOGWILD!-Gibbs sampling, we share randomness by having both chains sample the same variable at each iteration and sample it such that the resulting values are maximally correlated—additionally both chains are subject to the same HOGWILD! delays τ̃i,t.\nAt some random time, called the coupling time Tc, the chains will become equal—independent of their initial conditions. Using this, we can bound the mixing time with\ntmix(ǫ) ≤ min { t ∣ ∣ ∣ P (Tc > t) ≤ ǫ } .\nIn order to bound the probability that the chains are not equal at a particular time t, we focus on the quantity\nφt = max i\nP ( Xi,t 6= X̄i,t ) . (3)\nUnder the conditions of Theorem 4, we are able to bound this using the total influence parameter. From here, we notice that by the union bound, P (Tc > t) ≤ nφt. Combining this with Equation 3 and reducing the subsequent expression\nlets us bound the mixing time, producing the result of Theorem 4."
    }, {
      "heading" : "6 Experiments",
      "text" : "Now that we have derived a theoretical characterization of the behavior of HOGWILD!-Gibbs sampling, we examine whether this characterization holds up under experimental evaluation. First, we examine the mixing time claims we made in Section 5. Specifically, we want to check whether increasing the expected delay parameter τ∗ actually increases the mixing time as predicted by Equation 2.\nTo do this, we simulated HOGWILD!-Gibbs sampling running on a random synthetic Ising model graph of order n = 1000, degree ∆ = 3, inverse temperature β = 0.2, and prior weights Ex = 0. This model has total influence α ≤ 0.6, and Theorem 4 guarantees that it will mix rapidly. Unfortunately, the mixing time of a chain is difficult to calculate experimentally. While techniques such as coupling from the past Propp & Wilson (1996) exist for estimating the mixing time, using these techniques in order to expose the (relatively small) dependence of the mixing time on τ proved to be computationally intractable.\nInstead, we use a technique called coupling to the future. We initialize two chains, X and Y , by setting all the variables in X0 to 1 and all the variables in Y0 to −1. We proceed by simulating a coupling between the two chains, and return the coupling time Tc. Our estimate of the mixing time will then be t̂(ǫ), where P(Tc ≥ t̂(ǫ)) = ǫ.\nStatement 2. This experimental estimate is an upper bound for the mixing time. That is, t̂(ǫ) ≥ tmix(ǫ).\nTo estimate t̂(ǫ), we ran 10000 instances of the coupling experiment, and returned the sample estimate of t̂(1/4). To compare across a range of τ∗, we selected the τ̃i,t to be independent and identically distributed according to the maximum-entropy distribution supported on {0, 1, . . . , 200} consistent with a particular assignment of τ∗. The resulting estimates are plotted as the blue series in Figure 5. The red line represents the mixing time that would be predicted by naively applying Equation 2 using the estimate of the sequential mixing time as a starting point — we can see that it is a very good match for the experimental results. This experiment shows that, at least for one archetypal model, our theory accurately characterizes the behavior of HOGWILD! Gibbs sampling as the delay parameter τ∗ is changed, and that using HOGWILD!-Gibbs doesn’t cause the model to catastrophically fail to mix.\nOf course, in order for HOGWILD!-Gibbs to be useful, it must also speed up the execution of Gibbs sampling on some practical models. It is already known that this is the case, as these types of algorithms been widely implemented\nin practice Smyth et al. (2009); Smola & Narayanamurthy (2010). To further test this, we ran HOGWILD!-Gibbs sampling on a real-world 11 GB Knowledge Base Population dataset (derived from the TAC-KBP challenge) using a machine with a single-socket, 18-core Xeon E7-8890 CPU and 1 TB RAM. As a comparison, we also ran a “multimodel” Gibbs sampler: one which runs an independent copy of the sequential chain on each worker. This sampler will produce the same number of samples as HOGWILD!-Gibbs, but the samples could be of lower quality since they are split up among several independent chains.\nFigure 6 reports the speedup, in terms of wall-clock time, achieved by HOGWILD!-Gibbs on this dataset. On this machine, we get speedups of up to 2.8×, although the program becomes memory-bandwidth bound at around 8 threads, and we see no significant speedup beyond this. With any number of workers, the run time of HOGWILD!-Gibbs is close to that of multi-model Gibbs, which illustrates that the additional cache contention caused by the HOGWILD! updates has little effect on the algorithm’s performance."
    }, {
      "heading" : "7 Conclusion",
      "text" : "We analyzed HOGWILD!-Gibbs sampling, a heuristic for parallelized MCMC sampling, on discrete-valued graphical models. First, we constructed a statistical model for HOGWILD!-Gibbs by adapting a model already used for the analysis of asynchronous SGD. Next, we illustrated a major issue with HOGWILD!-Gibbs sampling: that it produces biased samples. To address this, we proved that if for some class of models with bounded total influence, only O(n) sequential Gibbs samples are necessary to produce good marginal estimates (in terms of sparse variation distance), then HOGWILD!-Gibbs sampling produces equally good estimates after only O(1) additional steps. Additionally, for models that satisfy Dobrushin’s condition (α < 1), we proved mixing time bounds for sequential and asynchronous Gibbs sampling that differ by only a factor of 1 + O(n−1). Finally, we showed that our theory matches experimental results, and that HOGWILD!-Gibbs sampling produces speedups up to 2.8× on a real dataset."
    }, {
      "heading" : "Acknowledgments",
      "text" : "The authors acknowledge the support of: DARPA FA8750-12-2-0335; NSF IIS-1247701; NSF CCF-1111943; DOE 108845; NSF CCF-1337375; DARPA FA8750-13-2-0039; NSF IIS-1353606; ONR N000141210041 and N000141310129; NIH U54EB020405; Oracle; NVIDIA; Huawei; SAP Labs; Sloan Research Fellowship; Moore Foundation; American Family Insurance; Google; and Toshiba.\n“The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA, AFRL, NSF, ONR, NIH, or the U.S. Government.”"
    }, {
      "heading" : "A Proofs",
      "text" : "Here, we provide proofs for the results in the paper. In the first subsection, we will state lemmas and known results that we will use in the subsequent proofs. Next, we will prove the Claims and Theorems stated in the body of the paper. Finally, we will prove the lemmas previously stated.\nA.1 Statements of Lemmas\nFirst, we state a proposition from Levin et al. (2009). This proposition relates the concept of a coupling with the total variation distance between the distributions of two random variables.\nProposition 1 (Proposition 4.7 from Levin et al. (2009)). Let X and Y be two random variables that take on values in the same set, and let their distributions be µ and ν, respectively. Then for any coupling, (X̄, Ȳ ) it will hold that\n‖µ− ν‖TV ≤ P ( X̄ 6= Ȳ ) .\nFurthermore, there exists a coupling for which equality is achieved; this is called an optimal coupling.\nWe can prove a related result for sparse variation distance.\nLemma 1. Let X and Y be two random variables that each assign values to a set of variables {1, . . . , n}, and let their distributions be µ and ν, respectively. Then for any coupling, (X̄, Ȳ ) it will hold that\n‖µ− ν‖SV(ω) ≤ max I⊂{1,...,n}, |I|≤ω\nP ( ∃i ∈ I, X̄i 6= Ȳi ) .\nWe state a lemma that bounds the expected total variation distance between the marginal distributions of two states using the total influence α. This lemma will be useful later when proving the subsequent lemmas stated in this subsection.\nLemma 2. If π is a distribution with total influence α, and X and Y are two random variables that take on values in the state space of π, then for any variable i\nE [‖πi(·|X)− πi(·|Y )‖TV] ≤ αmax j P (Xj 6= Yj) .\nNext, we state three lemmas, each of which give bounds on the quantity\nP (Xi,t 6= Yi,t)\nfor some coupling of two (potentially asynchronous) Gibbs sampling chains. First, we state the result for comparing two synchronous chains.\nLemma 3. Consider sequential Gibbs sampling on a distribution π with total influence α. Then, for any initial states (X0, Y0) there exists a coupling of the chains (Xt, Yt) such that for any variable i and any time t,\nP (Xi,t 6= Yi,t) ≤ exp\n(\n− 1− α\nn t\n)\n.\nSecond, we state the result comparing two HOGWILD! chains.\nLemma 4. Consider any model of HOGWILD!-Gibbs sampling on a distribution π with total influence α. Then, for any initial states (X0, Y0) there exists a coupling (Xt, Yt) of the HOGWILD!-Gibbs sampling chains starting at X0 and Y0 respectively such that for any variable i and any time t,\nP (Xi,t 6= Yi,t) ≤ exp\n(\n− 1− α\nn+ ατ∗ t\n)\n.\nThird, we state the result comparing a sequential and an asynchronous chain.\nLemma 5. Consider any model of HOGWILD!-Gibbs sampling on a distribution π with total influence α. Then if for any initial states (X0, Y0) we can construct a coupling (Xt, Yt) such that the process Xt is distributed according to the dynamics of HOGWILD!-Gibbs, the process Yt is distributed according to the dynamics of sequential Gibbs, and for any time t,\nmax i P (Xi,t+1 6= Yi,t+1) ≤\n(\n1− 1− α\nn\n)\nmax i\nP (Xi,t 6= Yi,t) + ατ\nn2 .\nAs a secondary result, if the chain satisfies Dobrushin’s condition (α < 1), then for any variable i and any time t,\nP (Xi,t 6= Yi,t) ≤ exp\n(\n− 1− α\nn t\n)\n+ ατ\n(1− α)n .\nTo prove that our catastrophic mixing time example mixes in O(n logn) time in the sequential case, we will need to use the following result, which is inspired by work on mixing using strong stationary times in Diaconis & Shahshahani (1981) and Diaconis (1988).\nLemma 6 (Monotonic Sequence Domination Lemma). Let x0, x1, . . . be a sequence such that, for all t,\nxt+1 ≤ ft(xt, xt−1, . . . , x0),\nwhere ft is a function that is monotonically increasing in all of its arguments. Then, for any sequence y0, y1, . . ., if x0 = y0 and for all t,\nyt+1 ≥ ft(yt, yt−1, . . . , y0),\nthen for all t, xt ≤ yt.\nLemma 7. Consider the model on N variables Xi, for N odd, where each Xi takes on values in {−1, 1} and has probability\nπ(X) = 1\nZX\n{ 1 if ∣ ∣1 TX ∣\n∣ = 1 0 if ∣ ∣1 TX ∣ ∣ > 1\nThen Gibbs sampling on this model has mixing time\ntmix = O(n logn).\nA.2 Proofs of Bias Results\nFirst, we prove Claim 1. This proof will use the result of Theorem 1, which we will prove subsequently. We note here that the use of a convex upper bound for the sparse estimation time of the sequential chain (as opposed to using the sequential chain’s sparse estimation time directly) is an unfortunate consequence of the proof—we hope that a more careful analysis could remove it or replace it with a more natural condition.\nProof of Claim 1. First, note that, since α = O(1), we know by the definition of big-O notation that for some α∗, for all models in the class, the total influence of that model will be α ≤ α∗. Similarly, since we assumed that, for any ǫ and across all models π,\nt̄SM−seq(ω)(π, ǫ) = O(n),\nthen for each ǫ, there must exist a c(ǫ) such that for any distribution π with n variables in the class,\ntSM−seq(ω)(π, ǫ) ≤ n · c(ǫ).\nFor some error ǫ and model π, we would like to apply Theorem 1 to bound its mixing time. In order to apply the theorem, we must satisfy the conditions on ǫ: it suffices for\nn ≥ 2ωα∗τc(ǫ/2)\nǫ exp ((α∗ − 1)+c(ǫ/2)) .\nUnder this condition, applying the theorem allows us to bound the ω-sparse estimation time of the HOGWILD! chain with\ntSE−hog(ω)(ǫ) ≤\n⌈\nt̄SE−seq(ω)(ǫ) + 2ωα∗τc(ǫ/2)2\nǫ exp ((α∗ − 1)+c(ǫ/2))\n⌉\n≤ t̄SE−seq(ω)(ǫ) + 2ωα∗τc(ǫ/2)2\nǫ exp ((α∗ − 1)+c(ǫ/2)) + 1\nTherefore, if we define\nN(ǫ) = 2ωα∗τc(ǫ/2)\nǫ exp ((α∗ − 1)+c(ǫ/2)) ,\nand\nT (ǫ) = 2ωα∗τc(ǫ/2)2\nǫ exp ((α∗ − 1)+c(ǫ/2)) + 1,\nthen it follows that, for any ǫ and for all models with n ≥ N(ǫ),\ntSM−hog(ω)(ǫ) ≤ tSM−seq(ω)(ǫ) + T (ǫ).\nThis is equivalent to saying that, for any ǫ and across all models,\ntSM−hog(ω)(ǫ) ≤ tSM−seq(ω)(ǫ) +O(1).\nThis proves the claim.\nNext, we prove the main bias result, Theorem 1.\nProof of Theorem 1. We start by using the primary result from Lemma 5. This result states that we can construct a coupling (Xt, Yt) of the HOGWILD! and sequential chains starting at any initial distributions X0 and Y0 such that at any time t,\nmax i P (Xi,t+1 6= Yi,t+1) ≤\n(\n1− 1− α\nn\n)\nmax i\nP (Xi,t 6= Yi,t) + ατ\nn2 .\nNow, for any initial distribution µ0, assume that we let both X0 and Y0 be distributed according to µ0. Then, trivially,\nP (Xi,0 6= Yi,0) = 0.\nIt follows from recursive application of the sub-result of Lemma 5 that, for this coupling,\nmax i P (Xi,t 6= Yi,t) ≤\nt−1 ∑\nk=0\n(\n1 + α− 1\nn\n)k ατ\nn2\n≤ t\n(\n1 + (α− 1)+\nn\n)t ατ\nn2\n≤ exp\n(\n(α− 1)+ n t\n)\nατt\nn2 ,\nwhere (x)+ denotes max(0, x). It follows by the union bound that, for any set of variables I with |I| ≤ ω, the probability that the coupling is unequal in at least one of those variables is\nP (∃i ∈ I, Xi,t 6= Yi,t) ≤ ωmax i P (Xi,t 6= Yi,t)\n≤ exp\n(\n(α− 1)+ n t\n)\nωατt\nn2 .\nSince this inequality holds for any set of variable I with |I| ≤ ω, it follows that\nmax I ⊆{1,...,n}, |I|≤ω P (∃i ∈ I, Xi,t 6= Yi,t) ≤ ωmax i P (Xi,t 6= Yi,t)\n≤ exp\n(\n(α− 1)+ n t\n)\nωατt\nn2 .\nWe can proceed to apply Lemma 1, which lets us conclude that\n‖µt − νt‖ SV(ω) ≤ ωmax i P (Xi,t 6= Yi,t)\n≤ exp\n(\n(α− 1)+ n t\n)\nωατt\nn2\nwhere µt and νt are the distributions of the HOGWILD! and sequential Gibbs sampling chains, respectively, starting in state µ0. Next, since νt has the dynamics of the sequential Gibbs sampling chain, since t̄SM−seq(ω)(ǫ) is an upper bound for the sparse estimation time, it follows that for any ǫ, if\nt ≥ t̄SM−seq(ω)(ǫ),\nthen ‖νt − π‖SV(ω) ≤ ǫ.\nSince t̄SM−seq(ω)(ǫ) is a decreasing function of ǫ, it must have an inverse function. Furthermore, since it is convex, its inverse function must also be convex. Therefore, we can also write the above expression in terms of the inverse function; for any t,\n‖νt − π‖SV(ω) ≤ t̄ −1 SM−seq(ω)(t).\nTherefore, by the triangle inequality, for any t,\n‖µt − π‖ SV(ω) ≤ ‖µt − νt‖ SV(ω) + ‖νt − π‖ SV(ω)\n≤ ωατt\nn2 exp\n(\n(α− 1)+ n t\n)\n+ t̄−1SM−seq(ω)(t).\nNow, for any particular ǫ, let t0 = t̄SM−seq(ω)(ǫ),\nand let t1 = t̄SM−seq(ω) ( ǫ\n2\n)\n.\nFurther define\nR = ωατt1 n2 exp\n(\n(α− 1)+ n t1\n)\n.\nTherefore, for any t0 ≤ t ≤ t1, ‖µt − π‖ SV(ω) ≤ R+ t̄ −1 SM−seq(ω)(t).\nBy convexity of t̄−1SM−seq(ω), we can bound this expression over the interval t0 ≤ t ≤ t1 with\n‖µt − π‖ SV(ω) ≤ R+ t1 − t\nt1 − t0 · ǫ+ t− t0 t1 − t0 · ǫ 2 ,\nand so, if we want this to be less than ǫ, it suffices to choose t such that\nǫ = R+ t1 − t\nt1 − t0 · ǫ + t− t0 t1 − t0 · ǫ 2\nwhich will occur when\nt = t0 + 2R(t1 − t0)\nǫ .\nNow, applying the definition\nc = 1\nn t̄SM−seq(ω)\n( ǫ\n2\n) = t1 n\nlets us equivalently write R as\nR = ωατc\nn exp\n(\n(α− 1)+ n t1\n)\n.\nRecall that as a condition for the theorem, we assumed that\nǫ ≥ 2ωατc\nn exp\n(\n(α− 1)+ n t1\n)\n.\nIt follows from this and our expression for R that\nR ≤ ǫ\n2 .\nTherefore this assignment of t will satisfy the previous constraint that t0 ≤ t ≤ t1, and so for this assignment of t, and for any initial distribution µ0, it holds that\n‖µt − π‖ SV(ω) ≤ ǫ.\nTherefore, by the definition of sparse estimation time, the sparse estimation time of the HOGWILD! chain will be\ntSE−hog(ω)(ǫ) ≤ t,\nfor this assignment of t. Now, recall that above we assigned\nt = t0 + 2R(t1 − t0)\nǫ .\nUnder this condition, we can bound this whole error term as\n2R(t1 − t0)\nǫ ≤ 2ωατt21 n2ǫ exp\n(\n(α− 1)+ n t1\n)\n.\nCombining this with the definitions of t0 and c lets us state that\nt ≤ t̄SM−seq(ω)(ǫ) + 2ωατc2\nǫ exp ((α− 1)+c) .\nTaking the ceiling implies that, when\nt =\n⌈\nt̄SM−seq(ω)(ǫ) + 2ωατc2\nǫ exp ((α− 1)+c)\n⌉\n,\nfor any initial distribution µ0, ‖µt − π‖SV(ω) ≤ ǫ.\nTherefore, by the definition of sparse estimation time,\ntSE−hog(ǫ) ≤\n⌈\nt̄SM−seq(ω)(ǫ) + 2ωατc2\nǫ exp ((α− 1)+c)\n⌉\n.\nThis proves the theorem.\nNext, we prove the theorem that bounds the sparse estimation time of sequential Gibbs for distributions that satisfy Dobrushin’s condition.\nProof of Theorem 2. We start by using the result of Lemma 3. This result states that, for any initial distributions (X0, Y0), there exists a coupling (Xt, Yt) of the sequential Gibbs sampling chains starting at distributions X0 and Y0, respectively, such that for any variable i and any time t,\nP (Xi,t 6= Yi,t) ≤ exp\n(\n− 1− α\nn t\n)\n.\nIt follows by the union bound that, for any set of variables I with |I| ≤ ω, the probability that the coupling is unequal in at least one of those variables is\nP (∃i ∈ I, Xi,t 6= Yi,t) ≤ ω exp\n(\n− 1− α\nn t\n)\n.\nSince this inequality holds for any set of variable I with |I| ≤ ω, it follows that\nmax I ⊆{1,...,n}, |I|≤ω P (∃i ∈ I, Xi,t 6= Yi,t) ≤ ω exp\n(\n− 1− α\nn t\n)\n.\nWe can proceed to apply Lemma 1, which lets us conclude that\n‖µt − νt‖ SV(ω) ≤ ω exp\n(\n− 1− α\nn t\n)\n.\nSince this was true for any initial distributions for X0 and Y0, it will hold in particular for Y0 distributed according to π, the stationary distribution of the chain. In this case, νt = π, and so for any initial distribution µ0 for X0,\n‖µt − π‖ SV(ω) ≤ ω exp\n(\n− 1− α\nn t\n)\n.\nNow, in order for this to be bounded by ǫ, it suffices to choose t such that\nω exp\n(\n− 1− α\nn t\n)\n≤ ǫ.\nThis will occur whenever t ≥ n\n1− α log (ω ǫ )\n(here we used the fact that α < 1 to do the division). Taking the ceiling, we can conclude that when\nt =\n⌈\nn 1− α log (ω ǫ )\n⌉\n.\nfor any initial distribution µ0, ‖µt − π‖SV(ω) ≤ ǫ.\nTherefore, by the definition of sparse estimation time,\ntSE−hog(ǫ) ≤\n⌈\nn 1− α log (ω ǫ )\n⌉\n.\nThis proves the theorem.\nNext, we prove the theorem that bounds the sparse estimation time of HOGWILD! Gibbs for distributions that satisfy Dobrushin’s condition.\nProof of Theorem 3. We start by using the secondary result from Lemma 5—we can safely use this result because we assumed the chain satisfied Dobrushin’s condition (α < 1). This result states that we can construct a coupling (Xt, Yt) of the HOGWILD! and sequential chains starting at any initial distributions X0 and Y0 such that at any time t,\nP (Xi,t 6= Yi,t) ≤ exp\n(\n− 1− α\nn t\n)\n+ ατ\n(1− α)n .\nIt follows by the union bound that, for any set of variables I with |I| ≤ ω, the probability that the coupling is unequal in at least one of those variables is\nP (∃i ∈ I, Xi,t 6= Yi,t) ≤ ω exp\n(\n− 1− α\nn t\n)\n+ ωατ\n(1− α)n\nSince this inequality holds for any set of variable I with |I| ≤ ω, it follows that\nmax I ⊆{1,...,n}, |I|≤ω P (∃i ∈ I, Xi,t 6= Yi,t) ≤ ω exp\n(\n− 1− α\nn t\n)\n+ ωατ\n(1− α)n .\nWe can proceed to apply Lemma 1, which lets us conclude that\n‖µt − νt‖ SV(ω) ≤ ω exp\n(\n− 1− α\nn t\n)\n+ ωατ\n(1 − α)n .\nTo bound the sparse estimation time, notice that for any fixed ǫ (independent of n), in order to achieve\n‖µt − π‖SV(ω) ≤ ǫ,\nit suffices to choose any t such that\nω exp\n(\n− 1− α\nn t\n)\n≤ ǫ− ωατ\n(1− α)n .\nThis will occur when 1− α\nn t ≥ log\n(ω\nǫ\n)\n− log\n(\n1− ωατ\n(1− α)nǫ\n)\n.\nNext, recall that we assumed that\nǫ ≥ 2ωατ\n(1 − α)n ;\ntherefore ǫ is large enough that ωατ\n(1− α)nǫ ≤\n1 2 .\nIt is easy to prove that, for all x ≤ 12 , log(1− x) ≥ 2x.\nTherefore, under this condition in ǫ, it suffices to choose t such that\n1− α\nn t ≥ log\n(ω\nǫ\n) + 2ωατ\n(1− α)nǫ ;\nthis will occur whenever\nt ≥ n 1− α log (ω ǫ ) + 2ωατ (1− α)2ǫ .\nTaking the ceiling implies that, when\nt =\n⌈\nn 1− α log (ω ǫ ) + 2ωατ (1− α)2ǫ\n⌉\n,\nfor any initial distribution µ0, ‖µt − π‖SV(ω) ≤ ǫ.\nTherefore, by the definition of sparse estimation time,\ntSE−hog(ǫ) ≤\n⌈\nn 1− α log (ω ǫ ) + 2ωατ (1− α)2ǫ\n⌉\n.\nThis proves the theorem.\nA.3 Proofs of Mixing Time Results\nProof of Statement 1. We start out by proving that the model mixes rapidly in the sequential case. First, we assume that we select M1 large enough that, even for potentially exponential run times, the dynamics of the chain are indistinguishable from the chain with M1 = ∞. In particular, this alternate chain will have the following properties:\n• The dynamics of the X part of the chain do not depend in any way on the value of Y .\n• If at any point, ∣ ∣1 TX ∣\n∣ > 1, whenever we sample an X variable, we will re-sample it if possible to decrease the value of ∣ ∣1 TX ∣ ∣ with probability 1.\n• As long as ∣ ∣1 TX ∣\n∣ = 1 at some point in time, this will remain true, and the dynamics of the X part of the chain will be those of the chain described in Lemma 7.\nWe assume that we choose M1 large enough that these properties hold over all time windows discussed in this proof with high probability.\nNow, by the coupon collector’s problem, after O(N logN) timesteps, we have sampled all the variables with high probability. If we have sampled all the variables with high probability, then we will certainly have ∣ ∣1 TX ∣\n∣ = 1 with high probability.\nOnce we have ∣ ∣1 TX ∣\n∣ = 1, Lemma 7 ensures that, after O(N logN) additional timesteps, the X part of the chain will be close to its stationary distribution.\nMeanwhile, while ∣ ∣1 TX ∣\n∣ = 1, the dynamics of the Y part of the chain are exactly Gibbs sampling over the model with energy\nφY (Y ) = β\nN\n( 1 TY )2 .\nFor any β < 1, this is known to mix in O(N logN) time, since it satisfies Dobrushin’s condition. Therefore, after O(N logN) steps after we have ∣ ∣1 TX ∣\n∣ = 1, the Y part of the chain will also be close to its stationary distribution. Summing up the times for the above events gives us a total mixing time for this chain of\ntmix−seq = O(N logN).\nNext we prove that the model takes a potentially exponential time to mix in the asynchronous case. Assume here that our model of execution has two threads, which always either sample two X variables independently and asynchronously, or sample a single Y variable synchronously (i.e. there is never any delay when reading the value of a Y variable). For this execution pattern, we have uniformly that τi,t ≤ 1. In particular, this has τ = O(1).\nNow, consider the case where the two threads each choose to sample a variable in X that can be switched. Since at least 14 of the variables are variables in X that can be switched, this will occur with probability at least 1 16 . Given this, they will each independently switch their variable with probability 12 . This means that both variables are switched with probability 14 — but this would place the system in a state where\n∣ ∣1 TX ∣ ∣ > 1.\nAt any time when ∣ ∣1 TX ∣ ∣ = 1, this will occur with probability 164 , which implies that whenever we sample Y , the probability that ∣ ∣1 TX ∣\n∣ > 1 is at least 164 . Now, assume without loss of generality that we initialize Y such that 1TY = N . Let ρt denote the value of 1TY at\ntime t. Assuming that we sample a variable Yi with value 1, while ∣ ∣1 TX ∣\n∣ = 1, the probability that it will be switched will be\nP (value switched) = exp\n( βn−1(ρt − 1) 2 )\nexp (βn−1(ρt − 1)2) + exp (βn−1(ρt)2)\n= ( 1 + exp ( βn−1 ( (ρt) 2 − (ρt − 1)\n2 )))−1\n= ( 1 + exp ( βn−1(2ρt − 1) ))−1 .\nNote that since ρt ≤ N at all times, if β < 1,\nβN−1(2ρt − 1) ≤ 2.\nWe also can verify that, for any 0 ≤ x ≤ 2, as a basic property of the exponential function,\n(1 + exp(x)) −1 ≤ 1\n2 −\nx 6 .\nTherefore, as long as ρt > 0,\nP (value switched) ≤ 1\n2 − βρt 3n .\nTherefore, as long as ρt > 0, and ∣ ∣1 TX ∣ ∣ = 1,\nE [ρt+1|Ft] ≥ ρt + 2\n(\nN − ρt 2N − 1 2 + βρt 3N\n)\n= ρt + 2\n(\n−ρt 2N + βρt 3N\n)\n= ρt\n(\n1− 3− 2β\n3N\n)\n.\nOn the other hand, if ∣ ∣1 TX ∣\n∣ > 1, then we can pick M2 large enough such that with high probability, as long as ρt > 0, all variables Yi are always sampled to be 1. In this case,\nE [ρt+1|Ft] ≥ ρt + 2\n(\nN − ρt 2N\n)\n= ρt\n(\n1− 1\nN\n)\n+ 1.\nIn general, since ∣ ∣1 TX ∣ ∣ > 1 with probability at least 164 ,\nE [ρt+1|Ft] ≥\n(\n1− 1\n64\n)\nρt\n(\n1− 3− 2β\n3N\n)\n+ 1\n64\n(\nρt\n(\n1− 1\nN\n)\n+ 1\n)\n= ρt\n(\n1−\n(\n1− 1\n64\n)\n3− 2β\n3N −\n1\n64N\n)\n+ 1\n64\n= ρt\n(\n1− 1\nN +\n(\n1− 1\n64\n)\n2β\n3N\n)\n+ 1\n64\n≥ ρt\n(\n1− 1\nN\n)\n+ 1\n64\nThis expression has fixed point\nρ∗ = N\n64 .\nSince ρ is written as a sum of independent samples, as long as ρ > 0, the distribution of ρ is going to be exponentially concentrated around its expected value, which we have just shown is at least N64 . It follows that it is exponentially unlikely to ever achieve a value of ρ that is not positive. By the union bound, there is some t = exp(Ω(N)) such that, after t timesteps, ρt > 0 with high probability.\nBut, the actual probability that ρ > 0 in the stationary distribution is exactly 12 , by symmetry. It follows that the mixing time for the HOGWILD! chain must be greater than t; that is,\ntmix−hog ≥ exp(Ω(N)).\nThis finishes our proof of the statement.\nProof of First Part of Theorem 4. If we use the coupling from Lemma 3, then by the result of that lemma,\nP (Xi,t 6= Yi,t) ≤ exp\n(\n− 1− α\nn t\n)\n,\nIt follows by the union bound that\nP (Xt 6= Yt) ≤ n exp\n(\n− 1− α\nn t\n)\n.\nNow, assume that we initialize X0 with distribution µ0, and Y0 with the stationary distribution π. By Proposition 1, since Xt has distribution µt and Yt has distribution π, this is equivalent to saying\n‖µt − π‖TV ≤ n exp\n(\n− 1− α\nn t\n)\n.\nTherefore, in order for ‖µt − π‖TV ≤ ǫ,\nit suffices to choose t such that\nǫ = n exp\n(\n− 1− α\nn t\n)\n.\nThis occurs when t = n\n1− α log (n ǫ ) ,\nwhich is the desired expression.\nProof of Second Part of Theorem 4. If we use the coupling from Lemma 4, then by the result of that lemma,\nP (Xi,t 6= Yi,t) ≤ exp\n(\n− 1− α\nn+ ατ∗ t\n)\n,\nIt follows by the union bound that\nP (Xt 6= Yt) ≤ n exp\n(\n− 1− α\nn+ ατ∗ t\n)\n.\nNext, recall that we assumed that our HOGWILD!-Gibbs sampler had a stationary distribution; call this distribution π̄. Now, assume that we initialize X0 with distribution µ0, and Y0 with the stationary distribution π̄. Since π̄ is stationary under the HOGWILD!-Gibbs sampler, it follows that at all times t, the distribution of Yt is exactly π̄. Therefore, by Proposition 1, since Xt has distribution µt and Yt has distribution π̄, this is equivalent to saying\n‖µt − π̄‖TV ≤ n exp\n(\n− 1− α\nn+ ατ∗ t\n)\n.\nTherefore, in order for ‖µt − π̄‖TV ≤ ǫ,\nit suffices to choose t such that\nǫ = n exp\n(\n− 1− α\nn+ ατ∗ t\n)\n.\nThis occurs when\nt = n+ ατ∗ 1− α log (n ǫ ) ,\nwhich is the desired expression.\nNext, we prove that our experimental strategy provides a valid upper bound on the mixing time.\nProof of Statement 2. Consider the partial ordering of states in this Ising model defined by\nY X ⇆ ∀i, Yi ≤ Xi.\nNext, consider the coupling procedure that, at each time t, chooses a random variable Ĩt to sample and a random R̃t uniformly on [0, 1]. It then computes pt, the marginal probability of sampling the chosen variable as 1, and assigns the variable as\nnew value of XĨt =\n{\n1 if R̃t < pt, 0 otherwise .\nThis sampling procedure is equivalent to the one that we use in the experiment, and it will produce a chain that is consistent with the Ising model’s dynamics.\nIf we consider the evolution of two coupled chains X(t) and Y (t) using the same values of Ĩt and R̃t, then from the way that we constructed the coupling, it follows that if\nY (0) X(0),\nthen for any future time t, Y (t) X(t).\nThis is because if Y (t) X(t),\nthen the marginal probability of assigning 1 to any particular variable in X is always no less than the marginal probability of assigning 1 to the same variable in Y .\nTherefore, if we initialize all X(0)i = 1 and all Y (0) i = −1, and run the coupling until time Tcoupling, the time at\nwhich Y (Tcoupling) = X(Tcoupling),\nthen by the previous analysis, since for any chain U initialized at any state U (0),\nY (0) U (0) X(0),\nit follows that Y (Tcoupling) U (Tcoupling) X(Tcoupling),\nand so, Y (Tcoupling) = U (Tcoupling) = X(Tcoupling).\nSince this was true for any initial value of U , it follows that Tcoupling is a coupling time for any two initial values of the chain. Therefore, by Corollary 5.3 from Levin et al. (2009),\nmax µ0 ‖µt − π‖TV ≤ P (Tcoupling > t) .\nIf we use our definition of t̂(ǫ) where P ( Tcoupling > t̂(ǫ) ) = ǫ,\nthen this implies that max µ0 ‖µt̂ − π‖TV ≤ ǫ.\nThis in turn implies that t̂ is a upper bound on the mixing time, which is the desired result.\nA.4 Proofs of Lemmas\nProof of Lemma 1. For any set of variables I ⊂ {1, . . . , n}, let MI(µ) denote the marginal distribution of the variables in I in the distribution µ. In particular, MI includes all events A that depend only on variables in set I . Next, let X̄I and ȲI denote the values of X̄ and Ȳ on those variables in I; this will be a coupling of the distributions MI(µ) and MI(ν). Therefore, by Proposition 1,\n‖MI(µ)−MI(ν)‖TV ω ≤ P ( X̄I 6= ȲI ) = P ( ∃i ∈ I, X̄i 6= Ȳi ) .\nLet ΩI denote all events in the original probability space Ω that depend only on the variables in I . By the definition of total variation distance,\n‖MI(µ)−MI(ν)‖TV ω = max A∈ΩI |µ(A) − ν(A)| .\nTherefore, max A∈ΩI |µ(A)− ν(A)| ≤ P ( ∃i ∈ I, X̄i 6= Ȳi ) .\nNow, since this was true for any I , it is certainly true if we maximize both sides over all I with |I| ≤ ω. Therefore,\nmax I⊂{1,...,n}, |I|≤ω max A∈ΩI |µ(A)− ν(A)| ≤ max I⊂{1,...,n}, |I|≤ω\nP ( ∃i ∈ I, X̄i 6= Ȳi ) .\nThe left side can be reduced to\nmax |A|≤ω |µ(A)− ν(A)| ≤ max I⊂{1,...,n}, |I|≤ω\nP ( ∃i ∈ I, X̄i 6= Ȳi )\nand applying the definition of sparse variation distance proves the lemma.\nProof of Lemma 2. Let n be the number of variables in the model. For all k ∈ {0, 1, . . . , n}, let Zk be a random variable that takes on values in the state space of π such that, for all j ∈ {1, n},\nZk,j =\n{\nXj if j ≥ k Yj if j < k .\nIn particular, Z0 = X and Zn = Y . Now, by the triangle inequality on the total variation distance,\n‖πi(·|X)− πi(·|Y )‖TV = ‖πi(·|Z0)− πi(·|Zn)‖TV\n≤\nn ∑\nk=1\n‖πi(·|Zk−1)− πi(·|Zk)‖TV\nNext, we note that Zk−1 = Zk if Xk = Yk. Therefore,\n‖πi(·|X)− πi(·|Y )‖TV ≤\nn ∑\nk=1\n1Xk 6=Yk ‖πi(·|Zk−1)− πi(·|Zk)‖TV .\nSince Zk−1 and Zk differ only at most at index k, it follows that (Zk−1, Zk) ∈ Bk, and so,\n‖πi(·|X)− πi(·|Y )‖TV ≤ max i\nn ∑\nk=1\n1Xk 6=Yk max (U,V )∈Bk ‖πi(·|U)− πi(·|V )‖TV .\nTaking the expected value of both sides produces\nE [‖πi(·|X)− πi(·|Y )‖TV] ≤ max i\nn ∑\nk=1\nE [1Xk 6=Yk ] max (U,V )∈Bk ‖πi(·|U)− πi(·|V )‖TV\n= max i\nn ∑\nk=1\nP (Xk 6= Yk) max (U,V )∈Bk ‖πi(·|U)− πi(·|V )‖TV\n≤\n(\nmax k P (Xk 6= Yk)\n)\n(\nmax i\nn ∑\nk=1\nmax (U,V )∈Bk ‖πi(·|U)− πi(·|V )‖TV\n)\n.\nFinally, applying the definition of total influence gives us\nE [‖πi(·|X)− πi(·|Y )‖TV] ≤ αmax k P (Xk 6= Yk) .\nThis proves the lemma.\nProof of Lemma 3. Define the coupling as follows. Start in state (X0, Y0), and at each timestep, choose a single variable i uniformly at random for both chains to sample. Then, sample the selected variable in both chains using the optimal coupling guaranteed by Proposition 1. Iterated over time, this defines a full coupling of the two chains.\nNext, consider the event that Xi,t+1 6= Yi,t+1. This event will occur if one of two things happens: either we didn’t sample variable i at time t and Xi,t 6= Yi,t; or we did sample variable i at time t, and the sampled variables were not equal. Since the probability of sampling variable i is 1\nn , and we know the probability that the sampled variables were\nnot equal from Proposition 1, it follows that, by the law of total probability,\nP (Xi,t+1 6= Yi,t+1) =\n(\n1− 1\nn\n)\nP (Xi,t 6= Yi,t) + 1\nn E [‖πi(·|Xt)− πi(·|Yt)‖ TV] ,\nwhere πi(·|Xt) denotes the conditional distribution of variable i in π given the values of the other variables in Xt. Next, we apply the Lemma 2, which gives us\nP (Xi,t+1 6= Yi,t+1) ≤\n(\n1− 1\nn\n)\nP (Xi,t 6= Yi,t) + α\nn max j P (Xj,t 6= Yj,t) .\nMaximizing both sides over i produces\nmax i P (Xi,t+1 6= Yi,t+1) ≤\n(\n1− 1\nn\n)\nmax i\nP (Xi,t 6= Yi,t) + α\nn max j P (Xj,t 6= Yj,t)\n=\n(\n1− 1\nn +\nα\nn\n)\nmax i P (Xi,t 6= Yi,t) .\nApplying this inequality recursively, and noting that maxi P (Xi,0 6= Yi,0) ≤ 1, we get\nmax i P (Xi,t 6= Yi,t) ≤\n(\n1− 1− α\nn\n)t\n≤ exp\n(\n− 1− α\nn t\n)\n.\nThis gives us the desired result.\nProof of Lemma 4. Define the coupling as follows. Start in state (X0, Y0), and at each timestep, choose a single variable i uniformly at random for both chains to sample. Similarly, choose the HOGWILD! delays τ̃i,t to also be the same between the two chains. At time t, let Ũt denote the state that would be read by chain X’s sampler based on the delays, and similarly let Ṽt denote the state that would be read by chain Y ’s sampler. That is,\nŨi,t = Xi,t−τ̃i,t ,\nand similarly, Ṽi,t = Yi,t−τ̃i,t .\nAs in the sequential case, we sample the selected variable in both chains using the optimal coupling guaranteed by Proposition 1. Iterated over time, this defines a full coupling of the two chains.\nWe follow the same argument as in the sequential case. First, consider the event that Xi,t+1 6= Yi,t+1. This event will occur if one of two things happens: either we didn’t sample variable i at time t and Xi,t 6= Yi,t; or we did sample variable i at time t, and the sampled variables were not equal. Since the probability of sampling variable i is 1\nn , and\nwe know the probability that the sampled variables were not equal from Proposition 1, it follows that, by the law of total probability,\nP (Xi,t+1 6= Yi,t+1) =\n(\n1− 1\nn\n)\nP (Xi,t 6= Yi,t) + 1\nn E\n[∥\n∥ ∥ πi(·|Ũt)− πi(·|Ṽt)\n∥ ∥ ∥ TV ] ,\nwhere πi(·|Xt) denotes the conditional distribution of variable i in π given the values of the other variables in Xt. Next, we apply the Lemma 2, which gives us\nP (Xi,t+1 6= Yi,t+1) ≤\n(\n1− 1\nn\n)\nP (Xi,t 6= Yi,t) + α\nn max j P (Uj,t 6= Vj,t)\n=\n(\n1− 1\nn\n)\nP (Xi,t 6= Yi,t) + α\nn max j\n∞ ∑\nk=0\nP (τ̃j,t = k)P (Xj,t−k 6= Yj,t−k) .\nNow, if we let φt = max\ni P (Xi,t 6= Yi,t) ,\nthen maximizing the previous expression over i implies that\nφt+1 ≤\n(\n1− 1\nn\n)\nφt + α\nn max j\n∞ ∑\nk=0\nP (τ̃j,t = k)φt−k.\nNow, for some constant r ≤ n−1, let yt be defined to be the sequence\nyt = exp(−rt).\nThen, notice that (\n1− 1\nn\n)\nyt + α\nn max j\n∞ ∑\nk =0\nP (τ̃j,t = k) yt−k =\n(\n1− 1\nn\n)\nexp(−rt) + α\nn max j\n∞ ∑\nk=0\nP (τ̃j,t = k) exp(−rt+ rk)\n= exp(−rt)\n(\n(\n1− 1\nn\n)\n+ α\nn max j\n∞ ∑\nk=0\nP (τ̃j,t = k) exp(rk)\n)\n= exp(−rt)\n((\n1− 1\nn\n)\n+ α\nn max j E [exp(rτ̃j,t)]\n)\n.\nNow, by the convexity of the exponential function, (\n1− 1\nn\n)\nyt + α\nn max j\n∞ ∑\nk =0\nP (τ̃j,t = k) yt−k ≤ exp(−rt)\n((\n1− 1\nn\n)\n+ α\nn max j\n(\n1 + rnE\n[\nexp\n(\nτ̃j,t n\n)\n− 1\n]))\n.\nApplying the constraint that\nE\n[\nexp\n(\nτ̃j,t n\n)]\n≤ 1 + τ∗\nn ,\nwe can reduce this to (\n1− 1\nn\n)\nyt + α\nn max j\n∞ ∑\nk =0\nP (τ̃j,t = k) yt−k ≤ exp(−rt)\n((\n1− 1\nn\n)\n+ α\nn (1 + rτ∗)\n)\n= yt+1 exp(r)\n(\n1− 1\nn +\nα n +\nrατ∗\nn\n)\n≤ yt+1 exp(r) exp\n(\n− 1\nn +\nα n +\nrατ∗\nn\n)\n= yt+1 exp\n(\nn+ ατ∗\nn r −\n1− α\nn\n)\n.\nNow, we choose r such that the argument to this exponential is zero; that is, we choose\nr = 1− α\nn+ ατ∗ .\nNotice that this choice satisfies the earlier assumption that 0 < r ≤ n−1. Using this choice, we can conclude that\nyt+1 ≥\n(\n1− 1\nn\n)\nyt + α\nn max j\n∞ ∑\nk=0\nP (τ̃j,t = k) yt−k.\nTherefore, by Lemma 6,\nφt ≤ yt = exp\n(\n− 1− α\nn+ ατ∗ t\n)\n.\nThis proves the lemma.\nProof of Lemma 5. Define the coupling as follows. Start in state (X0, Y0), and at each timestep, choose a single variable Ĩt uniformly at random for both chains to sample. Then, choose the delays τ̃i,t for the HOGWILD! chain Xt. At time t, let Ũt denote the state that would be read by chain X’s sampler based on the delays. That is,\nŨi,t = Xi,t−τ̃i,t .\nAs done previously, we sample the selected variable Ĩt in both chains using the optimal coupling guaranteed by Proposition 1. Iterated over time, this defines a full coupling of the two chains.\nWe follow a similar argument as in the above lemmas used to bound the mixing time. First, consider the event that Xi,t+1 6= Yi,t+1. This event will occur if one of two things happens: either we didn’t sample variable i at time t and Xi,t 6= Yi,t; or we did sample variable i at time t, and the sampled variables were not equal. Since the probability of\nsampling variable i is 1 n , and we know the probability that the sampled variables were not equal from Proposition 1, it follows that, by the law of total probability,\nP (Xi,t+1 6= Yi,t+1) =\n(\n1− 1\nn\n)\nP (Xi,t 6= Yi,t) + 1\nn E\n[ ∥\n∥ ∥ πi(·|Ũt)− πi(·|Ỹt)\n∥ ∥ ∥TV ] ,\nwhere πi(·|Xt) denotes the conditional distribution of variable i in π given the values of the other variables in Xt. Next, we apply the Lemma 2, which gives us\nP (Xi,t+1 6= Yi,t+1) ≤\n(\n1− 1\nn\n)\nP (Xi,t 6= Yi,t) + α\nn max j P (Uj,t 6= Yj,t)\n=\n(\n1− 1\nn\n)\nP (Xi,t 6= Yi,t) + α\nn max j\n∞ ∑\nk=0\nP (τ̃j,t = k)P (Xj,t−k 6= Yj,t) .\nIn order to evaluate this, we notice that the event Xj,t−k 6= Yj,t can happen only if either Xj,t 6= Yj,t or at some time s, where t− k ≤ s < t, we sampled variable j (that is, Ĩs = j). Therefore, by the union bound,\nP (Xj,t−k 6= Yj,t) ≤ P (Xj,t 6= Yj,t) +\nt−1 ∑\ns=t−k\nP ( Ĩs = j ) .\nSince the probability of sampling variable j at any time is always just 1 n , we can reduce this to\nP (Xj,t−k 6= Yj,t) ≤ P (Xj,t 6= Yj,t) + k\nn .\nSubstituting this into our previous expression produces\nP (Xi,t+1 6= Yi,t+1) ≤\n(\n1− 1\nn\n)\nP (Xi,t 6= Yi,t) + α\nn max j\n∞ ∑\nk=0\nP (τ̃j,t = k)\n(\nP (Xj,t 6= Yj,t) + k\nn\n)\n=\n(\n1− 1− α\nn\n)\nP (Xi,t 6= Yi,t) + α\nn2 max j E [τ̃j,t]\n≤\n(\n1− 1− α\nn\n)\nP (Xi,t 6= Yi,t) + ατ\nn2 .\nNow, if we let φt = max\ni P (Xi,t 6= Yi,t) ,\nthen maximizing the previous expression over i implies that\nφt+1 ≤\n(\n1− 1− α\nn\n)\nφt + ατ\nn2 .\nSubtracting from both sides to identify the fixed point gives us\nφt+1 − ατ\n(1− α)n ≤\n(\n1− 1− α\nn\n)\nφt + ατ\nn2 −\nατ\n(1 − α)n\n=\n(\n1− 1− α\nn\n)(\nφt − ατ\n(1− α)n\n)\n.\nApplying this inequality recursively lets us conclude that\nφt − ατ\n(1 − α)n ≤\n(\n1− 1− α\nn\n)t (\nφ0 − ατ\n(1− α)n\n)\n≤ exp\n(\n− 1− α\nn t\n)\n,\nand so,\nφt ≤ exp\n(\n− 1− α\nn t\n)\n+ ατ\n(1 − α)n .\nThis is the desired expression.\nProof of Lemma 6. We will approach this by induction. The base case holds by assumption, since x0 = y0. For the inductive case, if xt ≤ yt for all t ≤ T , then\nxT+1 ≤ fT (xT , xT−1, . . . , x0).\nBy monotonicity and the inductive hypothesis,\nxT+1 ≤ fT (yT , yT−1, . . . , y0),\nand therefore, xT+1 ≤ yT+1.\nApplying induction to this proves the lemma.\nProof of Lemma 7. Assume that, as we run the chain described in this lemma, we also assign a “color” to each of the variables. All variables with an initial value of 1 start out as black, and all other variables start out as white. Let Bt denote the set of variables that are colored black at any time t, and let St denote the sum of all variables that are colored black at that time. We re-color variables according to the following procedure:\n1. Whenever we change a variable’s value from −1 to 1, if it is colored white, color it black.\n2. Whenever we change a variable’s value from −1 to 1, if it is already colored black, choose a random variable that had value −1 at time t, and if it is white, color it black.\nNote that as a consequence of this result, a variable that is colored white always has value −1. We will prove the following sub-result by induction on t: given a time t, set Bt, and sum St, the values of the variables in Bt are uniformly distributed over the set of possible assignments that are consistent with St. (Base Case.) The base case is straightforward. Since B0 is just the set of variables that have value 1, there is only one possible assignment that is consistent with S0: the assignment in which all variables take on the value 1. Since this assignment actually occurs with probability 1, the statement holds.\n(Inductive Case.) Assume that the sub-result is true at time t. The sampler chooses a new variable i to sample. One of the following things will happen:\n• We don’t re-color any variables, or change the values of any variables in Bt. In this case, Bt+1 = Bt and St+1 = St. Since there is no change to B or S, all consistent assignments of the black variables are still equiprobable.\n• We don’t re-color any variables, but we do change the value of some variable in Bt (by changing its value from 1 to −1). Since we sampled the variable i at random, all consistent assignments of the black variables will remain equiprobable.\n• We re-color some variable j black. There are two events that can cause this:\n– We could have sampled variable j (that is i = j), and changed its value from −1 to 1. This will happen with probability\n1 N · 1 2 = 1 2N\n– We could have sampled a variable i 6= j that is already colored black, changed its value from −1 to 1, and then chosen variable j at random to color black. Since, at time t, the number of variables with value −1 must be\nN + 1\n2 ,\n(since we are about to change a value from −1 to 1), this will happen with probability\nu N · 1 2 · 2 N + 1 =\nu\nN(N + 1)\nwhere u is the number of black-colored variables that have value −1 at time t.\nFrom this analysis, it follows that, given that we re-colored some variable j black, it will have value −1 with probability\nP (variable j has value −1) = u N(N+1)\n1 2N + u N(N+1)\n= u\nu+ N+12 .\nIn particular, at time t, the number of variables that are in Bt is\nN − 1\n2 + u,\nsince all variables with value 1 are in Bt, and Bt is stipulated to contain u additional variables with value −1. It follows that at time t+ 1, the number of variables that are in Bt is\nN + 1\n2 + u,\nand there will still be u variables in Bt+1 with value −1. Therefore, the fraction of variables in Bt+1 that have value −1 will be\nu\nu+ N+12 .\nNote that this is exactly equal to the probability that variable j will have value −1. Combining this with the inductive hypothesis shows that the consistent states will all remain equiprobable in this case.\nSince the consistent states remain equiprobable in all of the possible cases, it follows from the law of total probability that the consistent states are equiprobable in all cases. This shows that the sub-result holds in the inductive case.\nWe have now showed that given a time t, set Bt, and sum St, the values of the variables in Bt are uniformly distributed over the set of possible assignments that are consistent with St. This implies that if T1 is the first time at which the set Bt contains all variables, the value of XT is are uniformly distributed over all possible states with 1 TX = 1.\nNow, we performed this construction for a particular polarity of swaps (i.e. focusing on switches from −1 to 1), but by symmetry we could just as easily have used the same construction with the signs of all the variables reversed. If we let T−1 be the first time at which the set Bt contains all variables using this reverse-polarity construction, then the value of XT is uniformly distributed over all possible states with 1TX = −1.\nLet T ∗ be a random variable that is T1 with probability 12 and T−1 with probability 1 2 . It follows that at time T ∗, the distribution of XT∗ will be π. Therefore, T ∗ is a strong stationary time for this chain. By the properties of strong stationary times,\ntmix ≤ 4E [T ∗] .\nTo bound the mixing time, we start by noticing that\nE [T ∗] = 1\n2 E [T1] +\n1 2 E [T−1] = E [T1] .\nIf we let T̄ be the first time at which each variable has been set to 1 at least once, then\nT1 ≤ T̄ .\nNow, if we sample a variable, the probability that we will set it to 1 is (roughly) 14 . It follows from the coupon collector’s problem bound that the expected amount of time required to set all variables to 1 at least once is\nE [ T̄ ] = O(n log n).\nCombining this with the previous inequalities lets us conclude that\ntmix = O(n logn),\nwhich proves the lemma.\nSecondary Literature\nDiaconis, Persi. Group representations in probability and statistics. Lecture Notes-Monograph Series, 11:i–192, 1988.\nDiaconis, Persi and Shahshahani, Mehrdad. Generating a random permutation with random transpositions. Probability Theory and Related Fields, 57(2):159–179, 1981.\nLevin, David Asher, Peres, Yuval, and Wilmer, Elizabeth Lee. Markov chains and mixing times. American Mathematical Soc., 2009."
    } ],
    "references" : [ {
      "title" : "Taming the wild: A unified analysis of HOGWILD!-style algorithms",
      "author" : [ "De Sa", "Christopher", "Zhang", "Ce", "Olukotun", "Kunle", "Ré" ],
      "venue" : "In NIPS. NIPS Foundation,",
      "citeRegEx" : "Sa et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Sa et al\\.",
      "year" : 2015
    }, {
      "title" : "Rapidly mixing gibbs sampling for a class of factor graphs using hierarchy width",
      "author" : [ "De Sa", "Christopher M", "Zhang", "Ce", "Olukotun", "Kunle", "Ré", "Christopher" ],
      "venue" : "Advances in Neural Information Processing Systems",
      "citeRegEx" : "Sa et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Sa et al\\.",
      "year" : 2015
    }, {
      "title" : "Central limit theorem for nonstationary markov chains",
      "author" : [ "Dobrushin", "RL" ],
      "venue" : "i. Theory of Probability & Its Applications,",
      "citeRegEx" : "Dobrushin and RL.,? \\Q1956\\E",
      "shortCiteRegEx" : "Dobrushin and RL.",
      "year" : 1956
    }, {
      "title" : "Dobrushin conditions and systematic scan",
      "author" : [ "Dyer", "Martin", "Goldberg", "Leslie Ann", "Jerrum", "Mark" ],
      "venue" : "In in Proc. 10th International Workshop on Randomization and Computation, Lecture Notes in Computer Science",
      "citeRegEx" : "Dyer et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Dyer et al\\.",
      "year" : 2006
    }, {
      "title" : "Parallel gibbs sampling: From colored fields to thin junction trees",
      "author" : [ "Gonzalez", "Joseph", "Low", "Yucheng", "Gretton", "Arthur", "Guestrin", "Carlos" ],
      "venue" : "In AISTATS, pp",
      "citeRegEx" : "Gonzalez et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Gonzalez et al\\.",
      "year" : 2011
    }, {
      "title" : "Sampling from probabilistic submodular models",
      "author" : [ "Gotovos", "Alkis", "Hassani", "Hamed", "Krause", "Andreas" ],
      "venue" : "Advances in Neural Information Processing Systems",
      "citeRegEx" : "Gotovos et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Gotovos et al\\.",
      "year" : 2015
    }, {
      "title" : "Rapidly mixing markov chains: A comparison of techniques",
      "author" : [ "Guruswami", "Venkatesan" ],
      "venue" : null,
      "citeRegEx" : "Guruswami and Venkatesan.,? \\Q2000\\E",
      "shortCiteRegEx" : "Guruswami and Venkatesan.",
      "year" : 2000
    }, {
      "title" : "A simple condition implying rapid mixing of single-site dynamics on spin systems",
      "author" : [ "Hayes", "Thomas P" ],
      "venue" : "In Foundations of Computer Science,",
      "citeRegEx" : "Hayes and P.,? \\Q2006\\E",
      "shortCiteRegEx" : "Hayes and P.",
      "year" : 2006
    }, {
      "title" : "Beitrag zur theorie des ferromagnetismus",
      "author" : [ "Ising", "Ernst" ],
      "venue" : "Zeitschrift für Physik A Hadrons and Nuclei,",
      "citeRegEx" : "Ising and Ernst.,? \\Q1925\\E",
      "shortCiteRegEx" : "Ising and Ernst.",
      "year" : 1925
    }, {
      "title" : "Analyzing hogwild parallel gaussian gibbs sampling",
      "author" : [ "Johnson", "Matthew", "Saunderson", "James", "Willsky", "Alan" ],
      "venue" : "In NIPS, pp",
      "citeRegEx" : "Johnson et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Johnson et al\\.",
      "year" : 2013
    }, {
      "title" : "Probabilistic graphical models: principles and techniques",
      "author" : [ "Koller", "Daphne", "Friedman", "Nir" ],
      "venue" : "MIT press,",
      "citeRegEx" : "Koller et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Koller et al\\.",
      "year" : 2009
    }, {
      "title" : "Markov chains and mixing times",
      "author" : [ "Levin", "David Asher", "Peres", "Yuval", "Wilmer", "Elizabeth Lee" ],
      "venue" : "American Mathematical Soc.,",
      "citeRegEx" : "Levin et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Levin et al\\.",
      "year" : 2009
    }, {
      "title" : "Asynchronous stochastic coordinate descent: Parallelism and convergence properties. SIOPT",
      "author" : [ "Liu", "Ji", "Wright", "Stephen J" ],
      "venue" : null,
      "citeRegEx" : "Liu et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2015
    }, {
      "title" : "An asynchronous parallel stochastic coordinate descent algorithm",
      "author" : [ "Liu", "Ji", "Wright", "Stephen J", "Ré", "Christopher", "Bittorf", "Victor", "Sridhar", "Srikrishna" ],
      "venue" : null,
      "citeRegEx" : "Liu et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2015
    }, {
      "title" : "The BUGS project: evolution, critique and future directions",
      "author" : [ "Lunn", "David", "Spiegelhalter", "Thomas", "Andrew", "Best", "Nicky" ],
      "venue" : "Statistics in medicine,",
      "citeRegEx" : "Lunn et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Lunn et al\\.",
      "year" : 2009
    }, {
      "title" : "Perturbed iterate analysis for asynchronous stochastic optimization",
      "author" : [ "Mania", "Horia", "Pan", "Xinghao", "Papailiopoulos", "Dimitris", "Recht", "Benjamin", "Ramchandran", "Kannan", "Jordan", "Michael I" ],
      "venue" : "arXiv preprint arXiv:1507.06970,",
      "citeRegEx" : "Mania et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Mania et al\\.",
      "year" : 2015
    }, {
      "title" : "Factorie: Probabilistic programming via imperatively defined factor graphs",
      "author" : [ "McCallum", "Andrew", "Schultz", "Karl", "Singh", "Sameer" ],
      "venue" : "In NIPS, pp",
      "citeRegEx" : "McCallum et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "McCallum et al\\.",
      "year" : 2009
    }, {
      "title" : "Frogwild!: Fast pagerank approximations on graph engines",
      "author" : [ "Mitliagkas", "Ioannis", "Borokhovich", "Michael", "Dimakis", "Alexandros G", "Caramanis", "Constantine" ],
      "venue" : null,
      "citeRegEx" : "Mitliagkas et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Mitliagkas et al\\.",
      "year" : 2015
    }, {
      "title" : "Simple, correct parallelization for blocked gibbs sampling",
      "author" : [ "Neubig", "Graham" ],
      "venue" : "Technical report, Nara Institute of Science and Technology,",
      "citeRegEx" : "Neubig and Graham.,? \\Q2014\\E",
      "shortCiteRegEx" : "Neubig and Graham.",
      "year" : 2014
    }, {
      "title" : "Distributed inference for latent dirichlet allocation",
      "author" : [ "Newman", "David", "Smyth", "Padhraic", "Welling", "Max", "Asuncion", "Arthur U" ],
      "venue" : "In NIPS, pp",
      "citeRegEx" : "Newman et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Newman et al\\.",
      "year" : 2007
    }, {
      "title" : "Distributed gibbs: A memory-bounded sampling-based dcop algorithm",
      "author" : [ "Nguyen", "Duc Thien", "Yeoh", "William", "Lau", "Hoong Chuin" ],
      "venue" : "In Proceedings of the 2013 international conference on Autonomous agents and multi-agent systems,",
      "citeRegEx" : "Nguyen et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Nguyen et al\\.",
      "year" : 2013
    }, {
      "title" : "Hogwild: A lock-free approach to parallelizing stochastic gradient descent",
      "author" : [ "Niu", "Feng", "Recht", "Benjamin", "Re", "Christopher", "Wright", "Stephen" ],
      "venue" : "In NIPS, pp",
      "citeRegEx" : "Niu et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Niu et al\\.",
      "year" : 2011
    }, {
      "title" : "Dogwild!–Distributed Hogwild for CPU & GPU",
      "author" : [ "Noel", "Cyprien", "Osindero", "Simon" ],
      "venue" : null,
      "citeRegEx" : "Noel et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Noel et al\\.",
      "year" : 2014
    }, {
      "title" : "Exact sampling with coupled markov chains and applications to statistical mechanics",
      "author" : [ "Propp", "James Gary", "Wilson", "David Bruce" ],
      "venue" : "Random Structures & Algorithms,",
      "citeRegEx" : "Propp et al\\.,? \\Q1996\\E",
      "shortCiteRegEx" : "Propp et al\\.",
      "year" : 1996
    }, {
      "title" : "Incremental knowledge base construction using deepdive",
      "author" : [ "Shin", "Jaeho", "Wu", "Sen", "Wang", "Feiran", "De Sa", "Christopher", "Zhang", "Ce", "Ré" ],
      "venue" : null,
      "citeRegEx" : "Shin et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Shin et al\\.",
      "year" : 2015
    }, {
      "title" : "An architecture for parallel topic models",
      "author" : [ "Smola", "Alexander", "Narayanamurthy", "Shravan" ],
      "venue" : null,
      "citeRegEx" : "Smola et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Smola et al\\.",
      "year" : 2010
    }, {
      "title" : "Asynchronous distributed learning of topic models",
      "author" : [ "Smyth", "Padhraic", "Welling", "Max", "Asuncion", "Arthur U" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "Smyth et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Smyth et al\\.",
      "year" : 2009
    }, {
      "title" : "The Free Lunch Is Over: A Fundamental Turn Toward Concurrency in Software",
      "author" : [ "Sutter", "Herb" ],
      "venue" : "Dr. Dobb’s Journal,",
      "citeRegEx" : "Sutter and Herb.,? \\Q2005\\E",
      "shortCiteRegEx" : "Sutter and Herb.",
      "year" : 2005
    }, {
      "title" : "Asynchronous distributed gibbs sampling",
      "author" : [ "Terenin", "Alexander", "Simpson", "Daniel", "Draper", "David" ],
      "venue" : "arXiv preprint arXiv:1509.08999,",
      "citeRegEx" : "Terenin et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Terenin et al\\.",
      "year" : 2015
    }, {
      "title" : "Training sparse natural image models with a fast gibbs sampler of an extended state space",
      "author" : [ "Theis", "Lucas", "Sohl-dickstein", "Jascha", "Bethge", "Matthias" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Theis et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Theis et al\\.",
      "year" : 2012
    }, {
      "title" : "Scalable coordinate descent approaches to parallel matrix factorization for recommender systems",
      "author" : [ "Yu", "Hsiang-Fu", "Hsieh", "Cho-Jui", "Si", "Dhillon", "Inderjit S" ],
      "venue" : "In ICDM,",
      "citeRegEx" : "Yu et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Yu et al\\.",
      "year" : 2012
    }, {
      "title" : "DimmWitted: A study of main-memory statistical analytics",
      "author" : [ "Zhang", "Ce", "Ré", "Christopher" ],
      "venue" : null,
      "citeRegEx" : "Zhang et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Zhang et al\\.",
      "year" : 2014
    }, {
      "title" : "This proposition relates the concept of a coupling with the total variation distance between the distributions of two random variables",
      "author" : [ "Levin" ],
      "venue" : null,
      "citeRegEx" : "Levin,? \\Q2009\\E",
      "shortCiteRegEx" : "Levin",
      "year" : 2009
    }, {
      "title" : "Group representations in probability and statistics",
      "author" : [ "Diaconis", "Persi" ],
      "venue" : "Lecture Notes-Monograph Series,",
      "citeRegEx" : "Diaconis and Persi.,? \\Q1988\\E",
      "shortCiteRegEx" : "Diaconis and Persi.",
      "year" : 1988
    }, {
      "title" : "Generating a random permutation with random transpositions",
      "author" : [ "Diaconis", "Persi", "Shahshahani", "Mehrdad" ],
      "venue" : "Probability Theory and Related Fields,",
      "citeRegEx" : "Diaconis et al\\.,? \\Q1981\\E",
      "shortCiteRegEx" : "Diaconis et al\\.",
      "year" : 1981
    }, {
      "title" : "Markov chains and mixing times",
      "author" : [ "Levin", "David Asher", "Peres", "Yuval", "Wilmer", "Elizabeth Lee" ],
      "venue" : "American Mathematical Soc.,",
      "citeRegEx" : "Levin et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Levin et al\\.",
      "year" : 2009
    } ],
    "referenceMentions" : [ {
      "referenceID" : 17,
      "context" : "Because of this and other useful properties of Gibbs sampling, many systems use Gibbs sampling to perform inference on big data Newman et al. (2007); Lunn et al.",
      "startOffset" : 128,
      "endOffset" : 149
    }, {
      "referenceID" : 14,
      "context" : "(2007); Lunn et al. (2009); McCallum et al.",
      "startOffset" : 8,
      "endOffset" : 27
    }, {
      "referenceID" : 14,
      "context" : "(2007); Lunn et al. (2009); McCallum et al. (2009); Smola & Narayanamurthy (2010); Theis et al.",
      "startOffset" : 8,
      "endOffset" : 51
    }, {
      "referenceID" : 14,
      "context" : "(2007); Lunn et al. (2009); McCallum et al. (2009); Smola & Narayanamurthy (2010); Theis et al.",
      "startOffset" : 8,
      "endOffset" : 82
    }, {
      "referenceID" : 14,
      "context" : "(2007); Lunn et al. (2009); McCallum et al. (2009); Smola & Narayanamurthy (2010); Theis et al. (2012); Zhang & Ré (2014).",
      "startOffset" : 8,
      "endOffset" : 103
    }, {
      "referenceID" : 14,
      "context" : "(2007); Lunn et al. (2009); McCallum et al. (2009); Smola & Narayanamurthy (2010); Theis et al. (2012); Zhang & Ré (2014). Since Gibbs sampling is such a ubiquitous algorithm, it is important to try to optimize its execution speed on modern hardware.",
      "startOffset" : 8,
      "endOffset" : 122
    }, {
      "referenceID" : 14,
      "context" : "(2007); Lunn et al. (2009); McCallum et al. (2009); Smola & Narayanamurthy (2010); Theis et al. (2012); Zhang & Ré (2014). Since Gibbs sampling is such a ubiquitous algorithm, it is important to try to optimize its execution speed on modern hardware. Unfortunately, while modern computer hardware has been trending towards more parallel architectures Sutter (2005), traditional Gibbs sampling is an inherently sequential algorithm; that is, the outer loop in Algorithm 1 is not embarrassingly parallel.",
      "startOffset" : 8,
      "endOffset" : 365
    }, {
      "referenceID" : 14,
      "context" : "(2007); Lunn et al. (2009); McCallum et al. (2009); Smola & Narayanamurthy (2010); Theis et al. (2012); Zhang & Ré (2014). Since Gibbs sampling is such a ubiquitous algorithm, it is important to try to optimize its execution speed on modern hardware. Unfortunately, while modern computer hardware has been trending towards more parallel architectures Sutter (2005), traditional Gibbs sampling is an inherently sequential algorithm; that is, the outer loop in Algorithm 1 is not embarrassingly parallel. Furthermore, for sparse models, very little work happens within each iteration, meaning it is difficult to extract much parallelism from the body of this outer loop. Since traditional Gibbs sampling parallelizes so poorly, it is interesting to study variants of Gibbs sampling that can be parallelized. Several such variants have been proposed, including applications to latent Dirichlet allocation Newman et al. (2007); Smola & Narayanamurthy (2010) and distributed constraint optimization problems Nguyen et al.",
      "startOffset" : 8,
      "endOffset" : 923
    }, {
      "referenceID" : 14,
      "context" : "(2007); Lunn et al. (2009); McCallum et al. (2009); Smola & Narayanamurthy (2010); Theis et al. (2012); Zhang & Ré (2014). Since Gibbs sampling is such a ubiquitous algorithm, it is important to try to optimize its execution speed on modern hardware. Unfortunately, while modern computer hardware has been trending towards more parallel architectures Sutter (2005), traditional Gibbs sampling is an inherently sequential algorithm; that is, the outer loop in Algorithm 1 is not embarrassingly parallel. Furthermore, for sparse models, very little work happens within each iteration, meaning it is difficult to extract much parallelism from the body of this outer loop. Since traditional Gibbs sampling parallelizes so poorly, it is interesting to study variants of Gibbs sampling that can be parallelized. Several such variants have been proposed, including applications to latent Dirichlet allocation Newman et al. (2007); Smola & Narayanamurthy (2010) and distributed constraint optimization problems Nguyen et al.",
      "startOffset" : 8,
      "endOffset" : 954
    }, {
      "referenceID" : 14,
      "context" : "(2007); Lunn et al. (2009); McCallum et al. (2009); Smola & Narayanamurthy (2010); Theis et al. (2012); Zhang & Ré (2014). Since Gibbs sampling is such a ubiquitous algorithm, it is important to try to optimize its execution speed on modern hardware. Unfortunately, while modern computer hardware has been trending towards more parallel architectures Sutter (2005), traditional Gibbs sampling is an inherently sequential algorithm; that is, the outer loop in Algorithm 1 is not embarrassingly parallel. Furthermore, for sparse models, very little work happens within each iteration, meaning it is difficult to extract much parallelism from the body of this outer loop. Since traditional Gibbs sampling parallelizes so poorly, it is interesting to study variants of Gibbs sampling that can be parallelized. Several such variants have been proposed, including applications to latent Dirichlet allocation Newman et al. (2007); Smola & Narayanamurthy (2010) and distributed constraint optimization problems Nguyen et al. (2013). In one popular variant, multiple threads run the Gibbs sampling update rule in parallel without locks, a strategy called asynchronous or HOGWILD! execution—in this paper, we use these two terms interchangeably.",
      "startOffset" : 8,
      "endOffset" : 1024
    }, {
      "referenceID" : 7,
      "context" : "But when can we be sure that HOGWILD! Gibbs sampling will produce accurate results? Except for the case of Gaussian random variables Johnson et al. (2013), there is no existing analysis by which we can ensure that asynchronous Gibbs sampling will be appropriate for a particular application.",
      "startOffset" : 133,
      "endOffset" : 155
    }, {
      "referenceID" : 7,
      "context" : "But when can we be sure that HOGWILD! Gibbs sampling will produce accurate results? Except for the case of Gaussian random variables Johnson et al. (2013), there is no existing analysis by which we can ensure that asynchronous Gibbs sampling will be appropriate for a particular application. Even the problems posed by HOGWILD!-Gibbs are poorly understood, and their solutions more so. As we will see in the following sections, there are two main issues when analyzing asynchronous Gibbs sampling. Firstly, we will show by example that, surprisingly, HOGWILD!-Gibbs can be biased—unlike sequential Gibbs, it does not always produce samples that are arbitrarily close to the target distribution. Secondly, we will show that the mixing time (the time for the chain to become close to its stationary distribution) of asynchronous Gibbs sampling can be at worst exponentially greater than that of the corresponding sequential chain. To address the issue of bias, we need some way to describe the distance between the target distribution π and the distribution of the samples produced by HOGWILD!-Gibbs. The standard notion to use here is the total variation distance, but for the task of computing marginal probabilities, it gives an overestimate on the error caused by bias. To better describe the bias, we introduce a new notion of statistical distance, the sparse variation distance. While this relaxed notion of statistical distance is interesting in its own right, its main benefit here is that it more tightly measures the effect of bias on marginal estimation. Our main goal is to identify conditions under which the bias and mixing time of asynchronous Gibbs can be bounded. One parameter that has been used to great effect in the analysis of Gibbs sampling is the total influence α of a model. The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al.",
      "startOffset" : 133,
      "endOffset" : 2123
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006).",
      "startOffset" : 325,
      "endOffset" : 344
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions: • We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling.",
      "startOffset" : 325,
      "endOffset" : 358
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions: • We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling. • To bound the bias, we prove that for classes of models with bounded total influence α = O(1), if sequential Gibbs sampling achieves small sparse variation distance to π in O(n) steps, where n is the number of variables, then HOGWILD!-Gibbs samples achieve the same distance in at most O(1) more steps. • For models that satisfy Dobrushin’s condition (α < 1), we show that the mixing time bounds of sequential and HOGWILD!-Gibbs sampling differ only by a factor of 1 +O(n). • We validate our results experimentally and show that, by using asynchronous execution, we can achieve wallclock speedups of up to 2.8× on real problems. 2 Related Work Much work has been done on the analysis of parallel Gibbs samplers. One simple way to parallelize Gibbs sampling is to run multiple chains independently in parallel: this heuristic uses parallelism to produce more samples overall, but does not produce accurate samples more quickly. Additionally, this strategy is sometimes worse than other strategies on a systems level Smola & Narayanamurthy (2010); Zhang & Ré (2014), typically because it requires additional memory to maintain multiple models of the chain.",
      "startOffset" : 325,
      "endOffset" : 1641
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions: • We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling. • To bound the bias, we prove that for classes of models with bounded total influence α = O(1), if sequential Gibbs sampling achieves small sparse variation distance to π in O(n) steps, where n is the number of variables, then HOGWILD!-Gibbs samples achieve the same distance in at most O(1) more steps. • For models that satisfy Dobrushin’s condition (α < 1), we show that the mixing time bounds of sequential and HOGWILD!-Gibbs sampling differ only by a factor of 1 +O(n). • We validate our results experimentally and show that, by using asynchronous execution, we can achieve wallclock speedups of up to 2.8× on real problems. 2 Related Work Much work has been done on the analysis of parallel Gibbs samplers. One simple way to parallelize Gibbs sampling is to run multiple chains independently in parallel: this heuristic uses parallelism to produce more samples overall, but does not produce accurate samples more quickly. Additionally, this strategy is sometimes worse than other strategies on a systems level Smola & Narayanamurthy (2010); Zhang & Ré (2014), typically because it requires additional memory to maintain multiple models of the chain.",
      "startOffset" : 325,
      "endOffset" : 1660
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions: • We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling. • To bound the bias, we prove that for classes of models with bounded total influence α = O(1), if sequential Gibbs sampling achieves small sparse variation distance to π in O(n) steps, where n is the number of variables, then HOGWILD!-Gibbs samples achieve the same distance in at most O(1) more steps. • For models that satisfy Dobrushin’s condition (α < 1), we show that the mixing time bounds of sequential and HOGWILD!-Gibbs sampling differ only by a factor of 1 +O(n). • We validate our results experimentally and show that, by using asynchronous execution, we can achieve wallclock speedups of up to 2.8× on real problems. 2 Related Work Much work has been done on the analysis of parallel Gibbs samplers. One simple way to parallelize Gibbs sampling is to run multiple chains independently in parallel: this heuristic uses parallelism to produce more samples overall, but does not produce accurate samples more quickly. Additionally, this strategy is sometimes worse than other strategies on a systems level Smola & Narayanamurthy (2010); Zhang & Ré (2014), typically because it requires additional memory to maintain multiple models of the chain. Another strategy for parallelizing Gibbs sampling involves taking advantage of the structure of the underlying factor graph to run in parallel while still maintaining an execution pattern to which the standard sequential Gibbs sampling analysis can be applied Gonzalez et al. (2011). Much further work has focused on parallelizing sampling for specific problems, such as LDA Newman et al.",
      "startOffset" : 325,
      "endOffset" : 2034
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions: • We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling. • To bound the bias, we prove that for classes of models with bounded total influence α = O(1), if sequential Gibbs sampling achieves small sparse variation distance to π in O(n) steps, where n is the number of variables, then HOGWILD!-Gibbs samples achieve the same distance in at most O(1) more steps. • For models that satisfy Dobrushin’s condition (α < 1), we show that the mixing time bounds of sequential and HOGWILD!-Gibbs sampling differ only by a factor of 1 +O(n). • We validate our results experimentally and show that, by using asynchronous execution, we can achieve wallclock speedups of up to 2.8× on real problems. 2 Related Work Much work has been done on the analysis of parallel Gibbs samplers. One simple way to parallelize Gibbs sampling is to run multiple chains independently in parallel: this heuristic uses parallelism to produce more samples overall, but does not produce accurate samples more quickly. Additionally, this strategy is sometimes worse than other strategies on a systems level Smola & Narayanamurthy (2010); Zhang & Ré (2014), typically because it requires additional memory to maintain multiple models of the chain. Another strategy for parallelizing Gibbs sampling involves taking advantage of the structure of the underlying factor graph to run in parallel while still maintaining an execution pattern to which the standard sequential Gibbs sampling analysis can be applied Gonzalez et al. (2011). Much further work has focused on parallelizing sampling for specific problems, such as LDA Newman et al. (2007); Smola & Narayanamurthy (2010) and others Nguyen et al.",
      "startOffset" : 325,
      "endOffset" : 2147
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions: • We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling. • To bound the bias, we prove that for classes of models with bounded total influence α = O(1), if sequential Gibbs sampling achieves small sparse variation distance to π in O(n) steps, where n is the number of variables, then HOGWILD!-Gibbs samples achieve the same distance in at most O(1) more steps. • For models that satisfy Dobrushin’s condition (α < 1), we show that the mixing time bounds of sequential and HOGWILD!-Gibbs sampling differ only by a factor of 1 +O(n). • We validate our results experimentally and show that, by using asynchronous execution, we can achieve wallclock speedups of up to 2.8× on real problems. 2 Related Work Much work has been done on the analysis of parallel Gibbs samplers. One simple way to parallelize Gibbs sampling is to run multiple chains independently in parallel: this heuristic uses parallelism to produce more samples overall, but does not produce accurate samples more quickly. Additionally, this strategy is sometimes worse than other strategies on a systems level Smola & Narayanamurthy (2010); Zhang & Ré (2014), typically because it requires additional memory to maintain multiple models of the chain. Another strategy for parallelizing Gibbs sampling involves taking advantage of the structure of the underlying factor graph to run in parallel while still maintaining an execution pattern to which the standard sequential Gibbs sampling analysis can be applied Gonzalez et al. (2011). Much further work has focused on parallelizing sampling for specific problems, such as LDA Newman et al. (2007); Smola & Narayanamurthy (2010) and others Nguyen et al.",
      "startOffset" : 325,
      "endOffset" : 2178
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions: • We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling. • To bound the bias, we prove that for classes of models with bounded total influence α = O(1), if sequential Gibbs sampling achieves small sparse variation distance to π in O(n) steps, where n is the number of variables, then HOGWILD!-Gibbs samples achieve the same distance in at most O(1) more steps. • For models that satisfy Dobrushin’s condition (α < 1), we show that the mixing time bounds of sequential and HOGWILD!-Gibbs sampling differ only by a factor of 1 +O(n). • We validate our results experimentally and show that, by using asynchronous execution, we can achieve wallclock speedups of up to 2.8× on real problems. 2 Related Work Much work has been done on the analysis of parallel Gibbs samplers. One simple way to parallelize Gibbs sampling is to run multiple chains independently in parallel: this heuristic uses parallelism to produce more samples overall, but does not produce accurate samples more quickly. Additionally, this strategy is sometimes worse than other strategies on a systems level Smola & Narayanamurthy (2010); Zhang & Ré (2014), typically because it requires additional memory to maintain multiple models of the chain. Another strategy for parallelizing Gibbs sampling involves taking advantage of the structure of the underlying factor graph to run in parallel while still maintaining an execution pattern to which the standard sequential Gibbs sampling analysis can be applied Gonzalez et al. (2011). Much further work has focused on parallelizing sampling for specific problems, such as LDA Newman et al. (2007); Smola & Narayanamurthy (2010) and others Nguyen et al. (2013). Our approach follows on the paper of Johnson et al.",
      "startOffset" : 325,
      "endOffset" : 2210
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions: • We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling. • To bound the bias, we prove that for classes of models with bounded total influence α = O(1), if sequential Gibbs sampling achieves small sparse variation distance to π in O(n) steps, where n is the number of variables, then HOGWILD!-Gibbs samples achieve the same distance in at most O(1) more steps. • For models that satisfy Dobrushin’s condition (α < 1), we show that the mixing time bounds of sequential and HOGWILD!-Gibbs sampling differ only by a factor of 1 +O(n). • We validate our results experimentally and show that, by using asynchronous execution, we can achieve wallclock speedups of up to 2.8× on real problems. 2 Related Work Much work has been done on the analysis of parallel Gibbs samplers. One simple way to parallelize Gibbs sampling is to run multiple chains independently in parallel: this heuristic uses parallelism to produce more samples overall, but does not produce accurate samples more quickly. Additionally, this strategy is sometimes worse than other strategies on a systems level Smola & Narayanamurthy (2010); Zhang & Ré (2014), typically because it requires additional memory to maintain multiple models of the chain. Another strategy for parallelizing Gibbs sampling involves taking advantage of the structure of the underlying factor graph to run in parallel while still maintaining an execution pattern to which the standard sequential Gibbs sampling analysis can be applied Gonzalez et al. (2011). Much further work has focused on parallelizing sampling for specific problems, such as LDA Newman et al. (2007); Smola & Narayanamurthy (2010) and others Nguyen et al. (2013). Our approach follows on the paper of Johnson et al. (2013), which proposes the HOGWILD!-Gibbs sampling algorithm and analyzes it for the case of Gaussian models.",
      "startOffset" : 325,
      "endOffset" : 2270
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions: • We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling. • To bound the bias, we prove that for classes of models with bounded total influence α = O(1), if sequential Gibbs sampling achieves small sparse variation distance to π in O(n) steps, where n is the number of variables, then HOGWILD!-Gibbs samples achieve the same distance in at most O(1) more steps. • For models that satisfy Dobrushin’s condition (α < 1), we show that the mixing time bounds of sequential and HOGWILD!-Gibbs sampling differ only by a factor of 1 +O(n). • We validate our results experimentally and show that, by using asynchronous execution, we can achieve wallclock speedups of up to 2.8× on real problems. 2 Related Work Much work has been done on the analysis of parallel Gibbs samplers. One simple way to parallelize Gibbs sampling is to run multiple chains independently in parallel: this heuristic uses parallelism to produce more samples overall, but does not produce accurate samples more quickly. Additionally, this strategy is sometimes worse than other strategies on a systems level Smola & Narayanamurthy (2010); Zhang & Ré (2014), typically because it requires additional memory to maintain multiple models of the chain. Another strategy for parallelizing Gibbs sampling involves taking advantage of the structure of the underlying factor graph to run in parallel while still maintaining an execution pattern to which the standard sequential Gibbs sampling analysis can be applied Gonzalez et al. (2011). Much further work has focused on parallelizing sampling for specific problems, such as LDA Newman et al. (2007); Smola & Narayanamurthy (2010) and others Nguyen et al. (2013). Our approach follows on the paper of Johnson et al. (2013), which proposes the HOGWILD!-Gibbs sampling algorithm and analyzes it for the case of Gaussian models. Their main contribution is an analysis framework that includes a sufficient condition under which HOGWILD! Gaussian Gibbs samples are guaranteed to have the correct asymptotic mean. Recent work Terenin et al. (2015) has analyzed a similar algorithm under even stronger regularity conditions.",
      "startOffset" : 325,
      "endOffset" : 2589
    }, {
      "referenceID" : 3,
      "context" : "The total influence measures the degree to which the marginal distribution of a variable can depend on the values of the other variables in the model—this parameter has appeared as part of a celebrated line of work on Dobrushin’s condition (α < 1), which ensures the rapid mixing of spin statistics systems Dobrushin (1956); Dyer et al. (2006); Hayes (2006). It turns out that we can use this parameter to bound both the bias and mixing time of HOGWILD!-Gibbs, and so we make the following contributions: • We describe a way to statistically model the asynchronicity in HOGWILD!-Gibbs sampling. • To bound the bias, we prove that for classes of models with bounded total influence α = O(1), if sequential Gibbs sampling achieves small sparse variation distance to π in O(n) steps, where n is the number of variables, then HOGWILD!-Gibbs samples achieve the same distance in at most O(1) more steps. • For models that satisfy Dobrushin’s condition (α < 1), we show that the mixing time bounds of sequential and HOGWILD!-Gibbs sampling differ only by a factor of 1 +O(n). • We validate our results experimentally and show that, by using asynchronous execution, we can achieve wallclock speedups of up to 2.8× on real problems. 2 Related Work Much work has been done on the analysis of parallel Gibbs samplers. One simple way to parallelize Gibbs sampling is to run multiple chains independently in parallel: this heuristic uses parallelism to produce more samples overall, but does not produce accurate samples more quickly. Additionally, this strategy is sometimes worse than other strategies on a systems level Smola & Narayanamurthy (2010); Zhang & Ré (2014), typically because it requires additional memory to maintain multiple models of the chain. Another strategy for parallelizing Gibbs sampling involves taking advantage of the structure of the underlying factor graph to run in parallel while still maintaining an execution pattern to which the standard sequential Gibbs sampling analysis can be applied Gonzalez et al. (2011). Much further work has focused on parallelizing sampling for specific problems, such as LDA Newman et al. (2007); Smola & Narayanamurthy (2010) and others Nguyen et al. (2013). Our approach follows on the paper of Johnson et al. (2013), which proposes the HOGWILD!-Gibbs sampling algorithm and analyzes it for the case of Gaussian models. Their main contribution is an analysis framework that includes a sufficient condition under which HOGWILD! Gaussian Gibbs samples are guaranteed to have the correct asymptotic mean. Recent work Terenin et al. (2015) has analyzed a similar algorithm under even stronger regularity conditions. Here, we seek to give more general results for the analysis of HOGWILD!-Gibbs sampling on discrete-valued factor graphs. The HOGWILD!-Gibbs sampling algorithm was inspired by a line of work on parallelizing stochastic gradient descent (SGD) by running it asynchronously. HOGWILD! SGD was first proposed by Niu et al. (2011), who proved that",
      "startOffset" : 325,
      "endOffset" : 2989
    }, {
      "referenceID" : 11,
      "context" : "The asynchronous execution strategy has been applied to many problems—such as PageRank approximations Mitliagkas et al. (2015), deep learning Noel & Osindero (2014) and recommender systems Yu et al.",
      "startOffset" : 102,
      "endOffset" : 127
    }, {
      "referenceID" : 11,
      "context" : "The asynchronous execution strategy has been applied to many problems—such as PageRank approximations Mitliagkas et al. (2015), deep learning Noel & Osindero (2014) and recommender systems Yu et al.",
      "startOffset" : 102,
      "endOffset" : 165
    }, {
      "referenceID" : 11,
      "context" : "The asynchronous execution strategy has been applied to many problems—such as PageRank approximations Mitliagkas et al. (2015), deep learning Noel & Osindero (2014) and recommender systems Yu et al. (2012)—so it is not surprising that it has been proposed for use with Gibbs sampling.",
      "startOffset" : 102,
      "endOffset" : 206
    }, {
      "referenceID" : 9,
      "context" : "In particular, we are motivated by some recent work on the analysis of HOGWILD! for SGD Liu et al. (2015); De Sa et al.",
      "startOffset" : 88,
      "endOffset" : 106
    }, {
      "referenceID" : 0,
      "context" : "(2015); De Sa et al. (2015a); Mania et al.",
      "startOffset" : 11,
      "endOffset" : 29
    }, {
      "referenceID" : 0,
      "context" : "(2015); De Sa et al. (2015a); Mania et al. (2015); Liu & Wright (2015).",
      "startOffset" : 11,
      "endOffset" : 50
    }, {
      "referenceID" : 0,
      "context" : "(2015); De Sa et al. (2015a); Mania et al. (2015); Liu & Wright (2015). Several of these results suggest modeling the race conditions inherent in HOGWILD! SGD as noise in a stochastic process; this lets them bring a trove of statistical techniques to bear on the analysis of HOGWILD! SGD.",
      "startOffset" : 11,
      "endOffset" : 71
    }, {
      "referenceID" : 0,
      "context" : "(2015); De Sa et al. (2015a); Mania et al. (2015); Liu & Wright (2015). Several of these results suggest modeling the race conditions inherent in HOGWILD! SGD as noise in a stochastic process; this lets them bring a trove of statistical techniques to bear on the analysis of HOGWILD! SGD. Therefore, in this paper, we will apply a similar stochastic process model to Gibbs sampling. Several recent papers have focused on the mixing time of Gibbs sampling for factor graphs. Gotovos et al. (2015) and De Sa et al.",
      "startOffset" : 11,
      "endOffset" : 496
    }, {
      "referenceID" : 0,
      "context" : "(2015); De Sa et al. (2015a); Mania et al. (2015); Liu & Wright (2015). Several of these results suggest modeling the race conditions inherent in HOGWILD! SGD as noise in a stochastic process; this lets them bring a trove of statistical techniques to bear on the analysis of HOGWILD! SGD. Therefore, in this paper, we will apply a similar stochastic process model to Gibbs sampling. Several recent papers have focused on the mixing time of Gibbs sampling for factor graphs. Gotovos et al. (2015) and De Sa et al. (2015b) each show that Gibbs sampling mixes in polynomial time for a class of distributions bounded by some parameter.",
      "startOffset" : 11,
      "endOffset" : 521
    }, {
      "referenceID" : 0,
      "context" : "(2015); De Sa et al. (2015a); Mania et al. (2015); Liu & Wright (2015). Several of these results suggest modeling the race conditions inherent in HOGWILD! SGD as noise in a stochastic process; this lets them bring a trove of statistical techniques to bear on the analysis of HOGWILD! SGD. Therefore, in this paper, we will apply a similar stochastic process model to Gibbs sampling. Several recent papers have focused on the mixing time of Gibbs sampling for factor graphs. Gotovos et al. (2015) and De Sa et al. (2015b) each show that Gibbs sampling mixes in polynomial time for a class of distributions bounded by some parameter. Unfortunately, these results both depend on spectral methods (that try to bound the spectral gap of the Markov transition matrix), which are difficult to apply to HOGWILD! Gibbs sampling for two reasons. First, spectral methods don’t let us represent the sampler as a stochastic process, which limits the range of techniques we can use to model the noise. Secondly, while most spectral methods only apply to reversible Markov chains—and sequential Gibbs sampling is always a reversible chain—for HOGWILD!-Gibbs sampling the asynchronicity and parallelism make the chain non-reversible. Because of this, we were unable to use these spectral results in our asynchronous setting. We are forced to rely on the other method Guruswami (2000) for analyzing Markov processes, coupling—the type of analysis used with the Dobrushin condition—which we will describe in the following sections.",
      "startOffset" : 11,
      "endOffset" : 1368
    }, {
      "referenceID" : 0,
      "context" : "(2015); De Sa et al. (2015a); Mania et al. (2015); Liu & Wright (2015). Several of these results suggest modeling the race conditions inherent in HOGWILD! SGD as noise in a stochastic process; this lets them bring a trove of statistical techniques to bear on the analysis of HOGWILD! SGD. Therefore, in this paper, we will apply a similar stochastic process model to Gibbs sampling. Several recent papers have focused on the mixing time of Gibbs sampling for factor graphs. Gotovos et al. (2015) and De Sa et al. (2015b) each show that Gibbs sampling mixes in polynomial time for a class of distributions bounded by some parameter. Unfortunately, these results both depend on spectral methods (that try to bound the spectral gap of the Markov transition matrix), which are difficult to apply to HOGWILD! Gibbs sampling for two reasons. First, spectral methods don’t let us represent the sampler as a stochastic process, which limits the range of techniques we can use to model the noise. Secondly, while most spectral methods only apply to reversible Markov chains—and sequential Gibbs sampling is always a reversible chain—for HOGWILD!-Gibbs sampling the asynchronicity and parallelism make the chain non-reversible. Because of this, we were unable to use these spectral results in our asynchronous setting. We are forced to rely on the other method Guruswami (2000) for analyzing Markov processes, coupling—the type of analysis used with the Dobrushin condition—which we will describe in the following sections. 3 Modeling Asynchronicity In this section, we describe a statistical model for asynchronous Gibbs sampling by adapting the hardware model outlined in De Sa et al. (2015a). Because we are motivated by the factor graph inference problem, we will focus on the case where the distribution π that we want to sample comes from a sparse, discrete graphical model.",
      "startOffset" : 11,
      "endOffset" : 1685
    }, {
      "referenceID" : 21,
      "context" : "In this model, the τ parameter represents everything that is relevant about the hardware; representing the hardware in this way has been successful for the analysis of asynchronous SGD Niu et al. (2011), so it is reasonable to use it for Gibbs sampling.",
      "startOffset" : 185,
      "endOffset" : 203
    }, {
      "referenceID" : 24,
      "context" : "In many practical systems Neubig (2014); Shin et al. (2015), Gibbs sampling is used without a proof that it works; instead, it is naively run for some fixed number of passes through the dataset.",
      "startOffset" : 41,
      "endOffset" : 60
    }, {
      "referenceID" : 26,
      "context" : "in practice Smyth et al. (2009); Smola & Narayanamurthy (2010).",
      "startOffset" : 12,
      "endOffset" : 32
    }, {
      "referenceID" : 26,
      "context" : "in practice Smyth et al. (2009); Smola & Narayanamurthy (2010). To further test this, we ran HOGWILD!-Gibbs sampling on a real-world 11 GB Knowledge Base Population dataset (derived from the TAC-KBP challenge) using a machine with a single-socket, 18-core Xeon E7-8890 CPU and 1 TB RAM.",
      "startOffset" : 12,
      "endOffset" : 63
    }, {
      "referenceID" : 11,
      "context" : "1 Statements of Lemmas First, we state a proposition from Levin et al. (2009). This proposition relates the concept of a coupling with the total variation distance between the distributions of two random variables.",
      "startOffset" : 58,
      "endOffset" : 78
    }, {
      "referenceID" : 11,
      "context" : "1 Statements of Lemmas First, we state a proposition from Levin et al. (2009). This proposition relates the concept of a coupling with the total variation distance between the distributions of two random variables. Proposition 1 (Proposition 4.7 from Levin et al. (2009)).",
      "startOffset" : 58,
      "endOffset" : 271
    }, {
      "referenceID" : 11,
      "context" : "3 from Levin et al. (2009), max μ0 ‖μt − π‖TV ≤ P (Tcoupling > t) .",
      "startOffset" : 7,
      "endOffset" : 27
    } ],
    "year" : 2015,
    "abstractText" : "Gibbs sampling is a Markov Chain Monte Carlo technique commonly used for estimating marginal distributions. To speed up Gibbs sampling, there has recently been interest in parallelizing it by executing asynchronously. While empirical results suggest that many models can be efficiently sampled asynchronously, traditional Markov chain analysis does not apply to the asynchronous case, and thus asynchronous Gibbs sampling is poorly understood. In this paper, we derive a better understanding of the two main challenges of asynchronous Gibbs: sampling bias and mixing time. We show experimentally that our theoretical results match practical outcomes.",
    "creator" : "gnuplot 5.0 patchlevel 0"
  }
}