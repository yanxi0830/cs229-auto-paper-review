{
  "name" : "1705.05366.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Maximum Selection and Ranking under Noisy Comparisons",
    "authors" : [ "Moein Falahatgar", "Alon Orlitsky", "Venkatadheeraj Pichapati", "Ananda Theertha Suresh" ],
    "emails" : [ "moein@ucsd.edu", "alon@ucsd.edu", "dheerajpv7@ucsd.edu", "theertha@google.com" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n70 5.\n05 36\n6v 1\n[ cs\n.L G\n] 1\n(\nn ǫ2 log 1 δ\n)\ncomparisons, a number tight up to a constant factor. We then derive a general framework that improves the performance of many ranking algorithms, and combine it with merge sort and binary search to obtain a ranking algorithm that uses O ( n logn(log logn)3\nǫ2\n)\ncomparisons for any δ ≥ 1 n , a number optimal up to a (log logn)3 factor."
    }, {
      "heading" : "1 Introduction",
      "text" : ""
    }, {
      "heading" : "1.1 Background",
      "text" : "Maximum selection and sorting using pairwise comparisons are computer-science staples taught in most introductory classes and used in many applications. In fact, sorting, also known as ranking, has been claimed to utilize 25% of computer cycles worldwide Mukherjee [2011].\nIn many applications, the pairwise comparisons produce only random outcomes. For example, sports tournaments rank teams based on pairwise matches, but match outcomes are probabilistic in nature. Patented by Microsoft, TrueSkill Herbrich et al. [2006] is such a ranking system for Xbox gamers. Another important application is online advertising. Prominent web pages devote precious little space to advertisements, limiting companies like Google, Microsoft, or Yahoo! to present a typical user with just a couple of ads, of which the user selects at most one. Based on these small random comparisons, the company would like to rank the ads according to their appeal Radlinski & Joachims [2007], Radlinski et al. [2008].\nThis and related applications have brought about a resurgence of interest in maximum selection and ranking using noisy comparisons. Several noise models were considered, including the popular Plackett-Luce model Plackett [1975], Luce [2005]. Yet even for such specific models, the complexity of maximum selection was known only up to a log n factor and the complexity of ranking was known\nonly up to a log n factor. We consider a broader class of models and propose algorithms that are optimal up to a constant factor for maximum selection and up to (log log n)3 for ranking."
    }, {
      "heading" : "1.2 Notation",
      "text" : "Noiseless comparison assumes an unknown underlying ranking r(1), . . . ,r(n) of the elements such that if two elements are compared, the higher-ranked one is selected. Similarly for noisy comparisons, we assume an unknown ranking of the n elements, but now if two elements i and j are compared, i is chosen with some unknown probability p(i, j) and j is chosen with probability p(j, i) = 1 − p(i, j), where the higher-ranked element has probability ≥ 12 . Repeated comparisons are independent of each other.\nLet p̃(i, j) = p(i, j) − 12 reflect the additional probability by which i is preferable to j. Note that p̃(j, i) = −p̃(i, j) and p̃(i, j) ≥ 0 if r(i) > r(j). |p̃(i, j)| can also be seen as a measure of dissimilarity between i and j. In our model we assume that two very natural properties hold whenever r(i) > r(j) > r(k).\n(1)Strong stochastic transitivity:\np̃(i, k) ≥ max(p̃(i, j), p̃(j, k));\n(2) Stochastic triangle inequality:\np̃(i, k) ≤ p̃(i, j) + p̃(j, k).\nThese properties are satisfied by several popular preference models e.g., Plackett-Luce(PL) model. Two types of algorithms have been proposed for finding the maximum and ranking under noisy comparisons: non-adaptive or offline Rajkumar & Agarwal [2014], Negahban et al. [2012, 2016], Jang et al. [2016] where we cannot choose the comparison pairs, and adaptive or online where the comparison pairs are selected sequentially based on previous results. In this paper we focus on the latter.\nWe specify the desired output via the (ǫ, δ)-PAC paradigm Yue & Joachims [2011], Busa-Fekete et al. [2014b] that requires the output to likely closely approximate the intended value. Specifically, given ǫ, δ > 0, with probability ≥ 1 − δ, maximum selection must output an element i such that for j with r(j) = n,\np(i, j) ≥ 1\n2 − ǫ.\nWe call such an output ǫ-maximum. Similarly, with probability ≥ 1 − δ, the ranking algorithm must output a ranking r′(1), . . . ,r′(n) such that whenever r′(i) > r′(j),\np(i, j) ≥ 1\n2 − ǫ.\nWe call such a ranking ǫ-ranking."
    }, {
      "heading" : "1.3 Paper outline",
      "text" : "In Section 2 we mention somerelated works. In Section 3 we highlight our main contributions. In Section 4 we propose the maximum selection algorithm. In Section 5 we propose the ranking algorithm. In Section 6 we provide experiments. In Section 7 we discuss the results and mention some future directions."
    }, {
      "heading" : "2 Related work",
      "text" : "Heckel et al. [2016], Urvoy et al. [2013], Busa-Fekete et al. [2014b,b] assume no underlying ranking or constraints on probabilities and find ranking based on Copeland, Borda count and Random Walk procedures. Urvoy et al. [2013], Busa-Fekete et al. [2014b] showed that if the probabilities p(i, j) are not constrained, both maximum selection and ranking problems require Θ(n2) comparisons. Several models have therefore been considered to further constrain the probabilities.\nUnder the assumptions of strong stochastic transitivity and triangle inequality , Yue & Joachims [2011] derived a PACmaximum selection algorithm that usesO (\nn ǫ2 log n ǫδ\n)\ncomparisons. Szörényi et al. [2015] derived a PAC ranking algorithm for PL-model distributions that requires O( nǫ2 log n log n δǫ ) comparisons. In addition to PAC paradigm, Yue & Joachims [2011] also considered this problem under the bandit setting and bounded the regret of the resulting dueling bandits problem. Following this work, several other works e.g. Syrgkanis et al. [2016] looked at similar formulation.\nAnother non-PAC approach by Busa-Fekete et al. [2014a], Feige et al. [1994] solves the maximum selection and ranking problems. They assume a lower bound on |p̃(i, j)| and the number of comparisons depends on this lower bound. If |p̃(i, j)| is 0 for any pair, then these algorithms will never terminate.\nSeveral other noise models have also been considered in practice that have either adverserial noise or the stochastic noise that does not obey triangle inequality. For example, Acharya et al. [2014a, 2016, 2014b] considered adversarial sorting with applications to density estimation and Ajtai et al. [2015] considered the same with deterministic algorithms. Mallows stochastic model Busa-Fekete et al. [2014a] does not satisfy the stochastic triangle inequality and hence our theoretical guarantees do not hold under this model. However our simulations suggest that our algorithm can have a reasonable performance over Mallows model."
    }, {
      "heading" : "3 New results",
      "text" : "Recall that we study (ǫ, δ)-PAC model for the problems of online maximum selection and ranking using pairwise comparisons under strong stochastic transitivity and stochastic triangle inequality assumptions. The goal is to find algorithms that use small number of comparisons. Our main contributions are:\n• A maximum selection algorithm that uses O ( n ǫ2 log 1δ )\ncomparisons and therefore our algorithm is optimal up to constants.\n• A ranking algorithm that uses at most O ( n(logn)3\nǫ2 log nδ\n)\ncomparisons and outputs ǫ-ranking\nfor any δ.\n• A framework that given any ranking algorithm with O ( n(logn)x\nǫ2 log nδ\n)\nsample complexity,\nprovides a ranking algorithm with O ( n logn(log logn)x\nǫ2\n)\nsample complexity for δ ≥ 1n .\n• Using the framework above, we present an algorithm that uses at most O ( n logn(log logn)3\nǫ2\n)\ncomparisons and outputs ǫ-ranking for δ = 1n . We also show a lower bound of Ω ( n logn ǫ2 )\non the number of comparisons used by any PAC ranking algorithm, therefore proving our algorithm is optimal up to log log n factors."
    }, {
      "heading" : "4 Maximum selection",
      "text" : ""
    }, {
      "heading" : "4.1 Algorithm outline",
      "text" : "We propose a simple maximum-selection algorithm based on Knockout tournaments. Knockout tournaments are often used to find a maximum element under non-noisy comparisons. Knockout tournament of n elements runs in ⌈log n⌉ rounds where in each round it randomly pairs the remaining elements and proceeds the winners to next round.\nOur algorithm, given in Knockout uses O ( n ǫ2 log 1δ )\ncomparisons and O(n) memory to find an ǫ-maximum. Yue & Joachims [2011] uses O (\nn ǫ2 log nǫδ\n)\ncomparisons and O(n2) memory to find an ǫ-maximum. Hence we get log n-factor improvement in the number of comparisons and also we use linear memory compared to quadratic memory. Using the lower bound in Feige et al. [1994], it can be inferred that the best PAC maximum selection algorithm requires Ω (\nn ǫ2 log 1δ\n)\ncomparisons, hence up to constant factor, Knockout is optimal. Also our algorithm can be parallelized to run in O (\nlogn ǫ2 log 1δ\n)\ntime.\nDue to the noisy nature of the comparisons, we repeat each comparison several times to gain confidence about the winner. Note that in knockout tournaments, the number of pairs in a round decreases exponentially with each round. Therefore we afford to repeat the comparisons more times in the latter rounds and get higher confidence. Let bi be the highest-ranked element (according to unobserved underlying ranking) at the beginning of round i. We repeat the comparisons in round i enough times to ensure that p̃(bi, bi+1) ≤\ncǫ 2i/3 with probability ≥ 1 − δ 2i where c = 21/3 − 1. By\nthe stochastic triangle inequality, p̃(b1, b⌈log n⌉+1) ≤ ∑⌈logn⌉+1 i=1 cǫ 2i/3\n≤ ǫ with probability ≥ 1− δ. There is a relaxed notion of strong stochastic transitivity. For γ ≥ 1, γ-stochastic transitivity Yue & Joachims [2011]: if r(i) > r(j) > r(k), then max(p̃(i, j), p̃(j, k)) ≤ γ · p̃(i, k). Our results apply to this general notion of γ-stochastic transitivity and the analysis of Knockout is presented under this model. Yue & Joachims [2011] uses O(nγ 6\nǫ2 log nδ ) comparisons to find\nan ǫ-maximum whereas Knockout uses only O(nγ 2 ǫ2 log 1δ ) comparisons. Hence we get a huge improvement in the exponent of γ as well as removing the extra log n factor. To simplify the analysis, we assume that n is a power of 2, otherwise we can add 2⌈log n⌉ − n dummy elements that lose to every original element with probability 1. Note that all ǫ-maximums will still be from the original set."
    }, {
      "heading" : "4.2 Algorithm",
      "text" : "We start with a subroutine Compare that compares two elements. It compares two elements i, j and maintains empirical probability p̂i, a proxy for p(i, j). It also maintains a confidence value ĉ s.t., w.h.p., p̂i ∈ (p(i, j) − ĉ, p(i, j) + ĉ). Compare stops if it is confident about the winner or if it reaches its comparison budget m. If it reaches m comparisons, it outputs the element with more wins breaking ties randomly.\nWe show that the subroutine Compare always outputs the correct winner if the elements are well seperated.\nAlgorithm 1 Comprare\nInput: element i, element j, bias ǫ, confidence δ. Initialize: p̂i = 1 2 , ĉ = 1 2 , m = 1 2ǫ2 log 2 δ , r = 0, wi = 0.\n1. while (|p̂i − 1 2 | ≤ ĉ− ǫ and r ≤ m)\n(a) Compare i and j. if i wins wi = wi + 1.\n(b) r = r + 1, p̂i = wi r , ĉ =\n√\n1 2r log 4r2 δ .\nif p̂i ≤ 1 2 Output: j. else Output: i.\nLemma 1. If p̃(i, j) ≥ ǫ, then\nPr(Compare(i, j, ǫ, δ) 6= i) ≤ δ.\nNote that instead of using fixed number of comparisons, Compare stops the comparisons adaptively if it is confident about the winner. If |p̃(i, j)| ≫ ǫ, Compare stops much before comparison budget 1\n2ǫ2 log 2δ and hence works better in practice.\nNow we present the subroutine Knockout-Round that we use in main algorithm Knockout."
    }, {
      "heading" : "4.2.1 Knockout-Round",
      "text" : "Knockout-Round takes a set S and outputs a set of size |S|/2. It randomly pairs elements, compares each pair using Compare, and returns the set of winners. We will later show that maximum element in the output set will be comparable to maximum element in the input set.\nAlgorithm 2 Knockout-Round Input: Set S, bias ǫ, confidence δ. Initialize: Set O = ∅.\n1. Pair elements in S randomly.\n2. for every pair (a, b):\n(a) Add Compare(a, b, ǫ, δ) to O."
    }, {
      "heading" : "Output: O",
      "text" : "Note that comparisons between each pair can be handled by a different processor and hence this algorithm can be easily parallelized.\nNote that a set S can have several maximum elements. Comparison probabilities corresponding to all maximum elements will be essentially same because of triangle inequality. We define max(S) to be the maximum element with the least index, namely,\nmax(S) def = S\n( min{i : p̃(S(i), S(j)) ≥ 0 ∀j} ) .\nLemma 2. Knockout-Round(S, ǫ, δ) uses |S|4ǫ2 log 2 δ comparisons and with probability ≥ 1− δ,\np̃\n(\nmax(S),max ( Knockout-Round(S, ǫ, δ) )\n)\n≤ γǫ"
    }, {
      "heading" : "4.2.2 Knockout",
      "text" : "Now we present the main algorithm Knockout. Knockout takes an input set S and runs log n rounds of Knockout-Round halving the size of S at the end of each round. Recall that Knockout-Round makes sure that maximum element in the output set is comparable to maximum element in the input set. Using this, Knockout makes sure that the output element is comparable to maximum element in the input set.\nSince the size of S gets halved after each round, Knockout compares each pair more times in the latter rounds. Hence the bias between maximum element in input set and maximum element in output set is small in latter rounds.\nAlgorithm 3 Knockout Input: Set S, bias ǫ, confidence δ, stochasticity γ. Initialize: i = 1, S = set of all elements, c = 21/3 − 1. while |S| > 1\n1. S = Knockout-Round (\nS, cǫ γ2i/3 , δ 2i\n)\n.\n2. i = i+ 1.\nOutput: the unique element in S.\nNote that Knockout uses only memory of set S and hence O(n) memory suffices. Now we bound the number of comparisons used by Knockout and prove the correctness.\nTheorem 3. Knockout(S, ǫ, δ) uses O ( γ2|S| ǫ2 log 1 δ ) comparisons and with probability at least 1−δ, outputs an ǫ-maximum."
    }, {
      "heading" : "5 Ranking",
      "text" : "We propose a ranking algorithm that with probability at least 1− 1n uses O ( n logn(log logn)3 ǫ2 ) comparisons and outputs an ǫ-ranking.\nNotice that we use only Õ (\nn logn ǫ2\n)\ncomparisons for δ = 1n where as Szörényi et al. [2015] uses\nO ( n(log n)2/ǫ2 )\ncomparisons even for constant error probability δ. Furthermore Szörényi et al. [2015] provided these guarantees only under Plackett-Luce model which is more restrictive compared to ours. Also, their algorithm uses O(n2) memory compared to O(n) memory requirement of ours.\nOur main algorithm Binary-Search-Ranking assumes the existence of a ranking algorithm Rank-x that with probability at least 1− δ uses O (\nn ǫ2 (log n)x log nδ\n)\ncomparisons and outputs an ǫ-ranking for any δ > 0, ǫ > 0 and some x > 1. We also present a Rank-x algorithm with x = 3.\nObserve that we need Rank-x algorithm to work for any model that satisfies strong stochastic transitivity and stochastic triangle inequality. Szörényi et al. [2015] showed that their algorithm\nworks for Plackett-Luce model but not for more general model. So we present a Rank-x algorithm that works for general model.\nThe main algorithm Binary-Search-Ranking randomly selects n(logn)x elements (anchors) and rank them using Rank-x . The algorithm has then effectively created n(log n)x bins, each between two successively ranked anchors. Then for each element, the algorithm identifies the bin it belongs to using a noisy binary search algorithm. The algorithm then ranks the elements within each bin using Rank-x .\nWe first present Merge-Rank, a Rank-3 algorithm."
    }, {
      "heading" : "5.1 Merge Ranking",
      "text" : "We present a simple ranking algorithm Merge-Rank that uses O ( n(logn)3\nǫ2 log nδ\n)\ncomparisons,\nO(n) memory and with probability ≥ 1−δ outputs an ǫ-ranking. Thus Merge-Rank is a Rank-x algorithm for x = 3.\nSimilar to Merge Sort, Merge-Rank divides the elements into two sets of equal size, ranks them separately and combines the sorted arrays. Due to the noisy nature of comparisons, MergeRank compares two elements i, j sufficient times, so that the comparison output is correct with high probability when |p̃(i, j)| ≥ ǫlogn . Put differently, Merge-Rank is same as the typical Merge Sort, except it uses Compare as the comparison function.\nLet’s define the error of an ordered set S as the maximum distance between two wrongly ordered items in S, namely,\nerr(S) def = max\n1≤i≤j≤|S|\n( p̃(S(j), S(i)) ) .\nWe show that when we merge two ordered sets, the error of the resulting ordered set will be at most ǫlogn more than the maximum of errors of individual ordered sets.\nObserve that Merge-Rank is a recursive algorithm and the error of a singleton set is 0. Two singleton sets each containing a unique element from the input set merge to form a set with two elements with an error at most 2ǫlogn , then two sets with two elements merge to form a set with four elements with an error of at most 3ǫlogn and henceforth. Therefore the error of the output ordered set is bounded by ǫ.\nLemma 4 shows that Merge-Rank can output an ǫ-ranking of S with probability ≥ 1− δ. It also bounds the number of comparisons used by the algorithm.\nLemma 4. Merge-Rank (\nS, ǫlog |S| , δ |S|2\n) takes O ( |S|(log |S|)3\nǫ2 log |S|δ\n)\ncomparisons and with proba-\nbility ≥ 1− δ, outputs an ǫ-ranking. Hence, Merge-Rank is a Rank-3 algorithm.\nNow we present our main ranking algorithm."
    }, {
      "heading" : "5.2 Binary-Search-Ranking",
      "text" : "We first sketch the algorithm outline below. We then provide a proof outline."
    }, {
      "heading" : "5.2.1 Algorithm outline",
      "text" : "Our algorithm is stated in Binary-Search-Ranking. It can be summarized in three major parts.\nCreating anchors: (Steps 1 to 3) Binary-Search-Ranking first selects a set S′ of n(logn)x random elements (anchors) and ranks them using Rank-x . At the end of this part, there are\nn (logn)x ranked anchors. Equivalently, the algorithm creates n (logn)x − 1 bins, each bin between two successively ranked anchors. Coarse ranking: (Step 4) After forming the bins, the algorithm uses a random walk on a binary search tree, to find which bin each element belongs to. Interval-Binary-Search is similar to the noisy binary search algorithm in Feige et al. [1994]. It builds a binary search tree with the bins as the leaves and it does a random walk over this tree. Due to lack of space the algorithm Interval-Binary-Search is presented in Appendix B but more intuition is given later in this section.\nRanking within each bin: (Step 5) For each bin, we show that the number of elements far from both anchors is bounded. The algorithm checks elements inside a bin whether they are close to any of the bin’s anchors. For the elements that are close to anchors, we rank them close to the anchor. And for the elements that are away from both anchors we rank them using Rank-x and output the resulting ranking.\nAlgorithm 4 Binary-Search-Ranking\nInput: Set S, bias ǫ. Initialize: ǫ′ = ǫ/16, ǫ′′ = ǫ/15, and So = ∅. Sj = ∅, Cj = ∅ and Bj = ∅, for 1 ≤ j ≤ ⌊ n (log n)x ⌋ +1.\n1. Form a set S′ with ⌊\nn (log n)x\n⌋\nrandom elements from S. Remove these elements from S.\n2. Rank S′ using Rank-x ( S′, ǫ′, 1n6 ) .\n3. Add dummy element a at the beginning of S′ such that p(a, e) = 0 ∀e ∈ S ⋃ S′. Add dummy element b at the end of S′ such that p(b, e) = 1 ∀e ∈ S ⋃ S′.\n4. for e ∈ S:\n(a) k = Interval-Binary-Search(S′, e, ǫ′′).\n(b) Insert e in Sk.\n5. for j = 1 to ⌊\nn (logn)x\n⌋\n+ 1:\n(a) for e ∈ Sj :\ni. if Compare2(e, S′(j), 10ǫ′′−2 log n) ∈ [ 1 2 − 6ǫ ′′, 12 + 6ǫ ′′ ] , insert e in Cj .\nii. else if Compare2(e, S′(j + 1), 10ǫ′′−2 log n) ∈ [ 1 2 − 6ǫ ′′, 12 + 6ǫ ′′ ]\n, then insert e in Cj+1.\niii. else insert e in Bj.\n(b) Rank Bj using Rank-x ( Bj, ǫ ′′, 1\nn4\n)\n.\n(c) Append S′(j), Cj, Bj in order at the end of S o.\nOutput: So\nAlgorithm 5 Compare2\nInput: element a, element b, number of comparisons k.\n1. Compare a and b for k times and return the fraction of times a wins over b."
    }, {
      "heading" : "5.2.2 Analysis of Binary-Search-Ranking",
      "text" : "Creating anchors In Step 1 of the algorithm we select n/(log n)x random elements. Since these are chosen uniformly random, they lie nearly uniformly in the set S. This intuition is formalized in the next lemma.\nLemma 5. Consider a set S of n elements. If we select n(logn)x elements uniformly randomly from S and build an ordered set S′ s.t. p̃(S′(i), S′(j)) ≥ 0 ∀i > j , then with probability ≥ 1 − 1 n4 , for any ǫ > 0 and all k,\n|{e ∈ S : p̃(e, S′(k)) > ǫ, p̃(S′(k + 1), e) > ǫ}| ≤ 5(log n)x+1.\nIn Step 2, we use Rank-x to rank S′. Lemma 6 shows the guarantee of ranking S′.\nLemma 6. After Step 2 of the Binary-Search-Ranking with probability ≥ 1− 1n6 , S ′ is ǫ′-ranked.\nAt the end of Step 2, we have n(logn)x − 1 bins, each between two successively ranked anchors. Each bin has a left anchor and a right anchor . We say that an element belongs to a bin if it wins over the bin’s left anchor with probability ≥ 12 and wins over the bin’s right anchor with probability ≤ 12 . Notice that some elements might win over S\n′(1) with probability < 12 and thus not belong to any bin. So in Step 3, we add a dummy element a at the beginning of S′ where a loses to every element in S ⋃\nS′ with probability 1. For similar reasons we add a dummy element b to the end of S′ where every element in S ⋃\nS′ loses to b with probability 1. Coarse Ranking Note that S′(i) and S′(i + 1) are respectively the left and right anchors of the bin Si. Since S′ is ǫ′-ranked and the comparisons are noisy, it is hard to find a bin Si for an element e such that p(e, S′(i)) ≥ 12 and p(S ′(i + 1), e) ≥ 12 . We call a bin Si a ǫ\n′′−nearly correct bin for an element e if p(e, S′(i)) ≥ 12ǫ ′′ and p(S′(i+ 1), e) ≥ 12 − ǫ ′′ for some ǫ′′ > ǫ′.\nIn Step 4, for each element we find a ǫ′′-nearly correct bin using Interval-Binary-Search . Next we describe an outline of Interval-Binary-Search.\nInterval-Binary-Search first builds a binary search tree of intervals (see Appendix B) as follows: the root node is the entire interval between the first and the last elements in S′. Each non-leaf node interval I has two children corresponding to the left and right halves of I. The leaves of the tree are the bins between two successively ranked anchors.\nTo find a ǫ′′-nearly correct bin for an element e, the algorithm starts at the root of the binary search tree and at every non-leaf node corresponding to interval I, it checks if e belongs to I or not by comparing e with I’s left and right anchors. If e loses to left anchor or wins against the right anchor, the algorithm backtracks to current node’s parent.\nIf e wins against I’s left anchor and loses to its right one, the algorithm checks if e belongs to the left child or the right one by comparing e with the middle element of I and moves accordingly.\nWhen at a leaf node, the algorithm checks if e belongs to the bin by maintaining a counter. If e wins against the bin’s left anchor and loses to the bin’s right anchor, it increases the counter\nby one and otherwise it decreases the counter by one. If the counter is less than 0 the algorithm backtracks to the bin’s parent. By repeating each comparison several times, the algorithm makes a correct decision with probability ≥ 1920 .\nNote that there could be several ǫ′′-nearly correct bins for e and even though at each step the algorithm moves in the direction of one of them, it could end up moving in a loop and never reaching one of them. We thus run the algorithm for 30 log n steps and terminate.\nIf the algorithm is at a leaf node by 30 log n steps and the counter is more than 10 log n we show that the leaf node bin is a ǫ′′-nearly correct bin for e and the algorithm outputs the leaf node. If not, the algorithm puts in a set Q all the anchors visited so far and orders Q according to S′.\nWe select 30 log n steps to ensure that if there is only one nearly correct bin, then the algorithm outputs that bin w.p. ≥ 1− 1\nn6 . Also we do not want too many steps so as to bound the size of Q.\nBy doing a simple binary search in Q using Binary-Search (see Appendix B) we find an anchor f ∈ Q such that |p̃(e, f)| ≤ 4ǫ′′. Since Interval-Binary-Search ran for at most 30 log n steps, Q can have at most 60 log n elements and hence Binary-Search can search effectively by repeating each comparison O(log n) times to maintain high confidence. Next paragraph explains how Binary-Search finds such an element f .\nBinary-Search first compares e with the middle element m of Q for O(log n) times. If the fraction of wins for e is between 12−3ǫ ′′ and 12+3ǫ ′′, then w.h.p. |p̃(e,m)| ≤ 4ǫ′′ and hence BinarySearch outputs m. If the fraction of wins for e is less than 12 − 3ǫ ′′, then w.h.p. p̃(e,m) ≤ −2ǫ′′ and hence it eliminates all elements to the right of m in Q. If the fraction of wins for e is more than 12 + 3ǫ\n′′, then w.h.p. p̃(e,m) ≥ 2ǫ′′ and hence it eliminates all elements to the left of m in Q. It continues this process until it finds an element f such that the fraction of wins for e is between 1 2 − 3ǫ ′′ and 12 + 3ǫ ′′.\nIn next Lemma, we show that Interval-Binary-Search achieves to find a 5ǫ′′-nearly correct bin for every element.\nLemma 7. For any element e ∈ S, Step 4 of Binary-Search-Ranking places e in bin Sl such that p̃(e, S′(l)) > −5ǫ′′ and p̃(S′(l + 1), e) > −5ǫ′′ with probability ≥ 1− 1n5 .\nRanking within each bin Once we have identified the bins, we rank the elements inside each bin. By Lemma 5, inside each bin all elements are close to the bin’s anchors except at most 10(log n)x+1 of them.\nThe algorithm finds the elements close to anchors in Step 5a by comparing each element in the bin with the bin’s anchors. If an element in bin Sj is close to bin’s anchors S\n′(j) or S′(j + 1) , the algorithm moves it to the set Cj or Cj+1 accordingly and if it is far away from both, the algorithm moves it to the set Bj. The following two lemmas state that this separating process happens accurately with high probability. The proofs of these results follow from the Chernoff bound and hence omitted.\nLemma 8. At the end of Step 5a, for all j, ∀e ∈ Cj , |p̃(e, S ′(j))| < 7ǫ′′ with probability ≥ 1− 1\nn3 .\nLemma 9. At the end of Step 5a, for all j, ∀e ∈ Bj, min(p̃(e, S ′(j)), p̃(S′(j + 1), e)) > 5ǫ′′ with probability ≥ 1− 1 n3 .\nCombining Lemmas 5, 6 and 9 next lemma shows that the size of Bj is bounded for all j.\nLemma 10. At the end of Step 5a, |Bj | ≤ 10(log n) x+1 for all j, with probability ≥ 1− 3\nn3 .\nSince all the elements in Cj are already close to an anchor, they do not need to be ranked. By Lemma 5 with probability ≥ 1− 3\nn3 the number of elements in Bj is at most 10(log n) x+1. Therefore we use Rank-x to rank these elements and output the final ranking.\nLemma 11 shows that all Bj’s are ǫ ′′-ranked at the end of Step 5b. Proof follows from properties\nof Rank-x and union bound.\nLemma 11. At the end of Step 5b, all Bjs are ǫ ′′-ranked with probability ≥ 1− 1n3 .\nCombining the above set of results yields our main result.\nTheorem 12. Given access to Rank-x , Binary-Search-Ranking uses O ( n logn(log logn)x\nǫ2\n)\ncom-\nparisons and produces an ǫ-ranking with probability ≥ 1− 1n .\nUsing Merge-Rank as a Rank-x algorithm with x = 3 leads to the following corollary.\nCorollary 13. Binary-Search-Ranking uses O ( n logn(log logn)3\nǫ2\n)\ncomparisons and produces an\nǫ-ranking with probability ≥ 1− 1n .\nUsing PALPAC-AMPRR Szörényi et al. [2015] as a Rank-x algorithm with x = 1 leads to the following corollary over PL model.\nCorollary 14. Over PL model, Binary-Search-Ranking uses O (\nn logn log logn ǫ2\n)\ncomparisons\nand produces an ǫ-ranking with probability ≥ 1− 1n .\nIt is well known that to rank a set of n values under the noiseless setting, Ω(n log n) comparisons are necessary. We show that under the noisy model, Ω (\nn ǫ2 log n δ\n)\nsamples are necessary to output an ǫ-ranking and hence our algorithm is near-optimal.\nTheorem 15. There exists a noisy model that satisfies strong stochastic transitivity and stochastic triangle inequality such that to output an ǫ-ranking with probability ≥ 1−δ, Ω (\nn ǫ2 log nδ\n)\ncomparisons are necessary."
    }, {
      "heading" : "6 Experiments",
      "text" : "We compare the performance of our algorithms with that of others over simulated data. Similar to Yue & Joachims [2011], we consider the stochastic model where p(i, j) = 0.6 ∀i < j. Note that this model satisfies both strong stochastic transitivity and triangle inequality. We find 0.05- maximum with error probability δ = 0.1. Observe that i = 1 is the only 0.05-maximum. We compare the sample complexity of Knockout with that of BTM-PAC Yue & Joachims [2011], MallowsMPI Busa-Fekete et al. [2014a], and AR Heckel et al. [2016]. BTM-PAC is an (ǫ, δ)PAC algorithm for the same model considered in this paper. MallowsMPI finds a Condorcet winner which exists under our general model. AR finds the maximum according to Borda scores. We also tried PLPAC Szörényi et al. [2015], developed originally for PL model but the algorithm could not meet guarantees of δ = 0.1 under this model and hence omitted. Note that in all the experiments the reported numbers are averaged over 100 runs.\nIn Figure 1, we compare the sample complexity of algorithms when there are 7, 10 and 15 elements. Our algorithm outperforms all the others. BTM-PAC performs much worse in comparison to others because of high constants in the algorithm. Further BTM-PAC allows comparing an element with itself since the main objective in Yue & Joachims [2011] is to reduce the regret. We include more comparisons with BTM-PAC in Appendix G. We exclude BTM-PAC for further experiments with higher number of elements.\nIn Figure 2, we compare the algorithms when there are 50, 100, 200 and 500 elements. Our algorithm outperforms others for higher number of elements too. Performance of AR gets worse as the number of elements increases since Borda scores of the elements get closer to each other and\nhence AR takes more comparisons to eliminate an element. Notice that number of comparisons is in logarithmic scale and hence the performance of MallowsMPI appears to be close to that of ours.\nAs noted in Szörényi et al. [2015], sample complexity of MallowsMPI gets worse as p̃(i, j) gets close to 0. To show the pronounced effect, we use the stochastic model p(1, j) = 0.6 ∀j > 1, p(i, j) = 0.5 + p̃ ∀j > i, i > 1 where p̃ < 0.1, and the number of elements is 15. Here too we find 0.05-maximum with δ = 0.1. Note that i = 1 is the only 0.05-maximum in this stochastic model.\nIn Figure 3, we compare the algorithms for different values of p̃: 0.01, 0.005 and 0.001. As discussed above, the performance of MallowsMPI gets much worse whereas our algorithm’s performance stays unchanged. The reason is that MallowsMPI finds the Condorcet winner using successive elimination technique and as p̃ gets closer to 0, MallowsMPI takes more comparisons for each elimination. Our algorithm tries to find an alternative which defeats Condorcet winner with probability ≥ 0.5 − 0.05 and hence for alternatives that are very close to each other, our algorithm declares either one of them as winner after comparing them for certain number of times.\nNext we evaluate Knockout on Mallows model which does not satisfy triangle inequality. Mallows is a parametric model which is specified by single parameter φ. As in Busa-Fekete et al. [2014a], we consider n = 10 elements and various values for φ: 0.03, 0.1, 0.3, 0.5, 0.7, 0.8, 0.9, 0.95 and 0.99. Here again we seek to find 0.05-maximum with δ = 0.05. As we can see in Figure 4, sample complexity of Knockout and MallowsMPI is essentially same under small values of φ butKnockout outperformsMallowsMPI as φ gets close to 1 since comparison probabilities grow closer to 1. Surprisingly, for all values of φ except for 0.99, Knockout returned Condorcet winner in all runs. For φ = 0.99, Knockout returned second best element in 10 runs out of 100. Note that p̃(1, 2) = 0.0025 and hence Knockout still outputed a 0.05-maximum. Even though we could not show theoretical guarantees of Knockout under Mallows model, our simulations suggest that it can perform well even under this model.\nMore experiments are provided in Appendix G."
    }, {
      "heading" : "7 Conclusion",
      "text" : "We studied maximum selection and ranking using noisy comparisons for the broad model where the comparison probabilities satisfy strong stochastic transitivity and the triangle inequality. For maximum selection, we presented a simple algorithm with linear, hence optimal, sample complexity. For ranking we presented a framework that improves the performance of many ranking algorithms and applied it to merge ranking to derive a near-optimal ranking algorithm.\nWe conducted several experiments and showed that our algorithms perform well not only in theory, but also in practice. Furthermore, they out-performed all existing algorithms.\nThe maximum-selection experiments suggest that our algorithm performs well even without the triangle-inequality assumption. It would be of interest to extend our theoretical guarantees to this case. For ranking, it would be interesting to close the (log log n)3 ratio between the upper- and lower- complexity bounds."
    }, {
      "heading" : "A Merge Ranking",
      "text" : "We first introduce a subroutine that is used by Merge-Rank. It merges two ordered sets in the presence of noisy comparisons."
    }, {
      "heading" : "A.1 Merge",
      "text" : "Merge takes two ordered sets S1 and S2 and outputs an ordered set Q by merging them. Merge starts by comparing the first elements in each set S1 and S2 and places the loser in the first position of Q. It compares the two elements sufficient times to make sure that output is near-accurate. Then it compares the winner and the element right to loser in the corresponding set. It continues this process until we run out of one of the sets and then adds the remaining elements to the end of Q and outputs Q.\nAlgorithm 6 Merge\nInput: Sets S1, S2, bias ǫ, confidence δ. Initialize: i = 1, j = 1 and O = ∅.\n1. while i ≤ |S1| and j ≤ |S2|.\n(a) if S1(i) = Compare(S1(i), S2(j), ǫ, δ), then append S1(i) at the end of O and i = i+1.\n(b) else append S2(j) at the end of O and j = j + 1.\n2. if i ≤ |S1|, then append S1(i : |S1|) at the end of O.\n3. if j ≤ |S2|, then append S2(j : |S2|) at the end of O."
    }, {
      "heading" : "Output: O.",
      "text" : "We show that when we merge two ordered sets using Merge, the error of resulting ordered set is not high compared to the maximum of errors of individual ordered sets.\nLemma 16. With probability ≥ 1 − (|S1| + |S2|)δ, error of Merge(S1, S2, ǫ, δ) is at most ǫ more than the maximum of errors of S1 and S2. Namely, with probability ≥ 1− (|S1|+ |S2|)δ,\nerr(Merge(S1, S2, ǫ, δ)) ≤ max (err(S1), err(S2)) + ǫ."
    }, {
      "heading" : "A.2 Merge-Rank",
      "text" : "Now we present the algorithm Merge-Rank. Merge-Rank partitions the input set S into two sets S1 and S2 each of size |S|/2. It then orders S1 and S2 separately using Merge-Rank and combines the ordered sets using Merge. Notice that Merge-Rank is a recursive algorithm. The singleton sets each containing an unique element in S are merged first. Two singleton sets are merged to form a set with two elements, then the sets with two elements are merged to form a set with four elements and henceforth. By Lemma 16, each merge with bound parameter ǫ′ adds at most ǫ′ to the error. Since error of singleton sets is 0 and each element takes part in log n merges, the error of the output set is at most ǫ′ log n. Hence with bound parameter ǫ/ log n, the error of the output set is less than ǫ.\nAlgorithm 7 Merge-Rank\nInput: Set S, bias ǫ, confidence δ.\n1. S1 = Merge-Rank(S(1 : ⌊|S|/2⌋), ǫ, δ).\n2. S2 = Merge-Rank(S(⌊|S|/2⌋+ 1 : |S|), ǫ, δ).\nOutput: Merge(S1, S2, ǫ, δ)."
    }, {
      "heading" : "B Algorithms for Ranking",
      "text" : "Algorithm 8 Interval-Binary-Search Input: Ordered array S, search element e, bias ǫ\n1. T = Build-Binary-Search-Tree(|S|).\n2. Initialize set Q = ∅, node α = root(T ), and count c = 0.\n3. repeat for 30 log n times\n(a) if α2 − α1 > 1,\ni. Add α1, α2 and ⌈ α1+α2 2 ⌉ to Q.\nii. if Compare(S(α1), e, 10 ǫ2 ) > 1/2 or Compare(e, S(α2), 10 ǫ2 ) > 1/2 then go back to\nthe parent, α = parent(α).\niii. else\n• if Compare(S( ⌈ α1+α2 2 ⌉ ), e, 10 ǫ2 ) > 1/2 go to the left child,α = left(α). • else go to the right child, α = right(α).\n(b) else\ni. if Compare(e, S(α1), 10 ǫ2 ) > 1/2 and Compare(S(α2), a, 10 ǫ2 ) > 1/2,\nc = c+ 1.\nii. else\nA. if c = 0, α = parent(α).\nB. else c = c− 1.\n4. (a) if c > 10 log n, Output: α1.\n(b) else Output: Binary-Search(S,Q, e, 2ǫ).\nAlgorithm 9 Build-Binary -Search-Tree Input: size n. // Recall that each node m in the tree is an interval between left end m1 and right end m2.\n1. Initialize set T ′ = ∅.\n2. Initialize the tree T with the root node (1, n).\nm = (1, n) where m1 = 1 and m2 = n,\nroot(T ) = m\n3. Add m to T ′.\n4. while T ′ is not empty\n(a) Consider a node i in T ′.\n(b) if i2 − i1 > 1, create a left child and right child to i and set their parents as i.\nα =\n(\ni1,\n⌈\ni1 + i2 2\n⌉)\n, β =\n(⌈\ni1 + i2 2\n⌉\n, i2\n)\n,\nleft(i) = α, right(i) = β,\nparent(α) = i, parent(β) = i.\nand add nodes α and β to T ′.\n(c) Remove node i from T ′."
    }, {
      "heading" : "Output: T .",
      "text" : "Algorithm 10 Binary-Search Input: Ordered array S, ordered array Q, search item e, bias ǫ. Initialize: l = 1, h = |Q|.\n1. while h− l > 0\n(a) t = Comapre ( e, S(Q( ⌈\nl+h 2\n⌉\n), 10 lognǫ2\n)\n.\n(b) if t ∈ [ 1 2 − 3ǫ, 1 2 + 3ǫ ] , then Output: Q( ⌈ l+h 2 ⌉ ). (c) else if t < 12 − 3ǫ, then move to the right.\nl =\n⌈\nl + h\n2\n⌉\n.\n(d) else move to the left.\nh =\n⌈\nl + h\n2\n⌉\n.\nOutput: Q(h)."
    }, {
      "heading" : "C Some tools for proving lemmas",
      "text" : "We first prove an auxilliary result that we use in the future analysis.\nLemma 17. Let W = Compare(i, j, ǫ, δ) and L be the other element. Then with probability ≥ 1−δ,\np(W,L) ≥ 1\n2 − ǫ.\nProof. Note that if |p̃(i, j)| < ǫ, then p(i, j) > 12 − ǫ and p(j, i) > 1 2 − ǫ. Hence, p(W,L) ≥ 1 2 − ǫ.\nIf |p̃(i, j)| ≥ ǫ, without loss of generality, assume that i is a better element i.e., p̃(i, j) ≥ ǫ. By Lemma 1, with probability atleast 1− δ, W = i. Hence\nPr\n(\np(W,L) ≥ 1\n2 − ǫ\n)\n= Pr(W = i) ≥ 1− δ.\nWe now prove a Lemma that follows from strong stochastic transitivity and stochastic triangle inequality that we will use in future analysis.\nLemma 18. If p̃(i, j) ≤ ǫ1, p̃(j, k) ≤ ǫ2, then p̃(i, k) ≤ ǫ1 + ǫ2.\nProof. We will divide the proof into four cases based on whether p̃(i, j) > 0 and p̃(j, k) > 0. If p̃(i, j) ≤ 0 and p̃(j, k) ≤ 0, then by strong stochastic transitivity, p̃(i, k) ≤ 0 ≤ ǫ1 + ǫ2. If 0 < p̃(i, j) ≤ ǫ1 and 0 < p̃(j, k) ≤ ǫ2, then by stochastic traingle inequality, p̃(i, k) ≤ ǫ1 + ǫ2. If p̃(i, j) < 0 and 0 < p̃(j, k) ≤ ǫ2, then by strong stochastic transitivity, p̃(i, k) ≤ ǫ2 ≤ ǫ1 + ǫ2. If 0 < p̃(i, j) ≤ ǫ1 and p̃(j, k) < 0, then by strong stochastic transitivity, p̃(i, k) ≤ ǫ1 ≤ ǫ1 + ǫ2."
    }, {
      "heading" : "D Proofs of Section 4",
      "text" : ""
    }, {
      "heading" : "Proof of Lemma 1",
      "text" : "Proof. Let p̂ri and ĉ r denote p̂i and ĉ respectively after r number of comparisons. Output of Compare(i, j, ǫ, δ) will not be i only if p̂ri < 1 2 + ǫ − ĉ r for any r < m = 1 2ǫ2 log 2δ or if p̂i < 1 2 for r = m. We will show that the probability of each of these events happening is bounded by δ2 . Hence by union bound, Lemma follows.\nAfter r comparisons, by Chernoff bound,\nPr(p̂ri < 1\n2 + ǫ− ĉr) ≤ e−2r(ĉ\nr)2 = e− log 4r2 δ = δ\n4r2 .\nUsing union bound,\nPr(∃r s.t. p̂ri ≤ 1\n2 + ǫ− ĉr) ≤\nδ\n2\nAfter m = 1 2ǫ2 log 2δ rounds, by Chernoff bound,\nPr(p̂mi < 1\n2 ) ≤ e−2mǫ\n2 = δ\n2 ."
    }, {
      "heading" : "Proof of Lemma 2",
      "text" : "Proof. Each of the |S|2 pairs is compared at most 1 2ǫ2 log 2δ times, hence the total comparisons is ≤ |S|4ǫ2 log 2 δ . Let k\n∗ = max(Knockout-Round(S, ǫ, δ)) and s∗ = max(S). Let a be the element paired with s∗. There are two cases: p̃(s∗, a) ≥ ǫ and p̃(s∗, a) < ǫ.\nIf p̃(s∗, a) ≥ ǫ, by Lemma 1 with probability ≥ 1− δ, s∗ will win and hence by definitions of s∗ and k∗, p̃(s∗, k∗) = 0 ≤ γǫ. Alternatively, if p̃(s∗, a) < ǫ, let winner(i, j) denote the winner between i and j when compared for 1\n2ǫ2 log 1δ times. Then,\nr(a) (a) ≤ r(winner(s∗, a)) (b) ≤ r(k∗) (c) ≤ r(s∗)\nwhere (a) follows from r(a) ≤ r(s∗), (b) and (c) follow from the definitions of s∗ and k∗ respectively. From strong stochastic tranisitivity on a, k∗ and s∗, p̃(s∗, k∗) ≤ γp̃(s∗, a) ≤ γǫ."
    }, {
      "heading" : "Proof of Theorem 3",
      "text" : "Proof. We first show that with probability ≥ 1 − δ, the output of Knockout is an ǫ-maximum. Let ǫi = cǫ/2 i/3 and δi = δ/2 i. Note that ǫi and δi are bias and confidence values used in round i. Let bi be a maximum element in the set S before round i. Then by Lemma 2, with probability ≥ 1− δi,\np̃(bi, bi+1) ≤ cǫ\n2i/3 . (1)\nBy union bound, the probability that Equation 1 does not hold for some round 1 ≤ i ≤ log |S| is\n≤\nlog |S| ∑\ni=1\nδi =\nlog |S| ∑\ni=1\nδ 2i ≤ δ.\nWith probability ≥ 1− δ, Equation 1 holds for all i and by stochastic triangle inequality,\np̃(b1, blog |S|+1) ≤\nlog |S| ∑\ni=1\np̃(bi, bi+1) ≤ ∞ ∑\ni=1\ncǫ\n2i/3 = ǫ.\nWe now bound the number of comparisons. Let ni = |S| 2i−1\nbe the number of elements in the set at the beginning of round i. The number of comparisons at round i is\n≤ ni 2 · γ222i/3 2c2ǫ2 · log 2i+1 δ .\nHence the number of comparisons in all rounds is\nlog |S| ∑\ni=1\n|S| 2i · γ222i/3 2c2ǫ2 · log 2i+1 δ ≤ |S|γ2 2c2ǫ2\n∞ ∑\ni=1\n1\n2i/3\n(\ni+ log 2\nδ\n)\n= |S|γ2\n2c2ǫ2\n(\n21/3\nc2 +\n1 c log 2 δ\n)\n= O\n(\n|S|γ2\nǫ2 log\n1\nδ\n)\n."
    }, {
      "heading" : "E Proofs of Section 5.1",
      "text" : ""
    }, {
      "heading" : "Proof of Lemma 16",
      "text" : "Proof. Let Q = Merge(S1, S2, ǫ, δ). We will show that for every k, w.p. ≥ 1− δ, p̃(Q(k), Q(l)) ≤ max(err(S1), err(S2))+ǫ ∀l > k. Note that if this property is true for every element then err(Q) ≤ max(err(S1), err(S2)) + ǫ. Since there are |S1|+ |S2| elements in the final merged set, the Lemma follows by union bound.\nIf S1(i) and S2(j) are compared in Merge algorithm, without loss of generality, assume that S1(i) loses i.e., S1(i) appears before S2(j) in T . The elements that appear to the right of S1(i) in Q belong to set Q≥S1(i) = {S1(k) : k > i} ⋃\n{S2(k) : k ≥ j}. We will show that w.p. ≥ 1 − δ, ∀e ∈ Q≥S1(i), p̃(S1(i), e) ≤ max (err(S1), err(S2)) + ǫ.\nBy definition of error of an ordered set,\np̃(S1(i), S1(k)) ≤ err(S1) ∀k > i (2)\np̃(S2(j), S2(k)) ≤ err(S2) ∀k ≥ j. (3)\nBy Lemma 17, w.p. ≥ 1− δ,\np̃(S1(i), S2(j)) ≤ ǫ. (4)\nHence by Equations 3, 4 and Lemma 18, w.p. ≥ 1− δ, p̃(S1(i), S2(k)) ≤ ǫ+ err(S2) ∀k ≥ j."
    }, {
      "heading" : "Proof of Lemma 4",
      "text" : "Proof. We first bound the total comparisons. Let C(Q, ǫ′, δ′) be the number of comparisons that the Merge-Rank uses on a set Q. Since Merge-Rank is a recursive algorithm,\nC(Q, ǫ′, δ′) ≤C(Q[1 : ⌊|Q|/2⌋], ǫ′, δ′)\n+ C(Q[⌊|Q|/2⌋ : |Q|], ǫ′, δ′) + |Q|\n2ǫ′2 log\n2 δ′ .\nFrom this one can obtain that C(S, ǫ′, δ′) = O (\n|S| log |S| ǫ′2 log 1δ′\n)\n. Hence,\nC\n(\n|S|, ǫ\nlog |S| ,\nδ\n|S|2\n)\n= O\n( |S| log3 |S|\nǫ2 log\n|S|2\nδ\n)\n.\nNow we bound the error. By Lemma 16, with probability ≥ 1− |Q|δ,\nerr(Merge-Rank(Q, ǫ′, δ′)) ≤ max{err ( Merge-Rank ( Q[1 : ⌊|Q|/2⌋], ǫ′, δ′ )) , err ( Merge-Rank ( T [⌊|Q|/2⌋+ 1 : |Q|], ǫ′, δ′ )) }+ ǫ′. (5)\nWe can bound the total times Merge is called in a single instance of Merge-Rank(S, ǫ′, δ′). Merge combines the singleton sets and forms the sets with two elements, it combines the sets with two elements and forms the sets with four elements and henceforth. Hence the total times Merge is called is\n∑log |S| i=1 |S| 2i\n≤ |S|. Therefore, the probability that Equation 5 holds every time when two ordered sets are merged in Merge-Rank(S, ǫ′, δ′) is ≤ |S| · |S|δ′ = |S|2δ′.\nIf Equation 5 holds every time Merge is called, then error of Merge-Rank(S, ǫ′, δ′) is at most ∑log |S|\ni=1 ǫ ′ ≤ ǫ′ log |S|. This is because err(S) is 0 if S has only one element. And a singleton set\nparticipates in log n merges before becoming the final output set. Therefore, w.p. ≥ 1− |S|2δ′,\nerr(Merge-Rank(S, ǫ′, δ′)) ≤ log |S|ǫ′.\nHence with probability ≥ 1− δ,\nerr\n(\nMerge-Rank\n(\nS, ǫ\nlog |S| ,\nδ\n|S|2\n))\n≤ ǫ."
    }, {
      "heading" : "F Proofs for Section 5.2",
      "text" : ""
    }, {
      "heading" : "Proof of Lemma 5",
      "text" : "Proof. Let set S be ordered s.t. p̃(S(i), S(j)) ≥ 0 ∀i > j. Let S′′k = S(k : k + 5(log n) x+1 − 1) The probability that none of the elements in S′′k is selected for a given k is\n≤\n(\n1− 5(log n)x+1\nn\n)n/(logn)x\n< 1\nn5 .\nTherefore by union bound, the probability that none of the elements in S′′k is selected for any k is\n≤ n · 1\nn5 =\n1\nn4 ."
    }, {
      "heading" : "Proof of Lemma 7",
      "text" : "We prove Lemma 7 by dividing it into further smaller lemmas. We divide all elements into S into two sets based on distance from anchors. First set contains all elements that are far away from all anchors and the second set contains all elements which are close to atleast one of the anchors. Interval-Binary-Search acts differently on both sets.\nWe first show that for elements in the first set, Interval-Binary-Search places them in between the right anchors by using just the random walk subroutine.\nFor elements in the second set, Interval-Binary-Search might fail to find the right anchors just by using the random walk subroutine. But we show that Interval-Binary-Search visits a close anchor during random walk and Binary-Search finds a close anchor from the set of visited anchors using simple binary search.\nWe first prove Lemma 7 for the elements of first set.\nLemma 19. For ǫ′′ > ǫ′, consider an ǫ′-ranked S′. If an element e is such that |p̃(e, S′(j))| > ǫ′′ ∀j, then with probability ≥ 1 − 1n6 step 4a of Interval-Binary-Search(S ′, e, ǫ′′) outputs the index y such that p̃(e, S′(y)) > ǫ′′ and p̃(S′(y + 1), e) > ǫ′′.\nProof. We first show that there is a unique y s.t. p̃(e, S′(y)) > ǫ′′ and p̃(S′(y + 1), e) > ǫ′′. Let i be the largest index such that p̃(e, S′(i)) > ǫ′′. By Lemma 18, p̃(e, S′(j)) > ǫ′′ − ǫ′ > 0 ∀j < i. Hence by the assumption on e, p̃(e, S′(j)) > ǫ′′ ∀j < i. Let k be the smallest index\nsuch that p̃(S′(k), e) > ǫ′′. By a similar argument as previously, we can show that p̃(S′(j), e) > ǫ′′ ∀j > k.\nHence by the above arguments and the fact that |p̃(e, S′(j))| > ǫ′′ ∀j, there exists only one y such that p̃(e, S′(y)) > ǫ′′ and p̃(S′(y + 1), e) > ǫ′′.\nThus in the tree T , there is only one leaf node w such that p̃(e, S′(w1)) > ǫ ′′ and p̃(S′(w2), e) >\nǫ′′. Consider some node m which is not an ancestor of w. Then either p̃(S′(m1), e) > ǫ\n′′ or p̃(S′(m2), e) < −ǫ ′′. Since we compare e with S′(ml) and S ′(mh) 10 ǫ′′2 times, we move to the parent of m with probability atleast 1920 . Consider some node m which is an ancestor of w. Then p̃(S′(ml), e) < −ǫ ′′ , p̃(S′(mh), e) > ǫ ′′, and |p̃(S′( ⌈\nml+mh 2\n⌉\n), e)| > ǫ′′. Therefore we move in direction of q with probability atleast 1920 . Therefore if we are not at q, then we move towards q with probability atleast 1920 and if we are at q then the count c increases with probability atleast 1920 . Since we start at most log n away from q if we move towards e for 21 log n then the algorithm will output y. The probability that we will have less than 21 log n right comparisons is ≤ e−30 lognD( 21 30 || 19 20 ) ≤ e−30 lognD( 21 30 || 19 20\n) ≤ 1 n6 .\nTo prove Lemma 7 for the elements of the second set, we first show that the random walk subroutine of algorithm Interval-Binary-Search placing an element in wrong bin is highly unlikely.\nLemma 20. For ǫ′′ > ǫ′, consider an ǫ′-ranked set S′. Now consider an element e and y such that either p̃(S′(y), e) > ǫ′′ or p̃(S′(y + 1), e) < −ǫ′′, then step 4a of Interval-BinarySearch(S′, e, ǫ′′) will not output y with probability ≥ 1− 1\nn7 .\nProof. Recall that step 4a of Interval-Binary-Search outputs y if we are at the leaf node (y, y + 1) and the count c is atleast 10 log n.\nSince either p̃(S′(y), e) > ǫ′′ or p̃(S′(y + 1), e) < −ǫ′′, when we are at leaf node (y, y + 1), the count decreases with probability atleast 1920 . Hence the probability that Interval-BinarySearch is at (y,y+1) and the count is greater than 10 log n is at most ∑30 logn\ni=10 logn e −i·D( i−10 log n 2i || 19 20 ) <\n10 log ne−10 lognD( 1 3 || 19 20 ) ≤ 1 n7 .\nWe now show that for an element of the second set, the random walk subroutine either places it in correct bin or visits a close anchor.\nLemma 21. For ǫ′′ > ǫ′, consider an ǫ′-ranked set S′. Now consider an element e that is close to an element in S′ i.e., ∃g : |p̃(S′(g), e)| < ǫ′′. Step 4a of Interval-Binary-Search(S′, e, ǫ′′) will either output the right index y such that p̃(S′(y), e) < ǫ′′ and p̃(S′(y + 1), e) > −ǫ′′ or IntervalBinary-Search visits S′(h) such that |p̃(S′(h), e)| < 2ǫ′′ with probability≥ 1− 1\nn6 .\nProof. By Lemma 20, step 4a of Interval-Binary-Search does not output a wrong interval with probability 1− 1\nn7 . Hence we just need to show that w.h.p., e visits a close anchor.\nLet i be the largest index such that p̃(e, S′(i)) > 2ǫ′′. Then ∀k < i, by Lemma 18, p̃(e, S(k)) > 2ǫ′′ − ǫ′ > ǫ′′ .\nLet j be the smallest index such that p̃(S′(j), e) > 2ǫ′′. Then ∀k > j, by Lemma 18, p̃(S′(k), e) > ǫ′′ .\nTherefore for u < v such that min(|p̃(S′(u), e)|, |p̃(S′(v), e)|) ≥ 2ǫ′′ only one of three sets {x : x < u},{x : u < x < v} and {x : x > v} contains an index z such that |p̃(S′(z), e)| < ǫ′′.\nLet a node α be s.t. for some c ∈ {α1, α2, ⌈ α1+α2 2 ⌉}, |p̃(S ′(c), e)| ≤ 2ǫ′′. If Interval-Binary-\nSearch reaches such a node α then we are done. So assume that Interval-Binary-Search is at a node β s.t. ∀c ∈ {β1, β2, ⌈ β1+β2 2 ⌉}, |p̃(S ′(c), e)| > 2ǫ′′. Note that only one of three sets {x : x < β1 or x > β2}, {x : β1 < x < ⌈ β1+β2\n2 ⌉} and\n{x : ⌈β1+β22 ⌉ < x < β2} contains an index z such that |p̃(S ′(z), e)| < ǫ′′ and Interval-BinarySearch moves towards that set with probability 1920 . Hence the probability that we never visit an anchor that is less than 2ǫ′′ away is at most e−30 lognD( 1 2 || 19\n20 ) ≤ 1n7 .\nWe now complete the proof by showing that for an element e from the second set, if Q contains an index y of an anchor that is close to e, Binary-Search will output one such index.\nLemma 22. For ǫ′′ > ǫ′, consider ordered sets S′, Q s.t. p(S′(Q(i)), S′(Q(j))) > 12 − ǫ ′ ∀i > j. For an element e s.t., ∃g : |p̃(S′(Q(g)), a)| < 2ǫ′′, Binary-Search(S′, Q, a, ǫ′′) will return y such that |p̃(S′(Q(y)), a)| < 4ǫ′′ with probability ≥ 1− 1n6 .\nProof. At any stage of Binary-Search, there are three possibilities that can happen . Consider the case when we are comparing e with S′(Q(i)).\n1. |p̃(S′(Q(i)), e) < 2ǫ′′|. Probability that the fraction of wins for e is not between 12 − 3ǫ ′′ and\n1 2 + 3ǫ\n′′ is less than e− 10 log n ǫ′′2 ǫ′′2 ≤ 1\nn10 . Hence Binary-Search outputs Q(i).\n2. p̃(S′(Q(i)), e) > 2ǫ′′. Probability that the fraction of wins for e is more than 12 is less than\ne− 10 logn ǫ′′2 ǫ′′2 ≤ 1\nn10 . So Binary-Search will not move right. Also notice that p̃(S′(Q(j)), e) >\n2ǫ′′ − ǫ′ > ǫ′′ ∀j > i. 3. p̃(S′(Q(i)), e) > 4ǫ′′. Probability that the fraction of wins for e is more than 12 − 3ǫ ′′ is less than e− 10 log n ǫ′′2 ǫ′′2 ≤ 1\nn10 . Hence Binary-Search will move left. Also notice that p̃(S′(Q(j)), e) >\n4ǫ′′ − ǫ′ > ǫ′′ ∀j > i. We can show similar results for p̃(S′(Q(i)), e) < −2ǫ′′ and p̃(S′(Q(i)), e) < −4ǫ′′. Hence if |p̃(S′(Q(i)), e)| < 2ǫ′′ then Binary-Search outputs Q(i), and if 2ǫ′′ < |p̃(S′(Q(i)), e)| < 4ǫ′′ then either Binary-Search outputs Q(i) or moves in the correct direction and if |p̃(S′(Q(i)), e)| > 4ǫ′′, then Binary-Search moves in the correct direction.\nLemma 23. Interval-Binary-Search(S, e, ǫ) terminates in O( log n log logn ǫ2\n) comparisons for any set S of size O(n).\nProof. Step 3 of Interval-Binary-Search runs for 30 log n iterations. In each iteration, IntervalBinary-Search compares e with at most 3 anchors and repeats each comparison for 10/ǫ2. So total comparisons in step 3 is O(log n/ǫ2). The size of Q is upper bounded by 90 log n and BinarySearch does a simple binary search over Q by repeating each comparison 10 log n/ǫ2. Hence total comparisons used by Binary-Search is O(log n log log n/ǫ2)\nCombining Lemmas 6, 20, 21, 22, 23 yields the result."
    }, {
      "heading" : "Proof of Lemma 10",
      "text" : "Proof. Combining Lemmas 6, 9 and using union bound, at the end of step 5a ,w.p. ≥ 1− 2 n3 , S′ is ǫ′ranked and ∀j, e ∈ Bj, min(p̃(e, S ′(j)), p̃(S′(j+1), e)) > 5ǫ′′. Hence by Lemma 18, ∀j, k < j, e ∈ Bj , p̃(e, S′(k)) > 5ǫ′′ − ǫ′ > 4ǫ′′. Similarly, ∀j, k > j, e ∈ Bj, p̃(S ′(k), e) > 5ǫ′′ − ǫ′ > 4ǫ′′.\nIf |Bj | > 0, then p̃(e, S ′(k)) > 4ǫ′′ for e ∈ Bj , k ≤ j, p̃(S ′(l), e) > 4ǫ′′ for e ∈ Bj, l ≥ j. Hence by strong stochastic transitivity, p̃(S′(l), S′(k)) > 4ǫ′′ for l ≥ j ≥ k. Therefore there exists k, l s.t. p̃(S′(l), f) > 0 ∀f ∈ {S′(y) : y ≤ j}, p̃(S′(k), S′(l)) > 0 and p̃(f, S′(k)) > 0 ∀f ∈ {S′(y) : y ≥ j}. Now by Lemma 5, w.p. ≥ 1− 1\nn3 , size of such set Bj is less than 10(log n) x+1. Lemma follows by union bound."
    }, {
      "heading" : "Proof of Theorem 12",
      "text" : "We first bound the running time of Binary-Search-Ranking algorithm.\nTheorem 24. Binary-Search-Ranking terminates after O(n(log logn) x\nǫ2 log n) comparisons with probability ≥ 1− 1n2 .\nProof. Step 2Rank-x (S′, ǫ′, 1 n6 ) terminates afterO( n ǫ2 log n) comparisons with probability≥ 1− 1 n6 .\nBy Lemma 7, for each element e, the step 4a Interval-Binary-Search(S′, e, ǫ′′) terminates after O( logn log logn\nǫ2 log log n) comparisons. Hence step 4 takes at most O(n logn log logn ǫ2 ) comparisons.\nComparing each element with the anchors in steps 5a takes at most O( logn ǫ2 ) comparisons. With probability ≥ 1 − 1 n4 step 5b Sort-x(Bi, ǫ ′′, 1 n4 ) terminates after O(|Bi| (log |Bi|)x ǫ2 log n)\ncomparisons. By Lemma 10, |Bi| ≤ 10(log n) x+1 for all i w.p. ≥ 1− 3 n3 . Hence, w.p. ≥ 1− 3 n3 , total comparisons to rank all Bis is at most ∑ iO(|Bi| (log |Bi|)x ǫ2 log n) ≤ ∑ iO( |Bi| logn(log(10 logn)x+1)x ǫ2 ) = O(n logn(log logn) x\nǫ2 ).\nTherefore, by summing comparisons over all steps, with probability ≥ 1− 1n2 total comparisons\nis at most O ( n logn(log logn)x\nǫ2\n)\n.\nNow we show that Binary-Search-Ranking outputs an ǫ-ranking with high probability.\nTheorem 25. Binary-Search-Ranking produces an ǫ-ranking with probability at least 1− 1 n2 .\nProof. By combining Lemmas 6, 8, 9, 11 and using union bound, w.p. ≥ 1 − 1 n2 , at the end of step 5b,\n• S′ is ǫ′-\n• Each Ci has elements such that |p̃(Ci(j), S(i))| < 7ǫ ′′ for all j.\n• Each Bi has elements such that p̃(S ′(i), Bi(j)) < −5ǫ ′′ and p̃(S′(i+ 1), Bi(j)) > 5ǫ ′′.\n• All Bis are ǫ ′′-ranked.\nFor j ≥ i, e ∈ Bj−1 ⋃ S′(j) ⋃ Cj, f ∈ S ′(k) ⋃ Ck ⋃ Bk, p̃(e, f) ≤ p̃(e, S ′(i)) + p̃(S′(i), S′(j)) + p̃(S′(j), f) ≤ 7ǫ′′ + ǫ′ + 7ǫ′′ < 15ǫ′′ = ǫ. Combining the above result with the fact that all Bis are ǫ′′-ranked proves the Lemma.\nCombining Theorems 24, 25 yields the result."
    }, {
      "heading" : "Proof Sketch for Theorem 15",
      "text" : "Proof sketch. Consider a stochastic model where there is an inherent ranking r and for any two consecutive elements p(i, i+1) = 12 −2ǫ. Suppose there is a genie that knows the true ranking r up to the sets {r(2i− 1), r(2i)} for all i i.e., for each i, genie knows {r(2i − 1), r(2i)} but it does not know the ranking between these two elements. Since consecutive elements have ǫ(i, i+1) = 2ǫ > ǫ, to find an ǫ-ranking, the genie has to correctly identify the ranking within all the n/2 pairs. Using Fano’s inequality from information theory, it can be shown that the genie needs at least Ω (\nn ǫ2 log nδ\n)\ncomparisons to identify the ranking of the consecutive elements with probability 1− δ."
    }, {
      "heading" : "G Additional Experiments",
      "text" : "As we mentioned in Section 6, BTM-PAC allows comparison of an element with itself. It is not beneficial when the goal is to find ǫ-maximum. So we modify their algorithm by not allowing such comparisons. We refer to this restricted version as R-BTM-PAC.\nAs seen in figure, performance of BTM-PAC does not increase by much by restricting the comparisons.\nWe further reduce the constants inR-BTM-PAC. We change Equations (7) and (8) in Yue & Joachims\n[2011] to cδ(t) = √ 1 t log n3N δ and N = ⌈ 1 ǫ2 log n3N δ ⌉, respectively.\nWe believe the same guarantees hold even with the updated constants. We refer to this improved restricted version as IR-BTM-PAC. Here too we consider the stochastic model where p(i, j) = 0.6∀ i < j and we find 0.05-maximum with error probability δ = 0.1.\nIn Figure 5 we compare the performance of Knockout and all variations of BTM-PAC. As the figure suggests, the performance of IR-BTM-PAC improves a lot but Knockout still outperforms it significantly.\nIn Figure 6, we consider the stochastic model where p(i, j) = 0.6 ∀i < j and find ǫ-maximum for different values of ǫ. Similar to previous experiments, we use δ = 0.1. As we can see the number of comparisons increases almost linearly with n. Further the number of comparisons does not increase significantly even when ǫ decreases. Also the number of comparisons seem to be converging as ǫ goes to 0. Knockout outperforms MallowsMPI even for the very small ǫ values. We attribute this to the subroutine Compare that finds the winner faster when the distance between elements are much larger than ǫ.\nFor the stochastic model p(i, j) = 0.6 ∀i < j, we run our Merge-Rank algorithm to find 0.05 ranking with δ = 0.1. Figure 7 shows that sample complexity does not increase a lot with decreasing ǫ."
    } ],
    "references" : [ {
      "title" : "Sorting with adversarial comparators and application to density estimation",
      "author" : [ "Acharya", "Jayadev", "Jafarpour", "Ashkan", "Orlitsky", "Alon", "Suresh", "Ananda Theertha" ],
      "venue" : "In ISIT, pp. 1682–1686",
      "citeRegEx" : "Acharya et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Acharya et al\\.",
      "year" : 2014
    }, {
      "title" : "Near-optimalsample estimators for spherical gaussian mixtures",
      "author" : [ "Acharya", "Jayadev", "Jafarpour", "Ashkan", "Orlitsky", "Alon", "Suresh", "Ananda Theertha" ],
      "venue" : null,
      "citeRegEx" : "Acharya et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Acharya et al\\.",
      "year" : 2014
    }, {
      "title" : "Maximum selection and sorting with adversarial comparators and an application to density estimation",
      "author" : [ "Acharya", "Jayadev", "Falahatgar", "Moein", "Jafarpour", "Ashkan", "Orlitsky", "Alon", "Suresh", "Ananda Theertha" ],
      "venue" : "arXiv preprint arXiv:1606.02786,",
      "citeRegEx" : "Acharya et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Acharya et al\\.",
      "year" : 2016
    }, {
      "title" : "Sorting and selection with imprecise comparisons",
      "author" : [ "Ajtai", "Miklós", "Feldman", "Vitaly", "Hassidim", "Avinatan", "Nelson", "Jelani" ],
      "venue" : "ACM Transactions on Algorithms (TALG),",
      "citeRegEx" : "Ajtai et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Ajtai et al\\.",
      "year" : 2015
    }, {
      "title" : "Noisy sorting without resampling",
      "author" : [ "Braverman", "Mark", "Mossel", "Elchanan" ],
      "venue" : "In Proceedings of the nineteenth annual ACM-SIAM SODA,",
      "citeRegEx" : "Braverman et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Braverman et al\\.",
      "year" : 2008
    }, {
      "title" : "Sorting from noisy information",
      "author" : [ "Braverman", "Mark", "Mossel", "Elchanan" ],
      "venue" : "arXiv preprint arXiv:0910.1191,",
      "citeRegEx" : "Braverman et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Braverman et al\\.",
      "year" : 2009
    }, {
      "title" : "Top-k selection based on adaptive sampling of noisy preferences",
      "author" : [ "Busa-Fekete", "Róbert", "Szorenyi", "Balazs", "Cheng", "Weiwei", "Weng", "Paul", "Hüllermeier", "Eyke" ],
      "venue" : "In Proc. of The ICML,",
      "citeRegEx" : "Busa.Fekete et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Busa.Fekete et al\\.",
      "year" : 2013
    }, {
      "title" : "Preference-based rank elicitation using statistical models: The case of mallows",
      "author" : [ "Busa-Fekete", "Róbert", "Hüllermeier", "Eyke", "Szörényi", "Balázs" ],
      "venue" : "In Proc. of the ICML, pp. 1071–1079,",
      "citeRegEx" : "Busa.Fekete et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Busa.Fekete et al\\.",
      "year" : 2014
    }, {
      "title" : "Pac rank elicitation through adaptive sampling of stochastic pairwise preferences",
      "author" : [ "Busa-Fekete", "Róbert", "Szörényi", "Balázs", "Hüllermeier", "Eyke" ],
      "venue" : "In AAAI,",
      "citeRegEx" : "Busa.Fekete et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Busa.Fekete et al\\.",
      "year" : 2014
    }, {
      "title" : "Computing with noisy information",
      "author" : [ "Feige", "Uriel", "Raghavan", "Prabhakar", "Peleg", "David", "Upfal", "Eli" ],
      "venue" : "SIAM Journal on Computing,",
      "citeRegEx" : "Feige et al\\.,? \\Q1994\\E",
      "shortCiteRegEx" : "Feige et al\\.",
      "year" : 1994
    }, {
      "title" : "Active ranking from pairwise comparisons and when parametric assumptions don’t help",
      "author" : [ "Heckel", "Reinhard", "Shah", "Nihar B", "Ramchandran", "Kannan", "Wainwright", "Martin J" ],
      "venue" : "arXiv preprint arXiv:1606.08842,",
      "citeRegEx" : "Heckel et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Heckel et al\\.",
      "year" : 2016
    }, {
      "title" : "Trueskill: a bayesian skill rating system",
      "author" : [ "Herbrich", "Ralf", "Minka", "Tom", "Graepel", "Thore" ],
      "venue" : "In Proceedings of the 19th International Conference on Neural Information Processing Systems,",
      "citeRegEx" : "Herbrich et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Herbrich et al\\.",
      "year" : 2006
    }, {
      "title" : "Top-k ranking from pairwise comparisons: When spectral ranking is optimal",
      "author" : [ "Jang", "Minje", "Kim", "Sunghyun", "Suh", "Changho", "Oh", "Sewoong" ],
      "venue" : "arXiv preprint arXiv:1603.04153,",
      "citeRegEx" : "Jang et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Jang et al\\.",
      "year" : 2016
    }, {
      "title" : "Individual choice behavior: A theoretical analysis",
      "author" : [ "Luce", "R Duncan" ],
      "venue" : "Courier Corporation,",
      "citeRegEx" : "Luce and Duncan.,? \\Q2005\\E",
      "shortCiteRegEx" : "Luce and Duncan.",
      "year" : 2005
    }, {
      "title" : "Data structures using C : 1000 problems and solutions",
      "author" : [ "Mukherjee", "Sudipta" ],
      "venue" : null,
      "citeRegEx" : "Mukherjee and Sudipta.,? \\Q2011\\E",
      "shortCiteRegEx" : "Mukherjee and Sudipta.",
      "year" : 2011
    }, {
      "title" : "Rank centrality: Ranking from pairwise",
      "author" : [ "Negahban", "Sahand", "Oh", "Sewoong", "Shah", "Devavrat" ],
      "venue" : "isons. In NIPS,",
      "citeRegEx" : "Negahban et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Negahban et al\\.",
      "year" : 2012
    }, {
      "title" : "Active exploration for learning rankings from clickthrough",
      "author" : [ "Radlinski", "Filip", "Joachims", "Thorsten" ],
      "venue" : "comparisons. Operations Research,",
      "citeRegEx" : "Radlinski et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Radlinski et al\\.",
      "year" : 2016
    }, {
      "title" : "How does clickthrough data",
      "author" : [ "Radlinski", "Filip", "Kurup", "Madhu", "Joachims", "Thorsten" ],
      "venue" : "Proceedings of the 13th ACM SIGKDD,",
      "citeRegEx" : "Radlinski et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Radlinski et al\\.",
      "year" : 2007
    }, {
      "title" : "A statistical convergence perspective of algorithms for rank",
      "author" : [ "Rajkumar", "Arun", "Agarwal", "Shivani" ],
      "venue" : null,
      "citeRegEx" : "Rajkumar et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Rajkumar et al\\.",
      "year" : 2008
    }, {
      "title" : "Efficient algorithms for adver",
      "author" : [ "Syrgkanis", "Vasilis", "Krishnamurthy", "Akshay", "Schapire", "Robert E" ],
      "venue" : "Proc. of the ICML,",
      "citeRegEx" : "Syrgkanis et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Syrgkanis et al\\.",
      "year" : 2014
    }, {
      "title" : "Online rank elicitation",
      "author" : [ "Szörényi", "Balázs", "Busa-Fekete", "Róbert", "Paul", "Adil", "Hüllermeier", "Eyke" ],
      "venue" : "sarial contextual learning. arXiv preprint arXiv:1602.02454,",
      "citeRegEx" : "Szörényi et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Szörényi et al\\.",
      "year" : 2016
    }, {
      "title" : "plackett-luce: A dueling bandits approach",
      "author" : [ "Urvoy", "Tanguy", "Clerot", "Fabrice", "Féraud", "Raphael", "Naamane", "Sami" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Urvoy et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Urvoy et al\\.",
      "year" : 2015
    }, {
      "title" : "k-armed voting bandits",
      "author" : [ "Yue", "Yisong", "Joachims", "Thorsten" ],
      "venue" : "In Proc. of the ICML, pp. 91–99,",
      "citeRegEx" : "Yue et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Yue et al\\.",
      "year" : 2013
    } ],
    "referenceMentions" : [ {
      "referenceID" : 11,
      "context" : "Patented by Microsoft, TrueSkill Herbrich et al. [2006] is such a ranking system for Xbox gamers.",
      "startOffset" : 33,
      "endOffset" : 56
    }, {
      "referenceID" : 11,
      "context" : "Patented by Microsoft, TrueSkill Herbrich et al. [2006] is such a ranking system for Xbox gamers. Another important application is online advertising. Prominent web pages devote precious little space to advertisements, limiting companies like Google, Microsoft, or Yahoo! to present a typical user with just a couple of ads, of which the user selects at most one. Based on these small random comparisons, the company would like to rank the ads according to their appeal Radlinski & Joachims [2007], Radlinski et al.",
      "startOffset" : 33,
      "endOffset" : 498
    }, {
      "referenceID" : 11,
      "context" : "Patented by Microsoft, TrueSkill Herbrich et al. [2006] is such a ranking system for Xbox gamers. Another important application is online advertising. Prominent web pages devote precious little space to advertisements, limiting companies like Google, Microsoft, or Yahoo! to present a typical user with just a couple of ads, of which the user selects at most one. Based on these small random comparisons, the company would like to rank the ads according to their appeal Radlinski & Joachims [2007], Radlinski et al. [2008]. This and related applications have brought about a resurgence of interest in maximum selection and ranking using noisy comparisons.",
      "startOffset" : 33,
      "endOffset" : 523
    }, {
      "referenceID" : 11,
      "context" : "Patented by Microsoft, TrueSkill Herbrich et al. [2006] is such a ranking system for Xbox gamers. Another important application is online advertising. Prominent web pages devote precious little space to advertisements, limiting companies like Google, Microsoft, or Yahoo! to present a typical user with just a couple of ads, of which the user selects at most one. Based on these small random comparisons, the company would like to rank the ads according to their appeal Radlinski & Joachims [2007], Radlinski et al. [2008]. This and related applications have brought about a resurgence of interest in maximum selection and ranking using noisy comparisons. Several noise models were considered, including the popular Plackett-Luce model Plackett [1975], Luce [2005].",
      "startOffset" : 33,
      "endOffset" : 752
    }, {
      "referenceID" : 11,
      "context" : "Patented by Microsoft, TrueSkill Herbrich et al. [2006] is such a ranking system for Xbox gamers. Another important application is online advertising. Prominent web pages devote precious little space to advertisements, limiting companies like Google, Microsoft, or Yahoo! to present a typical user with just a couple of ads, of which the user selects at most one. Based on these small random comparisons, the company would like to rank the ads according to their appeal Radlinski & Joachims [2007], Radlinski et al. [2008]. This and related applications have brought about a resurgence of interest in maximum selection and ranking using noisy comparisons. Several noise models were considered, including the popular Plackett-Luce model Plackett [1975], Luce [2005]. Yet even for such specific models, the complexity of maximum selection was known only up to a log n factor and the complexity of ranking was known",
      "startOffset" : 33,
      "endOffset" : 765
    }, {
      "referenceID" : 9,
      "context" : "[2012, 2016], Jang et al. [2016] where we cannot choose the comparison pairs, and adaptive or online where the comparison pairs are selected sequentially based on previous results.",
      "startOffset" : 14,
      "endOffset" : 33
    }, {
      "referenceID" : 9,
      "context" : "[2012, 2016], Jang et al. [2016] where we cannot choose the comparison pairs, and adaptive or online where the comparison pairs are selected sequentially based on previous results. In this paper we focus on the latter. We specify the desired output via the (ǫ, δ)-PAC paradigm Yue & Joachims [2011], Busa-Fekete et al.",
      "startOffset" : 14,
      "endOffset" : 299
    }, {
      "referenceID" : 6,
      "context" : "We specify the desired output via the (ǫ, δ)-PAC paradigm Yue & Joachims [2011], Busa-Fekete et al. [2014b] that requires the output to likely closely approximate the intended value.",
      "startOffset" : 81,
      "endOffset" : 108
    }, {
      "referenceID" : 6,
      "context" : "[2013], Busa-Fekete et al. [2014b,b] assume no underlying ranking or constraints on probabilities and find ranking based on Copeland, Borda count and Random Walk procedures. Urvoy et al. [2013], Busa-Fekete et al.",
      "startOffset" : 8,
      "endOffset" : 194
    }, {
      "referenceID" : 6,
      "context" : "[2013], Busa-Fekete et al. [2014b,b] assume no underlying ranking or constraints on probabilities and find ranking based on Copeland, Borda count and Random Walk procedures. Urvoy et al. [2013], Busa-Fekete et al. [2014b] showed that if the probabilities p(i, j) are not constrained, both maximum selection and ranking problems require Θ(n2) comparisons.",
      "startOffset" : 8,
      "endOffset" : 222
    }, {
      "referenceID" : 6,
      "context" : "[2013], Busa-Fekete et al. [2014b,b] assume no underlying ranking or constraints on probabilities and find ranking based on Copeland, Borda count and Random Walk procedures. Urvoy et al. [2013], Busa-Fekete et al. [2014b] showed that if the probabilities p(i, j) are not constrained, both maximum selection and ranking problems require Θ(n2) comparisons. Several models have therefore been considered to further constrain the probabilities. Under the assumptions of strong stochastic transitivity and triangle inequality , Yue & Joachims [2011] derived a PACmaximum selection algorithm that usesO ( n ǫ2 log n ǫδ )",
      "startOffset" : 8,
      "endOffset" : 545
    }, {
      "referenceID" : 11,
      "context" : "Szörényi et al. [2015] derived a PAC ranking algorithm for PL-model distributions that requires O( n ǫ2 log n log n δǫ ) comparisons.",
      "startOffset" : 0,
      "endOffset" : 23
    }, {
      "referenceID" : 11,
      "context" : "Szörényi et al. [2015] derived a PAC ranking algorithm for PL-model distributions that requires O( n ǫ2 log n log n δǫ ) comparisons. In addition to PAC paradigm, Yue & Joachims [2011] also considered this problem under the bandit setting and bounded the regret of the resulting dueling bandits problem.",
      "startOffset" : 0,
      "endOffset" : 185
    }, {
      "referenceID" : 11,
      "context" : "Syrgkanis et al. [2016] looked at similar formulation.",
      "startOffset" : 0,
      "endOffset" : 24
    }, {
      "referenceID" : 2,
      "context" : "Another non-PAC approach by Busa-Fekete et al. [2014a], Feige et al.",
      "startOffset" : 28,
      "endOffset" : 55
    }, {
      "referenceID" : 2,
      "context" : "Another non-PAC approach by Busa-Fekete et al. [2014a], Feige et al. [1994] solves the maximum selection and ranking problems.",
      "startOffset" : 28,
      "endOffset" : 76
    }, {
      "referenceID" : 0,
      "context" : "For example, Acharya et al. [2014a, 2016, 2014b] considered adversarial sorting with applications to density estimation and Ajtai et al. [2015] considered the same with deterministic algorithms.",
      "startOffset" : 13,
      "endOffset" : 144
    }, {
      "referenceID" : 0,
      "context" : "For example, Acharya et al. [2014a, 2016, 2014b] considered adversarial sorting with applications to density estimation and Ajtai et al. [2015] considered the same with deterministic algorithms. Mallows stochastic model Busa-Fekete et al. [2014a] does not satisfy the stochastic triangle inequality and hence our theoretical guarantees do not hold under this model.",
      "startOffset" : 13,
      "endOffset" : 247
    }, {
      "referenceID" : 9,
      "context" : "Using the lower bound in Feige et al. [1994], it can be inferred that the best PAC maximum selection algorithm requires Ω ( n ǫ2 log 1δ )",
      "startOffset" : 25,
      "endOffset" : 45
    }, {
      "referenceID" : 20,
      "context" : "comparisons for δ = 1 n where as Szörényi et al. [2015] uses O ( n(log n)2/ǫ2 )",
      "startOffset" : 33,
      "endOffset" : 56
    }, {
      "referenceID" : 20,
      "context" : "Furthermore Szörényi et al. [2015] provided these guarantees only under Plackett-Luce model which is more restrictive compared to ours.",
      "startOffset" : 12,
      "endOffset" : 35
    }, {
      "referenceID" : 20,
      "context" : "Szörényi et al. [2015] showed that their algorithm",
      "startOffset" : 0,
      "endOffset" : 23
    }, {
      "referenceID" : 9,
      "context" : "Interval-Binary-Search is similar to the noisy binary search algorithm in Feige et al. [1994]. It builds a binary search tree with the bins as the leaves and it does a random walk over this tree.",
      "startOffset" : 74,
      "endOffset" : 94
    }, {
      "referenceID" : 20,
      "context" : "Using PALPAC-AMPRR Szörényi et al. [2015] as a Rank-x algorithm with x = 1 leads to the following corollary over PL model.",
      "startOffset" : 19,
      "endOffset" : 42
    }, {
      "referenceID" : 6,
      "context" : "We compare the sample complexity of Knockout with that of BTM-PAC Yue & Joachims [2011], MallowsMPI Busa-Fekete et al. [2014a], and AR Heckel et al.",
      "startOffset" : 100,
      "endOffset" : 127
    }, {
      "referenceID" : 6,
      "context" : "We compare the sample complexity of Knockout with that of BTM-PAC Yue & Joachims [2011], MallowsMPI Busa-Fekete et al. [2014a], and AR Heckel et al. [2016]. BTM-PAC is an (ǫ, δ)PAC algorithm for the same model considered in this paper.",
      "startOffset" : 100,
      "endOffset" : 156
    }, {
      "referenceID" : 6,
      "context" : "We compare the sample complexity of Knockout with that of BTM-PAC Yue & Joachims [2011], MallowsMPI Busa-Fekete et al. [2014a], and AR Heckel et al. [2016]. BTM-PAC is an (ǫ, δ)PAC algorithm for the same model considered in this paper. MallowsMPI finds a Condorcet winner which exists under our general model. AR finds the maximum according to Borda scores. We also tried PLPAC Szörényi et al. [2015], developed originally for PL model but the algorithm could not meet guarantees of δ = 0.",
      "startOffset" : 100,
      "endOffset" : 401
    }, {
      "referenceID" : 20,
      "context" : "As noted in Szörényi et al. [2015], sample complexity of MallowsMPI gets worse as p̃(i, j) gets close to 0.",
      "startOffset" : 12,
      "endOffset" : 35
    }, {
      "referenceID" : 6,
      "context" : "As in Busa-Fekete et al. [2014a], we consider n = 10 elements and various values for φ: 0.",
      "startOffset" : 6,
      "endOffset" : 33
    } ],
    "year" : 2017,
    "abstractText" : "We consider (ǫ, δ)-PAC maximum-selection and ranking for general probabilistic models whose comparisons probabilities satisfy strong stochastic transitivity and stochastic triangle inequality. Modifying the popular knockout tournament, we propose a maximum-selection algorithm that uses O (",
    "creator" : "LaTeX with hyperref package"
  }
}