{
  "name" : "1605.01713.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Not Just A Black Box:  Interpretable Deep Learning by Propagating Activation Differences",
    "authors" : [ "Avanti Shrikumar", "Anna Y. Shcherbina", "Anshul Kundaje" ],
    "emails" : [ "(avanti@stanford.edu),", "(pgreens@stanford.edu)", "(annashch@stanford.edu),", "(akundaje@stanford.edu)" ],
    "sections" : [ {
      "heading" : "1. Introduction",
      "text" : "As neural networks become increasingly popular, their “black box” reputation is a barrier to adoption when interpretability is paramount. Understanding the features that lead to a particular output builds trust with users and can lead to novel scientific discoveries. Simonyan et al. (2013) proposed using gradients to generate saliency maps and showed that this is a generalization of the deconvolutional nets of Zeiler et al. (2013). Guided backpropagation (Springenberg et al. 2014) is another variant which only considers gradients that have positive error signal. As shown in Figure 2, saliency maps can be substantially improved by simply multiplying the gradient with the input signal, which corresponds to a first-order Taylor approximation of how the output would change if the input were set to zero; the layer-wise relevance propagation rules described in Samek et al. (2015) reduce to this approach, assuming bias terms are included in the denominators.\nProceedings of the 33 rd International Conference on Machine Learning, New York, NY, USA, 2016. JMLR: W&CP volume 48. Copyright 2016 by the author(s).\nGradient-based approaches are problematic because activation functions such as Rectified Linear Units (ReLUs) have a gradient of zero when they are not firing, and yet a ReLU that does not fire can still carry information (Figure 1). Similarly, sigmoid or tanh activations are popular choices for the activation functions of gates in memory units of recurrent neural networks such as GRUs and LSTMs (Chung et al. 2014; Hochreiter and Schmidhuber 1997), but these activations have a near-zero gradient at high or low inputs even though such inputs can be very significant.\nWe present DeepLIFT, a method for assigning feature importance that compares a neuron’s activation to its ‘reference’, where the reference is the activation that the neuron has when the network is provided a ‘reference input’ (the reference input is defined according to what is appropriate for the task at hand). This addresses the limitation of gradient-based approaches because the difference from the reference may be non-zero even when the gradient is zero."
    }, {
      "heading" : "2. DeepLIFT Method",
      "text" : "We denote the contribution of x to y as Cxy . Let the activation of a neuron n be denoted as An. Further, let the reference activation of neuron n be denoted A0n, and let the An − A0n be denoted as δn. We define our contributions Cxy to satisfy the following properties.\nar X\niv :1\n60 5.\n01 71\n3v 1\n[ cs\n.L G\n] 5\nM ay"
    }, {
      "heading" : "2.1. Summation to δ",
      "text" : "For any set of neurons S whose activations are minimally sufficient to compute the activation of y (that is, if we know the activations of S, we can compute the activation of y, and there is no set S′ ⊂ S such that S′ is sufficient to compute the activation of y - in layman’s terms, S is a full set of non-redundant inputs to y), the following property holds: ∑\ns∈S Csy = δy (1)\nThat is, the sum over all the contributions of neurons in S to y equals the difference-from-reference of y."
    }, {
      "heading" : "2.2. Linear composition",
      "text" : "Let Ox represent the output neurons of x. The following property holds:\nCxy = ∑ o∈Ox Cxo δo Coy (2)\nIn layman’s terms, each neuron ‘inherits’ a contribution through its outputs in proportion to how much that neuron contributes to the difference-from-reference of the output."
    }, {
      "heading" : "2.3. Backpropagation Rules",
      "text" : "We show that the contributions as defined above can be computed using the following rules (which can be implemented to run on a GPU). The computation is reminiscent of the chain rule used during gradient backpropagation, as equation 2 makes it possible to start with contribution scores of later layers and use them to find the contribution scores of preceding layers. To avoid issues of numerical stability when δn for a particular neuron is small, rather than computing the contribution scores explicitly, we instead compute multipliers mxy that, when multiplied with the difference-from-reference, give the contribution:\nmxyδx = Cxy (3)\nLet t represent the target neuron that we intend to compute contributions to, and let Ox represent the set of outputs of x. We show that:\nmxt = ∑ y∈Ox mxymyt (4)\nThe equation above follows from the linear composition property and the definition of the multipliers, as proved be-\nlow:\nCxt = ∑ y∈Ox Cxy δy Cyt\nmxtδx = ∑ y∈Ox Cxy δy (mytδy) = ∑ y∈Ox Cxymyt\nmxt = ∑ y∈Ox Cxy δx myt = ∑ y∈Ox mxymyt\n(5)\nIn the equations below, Iy denotes the set of inputs of y."
    }, {
      "heading" : "2.3.1. AFFINE FUNCTIONS",
      "text" : "Let\nAy = ∑ x∈Iy wxyAx + b (6) Then mxy = wxy\nProof. We show that δy = ∑\nx∈Iy mxyδx.\nUsing the fact that An = A0n + δn, we have:\n(A0y + δy) = ∑ x∈Iy wxy(A 0 x + δx) + b =\n∑ x∈Iy wxyA 0 x + b+ ∑ x∈Iy wxyδx (7)\nWe also note that the reference activation A0y can be found as follows:\nA0y = ∑ x∈Iy wxyA 0 x + b (8) Thus, canceling out A0y yields:\nδy = ∑ x∈Iy wxyδx = ∑ x∈Iy mxyδx (9)"
    }, {
      "heading" : "2.3.2. MAX OPERATION",
      "text" : "We consider the case of max operation such as a maxpool:\nAy = max x∈Iy Ax (10)\nThen we have:\nmxy = 1{Ax = Ay} δy δx\n(11)\nWhere 1{} is the indicator function. If a symbolic computation package is used, then the gradient of y with respect to x can be used in place of 1{Ax = Ay}.\nProof. ∑ x∈y mxyδx = (∑ x∈y 1{Ax = Ay} δy δx ) δx\n= ∑ x∈y 1{Ax = Ay}δy = δy (12)"
    }, {
      "heading" : "2.3.3. MAXOUT UNITS",
      "text" : "A maxout function has the form\nAy = n\nmax i=1 (∑ x wixyAx ) + bi (13)\ni.e. it is the max over n affine functions of the input vector ~x. For a given vector of activations A~x of the inputs, we split A~x − A0~x into segments such that over each segment s, a unique affine function dominates the maxout and the coefficient of an individual input x over that segment is w(s)xy . Let l(s) denote the fraction ofA~x−A0~x in segment s. We have:\nmxy = ∑ s l(s)w(s)xy (14)\nIntuitively speaking, we simply split the piecewise-linear maxout function into regions where it is linear, and do a weighted sum of the coefficients of x in each region according to how much of A~x −A~x falls in that region."
    }, {
      "heading" : "2.3.4. OTHER ACTIVATIONS",
      "text" : "The following choice for mxy , which is the same for all inputs to y, satisfies summation-to-delta:\nmxy = δy∑\nx′∈Iy δx′ (15)\nThis rule may be used for nonlinearities like ReLUs, PReLUs, sigmoid and tanh (where y has only one input). Situations where the denominator is near zero can be handled by applying L’hopital’s rule, because by definition:\nδy → 0 as ∑ x∈Iy δx → 0 (16)"
    }, {
      "heading" : "2.3.5. ELEMENT-WISE PRODUCTS",
      "text" : "Consider the function:\nAy = A 0 y + δy = (A 0 x1 + δx1)(A 0 x2 + δx2) (17)\nWe have:\nδy = (A 0 x1 + δx1)(A 0 x2 + δx2)− (A 0 x1A 0 x2)\n= A0x1δx2 +A 0 x2δx1 + δx1δx2\n= δx1 ( A0x2 + δx2 2 ) + δx2 ( A0x1 + δx1 2 ) (18) Thus, viable choices for the multipliers are mx1y = A 0 x2 + 0.5δx2 and mx2y = A 0 x1 + 0.5δx1"
    }, {
      "heading" : "2.4. A note on final activation layers",
      "text" : "Activation functions such as a softmax or a sigmoid have a maximum δ of 1.0. Due to the summation to δ property, the contribution scores for individual features are lower when there are several redundant features present. As an example, consider At = σ(Ay) (where sigma is the sigmoid transformation) and Ay = Ax1 +Ax2 . Let the default activations of the inputs be A0x1 = A 0 x2 = 0. When x1 = 100 and x2 = 0, we have Cx1t = 0.5. However, when both x1 = 100 and x2 = 100, we have Cx1t = Cx2t = 0.25. To avoid this attenuation of contribution in the presence of redundant inputs, we can use the contributions to y rather than t; in both cases, Cx1y = 100."
    }, {
      "heading" : "2.5. A note on Softmax activation",
      "text" : "Let t1, t2...tn represent the output of a softmax transformation on the nodes y1, y2...yn, such that:\nAti = eAyi∑n\ni′=1 e Ay′ i\n(19)\nHere, Ay1 ...Ayn are affine functions of their inputs. Let x represent a neuron that is an input to Ay1 ...Ayn , and let wxyi represent the coefficient of Ax in Ayi . Because Ay1 ...Ayn are followed by a softmax transformation, if wxyi is the same for all yi (that is, x contributes equally to all yi), then x effectively has zero contribution to Ati . This can be observed by substituting Ayi = wxyiAx +ryi in the expression for Ati and canceling out e\nwxyiAx (here, ryi is the sum of all the remaining terms in the affine expression for Ayi )\nAti = eAyi∑n\ni′=1 e Ay′ i\n= ewxyiAx+ryi∑n\ni′=1 e wxy i′ Ax+ry i′\n= ewxyiAx+ryi∑n\ni′=1 e wxyiAx+ryi′\n= eryi∑n\ni′=1 e ry i′\n(20)\nAs mentioned in the previous subsection, in order to avoid attenuation of signal for highly confident predictions, we should compute Cxyi rather than Cxti . One way to ensure that Cxyi is zero if wxyi is the same for all yi is to meannormalized the weights as follows:\nw̄xyi = wxyi − 1\nn n∑ i′=1 wxyi′ (21)\nThis transformation will not affect the output of the softmax, but will ensure that the DeepLIFT scores are zero when a particular node contributes equally to all softmax classes."
    }, {
      "heading" : "2.6. Weight normalization for constrained inputs",
      "text" : "Let y be a neuron with some subset of inputs Sy that are constrained such that ∑ x∈Sy Ax = c (for example, one-hot\nencoded input satisfies the constraint ∑\nx∈Sy Ax = 1, and a convolutional neuron operating on one-hot encoded rows has one constraint per column that it sees). Let the weights from x to y be denoted wxy and let by be the bias of y. It is advisable to use normalized weights w̄xy = wxy − µ and bias b̄y = by + cµ, where µ is the mean over all wxy . We note that this maintains the output of the neural net because, for any constant µ:\nAy = (∑ Ax(w̄xy − µ) ) + (by + cµ)\n= (∑\nAxwxy\n) − (∑ Axµ ) + (by + cµ)\n= (∑\nAxwxy ) − cµ+ (by + cµ)\n= (∑\nAxwxy ) + by\n(22)\nThe normalization is desirable because, for affine functions, the multipliers mxy are equal to the weights wxy and are thus sensitive to µ. To take the example of a convolutional neuron operating on one-hot encoded rows: by mean-normalizing wxy for each column in the filter, one can ensure that the contributions Cxy from some columns are not systematically overestimated or underestimated relative to the contributions from other columns."
    }, {
      "heading" : "3. Results",
      "text" : ""
    }, {
      "heading" : "3.1. Tiny ImageNet",
      "text" : "A model with the VGG16 (Long et al., 2015) architecture was trained using the Keras framework (Chollet, 2015) on a scaled-down version of the Imagenet dataset, dubbed ‘Tiny Imagenet’. The images were 64 × 64 in dimension and belonged to one of 200 output classes. Results shown in Figure 2; the reference input was an input of all zeros after preprocessing."
    }, {
      "heading" : "3.2. Genomics",
      "text" : "We apply DeepLIFT to models trained on genomic sequence. The positive class requires that the DNA patterns ’GATA’ and ’CAGATG’ appear in the length-200 sequence together. The negative class has only one of the two patterns appearing once or twice. Outside the core patterns (which were sampled from a generative model) we randomly sample the four bases A, C, G and T. A CNN was trained using the Keras framework (Chollet, 2015) on one-hot encoded sequences with 20 convolutional filters of length 15 and stride 1 and a max pool layer of width and stride 50, followed by two fully connected layers of size 200. PReLU nonlinearities were used for the hidden layers. This model performs well with auROC of 0.907. The misclassified examples primarily occur when one of the patterns erroneously arises in the randomly sampled background.\nWe then run DeepLIFT to assign an importance score to each base in the correctly predicted sequences (the reference input for DeepLIFT was an input of all zeros post weight-normalization (see 2.6) of the first conv layer) and compared the results to the gradient*input (Figure 3)."
    }, {
      "heading" : "3.3. Discussion",
      "text" : "Prevailing feature importance methods such as the saliency maps of Simonyan et al. (which generalize the deconvolutional nets of Zeiler et al.) and the guided backpropagation of Springenberg et al. are variants of computing gradients. As shown in Figure 1, this can give misleading results when the local gradient is zero. DeepLIFT instead considers the deviation from a neuron’s reference activity. This makes it capable of handling RNN memory units gated by activations that have vanishing gradients (eg: sigmoid, tanh).\nLayer-wise Relevance Propagation (LRP), described in Samek et al. and first proposed by Bach et al. (2015), does not obviously rely on gradients; however, it can be shown that if bias terms are included in the relevance propaga-\ntion and all activations are piecewise linear, LRP reduces to gradient*input (a first-order Taylor approximation of the change in output if the input is set to zero). If all reference activations are zero (as happens when all bias terms are zero and all reference input values are zero), DeepLIFT and LRP give similar results (except that by computing contributions using multipliers, DeepLIFT circumvents the numerical stability problems that LRP faces). In practice, biases are often non-zero, which is why DeepLIFT produces superior results (Figures 2 & 3)."
    }, {
      "heading" : "3.4. Equivalence of grad*input to Layer-wise Relevance Propagation",
      "text" : "We show when all activations are piecewise linear and bias terms are included in the calculation, the Layer-wise Relevance Propagation (LRP) of Bach et al., reduces to gradient*input. We refer to Samek et al. (2015) for the concise description of LRP:\nUnpooling: “The backwards signal is redirected proportionally onto the location for which the activation was recorded in the forward pass”: This is trivially the same as gradient*input, because the gradient*input will be zero for all locations which do not activation the pooling layer, and equal to the output for the location that does.\nFiltering: We consider the first rule described in Samek et al., where zij = a (l) i w (l,l+1) ij is the weighted activation of neuron i onto neuron j in the next layer, and l is the index of the layer:\nR (l) i = ∑ j zij∑′ i zi′j + sign( ∑ i′ zi′j) R (l+1) j (23)\nThe term involving is included to avoid issues of numerical instability when ∑′ i zi′j is near zero. The second rule described Samek et al. is another variant designed to address the problem of numerical instability. We show that gradient*input gives the exact result as → 0 (i.e. it solves the issue of numerical instability altogether).\nDropping the term for and substituting zij = a (l) i w (l,l+1) ij , we have:\nR ( il) = ∑ j a (l) i w (l,l+1) ij∑′ i a (l) i′ w (l,l+1) i′j R (l+1) j (24)\nAssuming the bias term is included (which would be necessary for the conservation property described in Bach et al. to hold), the denominator is simply the activation of neuron j, i.e.:\nR ( il) = ∑ j a (l) i w (l,l+1) ij a (l+1) j R (l+1) j (25)\nLet us now consider what happens when there are two filtering operations applied sequentially. Let Rik denote the\nrelevance inherited by neuron i in layer l from neuron k in layer l + 2, passing through the neurons in layer l + 1. We have:\nR (l) ik = ∑ j a (l) i w (l,l+1) ij a (l+1) j a (l+1) j w (l+1,l+2) jk a (l+1) k R (l+2) k\n= ∑ j a (l) i w (l,l+1) ij w (l+1,l+2) jk a (l+1) k R (l+2) k\n(26)\nThus, we see that denominator a(l+1)j for the intermediate layer cancelled out, leaving us with a(l)i w (l,l+1) ij w (l+1,l+2) jk , where w(l,l+1)ij w (l+1,l+2) jk is the gradient of a (l+1) k with respect to a(l)i . The only term left in the denominator is the activation of the last layer, a(l+1)k ; if we set the relevance of neurons in the final layer to be equal to their own activation, then R(l+2)k (assuming k is the last layer) would cancel out a (l+1) k in the denominator, leaving us with:\nR (l) ik = ∑ j a (l) i w (l,l+1) ij w (l+1,l+2) jk (27)\nWhich is simply equal to the activation a(l)i multiplied by the gradient of a(l)i with respect to ak. In situations where the relevance of the last layer is not the same as its activation (which may happen if there is a nonlinear transformation such as a sigmoid), one can simply compute gradient*input with respect to the linear term before the final nonlinearity (which is what we did; for softmax layers, we apply the normalization described in 2.5).\nNonlinearity: “The backward signal is simply propagated onto the lower layer, ignoring the rectification operation”: While this is not obviously the same as gradient*input, it should be noted that when a rectified linear unit is inactive, it has an activation of zero and the rule for filtering (described above) would assign it zero importance. Furthermore, when the rectified linear unit is active, its gradient is 1. Thus, when the unit is inactive, gradient*input is 0 and LRP assigns 0 signal; when a unit is active, gradient*input is equal to the output and LRP assigns all signal. The two approaches converge."
    }, {
      "heading" : "4. Author contributions",
      "text" : "AS & PG conceived of DeepLIFT. AS implemented DeepLIFT in software. PG led application to genomics. AYS led application to Tiny Imagenet. AK provided guidance and feedback. AS, PG, AYS & AK prepared the manuscript."
    } ],
    "references" : [ {
      "title" : "On Pixel-Wise explanations for Non-Linear classifier decisions by Layer-Wise relevance propagation",
      "author" : [ "Bach", "Sebastian", "Binder", "Alexander", "Montavon", "Grégoire", "Klauschen", "Frederick", "Müller", "Klaus-Robert", "Samek", "Wojciech" ],
      "venue" : "PLoS One, 10(7):e0130140,",
      "citeRegEx" : "Bach et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Bach et al\\.",
      "year" : 2015
    }, {
      "title" : "Empirical evaluation of gated recurrent neural networks on sequence modeling",
      "author" : [ "Chung", "Junyoung", "Gulcehre", "Caglar", "Cho", "Kyunghyun", "Bengio", "Yoshua" ],
      "venue" : null,
      "citeRegEx" : "Chung et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Chung et al\\.",
      "year" : 2014
    }, {
      "title" : "Long short-term memory",
      "author" : [ "S Hochreiter", "J. Schmidhuber" ],
      "venue" : "Neural Comput., 9(8):1735–1780,",
      "citeRegEx" : "Hochreiter and Schmidhuber,? \\Q1997\\E",
      "shortCiteRegEx" : "Hochreiter and Schmidhuber",
      "year" : 1997
    }, {
      "title" : "Fully convolutional networks for semantic segmentation",
      "author" : [ "Long", "Jonathan", "Shelhamer", "Evan", "Darrell", "Trevor" ],
      "venue" : "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "Long et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Long et al\\.",
      "year" : 2015
    }, {
      "title" : "Evaluating the visualization of what a deep neural network has learned",
      "author" : [ "Samek", "Wojciech", "Binder", "Alexander", "Montavon", "Grégoire", "Bach", "Sebastian", "Müller", "Klaus-Robert" ],
      "venue" : null,
      "citeRegEx" : "Samek et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Samek et al\\.",
      "year" : 2015
    }, {
      "title" : "Deep inside convolutional networks: Visualising image classification models and saliency maps",
      "author" : [ "Simonyan", "Karen", "Vedaldi", "Andrea", "Zisserman", "Andrew" ],
      "venue" : null,
      "citeRegEx" : "Simonyan et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Simonyan et al\\.",
      "year" : 2013
    }, {
      "title" : "Striving for simplicity: The all convolutional net",
      "author" : [ "Springenberg", "Jost Tobias", "Dosovitskiy", "Alexey", "Brox", "Thomas", "Riedmiller", "Martin" ],
      "venue" : null,
      "citeRegEx" : "Springenberg et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Springenberg et al\\.",
      "year" : 2014
    }, {
      "title" : "Visualizing and understanding convolutional networks",
      "author" : [ "Zeiler", "Matthew D", "Fergus", "Rob" ],
      "venue" : "In Computer vision–",
      "citeRegEx" : "Zeiler et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Zeiler et al\\.",
      "year" : 2014
    }, {
      "title" : "Deconvolutional networks",
      "author" : [ "Zeiler", "Matthew D", "Krishnan", "Dilip", "Taylor", "Graham W", "Fergus", "Rob" ],
      "venue" : "In Computer Vision and Pattern Recognition (CVPR),",
      "citeRegEx" : "Zeiler et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Zeiler et al\\.",
      "year" : 2010
    } ],
    "referenceMentions" : [ {
      "referenceID" : 6,
      "context" : "Guided backpropagation (Springenberg et al. 2014) is another variant which only considers gradients that have positive error signal.",
      "startOffset" : 23,
      "endOffset" : 49
    }, {
      "referenceID" : 4,
      "context" : "Simonyan et al. (2013) proposed using gradients to generate saliency maps and showed that this is a generalization of the deconvolutional nets of Zeiler et al.",
      "startOffset" : 0,
      "endOffset" : 23
    }, {
      "referenceID" : 4,
      "context" : "Simonyan et al. (2013) proposed using gradients to generate saliency maps and showed that this is a generalization of the deconvolutional nets of Zeiler et al. (2013). Guided backpropagation (Springenberg et al.",
      "startOffset" : 0,
      "endOffset" : 167
    }, {
      "referenceID" : 4,
      "context" : "As shown in Figure 2, saliency maps can be substantially improved by simply multiplying the gradient with the input signal, which corresponds to a first-order Taylor approximation of how the output would change if the input were set to zero; the layer-wise relevance propagation rules described in Samek et al. (2015) reduce to this approach, assuming bias terms are included in the denominators.",
      "startOffset" : 298,
      "endOffset" : 318
    }, {
      "referenceID" : 1,
      "context" : "Similarly, sigmoid or tanh activations are popular choices for the activation functions of gates in memory units of recurrent neural networks such as GRUs and LSTMs (Chung et al. 2014; Hochreiter and Schmidhuber 1997), but these activations have a near-zero gradient at high or low inputs even though such inputs can be very significant.",
      "startOffset" : 165,
      "endOffset" : 217
    }, {
      "referenceID" : 2,
      "context" : "Similarly, sigmoid or tanh activations are popular choices for the activation functions of gates in memory units of recurrent neural networks such as GRUs and LSTMs (Chung et al. 2014; Hochreiter and Schmidhuber 1997), but these activations have a near-zero gradient at high or low inputs even though such inputs can be very significant.",
      "startOffset" : 165,
      "endOffset" : 217
    }, {
      "referenceID" : 3,
      "context" : "Tiny ImageNet A model with the VGG16 (Long et al., 2015) architecture was trained using the Keras framework (Chollet, 2015) on a scaled-down version of the Imagenet dataset, dubbed ‘Tiny Imagenet’.",
      "startOffset" : 37,
      "endOffset" : 56
    }, {
      "referenceID" : 0,
      "context" : "and first proposed by Bach et al. (2015), does not obviously rely on gradients; however, it can be shown that if bias terms are included in the relevance propaga-",
      "startOffset" : 22,
      "endOffset" : 41
    }, {
      "referenceID" : 0,
      "context" : "Equivalence of grad*input to Layer-wise Relevance Propagation We show when all activations are piecewise linear and bias terms are included in the calculation, the Layer-wise Relevance Propagation (LRP) of Bach et al., reduces to gradient*input. We refer to Samek et al. (2015) for the concise description of LRP: Unpooling: “The backwards signal is redirected proportionally onto the location for which the activation was recorded in the forward pass”: This is trivially the same as gradient*input, because the gradient*input will be zero for all locations which do not activation the pooling layer, and equal to the output for the location that does.",
      "startOffset" : 206,
      "endOffset" : 278
    } ],
    "year" : 2016,
    "abstractText" : "The purported “black box” nature of neural networks is a barrier to adoption in applications where interpretability is essential. Here we present DeepLIFT (Learning Important FeaTures), an efficient and effective method for computing importance scores in a neural network. DeepLIFT compares the activation of each neuron to its ‘reference activation’ and assigns contribution scores according to the difference. We apply DeepLIFT to models trained on natural images and genomic data, and show significant advantages over gradient-based methods.",
    "creator" : "LaTeX with hyperref package"
  }
}