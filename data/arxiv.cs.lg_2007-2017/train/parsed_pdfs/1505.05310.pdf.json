{
  "name" : "1505.05310.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "A New View of Predictive State Methods for Dynamical System Learning",
    "authors" : [ "Ahmed Hefny", "Carlton Downey", "Geoffrey J. Gordon" ],
    "emails" : [ "ahefny@cs.cmu.edu", "cmdowney@cs.cmu.edu", "ggordon@cs.cmu.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "for learning dynamical systems: these algorithms are popular since they often offer a good tradeoff between computational speed and statistical efficiency. Despite their desirable properties, though, predictive state methods can sometimes be difficult to use in practice. E.g., in contrast to the rich literature on supervised learning methods, which allows us to choose from an extensive menu of models and algorithms to suit the prior beliefs we have about properties of the function to be learned, predictive state dynamical system learning methods are comparatively inflexible: it is as if we were restricted to use only linear regression instead of being allowed to choose decision trees, nonparametric regression, or the lasso. To address this problem, we propose a new view of predictive state methods in terms of instrumentalvariable regression. This view allows us to construct a wide variety of dynamical system learners simply by swapping in different supervised learning methods. We demonstrate the effectiveness of our proposed methods by experimenting with non-linear regression to learn a hidden Markov model, showing that the resulting algorithm outperforms its linear counterpart; the correctness of this algorithm follows directly from our general analysis."
    }, {
      "heading" : "1 Introduction",
      "text" : "Recently, there has been substantial interest in a new class of algorithms for learning dynamical systems. These algorithms combine several key intuitions, of which two are important to the current discussion.\nar X\niv :1\n50 5.\n05 31\n0v 1\n[ st\nat .M\nL ]\nFirst is the idea of predictive state: we can replace a belief about a latent variable S by the prediction of some observable variables X that depend on S. That is, on observing some evidence E about S, we could calculate the belief P(S | E). But, as long as the function f(S) = E(X | S) is sufficiently rich (e.g., for discreteX and S represented by one-hot encodings, invertible), it is equivalent to calculate E(X | E) directly: we could recover P(S | E) by inverting f , but in many cases we don’t need to do so.\nSecond is the method of moments: for a dynamical system model with parameters θ, it is often intractable to solve the maximum likelihood problem\nmax θ\nlnP (observations | θ)\nBut, we can sometimes find a statistic T such that the expectation of T is a simple, invertible function of θ: Eθ(T ) = g(θ). In this case, we can replace the expectation Eθ(T ) with the empirical average T̂ = 1N ∑N i=1 Ti. (Here Ti is the value of our statistic for the ith of a set ofN observations.) We can then define an estimator θ̂ as\nθ̂ = g−1(T̂ ) (1)\nand seek an efficient algorithm for solving the inverse problem (1). The trick to designing a good method of moments algorithm is to discover a statistic T such that problem (1) is well-conditioned and efficiently solvable. One of the main tools that algorithm designers use for this purpose is to expand the class of models considered, thereby removing difficult constraints from (1): for example, instead of learning a hidden Markov model (HMM), we can expand the model class to include all observable operator models (OOMs) [14].\nFor brevity, we will call methods that use the above intuitions predictive state methods. Predictive state methods are popular for dynamical system learning because they often offer a good tradeoff between computational speed and statistical efficiency.\nHowever, there are also some important difficulties with these methods. One is that it can be hard for predictive state methods to take advantage of prior knowledge about the structure or parameters of a dynamical system: for example, expanding from HMMs to OOMs removes our ability to directly refer to the conditional probability distribution of observations given states, a common place to incorporate structure. Another is that deriving, analyzing, and implementing new predictive state methods can require substantial expertise: it can be difficult to discover an appropriate statistic T , accumulate its empirical average T̂ efficiently,\nand track how estimation errors in T̂ propagate through the inverse problem (1) to affect θ̂.\nWe address both of these problems with a new view of predictive state methods for dynamical system learning. In this view, a dynamical system learning problem is reduced to a sequence of supervised learning problems. So, we can directly apply the rich literature on supervised learning methods to incorporate many types of prior knowledge about problem structure. We give a general convergence rate analysis that allows a high degree of flexibility in designing estimators. And finally, implementing a new estimator becomes as simple as rearranging our data and calling the appropriate supervised learning subroutines.\nOur new view is based on instrumental variable regression [18, 22]. Instrumental variable regression is a well-known technique to compensate for certain types of observation noise in a linear regression problem; it can let us recover regression coefficients accurately where ordinary regression would yield biased estimates. The connection between predictive state learning and linear instrumental variable regression has been noted before, e.g., in [4]. We propose a generalization of the linear two stage ordinary least squares procedure [22], give error bounds for this generalization, and formulate dynamical systems learning as an instance of this regression technique.\nMore specifically, our contribution is to show that we can use much-moregeneral supervised learning algorithms in place of linear regression, and still get a meaningful theoretical analysis. In more detail: (1) we point out that we can equally well use any well-behaved supervised learning algorithm in place of linear regression in the first stage of instrumental-variable regression; (2) for the second stage of instrumental-variable regression, we generalize ordinary linear regression to its RKHS counterpart; (3) we analyze the resulting combination, and show that we get convergence to the correct answer, with a rate that depends on how quickly the individual supervised learners converge.\nIn the remainder of the paper, we first describe how to use instrumentalvariable regression to learn a dynamical system (Sec. 2). We then provide theoretical guarantees for the two-stage instrumental-variable regression technique with non-linearity (Sec. 4). Finally, we give an example of how our techniques let us rapidly design enhanced predictive state methods for dynamical systems by encoding modeling assumptions (Sec. 5): we show that replacing linear regression steps in the spectral HMM learning algorithm with a non-linear regression with fewer parameters results in better prediction performance. The correctness of the resulting algorithm follows immediately from our general analysis."
    }, {
      "heading" : "2 Instrumental Regression for Dynamical Systems",
      "text" : "We consider a dynamical system of the form in Fig. 1: a sequence of observations ot ∈ O explained by latent states st ∈ S connected in a chain. A key question we need to solve in order be able to perform inference in the dynamical system is how to recursively update our belief about state: given a belief about st and a new observation ot+1, compute a belief about st+1. This is referred to as filtering. Another inference task is prediction: predicting an observation ot+k given our belief about the current state st. This involves computing a belief about future state state st+1 given our belief about st.\nIf st and ot have small, discrete ranges, the predictive state algorithm for learning a dynamical system is well known: see, e.g., [6, 3]. In fact, it is also known that we can interpret this algorithm as linear instrumental-variable regression [4]. Our proposed framework generalizes that direction by reducing dynamical system learning to solving three supervised learning problems, with the additional ability to incorporate arbitrary non-linear regression models in two of these problems.\nThe first step to formulate dynamical system learning as a supervised learning problem is to use an observable (predictive state) representation by replacing our belief about st with a predictive state: pick a statistic ψt = ψ(ot:t+k−1) of a window of future observations ot+1:t+k, and instead of tracking our belief P(st | o1:t−1), track the predictive state E[ψt | o1:t−1]. (The dimension of ψ must be at least as high as the number of discrete latent states.) We will use Qt|t−k to denote E[ψt | o1:t−k] and hence our predictive predictive state is denoted by Qt ≡ Qt|t−1. We assume that the system is k-observable and hence latent states are distinguishable by the distribution of a window of k future observations1 [25].\nSecond, we formulate a statistic ξt = ξ(ot:t+k) over extended future observations ot:t+k with conditional expectation Pt = E[ξt | o1:t−1] such that Qt+1|t−1 and Qt+1 (i.e. our belief about the shifted future ot+1:t+k) can be inferred from Pt and ot.\n1In principle, the statistics can depend on the entire future. The restriction to a window of observations simplifies the notation and is commonly used in practice.\nLearning a dynamical system then amounts to learning an operator W that satisfies the moment condition:2\nPt = WQt ∀t (2)\nFiltering and prediction then correspond to inferring Qt+1 and Qt+1|t−1 respectively from Pt. We assume that W is a linear operator. Unfortunately, we do not observeQt or Pt but noisy versions thereof. Moreover, due to the overlap between observation windows, the noise terms on ψt and ξt are correlated. This noise correlation means that naı̈ve linear regression (using samples of ψt and ξt) will give a biased estimate of the dependence between Qt and Pt.\nTo counteract this bias, we employ instrumental regression [18, 22]. Instrumental regression uses instrumental variables that are correlated with the input Qt but not with the noise t:t+k. This property provides a criterion to denoise the inputs and outputs of the original regression problem: we remove that part of the input/output that is not correlated with the instrumental variables. Since past observations o1:t−1 do not overlap with future or extended future windows, they are not correlated with the noise t:t+k+1. Therefore, we can use history features ht ≡ h(o1:t−1) as instrumental variables.\nIn more detail, by taking the expectation of (2) over ht we obtain an instrumentbased moment condition\nE[Pt | ht] = E[WQt | ht] E[E[ξt | o1:t−1] | ht] = WE[E[ψt | o1:t−1] | ht]\nE[ξt | ht] = WE[ψt | ht] (3)\nAssuming that there are enough independent dimensions in ht that are correlated with Qt, we maintain the rank of the moment condition when moving from (2) to (3), and we can recover W by least squares if we can compute E[ψt | ht] and E[ξt | ht] for sufficiently many examples t.\nIn summary, learning and inference of a dynamical system through instrumental regression can be described as follows:\n• Model Specifcation: Pick features of history ht = h(o1:t−1), future ψt = ψ(ot:t+k−1) and extended future ξt = ξ(ot:t+k). ψt must be a sufficient statistic for P(ot:t+k−1 | o1:t−1). ξt must satisfy\n2Note that, similar to [16], Pt is a deterministic function of Qt and hence this condition has a unique solution if we observe sufficient examples of Pt and Qt.\n– E[ψt+1 | o1:t−1] = fpredict(E[ξt | o1:t−1]) for a known function fpredict. – E[ψt+1 | o1:t] = ffilter(E[ξt | o1:t−1], ot) for a known function ffilter.\n• S1A (Stage 1A) Regression: Learn a (possibly non-linear) regression model to estimate ψ̄t ≡ E[ψt | ht]. The training data for this model are (ht, ψt) across time steps t.3\n• S1B Regression: Learn a (possibly non-linear) regression model to estimate ξ̄t ≡ E[ξt | ht]. The training data for this model are (ht, ξt) across time steps t.\n• S2 Regression: Use the feature expectations estimated in the previous two steps to train a model to predict ξ̄t = Wψ̄t, where W is a linear operator. The training data for this model are estimates of (ψ̄t, ξ̄t) across time steps t obtained from S1 steps.\n• Initial State Estimation: Estimate an initial stateQ1 = E[ψ1] by averaging ψ1 across several example realizations of our time series.4\n• Inference: Starting from the initial state Q1, we can maintain the belief state Qt ≡ E[ψt | o1:t−1] through filtering: given Qt we compute Pt ≡ E[ξt | o1:t−1] = WQt. Then, given the observation ot, we can compute Qt+1 = ffilter(Pt, ot). Or, in the absence of ot, we can predict the next state Qt+1|t−1 = fpredict(Pt). Finally, by definition, the belief stateQt is sufficient to predict P(ot:t+k−1 : o1:t−1).\nThe process of learning and inference is depicted in Figure 2. Modeling assumptions are reflected in the choice of the statistics ψ, ξ and h as well as the regression models in stages S1A and S1B. In the supplementary material we show that, with linear S1 models and certain choices of statistics, we can recover existing spectral algorithms for dynamical systems learning. The two stage framework not only provides a unifying view of some of the successful dynamical systems learning algorithms but also paves the way for extending them in a theoretically justified manner, as we demonstrate in the experiments.\n3Our bounds assume that the training time steps t are sufficiently spaced for the underlying process to mix, but in practice, the error will only get smaller if we consider all time steps t.\n4This is the only step that needs multiple realizations of our time series. If only a single long realization is available, we need additional assumptions to be able to estimate an initial state; for example, if we assume stationarity, we can set the initial state to be the empirical average vector of future features, 1T ∑T t=1 ψt."
    }, {
      "heading" : "3 Related Work",
      "text" : "This work extends predictive state learning algorithms for dynamical systems, which include spectral algorithms for Kalman filters [2], Hidden Markov Models [10, 19] and Predictive State Representations (PSRs) [6, 3] as well as infinitedimensional variants such as the Hilbert space embedding of hidden Markov models (HSE-HMM) [20] and predictive state representations (HSE-PSR) [5].\nOne common aspect in all these models is that they exploit the covariance structure between future and past observation sequences to obtain an unbiased observable state representation. Indeed, many of these algorithms can be reformulated as a two-stage linear instrumental regression. Boots and Gordon [4] note the connection between the HSE-HMM and instrumental variables, which is manifested in the use of kernel SVD of a future-past covariance operator to identify the latent state space. We use this connection to build a general framework for dynamical system learning where the state-space can be identified using supervised learning methods, including non-linear ones.\nReducing dynamical systems learning to supervised learning dates back to auto-regressive models [17], where the state of the system is assumed to be fully determined by the previous k observations. Our aim is to use supervised learn-\ning methods to learn latent state models from observation sequences. This bears similarity to Langford et al.’s sufficient posterior representation (SPR) [16], which encodes the state by the sufficient statistics of the conditional distribution of the next observation and represents system dynamics by three vector-valued functions that are estimated using supervised learning approaches. While SPR allows all of these functions to be non-linear, there are some advantages that distinguish our work. First, while SPR is limited to 1-step observable systems (where the distribution over the next observation uniquely determines the state), our framework can seamlessly handle k-step observable systems by choosing a large enough (or even unbounded) window size. The use of instrumental variables ensures that correlated noise on overlapping windows does not bias our estimates of the system parameters. Secondly, SPR involves a rather complicated training procedure, involving multiple iterations of model refinement and model averaging, whereas our framework only requires solving three regression problems in sequence. Finally, the theoretical analysis of [16] only establishes the consistency of SPR learning assuming that all regression steps are solved perfectly. Our work, on the other hand, establishes convergence rates based on the performance of S1 regression."
    }, {
      "heading" : "4 Theoretical Analysis",
      "text" : "In this section we present our main theoretical result: consistency and a convergence rate bound for two-stage instrumental regression, under the assumption that S1 predictions converge to the true conditional expectations at an appropriate rate, regardless of the functional form of the S1 regressors.\nWe assume we are given i.i.d. triplets (xt, yt, zt), where xt ∈ X , yt ∈ Y and zt ∈ Z denote input, output and instrumental variables respectively. (As mentioned above, we can equally well use correlated samples, as would result from successive time steps of a time series; our convergence rates will then include a factor that depends on the mixing rate of the underlying dynamical system.)\nFor generality, we assume that X , Y and Z are reproducing kernel Hilbert spaces (RKHS) of possibly infinite dimension, and that the operator W is estimated through (kernel) ridge regression\nŴλ = ( T∑ t=1 ŷt ⊗ x̂t )( T∑ t=1 x̂t ⊗ x̂t + λIX )−1 (4)\nwhere ⊗ denotes tensor product and λ > 0 is a regularization parameter that ensures the invertibility of the estimated covariance. λ can be 0 in finite dimensional\ncases where we have an invertible covariance matrix. The RKHS view is useful when the future statistics are represented in terms of kernels—for example, if they are kernel mean maps of the distribution of future observations, a case that is closely related to the HSE-HMM [20] and HSE-PSR [5] models.\nLet x̄t and ȳt denote E[xt|zt] and E[yt|zt]. Also let x̂t and ŷt denote Ê[xt|zt] and Ê[yt|zt], as estimated by the S1A and S1B regression steps. We assume that x̄t, x̂t ∈ X and ȳt, ŷt ∈ Y . Let Σx̄x̄ ∈ X ⊗ X and Σȳȳ ∈ Y ⊗ Y denote the (uncentered) covariance operators of the distributions of x̄ and ȳ respectively: that is,\nΣx̄x̄ = E[x̄⊗ x̄] Σȳȳ = E[ȳ ⊗ ȳ]\nBefore we state our main theorem we need to quantify the quality of S1 regressions in a way that is independent of the functional form that we assume in S1.\nDefinition 1 (S1 Regression Bound). For a given δ > 0 and N ∈ N+, we define the S1 regression bound ηδ,N > 0 to be a number satisfying the condition that, with probability at least (1− δ/2), the following holds for all 1 ≤ t ≤ N :\n‖x̂t − x̄t‖X < ηδ,N ‖ŷt − ȳt‖Y < ηδ,N\nAs long as, for each fixed δ,\nlim N→∞ ηδ,N = 0, (5)\nour results show that the two stage estimator is consistent:\nTheorem 2. Assume that ‖x̄‖X , ‖x̄‖Y < c < ∞ almost surely. Let ηδ,N be as defined in Definition 1 and assume it satisfies (5). Assume W is a Hilbert-Schmidt operator, let Ŵλ be as defined in (4), and let R(Σx̄x̄) denote the closure of the range of Σx̄x̄. Then the following statement holds with probability at least 1 − δ\nfor each xtest ∈ R(Σx̄x̄) s.t. ‖xtest‖X ≤ 1.\nγδ,N ≡ ‖Ŵλxtest −Wxtest‖Y =\nO ηδ,N 1λ + √ 1 + √ log(1/δ) N λ 3 2  \n+O ( log(1/δ)√\nN\n( 1\nλ +\n1\nλ 3 2 )) +O (√ λ )\nTheorem 2 gives a generic error bound on S2 regression in terms of S1 regression performance. We defer the proof, as well as finite sample analysis, to the supplementary material. The main insight from the theorem is that the error in estimating the parameter W is the sum of three contributions: the first term captures the error in the S1 regressions. The second term captures the effect of estimating the covariance operators from finite data, assuming S1 regression is exact. Finally, the third term captures the effect of regularization assuming covariance estimates are exact. It can be shown that, if X and Y are finite dimensional, Σx̄x̄ spans X and we use least squares to estimate W (i.e. λ = 0), then the first and last terms will vanish, and λ in the middle two terms will be replaced by λx,min, the minimum eigenvalue of Σx̄x̄.\nFor completeness, the following propositions provide concrete examples of S1 regression bounds ηδ,N for practical regression models.\nProposition 3. Assume X ≡ Rdx ,Rdy ,Rdz for some dx, dy, dz < ∞ and that x̄ and ȳ are linear vector functions of z where the parameters are estimated using ordinary least squares. Assume that ‖x̄‖X , ‖ȳ‖Y < c <∞ almost surely. Let ηδ,N be as defined in Definition 1. Then\nηδ,N = O (√ dz N log((dx + dy)/δ) )\nProof. (sketch) This is based on results that bound parameter estimation error in linear regression with univariate response (e.g. [11]). Note that if x̄ti = U>i zt for\nsome Ui ∈ Z , then a bound on the error norm ‖Ûi−Ui‖ implies a uniform bound of the same rate on x̂i − x̄. The probability of exceeding the bound is scaled by 1/(dx + dy) to correct for multiple regressions.\nVariants of Proposition 3 can also be developed using bounds on non-linear regression models (e.g., generalized linear models).\nThe next proposition addresses a scenario where X and Y are infinite dimensional.\nProposition 4. Assume that x and y are kernel evaluation functionals, x̄ and ȳ are linear vector functions of z where the linear operator is estimated using conditional mean embedding [21] with regularization parameter λ0 > 0 and that ‖x̄‖X , ‖ȳ‖Y < c < ∞ almost surely. Let ηδ,N be as defined in Definition 1. It follows that\nηδ,N = O √λ0 + √ log(N/δ)\nλ0N  Proof. (sketch) This bound is based on [21], which gives a bound on the error in estimating the conditional mean embedding. The error probability is adjusted by δ/4N to accommodate the requirement that the bound holds for all training data.\nIn the following, we apply theorem 2 to the setting of learning dynamical systems, where Qt ∈ X , Pt ∈ Y and ht ∈ Z (Qt, Pt and ht are as defined in Section 2). One issue to note is that theorem 2 assumes that the test input lies within R(Σx̄x̄). In dynamical systems context, however, the test input is an estimated predictive state Q̂t. Since S1 regression can fail to identify the subspace of true states given finite data, Q̂t can have a non-zero component t inR⊥(Σx̄x̄), the orthogonal complement of R(Σx̄x̄). The following lemma states that, in a stable system, this component gets smaller as S1 regression performs better.\nLemma 5. For a test sequence o1:T , let Q̂t denote the estimated state given o1:t−1. Let Q̃t denote the projection of Q̂t onto R(Σx̄x̄). Assume that ffilter is L-Lipchitz continuous on Pt and that ffilter(Pt, ot) ∈ R(Σx̄x̄) for any Pt ∈ R(Σȳȳ). Given the assumptions in theorem 2 and assuming that ‖Q̂t‖X ≤ R for all 1 ≤ t ≤ T , the following holds for all 1 ≤ t ≤ T with probability at least 1− δ/2.\n‖ t‖X = ‖Q̂t − Q̃t‖X = O ( ηδ,N√ λ )\nSince Ŵλ is bounded. The prediction error due to adding t to the input diminishes at the same rate of ‖ t‖X ."
    }, {
      "heading" : "5 Case Study: Learning A Knowledge Tracing Model",
      "text" : "In this section we demonstrate that we can learn a hidden Markov model using the two stage regression framework. We also demonstrate that we can change the regression methods to gain advantage. Specifically, we consider a limited data scenario, where we have a conflict between using many history features (picking a long history window to reduce noise in our predictions, and rich features of that window to achieve a linear relationship between history and future) or using few history features (reducing the number of parameters we have to learn from limited data). We show that we can use non-linear S1 regression models to reduce the number of parameters we need to learn, resulting in better empirical prediction accuracy compared to linear models while still maintaining consistency.\nIn this experiment we attempt to model and predict the performance of students learning from an interactive computer-based tutor. We use the Bayesian knowledge tracing (BKT) model [8], which is essentially a 2-state HMM: the state st represents whether a student has learned a knowledge component (KC), and the observation ot represents the success/failure of solving the tth question in a sequence of question that cover the said KC. With high probability, the student remains in the same state (learned or unlearned) and with smaller probability, the student may transition from unlearned to learned (learning) or learned to unlearned (forgetting). In the learned state, the student is more likely to answer a question correctly than in the unlearned state. It is also possible for the student to answer a question correctly while in the unlearned state (guessing) or incorrectly while in the learned state (slipping). The possible transitions and observations are summarized in figure 3."
    }, {
      "heading" : "5.1 Data Description",
      "text" : "The data set we used to evaluate the model is a publicly available data set from DataShop [15] called “Geometry Area (1996-97).” This data was generated by students learning introductory geometry, and contains attempts by 59 students in 12 knowledge components. As is typical for BKT, we consider a student’s attempt at a question to be correct iff the student entered the correct answer on the first try, without requesting any hints from the help system. The sequence of first attempts"
    }, {
      "heading" : "Skill",
      "text" : ""
    }, {
      "heading" : "Skill",
      "text" : "for a student/KC pair constitutes a training sequence. We discard sequences of length less than 5, resulting in a total of 325 sequences. We pad each observation sequence at the beginning with dummy observations, to handle the case where the history window extends before the beginning of the sequence. (This procedure allows us to use more data in our regressions, which is important because of our limited sample size.) Therefore a history observation which is used as training input for S1 regression can be in one of three states: “correct”, “incorrect” or “before beginning of time.” We restrict the regression output however to be binary (“correct” or “incorrect”)."
    }, {
      "heading" : "5.2 Model Description",
      "text" : "Under the (reasonable) assumption that the two states have distinct observation probabilities, this model is 1-observable. It is reasonable then to choose the predictive state to be the expected next observation, which results in the following statistics:\nψt = ot\nξt = ot ⊗k ot+1,\nwhere ot is represented by a 2 dimensional indicator vector and ⊗k denotes the Kronecker product. Given these statistics, Pt = E[ξt|o1:t−1] is a joint probability table of ot:t+1 from which conditioning on ot (filtering) and marginalizing over ot (prediction) are simple operations. It thus remains to choose the history features ht and the S1 regression model. In the appendix, we show that if use ht = ot−1 and linear regression as S1 regression model, the resulting algorithm is equivalent to spectral HMM method of [10] and thus we use it as a baseline. In fact, if we had access to sufficient data, we could learn the HMM using this base line model. Not counting dummy observations, the model has to learn 7 parameters (7 free covariance entries). Under limited data, however, we can achieve faster learning by incorporating prior knowledge. Here, we will take advantage of the intuition that switching states (learning or forgetting) is a relatively unlikely event. Hence, aggregating observations over multiple previous time steps is a better predictor of the state, since aggregation will mitigate the effects of guessing and slipping. So we would like to use ht = ot−b:t−1 for some b > 1. We then have a choice: if we represent ht by an indicator vector of dimension 2b, then the optimal predictor of ot from ht will be linear, but the number of parameters we must learn will increase exponentially with b. On the other hand, if we represent ht by a binary vector of\nlength b, then we will only need to learn b + 1 parameters, but the optimal predictor of ot from ht will no longer be linear leading to poor performance of linear regression. It is not obvious a priori which choice will result in better learning performance.5\nOur formulation makes the choice much easier: we can use a history window of any length, pick the more-concise length-b representation, and train a nonlinear predictor such as a logistic regression. By doing so we combine the advantages of both of the previous paragraph’s approaches: we only need to learn O(b) parameters, but our class of predictors still includes a near-optimal choice. (Logistic regression becomes exactly optimal as the probabilities of learning and forgetting approach zero. Since these probabilities are typically small in practice, logistic regression will be close to optimal in practice.) As we will see below, the result is better learning from limited data."
    }, {
      "heading" : "5.3 Evaluation Procedure and Results",
      "text" : "We evaluated three variants of HMM learning via two-stage regression. They are summarized in Table 1. We evaluated the models using 1000 random splits of the 325 sequences into 200 training and 125 testing. For each split, we trained each model on the training sequences. Then for each test sequence, we filter through the first 3 observations then predict the rest of the sequence, reporting the root mean square error for each split. The results are depicted in figure 4. The results show that, in terms of accuracy, model 3 outperforms model 2, which in turn outperforms model 1. In other words, feature expansion does increase predictive accuracy. However, even more gain is achieved using non-linear S1 models that require fewer parameters.\n5The numbers above ignore the effect of padding observation sequences, but the conclusions are similar in either case."
    }, {
      "heading" : "6 Conclusion",
      "text" : "In this work we developed a general framework for dynamical system learning using supervised learning methods. The proposed framework is based on two-stage regression: in the first stage we use history features to train regression models that denoise future observation windows into state estimates. In the second stage we use these state estimates to train a linear model that represents system dynamics.\nThis framework encompasses and provides a unified view of some successful dynamical system learning algorithms. We demonstrated the proposed framework in learning a Hidden Markov Model, where we have shown that we can use nonlinear regression to incorporate more history features in identifying the latent state without an exponential increase in the number of parameters.\nAs future work, we would like to apply this framework to more scenarios where we can leverage additional techniques such as manifold embedding, sparse learning and transfer learning in stage 1 regression. We would also like to extend the framework to controlled processes."
    }, {
      "heading" : "A Spectral and HSE Dynamical System Learning as",
      "text" : "Regression\nIn this section we provide examples of mapping some of the successful dynamical system learning algorithms to our framework."
    }, {
      "heading" : "A.1 HMM",
      "text" : "In this section we show that we can use instrumental regression framework to reproduce the spectral learning algorithm for learning HMM [10]. We consider 1- observable models but the argument applies to k-observable models. In this case we use ψt = eot and ξt = eot:t+1 = eot ⊗k eot+1 , where ⊗k denotes the kronecker product. Let Pi,j ≡ E[eoi ⊗ eoj ] be the joint probability table of observations i and j and let P̂i,j be its estimate from the data. We start with the (very restrictive) case where P1,2 is invertible. Given samples of h2 = eo1 , ψ2 = eo2 and ξ2 = eo2:3 , in S1 regression we apply linear regression to learn two matrices Ŵ2,1 and Ŵ2:3,1 such that:\nÊ[ψ2|h2] = Σ̂o2o1Σ̂−1o1 h2 = P̂2,1P̂ −1 1,1 ht ≡ Ŵ2,1h2 (A.1)\nÊ[ξ2|h2] = Σ̂o2:3o1Σ̂−1o1 h2 = P̂2:3,1P̂ −1 1,1 h2 ≡ Ŵ2:3,1h2, (A.2)\nwhere P2:3,1 ≡ E[eo2:3 ⊗ eo1 ] In S2 regression, we learn the matrix Ŵ that gives the least squares solution\nto the system of equations\nÊ[ξ2|h2] ≡ Ŵ2:3,1eo1 = Ŵ (Ŵ2,1eo1) ≡ Ŵ Ê[ψ2|h2] , for given samples of h2\nwhich gives\nŴ = Ŵ2:3,1Ê[eo1e>o1 ]Ŵ > 2,1 ( Ŵ2,1Ê[eo1e>o1 ]Ŵ > 2,1 )−1 = ( P̂2:3,1P̂ −1 1,1 P̂ > 2,1 )( P̂2,1P̂ −1 1,1 P̂ > 2,1\n)−1 = P̂2:3,1 ( P̂2,1 )−1 (A.3)\nHaving learned the matrix Ŵ , we can estimate\nP̂t ≡ ŴQt\nstarting from a state Qt. Since Pt specifies a joint distribution over eot+1 and eot we can easily condition on (or marginalize ot) to obtain Qt+1. We will show that this is equivalent to learning and applying observable operators as in [10]:\nFor a given value x of o2, define\nBx = u > x Ŵ = u > x P̂2:3,1 ( P̂>2,1 )−1 , (A.4)\nwhere ux is an |O| × |O|2 matrix which selects a block of rows in P̂2:3,1 corresponding to o2 = x. Specifically, ux = δx ⊗k I|O|. 6.\nQt+1 = Ê[eot+1|o1:t] ∝ u>otÊ[eot:t+1|o1:t−1] = u>otÊ[ξt|o1:t−1] = u > otŴE[ψt|o1:t−1] = BotQt\nwith a normalization constant given by\n1\n1>BotQt (A.5)\nNow we move to a more realistic setting, where we have rank(P2,1) = m < |O|. Therefore we project the predictive state using a matrix U that preserves the dynamics, by requiring that U>O (i.e. U is an independent set of columns spanning the range of the HMM observation matrix O).\nIt can be shown [10] thatR(O) = R(P2,1) = R(P2,1P−11,1 ). Therefore, we can use the leading m left singular vectors of Ŵ2,1 , which corresponds to replacing the linear regression in S1A with a reduced rank regression. However, for the sake of our discussion we will use the singular vectors of P2,1. In more detail, let [U, S, V ] be the rank-m SVD decomposition of P2,1. We use ψt = U>eot and ξt = eot ⊗k U>eot+1 . S1 weights are then given by Ŵ rr2,1 = U>Ŵ2,1 and Ŵ rr2:3,1 = (I|O| ⊗k U>)Ŵ2:3,1 and S2 weights are given by\nŴ rr = (I|O| ⊗k U>)Ŵ2:3,1Ê[eo1e>o1 ]Ŵ > 2,1U ( U>Ŵ2,1Ê[eo1e>o1 ]Ŵ > 2,1U )−1 = (I|O| ⊗k U>)P̂2:3,1P̂−11,1 V S ( SV >P̂−11,1 V S\n)−1 = (I|O| ⊗k U>)P̂2:3,1P̂−11,1 V ( V >P̂−11,1 V )−1 S−1 (A.6)\n6Following the notation used in [10], u>x P̂2:3,1 ≡ P̂3,x,1\nIn the limit of infinite data, V spans range(O) = rowspace(P2:3,1) and hence P2:3,1 = P2:3,1V V >. Substituting in (A.6) gives\nW rr = (I|O| ⊗k U>)P2:3,1V S−1 = (I|O| ⊗k U>)P2:3,1 ( U>P2,1 )+ Similar to the full-rank case we define, for each observation x anm×|O|2 selector matrix ux = δx ⊗k Im and an observation operator\nBx = u > x Ŵ rr → U>P3,x,1 ( U>P2,1 )+ (A.7)\nThis is exactly the observation operator obtained in [10]. However, instead of using A.6, they use A.7 with P3,x,1 and P2,1 replaced by their empirical estimates.\nNote that for a state bt = E[ψt|o1:t−1], Bxbt = P (ot|o1:t−1)E[ψt+1|o1:t] = P (ot|o1:t−1)bt+1. To get bt+1, the normalization constant becomes 1P (ot|o1:t−1) =\n1 b>∞Bxbt , where b>∞b = 1 for any valid predictive state b. To estimate b∞ we solve the aforementioned condition for states estimated from all possible values of history features ht. This gives,\nb>∞Ŵ rr 2,1I|O| = b > ∞U >P̂2,1P̂ −1 1,1 I|O| = 1 > |O|,\nwhere the columns of I|O| represent all possible values of ht. This in turn gives\nb>∞ = 1 > |O|P̂1,1(U >P̂2,1) +\n= P̂>1 (U >P̂2,1) +,\nthe same estimator proposed in [10]."
    }, {
      "heading" : "A.2 Stationary Kalman Filter",
      "text" : "A Kalman filter is given by\nst = Ost−1 + νt\not = Tst + t νt ∼ N (0,Σs) t ∼ N (0,Σo)\nWe consider the case of a stationary filter where Σt ≡ E[sts>t ] is independent of t. We choose our statistics\nht = ot−H:t−1\nψt = ot:t+F−1\nξt = ot:t+F\nIt can be shown [2, 25] that\nE[st|ht] = Σs,hΣ−1h,hht\nand it follows that\nE[ψt|ht] = ΓΣs,hΣ−1h,hht = W1ht E[ξt|ht] = Γ+Σs,hΣ−1h,hht = W2ht\nwhere Γ is the extended observation operator\nΓ ≡  O OT\n... OT F\n ,Γ+ ≡  O OT\n... OT F+1  It follows that F and H must be large enough to have rank(W ) = n. Let U ∈ RmF×n be the matrix of left singular values of W1 corresponding to non-zero singular values. Then U>Γ is invertible and we can write\nE[ψt|ht] = UU>ΓΣs,hΣ−1h,hht = W1ht E[ξt|ht] = Γ+Σs,hΣ−1h,hht = W2ht E[ξt|ht] = Γ+(U>Γ)−1U> ( UU>ΓΣs,hΣ −1 h,hht\n) = WE[ψt|ht]\nwhich matches the instrumental regression framework. For the steady-state case (constant Kalman gain), one can estimate Σξ given the data and the parameter W by solving Riccati equation as described in [25]. E[ξt|o1:t−1] and Σξ then specify a joint Gaussian distribution where marginalization and conditioning can be easily performed."
    }, {
      "heading" : "A.3 HSE-PSR",
      "text" : "We define a class of non-parametric two-stage instrumental regression models. By using conditional mean embedding [21] as S1 regression model, we recover a single-action variant of HSE-PSR [5]. Let X ,Y ,Z denote three reproducing kernel Hilbert spaces with reproducing kernels kX , kY and kZ respectively. Assume ψt ∈ X and that ξt ∈ Y is defined as the tuple (ot ⊗ ot, ψt+1 ⊗ ot). Let Ψ ∈ X ⊗RN , Ξ ∈ Y ⊗RN and H ∈ Z ⊗RN be operators that represent training data. Specifically, ψs, ξs, hs are the sth ”columns” in Ψ and Ξ and H respectively. It is possible to implement S1 using a non-parametric regression method that takes the form of a linear smoother. In such case the training data for S2 regression take the form\nÊ[ψt | ht] = N∑ s=1 βs|htψs\nÊ[ξt | ht] = N∑ s=1 γs|htξs,\nwhere βs and γs depend on ht. This produces the following training operators for S2 regression:\nΨ̃ = ΨB\nΞ̃ = ΞΓ,\nwhere Bst = βs|ht and Γst = γs|ht . With this data, S2 regression uses a Gram matrix formulation to estimate the operator\nW = ΞΓ(B>GX ,XB + λIN) −1B>Ψ∗ (A.8)\nNote that we can use an arbitrary method to estimate B. Using conditional mean maps, the weight matrix B is computed using kernel ridge regression\nB = (GZ,Z + λIN) −1GZ,Z (A.9)\nHSE-PSR learning is similar to this setting, with ψt being a conditional expectation operator of test observations given test actions. For this reason, kernel ridge regression is replaced by application of kernel Bayes rule [9].\nFor each t, S1 regression will produce a denoised prediction Ê[ξt | ht] as a linear combination of training feature maps\nÊ[ξt | ht] = Ξαt = N∑ s=1 αt,sξs\nThis corresponds to the covariance operators\nΣ̂ψt+1ot|ht = N∑ s=1 αt,sψs+1 ⊗ os = Ψ′diag(αt)O∗\nΣ̂otot|ht = N∑ s=1 αt,sos ⊗ os = Odiag(αt)O∗\nWhere, Ψ′ is the shifted future training operator satisfying Ψ′et = ψt+1 Given these two covariance operators, we can use kernel Bayes rule [9] to condition on ot which gives\nQt+1 = Ê[ψt+1 | ht] = Σ̂ψt+1ot|ht(Σ̂otot|ht + λI)−1ot. (A.10)\nReplacing ot in (A.10) with its conditional expectation ∑N\ns=1 αsos corresponds to marginalizing over ot (i.e. prediction). A stable Gram matrix formulation for (A.10) is given by [9]\nQt+1\n= Ψ′diag(αt)GO,O((diag(αt)GO,O) 2 + λNI)−1\n.diag(αt)O ∗ot+1\n= Ψ′α̃t+1, (A.11)\nwhich is the state update equation in HSE-PSR. Given α̃t+1 we perform S2 regression to estimate\nP̂t+1 = Ê[ξt+1 | o1:t+1] = Ξαt+1 = WΨ′α̃t+1,\nwhere W is defined in (A.8)."
    }, {
      "heading" : "B Proofs",
      "text" : ""
    }, {
      "heading" : "B.1 Proof of Main Theorem",
      "text" : "In this section we provide a proof for theorem 2. We provide finite sample analysis of the effects of S1 regression, covariance estimation and regularization. The asymptotic statement becomes a natural consequence.\nWe will make use of matrix Bernstein’s inequality stated below:\nLemma B.1 (Matrix Bernstein’s Inequality [12]). Let A be a random square symmetric matrix, and r > 0, v > 0 and k > 0 be such that, almost surely,\nE[A] = 0, λmax[A] ≤ r, λmax[E[A2]] ≤ v, tr(E[A2]) ≤ k.\nIf A1, A2, . . . , AN are independent copies of A, then for any t > 0,\nPr [ λmax [ 1\nN N∑ t=1 At\n] > √ 2vt\nN +\nrt\n3N ] ≤ kt\nv (et − t− 1)−1. (B.1)\nIf t ≥ 2.6, then t(et − t− 1)−1 ≤ e−t/2.\nRecall that, assuming xtest ∈ R(Σx̄x̄), we have three sources of error: first, the error in S1 regression causes the input to S2 regression procedure (x̂t, ŷt) to be a perturbed version of the true (x̄t, ȳt); second, the covariance operators are estimated from a finite sample of size N ; and third, there is the effect of regularization. In the proof, we characterize the effect of each source of error. To do so, we define the following intermediate quantities:\nWλ = Σȳx̄ (Σx̄x̄ + λI) −1 (B.2)\nW̄λ = Σ̂ȳx̄ ( Σ̂x̄x̄ + λI )−1 , (B.3)\nwhere\nΣ̂ȳx̄ ≡ 1\nN N∑ t=1 ȳt ⊗ x̄t\nand Σ̂x̄x̄ is defined similarly. Basically, Wλ captures only the effect of regularization and W̄λ captures in addition the effect of finite sample estimate of the covariance. W̄λ is the result of S2 regression if x̄ and ȳ were perfectly recovered by S1 regression. It is important to note that Σ̂x̄ȳ and Σ̂x̄x̄ are not observable quantities since they depend on the true expectations x̄ and ȳ. We will use λxi and λyi to denote the ith eigenvalue of Σx̄x̄ and Σȳȳ respectively in descending order and we will use ‖.‖ to denote the operator norm.\nBefore we prove the main theorem, we define the quantities ζ x̄x̄δ,N and ζ x̄ȳ δ,N which we use to bound the effect of covariance estimation from finite data, as stated in the following lemma:\nLemma B.2 (Covariance error bound). Let N be a positive integer and δ ∈ (0, 1) and assume that ‖x̄‖, ‖ȳ‖ < c <∞ almost surely. Let ζ x̄ȳδ,N be defined as:\nζ x̄ȳδ,N =\n√ 2vt\nN +\nrt\n3N , (B.4)\nwhere\nt = max(2.6, 2 log(4k/δv))\nr = c2 + ‖Σȳx̄‖ v = c2 max(λy1, λx1) + ‖Σx̄ȳ‖2 k = c2(tr(Σx̄x̄) + tr(Σȳȳ))\nIn addition, let ζ x̄x̄δ,N be defined as:\nζ x̄x̄δ,N =\n√ 2v′t′\nN + r′t′ 3N , (B.5)\nwhere\nt′ = max(2.6, 2 log(4k′/δv′)) r′ = c2 + λx1 v′ = c2λx1 + λ 2 x1 k′ = c2tr(Σx̄x̄)\nand define ζ ȳȳδ,N similarly for Σȳȳ.\nIt follows that, with probability at least 1− δ/2,\n‖Σ̂ȳx̄ − Σȳx̄‖ < ζ x̄ȳδ,N ‖Σ̂x̄x̄ − Σx̄x̄‖ < ζ x̄x̄δ,N ‖Σ̂ȳȳ − Σȳȳ‖ < ζ ȳȳδ,N\nProof. We show that each statement holds with probability at least 1 − δ/6. The claim then follows directly from the union bound. We start with ζ x̄x̄δ,N . By setting At = x̄t ⊗ x̄t − Σx̄x̄ then we would like to obtain a high probability bound on ‖ 1 N ∑N t=1At‖. Lemma B.1 shows that, in order to satisfy the bound with probability at least 1− δ/6, it suffices to set t to max(2.6, 2k log(6/δv)). So, it remains to find suitable values for r, v and k:\nλmax[A] ≤ ‖x̄‖2 + ‖Σx̄x̄‖ ≤ c2 + λx1 = r′\nλmax[E[A2]] = λmax[E[‖x̄‖2(x̄⊗ x̄)− (x̄⊗ x̄)Σx̄x̄ − Σx̄x̄(x̄⊗ x̄) + Σx̄x̄2] = λmax[E[‖x̄‖2(x̄⊗ x̄)− Σx̄x̄2]] ≤ c2λx1 + λ2x1 = v′\ntr[E[A2]] = tr[E[‖x̄‖2(x̄⊗ x̄)− Σx̄x̄2]] ≤ tr[E[‖x̄‖2(x̄⊗ x̄)]] ≤ c2tr(Σx̄x̄) = k′\nThe case of ζ ȳȳδ,N can be proven similarly. Now moving to ζ x̄ȳ δ,N , we have Bt = ȳt⊗x̄t−Σȳx̄. SinceBt is not square, we use the Hermitian dilation H (B) defined as follows[24]:\nA = H (B) = [ 0 B B∗ 0 ] Note that\nλmax[A] = ‖B‖, A2 = [ BB∗ 0\n0 B∗B ] therefore suffices to bound ‖ 1\nN ∑N t=1At‖ using an argument similar to that used\nin ζ x̄x̄δ,N case.\nTo prove theorem 2, we write\n‖Ŵλxtest −Wxtest‖Y ≤ ‖(Ŵλ − W̄λ)x̄test‖Y + ‖(W̄λ −Wλ)x̄test‖Y + ‖(Wλ −W )x̄test‖Y (B.6)\nWe will now present bounds on each term. We consider the case where x̄test ∈ R(Σx̄x̄). Extension to R(Σx̄x̄) is a result of the assumed boundedness of W , which implies the boundedness of Ŵλ −W .\nLemma B.3 (Error due to S1 Regression). Assume that ‖x̄‖, ‖ȳ‖ < c < ∞ almost surely, and let ηδ,N be as defined in Definition 1. The following holds with probability at least 1− δ\n‖Ŵλ − W̄λ‖ ≤ √ λy1 + ζ ȳȳ δ,N (2cηδ,N + ηδ,N 2)\nλ 3 2\n+ (2cηδ,N + ηδ,N\n2)\nλ\n= O ηδ,N 1 λ + √ 1 + log(1/δ)√ N λ 3 2  ."
    }, {
      "heading" : "The asymptotic statement assumes ηδ,N → 0 as N →∞.",
      "text" : "Proof. Write Σ̂x̂x̂ = Σ̂x̄x̄ + ∆x and Σ̂ŷx̂ = Σ̂ȳȳx + ∆yx. We know that, with probability at least 1 − δ/2, the following is satisfied for all unit vectors φx ∈ X and φy ∈ Y\n〈φy,∆yxφx〉Y = 1\nN N∑ t=1 〈φy, ŷt〉Y〈φx, x̂t〉X\n− 〈φy, ŷt〉Y〈φx, x̄t〉X + 〈φy, ŷt〉Y〈φx, x̄t〉X − 〈φy, ȳt〉Y〈φx, x̄t〉X = 1\nN ∑ t 〈φy, ȳt + (ŷt − ȳt)〉Y〈φx, x̂t − x̄t〉X\n+ 〈φy, ŷt − ȳt〉Y〈φx, x̄t〉X ≤ 2cηδ,N + η2δ,N\nTherefore,\n‖∆yx‖ = sup ‖φx‖X≤1,‖φy‖Y≤1 〈φy,∆yxφx〉Y ≤ 2cηδ,N + η 2 δ,N ,\nand similarly\n‖∆x‖ ≤ 2cηδ,N + ηδ,N 2,\nwith probability 1− δ/2. We can write\nŴλ − W̄λ = Σ̂ȳx̄ ( (Σ̂x̄x̄ + ∆x + λI) −1 − (Σ̂x̄x̄ + λI)−1 ) + ∆yx(Σ̂x̄x̄ + ∆x + λI) −1\nUsing the fact that B−1 −A−1 = B−1(A−B)A−1 for invertible operators A and B we get\nŴλ − W̄λ = −Σ̂ȳx̄(Σ̂x̄x̄ + λI)−1∆x(Σ̂x̄x̄ + ∆x + λI)−1\n+ ∆yx(Σ̂x̄x̄ + ∆x + λI) −1\nwe then use the decomposition Σ̂ȳx̄ = Σ̂ 1 2 ȳȳV Σ̂ 1 2 x̄x̄, where V is a correlation operator satisfying ‖V ‖ ≤ 1. This gives\nŴλ − W̄λ =\n− Σ̂ 1 2 ȳȳV Σ̂ 1 2 x̄x̄(Σ̂x̄x̄ + λI) − 1 2 (Σ̂x̄x̄ + λI) − 1 2 ∆x(Σ̂x̄x̄ + ∆x + λI) −1 + ∆yx(Σ̂x̄x̄ + ∆x + λI) −1\nNoting that ‖Σ̂ 1 2 x̄x̄(Σ̂x̄x̄ +λI) − 1 2‖ ≤ 1, the rest of the proof follows from triangular inequality and the fact that ‖AB‖ ≤ ‖A‖‖B‖\nLemma B.4 (Error due to Covariance). Assuming that ‖x̄‖X , ‖ȳ‖Y < c < ∞ almost surely, the following holds with probability at least 1− δ\n2\n‖W̄λ −Wλ‖ ≤ √ λy1ζ x̄x̄ δ,Nλ − 3 2 + ζ x̄ȳδ,N λ\n, where ζ x̄x̄δ,N and ζ x̄ȳ δ,N are as defined in Lemma B.2.\nProof. Write Σ̂x̄x̄ = Σx̄x̄ + ∆x and Σ̂ȳx̄ = Σȳx̄ + ∆yx. Then we get W̄λ −Wλ = Σȳx̄ ( (Σx̄x̄ + ∆x + λI) −1 − (Σx̄x̄ + λI)−1 ) + ∆yx(Σx̄x̄ + ∆x + λI) −1\nUsing the fact that B−1 −A−1 = B−1(A−B)A−1 for invertible operators A and B we get\nW̄λ −Wλ = −Σȳx̄(Σx̄x̄ + λI)−1∆x(Σx̄x̄ + ∆x + λI)−1 + ∆yx(Σx̄x̄ + ∆x + λI)−1\nwe then use the decomposition Σȳx̄ = Σȳȳ 1 2V Σx̄x̄ 1 2 , where V is a correlation operator satisfying ‖V ‖ ≤ 1. This gives\nW̄λ −Wλ =\n− Σȳȳ 1 2V Σx̄x̄ 1 2 (Σx̄x̄ + λI) − 1 2 (Σx̄x̄ + λI) − 1 2\n.∆x(Σx̄x̄ + ∆x + λI) −1\n+ ∆yx(Σx̄x̄ + ∆x + λI) −1\nNoting that ‖Σx̄x̄ 1 2 (Σx̄x̄+λI) − 1 2‖ ≤ 1, the rest of the proof follows from triangular inequality and the fact that ‖AB‖ ≤ ‖A‖‖B‖\nLemma B.5 (Error due to Regularization on inputs withinR(Σx̄x̄)). For any x ∈ R(Σx̄x̄) s.t. ‖x‖X ≤ 1 and ‖Σx̄x̄− 1 2x‖X ≤ C. The following holds\n‖(Wλ −W )x‖Y ≤ 1\n2\n√ λ‖W‖HSC\nProof. Since x ∈ R(Σx̄x̄) ⊆ R(Σx̄x̄ 1 2 ), we can write x = Σx̄x̄ 1 2v for some v ∈ X s.t. ‖v‖X ≤ C. Then\n(Wλ −W )x = Σȳx̄((Σx̄x̄ + λI)−1 − Σx̄x̄−1)Σx̄x̄ 1 2v\nLetD = Σȳx̄((Σx̄x̄+λI)−1−Σx̄x̄−1)Σx̄x̄ 1 2 . We will bound the Hilbert-Schmidt norm of D. Let ψxi ∈ X , ψyi ∈ Y denote the eigenvector corresponding to λxi and λyi respectively. Define sij = |〈ψyj,Σx̄ȳψxi〉Y |. Then we have\n|〈ψyj, Dψxi〉Y | = ∣∣∣∣∣〈ψyj,Σȳx̄ λ(λxi + λ)√λxiψxi〉Y ∣∣∣∣∣\n= λsij\n(λxi + λ) √ λxi = sij√ λxi 1 1\nλ/λxi + 1\n≤ sij√ λxi . 1 2\n√ λ\nλxi =\n1\n2 √ λ sij λxi\n= 1\n2\n√ λ|〈ψyj,Wψxi〉Y |,\nwhere the inequality follows from the arithmetic-geometric-harmonic mean inequality. This gives the following bound\n‖D‖2HS = ∑ i,j 〈ψyj, Dψxi〉2Y ≤ 1 2 √ λ‖W‖2HS\nand hence\n‖(Wλ −W )x‖Y ≤ ‖D‖‖v‖X ≤ ‖D‖HS‖v‖X\n≤ 1 2\n√ λ‖W‖HSC\nNote that the additional assumption that ‖Σx̄x̄− 1 2x‖X ≤ C is not required to\nobtain an asymptotic O( √ λ) rate for a given x. This assumption, however, allows us to uniformly bound the constant. Theorem 2 is simply the result of plugging the bounds in Lemmata B.3, B.4, and B.5 into (B.6) and using the union bound."
    }, {
      "heading" : "B.2 Proof of Lemma 5",
      "text" : "for t = 1: Let I be an index set over training instances such that\nQ̂test1 = 1 |I| ∑ i∈I Q̂i\nThen\n‖Q̂test1 − Q̃test1 ‖X = 1 |I| ∑ i∈I ‖Q̂i − Q̃i‖X ≤ 1 |I| ∑ i∈I ‖Q̂i −Qi‖X ≤ ηδ,N\nfor t > 1: Let A denote a projection operator onR⊥(Σȳȳ)\n‖Q̂testt+1 − Q̃testt+1‖X ≤ L‖P̂ testt − P̃ testt ‖Y ≤ L‖AŴλQ̂testt ‖Y\n≤ L ∥∥∥∥∥∥ 1N ( N∑ i=1 AP̂i ⊗ Q̂i )( 1 N N∑ i=1 Q̂i ⊗ Q̂i + λI )−1∥∥∥∥∥∥ ∥∥∥Q̂testt ∥∥∥X\n≤ L ∥∥∥∥∥ 1N N∑ i=1 AP̂i ⊗ AP̂i ∥∥∥∥∥ 1 2 1√ λ ‖Q̂testt ‖X ≤ L ηδ,N√ λ ‖Q̂testt ‖X ,\nwhere the second to last inequality follows from the decomposition similar to ΣY X = Σ 1 2 Y V Σ 1 2 X , and the last inequality follows from the fact that ‖AP̂i‖Y ≤ ‖P̂i − P̄i‖Y ."
    } ],
    "references" : [ {
      "title" : "Directional tuning profiles of motor cortical cells",
      "author" : [ "Bagrat Amirikian", "Apostolos P Georgopulos" ],
      "venue" : "Neuroscience research,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2000
    }, {
      "title" : "Spectral Approaches to Learning Predictive Representations",
      "author" : [ "Byron Boots" ],
      "venue" : "PhD thesis,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2012
    }, {
      "title" : "An online spectral learning algorithm for partially observable nonlinear dynamical systems",
      "author" : [ "Byron Boots", "Geoffrey Gordon" ],
      "venue" : "In Proceedings of the 25th National Conference on Artificial Intelligence (AAAI-2011),",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2011
    }, {
      "title" : "Two-manifold problems with applications to nonlinear system identification",
      "author" : [ "Byron Boots", "Geoffrey Gordon" ],
      "venue" : "In Proc. 29th Intl. Conf. on Machine Learning (ICML),",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2012
    }, {
      "title" : "Hilbert Space Embeddings of Predictive State Representations",
      "author" : [ "Byron Boots", "Arthur Gretton", "Geoffrey J. Gordon" ],
      "venue" : "In Proc. 29th Intl. Conf. on Uncertainty in Artificial Intelligence (UAI),",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2013
    }, {
      "title" : "Closing the learning planning loop with predictive state representations",
      "author" : [ "Byron Boots", "Sajid Siddiqi", "Geoffrey Gordon" ],
      "venue" : null,
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2011
    }, {
      "title" : "Gaussian-process factor analysis for low-dimensional single-trial analysis of neural population activity",
      "author" : [ "M Yu Byron", "John P Cunningham", "Gopal Santhanam", "Stephen I Ryu", "Krishna V Shenoy", "Maneesh Sahani" ],
      "venue" : "In Advances in neural information processing systems,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2009
    }, {
      "title" : "Knowledge tracing: Modelling the acquisition of procedural knowledge",
      "author" : [ "Albert T. Corbett", "John R. Anderson" ],
      "venue" : "User Model. User-Adapt. Interact.,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1995
    }, {
      "title" : "Kernel bayes’ rule: Bayesian inference with positive definite kernels",
      "author" : [ "Kenji Fukumizu", "Le Song", "Arthur Gretton" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2013
    }, {
      "title" : "A spectral algorithm for learning hidden markov models",
      "author" : [ "Daniel Hsu", "Sham M. Kakade", "Tong Zhang" ],
      "venue" : "In COLT,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2009
    }, {
      "title" : "Random design analysis of ridge regression",
      "author" : [ "Daniel Hsu", "Sham M. Kakade", "Tong Zhang" ],
      "venue" : "In COLT 2012 - The 25th Annual Conference on Learning Theory, June",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2012
    }, {
      "title" : "Tail inequalities for sums of random matrices that depend on the intrinsic dimension",
      "author" : [ "Daniel Hsu", "Sham M Kakade", "Tong Zhang" ],
      "venue" : "Electronic Communications in Probability,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2012
    }, {
      "title" : "Reduced-rank regression for the multivariate linear model",
      "author" : [ "Alan Julian Izenman" ],
      "venue" : "Journal of multivariate analysis,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 1975
    }, {
      "title" : "Observable Operator Models for Discrete Stochastic Time Series",
      "author" : [ "Herbert Jaeger" ],
      "venue" : "Neural Computation,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2000
    }, {
      "title" : "A data repository for the EDM community: The PSLC DataShop",
      "author" : [ "Kenneth R. Koedinger", "R.S.J. Baker", "K. Cunningham", "A. Skogsholm", "B. Leber", "John Stamper" ],
      "venue" : "Handbook of Educational Data Mining,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2010
    }, {
      "title" : "Learning nonlinear dynamic models",
      "author" : [ "John Langford", "Ruslan Salakhutdinov", "Tong Zhang" ],
      "venue" : "In Proceedings of the 26th Annual International Conference on Machine Learning,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2009
    }, {
      "title" : "Time series and system analysis, with applications",
      "author" : [ "S.M. Pandit", "S.M. Wu" ],
      "venue" : null,
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 1983
    }, {
      "title" : "Causality: Models, Reasoning, and Inference",
      "author" : [ "Judea Pearl" ],
      "venue" : null,
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2000
    }, {
      "title" : "Reduced-rank hidden Markov models",
      "author" : [ "Sajid Siddiqi", "Byron Boots", "Geoffrey J. Gordon" ],
      "venue" : "In Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics (AISTATS-2010),",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2010
    }, {
      "title" : "Hilbert space embeddings of hidden Markov models",
      "author" : [ "L. Song", "B. Boots", "S.M. Siddiqi", "G.J. Gordon", "A.J. Smola" ],
      "venue" : "In Proc. 27th Intl. Conf. on Machine Learning (ICML),",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2010
    }, {
      "title" : "Hilbert space embeddings of conditional distributions with applications to dynamical systems",
      "author" : [ "Le Song", "Jonathan Huang", "Alexander J. Smola", "Kenji Fukumizu" ],
      "venue" : "In Proceedings of the 26th Annual International Conference on Machine Learning,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2009
    }, {
      "title" : "Introduction to Econometrics",
      "author" : [ "J.H. Stock", "M.W. Watson" ],
      "venue" : "Addison- Wesley series in economics. Addison-Wesley,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2011
    }, {
      "title" : "Direct cortical control of 3d neuroprosthetic devices",
      "author" : [ "Dawn M. Taylor", "Stephen I. Helms Tillery", "Andrew B. Schwartz" ],
      "venue" : "Science, pages 1829–1832,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2002
    }, {
      "title" : "User-friendly tools for random matrices: An introduction",
      "author" : [ "Joel A. Tropp" ],
      "venue" : "NIPS Tutorial,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2012
    } ],
    "referenceMentions" : [ {
      "referenceID" : 13,
      "context" : "One of the main tools that algorithm designers use for this purpose is to expand the class of models considered, thereby removing difficult constraints from (1): for example, instead of learning a hidden Markov model (HMM), we can expand the model class to include all observable operator models (OOMs) [14].",
      "startOffset" : 303,
      "endOffset" : 307
    }, {
      "referenceID" : 17,
      "context" : "Our new view is based on instrumental variable regression [18, 22].",
      "startOffset" : 58,
      "endOffset" : 66
    }, {
      "referenceID" : 21,
      "context" : "Our new view is based on instrumental variable regression [18, 22].",
      "startOffset" : 58,
      "endOffset" : 66
    }, {
      "referenceID" : 3,
      "context" : ", in [4].",
      "startOffset" : 5,
      "endOffset" : 8
    }, {
      "referenceID" : 21,
      "context" : "We propose a generalization of the linear two stage ordinary least squares procedure [22], give error bounds for this generalization, and formulate dynamical systems learning as an instance of this regression technique.",
      "startOffset" : 85,
      "endOffset" : 89
    }, {
      "referenceID" : 5,
      "context" : ", [6, 3].",
      "startOffset" : 2,
      "endOffset" : 8
    }, {
      "referenceID" : 2,
      "context" : ", [6, 3].",
      "startOffset" : 2,
      "endOffset" : 8
    }, {
      "referenceID" : 3,
      "context" : "In fact, it is also known that we can interpret this algorithm as linear instrumental-variable regression [4].",
      "startOffset" : 106,
      "endOffset" : 109
    }, {
      "referenceID" : 17,
      "context" : "To counteract this bias, we employ instrumental regression [18, 22].",
      "startOffset" : 59,
      "endOffset" : 67
    }, {
      "referenceID" : 21,
      "context" : "To counteract this bias, we employ instrumental regression [18, 22].",
      "startOffset" : 59,
      "endOffset" : 67
    }, {
      "referenceID" : 15,
      "context" : "ξt must satisfy 2Note that, similar to [16], Pt is a deterministic function of Qt and hence this condition has a unique solution if we observe sufficient examples of Pt and Qt.",
      "startOffset" : 39,
      "endOffset" : 43
    }, {
      "referenceID" : 1,
      "context" : "This work extends predictive state learning algorithms for dynamical systems, which include spectral algorithms for Kalman filters [2], Hidden Markov Models [10, 19] and Predictive State Representations (PSRs) [6, 3] as well as infinitedimensional variants such as the Hilbert space embedding of hidden Markov models (HSE-HMM) [20] and predictive state representations (HSE-PSR) [5].",
      "startOffset" : 131,
      "endOffset" : 134
    }, {
      "referenceID" : 9,
      "context" : "This work extends predictive state learning algorithms for dynamical systems, which include spectral algorithms for Kalman filters [2], Hidden Markov Models [10, 19] and Predictive State Representations (PSRs) [6, 3] as well as infinitedimensional variants such as the Hilbert space embedding of hidden Markov models (HSE-HMM) [20] and predictive state representations (HSE-PSR) [5].",
      "startOffset" : 157,
      "endOffset" : 165
    }, {
      "referenceID" : 18,
      "context" : "This work extends predictive state learning algorithms for dynamical systems, which include spectral algorithms for Kalman filters [2], Hidden Markov Models [10, 19] and Predictive State Representations (PSRs) [6, 3] as well as infinitedimensional variants such as the Hilbert space embedding of hidden Markov models (HSE-HMM) [20] and predictive state representations (HSE-PSR) [5].",
      "startOffset" : 157,
      "endOffset" : 165
    }, {
      "referenceID" : 5,
      "context" : "This work extends predictive state learning algorithms for dynamical systems, which include spectral algorithms for Kalman filters [2], Hidden Markov Models [10, 19] and Predictive State Representations (PSRs) [6, 3] as well as infinitedimensional variants such as the Hilbert space embedding of hidden Markov models (HSE-HMM) [20] and predictive state representations (HSE-PSR) [5].",
      "startOffset" : 210,
      "endOffset" : 216
    }, {
      "referenceID" : 2,
      "context" : "This work extends predictive state learning algorithms for dynamical systems, which include spectral algorithms for Kalman filters [2], Hidden Markov Models [10, 19] and Predictive State Representations (PSRs) [6, 3] as well as infinitedimensional variants such as the Hilbert space embedding of hidden Markov models (HSE-HMM) [20] and predictive state representations (HSE-PSR) [5].",
      "startOffset" : 210,
      "endOffset" : 216
    }, {
      "referenceID" : 19,
      "context" : "This work extends predictive state learning algorithms for dynamical systems, which include spectral algorithms for Kalman filters [2], Hidden Markov Models [10, 19] and Predictive State Representations (PSRs) [6, 3] as well as infinitedimensional variants such as the Hilbert space embedding of hidden Markov models (HSE-HMM) [20] and predictive state representations (HSE-PSR) [5].",
      "startOffset" : 327,
      "endOffset" : 331
    }, {
      "referenceID" : 4,
      "context" : "This work extends predictive state learning algorithms for dynamical systems, which include spectral algorithms for Kalman filters [2], Hidden Markov Models [10, 19] and Predictive State Representations (PSRs) [6, 3] as well as infinitedimensional variants such as the Hilbert space embedding of hidden Markov models (HSE-HMM) [20] and predictive state representations (HSE-PSR) [5].",
      "startOffset" : 379,
      "endOffset" : 382
    }, {
      "referenceID" : 3,
      "context" : "Boots and Gordon [4] note the connection between the HSE-HMM and instrumental variables, which is manifested in the use of kernel SVD of a future-past covariance operator to identify the latent state space.",
      "startOffset" : 17,
      "endOffset" : 20
    }, {
      "referenceID" : 16,
      "context" : "Reducing dynamical systems learning to supervised learning dates back to auto-regressive models [17], where the state of the system is assumed to be fully determined by the previous k observations.",
      "startOffset" : 96,
      "endOffset" : 100
    }, {
      "referenceID" : 15,
      "context" : "’s sufficient posterior representation (SPR) [16], which encodes the state by the sufficient statistics of the conditional distribution of the next observation and represents system dynamics by three vector-valued functions that are estimated using supervised learning approaches.",
      "startOffset" : 45,
      "endOffset" : 49
    }, {
      "referenceID" : 15,
      "context" : "Finally, the theoretical analysis of [16] only establishes the consistency of SPR learning assuming that all regression steps are solved perfectly.",
      "startOffset" : 37,
      "endOffset" : 41
    }, {
      "referenceID" : 19,
      "context" : "The RKHS view is useful when the future statistics are represented in terms of kernels—for example, if they are kernel mean maps of the distribution of future observations, a case that is closely related to the HSE-HMM [20] and HSE-PSR [5] models.",
      "startOffset" : 219,
      "endOffset" : 223
    }, {
      "referenceID" : 4,
      "context" : "The RKHS view is useful when the future statistics are represented in terms of kernels—for example, if they are kernel mean maps of the distribution of future observations, a case that is closely related to the HSE-HMM [20] and HSE-PSR [5] models.",
      "startOffset" : 236,
      "endOffset" : 239
    }, {
      "referenceID" : 10,
      "context" : "[11]).",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 20,
      "context" : "Assume that x and y are kernel evaluation functionals, x̄ and ȳ are linear vector functions of z where the linear operator is estimated using conditional mean embedding [21] with regularization parameter λ0 > 0 and that ‖x̄‖X , ‖ȳ‖Y < c < ∞ almost surely.",
      "startOffset" : 169,
      "endOffset" : 173
    }, {
      "referenceID" : 20,
      "context" : "(sketch) This bound is based on [21], which gives a bound on the error in estimating the conditional mean embedding.",
      "startOffset" : 32,
      "endOffset" : 36
    }, {
      "referenceID" : 7,
      "context" : "We use the Bayesian knowledge tracing (BKT) model [8], which is essentially a 2-state HMM: the state st represents whether a student has learned a knowledge component (KC), and the observation ot represents the success/failure of solving the t question in a sequence of question that cover the said KC.",
      "startOffset" : 50,
      "endOffset" : 53
    }, {
      "referenceID" : 14,
      "context" : "1 Data Description The data set we used to evaluate the model is a publicly available data set from DataShop [15] called “Geometry Area (1996-97).",
      "startOffset" : 109,
      "endOffset" : 113
    }, {
      "referenceID" : 9,
      "context" : "In the appendix, we show that if use ht = ot−1 and linear regression as S1 regression model, the resulting algorithm is equivalent to spectral HMM method of [10] and thus we use it as a baseline.",
      "startOffset" : 157,
      "endOffset" : 161
    } ],
    "year" : 2017,
    "abstractText" : "Recently there has been substantial interest in predictive state methods for learning dynamical systems: these algorithms are popular since they often offer a good tradeoff between computational speed and statistical efficiency. Despite their desirable properties, though, predictive state methods can sometimes be difficult to use in practice. E.g., in contrast to the rich literature on supervised learning methods, which allows us to choose from an extensive menu of models and algorithms to suit the prior beliefs we have about properties of the function to be learned, predictive state dynamical system learning methods are comparatively inflexible: it is as if we were restricted to use only linear regression instead of being allowed to choose decision trees, nonparametric regression, or the lasso. To address this problem, we propose a new view of predictive state methods in terms of instrumentalvariable regression. This view allows us to construct a wide variety of dynamical system learners simply by swapping in different supervised learning methods. We demonstrate the effectiveness of our proposed methods by experimenting with non-linear regression to learn a hidden Markov model, showing that the resulting algorithm outperforms its linear counterpart; the correctness of this algorithm follows directly from our general analysis.",
    "creator" : "TeX"
  }
}