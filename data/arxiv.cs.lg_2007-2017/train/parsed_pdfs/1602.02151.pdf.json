{
  "name" : "1602.02151.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Exploiting the Structure: Stochastic Gradient Methods Using Raw Clusters",
    "authors" : [ "Zeyuan Allen-Zhu", "Yang Yuan", "Karthik Sridharan" ],
    "emails" : [ "zeyuan@csail.mit.edu", "yangyuan@cs.cornell.edu", "sridharan@cs.cornell.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "We introduce a simple notion of raw clustering that can be efficiently obtained with just one pass of the data, and propose two algorithms. Our variance-reduction based algorithm ClusterSVRG introduces a new gradient estimator using the clustering information, and our accelerated algorithm ClusterACDM is built on a novel Haar transformation applied to the dual space of each cluster. Our algorithms outperform their classical counterparts both in theory and practice."
    }, {
      "heading" : "1 Introduction",
      "text" : "For large-scale machine learning applications, n, the number of training data examples, is usually very large. Therefore, to search for the optimal solution, it is often desirable to use stochastic gradient methods which only requires one (or a batch of) random example(s) from the given training set per iteration as an estimator of the true gradient.\nFor empirical risk minimization problems (ERM) in particular, stochastic gradient methods have received a lot of attention in the past decade. The original stochastic gradient descent (SGD) methods [4, 27] simply defines the estimator using one random data example but converges slowly. Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].\nNone of the above cited results, however, have considered the internal structure of the dataset, i.e., using the stochastic gradient with respect to one data vector p to estimate the stochastic gradients of other data vectors close to p. To illustrate why internal structure could be very\n∗These two authors equally contribute to this paper.\nar X\niv :1\n60 2.\n02 15\n1v 1\n[ cs\n.L G\nhelpful, consider the following extreme case: if all the data vectors are located at the same spot, then, every stochastic gradient could represent the full gradient of the entire dataset. In a nonextreme case, if data vectors form clusters, then the stochastic gradient of one data vector could provide a rough estimation for its neighbors. For this reason, one should expect empirical risk minimization problems to be easier if the data vectors are clustered.\nMore importantly, well-clustered datasets are abundant in the big-data era. For instance, although there are more than 1 billion of users on Facebook, the intrinsic “feature vectors” of these users can be naturally categorized by the users’ occupations, nationalities, etc. As another example, although there are 581,012 data vectors in the famous Covtype dataset [8], each representing a 30m x 30m cell in the Roosevelt National Forest of northern Colorado, these feature vectors (after normalization) can be easily categorized into 1,445 clusters of diameter 0.1 — see Section 5. With these examples in mind, we wish to investigate how to train an ERM problem faster using clustering information.\nIn a seminal work by Hofmann et al. [11], they introduced N-SAGA, the first ERM training algorithm that takes into account the similarities between data vectors. In each iteration, NSAGA computes the stochastic gradient of one data vector p, and uses this information as a biased representative for a small neighborhood of p (say, for 20 nearby data vectors of p). However, NSAGA has several limitations. First, it is biased and does not converge to the global minimum of the training objective. Secondly, in order to keep the bias small, it can only exploit a small neighborhood for every vector. Moreover, although it only needs one gradient computation per iteration, it may require time O(20d) per iteration to update the full gradient if 20 is the average neighborhood size and d is the dimension of the vectors. This could be 20 times slower than a single iteration of SGD."
    }, {
      "heading" : "1.1 Our Results and Techniques",
      "text" : "In this paper we focus on a very simple notion of clustering that captures the minimum requirement for a cluster to have similar vectors. Assume without loss of generality that each data vector has norm at most 1. We say that a partition of the data vectors is an (s, δ) raw clustering if the vectors are divided into s disjoint sets, and the average distance between vectors in each set is at most δ.\nRaw clusterings certainly exist for all the datasets: an (n, 0) raw clustering corresponds to each data vector belonging to its own cluster, and a (1, 2) raw clustering corresponds to all the vectors belonging to the same cluster. For different values of δ, one can obtain an (sδ, δ) raw clustering where sδ is a function on δ. For example, a (1445, 0.1) raw clustering exists for the Covtype dataset.\nRaw clustering enjoys the following nice properties.\n• It is a weak definition, allowing a few outliers to exist in each cluster as well as nearby vectors to be split into multiple clusters. This makes raw clustering easily obtainable in practice.\n• It allows large clusters. This is very different from N-SAGA, which requires each cluster to be very small due to the bias in the algorithm.\n• It can be computed very efficiently using approximate nearest neighbor algorithms such as LSH [2] and product quantization [10, 12], see Section 5.1.\nWe explore in this paper how a given (s, δ) raw clustering can improve the performance of an ERM training algorithm, for different choices of s and δ, both theoretically and empirically. We propose two unbiased algorithms, which we call ClusterSVRG and ClusterACDM, that make novel use of clustering information to reduce the running time of SVRG [13] and ACDM [1, 15] respectively. Our two algorithms use very different techniques.\nNon-Accelerated Methods and Our ClusterSVRG. Our ClusterSVRG method is a nonaccelerated stochastic gradient method just like SVRG [13], SAGA [6], SDCA [24], etc.\nRecall that in a stochastic gradient method one usually defines a gradient estimator ∇̃t at iteration t, and performs an update xt+1 ← xt − η∇̃t for some step size η > 0. If the objective f(x) = 1n ∑ i fi(x) is separable, a natural choice of ∇̃t is to set ∇̃t = ∇fi(xt) for some random i ∈ [n]. This is known as the SGD method but is usually slow because the variance of this estimator can be large.\nThe key idea behind most non-accelerated methods is to carefully define an estimator ∇̃t with diminishing variance. For instance, SVRG chooses ∇̃t = 1n ∑ j ∇fj(x̃) + ∇fi(xt) − ∇fi(x̃) where x̃ is a snapshot iterate that can be n iterations ago. We observe in this paper that, in the SVRG estimator ∇̃t, each term ∇fj(x̃) can be viewed as a “guess term” of the true gradient ∇fj(xt). These guess terms may be very outdated because x̃ may be n iterations away from xt, and therefore contribute to a large variance.\nWe use the raw clustering to further improve these guess terms and thus reduce the variance. More specifically, if vector j belongs to cluster c, our ClusterSVRG uses ∇fj(x̃)+∇fk(xt)−∇fk(x̃) as the new guess of ∇fj(xt) where t is the last time cluster c was accessed and k is the index of the vector in this cluster that was accessed. This new guess only has an outdatedness of roughly s that could be much smaller than n.1\nAccelerated Methods and Our ClusterACDM. Our ClusterACDM method is an accelerated stochastic gradient method just like AccSDCA [25], APCG [17], ACDM [1, 15], SPDC [28], etc.\nRecall that accelerated methods outperform non-accelerated ones in certain parameter regimes. For instance, consider in ridge regression where the `2 regularizer has weight λ > 0. The best non-accelerated methods and accelerated methods run in time\nnon-accelerated: Õ ( nd+ d\nλ\n) and accelerated: Õ ( nd+ √ nd√ λ ) (1.1)\nwhere d is the dimension of the data vectors and the Õ notation hides the log 1ε factor that depends on the accuracy.\nJust by looking at the asymptotic worst-case running times in (1.1), we argue that the clustering information can have drastically different impacts on the two types of methods.\n• In a non-accelerated method, even if all the data vectors were identical so a stochastic gradient would be the same as the full gradient, a non-accelerated method still had to run Õ( 1λ)\niterations, yielding a total running time Õ(d/λ). Therefore, there is little room to improve the asymptotic worst-case running time of a non-accelerated method, even if good clustering information is provided. 2\n• In contrast, for an accelerated method, if all the data vectors were identical, an accelerated method could converge in Õ( 1√\nλ ) iterations, yielding a total running time O(d/\n√ λ). In other\nwords, one could expect the running time of an accelerated method to be improved from Õ ( nd+ √ nd√ λ ) to Õ ( nd+ d√ λ ) at best.\n1For instance, if all the vectors in this cluster c were identical, then ∇fj(x̃) +∇fk(xt)−∇fk(x̃) would be equal to ∇fj(xt) and thus outdated from fj(xt) by only s iterations if all clusters are of equal size. If the vectors in cluster c are different from each other by at most δ in distance, then in addition to the outdatedness s, this parameter δ also contributes to the variance computation. See equation (UB1) in Lemma 4.3 for details.\n2However, as we show in Section 4, ClusterSVRG still improves the running time especially at the first a few passes of the dataset.\nOur ClusterACDM method is designed to precisely match this suggested performance above. Given an (s, δ) raw clustering, ClusterACDM enjoys a worst-case running time\nÕ ( nd+ max{√s, √ δn}√ λ d )\n(1.2)\nfor ridge regression, Lasso, and more generally for all regularized least-square problems. In the ideal case when all the feature vectors are identical, ClusterACDM converges in the aforementioned Õ ( nd+ d√\nλ\n) running time. Otherwise, our running time is always asymptotically better than known\naccelerated methods by a factor O(min{ √\nn s , 1√ δ }) that depends on the clustering quality.3\nOur high-level idea for ClusterACDM is simple. Since a cluster of vectors have almost identical directions if δ is small, we wish to create an auxiliary vector for each cluster representing “moving in the average direction of all vectors in this cluster”. Next, we design a stochastic gradient method that, instead of uniformly choosing a random vector, selects those auxiliary vectors with a much higher probability compared with ordinary ones. This could lead to a running time improvement because moving in the direction of an auxiliary vector only costs O(d) running time but exploits the information of the entire cluster.\nWe implement the above intuition using optimization insights. In the dual space of the ERM problem, each variable corresponds to a data example in the primal, and the objective is known to be coordinate-wise smooth with the same smoothness parameter per coordinate. In the preprocessing step, ClusterACDM applies a novel Haar transformation on each cluster of the dual coordinates. Haar transformation rotates the dual space, and for each cluster, it automatically reserves a new dual variable that corresponds to the auxiliary primal vector mentioned above. Furthermore, these new dual variables have significantly larger smoothness parameters and therefore will be selected with probability much larger than 1/n if one applies a state-of-the-art accelerated coordinate descent method such as ACDM."
    }, {
      "heading" : "1.2 To Practitioners",
      "text" : "SVRG vs. SAGA vs. ClusterSVRG. The original SVRG method becomes a special case of ClusterSVRG when all the data vectors belong to the same cluster; the SAGA method also becomes a special case when each data vector belongs to its own cluster. We hope that this interpolation helps experimentalists decide between these methods: (1) if the data vectors are pairwise close to each other then use SVRG; (2) if the data vectors are all very separated from each other then use SAGA; and (3) if the data vectors have nice clustering structures then use our ClusterSVRG.\nClusterSVRG vs. ClusterACDM. Based on both theoretical and experimental results, we have the following suggestions for choosing between ClusterSVRG and ClusterACDM for experimentalists. When the given clusters has large average sizes (thus large cluster diameter), we recommend ClusterACDM and vice versa because ClusterACDM exploits large clusters better. When the regularization parameter λ is large, we recommend ClusterSVRG and vice versa. In practice, one may first pick the best λ using cross validation, and then decide between ClusterSVRG and ClusterACDM. See Section 5.2 for detailed comparison and reasoning.\nMini Batch. Recall that both non-accelerated and accelerated gradient methods have their mini-batch variants, such as mini-batch SVRG [14], mini-batch AccSDCA [23], and mini-batch SPDC [28]. Instead of computing a stochastic gradient with respect to a single training data\n3Since s increases as δ decreases, this speed up factor is maximized when s/δ = n. In practice, however, the performance of ClusterACDM is not very sensitive to the quality of clusters. As we shown in Section 5.3, as long as the given clustering is not degenerated, we obtain similarly fast convergence rates.\nexample, these algorithms perform updates with respect to a random subset of the data examples, known as a mini batch. These results are therefore orthogonal to the present work, and adopting mini-batch updates can further improve performance for a clustering-based method. For instance, by selecting a random data example from each cluster as a mini batch in each iteration, one can further reduce the variance of the gradient estimator in ClusterSVRG and improve its convergence."
    }, {
      "heading" : "1.3 Other Related Work",
      "text" : "Reddi et al. [20] also proposes a framework unifying SVRG and SAGA. ClusterSVRG is different from theirs as we compare SVRG and SAGA from the perspective of data clustering, while their framework generalizes several algorithms using a universal ScheduleUpdate subroutine. With the help from this clustering perspective, a more fundamental difference between SAGA and SVRG is revealed and verified by experiments in this paper: SAGA implicitly treats each data vector as a separate cluster, while SVRG implicitly treats all the vectors as a single cluster.\nResearchers also design accelerated stochastic methods via a black-box reduction to non-accelerated ones [9, 16]. The worst-case running times of these methods match that of AccSDCA. However, we can not use these reductions to directly get ClusterACDM from ClusterSVRG, since in ClusterACDM we use different techniques such as the Haar transformation and non-uniform sampling, which do not appear in either ClusterSVRG or the reduction frameworks."
    }, {
      "heading" : "2 Preliminaries",
      "text" : ""
    }, {
      "heading" : "2.1 Raw Clustering",
      "text" : "Given a dataset consisting of n vectors {a1, . . . , an} ⊂ Rd, we assume without loss of generality that ‖ai‖2 ≤ 1 for each i ∈ [n]. Let a clustering of this dataset denote a partition of the indices [n] = S1 ∪ · · · ∪ Ss. We call each set Sc a cluster and use nc = |Sc| to denote its size. It satisfies∑s\nc=1 nc = n. We are interested in the following quantification that estimates the quality of a clustering:\nDefinition 2.1 (raw clustering on vectors). We say a partition [n] = S1 ∪ · · · ∪ Ss is an (s, δ) raw clustering for the vectors {a1, . . . , an} if, on average, the pairwise distances between vectors in each cluster Sc are at most δ; or more precisely, for every cluster Sc it satisfies\n1 |Sc|2 ∑\ni,j∈Sc ‖ai − aj‖2 ≤ δ .\nWe call it a raw clustering because the above definition captures the minimum requirement for each cluster to have similar vectors. For instance, the above “average” definition allows a few outliers to exist in each cluster as long as there are not too many. In addition, nearby vectors can be split into different clusters.\nRaw clustering of the dataset is very easy to obtain: we include in Section 5.1 a simple and efficient algorithm for computing an (sδ, δ) raw clustering of any quality δ.\nWhile our accelerated method ClusterACDM works only for regularized least-square problems in theory, our non-accelerated method ClusterSVRG, like its parent method SVRG [13], focuses on a more general stochastic setting, consisting of a set of n convex functions {f1(x), . . . , fn(x)} rather than n vectors. In this case, we consider the following quantification of the clustering quality:\nDefinition 2.2 (raw clustering on functions). We say a partition [n] = S1∪· · ·∪Ss is an (s, σ) raw clustering of the functions {f1(x), . . . , fn(x)} if for every cluster Sc and every x that has bounded norms, it satisfies\n1 |Sc|2 ∑\ni,j∈Sc ‖∇fi(x)−∇fj(x)‖2 ≤ σ .\nDefinition 2.2 is a natural generalization of Definition 2.1 for the following reason. Consider the case when each function fi(x) = 1 2(〈ai, x〉 − 1)2 is a least square loss function, where ai is the a feature vector with ‖ai‖ ≤ 1. Then, it satisfies that ∇fi(x) = (〈ai, x〉 − 1)ai and therefore ‖∇fi(x)−∇fj(x)‖2 = ‖〈ai, x〉ai − 〈aj , x〉aj − ai + aj‖2\n= ‖ ( 〈ai, x〉 − 1 ) (ai − aj) + 〈ai − aj , x〉aj‖2 ≤ 2 (( 〈ai, x〉 − 1 )2 · ‖ai − aj‖2 + ( 〈ai − aj , x〉 )2 · ‖aj‖2 ) ≤ O ( ‖x‖2 ) · ‖ai − aj‖2 .\nSince we have assumed x to be bounded, it follows that an (s, δ) raw clustering on the dataset implies an (s, σ) raw clustering on the corresponding least-square loss functions where the parameter σ is on the same order as δ. Similar results can be deduced for other loss functions including logistic loss, smoothed hinge losses, etc.\nWe note that a very similar assumption on functions like our (s, σ) raw clustering assumption in Definition 2.2 was also introduced by Hofmann et al. [11]."
    }, {
      "heading" : "2.2 Convex Optimization",
      "text" : "Recall some classical definitions on the strong convexity and the smoothness of a function.\nDefinition 2.3 (Smoothness and strong convexity). For a convex function f : Rn → R, • f is σ-strongly convex if ∀x, y ∈ Rn, it satisfies f(y) ≥ f(x) + 〈∇f(x), y − x〉+ σ2 ‖x− y‖2. • f is L-smooth if ∀x, y ∈ Rn, it satisfies ‖∇f(x)−∇f(y)‖ ≤ L‖x− y‖. • f is coordinate-wise smooth with parameters (L1, L2, . . . , Ln), if\n∀x ∈ Rn, ∀δ > 0, ∀i ∈ [n] : |∇if(x+ δei)−∇if(x)| ≤ Li · δ . If f is twice differentiable, this requirement can be simplified as ∇2iif(x) ≤ Li for all x ∈ Rn.\nFor strongly convex and coordinate-wise smooth functions f , one can apply the accelerated coordinate descent algorithm (ACDM) to minimize f :\nTheorem 2.4 (ACDM). If f(x) is σ-strongly convex and coordinate-wise smooth with parameters (L1, . . . , Ln), the non-uniform accelerated coordinate descent method of [1] produces an output y satisfying f(y)−minx f(x) ≤ ε in\nO (∑\ni\n√ Li/σ · log(1/ε)\n)\niterations. Each iteration runs in time proportional to the computation of a coordinate gradient ∇if(·) of f .\nWe remark here that accelerated coordinate descent method admits several variants such as APCG [17], ACDM [15], and NU ACDM [1]. These variants agree on the convergence rate in the case when L1 = · · · = Ln, but NU ACDM has reported a faster convergence when L1, . . . , Ln are not identical. Therefore, we refer to NU ACDM as the accelerated coordinate descent method (ACDM) in this paper."
    }, {
      "heading" : "3 ClusterACDM Algorithm",
      "text" : "Consider a regularized least-square problem\nPrimal: min x∈Rd\n{ P (x) def = 1\n2n\nn∑\ni=1\n(〈ai, x〉 − li)2 + r(x) } , (3.1)\nwhere each ai ∈ Rd is the feature vector of a training example and li is the label of ai. Problem (3.1) becomes ridge regression when r(x) = λ2‖x‖22, and becomes Lasso when r(x) = λ‖x‖1.\nOne of the state-of-the-art accelerated stochastic gradient methods to solve (3.1) is through its dual. Consider the following equivalent dual formulation of (3.1) (see for instance [17] for the detailed proof):\nDual: min y∈Rn\n{ D(y) def = 1\n2n ‖y‖2 + 1 n 〈y, l〉+ r∗ ( − 1 n Ay ) = 1 n n∑\ni=1\n(1 2 y2i + yi · li ) + r∗ ( − 1 n n∑\ni=1\nyiai\n)} ,\n(3.2)\nwhere A = [a1, a2, . . . , an] ∈ Rd×n is the data matrix and r∗(y) def= maxw yTw − r(w) is the Fenchel dual of r(w)."
    }, {
      "heading" : "3.1 Previous Solutions",
      "text" : "If r(x) is λ-strongly convex in the primal objective P (x), the dual objective D(y) is both strongly convex and smooth. The following lemma is due to [17] but is anyways proved for completeness’ sake.\nLemma 3.1. If r(x) is λ-strongly convex, then D(y) is σ = 1n strongly convex and coordinate-wise smooth with parameters (L1, . . . , Ln) for Li = 1 n + 1 λn2 ‖ai‖2.\nProof. Since there is a component 12n‖y‖2 in the definition of D(y), we know that D(y) is 1n -strongly convex. To prove the smoothness, recall that if r(·) is λ strongly convex, then r∗(·) is 1/λ smooth, or mathematically, ∇2r∗(x) 1λI (see for instance the text book [5]). Here we denote by A B the spectral dominance of matrices, which means xTAx ≤ xTBx for every x ∈ Rn.\nUsing this fact, we compute the Hessian of D(·)\n∇2D(y) = 1 n I +∇2r∗ ( − 1 n Ay ) 1 n I + 1 n2 AT I λ A = 1 n + 1 λn2 ATA .\nNow, since (ATA)ii = ‖ai‖2 for each i ∈ [n], we have that ∇2iiD(y) ≤ 1n + 1λn2 ‖ai‖2 which gives the desired smoothness property.\nFor this reason, the authors of [17] proposed to apply accelerated coordinate descent (such as their APCG method) to minimize D(y).4 Assuming without loss of generality ‖ai‖2 ≤ 1 for each feature vector, we have Li ≤ 1n + 1λn2 . Owing to Theorem 2.4, one can conclude that the ACDM method produces an output y satisfying D(y)−minzD(z) ≤ ε in\nO (∑\ni\n√ Li/σ log(1/ε) ) = O(n\n√ 1 n + 1 λn2\n1/n log(1/ε)) = Õ(n+\n√ n/λ)\n4They showed that defining x = ∇r∗(−Ay/n), if y is a good approximate minimizer of the dual objective D(y), x is also a good approximate minimizer of the primal objective P (x).\nAlgorithm 1 ClusterACDM Input: a raw clustering S1 ∪ · · · ∪ Ss. 1: Apply cluster-based Haar transformation Hcl to get the transformed objective D\n′(y′). 2: Run ACDM to minimize D′(y′) 3: Transform the solution of D′(y′) back to the original space.\niterations, and each iteration runs in time proportional to the computation of ∇iD(y) which is usually O(d) for ERM problems. This total running time Õ(nd + √ n/λd) matches the fastest known running time (originally obtained by AccSDCA [25]) for solving (3.1) when r(x) is λ-strongly convex.\nAbove, we only focused on the case when r(x) is strongly convex. If r(x) is not strongly convex, we can always make r(x) it strongly convex by a standard reduction. For instance, in Lasso we may have r(x) = λ1‖x‖1 in the primal objective (3.1) which is not strongly convex. In this case, it suffices to look at an alternative regularizer r′(x) def= r(x) + λ2‖x‖22 and its corresponding objective function P ′(x) def= P (x)+ λ2‖x‖22. Since for every x it satisfies |P (x)−P ′(x)| ≤ O(λ), one can specify a small enough parameter λ proportional to the desired error ε, and minimize P ′(x) instead. This auxiliary 2-norm regularizer introduces error to the objective, but allows the function P (x) to be minimized in Õ(nd+ √ n/λd) = Õ(nd+ √ n/εd) time, again matching the fastest known running time by AccSDCA. Thus, in this section we always assume that r(x) is λ-strongly convex for some λ > 0."
    }, {
      "heading" : "3.2 Our New Algorithm",
      "text" : "Since each dual coordinate yi corresponds to the i-th feature vector ai, given a raw clustering [n] = S1 ∪ S2 ∪ · · · ∪ Ss of the dataset {a1, . . . , an}, we can naturally partition the coordinates of the dual vector y ∈ Rn into s blocks corresponding to the clusters. Without loss of generality, we assume that the coordinates of y are sorted in the order of the cluster indices. In other words, we write y = (yS1 , . . . , ySs) where each ySc ∈ Rnc .\nOur ClusterACDM method transforms the dual objective (3.2) into its equivalent form, by performing nc-dimensional Haar transformation on its c-th block of coordinates, for every c = 1, 2, . . . , s. Formally,5 Definition 3.2. Let R2 def = [ 1/ √ 2 −1/ √ 2 ] ,\nR3 def = [ √2/ √ 3 − √ 2/(2 √ 3) − √ 2/(2 √ 3)\n0 1/ √ 2 −1/ √ 2\n] ,\nand more generally\nRn def =   1/a√ 1/a+1/b . . . 1/a√ 1/a+1/b −1/b√ 1/a+1/b . . . −1/b√ 1/a+1/b\nRa 0 0 Rb\n  ∈ R(n−1)×n\nfor a = bn/2c and b = dn/2e. Then, define the n-dimensional (normalized) Haar matrix as\nHn def = [ 1/ √ n · · · 1/√n Rn ] ∈ Rn×n\n5We note that an n-dimensional Haar transformation is often defined in the literature only for n being an integral power of 2; in contrast, we generalize them into arbitrary integral dimensions for our application in this paper.\nWe give a few examples of the Haar matrices we introduced in Definition 3.5.\nExample 3.3. We have\nH4 =   1/2 1/2 1/2 1/2 1/2 1/2 −1/2 −1/2 1/ √ 2 −1/ √ 2 0 0\n0 0 1/ √ 2 −1/ √ 2\n \nand\nH7 =   1/ √ 7 1/ √ 7 1/ √ 7 1/ √ 7 1/ √ 7 1/ √ 7 1/ √ 7 2/ √ 21 2/ √ 21 2/ √ 21 − √ 21/14 − √ 21/14 − √ 21/14 − √ 21/14√ 2/ √ 3 − √ 2/(2 √ 3) − √ 2/(2 √ 3) 0 0 0 0 0 1/ √ 2 −1/ √ 2 0 0 0 0 0 0 0 1/2 1/2 −1/2 −1/2 0 0 0 1/ √ 2 −1/ √ 2 0 0\n0 0 0 0 0 1/ √ 2 −1/ √ 2\n \nIt is easy to verify that\nLemma 3.4. For every n, HTnHn = HnH T n = I, so Hn is a unitary matrix.\nDefinition 3.5. Given a clustering [n] = S1 ∪ · · · ∪ Ss, define the following cluster-based Haar transformation Hcl ∈ Rn that is a block diagonal matrix:\nHcl =   H|S1| 0 0 · · · 0 0 0 H|S2| 0 · · · 0 0 ... ... . . .\n... 0 0 0 · · · 0 H|Ss|\n  .\nAccordingly, we apply the unitary transformation Hcl on (3.2) and consider\nmin y′∈Rn\n{ D′(y′) def= 1\n2n ‖y′‖2 + 1 n 〈y′, Hcll〉+ r∗ ( − 1 n AHTcl y ′)} . (3.3)\nWe call D′(y′) the transformed objective function.\nIt is clear that the minimization problem (3.3) is equivalent to (3.2) by making transformation y = HTcl y\n′. Our ClusterACDM algorithm now simply applies ACDM on minimizing this transformed objective D′(y′).\nHigh-Level Intuition. To see why cluster-based Haar transformation is helpful, let us focus on one cluster c ∈ [s]. Assume without loss of generality that this cluster has feature vectors a1, a2, · · · , anc . After applying the Haar transformation on this cluster, the new columns 1, 2, . . . , nc of matrix AHTcl become weighted combinations of a1, a2, · · · , anc , and the weights are determined by the entries in the corresponding row of Hnc .\nObserve that every row except the first one in Hnc has its entries sum up to 0. Therefore, columns 2, . . . , nc in AH T cl will be close to zero vectors and have small norms. In contrast, since the\nfirst row in Hnc has all entries equal to 1/ √ nc, the first column of AH T cl becomes √ nc · a1+···+ancnc , the scaled average of all vectors in this cluster. It has a large Euclidean norm. See the following illustration: [\na1, a2, . . . , anc ] Hnc = [√ nc ·\na1 + · · ·+ anc nc\n, ≈ 0, · · · ,≈ 0 ]\nThe first column after Haar transformation can be seen as an auxiliary feature vector representing the entire cluster. If we runs ACDM with respect to this new matrix, and whenever an auxiliary column is selected, it represents “moving in the average direction of all vectors in this cluster”. Of course, this single auxiliary column cannot represent the entire cluster, and therefore the remaining nc − 1 columns serve as helpers that ensure that the algorithm is unbiased (i.e., it converges to the exact minimizer).\nMost importantly, ACDM is a stochastic method that samples a feature vector with a probability roughly proportional to its Euclidean norm. Thus, we expect the auxiliary vector to be sampled with probability much larger 1/n. This intuition can be formalized as the following theorem:\nTheorem 3.6. Given an (s, δ) raw clustering on vectors, ClusterACDM converges to an ε-approximate minimizer of D′(·) (thus an ε-approximate minimizer of D(·)) in T = O ( n + max{ √ s, √ δn}√\nλ\n) itera-\ntions, each costing O(d) time.\nComparing this to the complexity of APCG, ACDM, or AccSDCA (see Section 3.1), ClusterACDM is faster by a factor that is at least Ω ( min{ √ n/s, √ 1/δ} ) for small λ > 0. Detailed analysis can be found in the following subsections."
    }, {
      "heading" : "3.3 Proof Details",
      "text" : "The following statement is a simple corollary of Lemma 3.1 on the transformed objective:\nCorollary 3.7. Letting b1, . . . , bn ∈ Rd be the column vectors of AHT , then the transformed objective D′(·) is coordinate-wise smooth with parameters (L′1, . . . , L′n) for L′i = 1n + 1λn2 ‖bi‖2.\nWe are now ready to relate the smoothness parameters of the transformed objective to how good a raw clustering is. Suppose that ‖a1‖2 = · · · ‖an‖2 = 1 for the sake of simplicity.6 We consider the following definition of raw clustering:\nDefinition 3.8 (raw clustering on vectors). We say that a partition S = S1 ∪ · · · ∪ Ss is a (s, δ) raw clustering, if for every cluster c, it satisfies that 1‖Sc‖2 ∑ i,j∈Sc〈ai, aj〉 ≥ 1− δ 2 . In other words, in average, the pairwise inner products of features vectors in each cluster Sc are at least 1− δ2 .\nSince ‖ai − aj‖2 = 2 − 2〈ai, aj〉, the above definition is equivalent to Definition 2.1. It implies the following property on the coordinate smoothness of the transformed objective:\nLemma 3.9. If the transformed objective is built on a (s, δ) raw clustering, then it satisfies\n∑\ni∈[n]\n√ L′i ≤ √ n+ √ c/n+ δ/2√\nλ\nProof. For each cluster c ∈ [s], recall that the first row of the Haar matrix Hnc is all 1/ √ nc. Let ic ∈ [n] be the index of this first row in our matrix H for each cluster c, which are “important” indices. Since bic is the i-th column vector of AH T = [a1, . . . , an]H T , we have\nbic = 1√ nc\n∑ j∈Sc aj .\n6We remark here that in some machine learning applications, the feature vectors are already normalized so this already holds. If not, one can treat vectors with different magnitudes of norms separately and perform raw clustering.\nTherefore, we have ‖bic‖2 = 1nc ∑\nj1,j2∈Sc〈aj1 , aj2〉 ≥ (1 − δ/2)nc due to our definition of the (s, δ) raw clustering. Summing them up, we have\n∑\ni∈{i1,...,is} ‖bi‖2 ≥\n( 1− δ/2 ) n\nand we define δ′ ≤ δ to be the parameter that satisfies ∑i∈{i1,...,is} ‖bi‖2 = (1− δ′ 2 )n.\nNow we compute the summation of √ L′i by dividing indices into important indices i1, i2, . . . , is\nand others. We first sum them up for important indices:\n∑\ni∈{i1,...,is}\n√ L′i ≤ √ s · ( ∑ i∈{i1,...,is} L′i )1/2 = √ s · ( s n + (1− δ′2 )n λn2 )1/2\nOn the other hand, for non-important indices, we have\n∑\ni 6∈{i1,...,is}\n√ L′i ≤ √ n− s · ( ∑ i 6∈{i1,...,is} L′i )1/2 = √ n− s · (n− s n + δ′n 2λn2 )1/2\nTogether, we have\n∑\ni∈[n]\n√ L′i ≤ √ s · √ s n + √ n− s · √ n− s n + √ s · √ 1− δ′2 λn + √ n− s · √ δ′ 2λn ≤ √n+ √ s/n+ δ/2√ λ .\nFinally, using the fact that D′(·) is σ = 1n strongly convex, we can apply Theorem 2.4 and deduce Theorem 3.6."
    }, {
      "heading" : "4 ClusterSVRG Algorithm",
      "text" : "Consider the following composite convex minimization:\nmin x∈Rd\n{ F (x) def = f(x) + Ψ(x) def = 1\nn\nn∑\ni=1\nfi(x) + Ψ(x) } . (4.1)\nHere, f(x) = 1n ∑n\ni=1 fi(x) is the finite average of n functions, each fi(x) is convex and L-smooth, and Ψ(x) is a simple (but possibly non-differentiable) convex function, sometimes called the proximal function. We denote x∗ as a minimizer of (4.1).\nThis setting is studied by many stochastic gradient methods including SVRG, and captures all known empirical risk minimization problems such as Lasso and ridge regression."
    }, {
      "heading" : "4.1 Previous Solutions",
      "text" : "As illustrated in the introduction, variance-reduction based stochastic gradient methods iteratively perform the following update\nxt = arg min x { 1 2η ‖x− xt−1‖2 + 〈∇̃t−1, x〉+ Ψ(x) } ,\nwhere ∇̃t−1 is the so-called gradient estimator and usually its expectation has to equal to the full gradient ∇f(xt−1) in order to make the algorithm unbiased. The central idea behind all such methods is to ensure that the variance Var[∇̃t−1] decreases quickly.\nIn particular, SVRG has an outer loop of epochs, where at the beginning of each epoch, SVRG records the position of the current iterate x as the snapshot point x̃,7and computes its full gradient ∇f(x̃). Each epoch consists of m inner iterations, and in each inner iteration, SVRG picks a random i and defines the gradient estimator\n∇̃t−1SVRG def =\n1\nn\nn∑\nj=1\n∇fj(x̃) +∇fi(xt−1)−∇fi(x̃) . (4.2)\nSAGA works differently from SVRG. It maintains a table of n vectors that stores the gradient ∇fi(φi) at position φi for each i ∈ [n]. In each iteration t, SAGA picks a random i and define\n∇̃t−1SAGA def =\n1\nn\nn∑\nj=1\n∇fj(φj) +∇fi(xt−1)−∇fi(φi) .\nAfter updating xt using this estimator, SAGA records this new position φi ← xt−1 and update the corresponding ∇fi(φi) in the table."
    }, {
      "heading" : "4.2 Our New Algorithm",
      "text" : "Our ClusterSVRG computes the gradient estimator ∇̃ based on the clustering information. Given a clustering [n] = S1 ∪ · · · ∪ Ss, we denote by ci ∈ [s] is the cluster that index i belongs to. Using the same snapshot notation x̃ as SVRG, we define\n∇̃t−1 def= 1 n\nn∑\nj=1\n( ∇fj(x̃) + ζcj ) +∇fi(xt−1)− ( ∇fi(x̃) + ζci ) (4.3)\nAbove, i is chosen uniformly at random from [n], and for each cluster c, we introduce an additional ζc that we shall define shortly. The existence of ζc for different clusters makes our ∇̃t−1 different from ∇̃t−1SVRG. However, if there were only one cluster, then ∇̃t−1 would be identical to ∇̃t−1SVRG no matter how ζc is defined.\nBefore defining ζc, we note that Ei[ζci ] = ∑s c=1 nc n ζc = ∑n j=1 ζcj n and therefore our estimator is unbiased: that is, Ei[∇̃t−1] = ∇f(xt−1). Similar to SVRG, we propose two slightly different definitions for ζc, and call them Option I and Option II. In both options, we initialize ζc = 0 at the beginning of the epoch.\n• In Option I, after each iteration t is completed and suppose i is the random index chosen at iteration t, we update ζci ← ∇fi(xt−1)−∇fi(x̃).\n• In Option II, we divide an epoch of length m into subepochs of length s. At the beginning of each subepoch, for each cluster c ∈ [s], we define ζc ← ∇fj(x) −∇fj(x̃). Here, x is the last iterate of the previous subepoch and j is a random index in Sc.\nWe summarize both options in Algorithm 2.\nHigh Level Intuition. In the estimator ∇̃t−1SVRG, each ∇fj(x̃) intuitively serves as a “rough guess” of the gradient ∇fj(xt−1) with respect to the iterate xt−1. However, this guess may be quite\n7More precisely, SVRG provides two options, one defining x̃ as the average iterates of the previous epoch, and the other defining x̃ to be the last iterate of the previous epoch.\nAlgorithm 2 ClusterSVRG Input: Epoch length m and learning rate η, a raw clustering S1 ∪ · · · ∪ Ss. 1: x0, x← initial point, t← 0. 2: for epoch← 0 to MaxEpoch do 3: x̃← xt, and (ζ1, . . . , ζs)← (0, . . . , 0) 4: for iter← 1 to m do 5: t← t+ 1 and choose i uniformly at random from {1, · · · , n} 6: xt ← xt−1 − η ( 1 n ∑n j=1 ( ∇fj(x̃) + ζcj ) +∇fi(xt−1)− ( ∇fi(x̃) + ζci ))\n7: Option I: ζci ← ∇fi(xt−1)−∇fi(x̃) 8: Option II: if iter mod s = 0 then for all c = 1, . . . , s, 9: ζc ← ∇fj(xt−1)−∇fj(x̃) where j is randomly chosen from Sc.\n10: end for 11: end for\ndifferent from ∇fj(xt−1) because at most m iterations may have passed between x̃ and xt−1. In this case, we say ∇fj(x̃) has an outdatedness of O(m). Since the epoch length m is usually of the same magnitude as n [13], this outdatedness may be very large. Our newly introduced ζc, as a cluster-dependent correction term, will help us decrease this outdatedness.\nMore specifically, in Option I, define lt(c) to be the most recent time t when any index i in cluster Sc was randomly chosen, and define li(c) to be this index i. Then, we can write\nζc = ∇fli(c)(xlt(c))−∇fli(c)(x̃) .\nUnder this notation, we claim that ∇fj(x̃) + ζcj is a better guess of ∇fj(xt−1) comparing to ∇fj(x̃). Indeed, if all the gradients ∇fk(x) for k ∈ Scj are close enough (which follows from the raw clustering definition in Definition 2.2), then ∇fj(x̃) ≈ ∇fli(c)(x̃) and therefore\n∇fj(x̃) + ζcj = ∇fj(x̃) +∇fli(c)(xlt(c))−∇fli(c)(x̃) ≈ ∇fli(c)(xlt(c)) ≈ ∇fj(xlt(c)) .\nHere, the right hand side ∇fj(xlt(c)) has only an outdatedness of t− lt(c) compared with ∇fj(xt−1), and t − lt(c) can be as small as s if all the s clusters are of equal size. In sum, this smaller outdatedness implies that our choice of ∇̃t−1 is a better estimator of the full gradient.\nCompared with Option I which updates ζc incrementally, our Option II can be seen as a batchupdate version. An almost identical argument from the one above implies ∇fj(x̃) + ζcj in Option II is a guess of ∇fj(xt−1) with outdatedness at most s, because x and xt−1 differ by at most s iterations. This is simpler to analyze because in Option I, the outdatedness is at most s only when the clusters are of equal size. For the sake of cleanness, in this paper we only provide theoretical proofs for Option II. From an efficiency perspective, Option I is preferred in practice because it only needs one stochastic gradient computation per iteration where Option II needs two in the amortized sense.\nFull analysis of ClusterSVRG can be found in in the rest of this section."
    }, {
      "heading" : "4.3 Convergence Analysis",
      "text" : "We now formalize the high level intuitions provided in Section 4.2. We make the following assumption in this section:\nAssumption 4.1. We assume that in each epoch of ClusterSVRG, between two consecutive iterations t− 1 and t, it always satisfies ‖xt−1 − xt‖2 ≤ ξ.\nNote that this is a reasonable assumption because in most interesting applications the gradients are bounded. Under this assumption, we have the following measurement of the outdatedness:\nClaim 4.2 (Outdatedness). (a) For every i ∈ [n], it satisfies ‖∇fi(x)−∇fi(xt−1)‖2 ≤ L2s2ξ. (b) Given any (s, σ) raw clustering of the functions, for indices i and j that are randomly selected\nfrom the same cluster Sc, it satisfies Ei,j [ ‖∇fi(x)−∇fj(xt−1)‖2 ] ≤ 2σ + 2L2s2ξ.\nThe above claim captures the “outdatedness” parameter that we discussed before. Indeed, since x and xt−1 can be at most s iterations apart, the gradient ∇fi(x) is outdated from ∇fi(xt−1) by at most s iterations. However, knowing only the number of iterations it remains difficult to measure the actual distance ‖∇fi(x) − ∇fi(xt−1)‖2. In Claim 4.2.a, we simply use the smoothness of the function fi(·) to provide a very loose upper bound on this distance, which turns out to be already quite useful when providing a theoretical comparison between ClusterSVRG and SVRG later in this section. In addition, Claim 4.2.b simply combines Claim 4.2.a with the σ-rawness of the given clustering. A formal proof is as follows.\nProof of Claim 4.2. The first half of the claim follows from\n‖∇fi(x)−∇fi(xt−1)‖2 ≤ L2‖x− xt−1‖2 ≤ L2s2ξ2 .\nAbove, the first inequality is due to the smoothness of function fi(·), and the second inequality is because there are at most s iterations between x and xt−1.\nTo prove the second half, we compute that\nE[‖∇fi(x)−∇fj(xt−1)‖2] = E[‖∇fi(x)−∇fj(x) +∇fj(x)−∇fj(xt−1)‖2]\n≤ 2E[‖∇fi(x)−∇fj(x)‖2] + 2E[‖∇fj(x)−∇fj(xt−1)‖2]\n≤ 2σ + 2L2s2ξ . We are now ready to state the main lemma of this section. It requires a few careful applications\nof Claim 4.2, and we defer its proof to Appendix B.\nLemma 4.3 (Variance of ClusterSVRG). In ClusterSVRG with Option II, if a (s, σ) raw clustering on the functions is provided and Assumption 4.1 is satisfied, then we have the following upper bound on the variance of the gradient estimator at iteration t:\nE[Vari[∇̃t−1]] = E [∥∥∇̃t−1 −∇f(xt−1) ∥∥2] ≤ O ( σ + L2s2ξ ) . (UB1)\nWhere the expectation is over all the randomness in the current epoch. In addition, we also have\nE[Vari[∇̃t−1]] ≤ O(L) · E [( f(x̃)− f(x∗) ) + ( f(x)− f(x∗) ) + ( f(xt−1)− f(x∗) )] . (UB2)\nWe compare our main lemma to its counterpart for SVRG:\nLemma 4.4 (Variance of SVRG). In SVRG, we have the following upper bound on the variance of the gradient estimator at iteration t:\nE[Vari[∇̃t−1]] = E [∥∥∇̃t−1 −∇f(xt−1) ∥∥2] ≤ O ( L2m2ξ ) . (UB1’)\nIn addition, we also have\nE[Vari[∇̃t−1]] ≤ O(L) · E [( f(xt−1)− f(x∗) ) + ( f(x̃)− f(x∗) )] (UB2’)\nProof. The proof for (UB2’) can be found on page 6 of [13]. The proof for (UB1’) is almost identical to that for (UB1).\nFollowing the main intuition behind all the variance-reduction methods, we know that a stochastic gradient method converges faster if the variance of the gradient estimator ∇̃t−1 is small. It is easy to see that (UB1) is a better upper bound than (UB1’) if an (s, σ) raw clustering is provided, and at the same time our (UB2) has the same form as (UB2’). Therefore, the variance of the gradient estimator in ClusterSVRG is better than that in SVRG.\nFor interested readers, we compare these upper bounds more carefully in the next subsection."
    }, {
      "heading" : "4.4 Discussion",
      "text" : "Upper bounds (UB2) and (UB2’) are smaller than (UB1) and (UB1’) respectively for large iterations t, because our objective value f(x) approaches to f(x∗) as t increases. For this reason, they are better choices in order to obtain an asymptotic worst-case running time.\nFor instance, if only (UB2’) is used in the analysis, Johnson and Zhang [13] showed that for σ-strongly convex objectives F (x) in (4.1), by setting m = L/σ, the SVRG method converges to an ε-approximate minimizer of F (x) in T = O((n+ Lσ ) log(1/ε)) iterations. This matches the best known running time performance for non-accelerated methods on solving (4.1). For ClusterSVRG, using (UB2) and an analogous analysis to [13], it matches the worst case running time of SVRG.\nIn contrast, in the first a few epochs of the algorithm, we expect (UB1) and (UB1’) to be smaller than (UB2) and (UB2’) respectively, thus providing tighter upper bounds on the variance. For this reason, if σ is relatively small, because L2s2ξ is significantly smaller than L2m2ξ, we expect ClusterSVRG to have a much smaller variance than SVRG in the first a few epochs, thus outperform SVRG. Such outperforance is indeed observed in our experiment in Section 5. Interpolation Between SVRG and SAGA. When every index i is itself a cluster Si = {i}, and if we choose m =∞ so there is only one epoch, ClusterSVRG with Option I reduces to SAGA, because ∇fj(x̃) + ζcj becomes exactly ∇fj(lt(j)) where lt(j) is the last time index j was chosen. In this case, it is not necessary to compute snapshots anymore. Also, recall that if there is only one cluster S1 = [n], our ClusterSVRG is identical to SVRG by comparing (4.3) with (4.2).\nIn sum, SAGA and SVRG are two extreme variants of ClusterSVRG. Our experiments in Section 5 confirm that SVRG outperforms SAGA when the data points are well clustered and vice versa."
    }, {
      "heading" : "5 Experiments",
      "text" : "We conduct experiments for three datasets that can be found on the LibSVM website [8]: Covtype.binary, SensIT (combined scale), and News20.binary. To make easier comparison across datasets, we scale every vector by the average Euclidean norm of all the vectors, ensuring that the data vectors have an average Euclidean norm 1. This step is for comparison only and not necessary in practice. Note that Covtype and SensIT are two datasets where the feature vectors have a nice clustering structure; in contrast, dataset News20 cannot be well clustered and we include it for comparison purpose."
    }, {
      "heading" : "5.1 Clustering and Haar Transformation",
      "text" : "We use the existing approximate nearest neighbor algorithm LSH [2] to compute raw clusterings, and include our implementation in Section 5.1.1.\nThe running time needed for our raw clustering algorithm is reasonable. (In Table 1, we list the average running time of clustering with δ = 0.05, 0.10, 0.15, · · · , 2.00, as well as the one-pass running time of SAGA using sparse implementation.) To sum up, the clustering time is about the same as SAGA performing 5 passes on the datasets for Covtype and SensIT, and 38 passes for News20. Clustering on News20 is slower because it does not have a nice clustering structure so our implementation Algorithm 3 keeps inserting new clusters.8\nWe view the time needed for clustering as negligible: in real-life applications, one only needs to compute clustering once, and this additional cost is usually amortized over multiple runs of the training algorithm due to different data analysis tasks, parameter tunings, etc. Even if there were only one run of the training algorithm, our new algorithms are usually faster than known ones by more than 10 passes of the dataset (see Figure 1 later), a speed-up that is faster than the clustering time alone!\nAlso, in ClusterACDM, we need to preprocess and compute the matrix AHTcl using Haar transformation. This matrix multiplication can be efficiently implemented thanks to the sparsity of Haar matrices. In Table 2, we see that the time needed to do so roughly 2 passes of the dataset for the 9 test cases we are considering in the subsequent subsections."
    }, {
      "heading" : "5.1.1 Our Particular Clustering Algorithm",
      "text" : "Let FindNearestNeighbor(v,DB,R) be an oracle that outputs, with high probability, a close neighbor of v with distance at most R in the set DB. Then, given n data vectors a1, . . . , an, we iteratively call FindNearestNeighbor(ai, DB,R) for each i = 1, 2, . . . , n. If FindNearestNeighbor outputs a neighbor, we add ai into the corresponding cluster of that neighbor; otherwise we create a new cluster that only contains ai. See Algorithm 3.\nThere are many fast nearest neighbor algorithms, such as LSH [2] and product quantization [10, 12]. In our experiments, we use E2LSH package [2], with small modification to make it support sparse vectors. There are three parameters that we need to set for E2LSH (for other parameters we set to the default). The first parameter is the radius R. R controls the size of a cluster and\n8Recall that we anyways include News20 in our experiment only for comparison purpose.\nAlgorithm 3 Compute a Raw Clustering Input: n data samples a1, · · · , an. 1: DB ← {}. 2: for i← 1 to n do 3: aj ← FindNearestNeighbor(ai, DB,R) 4: if aj exists then 5: add ai into the cluster of aj 6: else 7: add ai into DB as a new cluster 8: end if 9: end for\nthere will be fewer clusters when R gets larger. In our experiment, we enumerate R to get a series of different clusterings to test the performance of our algorithms. The second and third parameters are K, the size of each hash function and L, the number of hash functions. These two parameters control the accuracy of the oracle. In [3], it is described how to select good K and L to make the program run faster. Since we only need raw clustering in this paper, it is not a big deal if we miss some true neighbors. We simply set K = 12 and L = 30 for all the datasets.\nRemarks. One can of course get faster clustering time using algorithms other than LSH, or using pre-existing clustering information. This is out of the scope of the present paper. Also, in Algorithm 3, we have ensured that there is no outlier in the raw clustering we found. However, both ClusterSVRG and ClusterACDM are robust against a few outliers, see Section 2."
    }, {
      "heading" : "5.2 Performance Comparison",
      "text" : "We compare our new algorithms with SVRG, SAGA, and ACDM. We use the default setting m = 2n with Option I for SVRG, and m = 2n with Option I for ClusterSVRG. We consider both ridge regression and Lasso regression, and denote by λ > 0 the weight of the `2 regularizer for ridge regression or that of the `1 regularizer for Lasso. Prameters. For both SVRG and SAGA, we tune the best step size for each test case.9 To make our comparison even stronger, instead of tuning the best step size for ClusterSVRG, we simply set it to be either the best of SVRG or the best of SAGA in each test case. For ACDM and ClusterACDM, the step size is computed automatically so tuning is unnecessary.\nFor the Lasso problem, because the objective is not strongly convex, one has to add a dummy `2 regularizer on the objective in order to run ACDM or ClusterACDM. (In fact, this step is needed for every accelerated method including AccSDCA, APCG or SPDC.) We simply choose this dummy regularizer to have weight 10−7 for Covtype and SenseIT, and weight 10−6 for News20.\nLegend Format. In the legend, we use the format\n• “ClusterSVRG–s–δ–stepsize” for ClusterSVRG,\n• “ClusterACDM–s–δ” for ClusterACDM.\n• “SVRG/SAGA–stepsize” for SVRG or SAGA.\n• “ACDM (no Cluster)” for the vanilla ACDM without using any clustering info.10\nResults. Our comprehensive experimental plots are included only in the appendix, and here in the main body of the paper, we simply compare all the algorithms on training ride regression for datasets SensIT and Covtype by choosing only one representative clustering, see Figure 1.\nGenerally, ClusterSVRG outperforms SAGA/SVRG when the regularizing parameter λ is large.11\nClusterACDM outperforms all other algorithms when the regularizing parameter λ is small. This is because accelerated methods outperform non-accelerated ones with smaller values of λ (see (1.1)), and the complexity of ClusterACDM outperforms ACDM more when λ is smaller (compare (1.1) with (1.2)).12\nIn the appendix, we pick three most representative (s, δ)-raw clusterings and perform both Lasso and ridge regression for each dataset. We compare ClusterSVRG with SVRG and SAGA on datasets Covtype (see Figure 3), SensIT (see Figure 5), and News20 (see Figure 7). We compare ClusterACDM with SVRG, SAGA and ACDM on datasets Covtype (see Figure 4), SensIT (see Figure 6), and News20 (see Figure 8). We summarize some of the findings that can be observed from these plots as follows.\nFirstly, dataset News20 does not have a nice clustering structure and therefore ClusterSVRG and ClusterACDM do not outperform their classical counterparts SVRG and ACDM respectively.\n9We tune the best step size in the set {3× 10k, 10k : k ∈ Z} for each dataset, for each training problem, and for each λ.\n10ACDM has the same worst-case performance compared with APCG or SPDC (see [1]). Moreover, ACDM supports the non-uniform sampling that is needed in order to obtain the result of ClusterACDM. In our experiments, to make a fair comparison, instead of comparing ClusterACDM with APCG or SPDC, we simply compare it with ACDM that is implemented in the same manner as ClusterACDM.\n11This is because for a better regularized objective, the updates between consecutive iterates are smaller. Therefore, the ξ parameter in Assumption 4.1 is smaller, and (UB1) dominates (UB2) for a longer time in Lemma 4.3.\n12Of course, the best choice of λ usually depends on the dataset, and this requires cross-validation. For instance, by performing a 10-fold cross validation on SensIT and Covtype, one can figure out that the best choice of λ is around 10−6 for SensIT Ridge, 10−5 for SensIT Lasso, 10−7 for Covtype Ridge, and 10−6 for Covtype Lasso. Therefore, at least for these two data sets, ClusterACDM is preferred.\nHowever, our methods still perform comparably well in such cases. Secondly, the performance of ClusterSVRG is slightly better with clustering that has smaller diameter δ. In contrast, ClusterACDM with larger δ performs slightly better. This is because ClusterACDM can take advantage of very large but low-quality clusters, and this is a very appealing feature in practice. Thirdly, SensIT is a dataset where all feature vectors are close in space. In this case, SVRG performs very well because it implicitly treats all the vectors as a single cluster, as discussed in the introduction."
    }, {
      "heading" : "5.3 Sensitivity on the Clustering Information",
      "text" : "In Figure 2, we plot the performance curves of ClusterSVRG and ClusterACDM for SensIT and Covtype, with 7 different clusterings.\nFrom the plots we claim that ClusterSVRG and ClusterACDM are very insensitive to the clustering quality. As long as one does not choose the most extreme clustering, the performance improvement due to clustering can be significant. Moreover, ClusterSVRG is slightly faster if the clustering has relatively smaller diameter δ (say, below 0.1), while the ClusterACDM can be fast even for very large δ (say, around 0.6)."
    }, {
      "heading" : "Acknowledgement",
      "text" : "We thank Jinyang Gao for fruitful discussions."
    }, {
      "heading" : "A Missing Experimental Figures",
      "text" : ""
    }, {
      "heading" : "B Proof of Lemma 4.3",
      "text" : "First half of Lemma 4.3. We first prove inequality (UB1), the first half of Lemma 4.3. Suppose that i ∈ Sc so the random index i belongs to the c-th cluster. In this case, we can rewrite\n∇̃t−1 −∇f(xt−1)\n= 1\nn\nn∑\nj=1\n( ∇fj(x̃) + ζcj ) +∇fi(xt−1)−∇fi(x̃)− ζci −∇f(xt−1)\n= 1\nn\n∑\nj∈[n]\\Sc\n( ∇fj(x̃) + ζcj −∇fj(xt−1) )\n+ 1\nn\n∑\nj∈Sc\n( ∇fj(x̃) + ζcj −∇fj(xt−1) ) +∇fi(xt−1)−∇fi(x̃)− ζci\n= 1\nn\n∑\nc′ 6=c\n∑\nj∈Sc′\n( ∇fj(x̃) + ζc′ −∇fj(xt−1) ) + n− nc n ( ∇fi(x̃)− ζc − fi(xt−1) )\n+ 1\nn\n∑\nj∈Sc\n( ∇fj(x̃)−∇fi(x̃) ) + 1\nn\n∑\nj∈Sc\n( ∇fi(xt−1)−∇fj(xt−1) ) .\nTherefore, conditioning on that i belongs to Sc, we can upper bound the variance as follows:\nE [∥∥∥∇̃t−1 −∇f(xt−1) ∥∥∥ 2 ∣∣∣∣i ∈ Sc ]\n≤ 4E [∥∥∥ 1 n ∑\nc′ 6=c\n∑\nj∈Sc′\n( ∇fj(x̃) + ζc′ −∇fj(xt−1) )∥∥∥ 2 ]\n︸ ︷︷ ︸ (♠)\n+4E [∥∥∥n− nc\nn\n( ∇fi(x̃)− ζc − fi(xt−1) )∥∥∥ 2 ∣∣∣∣i ∈ Sc ]\n︸ ︷︷ ︸ (♥)\n+ 4E [∥∥∥ 1 n ∑\nj∈Sc\n( ∇fj(x̃)−∇fi(x̃) )∥∥∥ 2 ∣∣∣∣i ∈ Sc ]\n︸ ︷︷ ︸ (♣)\n+4E [∥∥∥ 1 n ∑\nj∈Sc\n( ∇fi(xt−1)−∇fj(xt−1) )∥∥∥ 2 ∣∣∣∣i ∈ Sc ]\n︸ ︷︷ ︸ (♦)\n.\n(B.1)\nAbove, the inequality is because for every q vectors v1, . . . , vq, it satisfies ∥∥∑q\nk=1 vk ∥∥2 ≤ q∑qk=1 ‖vk‖2 . (B.2)\nNow, the definition of σ raw clustering on functions immediately imply that (♣) = E [∥∥∥ 1 n ∑\nj∈Sc\n( ∇fj(x̃)−∇fi(x̃) )∥∥∥ 2 ∣∣∣∣i ∈ Sc ] ≤ n 2 c\nn2 Ei,j∈RSc\n[ ‖∇fi(x̃)−∇fj(x̃)‖2 ] ≤ n 2 c\nn2 σ .\nAbove, the first inequality follows from (B.2). Similarly, we also have\n(♦) = E [∥∥∥ 1 n ∑\nj∈Sc\n( ∇fi(xt−1)−∇fj(xt−1) )∥∥∥ 2 ∣∣∣∣i ∈ Sc ] ≤ n 2 c\nn2 σ .\nTo upper bound the other two terms in (B.1), we first compute that\n(♥) = (n− nc) 2\nn2 Ei,k∈RSc\n[∥∥(∇fi(x̃)−∇fk(x̃) ) − ( ∇fi(xt−1)−∇fk(x) )∥∥2 ]\n≤ 2(n− nc) 2\nn2\n( Ei,k∈RSc [∥∥∇fi(x̃)−∇fk(x̃) ∥∥2 ] + Ei,k∈RSc [∥∥∇fi(xt−1)−∇fk(x) ∥∥2 ])\n≤ O ( σ + L2s2ξ ) .\nHere, the last inequality uses Claim 4.2. Similarly, we can compute that\n(♠) ¬ ≤ n− nc n2 E [∑\nc′ 6=c\n∑\nj∈Sc′\n∥∥∥∇fj(x̃) + ζc′ −∇fj(xt−1) ∥∥∥ 2 ]\n= n− nc n2\n∑ c′ 6=c nc′ · Ej,k∈RSc′ [∥∥∥ ( ∇fj(x̃)−∇fk(x̃) ) − ( ∇fj(xt−1)−∇fk(x) )∥∥∥ 2 ]\n≤ 2(n− nc) n2\n∑ c′ 6=c nc′ · Ej,k∈RSc′ [∥∥∇fj(x̃)−∇fk(x̃) )∥∥2 + ∥∥∇fj(xt−1)−∇fk(x) ∥∥2 ]\n ≤ O ( σ + L2s2ξ ) .\nAbove, ¬ uses inequality (B.2), and  uses Claim 4.2. Substituting all of the four upper bound back to inequality (B.1), we immediately have that\nE [∥∥∥∇̃t−1 −∇f(xt−1) ∥∥∥ 2 ∣∣∣∣i ∈ Sc ] ≤ O ( (♠) + (♥) + (♣) + (♦) ) = O ( σ + 2L2s2ξ ) .\nTaking expectation over all possible c = 1, 2, . . . , s, we get our desired upper bound.\nSecond half of Lemma 4.3. We now prove inequality (UB2), the second half of Lemma 4.3. This time, we rewrite\n∇̃t−1 −∇f(xt−1)\n= 1\nn\nn∑\nj=1\n( ∇fj(x̃) + ζcj ) +∇fi(xt−1)−∇fi(x̃)− ζci −∇f(xt−1)\n= ( f(x̃)− f(xt−1) ) + ( ∇fi(xt−1)−∇fi(x̃) ) − ζci + 1\nn\ns∑\nc′=1\nnc′ζc′ ,\nand therefore\nE [∥∥∇̃t−1 −∇f(xt−1) ∥∥2 ]\n≤ 4E [∥∥∇f(x̃)−∇f(xt−1) ∥∥2 + ∥∥∇fi(xt−1)−∇fi(x̃) ∥∥2 + ‖ζci‖2 + ∥∥∥ 1 n s∑\nc′=1\nnc′ζc′ ∥∥∥ 2] . (B.3)\nWe next upper bound the four terms on the right hand side of (B.3). The first two terms enjoy the following simple upper bounds due to the SVRG paper [13]:\n∥∥∇f(x̃)−∇f(xt−1) ∥∥2 ¬≤ 2 ∥∥∇f(x̃)−∇f(x∗) ∥∥2 + 2 ∥∥∇f(xt−1)−∇f(x∗) ∥∥2\n ≤ 4L ( f(x̃)− f(x∗) ) + 4L ( f(xt−1)− f(x∗) ) .\nE [∥∥∇fi(xt−1)−∇fi(x̃) ∥∥2]\n® ≤ 2E [∥∥∇fi(xt−1)−∇fi(x∗) ∥∥2]+ 2E [∥∥∇fi(x̃)−∇fi(x∗) ∥∥2]\n¯ ≤ 2E [ fi(x t−1)− fi(x∗)− 〈fi(x∗), xt−1 − x∗〉 ] + 2E [ fi(x̃)− fi(x∗)− 〈fi(x∗), x̃− x∗〉 ∥∥2] = 4L · E [( f(xt−1)− f(x∗) ) + ( f(x̃)− f(x∗) )] .\nAbove, ¬ and ® follow from (B.2), while  and ¯ follow from a classical inequality for smooth functions.13\nIn fact, the other two terms can be bounded using similar ideas from the ones above. For instance,\nE [∥∥ζci ∥∥2] = E [ ‖∇fk(x)−∇fk(x̃)‖2 ∣∣ k is randomly chosen in [n] ]\n≤ 2E [∥∥∇fk(x)−∇fk(x∗) ∥∥2]+ 2E [∥∥∇fk(x̃)−∇fk(x∗) ∥∥2] ≤ 2E [ fk(x)− fk(x∗)− 〈fk(x∗), x− x∗〉 ] + 2E [ fk(x̃)− fk(x∗)− 〈fk(x∗), x̃− x∗〉 ∥∥2] = 4L · E [( f(x)− f(x∗) ) + ( f(x̃)− f(x∗) )] .\nOne can similarly prove that\nE [∥∥∥ 1 n s∑\nc′=1\nnc′ζc′ ∥∥∥ 2] ≤ O(L) · E [( f(x)− f(x∗) ) + ( f(x̃)− f(x∗) )] .\nSubstituting these upper bounds back to (B.3) concludes the proof. 13See for instance in Theorem 2.1.5 of the textbook [19]: if g is convex and L-smooth, with minimizer x∗, then for every x, y we we have ‖∇g(x)−∇g(y)‖2 ≤ 2L(g(x)− g(y)− 〈∇g(y), x− y〉)."
    } ],
    "references" : [ {
      "title" : "Even faster accelerated coordinate descent using non-uniform sampling",
      "author" : [ "Zeyuan Allen-Zhu", "Zheng Qu", "Peter Richtárik", "Yang Yuan" ],
      "venue" : "ArXiv e-prints,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2015
    }, {
      "title" : "Nearest Neighbor Search: the Old, the New, and the Impossible",
      "author" : [ "Alexandr Andoni" ],
      "venue" : "PhD thesis,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2009
    }, {
      "title" : "Stochastic gradient descent",
      "author" : [ "Léon Bottou" ],
      "venue" : "http://leon.bottou.org/projects/sgd,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2007
    }, {
      "title" : "Prediction, Learning, and Games",
      "author" : [ "Nicolo Cesa-Bianchi", "Gabor Lugosi" ],
      "venue" : null,
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2006
    }, {
      "title" : "SAGA: A Fast Incremental Gradient Method With Support for Non-Strongly Convex Composite Objectives",
      "author" : [ "Aaron Defazio", "Francis Bach", "Simon Lacoste-Julien" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2014
    }, {
      "title" : "Finito: A Faster, Permutable Incremental Gradient Method for Big Data Problems",
      "author" : [ "Aaron J. Defazio", "Tibério S. Caetano", "Justin Domke" ],
      "venue" : "In Proceedings of the 31st International Conference on Machine Learning,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2014
    }, {
      "title" : "LIBSVM Data: Classification, Regression and Multi-label",
      "author" : [ "Rong-En Fan", "Chih-Jen Lin" ],
      "venue" : null,
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2011
    }, {
      "title" : "Un-regularizing: approximate proximal point and faster stochastic algorithms for empirical risk minimization",
      "author" : [ "Roy Frostig", "Rong Ge", "Sham M. Kakade", "Aaron Sidford" ],
      "venue" : "In ICML,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2015
    }, {
      "title" : "Optimized product quantization",
      "author" : [ "Tiezheng Ge", "Kaiming He", "Qifa Ke", "Jian Sun" ],
      "venue" : "IEEE Trans. Pattern Anal. Mach. Intell.,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2014
    }, {
      "title" : "Variance reduced stochastic gradient descent with neighbors",
      "author" : [ "Thomas Hofmann", "Aurelien Lucchi", "Simon Lacoste-Julien", "Brian McWilliams" ],
      "venue" : "NIPS",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2015
    }, {
      "title" : "Product quantization for nearest neighbor search",
      "author" : [ "Hervé Jégou", "Matthijs Douze", "Cordelia Schmid" ],
      "venue" : "IEEE Trans. Pattern Anal. Mach. Intell.,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2011
    }, {
      "title" : "Accelerating stochastic gradient descent using predictive variance reduction",
      "author" : [ "Rie Johnson", "Tong Zhang" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2013
    }, {
      "title" : "Semi-Stochastic Gradient Descent Methods",
      "author" : [ "J. Konečný", "P. Richtárik" ],
      "venue" : "ArXiv e-prints,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2013
    }, {
      "title" : "Efficient accelerated coordinate descent methods and faster algorithms for solving linear systems",
      "author" : [ "Yin Tat Lee", "Aaron Sidford" ],
      "venue" : "In Foundations of Computer Science (FOCS),",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2013
    }, {
      "title" : "A Universal Catalyst for First-Order Optimization",
      "author" : [ "Hongzhou Lin", "Julien Mairal", "Zaid Harchaoui" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2015
    }, {
      "title" : "An Accelerated Proximal Coordinate Gradient Method and its Application to Regularized Empirical Risk Minimization",
      "author" : [ "Qihang Lin", "Zhaosong Lu", "Lin Xiao" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2014
    }, {
      "title" : "Incremental Majorization-Minimization Optimization with Application to Large-Scale Machine Learning",
      "author" : [ "Julien Mairal" ],
      "venue" : "SIAM Journal on Optimization,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2015
    }, {
      "title" : "Introductory Lectures on Convex Programming Volume: A Basic course, volume I",
      "author" : [ "Yurii Nesterov" ],
      "venue" : "Kluwer Academic Publishers,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2004
    }, {
      "title" : "On variance reduction in stochastic gradient descent and its asynchronous variants",
      "author" : [ "Sashank J. Reddi", "Ahmed Hefny", "Suvrit Sra", "Barnabás Póczos", "Alexander J. Smola" ],
      "venue" : null,
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2015
    }, {
      "title" : "Minimizing finite sums with the stochastic average gradient",
      "author" : [ "Mark Schmidt", "Nicolas Le Roux", "Francis Bach" ],
      "venue" : "arXiv preprint arXiv:1309.2388,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2013
    }, {
      "title" : "Proximal Stochastic Dual Coordinate Ascent",
      "author" : [ "Shai Shalev-Shwartz", "Tong Zhang" ],
      "venue" : "arXiv preprint arXiv:1211.2717,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2012
    }, {
      "title" : "Accelerated Mini-Batch Stochastic Dual Coordinate Ascent",
      "author" : [ "Shai Shalev-Shwartz", "Tong Zhang" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2013
    }, {
      "title" : "Stochastic dual coordinate ascent methods for regularized loss minimization",
      "author" : [ "Shai Shalev-Shwartz", "Tong Zhang" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2013
    }, {
      "title" : "Accelerated Proximal Stochastic Dual Coordinate Ascent for Regularized Loss Minimization",
      "author" : [ "Shai Shalev-Shwartz", "Tong Zhang" ],
      "venue" : "In Proceedings of the 31st International Conference on Machine Learning,",
      "citeRegEx" : "25",
      "shortCiteRegEx" : "25",
      "year" : 2014
    }, {
      "title" : "A Proximal Stochastic Gradient Method with Progressive Variance Reduction",
      "author" : [ "Lin Xiao", "Tong Zhang" ],
      "venue" : "SIAM Journal on Optimization,",
      "citeRegEx" : "26",
      "shortCiteRegEx" : "26",
      "year" : 2014
    }, {
      "title" : "Solving large scale linear prediction problems using stochastic gradient descent algorithms",
      "author" : [ "Tong Zhang" ],
      "venue" : "In Proceedings of the 21st International Conference on Machine Learning,",
      "citeRegEx" : "27",
      "shortCiteRegEx" : "27",
      "year" : 2004
    } ],
    "referenceMentions" : [ {
      "referenceID" : 2,
      "context" : "The original stochastic gradient descent (SGD) methods [4, 27] simply defines the estimator using one random data example but converges slowly.",
      "startOffset" : 55,
      "endOffset" : 62
    }, {
      "referenceID" : 25,
      "context" : "The original stochastic gradient descent (SGD) methods [4, 27] simply defines the estimator using one random data example but converges slowly.",
      "startOffset" : 55,
      "endOffset" : 62
    }, {
      "referenceID" : 4,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 100,
      "endOffset" : 130
    }, {
      "referenceID" : 5,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 100,
      "endOffset" : 130
    }, {
      "referenceID" : 11,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 100,
      "endOffset" : 130
    }, {
      "referenceID" : 16,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 100,
      "endOffset" : 130
    }, {
      "referenceID" : 19,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 100,
      "endOffset" : 130
    }, {
      "referenceID" : 20,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 100,
      "endOffset" : 130
    }, {
      "referenceID" : 22,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 100,
      "endOffset" : 130
    }, {
      "referenceID" : 24,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 100,
      "endOffset" : 130
    }, {
      "referenceID" : 7,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 283,
      "endOffset" : 302
    }, {
      "referenceID" : 14,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 283,
      "endOffset" : 302
    }, {
      "referenceID" : 15,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 283,
      "endOffset" : 302
    }, {
      "referenceID" : 23,
      "context" : "Recently, variance-reduction methods were introduced, which greatly improve the running time of SGD [6, 7, 13, 18, 21, 22, 24, 26], and accelerated gradient methods were also introduced to further improve the running time when the strong convexity of the objective function is small [9, 16, 17, 25, 28].",
      "startOffset" : 283,
      "endOffset" : 302
    }, {
      "referenceID" : 6,
      "context" : "As another example, although there are 581,012 data vectors in the famous Covtype dataset [8], each representing a 30m x 30m cell in the Roosevelt National Forest of northern Colorado, these feature vectors (after normalization) can be easily categorized into 1,445 clusters of diameter 0.",
      "startOffset" : 90,
      "endOffset" : 93
    }, {
      "referenceID" : 9,
      "context" : "[11], they introduced N-SAGA, the first ERM training algorithm that takes into account the similarities between data vectors.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 8,
      "context" : "• It can be computed very efficiently using approximate nearest neighbor algorithms such as LSH [2] and product quantization [10, 12], see Section 5.",
      "startOffset" : 125,
      "endOffset" : 133
    }, {
      "referenceID" : 10,
      "context" : "• It can be computed very efficiently using approximate nearest neighbor algorithms such as LSH [2] and product quantization [10, 12], see Section 5.",
      "startOffset" : 125,
      "endOffset" : 133
    }, {
      "referenceID" : 11,
      "context" : "We propose two unbiased algorithms, which we call ClusterSVRG and ClusterACDM, that make novel use of clustering information to reduce the running time of SVRG [13] and ACDM [1, 15] respectively.",
      "startOffset" : 160,
      "endOffset" : 164
    }, {
      "referenceID" : 0,
      "context" : "We propose two unbiased algorithms, which we call ClusterSVRG and ClusterACDM, that make novel use of clustering information to reduce the running time of SVRG [13] and ACDM [1, 15] respectively.",
      "startOffset" : 174,
      "endOffset" : 181
    }, {
      "referenceID" : 13,
      "context" : "We propose two unbiased algorithms, which we call ClusterSVRG and ClusterACDM, that make novel use of clustering information to reduce the running time of SVRG [13] and ACDM [1, 15] respectively.",
      "startOffset" : 174,
      "endOffset" : 181
    }, {
      "referenceID" : 11,
      "context" : "Our ClusterSVRG method is a nonaccelerated stochastic gradient method just like SVRG [13], SAGA [6], SDCA [24], etc.",
      "startOffset" : 85,
      "endOffset" : 89
    }, {
      "referenceID" : 4,
      "context" : "Our ClusterSVRG method is a nonaccelerated stochastic gradient method just like SVRG [13], SAGA [6], SDCA [24], etc.",
      "startOffset" : 96,
      "endOffset" : 99
    }, {
      "referenceID" : 22,
      "context" : "Our ClusterSVRG method is a nonaccelerated stochastic gradient method just like SVRG [13], SAGA [6], SDCA [24], etc.",
      "startOffset" : 106,
      "endOffset" : 110
    }, {
      "referenceID" : 23,
      "context" : "Our ClusterACDM method is an accelerated stochastic gradient method just like AccSDCA [25], APCG [17], ACDM [1, 15], SPDC [28], etc.",
      "startOffset" : 86,
      "endOffset" : 90
    }, {
      "referenceID" : 15,
      "context" : "Our ClusterACDM method is an accelerated stochastic gradient method just like AccSDCA [25], APCG [17], ACDM [1, 15], SPDC [28], etc.",
      "startOffset" : 97,
      "endOffset" : 101
    }, {
      "referenceID" : 0,
      "context" : "Our ClusterACDM method is an accelerated stochastic gradient method just like AccSDCA [25], APCG [17], ACDM [1, 15], SPDC [28], etc.",
      "startOffset" : 108,
      "endOffset" : 115
    }, {
      "referenceID" : 13,
      "context" : "Our ClusterACDM method is an accelerated stochastic gradient method just like AccSDCA [25], APCG [17], ACDM [1, 15], SPDC [28], etc.",
      "startOffset" : 108,
      "endOffset" : 115
    }, {
      "referenceID" : 12,
      "context" : "Recall that both non-accelerated and accelerated gradient methods have their mini-batch variants, such as mini-batch SVRG [14], mini-batch AccSDCA [23], and mini-batch SPDC [28].",
      "startOffset" : 122,
      "endOffset" : 126
    }, {
      "referenceID" : 21,
      "context" : "Recall that both non-accelerated and accelerated gradient methods have their mini-batch variants, such as mini-batch SVRG [14], mini-batch AccSDCA [23], and mini-batch SPDC [28].",
      "startOffset" : 147,
      "endOffset" : 151
    }, {
      "referenceID" : 18,
      "context" : "[20] also proposes a framework unifying SVRG and SAGA.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 7,
      "context" : "Researchers also design accelerated stochastic methods via a black-box reduction to non-accelerated ones [9, 16].",
      "startOffset" : 105,
      "endOffset" : 112
    }, {
      "referenceID" : 14,
      "context" : "Researchers also design accelerated stochastic methods via a black-box reduction to non-accelerated ones [9, 16].",
      "startOffset" : 105,
      "endOffset" : 112
    }, {
      "referenceID" : 11,
      "context" : "While our accelerated method ClusterACDM works only for regularized least-square problems in theory, our non-accelerated method ClusterSVRG, like its parent method SVRG [13], focuses on a more general stochastic setting, consisting of a set of n convex functions {f1(x), .",
      "startOffset" : 169,
      "endOffset" : 173
    }, {
      "referenceID" : 9,
      "context" : "[11].",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 0,
      "context" : ", Ln), the non-uniform accelerated coordinate descent method of [1] produces an output y satisfying f(y)−minx f(x) ≤ ε in",
      "startOffset" : 64,
      "endOffset" : 67
    }, {
      "referenceID" : 15,
      "context" : "We remark here that accelerated coordinate descent method admits several variants such as APCG [17], ACDM [15], and NU ACDM [1].",
      "startOffset" : 95,
      "endOffset" : 99
    }, {
      "referenceID" : 13,
      "context" : "We remark here that accelerated coordinate descent method admits several variants such as APCG [17], ACDM [15], and NU ACDM [1].",
      "startOffset" : 106,
      "endOffset" : 110
    }, {
      "referenceID" : 0,
      "context" : "We remark here that accelerated coordinate descent method admits several variants such as APCG [17], ACDM [15], and NU ACDM [1].",
      "startOffset" : 124,
      "endOffset" : 127
    }, {
      "referenceID" : 15,
      "context" : "1) (see for instance [17] for the detailed proof):",
      "startOffset" : 21,
      "endOffset" : 25
    }, {
      "referenceID" : 15,
      "context" : "The following lemma is due to [17] but is anyways proved for completeness’ sake.",
      "startOffset" : 30,
      "endOffset" : 34
    }, {
      "referenceID" : 3,
      "context" : "To prove the smoothness, recall that if r(·) is λ strongly convex, then r∗(·) is 1/λ smooth, or mathematically, ∇2r∗(x) 1 λI (see for instance the text book [5]).",
      "startOffset" : 157,
      "endOffset" : 160
    }, {
      "referenceID" : 15,
      "context" : "For this reason, the authors of [17] proposed to apply accelerated coordinate descent (such as their APCG method) to minimize D(y).",
      "startOffset" : 32,
      "endOffset" : 36
    }, {
      "referenceID" : 23,
      "context" : "This total running time Õ(nd + √ n/λd) matches the fastest known running time (originally obtained by AccSDCA [25]) for solving (3.",
      "startOffset" : 110,
      "endOffset" : 114
    }, {
      "referenceID" : 11,
      "context" : "Since the epoch length m is usually of the same magnitude as n [13], this outdatedness may be very large.",
      "startOffset" : 63,
      "endOffset" : 67
    }, {
      "referenceID" : 11,
      "context" : "The proof for (UB2’) can be found on page 6 of [13].",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 11,
      "context" : "For instance, if only (UB2’) is used in the analysis, Johnson and Zhang [13] showed that for σ-strongly convex objectives F (x) in (4.",
      "startOffset" : 72,
      "endOffset" : 76
    }, {
      "referenceID" : 11,
      "context" : "For ClusterSVRG, using (UB2) and an analogous analysis to [13], it matches the worst case running time of SVRG.",
      "startOffset" : 58,
      "endOffset" : 62
    }, {
      "referenceID" : 6,
      "context" : "We conduct experiments for three datasets that can be found on the LibSVM website [8]: Covtype.",
      "startOffset" : 82,
      "endOffset" : 85
    }, {
      "referenceID" : 8,
      "context" : "There are many fast nearest neighbor algorithms, such as LSH [2] and product quantization [10, 12].",
      "startOffset" : 90,
      "endOffset" : 98
    }, {
      "referenceID" : 10,
      "context" : "There are many fast nearest neighbor algorithms, such as LSH [2] and product quantization [10, 12].",
      "startOffset" : 90,
      "endOffset" : 98
    }, {
      "referenceID" : 1,
      "context" : "In [3], it is described how to select good K and L to make the program run faster.",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 0,
      "context" : "ACDM has the same worst-case performance compared with APCG or SPDC (see [1]).",
      "startOffset" : 73,
      "endOffset" : 76
    } ],
    "year" : 2017,
    "abstractText" : "The amount of data available in the world is growing faster and bigger than our ability to deal with it. However, if we take advantage of the internal structure, data may become much smaller for machine learning purposes. In this paper we focus on one of the most fundamental machine learning tasks, empirical risk minimization (ERM), and provide faster algorithms with the help from the clustering structure of the data. We introduce a simple notion of raw clustering that can be efficiently obtained with just one pass of the data, and propose two algorithms. Our variance-reduction based algorithm ClusterSVRG introduces a new gradient estimator using the clustering information, and our accelerated algorithm ClusterACDM is built on a novel Haar transformation applied to the dual space of each cluster. Our algorithms outperform their classical counterparts both in theory and practice.",
    "creator" : "LaTeX with hyperref package"
  }
}