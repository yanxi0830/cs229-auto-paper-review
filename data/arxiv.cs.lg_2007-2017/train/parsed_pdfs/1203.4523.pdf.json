{
  "name" : "1203.4523.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "On the Equivalence between Herding and Conditional Gradient Algorithms",
    "authors" : [ "Francis Bach", "Simon Lacoste-Julien", "Guillaume Obozinski" ],
    "emails" : [ "firstname.lastname@inria.fr" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n20 3.\n45 23\nv2 [\ncs .L\nG ]\n1 1\nSe p\n20 12"
    }, {
      "heading" : "1. Introduction",
      "text" : "The herding algorithm has recently been presented by Welling (2009b) as a computationally attractive alternative method for learning in intractable Markov random fields models (MRF). Instead of first estimating the parameters of the MRF by maximum likelihood / maximum entropy (which requires approximate inference to estimate the gradient of the partition function), and then sampling from the learned MRF to answer queries, herding directly generates pseudosamples in a deterministic fashion with the property of asymptotically matching the empirical moments of the data (akin to maximum entropy). The herding algorithm generates pseudo-samples xt with the following simple recursion:\nxt+1 ∈ argmax x∈X 〈wt,Φ(x)〉 wt+1 = wt + µ− Φ(xt+1),\n(1)\nAppearing in Proceedings of the 29 th International Conference on Machine Learning, Edinburgh, Scotland, UK, 2012. Copyright 2012 by the author(s)/owner(s).\nwhere X is the observation space; Φ is a feature map from X to F , which could be viewed as the vector of sufficient statistics for some exponential family, and µ is a mean vector to match (the empirical moment vector of the same family). Unlike in frequentist learning of MRFs, the parameter wt never converges to a point in herding and actually follows a “weakly chaotic” walk (Welling & Chen, 2010).\nThe herding updates can be motivated from two different perspectives. From the learning perspective, the herding updates can be derived by performing fixedstep-size subgradient ascent on the zero-temperature limit of the annealed likelihood function of the MRF— called the “tipi function” by Welling (2009b). From this perspective, herding was later generalized to MRFs with latent variables (Welling, 2009a) as well as discriminative MRFs (Gelfand et al., 2010).\nFrom the moment matching perspective, which has been explored more in details by Chen et al. (2010), the herding updates can be derived as an effective way to choose greedily pseudo-samples xt in order to quickly decrease the moment discrepancy Et .= ‖µ − 1t ∑t i=1 Φ(xi)‖ (Chen et al., 2010). Under suitable regularity conditions, Et decreases as O(1/t) for the herding updates—this is faster than i.i.d. sampling from the distribution generating µ (e.g., the training data) which would yield the slower O(1/ √ t) rate. This faster rate has been explained by negative autocorrelations amongst the pseudo-samples and was used by Chen et al. (2010) to sub-select a small collection of representative “super-samples” from a much larger set of i.i.d. samples. We make the following contributions:\n– We show that herding as described by Eq. (1) is equivalent to a specific type of conditional gradient algorithm (a.k.a. Frank-Wolfe algorithm) for the problem of estimating the mean µ. This provides a novel understanding and another explicit cost function that herding is minimizing.\n– This interpretation yields improvements, for the task of estimating means, with other faster variants of the conditional gradient algorithm, which lead to\nnon-uniform weights, one based on line-search, one based on an active-set algorithm.\n– Based on existing results from convex optimization, we extend and improve the convergence results of herding. In particular, we provide a linear convergence rate for the line-search variant in finitedimensional settings and show how the conditions assumed by Chen et al. (2010) in fact never hold in the infinite-dimensional setting.\n– We run experiments that show that algorithms which estimate faster the mean than herding generate samples that are not better (and typically worse) than the ones obtained with herding when evaluated in terms of the ability to approximate a sample with large entropy, a property which (if or when satisfied by herding) could be the basis for an interpretation of herding as a learning algorithm (Welling, 2009b)."
    }, {
      "heading" : "2. Mean estimation",
      "text" : "We start with a similar setup as Chen et al. (2010), where herding can be interpreted as a way to approximate integrals of functions in a reproducing kernel Hilbert space (RKHS). We consider a set X and a mapping Φ from X to a RKHS F . Through this mapping, all elements of F may be identified with real functions f on X defined by f(x) = 〈f,Φ(x)〉, for x ∈ X . We denote by k : (x, y) 7→ k(x, y) the associated positive definite kernel. Note that the mapping Φ may be explicit (classically in low-dimensional settings) or implicit—where the kernel trick can be used, see Section 4.3 and Chen et al. (2010).\nThroughout the paper, we assume that the data is uniformly bounded in feature space, that is, for all x ∈ X , ‖Φ(x)‖ 6 R, for some R > 0; this condition is needed for the updates of Eq. (1) to be well-defined.\nWe denote by M ⊂ F the marginal polytope (Wainwright & Jordan, 2008; Chen et al., 2010), i.e., the convex-hull of all vectors Φ(x) for x ∈ X . Note that for any f ∈ F , we have\nsup x∈X f(x) = sup g∈M\n〈f, g〉,\nand that |f(x)| = |〈f,Φ(x)〉| 6 ‖f‖R for all x ∈ X and f ∈ F (i.e., all functions with finite norm are bounded).\nExtreme points of the marginal polytope. In all the cases we consider in Section 5, it turns out that all points of the form Φ(x), x ∈ X are extreme points of M (see an illustration in Figure 1). This is indeed always true when ‖Φ(x)‖ is constant for all x ∈ X (for example for our infinite-dimensional kernels on [0, 1] in Section 5.1); it is also true if Φ(x) contains both an\ninjective feature map Φ̃(x) and its self-tensor-product\nΦ̃(x)⊗ Φ̃(x), which is the case in the graphical model examples in Section 5.2.\nMean element and expectation. We consider a fixed probability distribution p(x) over X . Following Chen et al. (2010), we denote by µ the mean element (see, e.g., Smola et al., 2007):\nµ = Ep(x)Φ(x) ∈ M.\nNote that in the learning perspective, p is the empirical distribution on the data and so µ is the corresponding empirical moment vector to match. To approximate this mean, we consider n points x1, . . . , xn ∈ X combined linearly with positive weights w1, . . . , wn that sum to one. These define p̂, the associated weighted empirical distribution, and µ̂ the approximating mean:\nµ̂ = Ep̂(x)Φ(x) = ∑n i=1 wiΦ(xi) ∈ M. (2)\nFor all functions f ∈ F , we then have\nEp(x)f(x) = Ep(x)〈f,Φ(x)〉 = 〈µ, f〉,\nand similarly Ep̂(x)f(x) = 〈µ̂, f〉. We thus get, using Cauchy-Schwarz inequality,\nsupf∈F , ‖f‖=1 |Ep(x)f(x)− Ep̂(x)f(x)| = ‖µ− µ̂‖,\nand controlling µ − µ̂ is enough to control the error in computing the expectation for all f ∈ F with finite norm. Note that a random i.i.d. sample from p(x) would lead to an expected worst-case error which is less than 4R√\nn —a classical result based on Rademacher\naverages (see, e.g. Boucheron et al., 2005).\nIn this paper, we will try to find a good estimate µ̂ of µ based on a weighted set of points from {Φ(x), x ∈ X}, generalizing Chen et al. (2010), and show how this relates to herding."
    }, {
      "heading" : "3. Related work",
      "text" : "This paper brings together three lines of work, namely the approximation of integrals, herding and convex optimization. The links between the first two were clearly outlined by Chen et al. (2010), while the present paper provides the novel interpretation of herding as a well-established convex optimization algorithm."
    }, {
      "heading" : "3.1. Quadrature/cubature formulas",
      "text" : "The evaluation of expectation, or equivalently of integrals, is a classical problem in numerical analysis. When the input space X is a compact subset of Rp and p(x) is the density of the distribution with respect to the Lebesgue measure, then this is equivalent to evaluating the integral ∫ X f(x)p(x)dx. Quadrature formulas are aimed at computing such integrals as a weighted combinations of values of f at certain points, which is exactly the problem we consider in Section 2.\nAlthough a thorough review of quadrature formulas is outside of the scope of this paper, we mention two methods which are related to our approach. First, given a positive definite kernel and a given set of points (typically sampled i.i.d. from a given distribution), the Bayes-Hermite quadrature of O’Hagan (1991) essentially computes an orthogonal projection of µ onto the affine hull of this set of points. This does not lead to positive quadrature weights, and one may thus replace the affine hull by the convex hull to obtain such nonnegative weights, which we do in our experiments in Section 5.\nMoreover, quasi-Monte Carlo methods consider sequences of so-called “quasi-random” quadrature points so that the empirical average approaches the integral. These quasi-random sequences are such that the approximation error goes down as O(1/n) (up to logarithmic terms) for functions of bounded variation, as opposed to O(1/ √ n) for a random sequence. In simulations, we used a Sobol sequence (see, e.g., Morokoff & Caflisch, 1994)."
    }, {
      "heading" : "3.2. Franke-Wolfe algorithms",
      "text" : "Given a smooth (twice continuously differentiable) convex function J on a compact convex set M with gradient J ′, Frank-Wolfe algorithms are a class of iterative optimization algorithms that only require (in addition to the computation of the gradient J ′) to be able to optimize linear functions on M. The first class of such algorithms is often referred to as conditional gradient algorithms: given an iterate gt, the minimum of 〈J ′(gt), g〉 over g ∈ M is computed, and the next iterate is taken on the segment between gt and g, i.e., gt+1 = ρtgt+(1−ρt)g, where ρt ∈ [0, 1]. There are two natural choices for ρt, (a) simply taking ρt = 1/(t+1) and (b) performing a line search to find the point in the segment with optimal value (either for J or for a quadratic upper-bound of J). These are illustrated in Figure 2, and convergence rates are detailed in Section 4.2. Moreover, for quadratic functions, the conditional gradient algorithm with step sizes ρt = 1/(t+1) has a dual interpretation as subgradient ascent (see, e.g., Bach, 2011), which we outline in Section 4.1.\nFinally, in order to minimize the number of iterations, a variant known as the minimum-norm-point algorithm will find gt+1 that minimizes J on the convex hull of all previously visited points, using a specific active-set algorithm (see Bach, 2011, Sec. 6, for details). For convex sets with finitely many extreme points, it converges in a finite number of iterations with higher (though still polynomial) iteration computational cost (Wolfe, 1976)."
    }, {
      "heading" : "4. Herding as a Frank-Wolfe algorithm",
      "text" : "To relate herding with conditional gradient algorithms, we consider the following optimization problem:\nmin g∈M\nJ(g) = 1\n2 ‖g − µ‖2, (3)\nwith the trivial unique solution µ. A conditional gradient algorithm to solve this optimization problem with stepsize ρt = 1/(t+ 1) use the iterates\nḡt+1 ∈ arg min g∈M 〈gt − µ, g〉, gt+1 = (1− ρt) gt + ρt ḡt+1. (4)\nBut these updates are exactly the same as herding via the change of variable gt = µ − wt/t. Indeed, the minimizer of a linear function of a convex set ḡt+1 can be restricted to be an extreme point of M; this implies that ḡt+1 = Φ(xt+1) for a certain xt+1. The herding updates in Eq. (1) are thus equivalent to the conditional gradient minimization of J with step size given by ρt = 1/(t+ 1).\nWith this choice of step size, we get (t + 1)gt+1 = tgt+Φ(xt+1), that is gt = 1 t ∑t u=1 Φ(xu), and we thus get uniform weights in Eq. (2).\nFor general step-sizes ρt ∈ [0, 1], if we assume that we start the algorithm with ρ0 = 1 (which implies g1 = Φ(x1)), then we get that gt = ∑t\nu=1 (∏t−1 v=u(1 −\nρv−1)ρu−1 ) Φ(xu), which thus leads to non-uniform weights in Eq. (2), though they still sum to one. The conditional gradient updates in Eq. (4) can thus be seen as a generic algorithm to obtain a weighted set of points to approximate µ, and traditional herding is the ρt = 1/(t+ 1) step-size case.\nA second choice of step-size for t ≥ 1 is to use a line search, which leads in this setting (where the global\nunconstrained minimum happens to belong to M) to ρt =\n〈gt−µ,gt−ḡt+1〉 ‖ḡt+1−gt‖2 ∈ [0, 1]. This leads to a variant of\nherding with non-uniform weights.\nWe finally comment on the initialization g0 for the updates in Eq. (4). In the kernel herding algorithm of Chen et al. (2010), the authors use w0 = µ as this is required to interpret the herding updates as greedily minimizing Et (with the additional assumptions that ‖Φ(x)‖ is constant). In our setting, this corresponds to choosing g0 = 0 (which might be outside ofM, though this is not problematic in practice). Another standard choice (for MRFs in particular) is to use w0 = 0 (g0 = µ), which means that the first point x1 is chosen randomly from the extreme points of M—this is the scheme we used. As is common in convex optimization, we didn’t see any qualitative difference in our experiments between the two types of initialization."
    }, {
      "heading" : "4.1. Dual problem and subgradient descent",
      "text" : "Welling (2009b) proposed originally an algorithmic interpretation of herding as performing subgradient ascent with constant step size on a function obtained as the zero temperature limit of the log-likelihood of an exponential model that he called the “tipi function”. Our interpretation of the procedure as a FrankWolfe algorithm might therefore appear as a conflicting interpretation at first sight. To establish a natural connection between these two interpretations, we can compute the Fenchel-dual optimization problem to Eq. (3). Indeed, we have (with standard arguments for swapping the min and max operations):\nmin g∈M\n1 2 ‖g − µ‖2 = min g∈M max f∈F f⊤(g − µ)− 1 2 ‖f‖2\n= max f∈F min g∈M f⊤(g − µ)− 1 2 ‖f‖2\n= max f∈F { min x∈X f(x)− 〈f, µ〉 − 1 2 ‖f‖2 } .\nThe dual function f 7→ minx∈X f(x)−〈f, µ〉− 12‖f‖2 is 1-strongly concave and non-differentiable, and a natural algorithm to maximize it is thus subgradient ascent with a step size equal to 1t+1 , which is known to be equivalent to the primal conditional gradient algorithm with step sizes ρt = 1/(t + 1) (Bach, 2011, App. A). It is therefore not surprising that herding is equivalent to subgradient ascent with a decreasing stepsize on this function (with the identification ft = gt − µ = −wt/t). The presence of the squared norm which is added to the “tipi function” merely reflects the change of scaling between gt and wt. It is worthwhile mentioning that other functions, like Bregman divergences, would have led to a different dual function hence adding a different term than a squared norm to the “tipi function”."
    }, {
      "heading" : "4.2. Convergence analysis",
      "text" : "Without further assumptions on the problem, then the two choices of step sizes lead to a convergence rate of the form (Dunn, 1980; Bach, 2011):\n1 2 ‖gt − µ‖2 6 4\nR2\nt ,\nwhere R is diameter of the marginal polytope. Note that the convergence in O(1/t) does not lead to improved estimation of integrals over random sampling. Moreover, without further assumptions, current theoretical analysis does not allow to distinguish between the two forms of conditional gradient algorithms (although they differ a bit in practice, see Section 5).\nHowever, if we assume that within the affine hull of M, there exists a ball of center µ and radius d > 0 that is included in M (i.e., µ is in the relative interior of M), then both choices of step sizes yield faster rates than random sampling. For the version with line search, we actually obtain a linear convergence rate (Beck & Teboulle, 2004):\n1 2 ‖gt − µ‖2 6 R2 exp\n( − d 2t R2 ) .\nFor the version without line search (ρt = 1/(t + 1)), Chen et al. (2010) shows the slower convergence rate in O(1/t2):\n1 2 ‖gt − µ‖2 6\n2R4 d2t2 .\nConcerning the assumption that µ is in the relative interior of M, we now show that in finite-dimensional settings, this assumption is always satisfied under reasonable conditions, while it is never satisfied in a large class of infinite-dimensional settings (namely for Mercer kernels).\nWe first provide an equivalent definition of this condition which is used in the proofs. Let A be the affine hull of M, µ0 the orthogonal projection of 0 on A, and F̃ the space of directions (or difference space) of A (i.e., F̃ = A− µ0).1 Now there exists d > 0 so that any element of A which is at distance less than d of µ is in M if and only if ∀f ∈ F , the maximum of f⊤g over g ∈ A and ‖g− µ‖ 6 d is less than the maximum of f⊤g over g ∈ M. Given the properties of A and F̃ , this is equivalent to:\n∀f ∈ F̃ , max ‖g−µ‖6d f⊤g 6 max g∈M f⊤g\n⇔ ∀f ∈ F̃ , 〈µ, f〉+ d‖f‖ 6 max x∈X f(x). (5)\nProposition 1 Assume that F is finite-dimensional, that X is a compact topological measurable space with\n1It turns out that µ0 is a function taking a constant value since the orthogonality condition yields 〈µ0,Φ(x) − Φ(y)〉 = 0, i.e., µ0(x) = µ0(y) for all x, y ∈ X , by the reproducing property of F .\na continuous kernel function, and that the distribution p has full support on X . Then ∃d > 0 so that Eq. (5) is true. Proof sketch. It is sufficient to show that Ω : f 7→ maxx∈X f(x) − 〈µ, f〉 is a norm on F̃ : as all norms are equivalent in finite dimensions, we get d‖f‖ ≤ Ω(f) for some d > 0, yielding Eq. (5). Ω is convex and positively homogeneous by construction. Now Ω(f) = 0 implies that Ep(x)[f(x) − maxy f(y)] = 0, and thus f(x) = maxy f(y) for x in the support of p (assumed to be X ) using the fact that f is continuous (since the kernel is continuous), and so f is a constant function. We then have two possibilities: either µ0 = 0, in which case one can show that there is no non-zero constant functions in F ; otherwise f = αµ0 for some α and thus the orthogonality condition 〈f, µ0〉 = 0 implies that α = 0. Both cases imply f = 0, hence Ω is a norm.\nProposition 2 Assume X is a compact subspace of R\nd, and that the kernel k is a continuous function on X × X . If F is infinite-dimensional, then there exists no d > 0 so that Eq. (5) is true. Proof sketch. We can apply Mercer theorem to the kernel k̃(x, y) of the projection onto the orthogonal of {µ, µ0}. This kernel is also a Mercer kernel, and we get an orthonormal basis (ek)k>1 of L\n2(X ) with countably many eigenvalues λk that are summable. Moreover, (λ 1/2 k ek)k>1 is known to be an orthonormal basis of the associated feature space F (Cucker & Smale, 2002), and for all x, y ∈ X , k̃(x, y) = ∑k>1 λkek(x)ek(y), with uniform convergence. This implies that for fk = λ 1/2 k ek, we have ‖fk‖ = 1, and 〈fk, µ0〉 = 〈fk, µ〉 = 0.\nIf we assume that there exists d > 0 so that Eq. (5) is true, then we have for all k > 1, maxx∈X |fk(x)| > d. Since X is compact, there exists a cover of F with finitely many balls of radius d/4R. Let Y be the finite set of centers. Since all functions fk are Lipschitzcontinuous with constant 2R, then for all k > 1, maxx∈Y |fk(x)| > d − 2R × d/4R = d/2. Since Y is finite, there exists x ∈ Y so that |fk(x)| > d/2 > 0 for infinitely many values of k; this contradicts the summability of ∑ k>1 fk(x) 2. Hence the result.\nThe last proposition shows that the current theory only supports the slower rates of O(1/t) for the two conditional gradient algorithms in infinite-dimensional settings. On the other hand, we note that, in some cases, traditional herding performs empirically better without known theoretical justification (see Section 5)."
    }, {
      "heading" : "4.3. Computational issues",
      "text" : "In order to run a herding algorithm, there are two potential computational bottlenecks:\nComputing expectations 〈µ,Φ(x)〉: in a learning\ncontext (empirical moment matching), these are done through an empirical average. In an integral evaluation context, in finite-dimensional settings, one needs to compute Ep(x)Φ(x); while in an infinite-dimensional setting, following Chen et al. (2010), expectations of the form Ep(x)k(x, y) need to be computed. This can be done for some pairs of kernels/distributions, like the ones we choose in Section 5, but not in general.\nMinimizing 〈gt − µ,Φ(x)〉 with respect to x ∈ X : in general, this computation may be relatively hard (it is for example NP-hard in the context of the graphical models we consider in Section 5). In practice, Chen et al. (2010) and Welling (2009a) perform local search, while another possibility is to perform the minimization through exhaustive search in a finite sample. Note that a convex relaxation through variational methods (Wainwright & Jordan, 2008) could provide an interesting alternative."
    }, {
      "heading" : "5. Experiments",
      "text" : "The goals of these simulations are (a) to compare the different algorithms aimed at estimating integrals, i.e., assess herding for the task of mean estimation (Section 5.1 and Section 5.2), and (b) to briefly study the empirical relationship with maximum entropy estimation in a learning context (Section 5.3).\n5.1. Kernel herding on X = [0, 1] Problem set-up. In this section, we consider X = [0, 1] and the norm ‖f‖2 = ∫ 1 0 [f\n(ν)(x)]2dx on the infinite-dimensional space of functions with zero mean and whose ν-th derivative exists and is in L2([0, 1]). As shown by Wahba (1990), the associated kernel is equal to B2ν(x−y−⌊x−y⌋)(2ν)! , where B2ν is the (2ν)-th Bernoulli polynomial, with B2(x) = x 2 − x + 16 and B6(x) = x 6 − 3x5 + 52x4 − 12x2 + 142 .\nWe consider either the uniform density on [0, 1], or a randomly selected density of the form p(x) ∝(∑d\ni=1 ai cos(2iπx) + bi sin(2iπx) )2 , for which all required expectations may be computed in closed form. In particular, the mean element is computed as µ : x 7→ E[k(Y, x)] which may be computed in closed form by expanding all terms in the Fourier basis. As for the optimization step, it consists in minimizing gt(x)− µ(x) over the interval [0, 1] which can be done efficiently with exhaustive search.\nComparison of mean estimation procedures. We compare in Figure 3 two kernels, i.e., with ν = 1 (left and middle plots) and ν = 3 (right plot), the following mean estimation procedures, and plot log10 ‖µ̂ − µ‖, for two densities, the uniform density (middle and right) and a randomly selected nonuniform density (left). We compare the following:\n– cg-1/(t+1): conditional gradient procedure with ρt = 1 t+1 , which is the original herding procedure\nof Welling (2009a), leading to uniform weights. – cg-l.search: conditional gradient procedure with line search (with non-uniform weights). – min-norm-point: Minimum-norm point algorithm. This leads to non-uniform weights. – random: Random selection of points (from p(x)), averaged over 10 replications. – sobol: a classical quasi-random sequence, with uniform weights. For non-uniform densities, we first apply the inverse cumulative distribution function.\nFor all of these (except for min-norm-point), we also consider an extra a posteriori projection step (denoted by the -proj suffix), which computes the optimal set of non-uniform weights by finding the best approximation of µ in the convex hull of the points selected by the algorithm. We can draw the following conclusions:\n– Min-norm-point algorithms always perform best. – Conditional gradient with line search is performing slightly worse than regular herding. (Note that we are in the infinite-dimensional setting and so they both have O(t−1) as theoretical rate.) – The extra projection step always significantly improves performance, and sometimes enough that random selection of point combined with a reprojection outperforms regular herding (at least for ν = 3, i.e., with a smaller feature space). – On the right plot, it turns out that the Sobol sequence is known to achieve the optimal rate of O(t−2) for ‖µ − µ̂‖2 for the associated Sobolev space (Wahba, 1990). In this situation, regular herding empirically achieves the same rate; however, the theoretical analysis provided in the present paper or by Chen et al. (2010) does not allow to explain or support this statement theoretically.\nEstimation from a finite sample. In Figure 4, we compare three of the previously mentioned herding procedures when all quantities are computed from a random sample of size 1000. In plain, testing errors are computed (using exact expectations) while in dashed, the training errors are computed. All methods eventually fit the empirical mean, with no further progress on the testing error, this behavior happening faster with the min-norm-point algorithm."
    }, {
      "heading" : "5.2. Estimation on graphical models",
      "text" : "We consider X = {−1, 1}d and a random variable computed as the sign (in {−1, 1}) of a Gaussian random vector in Rd, together with Φ(x) composed of x and of all of its pairwise products xx⊤. In this set-up, we can compute the expectation Ep(x)Φ(x) in closed form, as the mass assigned to the positive orthant by a bivariate Gaussian distribution with correlation ρ, which is\nequal to 14 + 1 2π sin −1 ρ (Abramowitz & Stegun, 1964). We are here in the finite-dimensional setting and the faster rates derived in Section 4.2 apply.\nWe generated 10000 samples from such a distribution and performed herding with exact expectations but with minima with respect to x computed over this sample (by exhaustive search over the sample). We plot results in Figure 5, where we see the superiority of the min-norm-point procedure over the two other procedures (which include regular herding). Note that the line-search algorithm is slower than the 1/(t+1)-rule, which seems to contradict the bounds. The bounds depend on the distance d between the mean and the boundary of the marginal polytope. If this is too small (much like if the strong convexity constant is too small for gradient descent), the linear convergence rate can only be seen for larger numbers of iterations."
    }, {
      "heading" : "5.3. Herding and maximum/minimum entropy",
      "text" : "Given a moment vector µ obtained from the empirical mean of Φ(x) on data, the goal of herding is to produce a pseudo-sample whose moments match µ without having to estimate the canonical parameters of the corresponding model. A natural candidate for such a distribution is the maximum entropy distribution and we will compare it to the results of herding in cases where it can be easily computed, namely for X = {−1, 1}d (with d 6 10) and either Φ(x) = x ∈ [−1, 1]d or Φ(x) = (x, xx⊤). In this setup, following Welling (2009a), the distribution on x ∈ X is estimated by the empirical distribution ∑t i=1 wiδ(x = xi).\nLearning independent bits. We first consider Φ(x) = x and some specific feasible moment µ ∈ M. It is well-known that the maximum entropy distribution is the one with independent bits. In the top panels of Figure 6, we compare the norm between the maximum entropy probability vector and the one estimated by two versions of herding, namely conditional gradient with stepsize ρt = 1/(t + 1) (regular herding with uniform weights) and with line search (with non-uniform weights)—the min-norm-point algorithm leads to quantitatively similar results. We show results in Figure 6 for a mean vector µ which is a random uniform vector in [−1, 1]d (left plots), and for a mean µ which is random with uniform (µi + 1)/2 values in {1, 2, 3, 4, 5}× 2 √ 2\n3 (middle plots), and for mean values µ which is are random with uniform (µi + 1)/2 values in {1, 2, 3, 4, 5}/6 (right plots). Note that the difference between rational and irrational means was already brought up by Welling & Chen (2010) through the link between herding and Sturmian sequences.\nFor each of the mean vector, we plot in the top plots, the error in estimating the full maximum entropy distribution (a vector of size 2d), and in the bottom plots, the error in estimating the feature means (a vector of size d). We can draw the following conclusions:\n– For a random vector µ (left plots), then regular herding (with no line search) empirically converges to the maximum entropy distribution.\n– For rational ratios between the means (but irrational means, middle plots), then there is no convergence to the maximum entropy distribution.\n– For rational means (right), there is no convergence either, but the behavior is more erratic.\n– The line-search procedure never converges to the maximum entropy procedure. On the opposite, it happens to be close to a minimum entropy solution, where many states have probability zero.\nExperiments considered in Figure 6 considered a single draw of the mean vector µ, but similar empirical conclusions may be drawn from other random samples, and we conjecture that for almost surely all random\nvectors µ ∈ [−1, 1]d (which would avoid rational ratios between mean values), then regular herding converges to the maximum entropy distribution. The next experiment shows that this is not the case in general.\nLearning non-independent bits. We now consider Φ(x) = (x, xx⊤), and a certain random feasible moment µ ∈ M. As before, we compare the norm between the maximum entropy probability vector and the one estimated by the two versions of herding. We present results in Figure 7 for a mean vector obtained by the corresponding exponential family distribution with zero weights for the features x and constant weights on the features xx⊤. We see that the herding procedures, while leading to a consistent estimation of the mean vector, does not converge to the maximum entropy distribution and other unreported experiments have led to similar results."
    }, {
      "heading" : "6. Conclusion",
      "text" : "We showed that herding generates a sequence of points which give in sequence the descent directions of a conditional gradient algorithm minimizing the quadratic error on the moment vector. Therefore, if herding is only assessed in terms of its ability to approximate the moment vector, it is outperformed by other more efficient algorithms. Clearly, herding was originally defined with another goal, which was to generate a pseudo-sample whose distribution could approach the maximum entropy distribution with a given moment vector. Our experiments suggest empirically, that while this is the case in certain cases, herding fails in other case, which are not chosen to be particularly pathological. This probably prompts for a further study of herding.\nOur experiments also show that algorithms that are more efficient than herding at approximating the moment vector fail more blatantly to approach a maximum entropy distribution and they present characteristics which would rather suggest a minimization of the entropy. This suggests the question of whether there is a tradeoff between approximating most efficiently the\nmean vector and approximating well the maximum entropy distribution, or if the two goals are in fact rather aligned? In any case, we hope that formulating herding as an optimization problem can help form a better understanding of its goals and its properties.\nAcknowledgements. We thank Ferenc Huszár and Zoubin Ghahramani for helpful discussions. This work was supported by the European Research Council (SIERRA Project) and the city of Paris (“Research in Paris” program)."
    } ],
    "references" : [ {
      "title" : "Learning with submodular functions: A convex optimization perspective",
      "author" : [ "F. Bach" ],
      "venue" : "Technical Report 1111.6453,",
      "citeRegEx" : "Bach,? \\Q2011\\E",
      "shortCiteRegEx" : "Bach",
      "year" : 2011
    }, {
      "title" : "A conditional gradient method with linear rate of convergence for solving convex linear systems",
      "author" : [ "A. Beck", "M. Teboulle" ],
      "venue" : "Math. Meth. Op. Res.,",
      "citeRegEx" : "Beck and Teboulle,? \\Q2004\\E",
      "shortCiteRegEx" : "Beck and Teboulle",
      "year" : 2004
    }, {
      "title" : "Theory of classification: A survey of some recent advances",
      "author" : [ "S. Boucheron", "O. Bousquet", "G. Lugosi" ],
      "venue" : "ESAIM Probability and statistics,",
      "citeRegEx" : "Boucheron et al\\.,? \\Q2005\\E",
      "shortCiteRegEx" : "Boucheron et al\\.",
      "year" : 2005
    }, {
      "title" : "Super-samples from kernel herding",
      "author" : [ "Y. Chen", "M. Welling", "A. Smola" ],
      "venue" : "In Proc. UAI,",
      "citeRegEx" : "Chen et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Chen et al\\.",
      "year" : 2010
    }, {
      "title" : "On the mathematical foundations of learning",
      "author" : [ "F. Cucker", "S. Smale" ],
      "venue" : "Bull. AMS,",
      "citeRegEx" : "Cucker and Smale,? \\Q2002\\E",
      "shortCiteRegEx" : "Cucker and Smale",
      "year" : 2002
    }, {
      "title" : "Convergence rates for conditional gradient sequences generated by implicit step length rules",
      "author" : [ "J.C. Dunn" ],
      "venue" : "SIAM J. Control & Opt.,",
      "citeRegEx" : "Dunn,? \\Q1980\\E",
      "shortCiteRegEx" : "Dunn",
      "year" : 1980
    }, {
      "title" : "On herding and the perceptron cycling theorem",
      "author" : [ "A. Gelfand", "L. van der Maaten", "Y. Chen", "M. Welling" ],
      "venue" : "In Adv. NIPS,",
      "citeRegEx" : "Gelfand et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Gelfand et al\\.",
      "year" : 2010
    }, {
      "title" : "Quasi-random sequences and their discrepancies",
      "author" : [ "W.J. Morokoff", "R.E. Caflisch" ],
      "venue" : "SIAM Journal on Scientific Computing,",
      "citeRegEx" : "Morokoff and Caflisch,? \\Q1994\\E",
      "shortCiteRegEx" : "Morokoff and Caflisch",
      "year" : 1994
    }, {
      "title" : "Bayes-Hermite quadrature",
      "author" : [ "A. O’Hagan" ],
      "venue" : "J. Stat. Planning & Inference,",
      "citeRegEx" : "O.Hagan,? \\Q1991\\E",
      "shortCiteRegEx" : "O.Hagan",
      "year" : 1991
    }, {
      "title" : "A Hilbert space embedding for distributions",
      "author" : [ "A. Smola", "A. Gretton", "L. Song", "B. Schölkopf" ],
      "venue" : "In Algorithmic Learning Theory,",
      "citeRegEx" : "Smola et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Smola et al\\.",
      "year" : 2007
    }, {
      "title" : "Spline Models for Observational Data",
      "author" : [ "Wahba", "Grace" ],
      "venue" : null,
      "citeRegEx" : "Wahba and Grace.,? \\Q1990\\E",
      "shortCiteRegEx" : "Wahba and Grace.",
      "year" : 1990
    }, {
      "title" : "Graphical models, exponential families, and variational inference",
      "author" : [ "M.J. Wainwright", "M.I. Jordan" ],
      "venue" : "Found. Trends Mach. Learn.,",
      "citeRegEx" : "Wainwright and Jordan,? \\Q2008\\E",
      "shortCiteRegEx" : "Wainwright and Jordan",
      "year" : 2008
    }, {
      "title" : "Herding dynamic weights for partially observed random field models",
      "author" : [ "M. Welling" ],
      "venue" : "In Proc. UAI,",
      "citeRegEx" : "Welling,? \\Q2009\\E",
      "shortCiteRegEx" : "Welling",
      "year" : 2009
    }, {
      "title" : "Herding dynamical weights to learn",
      "author" : [ "M. Welling" ],
      "venue" : "In Proc. ICML,",
      "citeRegEx" : "Welling,? \\Q2009\\E",
      "shortCiteRegEx" : "Welling",
      "year" : 2009
    }, {
      "title" : "Statistical inference using weak chaos and infinite memory",
      "author" : [ "M. Welling", "Y. Chen" ],
      "venue" : "J. Physics: Conf. Series,",
      "citeRegEx" : "Welling and Chen,? \\Q2010\\E",
      "shortCiteRegEx" : "Welling and Chen",
      "year" : 2010
    }, {
      "title" : "Finding the nearest point in a polytope",
      "author" : [ "P. Wolfe" ],
      "venue" : "Math. Progr.,",
      "citeRegEx" : "Wolfe,? \\Q1976\\E",
      "shortCiteRegEx" : "Wolfe",
      "year" : 1976
    } ],
    "referenceMentions" : [ {
      "referenceID" : 12,
      "context" : "We show that the herding procedure of Welling (2009b) takes exactly the form of a standard convex optimization algorithm— namely a conditional gradient algorithm minimizing a quadratic moment discrepancy.",
      "startOffset" : 38,
      "endOffset" : 54
    }, {
      "referenceID" : 12,
      "context" : "The herding algorithm has recently been presented by Welling (2009b) as a computationally attractive alternative method for learning in intractable Markov random fields models (MRF).",
      "startOffset" : 53,
      "endOffset" : 69
    }, {
      "referenceID" : 6,
      "context" : "From this perspective, herding was later generalized to MRFs with latent variables (Welling, 2009a) as well as discriminative MRFs (Gelfand et al., 2010).",
      "startOffset" : 131,
      "endOffset" : 153
    }, {
      "referenceID" : 11,
      "context" : "From the learning perspective, the herding updates can be derived by performing fixedstep-size subgradient ascent on the zero-temperature limit of the annealed likelihood function of the MRF— called the “tipi function” by Welling (2009b). From this perspective, herding was later generalized to MRFs with latent variables (Welling, 2009a) as well as discriminative MRFs (Gelfand et al.",
      "startOffset" : 222,
      "endOffset" : 238
    }, {
      "referenceID" : 3,
      "context" : "= ‖μ − 1t ∑t i=1 Φ(xi)‖ (Chen et al., 2010).",
      "startOffset" : 24,
      "endOffset" : 43
    }, {
      "referenceID" : 3,
      "context" : "From the moment matching perspective, which has been explored more in details by Chen et al. (2010), the herding updates can be derived as an effective way to choose greedily pseudo-samples xt in order to quickly decrease the moment discrepancy Et .",
      "startOffset" : 81,
      "endOffset" : 100
    }, {
      "referenceID" : 3,
      "context" : "From the moment matching perspective, which has been explored more in details by Chen et al. (2010), the herding updates can be derived as an effective way to choose greedily pseudo-samples xt in order to quickly decrease the moment discrepancy Et . = ‖μ − 1t ∑t i=1 Φ(xi)‖ (Chen et al., 2010). Under suitable regularity conditions, Et decreases as O(1/t) for the herding updates—this is faster than i.i.d. sampling from the distribution generating μ (e.g., the training data) which would yield the slower O(1/ √ t) rate. This faster rate has been explained by negative autocorrelations amongst the pseudo-samples and was used by Chen et al. (2010) to sub-select a small collection of representative “super-samples” from a much larger set of i.",
      "startOffset" : 81,
      "endOffset" : 649
    }, {
      "referenceID" : 3,
      "context" : "In particular, we provide a linear convergence rate for the line-search variant in finitedimensional settings and show how the conditions assumed by Chen et al. (2010) in fact never hold in the infinite-dimensional setting.",
      "startOffset" : 149,
      "endOffset" : 168
    }, {
      "referenceID" : 3,
      "context" : "We start with a similar setup as Chen et al. (2010), where herding can be interpreted as a way to approximate integrals of functions in a reproducing kernel Hilbert space (RKHS).",
      "startOffset" : 33,
      "endOffset" : 52
    }, {
      "referenceID" : 3,
      "context" : "We start with a similar setup as Chen et al. (2010), where herding can be interpreted as a way to approximate integrals of functions in a reproducing kernel Hilbert space (RKHS). We consider a set X and a mapping Φ from X to a RKHS F . Through this mapping, all elements of F may be identified with real functions f on X defined by f(x) = 〈f,Φ(x)〉, for x ∈ X . We denote by k : (x, y) 7→ k(x, y) the associated positive definite kernel. Note that the mapping Φ may be explicit (classically in low-dimensional settings) or implicit—where the kernel trick can be used, see Section 4.3 and Chen et al. (2010).",
      "startOffset" : 33,
      "endOffset" : 606
    }, {
      "referenceID" : 3,
      "context" : "We denote by M ⊂ F the marginal polytope (Wainwright & Jordan, 2008; Chen et al., 2010), i.",
      "startOffset" : 41,
      "endOffset" : 87
    }, {
      "referenceID" : 3,
      "context" : "Following Chen et al. (2010), we denote by μ the mean element (see, e.",
      "startOffset" : 10,
      "endOffset" : 29
    }, {
      "referenceID" : 3,
      "context" : "In this paper, we will try to find a good estimate μ̂ of μ based on a weighted set of points from {Φ(x), x ∈ X}, generalizing Chen et al. (2010), and show how this relates to herding.",
      "startOffset" : 126,
      "endOffset" : 145
    }, {
      "referenceID" : 3,
      "context" : "The links between the first two were clearly outlined by Chen et al. (2010), while the present paper provides the novel interpretation of herding as a well-established convex optimization algorithm.",
      "startOffset" : 57,
      "endOffset" : 76
    }, {
      "referenceID" : 8,
      "context" : "from a given distribution), the Bayes-Hermite quadrature of O’Hagan (1991) essentially computes an orthogonal projection of μ onto the affine hull of this set of points.",
      "startOffset" : 60,
      "endOffset" : 75
    }, {
      "referenceID" : 15,
      "context" : "For convex sets with finitely many extreme points, it converges in a finite number of iterations with higher (though still polynomial) iteration computational cost (Wolfe, 1976).",
      "startOffset" : 164,
      "endOffset" : 177
    }, {
      "referenceID" : 3,
      "context" : "In the kernel herding algorithm of Chen et al. (2010), the authors use w0 = μ as this is required to interpret the herding updates as greedily minimizing Et (with the additional assumptions that ‖Φ(x)‖ is constant).",
      "startOffset" : 35,
      "endOffset" : 54
    }, {
      "referenceID" : 5,
      "context" : "Without further assumptions on the problem, then the two choices of step sizes lead to a convergence rate of the form (Dunn, 1980; Bach, 2011):",
      "startOffset" : 118,
      "endOffset" : 142
    }, {
      "referenceID" : 0,
      "context" : "Without further assumptions on the problem, then the two choices of step sizes lead to a convergence rate of the form (Dunn, 1980; Bach, 2011):",
      "startOffset" : 118,
      "endOffset" : 142
    }, {
      "referenceID" : 3,
      "context" : "For the version without line search (ρt = 1/(t + 1)), Chen et al. (2010) shows the slower convergence rate in O(1/t): 1",
      "startOffset" : 54,
      "endOffset" : 73
    }, {
      "referenceID" : 3,
      "context" : "In an integral evaluation context, in finite-dimensional settings, one needs to compute Ep(x)Φ(x); while in an infinite-dimensional setting, following Chen et al. (2010), expectations of the form Ep(x)k(x, y) need to be computed.",
      "startOffset" : 151,
      "endOffset" : 170
    }, {
      "referenceID" : 3,
      "context" : "In practice, Chen et al. (2010) and Welling (2009a) perform local search, while another possibility is to perform the minimization through exhaustive search in a finite sample.",
      "startOffset" : 13,
      "endOffset" : 32
    }, {
      "referenceID" : 3,
      "context" : "In practice, Chen et al. (2010) and Welling (2009a) perform local search, while another possibility is to perform the minimization through exhaustive search in a finite sample.",
      "startOffset" : 13,
      "endOffset" : 52
    }, {
      "referenceID" : 12,
      "context" : "– cg-1/(t+1): conditional gradient procedure with ρt = 1 t+1 , which is the original herding procedure of Welling (2009a), leading to uniform weights.",
      "startOffset" : 106,
      "endOffset" : 122
    }, {
      "referenceID" : 3,
      "context" : "In this situation, regular herding empirically achieves the same rate; however, the theoretical analysis provided in the present paper or by Chen et al. (2010) does not allow to explain or support this statement theoretically.",
      "startOffset" : 141,
      "endOffset" : 160
    }, {
      "referenceID" : 12,
      "context" : "In this setup, following Welling (2009a), the distribution on x ∈ X is estimated by",
      "startOffset" : 25,
      "endOffset" : 41
    }, {
      "referenceID" : 12,
      "context" : "Note that the difference between rational and irrational means was already brought up by Welling & Chen (2010) through the link between herding and Sturmian sequences.",
      "startOffset" : 89,
      "endOffset" : 111
    } ],
    "year" : 2012,
    "abstractText" : "We show that the herding procedure of Welling (2009b) takes exactly the form of a standard convex optimization algorithm— namely a conditional gradient algorithm minimizing a quadratic moment discrepancy. This link enables us to invoke convergence results from convex optimization and to consider faster alternatives for the task of approximating integrals in a reproducing kernel Hilbert space. We study the behavior of the different variants through numerical simulations. Our experiments shed more light on the learning bias of herding: they indicate that while we can improve over herding on the task of approximating integrals, the original herding algorithm approaches more often the maximum entropy distribution.",
    "creator" : "LaTeX with hyperref package"
  }
}