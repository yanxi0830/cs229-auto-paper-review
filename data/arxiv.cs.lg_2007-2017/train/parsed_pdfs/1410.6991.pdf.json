{
  "name" : "1410.6991.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "A provable SVD-based algorithm for learning topics in dominant admixture corpus",
    "authors" : [ "Trapit Bansal" ],
    "emails" : [ "trapitbansal@gmail.com", "chiru@csa.iisc.ernet.in", "kannan@microsoft.com" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Topic models [1] assume that each document in a text corpus is generated from an ad-mixture of topics, where, each topic is a distribution over words in a Vocabulary. An admixture is a convex combination of distributions. Words in the document are then picked in i.i.d. trials, each trial has a multinomial distribution over words given by the weighted combination of topic distributions. The problem of inference, recovering the topic distributions from such a collection of documents, is provably NP-hard. Existing literature pursues techniques such as variational methods [2] or MCMC procedures [3] for approximating the maximum likelihood estimates.\nGiven the intractability of the problem one needs further assumptions on topics to derive polynomial time algorithms which can provably recover topics. A possible (strong) assumption is that each\nar X\niv :1\n41 0.\n69 91\nv3 [\nst at\n.M L\n] 4\nN ov\ndocument has only one topic but the collection can have many topics. A document with only one topic is sometimes referred as a pure topic document. [7] proved that a natural algorithm, based on SVD, recovers topics when each document is pure and in addition, for each topic, there is a set of words, called primary words, whose total frequency in that topic is close to 1. More recently, [6] show using tensor methods that if the topic weights have Dirichlet distribution, we can learn the topic matrix. Note that while this allows non-pure documents, the Dirichlet distribution gives essentially uncorrelated topic weights.\nIn an interesting recent development [4, 5] gave the first provable algorithm which can recover topics from a corpus of documents drawn from admixtures, assuming separability. Topics are said to be separable if in every topic there exists at least one Anchor word. A word in a topic is said to be an an Anchor word for that topic if it has a high probability in that topic and zero probability in remaining topics. The requirement of high probability in a topic for a single word is unrealistic.\nOur Contributions: Topic distributions, such as those learnt in LDA, try to model the cooccurrence of a group of words which describes a theme. Keeping this in mind we introduce the notion of Catchwords. A group of words are called Catchwords of a topic, if each word occurs strictly more frequently in the topic than other topics and together they have high frequency. This is a much weaker assumption than separability. Furthermore we observe, empirically, that posterior topic weights assigned by LDA to a document often have the property that one of the weights is significantly higher than the rest. Motivated by this observation, which has not been exploited by topic modeling literature, we suggest a new assumption. It is natural to assume that in a text corpus, a document, even if it has multiple themes, will have an overarching dominant theme. In this paper we focus on document collections drawn from dominant admixtures. A document collection is said to be drawn from a dominant admixture if for every document, there is one topic whose weight is significantly higher than other topics and in addition, for every topic, there is a small fraction of documents which are nearly purely on that topic. The main contribution of the paper is to show that under these assumptions, our algorithm, which we call TSVD , indeed provably finds a good approximation in total l1 error to the topic matrix. We prove a bound on the error of our approximation which does not grow with dictionary size d, unlike [5] where the error grows linearly with d.\nEmpirical evidence shows that on semi-synthetic corpora constructed from several real world datasets, as suggested by [5], TSVD substantially outperforms the state of the art [5]. In particular it is seen that compared to [5] TSVD gives 27% lower error in terms of L1 recovery on 90% of the topics.\nProblem Definition: d, k, s will denote respectively, the number of words in the dictionary, number of topics and number of documents. d, s are large, whereas, k is to be thought of as much smaller. Let Sk = {x = (x1, x2, . . . , xk) : xl ≥ 0; ∑ l xl = 1}. For each topic, there is a fixed vector in Sk giving the probability of each word in that topic. Let M be the d× k matrix with these vectors as its columns.\nDocuments are picked in i.i.d. trials. To pick document j, one first picks a k− vector Wij ,W2j , . . . ,Wkj of topic weights according to a fixed distribution on Sk. Let P·,j = MW·,j be the weighted combination of the topic vectors. Then the m words of the document are picked in i.i.d. trials; each trial picks a word according to the multinomial distribution with P·,j as the probabilities. All that is given as data is the frequency of words in each document, namely, we are given the d × s matrix A, where Aij = Number of occurrences of word i in Document jm . Note that E(A|W) = P, where, the expectation is taken entry-wise.\nIn this paper we consider the problem of finding M given A."
    }, {
      "heading" : "2 Previous Results",
      "text" : "In this section we review literature related to designing provable algorithms for topic models. For an overview of topic models we refer the reader to the excellent survey[1]. Provable algorithms for recovering topic models was started by [7]. Latent Semantic Indexing(LSI) [8] remains a successful method for retrieving similar documents by using SVD. [7] showed that one can recover M from a collection of documents, with pure topics, by using SVD based procedure under the additional Primary Words Assumption. [6] showed that in the admixture case, if one assumes Dirichlet\ndistribution for the topic weights, then, indeed, using tensor methods, one can learn M to l2 error provided some added assumptions on numerical parameters like condition number are satisfied.\nThe first provably polynomial time algorithm for admixture corpus was given in [4, 5]. For a topic l, a word i is an anchor word if Mi,l ≥ p0 ; Mi,l′ = 0 ∀l′ 6= l.\nTheorem 2.1 [4] If every topic has an anchor word, there is a polynomial time algorithm that returns an M̂ such that with high probability,\nk∑ l=1 d∑ i=1 |M̂il −Mil| ≤ dε provided s ≥ Max { O ( k6 log d a4ε2p60γ 2m ) , O ( k4 γ2a2 )} ,\nwhere, γ is the condition number of E(WWT ), a is the minimum expected weight of a topic and m is the number of words in each document.\nNote that the error grows linearly in the dictionary size d, which is often large. Note also the dependence of s on parameters p0, which is, 1/p60 and on a, which is 1/a\n4. If, say, the word “run” is an anchor word for the topic “baseball” and p0 = 0.1, then the requirement is that every 10 th word in a document on this topic is “run”. This seems too strong to be realistic. It would be more realistic to ask that a set of words like - “run”, “hit”, “score”, etc. together have frequency at least 0.1 which is what our catchwords assumption does."
    }, {
      "heading" : "3 Learning Topics from Dominant Admixtures",
      "text" : "Informally, a document is said to be drawn from a Dominant Admixture if the document has one dominant topic. Besides its simplicity, we show empirical evidence from real corpora to demonstrate that topic dominance is a reasonable assumption. The Dominant Topic assumption is weaker than the Pure Topic assumption. More importantly SVD based procedures proposed by [7] will not apply. Inspired by the Primary words assumption we introduce the assumption that each topic has a set of Catchwords which individually occur more frequently in that topic than others. This is again a much weaker assumption than both Primary Words and Anchor Words assumptions and can be verified experimentally. In this section we establish that by applying SVD on a matrix, obtained by thresholding the word-document matrix, and subsequent k means clustering can learn topics having Catchwords from a Dominant Admixture corpus."
    }, {
      "heading" : "3.1 Assumptions: Catchwords and Dominant admixtures",
      "text" : "Let α, β, ρ, δ, ε0 be non-negative reals satisfying:\nβ + ρ ≤ (1− δ)α. (1) α+ 2δ ≤ 0.5 ; δ ≤ 0.08. (2)\nDominant topic Assumption (a) For j = 1, 2, . . . , s, document j has a dominant topic l(j) such that Wl(j),j ≥ α and Wl′j ≤ β, ∀l′ 6= l(j). (b)For each topic l, there are at least ε0w0s documents in each of which topic l has weight at least 1− δ. Catchwords Assumption: There are k disjoint sets of words - S1, S2, . . . , Sk such that with ε defined in (9)\n∀i ∈ Sl, ∀l′ 6= l, Mil′ ≤ ρMil (3)∑ i∈Sl Mil ≥ p0 (4)\n∀i ∈ Sl,mδ2αMil ≥ 8 ln ( 20\nεw0\n) . (5)\nPart (b.) of the Dominant Topic Assumption is in a sense necessary for “identifiability” - namely for the model to have a set of k document vectors so that every document vector is in the convex\nhull of these vectors. The Catchwords assumption is natural to describe a theme as it tries to model a unique group of words which is likely to co-occur when a theme is expressed. This assumption is close to topics discovered by LDA like models, which try to model of co-occurence of words. If α, δ ∈ Ω(1), then, the assumption (5) says Mil ∈ Ω∗(1/m). In fact if Mil ∈ o(1/m), we do not expect to see word i (in topic l), so it cannot be called a catchword at all.\nA slightly different (but equivalent) description of the model will be useful to keep in mind. What is fixed (not stochastic) are the matrices M and the distribution of the weight matrix W. To pick document j, we can first pick the dominant topic l in document j and condition the distribution of W·,j on this being the dominant topic. One could instead also think of W·,j being picked from a mixture of k distributions. Then, we let Pij = ∑k l=1MilWlj and pick them words of the document in i.i.d multinomial trials as before. We will assume that\nTl = {j : l is the dominant topic in document j} satisfies |Tl| = wls,\nwhere, wl is the probability of topic l being dominant. This is only approximately valid, but the error is small enough that we can disregard it.\nFor ζ ∈ {0, 1, 2, . . . ,m}, let pi(ζ, l) be the probability that j ∈ Tl and Aij = ζ/m and qi(ζ, l) the corresponding “empirical probability”:\npi(ζ, l) = ∫ W·,j ( m ζ ) P ζij(1− Pij) m−ζProb(W·,j | j ∈ Tl) Prob(j ∈ Tl), where, P·,j = MW·,j .\n(6)\nqi(ζ, l) = 1\ns |{j ∈ Tl : Aij = ζ/m}| . (7)\nNote that pi(ζ, l) is a real number, whereas, qi(ζ, l) is a random variable with E(qi(ζ, l)) = pi(ζ, l). We need a technical assumption on the pi(ζ, l) (which is weaker than unimodality).\nNo-Local-Min Assumption: We assume that pi(ζ, l) does not have a local minimum, in the sense:\npi(ζ, l) > Min(pi(ζ − 1, l), pi(ζ + 1, l)) ∀ ζ ∈ {1, 2, . . . ,m− 1}. (8)\nThe justification for the this assumption is two-fold. First, generally, Zipf’s law kind of behaviour where the number of words plotted against relative frequencies declines as a power function has often been observed. Such a plot is monotonically decreasing and indeed satisfies our assumption. But for Catchwords, we do not expect this behaviour - indeed, we expect the curve to go up initially as the relative frequency increases, then reach a maximum and then decline. This is a unimodal function and also satisfies our assumption. Indeed, we have empirically observed, see EXPTS, that these are essentially the only two behaviours.\nRelative sizes of parameters Before we close the section we discuss the values of the parameters are in order. Here, s is large. For asymptotic analysis, we can think of it as going to infinity. 1/w0 is also large and can be thought of as going to infinity. [In fact, if 1/w0 ∈ O(1), then, intuitively, we see that there is no use of a corpus of more than constant size - since our model has i.i.d. documents, intuitively, the number of samples we need should depend mainly on 1/w0]. m is (much) smaller, but need not be constant.\nc refers to a generic constant independent of m, s, 1/w0, ε, δ; its value may be different in different contexts."
    }, {
      "heading" : "3.2 The TSVD Algorithm",
      "text" : "Existing SVD based procedures for clustering on raw word-document matrices fail because the spread of frequencies of a word within a topic is often more (at least not significantly less) than the gap between the word’s frequencies in two different topics. Hypothetically the frequency for the word run, in the topic Sports, may range from say 0.01 on up. But in other topics, it may range from 0 to 0.005 say. The success of the algorithm will lie on correctly identifying the dominant topics such as sports by identifying that the word run has occurred with high frequency. In this example, the gap (0.01-0.005) between Sports and other topics is less than the spread within Sports (1.0-0.01), so a 2-clustering approach (based on SVD) will split the topic Sports into two. While this is a toy\nexample, note that if we threshold the frequencies at say 0.01, ideally, sports will be all above and the rest all below the threshold, making the succeeding job of clustering easy.\nThere are several issues in extending beyond the toy case. Data is not one-dimensional. We will use different thresholds for each word; word i will have a threshold ζi/m. Also, we have to compute ζi/m. Ideally we would not like to split any Tl, namely, we would like that for each l and and each i, either most j ∈ Tl have Aij > ζi/m or most j ∈ Tl have Aij ≤ ζi/m. We will show that our threshold procedure indeed achieves this. One other nuance: to avoid conditioning, we split the data A into two parts A(1) and A(2), compute the thresholds using A(1) and actually do the thresholding on A(2). We will assume that the intial A had 2s columns, so each part now has s columns. Also, T1, T2, . . . , Tk partitions the columns of A(1) as well as those of A(2). The columns of thresholded matrix B are then clustered, by a technique we call Project and Cluster, namely, we project the columns of B to its k−dimensional SVD subspace and cluster in the projection. The projection before clustering has recently been proven [9] (see also [10]) to yield good starting cluster centers. The clustering so found is not yet satisfactory. We use the classic Lloyd’s k-means algorithm proposed by [12]. As we will show, the partition produced after clustering, {R1, . . . , Rk} of A(2) is close to the partition induced by the Dominant Topics, {T1, . . . , Tk}. Catchwords of topic l are now (approximately) identified as the most frequently occurring words in documents in Rl. Finally, we identify nearly pure documents in Tl (approximately) as the documents in which the catchwords occur the most. Then we get an approximation to M·,l by averaging these nearly pure documents. We now describe the precise algorithm."
    }, {
      "heading" : "3.3 Topic recovery using Thresholded SVD",
      "text" : "Threshold SVD based K-means (TSVD) ε = Min ( 1\n900c20\nαp0 k3m\n, ε0 √ αp0δ\n640m √ k ,\n) . (9)\n1. Randomly partition the columns of A into two matrices A(1) and A(2) of s columns each.\n2. Thresholding\n(a) Compute Thresholds on A(1) For each i, let ζi be the highest value of ζ ∈ {0, 1, 2, . . . ,m} such that |{j : A(1)ij > ζ m}| ≥ w0 2 s; |{j : A (1) ij = ζ m}| ≤ 3εw0s.\n(b) Do the thresholding on A(2): Bij =\n{√ ζi if A (2) ij > ζi/m and ζi ≥ 8 ln(20/εw0)\n0 otherwise .\n3. SVD Find the best rank k approximation B(k) to B.\n4. Identify Dominant Topics\n(a) Project and Cluster Find (approximately) optimal k− means clustering of the columns of B(k).\n(b) Lloyd’s Algorithm Using the clustering found in Step 4(a) as the starting clustering, apply Lloyd’s algorithm k means algorithm to the columns of B (B, not B(k)).\n(c) Let R1, R2, . . . , Rk be the k−partition of [s] corresponding to the clustering after Lloyd’s. //*Will prove that Rl ≈ Tl*//\n5. Identify Catchwords\n(a) For each i, l, compute g(i, l) = the bε0w0s/2c) th highest element of {A(2)ij : j ∈ Rl}. (b) Let Jl = { i : g(i, l) > Max ( 4 mδ2 ln(20/εw0),Maxl′ 6=lγ g(i, l ′) )} , where, γ =\n1−2δ (1+δ)(β+ρ) .\n6. Find Topic Vectors Find the bε0w0s/2c highest ∑ i∈Jl A (2) ij among all j ∈ [s] and return\nthe average of these A·,j as our approximation M̂·,l to M·,l.\nTheorem 3.1 Main Theorem Under the Dominant Topic, Catchwords and No-Local-Min assumptions, the algorithm succeeds with high probability in finding an M̂ so that∑\ni,l\n|Mil − M̂il| ∈ O(kδ), provided 1s ∈ Ω∗ ( 1\nw0\n( k6m2\nα2p20 +\nm2k\nε20δ 2αp0\n+ d\nε0δ2\n)) .\nA note on the sample complexity is in order. Notably, the dependence of s on w0 is best possible (namely s ∈ Ω∗(1/w0)) within logarithmic factors, since, if we had fewer than 1/w0 documents, a topic which is dominant with probability only w0 may have none of the documents in the collection. The dependence of s on d needs to be at least d/ε0w0δ2: to see this, note that we only assume that there are r = O(ε0w0s) nearly pure documents on each topic. Assuming we can find this set (the algorithm approximately does), their average has standard deviation of about √ Mil/ √ r in coordinate i. If topic vector M·,l has O(d) entries, each of size O(1/d), to get an approximation of M·,l to l1 error δ, we need the per coordinate error 1/ √ dr to be at most δ/d which implies s ≥ d/ε0w0δ2. Note that to get comparable error in [4], we need a quadratic dependence on d. There is a long sequence of Lemmas to prove the theorem. The Lemmas and the proofs are given in Appendix. The essence of the proof lies in proving that the clustering step correctly identifies the partition induced by the dominant topics. For this, we take advantage of a recent development on the k−means algorithm from [9] [see also [10]], where, it is shown that under a condition called the Proximity Condition, Lloyd’s k means algorithm starting with the centers provided by the SVDbased algorithm, correctly identifies almost all the documents’ dominant topics. We prove that indeed the Proximity Condition holds. This calls for machinery from Random Matrix theory (in particular bounds on singular values). We prove that the singular values of the thresholded worddocument matrix are nicely bounded. Once the dominant topic of each document is identified, we are able to find the Catchwords for each topic. Now, we rely upon part (b.) of the Dominant Topic assumption : that is there is a small fraction of nearly Pure Topic-documents for each topic. The Catchwords help isolate the nearly pure-topic documents and hence find the topic vectors. The proofs are complicated by the fact that each step of the algorithm induces conditioning on the datafor example, after clustering, the document vectors in one cluster are not anymore independent."
    }, {
      "heading" : "4 Experimental Results",
      "text" : "We compare the thresholded SVD based k-means (TSVD2) algorithm 3.2 with the algorithms of [5], Recover-KL and Recover-L2, using the code made available by the authors3. We first provide empirical support for the algorithm assumptions in Section 3.1, namely the dominant topic and the catchwords assumption. Then we show on 4 different semi-synthetic data that TSVD provides as good or better recovery of topics than the Recover algorithms. Finally on real-life datasets, we show that the algorithm performs as well as [5] in terms of perplexity and topic coherence.\nImplementation Details: TSVD parameters (w0, ε, ε0, γ) are not known in advance for real corpus. We tested empirically for multiple settings and the following values gave the best performance. Thresholding parameters used were: w0 = 1k , ε = 1 6 . For finding the catchwords, γ = 1.1, ε0 = 1 3 in step 5. For finding the topic vectors (step 6), taking the top 50% (ε0w0 = 1k ) gave empirically better results. The same values were used on all the datasets tested. The new algorithm is sensitive to the initialization of the first k-means step in the projected SVD space. To remedy this, we run 10 independent random initializations of the algorithm with K-Means++ [13] and report the best result.\nDatasets: We use four real word datasets in the experiments. As pre-processing steps we removed standard stop-words, selected the vocabulary size by term-frequency and removed documents with less than 20 words. Datasets used are: (1) NIPS4: Consists of 1,500 NIPS full papers, vocabulary of 2,000 words and mean document length 1023. (2) NYT4: Consists of a random subset of 30,000\n1The superscript ∗ hides a logarithmic factor in dsk/δfail, where, δfail > 0 is the desired upper bound on the probability of failure.\n2Resources available at: http://mllab.csa.iisc.ernet.in/tsvd 3http://www.cs.nyu.edu/˜halpern/files/anchor-word-recovery.zip 4http://archive.ics.uci.edu/ml/datasets/Bag+of+Words\ndocuments from the New York Times dataset, vocabulary of 5,000 words and mean document length 238. (3) Pubmed4: Consists of a random subset of 30,000 documents from the Pubmed abstracts dataset, vocabulary of 5,030 words and mean document length 58. (4) 20NewsGroup5 (20NG): Consist of 13,389 documents, vocabulary of 7,118 words and mean document length 160."
    }, {
      "heading" : "4.1 Algorithm Assumptions",
      "text" : "To check the dominant topic and catchwords assumptions, we first run 1000 iterations of Gibbs sampling on the real corpus and learn the posterior document-topic distribution ({W.,j}) for each document in the corpus (by averaging over 10 saved-states separated by 50 iterations after the 500 burn-in iterations). We will use this posterior document-topic distribution as the document generating distribution to check the two assumptions.\nDominant topic assumption: Table 1 shows the fraction of the documents in each corpus which satisfy this assumption with α = 0.4 (minimum probability of dominant topic) and β = 0.3 (maximum probability of non-dominant topics). The fraction of documents which have almost pure topics with highest topic weight at least 0.95 (δ = 0.05) is also shown. The results indicate that the dominant topic assumption is well justified (on average 64% documents satisfy the assumption) and there is also a substantial fraction of documents satisfying almost pure topic assumption.\nCatchwords assumption: We first find a k-clustering of the documents {T1, . . . , Tk} by assigning all documents which have highest posterior probability for the same topic into one cluster. Then we use step 5 of TSVD (Algorithm 3.2) to find the set of catchwords for each topic-cluster, i.e. {S1, . . . , Sk}, with the parameters: 0w0 = 13k , γ = 2.3 (taking into account constraints in Section 3.1, α = 0.4, β = 0.3, δ = 0.05, ρ = 0.07). Table 1 reports the fraction of topics with non-empty set of catchwords and the average per topic frequency of the catchwords6. Results indicate that most topics on real data contain catchwords (Table 1, second-last column). Moreover, the average per-topic frequency of the group of catchwords for that topic is also quite high (Table 1, last column).\nNo-Local-Min Assumption: To provide support and intuition for the local-min assumption we consider the quantity qi(ζ, l), in (7). Recall that E[qi(ζ, l)] = pi(ζ, l), we will analyze the behavior of qi(ζ, l) as a function of ζ for some topics l and words i. As defined, we need a fixed m to check this assumption and so we generate semi-synthetic data with a fixed m from LDA model trained on the real NYT corpus (as explained in Section 4.2.1). We find catchwords and the sets {Tl} as in the catchwords assumption above and plot qi(ζ, l) separately for some random catchwords and non-catchwords by fixing some random l ∈ [k]. Figure 1 shows the plots. As explained in 3.1, the plots are monotonically decreasing for non-catchwords and satisfy the assumption. On the other hand, the plots for catchwords are almost unimodal and also satisfy the assumption."
    }, {
      "heading" : "4.2 Empirical Results",
      "text" : ""
    }, {
      "heading" : "4.2.1 Topic Recovery on Semi-Synthetic Data",
      "text" : "Semi-synthetic Data: Following [5], we generate semi-synthetic corpora from LDA model trained by MCMC, to ensure that the synthetic corpora retain the characteristics of real data. Gibbs sampling\n5http://qwone.com/˜jason/20Newsgroups 6 (\n1 k ∑k l=1 1 |Tl| ∑ i∈Sl ∑ j∈Tl Aij )"
    }, {
      "heading" : "Corpus Documents Recover-L2 Recover-KL TSVD % Improvement",
      "text" : "is run for 1000 iterations on all the four datasets and the final word-topic distribution is used to generate varying number of synthetic documents with document-topic distribution drawn from a symmetric Dirichlet with hyper-parameter 0.01. For NIPS, NYT and Pubmed we use k = 50 topics, for 20NewsGroup k = 20, and mean document lengths of 1000, 300, 100 and 200 respectively. Note that the synthetic data is not guaranteed to satisfy dominant topic assumption for every document (on average about 80% documents satisfy the assumption for value of (α, β) tested in Section 4.1)\nTopic Recovery: We learn the word-topic distributions (M̂ ) for the semi-synthetic corpora using TSVD and the Recover algorithms of [5]. Given these learned topic distributions and the original data-generating distributions (M ), we align the topics of M and M̂ by bipartite matching and rearrange the columns of M̂ in accordance to the matching with M . Topic recovery is measured by the average of the l1 error across topics (called reconstruction error [5]), ∆(M,M̂), defined as: ∆(M, M̂) = 1k ∑k l=1 ∑d i=1 |Mil − M̂il|.\nWe report reconstruction error in Table 2 for TSVD and the Recover algorithms, Recover-L2 and Recover-KL. TSVD has smaller error on most datasets than the Recover-KL algorithm. We observed performance of TSVD to be always better than Recover-L2. Best performance is observed on NIPS which has largest mean document length, indicating that larger m leads to better recovery. Results on 20NG are slightly worse than Recover-KL for small sample size (though better than RecoverL2), but the difference is small. While the values in Table 2 are averaged values, Figure 2 shows that TSVD algorithm achieves much better topic recovery (27% improvement in l1 error over RecoverKL) for majority of the topics (>90%) on most datasets."
    }, {
      "heading" : "4.2.2 Topic Recovery on Real Data",
      "text" : "Perplexity: A standard quantitative measure used to compare topic models and inference algorithms is perplexity [2]. Perplexity of a set of D test documents, where each document j consists of mj words, denoted by wj , is defined as: perp(Dtest) = exp { − ∑D j=1 log p(wj)∑D\nj=1mj\n} . To evaluate\nperplexity on real data, the held-out sets consist of 350 documents for NIPS, 10000 documents for NYT and Pubmed, and 6780 documents for 20NewsGroup. Table 3 shows the results of perplexity on the 4 datasets. TSVD gives comparable perplexity with Recover-KL, results being slightly better on NYT and 20NewsGroup which are larger datasets with moderately high mean document lengths.\nTopic Coherence: [11] proposed Topic Coherence as a measure of semantic quality of the learned topics by approximating user experience of topic quality on top d0 words of a topic. Topic coherence is defined as TC(d0) = ∑ i≤d0 ∑ j<i log D(wi,wj)+e D(wj)\n, where D(w) is the document frequency of a word w, D(wi, wj) is the document frequency of wi and wj together, and e is a small constant. We evaluate TC for the top 5 words of the recovered topic distributions and report the average and standard deviation across topics. TSVD gives comparable results on Topic Coherence (see Table 3).\nTopics on Real Data: Table 4 shows the top 5 words of all 50 matched pair of topics on NYT dataset for TSVD, Recover-KL and Gibbs sampling. Most of the topics recovered by TSVD are more closer to Gibbs sampling topics. Indeed, the total average l1 error with topics from Gibbs sampling for topics from TSVD is 0.034, whereas for Recover-KL it is 0.047 (on the NYT dataset).\nSummary: We evaluated the proposed algorithm, TSVD, rigorously on multiple datasets with respect to the state of the art (Recover), following the evaluation methodology of [5]. In Table 2 we\nshow that the L1 reconstruction error for the new algorithm is small and on average 19.6% better than the best results of the Recover algorithms [5]. We also demonstrate that on real datasets the algorithm achieves comparable perplexity and topic coherence to Recover (Table 3. Moreover, we show on multiple real datasets that the algorithm assumptions are well justified in practice."
    }, {
      "heading" : "Conclusion",
      "text" : "Real world corpora often exhibits the property that in every document there is one topic dominantly present. A standard SVD based procedure will not be able to detect these topics, however TSVD, a thresholded SVD based procedure, as suggested in this paper, discovers these topics. While SVD is time-consuming, there have been a host of recent sampling-based approaches which make SVD easier to apply to massive corpora which may be distributed among many servers. We believe that apart from topic recovery, thresholded SVD can be applied even more broadly to similar problems, such as matrix factorization, and will be the basis for future research."
    }, {
      "heading" : "TSVD Recover-KL Gibbs",
      "text" : ""
    }, {
      "heading" : "TSVD Recover-KL Gibbs",
      "text" : ""
    }, {
      "heading" : "A Line of Proof",
      "text" : "We describe the Lemmas we prove to establish the result. The detailed proofs are in the Section B."
    }, {
      "heading" : "A.1 General Facts",
      "text" : "We start with a consequence of the no-local-minimum assumption. We use that assumption solely through this Lemma.\nLemma A.1 Let pi(ζ, l) be as in (6). If for some ζ0 ∈ {0, 1, . . . ,m} and ν ≥ 0, ∑ ζ≥ζ0 pi(ζ, l) ≥ ν\nand also ∑ ζ≤ζ0 pi(ζ, l) ≥ ν then, pi(ζ0, l) ≥ ν m .\nNext, we state a technical Lemma which is used repeatedly. It states that for every i, ζ, l, the empirical probability that Aij = ζ/m is close to the true probability. Unsurprisingly, we prove it using H-C. But we will state a consequence in the form we need in the sequel.\nLemma A.2 Let pi(ζ, l) and qi(ζ, l) be as in (6) and (7). We have ∀i, l, ζ : Prob ( |pi(ζ, l)− qi(ζ, l)| ≥ ε\n2\n√ w0 √ pi(ζ, l) +\nε2w0 2\n) ≤ 2 exp(−ε2sw0/8).\nFrom this it follows that with probability at least 1− 2 exp(−ε2w0s/8), 1\n2 qi(ζ, l)− ε2w0 ≤ pi(ζ, l) ≤ 2qi(ζ, l) + 2ε2w0."
    }, {
      "heading" : "A.1.1 Properties of Thresholding",
      "text" : "Say that a threshold ζi “splits” T (2) l if T (2) l has a significant number of j withAij > ζi/m and also a significant number of j with Aij ≤ ζi/m. Intuitively, it would be desirable if no threshold splits any Tl, so that, in B, for each i, l, either most j ∈ T (2)l have Bij = 0 or most j ∈ T (2) l have Bij = √ ζi. We now prove that this is indeed the case with proper bounds. We henceforth refer to the conclusion of the Lemma below by the mnemonic “no threshold splits any Tl”.\nLemma A.3 (No Threshold Splits any Tl) For a fixed i, l, with probability at least 1 − 2 exp(−ε2w0s/8), the following holds:\nMin (\nProb(A(2)ij ≤ ζi m ; j ∈ T (2)l ), Prob(A (2) ij > ζi m\n; j ∈ T (2)l ) ) ≤ 4mεw0.\nLet µ be a d× s matrix whose columns are given by ∀j ∈ T (2)l , µ.,j = E(B.,j | j ∈ Tl). µ ’s columns corresponding to all j ∈ Tl are the same. The entries of the matrix µ are fixed (real numbers) once we have A(1) (and the thresholds ζi are determined). Note: We have “integrated out W ”, i.e.,\nµij = ∫ W·,j Prob(W.,j |j ∈ Tl)E(Bij |W.,j).\n(So, think of W·,j for A(1) ’s columns being picked first from which ζi is calculated. W·,j for columns of A(2) are not yet picked until the ζi are determined.) But µij are random variables before we fix A(1). The following Lemma is a direct consequence of “no threshold splits any Tl”.\nLemma A.4 Let ζ ′i = Max(ζi, 8 ln(20/εw0)). With probability at least 1 − 4kd exp(−ε2sw0/8) (over the choice of A(1)):\n∀l,∀j ∈ Tl,∀i :µij ≤ εl √ ζ ′i OR µij ≥ √ ζ ′i(1− εl)\n∀l,∀i,Var(Bij) ≤ 2εlζ ′i, (10)\nwhere, εl = 4mεw0/wl.\nSo far, we have proved that for every i, the threshold does not split any Tl. But this is not sufficient in itself to be able to cluster (and hence identify the Tl), since, for example, this alone does not rule out the extreme cases that for most j in every Tl,A (2) ij is above the threshold (whence µij ≥ (1−εl) √ ζ ′l for almost all j) or for most j in no Tl is A (2) ij above the threshold, whence, µij ≤ εl √ ζ ′i for almost all j. Both these extreme cases would make us loose all the information about Tl due to thresholding; this scenario and milder versions of it have to be proven not to occur. We do this by considering how thresholds handle catchwords. Indeed we will show that for a catchword i ∈ Sl, a j ∈ Tl has A\n(2) ij above the threshold and a j /∈ Tl has A (2) ij below the threshold. Both statements will only hold with high probability, of course and using this, we prove that µ.,j and µ.,j′ are not too close for j, j′ in different Tl ’s. For this, we need the following Lemmas.\nLemma A.5 For i ∈ Sl, and l′ 6= l, we have with ηi = ⌊ Mil(α+ β + ρ)m/2 ⌋ ,\nProb(Aij ≤ ηi/m | j ∈ Tl) ≤ εw0/20, Prob(Aij ≥ ηi/m | j ∈ Tl′) ≤ εw0/20.\nLemma A.6 With probability at least 1− 8mdk exp(−ε2w0s/8), we have\nfor j ∈ Tl, j′ /∈ Tl, |µ·,j − µ·,j′ |2 ≥ 2\n9 αp0m."
    }, {
      "heading" : "A.1.2 Proximity",
      "text" : "Next, we wish to show that clustering as in TSVD identifies the dominant topics correctly for most documents, i.e., that Rl ≈ Tl for all l. For this, we will use a theorem from [9] [see also [10]] which in this context says:\nTheorem A.7 If all but a f fraction of the the B·,j satisfy the “proximity condition”, then TSVD identifies the dominant topic in all but c1f fraction of the documents correctly after polynomial number of iterations.\nTo describe the proximity condition, first let σ be the maximum over all directions v of the square root of the mean-squared distance of B.,j to µ.,j , i.e.,\nσ2 = Max‖v‖=1 1 s |vT (B− µ)|2 = 1 s ‖B− µ‖2.\nThe parameter σ should remind the reader of standard deviation, which is indeed what this is, since E(B|T1, T2, . . . , Tl) = µ. Our random variables B.,j being d− dimensional vectors, we take the maximum standard deviation in any direction.\nDefinition: B is said to satisfy the proximity condition with respect to µ, if for each l and each j ∈ Tl and and each l′ 6= l and j′ ∈ Tl′ , the projection of B.,j onto the line joining µ.,j and µ.,j′ is closer to µ.,j by at least\n∆ = c0k√ w0 σ,\nthan it is to µ.,j′ . [Here, c0 is a constant.]\nTo prove proximity, we need to bound σ. This will be the task of the subsection B.1 which relies heavily on Random Matrix Theory."
    }, {
      "heading" : "B Proofs of Correctness",
      "text" : "We start by recalling the Höffding-Chernoff (H-C) inequality in the form we use it.\nLemma B.1 Höffding-Chernoff IfX is the average of r independent random variables with values in [0, 1] and E(X) = µ, then, for an t > 0,\nProb(X ≥ µ+ t) ≤ exp ( − t 2r\n2(µ+ t)\n) ; Prob(X ≤ µ− t) ≤ exp ( − t 2r\n2µ\n) .\nProof: (of Lemma A.1) Abbreviate pi(·, l) by f(·). We claim that either (i) f(ζ) ≥ f(ζ − 1)∀1 ≤ ζ ≤ ζ0 or (ii) f(ζ + 1) ≤ f(ζ)∀m − 1 ≥ ζ ≥ ζ0. To see this, note that if both (i) and (ii) fail, we have ζ1 ≤ ζ0 and ζ2 ≥ ζ0 with f(ζ1)− f(ζ1 − 1) < 0 < f(ζ2 + 1)− f(ζ2). But then there has to be a local minimum of f between ζ1 and ζ2. If (i) holds, clearly, f(ζ0) ≥ f(ζ)∀ζ < ζ0 and so the lemma follows. So, also if (ii) holds.\nProof: (of Lemma A.2) Note that qi(ζ, l) = 1s |{j ∈ Tl : Aij = ζ/m}| = 1 s ∑s j=1Xj , where, Xj\nis the indicator variable of Aij = ζ/m ∧ j ∈ Tl. 1s ∑ j E(Xj) = pi(ζ, l) and we apply H-C with\nt = 12ε √ w0 √ pi(ζ, l) + 1 2ε 2w0 and µ = pi(ζ, l). We have t 2 µ+t ≥ ε 2w0/4, as is easily seen by calculating the roots of the quadratic t2 − 14 tε 2w0 − 14ε\n2w0µ = 0. Thus we get the claimed for Tl. Note that the same proof applies for T (1)l as well as T (2) l .\nTo prove the second assertion, let a = qi(ζ, l) and b = √ pi(ζ, l), then, b satisfies the quadratic inequalities:\nb2 − 1 2 ε √ w0b− (a+ 1 2 ε2w0) ≤ 0 ; b2 + 1 2 ε √ w0b− (a− 1 2 ε2w0) ≥ 0.\nBy bounding the roots of these quadratics, it is easy to see the second assertion after some calculation.\nProof: (of Lemma A.3) Note that ζi is a random variable which depends only on A(1). So, for j ∈ T (2)l , Aij are independent of ζi. Now, if\nProb(Aij ≤ ζi m ; j ∈ T (2)l ) > 4mεw0 and Prob(Aij > ζi m ; j ∈ T (2)l ) > 4mεw0,\nby Lemma (A.1), we have\nProb(Aij = ζi m ; j ∈ T (2)l ) > 4εw0.\nSince Prob(Aij = ζ/m; j ∈ T (1)l ) = Prob(Aij = ζ/m; j ∈ T (2) l ) for all ζ, we also have\nProb(Aij = ζi m ; j ∈ T (1)l ) = pi(ζi, l) > 4εw0. (11)\nPay a failure probability of 2 exp(−ε2sw0/8) and assume the conclusion of Lemma (A.2) and we have:\n1\ns ∣∣∣∣{j ∈ T (1)l : Aij = ζim} ∣∣∣∣ = qi(ζi, l) ≥ pi(ζi, l)− ε2√w0pi(ζi, l)− ε22 w0.\nNow, it is easy to see that pi(ζ, l)− ε2 √ w0pi(ζ, l) increases as pi(ζ, l) increases subject to (11). So,\npi(ζ, l)− ε\n2\n√ w0pi(ζ, l)− ε2\n2 w0 > (4ε− ε3/2 −\n1 2 ε2)w0 ≥ 3εw0,\ncontradicting the definition of ζi in the algorithm. This completes the proof of the Lemma.\nProof: (of Lemma A.4): After paying a failure probability of 4kd exp(−ε2sw0/8), assume no threshold splits any Tl. [The factors of k and d come in because we are taking the union bound over\nall words and all topics.] Then,\nProb(A(2)ij ≤ ζi m | j ∈ T (2)l ) = ζi∑ ζ=0 pi(ζ, l)/Prob(j ∈ Tl) ≤ 4mε w0 wl\nor Prob(A(2)ij > ζi m | j ∈ T (2)l ) = m∑ ζ=ζi+1 pi(ζ, l)/Prob(j ∈ Tl) ≤ 4mε w0 wl .\nWlg, assume that Prob(Aij ≤ ζi/m | j ∈ Tl) ≤ εl. Then, with probability, at least 1 − εl, A\n(2) ij > ζi/m. Now, either ζi < 8 ln(20/εw0) and all Bij , j ∈ Tl are zero and then µij = 0, or ζi ≥ 8 ln(20/εw0), whence, E(Bij |j ∈ Tl) ∈ [(1 − εl) √ ζ ′i, √ ζ ′i]. So, µij ≥ (1 − εl) √ ζ ′i and Prob(Bij = 0) ≤ εl. So,\nVar(B2ij |j ∈ Tl) ≤ ( √ ζ ′i−(1−εl) √ ζ ′i) 2Prob(Bij = √ ζ ′i|j ∈ Tl)+( √ ζ ′i−0) 2Prob(Bij = 0|j ∈ Tl) ≤ 2εlζ ′i.\nThis proves the lemma in this case. The other case is symmetric.\nProof: (of Lemma A.5) Recall that Pij = ∑ lMilWlj is the probability of word i in document j conditioned on W. Fix an i ∈ Sl. From the dominant topic assumption,\n∀j ∈ Tl, Pij = ∑ l1 Mil1Wl1,j ≥MilWlj ≥Milα. (12)\nThe Pij are themselves random variables. Note that (12) holds with probability 1. From Catchword assumption and (1), we get that\nMilα− (ηi/m) ≥Milα−Mil((α+ β + ρ)/2) ≥Milαδ/2.\nNow, we will apply H-C with µ − t = ηi/m and µ ≥ Milα for the m independent words in a document. By Calculus, the probability bound from H-C of exp(−t2wls/2µ) = exp(−(µ − (ηi/m))/2µ) is highest subject to the constraints µ ≥ Milα; ηi ≤ mMil(α + β + ρ)/2, when µ = Milα and ηi = mMil(α+ β + ρ)/2, whence, we get\nProb(Aij ≤ ηi/m | j ∈ Tl) ≤ exp(−Milαδ2m/8) ≤ εw0/20,\nusing (5). Now, we prove the second assertion of the Lemma. ∀j ∈ Tl′ , l′ 6= l, ∑ l1 Mil1Wl1,j = MilWlj + ∑ l1 6=l Mil1Wl1,j\n≤MilWlj + (Maxl1 6=lMil1) (1−Wlj) ≤Mil(β + ρ). (13)\nηi m −Mil(β + ρ) ≥ Mil(α+ β + ρ) 2 −Mil(β + ρ)− 1 m ≥ 3Milαδ 8 ,\nusing (5) and (1). Applying the first inequality of Lemma (B.1) with µ + t = ηi/m and µ ≤ Mil(β + ρ) and again using (5),\nProb(Aij ≥ ηi/m | j ∈ Tl′) ≤ exp ( −9Milαδ2m/64 ) ≤ εw0/20.\nLemma B.2 For i ∈ Sl, Prob(ζi < ηi) ≤ 3mke−ε 2sw0/8, with ηi as defined in Lemma A.5.\nProof: Fix attention on i ∈ Sl. After paying the failure probability of 3mke−ε 2sw0/8, assume the conclusions of Lemma (A.2) hold for all ζ, l. It suffices to show that∣∣∣{j : A(1)ij > ηi/m}∣∣∣ ≥ w0s2 , ∣∣∣{j : A(1)ij = ηim}∣∣∣ < 3w0εs, since, ηi is an integer and ζi is the largest integer satisfying the inequalities. The first statement follows from first assertion of Lemma A.5. The second statement is slightly more complicated. Using both the first and second assertions of Lemma A.5, we get that for all l′ (including l′ = l), we have\nProb(Aij = ηi/m|j ∈ T (1)l′ ) ≤ εw0/20.\n∣∣∣{j ∈ T (1)l′ : Aij = ηi/m}∣∣∣ ≤ εw0wl′s/20 + ε2√w0/wl′√εw0/20wl′s+ ε2w0wl′2 ≤ εw0s\n8 (wl′ +\n√ εwl′) + ε2w0s\n2 . Now, adding over all l′ and using ∑ l′ √ wl′ ≤ √ k √∑\nl′ wl′ = √ k, we get∣∣∣{j : A(1)ij = ηi/m}∣∣∣ ≤ εwos,\nsince ε ≤ 1/k.\nLemma B.3 Define Il = {i ∈ Sl : ζi ≥ ηi}. With probability at least 1 − 8mdk exp(−ε2w0s/8), we have for all l, ∑\ni∈Il\nζ ′i ≥ mαp0/2.\nProof: After paying the failure probability, we assume the conclusion of Lemma A.2 holds for all i, ζ, l. Now, by Lemma B.2, we have (with 1 denoting the indicator function)\nE (∑ i∈Sl Mil1(ζi < ηi) ) ≤ 3mk exp(−ε2sw0/8) ∑ i∈Sl Mil,\nwhich using Markov inequality implies that with probability at least 1− 6mk exp(−ε2sw0/8),∑ i∈Il Mil ≥ 1 2 ∑ i∈Sl Mil ≥ p0/2, (14)\nusing (4). Note that by (5), no catchword has ζ ′i set to zero. So,∑ i∈Il ζ ′i = ∑ i∈Il ζi ≥ ∑ i∈Il ηi ≥ ∑ Il mMilα/2 ≥ αp0m/2.\nProof: (of Lemma A.6) For this proof, i will denote an element of Il. By Lemma A.5,\n∀i ∈ Il, l′ 6= l,Prob(Aij > ζi m |j ∈ T (1)l′ ) ≤ Prob(Aij > ηi/m|j ∈ T (1) l′ ) ≤ εw0 20 . (15)\nThis implies by Lemma A.2, for l′ 6= l,∣∣∣∣{j ∈ T (1)l′ : Aij > ζim} ∣∣∣∣ ≤ wl′s(εw020 + ε√w0/wl′√εw0/4)+ w0ε2s/2. (16)\nSumming over all l′ 6= l, we get (using ∑ l′ √ wl′ ≤ √∑ wl′ √ k ≤ 1/\n√ ε by (9))∑\nl′ 6=l\n∣∣∣∣{j ∈ T (1)l′ : Aij > ζim} ∣∣∣∣ ≤ εw0s.\nNow the definition of ζi in the algorithm implies that:∑ ζ>ζi qi(ζ, l) = ∣∣∣∣{j ∈ T (1)l : Aij > ζim} ∣∣∣∣ ≥ (w02 − εw0) s ≥ w0s/4.\nSo, by Lemma A.2, Prob(j ∈ Tl;Aij > ζi/m) = ∑ ζ>ζi pi(ζ, l) ≥ 1 2 ∑ ζ>ζi qi(ζ, l)− ε2w0m\n≥ w0 8 − ε2w0m ≥ w0/9,\nusing (9). Next let p̃ = Prob(Aij = ζi/m; j ∈ Tl). Since |{j ∈ T (1)l : Aij = ζi/m}| ≤ 3εw0s, by the definition of ζi in the algorithm, we get by a similar argument\np̃ ≤ 2qi(ζi, l) + 2ε2w0 ≤ 7εw0. (17)\nNow, by Lemma A.1, we have p̃ ≥ Min ( w0 9m , 1 m Prob(Aij ≤ ζi/m; j ∈ T (2)l ) ) .\nBy (9), 7εw0 < w0/9m and so we get:\nProb(Aij ≤ ζi/m; j ∈ T (2)l ) ≤ 7εmw0.\nNoting that by (5), no catchword has ζ ′i set to zero, Prob(Bij = 0|j ∈ T (2) l ) ≤ 7εmw0/wl ≤ 1/6, by (9). This implies\nµij ≥ 5\n6\n√ ζ ′i.\nNow, by (15), we have for j′ /∈ Tl, µij′ ≤ √ ζ ′i/6.\nSo, we have |µ·,j − µ·,j′ |2 ≥ ∑ i∈Il (µij − µij′)2 ≥ (4/9) ∑ i∈Il ζ ′i.\nNow Lemma (B.3) implies the current Lemma."
    }, {
      "heading" : "B.1 Bounding the Spectral norm",
      "text" : "Theorem B.4 Fix an l. For j ∈ Tl, let R.,j = B.,j − µ.,j . [The R.,j , j ∈ Tl are vector-valued random variables which are independent, even conditioned on the partition T1, T2, . . . , Tk.] With probability at least 1− 10mdk exp(−ε2w0s/8), we have ||R||2 ≤ ckw0εsm2. Thus,\n||B− µ||2 ≤ cεw0sm2k2.\nWe will apply Random Matrix Theory, in particular the following theorem, to prove Theorem B.4.\nTheorem B.5 [15, Theorem 5.44] Suppose R is a d × r matrix with columns R·,j which are independent identical vector-valued random variables. Let U = E(R·,jRT·,j) be the inertial matrix of R·,j . Suppose |R·,j | ≤ ν always. Then, for any t > 0, with probability at least 1−de−ct 2 , we have4\n||R|| ≤ ||U ||1/2 √ r + tν.\nWe need the following Lemma first.\nLemma B.6 With probability at least 1− exp(−sεw0/3), we have ζ0 ≤ 4mλ ; ∑ i ζ ′i ≤ 4km (18)\nProof: The probability of word i in document j, is given by: Pij = ∑ lMilWlj ≤ λi (where, λi = maxlMil). If λi < 1m ln(20/εw0), then, Prob(Aij > (8/m) ln(20/εw0)) ≤ εw0 by H-C (since Aij is the average of m i.i.d. trials). Let Xj be the indicator function of Aij > (8/m) ln(20/εw0). Xj are independent and so using H-C, we see that with probability at least 1− exp(−εw0s/3), less than w0s/2 of the Aij are greater (8/m) ln(20/εw0), whence, ζ ′i = 0. So we have (using the union bound over all words):\nProb  ∑ i:λi<(1/m) ln(20/εw0) ζ ′i > 0  ≤ d exp(−εw0s/3). If λi ≥ (1/m) ln(20/εw0), then\nProb(Aij > 4λi) ≤ e−λim ≤ εw0/2, 4||R|| denotes the spectral norm of R.\nwhich implies by the same Xj kind of argument that with probability at least 1 − exp(−εw0s/4), for a fixed i, ζi ≤ 4λim. Using the union bound over all words and adding all i, we get that with probability at least 1− 2d exp(−εw0s/4),∑\ni ζ ′i ≤ 4m ∑ i λi ≤ 4m ∑ i,l Mil ≤ 4km.\nNow we prove the bound on ζ0. For each fixed i, j, we have Prob(Aij ≥ 4λ) ≤ e−mλ ≤ εw0. Now, let Yj be the indicator variable of Aij ≥ 4λ. The Yj , j = 1, 2, . . . , s are independent (for each fixed i). So, Prob(ζi ≥ 4mλ) ≤ Prob( ∑ j Yj ≥ w0s/2) ≤ e−εwos/3. Using an union bound over all words, we get that Prob(ζ0 > 4mλ) ≤ de−εw0/3 by H-C.\nProof: (of Theorem B.4) First, ||U || = Max|v|=1E(vTR·,j)2 ≤ E(|R·,j |2) ≤ 2εl ∑ i ζ ′i ≤ 8εlkm, by Lemma (B.6) and Lemma (A.4). We can also take ν = 2 √ km in Theorem B.5 and with t =√\nεmw0s, the first statement of the current theorem follows (noting r = wls). The second statement follows by just paying a factor of k for the k topics."
    }, {
      "heading" : "B.2 Proving Proximity",
      "text" : "From Theorem (B.4), the σ in definition A.1.2 is √ cεw0m2k2. So, the ∆ in definition A.1.2 is\ncc0 √ εk2m. So it suffices to prove:\nLemma B.7 For j ∈ Tl and j′ ∈ Tl′ , l′ 6= l, let B̂.,j be the projection of B.,j onto the line joining µ.,j and µ.,j′ . The probability that |B̂.,j − µ.,j′ | ≤ |B̂.,j − µ.,j | + cc0k2 √ εm is at most cεmw0 √ k/ √ αp0. Hence, with probability at least 1 − cmdk exp(−cw0ε2s), the number of j for which B.,j does not satisfy the proximity condition is at most cε0w0δs/10c1.\nProof: After paying the failure probability of cmdk exp(−w0sε2/8), of Lemmas (B.6) and (A.6), assume that ζ0 ≤ 4mλ , |µ.,j − µ.,j′ |2 ≥ 2αmp0/9 and ∑ i ζ ′ i ≤ 4km.\nLet X = (B·,j − µ·,j) · (µ·,j′ − µ·,j). X is a random variable, whose expectation is 0 conditioned on j ∈ T (2)l .\nSince Prob(Bij = √ ζ ′i|j ∈ Tl) = µij/ √ ζ ′i, we have:\nE|X| ≤ E ∑ i |Bij − µij | |µij′ − µij |\n= ∑ i [ ( √ ζ ′i − µij) µij√ ζ ′i + (1− µij√ ζ ′i )µij ] |µij − µij′ |\n≤ 2εl ∑ i √ ζ ′i|µij − µij′ | by Lemma A.4\n≤ 2εl (∑ i ζ ′i )1/2 |µ.,j − µ.,j′ | ≤ 4εl √ km|µ.,j − µ.,j′ |.\nNow apply Markov inequality to get\nProb(|X| ≥ 1 8 |µ.,j − µ.,j′ |2) ≤ 32εl\n√ km/|µ.,j − µ.,j′ | ≤ 80εl √ k/αp0.\nIf |X| ≤ |µ.,j − µ.,j′ |2/8, then, |B̂.,j − µ.,j′ | ≥ |B̂.,j − µ.,j |+ 3|µ.,j − µ.,j′ |/4 ≥ |B̂.,j − µ.,j |+ cc0k 2 √ εm, by (9). This proves the first assertion of the Lemma.\nThe second statement of Lemma follows by applying H-C to the random variable ∑ j Zj/s, where, Zj is the indicator random variable of B.,j not satisfying the proximity condition (and using (9).)\nThe last Lemma implies that the algorithm TSVD correctly identifies the dominant topic in all but at most ε0w0/10 fraction of the documents by Theorem (A.7).\nLemma B.8 With probability at least 1− exp(−w0sε2/8), TSVD correctly identifies the dominant topic in all but at most ε0w0δ/10 fraction of documents in each Tl.\nB.3 Identifying Catchwords\nRecall the definition of Jl from Step 5a of the algorithm. The two lemmas below are roughly converses of each other which prove roughly that Jl consists of those i for which Mil is strictly higher than Mil′ . Using them, Lemma B.11 says that almost all the ε0w0s/2 documents found in Step 6 of the algorithm are 1− δ pure for topic l.\nLemma B.9 Let ν = γ(1 − 2δ)/(1 + δ). If i ∈ Jl, then for all l′ 6= l, Mil ≥ νMil′ and Mil ≥ 3 mδ2 ln(20/εw0).\nProof: It is easy to check that the assumptions (2) and (1)imply ν ≥ 2. Let i ∈ Jl. By the definition of Jl in the algorithm, g(i, l) ≥ (4/mδ2) ln(20/εw0). Note that Pij ≤ Maxl1Mil1 for all j. So,\nmax l1\nMil1 ≥ 3\nmδ2 ln(20/εw0). (19)\nIf the Lemma is false, then, for l′ attaining Maxl1 6=lMil1 , we have Mil < νMil′ . Recall Rl′ defined in Step 4c of the algorithm. Let\nT̂l′ = Rl′ ∩ ( the set of 1− δ pure documents in Tl′).\nSince all but ε0w0s/10 documents in Tl′ belong to Rl′ , we have |T̂l′ | ≥ 0.9ε0w0s. For j ∈ T̂l′ , Pij ≥ Mil′Wl′j ≥ (1 − δ)Mil′ . So, Prob(Aij < Mil′(1 − 2δ)) ≤ exp(−mδ2Mil′/3) ≤ εw0/4 using (19). Thus the number of documents inRl′ for whichAij ≥Mil′(1−2δ) is at least 0.9ε0w0s− 3εw0s ≥ .6ε0w0s. This implies that with probability at least 1−exp(−cε2sw0), g(i, l′) ≥Mil′(1− 2δ).\nNow, for j ∈ Tl, Pij ≤ Max(Mil,Mil′) ≤ νMil′ . So, Prob(Aij > Mil′ν(1 + δ)) ≤ εw0/4, again using (19). At most ε0w0s/10 documents of other Tl1 , l1 6= l are in Rl (by Lemma B.8). So, whp, g(i, l) ≤Mil′ν(1 + δ) and so we have\ng(i, l) ≤ ν(1 + δ) 1− 2δ g(i, l′),\ncontradicting the definition of Jl. So, we must have that Mil ≥ νMil′ for all l′ 6= l. The second assertion of the Lemma now follows from (19).\nLemma B.10 If Mil ≥ Max ( 5 mδ2 ln(20/εw0),Maxl′ 6=l 1 ρ Mil′ ) , then, with probability at least 1− exp(−cε2w0s), we have that i ∈ Jl. So, Sl ⊆ Jl.\nProof: Let T̂l = Rl∩ (set of 1 − δ pure documents in Tl). For j ∈ T̂l, Pij ≥ Mil(1 − δ) which implies that whp, (since |T̂l| ≥ 0.9ε0s, again by Lemma B.8)\ng(i, l) ≥Mil(1− 2δ) (20)\nOn the other hand, for j ∈ Tl′ and for l′ 6= l, i : Mil′ ≤ ρMil (hypothesis of the Lemma), Pij ≤MilWlj + ρMil(1−Wlj) ≤Mil(β + ρ). So whp,\ng(i, l′) ≤Mil(β + ρ)(1 + δ). (21)\nFrom (20) and (21) and hypothesis of the Lemma, it follows that g(i, l) ≥ Max ( 4\nmδ2 ln(1/εw0), (1− 2δ) (1 + δ)(β + ρ) g(i, l′)\n) .\nSo, i ∈ Jl as claimed. It only remains to check that i in Sl satisfies the hypothesis of the Lemma which is obvious.\nLemma B.11 Let νl = ∑ i∈Jl Mil and let L be the set of b(sε0w0/2)c A.,j ’s whose average is returned in Step 6 of the TSVD Algorithm as M̂.,l. With probability at least 1− c exp(−cε2w0s), we have: ∣∣∣∣∣∣ 1|L| ∑ j∈L (A.,j −M.,l) ∣∣∣∣∣∣ 1 ≤ O(δ). (22)\nProof: The proof needs care since Jl is itself a random set dependent on A(2). To understand the proof intuitively, if we pretend that there is no conditioning of Jl on A(2), then, basically, our arguments in Lemma B.9 would yield this Lemma. However, we have to work harder to avoid conditioning effects. Define\nKl = {i : Mil ≥ νMil′∀l′ 6= l;Mil ≥ (3/mδ2) ln(20/εw0)}.\nNote that Kl is not a random set; it does not depend on A, just on M which is fixed. Lemma B.9 proved that Jl ⊆ Kl. Since ∑ iMil = 1, we have |Kl| ≤ mδ2/3. The probability bounds given here will be after conditioning on W. [In other words, we prove statements of the form Prob(E|W) ≤ a which is (the usual) shorthand for: for each possible value w of the matrix W , Prob(E |W = w) ≤ a.] This will be possible, since, even after fixing W , the A.,j are independent, though certainly not identically distributed now, since the W.,j may differ.\nFor i ∈ Kl, we have for all j, Pij = ∑ l′Mil′Wl′j ≤Mil, since, Mil′ ≤Mil/ν ≤Mil/2 for l′ 6= l. For any x ≤Mil,\nProb(|A(2)ij − Pij | ≥ δMil |W,Pij = x) ≤ 2 exp ( − δ 2M2ilm\n2(1 + δ)x\n) ≤ 2 exp ( −mδ\n2Mil 3\n) .\nNoting that mδ2Mil ≥ 3 ln(20/εw0) for i ∈ Kl, we get\nProb(|A(2)ij − Pij | ≥ δMil |W ) ≤ εw0/20.\nUsing the union bound over all i ∈ Kl yields (for each j ∈ [s]),\nProb(∃i ∈ Kl : |A(2)ij − Pij | ≥ δMil |W ) ≤ mδ2εw0 20 ≤ ε0w0δ 2 20 ,\nby (9). Let BAD = {j : ∃i ∈ Kl : |A(2)ij − Pij | ≥ δMil}.\nUsing the independence of A.,j , (even conditioned on W ), apply H-C to get that for the event\nE : |BAD| ≥ sε0w0δ 10\nProb(E |W ) ≤ 2 exp(−cεw0s). (23)\nAfter paying the failure probability, for the rest of the proof, assume that ¬E holds. Let Ul = {j : Wlj ≥ 1− δ}. By the dominant topic assumption, we know that |Ul| ≥ ε0w0s. So, |Ul \\BAD| ≥ 4ε0w0s/5 and we get (using (9)):\n∀Nl ⊆ Kl, ∣∣∣∣∣{j : Wlj ≥ 1− δ ; ∑ i∈Nl A (2) ij ≥ (1− 2δ) ∑ i∈Nl Mil} ∣∣∣∣∣ ≥ 4ε0w0s/5. (24) Now consider j : Wlj ≤ (1− 6δ) and i ∈ Kl.\nPij ≤MilWlj + ∑ l′ 6=l Mil′Wl′j ≤Mil(1− 6δ) + Mil ν 6δ ≤Mil(1− 3δ),\nsince by (2) and (1), we have that ν ≥ 2. So, for a j with Wlj ≤ 1 − 6δ to have ∑ i∈Jl A (2) ij ≥ (1− 2δ)νl, j must be in BAD. This gives us\n∀Nl ⊆ Kl, ∣∣∣∣∣{j : Wlj ≤ (1− 6δ) ; ∑ i∈Nl A (2) ij ≥ (1− 2δ) ∑ i∈Nl Mil} ∣∣∣∣∣ ≤ ε0w0δs/10. (25)\nLet L be the set of bε0w0s/2c j achieving the highest ∑ i∈Jl A (2) ij . By the above, L contains at most ε0δs/5 j’s with Wlj < 1 − 6δ, the rest being j with Wlj ≥ 1 − 6δ. So are we finished with the proof - i.e., does this prove (22)? The answer is unfortunately, no. We can show from the above that ∑ i∈Jl |Aij −Mil| ≤ O(δ) for most j ∈ L and so the average of A.,j , j ∈ L is close to M.,l when we restrict only to i ∈ Jl. But, on words not in Jl, we have not proved that the average of A\n(2) ij , j ∈ L is close to M.,l. We will do so presently, but first note that this is not a trivial task. For example, if say, Mil = Ω(1/d) for all i /∈ Kl (or for a fraction of them) so that ∑ i/∈Kl Mil ∈ Ω(1), then an individual A.,j could have O(m) of the Aij , i /∈ Kl set to 1/m. [One copy of each of O(m) words picked to be in the document.] But then we would have |A.,j −M.,l|1 ∈ Ω(1) which is too much error. We will show that since we are taking the average over L and not just a single document, this will not happen. But the proof is again tricky because of conditioning: both Jl and L depend on the data. So, to argue that the average over L behaves well, we have to prove it for each possible L. There are at most ( s b(ε0w0s/2)c ) ≤ (2/ε0w0s)ε0w0s/2 possible L ’s and we will be able to take the union bound over all of them.\nClaim B.1 With probability at least 1 − cmdk exp(−cε2w0s), we have for each L ⊆ [s] with |L| = b(ε0w0s/2)c: ∣∣∣∣∣∣ 1|L| ∑ j∈L (A·,j − P·,j) ∣∣∣∣∣∣ 1 ≤ O(δ).\nProof: LetX = ∣∣∣ 1|L|∑j∈L(A·,j − P·,j)∣∣∣\n1 . EachA·,j is itself the average ofm independent choices\nof words. So\nX = ∣∣∣∣∣∣ 1m|L| ∑ j∈L m∑ r=1 (A (r) ·,j − P·,j) ∣∣∣∣∣∣ 1 .\nSo, X is a function of m|L| independent random variables. Changing any one of these arbitrarily changes X by at most 1/m|L|. Recall the Bounded Difference inequality [14]:\nLemma B.12 Let z1, . . . , zn, z′i are (n + 1) independent random variables each taking values in Z and h be a measurable function from Zn to R with constants ri ≥ 0, i ∈ [n] such that\nmaxz1,...,zn,z′i∈Z |h(z1, . . . , zn)− h(z1, . . . , z ′ i, . . . , zn)| ≤ ri If E(h) is the expectation of h then Prob (|h− E(h)| ≥ t) ≤ 2 exp ( − t\n2∑n i=1 r 2 i\n) .\nUsing this we get Prob(|X − EX| ≥ cδ) ≤ exp(−cδ2ε0w0sm). The “extra” m in the exponent helps kill the upper bound of (2/ε0w0s)ε0w0s/2 on the number of L ’s and gives us |X − EX| ≤ O(δ)∀L. We still have to bound EX . By Jenson’s inequality,\nEX ≤ 1 |L| ∑ i\nE (∑\nj∈L (Aij − Pij)) 2 1/2 ≤ 1 |L| ∑ i √∑ j∈Ll Pij ≤ √ d/ √ |L|,\nwhere, we have used the independence of A·,j and the fact that E(Aij − Pij)2 = Var(Aij). This proves the claim. We now bound ∣∣∣ 1|L|∑j∈L(P.,j −M.,l)∣∣∣ 1 . Note that by (24) and (25), all but at most ε0w0δs/10 of the j ’s in L have Wlj ≥ 1 − 6δ, whence, we get |P.,j −M,l|1 ≤ 6δ for these j. For the j with Wlj < 1− 6δ, we just use |P.,j −M.,l|1 ≤ 2. So∣∣∣∣∣∣ 1|L| ∑ j∈L (P.,j −M.,l) ∣∣∣∣∣∣ 1 ≤ 6δ + 0.2ε0w0δs 10|Ll| ∈ O(δ).\nThis finishes the proof of (22)."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2014,
    "abstractText" : "Topic models, such as Latent Dirichlet Allocation (LDA), posit that documents<lb>are drawn from admixtures of distributions over words, known as topics. The<lb>inference problem of recovering topics from such a collection of documents drawn<lb>from admixtures, is NP-hard. Making a strong assumption called separability, [4]<lb>gave the first provable algorithm for inference. For the widely used LDA model,<lb>[6] gave a provable algorithm using clever tensor-methods. But [4, 6] do not learn<lb>topic vectors with bounded l1 error (a natural measure for probability vectors).<lb>Our aim is to develop a model which makes intuitive and empirically supported<lb>assumptions and to design an algorithm with natural, simple components such as<lb>SVD, which provably solves the inference problem for the model with bounded l1<lb>error. A topic in LDA and other models is essentially characterized by a group of<lb>co-occurring words. Motivated by this, we introduce topic specific Catchwords,<lb>a group of words which occur with strictly greater frequency in a topic than any<lb>other topic individually and are required to have high frequency together rather<lb>than individually. A major contribution of the paper is to show that under this<lb>more realistic assumption, which is empirically verified on real corpora, a singu-<lb>lar value decomposition (SVD) based algorithm with a crucial pre-processing step<lb>of thresholding, can provably recover the topics from a collection of documents<lb>drawn from Dominant admixtures. Dominant admixtures are convex combination<lb>of distributions in which one distribution has a significantly higher contribution<lb>than the others. Apart from the simplicity of the algorithm, the sample complexity<lb>has near optimal dependence on w0, the lowest probability that a topic is domi-<lb>nant, and is better than [4]. Empirical evidence shows that on several real world<lb>corpora, both Catchwords and Dominant admixture assumptions hold and the pro-<lb>posed algorithm substantially outperforms the state of the art [5].",
    "creator" : "LaTeX with hyperref package"
  }
}