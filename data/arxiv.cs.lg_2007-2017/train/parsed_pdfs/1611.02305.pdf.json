{
  "name" : "1611.02305.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Learning Influence Functions from Incomplete Observations",
    "authors" : [ "Xinran He", "Ke Xu", "David Kempe", "Yan Liu" ],
    "emails" : [ "yanliu.cs}@usc.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Many social phenomena, such as the spread of diseases, behaviors, technologies, or products, can naturally be modeled as the diffusion of a contagion across a network. Owing to the potentially high social or economic value of accelerating or inhibiting such diffusions, the goal of understanding the flow of information and predicting information cascades has been an active area of research [10, 7, 9, 14, 1, 20]. In this context, a key task is learning influence functions : the functions mapping sets of initial adopters to the individuals who will be influenced (also called active) by the end of the diffusion process [10].\nMany methods have been developed to solve the influence function learning problem [9, 7, 5, 8, 3, 16, 18, 24, 25]. Most approaches are based on fitting the parameters of a diffusion model based on observations, e.g., [8, 7, 18, 9, 16]. Recently, Du et al. [3] proposed a model-free approach to learn influence functions as coverage functions; Narasimhan et al. [16] establish proper PAC learnability of influence functions under several widely-used diffusion models.\nAll existing approaches rely on the assumption that the observations in the training dataset are complete, complete, in the sense that all active nodes are observed as being active. However, this assumption fails to hold in virtually all practical applications [15, 6, 2, 21]. For example, social media data are usually collected through crawlers or acquired with public APIs provided by social media platforms, such as Twitter or Facebook. Due to non-technical reasons and established restrictions on the APIs, it is often impossible to obtain a complete set of observations even for a short period\nar X\niv :1\n61 1.\n02 30\n5v 1\n[ cs\n.S I]\n7 N\nov 2\n01 6\nof time. In turn, the existence of unobserved nodes, links, or activations may lead to a significant misestimation of the diffusion model’s parameters [19, 15].\nIn this paper, we take a step towards addressing the problem of learning influence functions from incomplete observations (Here specifically we mean missing activation in the observed cascades). Missing data are a complicated phenomenon, but to address it meaningfully and rigorously, one must make at least some assumptions about the process resulting in the loss of data. As a first step, we focus on random loss of observations: for each activated node independently, the node’s activation is observed only with probability r, the retention rate, and fails to be observed with probability 1− r. Random observation loss naturally occurs when crawling data from social media, where rate restrictions are likely to affect all observations equally.\nWe establish both proper and improper PAC learnability of influence functions under incomplete observations for two popular diffusion models: the Discrete-Time Independent Cascade (DIC) and Discrete-Time Linear Threshold (DLT) models. The result is proved by interpreting the incomplete observations as complete observations in a transformed graph, In fact, randomly missing observations do not significantly increase the required sample complexity.\nThe PAC learnability result implies good sample complexity bounds for the DIC and DLT models. However, even without missing observations, proper PAC learnability of the CIC and other models appears to be more challenging. Furthermore, the PAC learnability result does not lead to an efficient algorithm, as it involves marginalizing a large number of hidden variables (one for each node not observed to be active).\nTowards designing more practical algorithms and obtaining learnability under a broader class of diffusion models, we pursue improper learning approaches. Concretely, we use the parameterization of Du et al. [3] in terms of reachability basis functions, and optimize a modified loss function suggested by Natarajan et al. [17] to address incomplete observations. We prove that the algorithm ensures improper PAC learning for the DIC, DLT and Continuous-Time Independent Cascade (CIC) models. Experimental results on synthetic cascades generated from these diffusion models and real-world cascades in the MemeTracker dataset demonstrate the effectiveness of our approach. Our algorithm achieves nearly a 20% reduction in estimation error compared to the best baseline methods on the MemeTracker dataset, by compensating for incomplete observations.\nSeveral recent works also aim to address the issue of missing observations in social network analysis, but with different emphases. For example, Chierichetti et al. [2] and Sadikov et al. [21] mainly focus on recovering the size of a diffusion process, while our task is to learn the influence functions from several incomplete cascades. Myers et al. [15] mainly aim to model unobserved external influence in diffusion. Duong et al. [6] examine learning diffusion models with missing links from complete observations, while we learn influence functions from incomplete cascades with missing activations. Most related to our work are papers by Wu et al. [23] and simultaneous work by Lokhov [13]. Both study the problem of network inference under incomplete observations. Lokhov proposes a dynamic message passing approach to marginalize all the missing activations, in order to infer diffusion model parameters using maximum likelihood estimation, while Wu et al. develop an EM algorithm. Notice that the goal of learning the model parameters differs from our goal of learning the influence functions directly. Both [13] and [23] provide empirical evaluation, but do not provide theoretical guarantees."
    }, {
      "heading" : "2 Preliminaries",
      "text" : ""
    }, {
      "heading" : "2.1 Models of Diffusion and Incomplete Observations",
      "text" : "Diffusion Model. We model propagation of opinions, products, or behaviors as a diffusion process over a social network. The social network is represented as a directed graph G = (V,E), where n = |V | is the number of nodes, and m = |E| is the number of edges. Each edge e = (u, v) is associated with a parameter wuv representing the strength of influence user u has on v. We assume that the graph structure (the edge set E) is known, while the parameters wuv are to be learned. Depending on the diffusion model, there are different ways to represent the strength of influence between individuals. Nodes can be in one of two states, inactive or active. We say that a node gets activated if it adopts the opinion/product/behavior under the diffusion process. In this work, we focus on progressive diffusion models, where a node remains active once it gets activated.\nThe diffusion process begins with a set of seed nodes (initial adopters) S, who start active. The process then proceeds in discrete or continuous time: according to a probabilistic process, additional nodes may become active based on the influence from their neighbors. Let N(v) be the in-neighbors of node v and At the set of nodes activated by time t. We consider the following three widely used diffusion models:\n• Discrete-time Linear Threshold (DLT) model [10]: Each node v has a threshold θv drawn independently and uniformly from the interval [0, 1]. The diffusion under the DLT model unfolds in discrete time steps: a node v becomes active at step t if the total incoming weight from its neighbors exceeds its threshold: ∑ u∈N(v)∩At−1 wuv ≥ θv.\n• Discrete-time Independent Cascade (DIC) model [10]: The DIC model is also a discrete-time model. Under the DIC model, the weight wuv ∈ [0, 1] captures an activation probability. When a node u becomes active in step t, it attempts to activate all currently inactive neighbors in step t+ 1. For each neighbor v, it succeeds with probability wuv. If it succeeds, v becomes active; otherwise, v remains inactive. Once u has made all these attempts, it does not get to make further activation attempts at later times.\n• Continuous-time Independent Cascade (CIC) model [8]: The CIC model unfolds in continuous time. Each edge e = (u, v) is associated with a delay distribution with wuv as its parameter. When a node u becomes newly active at time t, for every neighbor v that is still inactive, a delay time duv is drawn from the delay distribution. duv is the duration it takes u to activate v, which could be infinite (if u does not succeed in activating v). Nodes are considered activated by the process if they are activated within a specified observation window [0, τ ].\nFix one of the diffusion models defined above and its parameters. For each seed set S, let ∆S be the distribution of final active sets when the seed set is S. (In the case of the DIC and DLT model, this is the set of active nodes when no new activations occur; for the CIC model, it is the set of nodes active at time τ .) For any node v, let Fv(S) = ProbA∼∆S [v ∈ A] be the (marginal) probability that v is activated according to the dynamics of the diffusion model with initial seeds S. Then, define the influence function F : 2V → [0, 1]n mapping seed sets to the vector of marginal activation probabilities: F (S) = [F1(S), . . . , Fn(S)]. Notice that the marginal probabilities do not capture the full information about the diffusion process contained in ∆S (since they do not observe co-activation patterns), but they are sufficient for many applications, such as influence maximization [10] and influence estimation [4].\nCascades and Incomplete Observations. We focus on the problem of learning influence functions from cascades. A cascade C = (S,A) is a realization of the random diffusion process; S is the set of seeds and A ∼ ∆S , A ⊇ S is the set of activated nodes at the end of the random process. Similar to Narasimhan et al. [16], we focus on activation-only observations, namely, we only observe which nodes were activated, but not when these activations occurred.1\nTo capture the fact that some of the node activations may have been unobserved, we use the following model of independently randomly missing data: for each (activated) node v ∈ A \\ S, the activation of v is actually observed independently with probability r. With probability 1− r, the node’s activation is unobservable. For seed nodes v ∈ S, the activation is never lost. Formally, define Ã as follows: each v ∈ S is deterministically in Ã, and each v ∈ A \\ S is in Ã independently with probability r. Then, the incomplete cascade is denoted by C̃ = (S, Ã)."
    }, {
      "heading" : "2.2 Objective Functions and Learning Goals",
      "text" : "To measure estimation error, we primarily use a quadratic loss function, as in [16, 3]. For two n-dimensional vectors x,y, the quadratic loss is defined as `sq(x,y) = 1n · ||x− y|| 2 2. We also use this notation when one or both arguments are sets: when an argument is a set S, we formally mean to use the indicator function χS as a vector, where χS(v) = 1 if v ∈ S, and χS(v) = 0 otherwise. In particular, for an activated set A, we write `sq(A,F (S)) = 1n ||χA − F (S)|| 2 2.\nWe now formally define the problem of learning influence functions from incomplete observations. Let P be a distribution over seed sets (i.e., a distribution over 2V ), and fix a diffusion modelM and parameters, together giving rise to a distribution ∆S for each seed set. The algorithm is given a set of M incomplete cascades C̃ = {(S1, Ã1), . . . , (SM , ÃM )}, where each Si is drawn independently from P , and Ãi is obtained by the incomplete observation process described above from the (random) activated set Ai ∼ ∆Si . The goal is to learn an influence function F that accurately captures the diffusion process. Accuracy of the learned influence function is measured in terms of the squared error with respect to the true model: errsq[F ] = ES∼P,A∼∆S [`sq(A,F (S))]. That is, the expectation is over the seed set and the randomness in the diffusion process, but not the data loss process.\nPAC Learnability of Influence Functions. We characterize the learnability of influence functions under incomplete observations using the Probably Approximately Correct (PAC) learning framework [22]. Let FM be the class of influence functions under the diffusion model M, and FL the class of influence functions the learning algorithm is allowed to choose from. We say that FM is PAC learnable if there exists an algorithm A with the following property: for all ε, δ ∈ (0, 1), all parametrizations of the diffusion model, and all distributions P over seed sets S: when given activation-only and incomplete training cascades C̃ = {(S1, Ã1), . . . , (SM , ÃM )} with M ≥ poly(n,m, 1/ε, 1/δ), A outputs an influence function F ∈ FL satisfying:\nProbC̃ [errsq[F ]− errsq[F ∗] ≥ ε] ≤ δ.\nHere, F ∗ ∈ FM is the ground truth influence function. The probability is over the training cascades, including the seed set generation, the stochastic diffusion process, and the missing data process. We say that an influence function learning algorithm A is proper if FL ⊆ FM; that is, the learned influence function is guaranteed to be an instance of the true diffusion model. Otherwise, we say that A is an improper learning algorithm.\n1Narasimhan et al. [16] refer to this model as partial observations; we change the terminology to avoid confusion with “incomplete observations.”"
    }, {
      "heading" : "3 Proper PAC Learning under Incomplete Observations",
      "text" : "In this section, we establish proper PAC learnability of influence functions under the DIC and DLT models. For both diffusion models, FM can be parameterized by an edge parameter vector w, whose entries we are the activation probabilities (DIC model) or edge weights (DLT model). Our goal is to find an influence function Fw ∈ FM that outputs accurate marginal activation probabilities. While our goal is proper learning — meaning that the function must be from FM — we do not require that the inferred parameters match the true edge parameters w. Our main theoretical results are summarized in Theorem 1 and Theorem 2.\nTheorem 1. Let λ ∈ (0, 0.5). The class of influence functions under the DIC model in which all edge activation probabilities satisfy we ∈ [λ, 1− λ] is PAC learnable under incomplete observations with retention rate r. The sample complexity is Õ(n\n3m ε2r4 ).\nTheorem 2. Let λ ∈ (0, 0.5), and consider the class of influence functions under the DLT model such that the edge weight for every edge satisfies we ∈ [λ, 1− λ], and for every node v, 1− ∑ u∈N(v)wuv ∈ [λ, 1 − λ]. This class is PAC learnable under incomplete observations with retention rate r. The sample complexity is Õ(n\n3m ε2r4 ).\nIn this section, we present the intuition and a proof sketch for the two theorems. Details of the proof are provided in Appendix A.\nThe key idea of the proof of both theorems is that a set of incomplete cascades C̃ on G under the two models can be considered as essentially complete cascades on a transformed graph Ĝ = (V̂ , Ê). The influence functions of nodes in Ĝ can be learned using a modification of the result of Narasimhan et al. [16]. Subsequently, the influence functions for G are directly obtained from the influence functions for Ĝ, by exploiting that influence functions only focus on the marginal activation probabilities.\nThe transformed graph Ĝ is built by adding a layer of n nodes to the original graph G. For each node v ∈ V of the original graph, we add a new node v′ ∈ V ′ and a directed edge (v, v′) with known and fixed edge parameter ŵvv′ = r. (Conveniently, the same parameter value serves as activation probability under the DIC model and as edge weight under the DLT model.) The new nodes V ′ have no other incident edges, and we retain all edges e = (u, v) ∈ E. Inferring their parameters is the learning task. An example of the transformation on a simple graph consisting of four nodes is shown in Figure 1.\nFor each observed (incomplete) cascade (Si, Ãi) on G (with Si ⊆ Ãi), we produce an observed activation set A′i as follows: (1) for each v ∈ Ãi \\ Si, we let v′ ∈ A′i deterministically; (2) for each v ∈ Si independently, we include v′ ∈ A′i with probability r. This defines the training cascades Ĉ = {(Si, A′i)}.\nNow consider any edge parameters w, applied to both G and the first layer of Ĝ. Let F (S) denote the influence function on G, and F̂ (S) = [F̂1′(S), . . . , F̂n′(S)] the influence function of the nodes in the added layer V ′ of Ĝ. Then, by the transformation, we get that\nF̂v′(S) = r · Fv(S) (1)\nfor all nodes v ∈ V . And by the definition of the observation loss process, we also have that for all non-seed nodes v /∈ Si,\nProb[v ∈ Ãi] = r · Fv(S) = F̂v′(S).\nWhile the cascades Ĉ are not complete on all of Ĝ, in a precise sense, they provide complete information on the activation of nodes in V ′. In Appendix A, we show that Theorem 2 of Narasimhan et al. [16] can be extended to provide identical guarantees for learning F̂ (S) from the modified observed cascades Ĉ. For the DIC model, this is a straightforward modification of the proof from [16]. For the DLT model, [16] had not established PAC learnability2, so we provide a separate proof.\nBecause the results of [16] and our generalizations ensure proper learning, they provide edge weights w between the nodes of V . We use these exact same edge weights to define the learned influence functions in G. Equation (1) then implies that the learned influence functions on V satisfy Fv(S) = 1 r · F̂v′(S). The detailed analysis in Appendix A shows that the learning error only scales by a multiplicative factor 1 r2 .\nThe PAC learnability result shows that there is no information-theoretical obstacle to influence function learning under incomplete observations. However, it does not imply an efficient algorithm. The reason is that a hidden variable would be associated with each node not observed to be active, and computing the objective function for empirical risk minimization would require marginalizing over all of the hidden variables. The proper PAC learnability result also does not readily generalize to the CIC model and other diffusion models, even under complete observations. This is due to the lack of a succinct characterization of influence functions as under the DIC and DLT models. Therefore, in the next section, we explore improper learning approaches with the goal of designing practical algorithms and establishing learnability under a broader class of diffusion models."
    }, {
      "heading" : "4 Efficient Improper Learning Algorithm",
      "text" : "In this section, we develop improper learning algorithms for efficient influence function learning. Instead of parameterizing the influence functions using the edge parameters, we adopt the model-free influence function learning framework, InfluLearner, proposed by Du et al. [3] to represent the influence function as a sum of weighted basis functions. From now on, we focus on the influence function Fv(S) of a single fixed node v.\n2[16] shows that the DLT model with fixed thresholds is PAC learnable under complete cascades. We study the DLT model when the thresholds are uniformly distributed random variables.\nInfluence Function Parameterization. For all three diffusion models (CIC, DIC and DLT), the diffusion process can be characterized equivalently using live-edge graphs. Concretely, the results of [10, 4] state that for each instance of the CIC, DIC, and DLT models, there exists a distribution Γ over live-edge graphs H assigning probability γH to each live-edge graph H such that F ∗v (S) = ∑ H:at least one node in S has a path to v in H γH .\nTo reduce the representation complexity, notice that from the perspective of activating v, two different live-edge graphs H,H ′ are “equivalent” if v is reachable from exactly the same nodes in H and H ′. Therefore, for any node set T , let β∗T := ∑ H:exactly the nodes in T have paths to v in H γH . We then use characteristic vectors as feature vectors rT = χT , where we will interpret the entry for node u as u having a path to v in a live-edge graph. More precisely, let φ(x) = min{x, 1}, and χS the characteristic vector of the seed set S. Then, φ(χ>S · rT ) = 1 if and only if v is reachable from S, and we can write\nF ∗v (S) = ∑ T β∗T · φ(χ>S · rT ).\nThis representation still has exponentially many features (one for each T ). In order to make the learning problem tractable, we sample a smaller set T of K features from a suitably chosen distribution, implicitly setting the weights βT of all other features to 0. Thus, we will parametrize the learned influence function as\nFβv (S) = ∑ T∈T βT · φ(χ>S · rT ).\nThe goal is then to learn weights βT for the sampled features. (They will form a distribution, i.e., ||β||1 = 1 and β ≥ 0.) The crux of the analysis is to show that a sufficiently small number K of features (i.e., sampled sets) suffices for a good approximation, and that the weights can be learned efficiently from a limited number of observed incomplete cascades. Specifically, we consider the log likelihood function `(t, y) = y log t + (1 − y) log(1 − t), and learn the parameter vector β via the following maximum likelihood estimation problem:\nMaximize ∑M\ni=1 `(F β v (Si), χAi(v))\nsubject to ||β||1 = 1,β ≥ 0.\nHandling Incomplete Observations. The maximum likelihood estimation cannot be directly applied to incomplete cascades, as we do not have access to Ai (only the incomplete version Ãi). To address this issue, notice that the MLE problem is actually a binary classification problem with log loss and yi = χAi(v) as the label. From this perspective, incompleteness is simply class-conditional noise on the labels. Let ỹi = χÃi(v) be our observation of whether v was activated or not under the incomplete cascade i. Then,\nProb[ỹi = 1|yi = 1] = r and Prob[ỹi = 1|yi = 0] = 0.\nIn words, the incomplete observation ỹi suffers from one-sided error compared to the complete observation yi. Known techniques can be used to address this issue. By results of Natarajan et al. [17], we can construct an unbiased estimator of `(t, y) using only the incomplete observations ỹ, as in the following lemma.\nLemma 3 (Corollary of Lemma 1 [17]). Let y be the true activation of node v and ỹ the incomplete observation. Then, defining\n˜̀(t, y) := 1\nr y log t+ 2r − 1 r (1− y) log(1− t),\nfor any t, we have Eỹ [ ˜̀(t, ỹ) ] = `(t, y).\nBased on this lemma, we solve the maximum likelihood estimation problem with the adjusted likelihood function ˜̀(t, y):\nMaximize ∑M\ni=1 ˜̀(Fβv (Si), χÃi(v)) (2)\nsubject to ||β||1 = 1,β ≥ 0.\nWe analyze conditions under which the solution to (2) provides improper PAC learnability under incomplete observations; these conditions will apply for all three diffusion models.\nThese conditions are similar to those of Lemma 1 in the work of Du et al. [3], and concern the approximability of the reachability distribution β∗T . Specifically, let q be a distribution over node sets T such that q(T ) ≤ Cβ∗T for all node sets T . Here, C is a (possibly very large) number that we will want to bound below. Let T1, . . . , TK be K i.i.d. samples drawn from the distribution q. The features are then rk = χTk . We use the truncated version of the function F β,λ v (S) with parameter3 λ as in [3]: Fβ,λv (S) = (1− 2λ)Fβv (S) + λ.\nLet Mλ be the class of all such truncated influence functions, and F β̃,λv ∈ Mλ the influence functions obtained from the optimization problem (2). The following theorem (proved in Appendix B) establishes the accuracy of the learned functions.\nTheorem 4. Assume that the learning algorithm uses K = Ω̃(C 2\nε2 ) features in the influence function\nit constructs, and observes4 M = Ω̃( logC ε4r2 ) incomplete cascades with retention rate r. Then, with probability at least 1− δ, the learned influence functions F β̃,λv for each node v and seed distribution P satisfy\nES∼P [ (F β̃,λv (S)− F ∗v (S))2 ] ≤ ε.\nThe theorem implies that with enough incomplete cascades, an algorithm can approximate the ground truth influence function to arbitrary accuracy. Therefore, all three diffusion models are improperly PAC learnable under incomplete observations. The final sample complexity does not contain the graph size, but is implicitly captured by C, which will depend on the graph and how well the distribution β∗T can be approximated. Notice that with r = 1, our bound on M has logarithmic dependency on C instead of polynomial, as in [3]. The reason for this improvement is discussed further in Appendix B.\n3The proof of Theorem 4 in Appendix B will show how to choose λ. 4The Ω̃ notation suppresses all logarithmic terms except logC, as C could be exponential or worse in the number\nof nodes.\nEfficient Implementation. As mentioned above, the features T cannot be sampled from the exact reachability distribution β∗T , because it is inaccessible (and complex). In order to obtain useful guarantees from Theorem 4, we follow the approach of Du et al. [3], and approximate the distribution β∗T with the product of the marginal distributions, estimated from observed cascades.\nThe optimization problem (2) is convex and can therefore be solved in time polynomial in the number of features K. However, the guarantees in Theorem 4 require a possibly large number of features. In order to obtain an efficient algorithm for practical use and our experiments, we sacrifice the guarantee and use a fixed number of features.\nNotice that the optimization problem (2) can be solved independently for each node v; the learned functions Fi(S) can then be combined into F (S) = [F1(S), . . . , Fn(S)]. As the optimization problem factorizes over nodes, the method is obviously parallelizable, thus scaling to large networks.\nA further point regarding the implementation: in our theoretical analysis, we assumed that the retention rate r is known to the learning algorithm. In practice, it can be estimated via crossvalidation. As we show in the next section, the algorithm is not very sensitive to the misspecification of the retention rate."
    }, {
      "heading" : "5 Experiments",
      "text" : "In this section, we experimentally evaluate the algorithm from Section 4. Since no other methods explicitly account for incomplete observations, we compare it to several state-of-the-art methods for influence function learning with full information. Hence, the main goal of the comparison is to examine to what extent the impact of missing data can be mitigated by being aware of it. We compare our algorithm to the following approaches: (1) CIC is an approach fitting the parameters of a CIC model, using the NetRate algorithm [7] with exponential delay distribution. (2) DIC fits the activation probabilities of a DIC model using the method in [18]. (3) InfluLearner is the model-free approach proposed by Du et al. in [3] and discussed in Section 4. (4) Logistic uses logistic regression to learn the influence functions Fu(S) = f(χ>S · cu + b) for each u independently, where cu is a learnable weight vector and f(x) = 11+e−x is the logistic function. (5)Linear uses linear regression to learn the total influence σ(S) = c> · χS + b of the set S. Notice that the CIC and DIC methods have access to the activation time of each node in addition to the final activation status, giving them an inherent advantage."
    }, {
      "heading" : "5.1 Synthetic cascades",
      "text" : "Data generation. We generate synthetic networks with core-peripheral structure following the Kronecker graph model [12] with parameter matrix [0.9, 0.5; 0.5, 0.3].5 Each generated network has 512 nodes and 1024 edges.\nWe then generate synthetic cascades following the CIC, DIC and DLT models. For the CIC model, we use an exponential delay distribution on each edge whose parameters are drawn independently and uniformly from [0, 1]. The observation window length is τ = 1.0. For the DIC model, the activation probability for each edge is chosen independently and uniformly from [0, 0.4]. For the DLT model, we follow [10] and set the edge weight wuv as 1/dv where dv is the in-degree of node v. For each model, we generate 8192 cascades as training data. The seed sets are sampled uniformly at\n5We also experimented on Kronecker graphs with hierarchical community structure ([0.9, 0.1; 0.1, 0.9]) and random structure ([0.5, 0.5; 0.5, 0.5]). The results are similar and omitted due to space constraints.\nrandom with sizes drawn from a power law distribution with parameter 2.5. The generated cascades have average sizes of 10.8, 12.8 and 13.0 in the CIC, DIC and DLT models, respectively. We then create incomplete cascades by varying the retention rate between 0.1 and 0.9. The test set contains 200 independently sampled seed sets generated in the same way as the training data. To sidestep the computational cost of running Monte Carlo simulations, we estimate the ground truth influence of the test seed sets using the method proposed in [3], with the true model parameters.\nAlgorithm settings. We apply all algorithms to cascades generated from all three models; that is, we also consider the results under model misspecification. Whenever applicable, we set the hyperparameters of the five comparison algorithms to the ground truth values. When applying the NetRate algorithm to discrete-time cascades, we set the observation window to 10.0. When applying the method in [18] to continuous-time cascades, we round activation times up to the nearest multiple of 0.1, resulting in 10 discrete time steps. For the model-free approaches (InfluLearner and our algorithm), we use K = 200 features.\nResults. Figure 2 shows the Mean Absolute Error (MAE) between the estimated total influence σ(S) and the true influence value, averaged over all testing seed sets. For each setting (diffusion model and retention rate), the reported MAE is averaged over five independent runs.\nThe main insight is that accounting for missing observations indeed strongly mitigates their effect: notice that for retention rates as small as 0.5, our algorithm can almost completely compensate for the data loss, whereas both the model-free and parameter fitting approaches deteriorate significantly even for retention rates close to 1. For the parameter fitting approaches, even such large retention rates can lead to missing and spurious edges in the inferred networks, and thus significant estimation errors. Additional observations include that fitting influence using (linear or logistic) regression does not perform well at all, and that the CIC inference approach appears more robust to model misspecification than the DIC approach.\nSensitivity of retention rate. We presented the algorithms as knowing r. Since r itself is inferred from noisy data, it may be somewhat misestimated. Figure 4 shows the impact of misestimating r.\nWe generate synthetic cascades from all three diffusion models with a true retention rate of 0.8, and then apply our algorithm with (incorrect) retention rate r ∈ {0.6, 0.65, . . . , 0.95, 1}. The results are averaged over five independent runs. While the performance decreases as the misestimation gets worse (after all, with r = 1, the algorithm is basically the same as InfluLearner), the degradation is graceful.\nNon-uniform retention rate In practice, different nodes may have different retention rates, while we may be able only to estimate the mean retention rate r. For our experiments, we draw each node v’s retention rate rv independently from a distribution with mean r. Specifically, in our experiments, we use uniform and Gaussian distributions; for the uniform distribution, we draw rv ∼ Unif[r − σ, r + σ]; for the Gaussian distribution, we draw rv ∼ N(r, σ2), truncating draws at 0 and 1.6 In both cases, σ measures the level of noise in the estimated retention rate. We set the mean retention rate r to 0.8 and vary σ in {0, 0.02, 0.05, 0.1, 0.2}. Figure 3 shows the results for the Gaussian distribution; the results of uniform distribution are similar and omitted. The results show that our model is very robust to random and independent perturbations of individual retention rates for each node."
    }, {
      "heading" : "5.2 Influence Estimation on real cascades",
      "text" : "We further evaluate the performance of our method on the real-world MemeTracker7 dataset [11]. The dataset consists of the propagation of short textual phrases, referred to as Memes, via the publication of blog posts and main-stream media news articles between March 2011 and February 2012. Specifically, the dataset contains seven groups of cascades corresponding to the propagation of Memes with certain keywords, namely “apple and jobs”, “tsunami earthquake”, “william kate marriage” ’, “occupy wall-street”, “airstrikes”, “egypt” and “elections.” Each cascade group consists of\n6The truncation could lead to a bias on the mean of r. However, empirical simulations show that the bias is negligible (only 0.01 when σ = 0.2).\n7We use the preprocessed version of the dataset released by Du et al. [3] and available at http://www.cc.gatech. edu/~ndu8/InfluLearner.html. Notice that the dataset is semi-real, as multi-node seed cascades are artificially created by merging single-node seed cascades.\n-‐10 -‐5 0 5\n10 15 20 25 30 35 40\n1 0.95 0.9 0.85 0.8 0.75 0.7 0.65 0.6\nCIC DIC DLT\nFigure 4: Relative error in MAE under retention rate misspecification. x-axis: retention rate r used by the algorithm. y-axis: relative difference of MAE compared to using the true retention rate 0.8.\n1000 nodes, with a number of cascades varying from 1000 to 44000. We follow exactly the same evaluation method as Du et al. [3] with a training/test set split of 60%/40%.\nTo test the performance of influence function learning under incomplete observations, we randomly delete 20% of the occurrences, setting r = 0.8. The results for other retention rates are similar and omitted. Figure 5 shows the MAE of our methods and the five baselines, averaged over 100 random draws of test seed sets, for all groups of memes. While some baselines perform very poorly, even compared to the best baseline (InfluLearner), our algorithm provides an 18% reduction in MAE (averaged over the seven groups), showing the potential of data loss awareness to mitigate its effects."
    }, {
      "heading" : "6 Model Extensions",
      "text" : "So far, we have assumed that the retention rate is the same for all the nodes; however, our approach can be easily generalized to the case in which each individual node has a different (but known) retention rate. The following theorem generalizes Theorems 1 and 2. (The proofs of all theorems from this section are given in Appendix C.)\nTheorem 5. Let λ ∈ (0, 0.5) and for each node v, let rv be v’s retention rate. Write r̄ = 1n ∑n i=1 1 r2v .\n• The class of influence functions under the DIC model in which all edge activation probabilities satisfy we ∈ [λ, 1− λ] is PAC learnable with sample complexity Õ( r̄ 2n3m ε2 ).\n• The class of influence functions under the DLT model such that the edge weight for every edge satisfies we ∈ [λ, 1− λ], and for every node v, 1− ∑ u∈N(v)wuv ∈ [λ, 1− λ], is PAC learnable\nwith sample complexity Õ( r̄ 2n3m ε2 ).\nThe empirical evaluation in the previous section also shows that the performance does not change significantly if the true retention rate of each node is independently perturbed around the estimated mean loss rate.\nA second limitation of our approach is that we assume the retention rate r to be known to the algorithm. Estimating r in a real-world setting presents a “chicken and egg” problem; however, we\nbelieve that a somewhat accurate estimate of r (perhaps based on past data for which ground truth can be obtained at much higher cost) will still be a significant improvement over the status quo, namely, pretending that no data are missing.\nMoreover, even approximate information about r leads to positive results on proper PAC learnability. We show that the PAC learnability result can be extended to the case where we only know that the true retention rate lies in a given interval. Instead of knowing the exact value r, we only know that r lies in an interval measured by the relative error η, namely r ∈ I = [r̄ · (1− η), r̄ · (1 + η)]. Within that interval, the retention rate is adversarially chosen. We can then generalize Theorems 1 and 2 as follows.\nTheorem 6. Let λ ∈ (0, 0.5), and assume that the ground truth retention rate r is adversarially chosen in I = [r̄ · (1 − η), r̄ · (1 + η)]. For all ε, δ ∈ (0, 1), all parametrizations of the diffusion model, and all distributions P over seed sets S: when given activation-only and incomplete training cascades C̃, there exists a proper learning algorithm A which outputs an influence function F ∈ FM satisfying:\nProbC̃ [errsq[F ]− errsq[F ∗] ≥ ε+ 4η\n2\n(1− η)2 ] ≤ δ.\n• For the DIC model, when all edge activation probabilities satisfy we ∈ [λ, 1− λ], the required number of observations is M = Õ( n\n3m ε4r4(1−η)4 ).\n• For the DLT model, when all edges weights satisfy we ∈ [λ, 1 − λ], and for every node v, 1− ∑ u∈N(v)wuv ∈ [λ, 1− λ], the required number of observations is M = Õ( n3m ε4r4(1−η)4 ).\nNotice that the result of Theorem 6 is not technically a PAC learnability result, due to the additive error that depends on the interval size. However, the theorem provides useful approximation guarantees when the interval size is small. A dependence of the guarantee on the interval size is inevitable. For when nothing is known about the retention rate (for η large enough), all information about the marginal activation probabilities is lost in the incomplete data: for instance, if no nodes are ever obesrved active, we cannot distinguish the case r = 0 from the case in which no nodes become activated. The experiments from the previous section confirm that for moderate uncertainty about the retention rate, the performance of our approach is not very sensitive to the misestimation of r."
    }, {
      "heading" : "7 Conclusion and Future Work",
      "text" : "We studied the problem of learning influence functions under incomplete observations, which are common in real-world applications. We established proper PAC learnability of influence functions under two popular diffusion models, the DIC and DLT model. The incompleteness only has moderate impact on the sample complexity bound, but computational efficiency would require an oracle for efficient empirical risk minimization. We next designed an efficient improper learning algorithm with learning guarantees for the DIC, DLT, and CIC models.\nOur framework can be easily generalized to handle non-uniform (but independent) loss of node activations. We also have partial results theoretically establishing robustness to misestimations of r (which we observed experimentally in Section 5). A much more significant departure for future work would be non-random loss of activations, e.g., losing all activations of some randomly chosen\nnodes. As another direction, it would be worthwhile to generalize the PAC learnability results to other diffusion models, and to design an efficient algorithm with PAC learning guarantees."
    }, {
      "heading" : "Acknowledgments",
      "text" : "We would like to thank anonymous reviewers for useful feedback. The research was sponsored in part by NSF research grant IIS-1254206 and by the U.S. Defense Advanced Research Projects Agency (DARPA) under the Social Media in Strategic Communication (SMISC) program, Agreement Number W911NF-12-1-0034. The views and conclusions are those of the authors and should not be interpreted as representing the official policies of the funding agency, or the U.S. Government."
    }, {
      "heading" : "A Proofs for Section 3",
      "text" : "A.1 Proof of Theorem 1\nHere, we flesh out the proof sketch from Section 3 for the DIC model. For the transformed graph Ĝ, we consider only the influence functions of the n nodes in the added layer V ′. Recall that we write F̂ (S) = [F̂1′(S), . . . , F̂n′(S)] for the influence function of those nodes. Let F̂ ∗ be the ground truth influence function for the same nodes, and F ∗ the ground truth influence function for G. LetM(G) andM(Ĝ) be the class of influence functions of G and Ĝ. For functions F̂ , we write êrrsq[F̂ ] = ES,A [ 1 n ∑ v′∈V ′(χA(v ′)− F̂v′(S))2 ] . Notice that the ground truth functions minimize the expected squared error, i.e., F̂ ∗ ∈ argminF̂∈M(Ĝ)êrrsq[F̂ ] and F ∗ ∈ argminF∈M(G)errsq[F ]. We will show that errsq[F ]− errsq[F ∗] can be made arbitrary small. We first prove a variation of Theorem 2 from [16] for learning F̂ , by verifying that all the supporting lemmas still apply. The modified Theorem 2 from [16] is the following:\nTheorem 7. Assume that the learning algorithm observes M = Ω̃(̂−2n3m) training cascades Ĉ = {(Si, A′i)} under the DIC model. Then, with probability at least 1− δ, we have\nêrrsq[F̂ ]− êrrsq[F̂ ∗] ≤ ̂. (3)\nProof. While the cascades in Ĉ are incomplete on V , they are complete on V ′. We use this completeness of the cascades as follows. Consider the restricted class of the DIC model on the transformed graph Ĝ in which only them activation probabilities w between nodes in V are learnable, while the edges (v, v′) have a fixed weight of r. Define the log-likelihood for a cascade (S,A′) as\nL(S,A′|w) = ∑ v′∈V ′ χA′i(v ′) log(F̂wv′ (S)) + (1− χA′i(v ′)) log(1− F̂wv′ (S)).\nThe algorithm outputs an influence function F̂ based on the solution of the following optimization problem:\nw∗ ∈ argmaxw∈[λ,1−λ]m M∑ i=1 L(Si, A′i|w).\nAs the function F̂ is learned from the DIC model, Lemma 3 in [16] carries thorough to establish the Lipschitz continuity of DIC influence functions.\nLemma 8 (Lipschitz continuity of DIC influence). Fix S ⊆ V and v′ ∈ V ′. For any w,w′ ∈ Rm with ||w −w′||1 ≤ , we have |F̂wv′ (S)− F̂w ′ v′ (S)| ≤ .\nMoreover, such instances (on 2n nodes) still only have m parameters, and the L∞ covering number bound in Lemma 8 from [16] applies without any changes.\nLemma 9 (Covering number of DIC influence functions). The L∞ covering number of the restricted class of the DIC influence functions on the transformed graph for radius is O((m/ )m).\nEstablishing the sample complexity bound on the log-likelihood objective (Lemma 4 in [16]) requires that all function values be bounded away from 0 and 1 (Lemma 9 in [16]). We assume that r < 1, as Lemma 4 in [16] directly holds when there are no missing data at all. Let λ > 0 be the bound on the edge activation probabilities in G from our Theorem 1; that is, λ ≤ wuv ≤ 1− λ for all\nu, v ∈ V . Due to the layered structure of Ĝ, we have that r · λn ≤ F̂v′(S) ≤ r · (1− λn).8 Therefore, Lemma 4 in [16] carries thorough with the same sample complexity of Õ(̂−2n3m):\nLemma 10 (Sample complexity guarantee on the log-likelihood objective). Fix , δ ∈ (0, 1) and M = Ω̃(̂−2n3m). With probability at least 1− δ (over the draws of the training cascades),\nmax w∈[λ,1−λ]m\nES,A′ [ 1\nn L(S,A′|w)\n] − ES,A′ [ 1\nn L(S,A′|w∗)\n] ≤ .\nAs all the lemmas used in the proof of Theorem 2 from [16] remain true, we have proved our Theorem 7, with the guarantee that errsq[F̂ ]− errsq[F̂ ∗] ≤ ̂.\nFinally, we recall that according to Equation (1), Fv(S) = 1r · F̂v′(S) and F ∗ v (S) = 1 r · F̂ ∗ v′(S),\ngiving us that\nerrsq[F ]− errsq[F ∗] (∗) =\n1\nn ∑ v∈V ES [ (Fv(S)− F ∗v (S))2 ] Equation (1)\n= 1\nn ∑ v′∈V̂ ES [ ( 1 r F̂v′(S)− 1 r F̂ ∗v′(S)) 2 ] (∗) =\nêrrsq[F̂ ]− êrrsq[F̂ ∗] r2\nEquation (3) ≤ ̂\nr2\n(The steps labeled (*) are applications of Equation (4) from [16].) Now, by taking ̂ = ε · r2, with Õ(n\n3m ε2r4 ) incomplete cascades, we obtain that errsq[F ]− errsq[F ∗] ≤ ε.\nA.2 Proof of Theorem 2\nWe will show that the analogue of Theorem 7 for the DLT model also holds. We do so by following the same sequence of steps as in Appendix A.1 and verifying that all the steps in the proof of Theorem 2 in [16] still hold. The main difference is that a new proof is needed for establishing Lipschitz continuity of the DLT influence function with respect to the L1 norm (the analogue of Lemma 3 in [16]). We begin by establishing this lemma.\nLemma 11 (Lipschitz continuity). Fix S ⊆ V and u ∈ V . For any w,w′ ∈ Rm with ||w−w′||1 ≤ ε, we have that |Fwu (S)− Fw ′ u (S)| ≤ ε.\nProof. As shown in [10], the influence functions under the DLT model can be also characterized via the reachability under a distribution over live-edge graphs. Specifically, the distribution is as follows [10, Theorem 2.5]: for each node v, pick at most one of its incoming edges at random, selecting the edge from z ∈ N(v) with probability wzv and selecting no incoming edge with probability 1− ∑\nz∈N(v)wzv. For each node v, let the random variable Xv be the incoming neighbor chosen for v, with Xv =⊥ if v has no incoming edge. For simplicity of notation, we define w⊥v = 1− ∑ z∈N(v)wzv.\n8As in the proof of Lemma 4 in [16], we assume that there exists a path in the graph Ĝ from a node in S to node v′; the cases where this assumption fails can be handled easily.\nDefine X = (Xv)v∈V , and write X for the set of all such vectors X. For any node v, we write X−v for the set of all vectors with edges (or ⊥) for all nodes except v. And for a vector X ∈ X−v, we write X[v 7→ z] for the vector in which all entries agree with those in X, except for the entry for v which is now z.\nLet RX(v, S) be the indicator function of whether node v is reachable from the seed set S in the graph (V,X), where we interpret X as the set of all edges (Xv, v) with Xv 6=⊥. Claim 2.6 of [10] implies that\nFwu (S) = ∑ X ∏ v∈V wXvvRX(u, S).\nWe fix an edge (y, y′) and take the partial derivative of Fwu (S) with respect to wyy′ :∣∣∣∣∂Fwu (S)∂wyy′ ∣∣∣∣ = ∣∣∣∣∣∣ ∂∂wyy′  ∑ z∈N(y)∪{⊥} wzy ∑ X∈X−y ∏ v∈V \\{y} wXvv ·RX[y 7→z](u, S) ∣∣∣∣∣∣ = ∣∣∣∣∣∣ ∑\nX∈X−y ∏ v∈V \\{y} wXvv ·RX[y 7→y′](u, S)− ∑ X∈X−y ∏ v∈V \\{y} wXvv ·RX[y 7→⊥](u, S) ∣∣∣∣∣∣ ≤ ∣∣∣∣∣∣ ∑\nX∈X−y ∏ v∈V \\{y} wXvv ∣∣∣∣∣∣ = 1.\nTherefore, ||∇wFwu (S)||∞ ≤ 1, implying Lipschitz continuity.\nNext, we bound the values of the influence functions away from 0 and 1. Because each edge weight wzv ∈ [λ, 1− λ] by assumption, and we further assumed that w⊥v = 1− ∑ z∈N(v)wzv ∈ [λ, 1− λ], it follows directly (as in the proof for the DIC model) that r · λn ≤ F̂v′(S) ≤ r · (1 − λn). This establishes the analogue of Lemma 9 in [16], and we can therefore apply Lemma 4 in [16], obtaining a sample complexity of Õ(̂−2n3m) under the DLT model. As all the used lemmas remain true, the results of Theorem 7 also hold for the DLT model. Finally, exploiting the same relation between F (S) and F̂ (S) as in the proof of Theorem 1 leads to the conclusion of Theorem 2."
    }, {
      "heading" : "B Proof of Theorem 4",
      "text" : "Let M = Ω̃( logC 4r2 ), and let F β̃,λv (S) be the influence functions obtained in Theorem 4. We will show that for any single node v, with probability at least 1− δ/n,\nES [ (F β̃,λv (S)− F ∗v (S))2 ] ≤ ε.\nThe theorem then follows by taking a union bound over all n nodes. Recall thatMλ is function class of all truncated influence functions. We write\nRM (Mλ) := ESi∼P,( i)i∼Uniform({−1,1}M ) [ sup F∈Mλ 1 M M∑ i=1 i · Fv(Si) ]\nfor its Rademacher complexity, where the i’s are i.i.d. Rademacher (symmetric Bernoulli) random variables. By Lemma 12 in [3], there exists a truncated influence function F β̂,λv ∈ Mλ with K = O(C 2\nε2 log Cnεδ ) features such that ES∼P [ (F β̂,λv (S)− F ∗v (S))2 ] ≤ 2ε2 + 2λ2 with probability at\nleast 1− δ2n . Using the log likelihood function `(t, y) = y log t+ (1− y) log(1− t) as defined in Section 4, we write the log loss of influence function Fv as errlog[Fv] = ES,A [−`(Fv(S), A)]. By Lemma 2 in [17], with probability at least 1− δ2n ,\nerrlog[F β̃,λv ] ≤ min f∈Mλ\nerrlog[f ] + 4\nλ · r RM (Mλ) +\n√ log(2n/δ)\n2M .\nBecause F β̂,λv ∈Mλ, we can bound that minf∈Mλ errlog[f ] ≤ errlog[F β̂,λ v (S)] on the right-hand\nside. Subtracting errlog [F ∗v ] from both sides, we obtain\nerrlog[F β̃,λv ]− errlog[F ∗v ] ≤ errlog[F β̂,λv ]− errlog[F ∗v ] + 4\nλ · r RM (Mλ) +\n√ log(2n/δ)\n2M . (4)\nThe square and log errors can be related to each other as in the proof of Theorem 2 in [16], as follows: ES [ (F β̃,λv (S)− F ∗v (S))2 ] ≤ 1\n2 (errlog[F β̃,λv ]− errlog[F ∗v ]).\nHence, in order to obtain a bound on ES [ (F β̃,λv (S)− F ∗v (S))2 ] , it suffices to upper-bound the\nright-hand side of (4). The term errlog[F β̂,λ v ]− errlog[F ∗v ] can be bounded as in the proof of Lemma 2 in [3], using Lemma 11 and Lemma 16 from [3]: Assume that F β̂,λv uses K = Ω(C 2\n̂2 log Cn ̂δ̂ ) features.\nThen, with probability at least 1− δ̂, we have\nerrlog[F β̂,λv ]− errlog[F ∗v ] ≤ ̂2 + λ2\nλ (1 + log\n1 λ ). (5)\nNext, we bound the Rademacher complexity of the function classMλ:\nLemma 12. The Rademacher complexity RM (Mλ) for the function class Mλ with at most K features is at most\n√ 2 log(1+K)\nM .\nProof. Recall that we use basis functions φi(S) := min{1,χ>S rTi}. LetW = {φi|i = 1, . . . ,K}∪{1}, where 1 is the constant function with value 1. By definition, we haveMλ ⊆ conv(W), where conv(W) denotes the convex hull. Therefore, RM (Mλ) ≤ RM (conv(W)) = RM (W). Since |φi(S)| ≤ 1, by Massart’s finite lemma9, we have RM (W) ≤ √ 2 log(1+K) M , completing the proof.\nTo finish the proof of Theorem 4, let be the desired accuracy. Define δ̂ = δ2n and ̂ = λ =\nc′ log 1\n,\nwhere c′ is a sufficiently large constant. Then, the right-hand side of (5) is upper-bounded by ̂ · (1 + log 1̂ ) ≤ 2 .\n9Massart’s finite lemma states the following: Let F be a finite set of functions, such that supf∈F 1n ∑n i=1 f(Xi) 2 ≤ C2\nfor any variables valuesX1, . . . , Xn. Then, the Rademacher complexity of F is upper bounded byRn(F) ≤ √ 2C2 log |F| n .\nWith M = Ω( logK 4r2 ), we have 4λ·rRM (Mλ) ≤ 4 . Whenever M = Ω(\nlog n δ 2 ), we also get that√\nlog(n/δ) 2M ≤ 4 . Taking M as the maximum of the above three, which is satisfied when M =\nΩ̃( logC 4r2 ), we can substitute all of the bounds into the right-hand side of (4) and obtain that ES [ (F β̃,λv (S)− F ∗v (S))2 ] ≤ with probability at least 1− δn . Now, taking a union bound over all nodes v concludes the proof.\nDiscussion. Notice that when the retention rate is 1, our Theorem 4 significantly improves the sample complexity bound compared to Du et al. [3]. The sample complexity in [3] is Õ(C 2\n3 ), while\nour theorem implies a sample complexity of Õ( logC 4 ) under complete observations. The improvement is derived from bounding the Rademacher complexity of the function classMλ instead of the L2,∞ dimension. The Rademacher bound leads to a logarithmic dependence of the sample complexity on the number of features K, whereas the L2,∞ bound results in a polynomial dependence."
    }, {
      "heading" : "C Proofs for Section 6",
      "text" : "C.1 Proof of Theorem 5\nLet ri be the retention rate of node i and ε̂i the desired error guarantee for learning the influence function Fvi . It is immediate from the proofs of Theorems 1 and 2 that M = maxi{Õ(n\n3m ε̂2i r 4 i )}\nincomplete cascades are sufficient to guarantee that with probability at least 1− δ, for each i, we obtain\nES [ (Fvi(S)− F ∗vi(S)) 2 ] ≤ ε̂i.\nThe estimation error for the overall influence is the average ε = 1n ∑\ni ε̂i. Given non-uniform retention rates ri, we can choose non-uniform ε̂i yielding the desired ε, so as to minimize the sample complexity. The corresponding optimization problem is the following:\nMinimize max i\n1\nε̂2i r 4 i\nsubject to 1\nn ∑ i ε̂i = ε, ε̂i > 0 for all i.\nThe minimum is achieved when all 1 ε̂2i r 4 i are equal to some constant C, meaning that ε̂i = 1√C·r2i . The constant C can be obtained from the constraint 1n ∑ i ε̂i = ε, yielding that C = r̄2 ε2 , where\nr̄ = 1n ∑\ni 1 r2i . This completes the proof of the theorem.\nC.2 Proof of Theorem 6\nThe proof of Theorem 6 is similar to that of Theorems 1 and 2. We again treat the incomplete cascades as complete cascades in a transformed graph Ĝ. Because we no longer know the true retention rate r, we cannot set the probability on the egde (v, v′) to ŵvv′ = r. Instead, we treat the ŵvv′ as parameters to infer, under the constraint that ŵvv′ ∈ I = [r̄ · (1− η), r̄ · (1 + η)]. We spell out the details of the proof for the DIC model; the proof for the DLT model is practically identical.\nAs in Theorem 1, we consider only the influence functions of the n nodes in the added layer V ′. Following the proof of Theorem 1, with probability as least 1− δ, using M = Õ(n3m\nε2 ) cascades, for\nall v′ ∈ V ′, ES [ (F̂v′(S)− F̂ ∗v′(S))2 ] ≤ ε̂. (6)\nIn the proof of Theorem 1, the fact that ŵvv′ = r allowed us to obtain the influence function at v via Fv(S) = 1r · F̂v′(S). Since the edge probabilities ŵvv′ are now inferred, we instead use the inferred probabilities for obtaining the activation functions for nodes v. On the other hand, the ground truth influence functions for v and v′ are still related via the correct value r. Writing r̂v = ŵvv′ , this gives us the following:\nFv(S) = F̂v′(S) r̂v F ∗v (S) =\nF̂ ∗v′(S)\nr . (7)\nConsider ES [ (Fv(S)− F ∗v (S))2 ] for any node v. The expected squared estimation error for node v can now be written as follows:\nES [ (Fv(S)− F ∗v (S))2 ] Equation (7) = ES ( F̂v′(S) r̂v − F̂ ∗v′(S) r )2 = ES ( F̂v′(S)− F̂ ∗v′(S) r + F̂v′(S) r − r̂v r · r̂v\n)2 ≤ 1\nr2 · ES\n[ (F̂vi(S)− F̂ ∗vi(S)) 2 ]\n(8)\n+ 2\nr · ES\n[ F̂v′(S)\nr̂v · |r − r̂v| r · |F̂v′(S)− F̂ ∗v′(S)|\n] (9)\n+ES\n[ F̂ 2v′(S)\nr̂2v · (r − r̂v) 2 r2\n] . (10)\nWe will bound the term (8) using Inequality (6). In order to bound the terms (9) and (10), observe the following:\n• For all seed sets S and nodes v′ ∈ V ′, we have F̂v′(S) ≤ r̂v by the structure of the transformed graph.\n• |r−r̂v |r ≤ 2η 1−η follows from the assumption that r̂v, r ∈ [r̄ · (1− η), r̄ · (1 + η)].\n• By Jensen’s inequality and Inequality (6), ES [ |F̂v′(S)− F̂ ∗v′(S)| ] ≤ √ ε̂.\nUsing the preceding three inequalities, we can bound the term (9) by 4η √ ε̂\nr(1−η) and the term (10) by 4η2\n(1−η)2 . When ε̂ ≤ εr22 , using the inequality (6), the term (8) is upper-bounded by 1 r2 ES [ (Fvi(S)− F ∗vi(S)) 2 ] ≤ ε 2 . Similarly, when ε̂ ≤ ε2r2(1−η)2 64η2 , the additive term (9) is upper-bounded by 2η √ ε̂ r(1−η) ≤ ε 2 . Thus,\ntaking ε̂ = min{ εr22 , ε2r2(1−η)2 64η2 }, the first two terms combined are bounded by ε. Thus, using M = Õ( n 3m\nε4r4(1−η)4 ) cascades, with probability at least 1− δ, for each node v,\nES [ (Fv(S)− F ∗v (S))2 ] ≤ ε+ 4η 2\n(1− η)2 .\nNow, taking an average on both sides of the above equation over all the nodes v ∈ V concludes the proof of Theorem 6."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2016,
    "abstractText" : "We study the problem of learning influence functions under incomplete observations of node<lb>activations. Incomplete observations are a major concern as most (online and real-world) social<lb>networks are not fully observable. We establish both proper and improper PAC learnability<lb>of influence functions under randomly missing observations. Proper PAC learnability under<lb>the Discrete-Time Linear Threshold (DLT) and Discrete-Time Independent Cascade (DIC)<lb>models is established by reducing incomplete observations to complete observations in a modified<lb>graph. Our improper PAC learnability result applies for the DLT and DIC models as well as the<lb>Continuous-Time Independent Cascade (CIC) model. It is based on a parametrization in terms<lb>of reachability features, and also gives rise to an efficient and practical heuristic. Experiments<lb>on synthetic and real-world datasets demonstrate the ability of our method to compensate even<lb>for a fairly large fraction of missing observations.",
    "creator" : "LaTeX with hyperref package"
  }
}