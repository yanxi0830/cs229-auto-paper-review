{
  "name" : "1506.02428.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Robust Regression via Hard Thresholding",
    "authors" : [ "Kush Bhatia", "Prateek Jain", "Purushottam Kar" ],
    "emails" : [ "t-kushb@microsoft.com", "prajain@microsoft.com", "t-purkar@microsoft.com" ],
    "sections" : [ {
      "heading" : null,
      "text" : "In this work, we study a simple hard-thresholding algorithm called Torrent which, under mild conditions on X, can recover w∗ exactly even if b corrupts the response variables in an adversarial manner, i.e. both the support and entries of b are selected adversarially after observing X and w∗. Our results hold under deterministic assumptions which are satisfied if X is sampled from any sub-Gaussian distribution. Finally unlike existing results that apply only to a fixed w∗, generated independently of X, our results are universal and hold for any w∗ ∈ Rp.\nNext, we propose gradient descent-based extensions of Torrent that can scale efficiently to large scale problems, such as high dimensional sparse recovery and prove similar recovery guarantees for these extensions. Empirically we find Torrent, and more so its extensions, offering significantly faster recovery than the state-of-the-art L1 solvers. For instance, even on moderate-sized datasets (with p = 50K) with around 40% corrupted responses, a variant of our proposed method called Torrent-HYB is more than 20× faster than the best L1 solver.\n“If among these errors are some which appear too large to be admissible, then those equations which produced these errors will be rejected, as coming from too faulty experiments, and the unknowns will be determined by means of the other equations, which will then give much smaller errors.”\nA. M. Legendre, On the Method of Least Squares. 1805."
    }, {
      "heading" : "1 Introduction",
      "text" : "Robust Least Squares Regression (RLSR) addresses the problem of learning a reliable set of regression coefficients in the presence of several arbitrary corruptions in the response vector. Owing to the wideapplicability of regression, RLSR features as a critical component of several important real-world applications in a variety of domains such as signal processing [13], economics [12], computer vision [16, 15], and astronomy [12].\nGiven a data matrix X = [x1, . . . ,xn] with n data points in Rp and the corresponding response vector y ∈ Rn, the goal of RLSR is to learn a ŵ such that,\n(ŵ, Ŝ) = arg min w∈Rp\nS⊂[n]:|S|≥(1−β)·n\n∑ i∈S (yi − xTi w)2, (1)\nThat is, we wish to simultaneously determine the set of corruption free points Ŝ and also estimate the best model parameters over the set of clean points. However, the optimization problem given above is non-\nar X\niv :1\n50 6.\n02 42\n8v 1\n[ cs\n.L G\n] 8\nJ un\n2 01\n5\nconvex (jointly in w and S) in general and might not directly admit efficient solutions. Indeed there exist reformulations of this problem that are known to be NP-hard to optimize [13].\nTo address this problem, most existing methods with provable guarantees assume that the observations are obtained from some generative model. A commonly adopted model is the following\ny = XTw∗ + b, (2)\nwhere w∗ ∈ Rp is the true model vector that we wish to estimate and b ∈ Rn is the corruption vector that can have arbitrary values. A common assumption is that the corruption vector is sparsely supported i.e. ‖b‖0 ≤ α · n for some α > 0.\nRecently, [15] and [9] obtained a surprising result which shows that one can recover w∗ exactly even when α . 1, i.e., when almost all the points are corrupted, by solving an L1-penalty based convex optimization problem: minw,b ‖w‖1+λ ‖b‖1, s.t., X>w+b = y. However, these results require the corruption vector b to be selected oblivious of X and w∗. Moreover, the results impose severe restrictions on the data distribution, requiring that the data be either sampled from an isotropic Gaussian ensemble [15], or row-sampled from an incoherent orthogonal matrix [9]. Finally, these results hold only for a fixed w∗ and are not universal in general.\nIn contrast, [4] studied RLSR with less stringent assumptions, allowing arbitrary corruptions in response variables as well as in the data matrix X, and proposed a trimmed inner product based algorithm for the problem. However, their recovery guarantees are significantly weaker. Firstly, they are able to recover w∗ only upto an additive error α √ p (or α √ s if w∗ is s-sparse). Hence, they require α ≤ 1/√p just to claim a non-trivial bound. Note that this amounts to being able to tolerate only a vanishing fraction of corruptions. More importantly, even with n → ∞ and extremely small α they are unable to guarantee exact recovery of w∗. A similar result was obtained by [8], albeit using a sub-sampling based algorithm with stronger assumptions on b.\nIn this paper, we focus on a simple and natural thresholding based algorithm for RLSR. At a high level, at each step t, our algorithm alternately estimates an active set St of “clean” points and then updates the model to obtain wt+1 by minimizing the least squares error on the active set. This intuitive algorithm seems to embody a long standing heuristic first proposed by Legendre [1] over two centuries ago (see introductory quotation in this paper) that has been adopted in later literature [10, 11] as well. However, to the best of our knowledge, this technique has never been rigorously analyzed before in non-asymptotic settings, despite its appealing simplicity.\nOur Contributions: The main contribution of this paper is an exact recovery guarantee for the thresholding algorithm mentioned above that we refer to as Torrent-FC (see Algorithm 1). We provide our guarantees in the model given in 2 where the corruptions b are selected adversarially but restricted to have at most α · n non-zero entries where α < 1/2 is a global constant dependent only on X1. Under deterministic conditions on X, namely the subset strong convexity (SSC) and smoothness (SSS) properties (see Definition 1), we guarantee that Torrent-FC converges at a geometric rate and recovers w∗ exactly. We further show that these properties (SSC and SSS) are satisfied w.h.p. if a) the data X is sampled from a sub-Gaussian distribution and, b) n ≥ p log p.\nWe would like to stress three key advantages of our result over the results of [15, 9]: a) we allow b to be adversarial, i.e., both support and values of b to be selected adversarially based on X and w∗, b) we make assumptions on data that are natural, as well as significantly less restrictive than what existing methods make, and c) our analysis admits universal guarantees, i.e., holds for any w∗.\nWe would also like to stress that while hard-thresholding based methods have been studied rigorously for the sparse-recovery problem [3, 6], hard-thresholding has not been studied formally for the robust regression problem. Moreover, the two problems are completely different and hence techniques from sparse-recovery analysis do not extend to robust regression.\n1Note that for an adaptive adversary, as is the case in our work, recovery cannot be guaranteed for α ≥ 1/2 since the adversary can introduce corruptions as bi = x > i (w̃−w∗) for an adversarially chosen model w̃. This would make it impossible for any algorithm to distinguish between w∗ and w̃ thus making recovery impossible.\nDespite its simplicity, Torrent-FC does not scale very well to datasets with large p as it solves least squares problems at each iteration. We address this issue by designing a gradient descent based algorithm (Torrent-GD), and a hybrid algorithm (Torrent-Hyb), both of which enjoy a geometric rate of convergence and can recover w∗ under the model assumptions mentioned above. We also propose extensions of Torrent for the RLSR problem in the sparse regression setting where p n but ‖w∗‖0 = s∗ p. Our algorithm Torrent-HD is based on Torrent-FC but uses the Iterative Hard Thresholding (IHT) algorithm, a popular algorithm for sparse regression. As before, we show that Torrent-HD also converges geometrically to w∗ if a) the corruption index α is less than some constant C, b) X is sampled from a sub-Gaussian distribution and, c) n ≥ s∗ log p.\nFinally, we experimentally evaluate existing L1-based algorithms and our hard thresholding-based algorithms. The results demonstrate that our proposed algorithms (Torrent-(FC/GD/HYB)) can be significantly faster than the best L1 solvers, exhibit better recovery properties, as well as be more robust to dense white noise. For instance, on a problem with 50K dimensions and 40% corruption, Torrent-HYB was found to be 20× faster than L1 solvers, as well as achieve lower error rates.\nPaper Organization: We give a formal definition of the RLSR problem in the next section. We then introduce our family of algorithms in Section 3 and prove their convergence guarantees in Section 4. We present extensions to sparse robust regression in Section 5 and empirical results in Section 6."
    }, {
      "heading" : "2 Problem Formulation",
      "text" : "Given a set of data points X = [x1,x2, . . . ,xn], where xi ∈ Rp and the corresponding response vector y ∈ Rn, the goal is to recover a parameter vector w∗ which solves the RLSR problem (1). We assume that the response vector y is generated using the following model:\ny = y∗ + b + ε, where y∗ = X>w∗.\nHence, in the above model, (1) reduces to estimating w∗. We allow the model w∗ representing the regressor, to be chosen in an adaptive manner after the data features have been generated.\nThe above model allows two kinds of perturbations to yi – dense but bounded noise εi (e.g. white noise εi ∼ N (0, σ2), σ ≥ 0), as well as potentially unbounded corruptions bi – to be introduced by an adversary. The only requirement we enforce is that the gross corruptions be sparse.\nε shall represent the dense noise vector, for example ε ∼ N (0, σ2 · In×n), and b, the corruption vector such that ‖b‖0 ≤ α · n for some corruption index α > 0. We shall use the notation S∗ = supp(b) ⊆ [n] to denote the set of “clean” points, i.e. points that have not faced unbounded corruptions. We consider adaptive adversaries that are able to view the generated data points xi, as well as the clean responses y ∗ i and dense noise values εi before deciding which locations to corrupt and by what amount. We denote the unit sphere in p dimensions using Sp−1. For any γ ∈ (0, 1], we let Sγ = {S ⊂ [n] : |S| = γ · n} denote the set of all subsets of size γ · n. For any set S, we let XS := [xi]i∈S ∈ Rp×|S| denote the matrix whose columns are composed of points in that set. Also, for any vector v ∈ Rn we use the notation vS to denote the |S|-dimensional vector consisting of those components that are in S. We use λmin(X) and λmax(X) to denote, respectively, the smallest and largest eigenvalues of a square symmetric matrix X. We now introduce two properties, namely, Subset Strong Convexity and Subset Strong Smoothness, which are key to our analyses.\nDefinition 1 (SSC and SSS Properties). A matrix X ∈ Rp×n satisfies the Subset Strong Convexity Property (resp. Subset Strong Smoothness Property) at level γ with strong convexity constant λγ (resp. strong smoothness constant Λγ) if the following holds:\nλγ ≤ min S∈Sγ λmin(XSX > S ) ≤ max S∈Sγ λmax(XSX > S ) ≤ Λγ .\nRemark 1. We note that the uniformity enforced in the definitions of the SSC and SSS properties is not for the sake of convenience but rather a necessity. Indeed, a uniform bound is required in face of an adversary\nAlgorithm 1 Torrent: Thresholding Operator-based Robust RegrEssioN meThod Input: Training data {xi, yi} , i = 1 . . . n, step length η, thresholding parameter β, tolerance\n1: w0 ← 0, S0 = [n], t← 0, r0 ← y 2: while ∥∥rtSt∥∥2 > do 3: wt+1 ← UPDATE(wt, St, η, rt, St−1) 4: rt+1i ← ( yi − 〈 wt+1,xi\n〉) 5: St+1 ← HT(rt+1, (1− β)n) 6: t← t+ 1 7: end while 8: return wt\nAlgorithm 2 Torrent-FC\nInput: Current model w, current active set S\n1: return arg min w ∑ i∈S (yi − 〈w,xi〉)2\nAlgorithm 3 Torrent-GD\nInput: Current model w, current active set S, step size η\n1: g← XS(X>S w − yS) 2: return w − η · g\nAlgorithm 4 Torrent-HYB\nInput: Current model w, current active set S, step size η, current residuals r, previous active set S′\n1: // Use the GD update if the active set S is changing a lot 2: if |S\\S′| > ∆ then 3: w′ ← UPDATE-GD(w, S, η, r, S′) 4: else 5: // If stable, use the FC update 6: w′ ← UPDATE-FC(w, S) 7: end if 8: return w′\nwhich can perform corruptions after data and response variables have been generated, and choose to corrupt precisely that set of points where the SSC and SSS parameters are the worst."
    }, {
      "heading" : "3 Torrent: Thresholding Operator-based Robust Regression Method",
      "text" : "We now present Torrent, a Thresholding Operator-based Robust RegrEssioN meThod for performing robust regression at scale. Key to our algorithms is the Hard Thresholding Operator which we define below.\nDefinition 2 (Hard Thresholding Operator). For any vector v ∈ Rn, let σv ∈ Sn be the permutation that orders elements of v in ascending order of their magnitudes i.e. ∣∣vσv(1)∣∣ ≤ ∣∣vσv(2)∣∣ ≤ . . . ≤ ∣∣vσv(n)∣∣. Then for any k ≤ n, we define the hard thresholding operator as\nHT(v; k) = { i ∈ [n] : σ−1v (i) ≤ k } Using this operator, we present our algorithm Torrent (Algorithm 1) for robust regression. Torrent follows a most natural iterative strategy of, alternately, estimating an active set of points which have the least residual error on the current regressor, and then updating the regressor to provide a better fit on this active set. We offer three variants of our algorithm, based on how aggressively the algorithm tries to fit the regressor to the current active set.\nWe first propose a fully corrective algorithm Torrent-FC (Algorithm 2) that performs a fully corrective least squares regression step in an effort to minimize the regression error on the active set. This algorithm makes significant progress in each step, but at a cost of more expensive updates. To address this, we then propose a milder, gradient descent-based variant Torrent-GD (Algorithm 3) that performs a much cheaper update of taking a single step in the direction of the gradient of the objective function on the active set. This reduces the regression error on the active set but does not minimize it. This turns out to be beneficial in situations where dense noise is present along with sparse corruptions since it prevents the algorithm from overfitting to the current active set.\nBoth the algorithms proposed above have their pros and cons – the FC algorithm provides significant improvements with each step, but is expensive to execute whereas the GD variant, although efficient in executing each step, offers slower progress. To get the best of both these algorithms, we propose a third, hybrid variant Torrent-HYB (Algorithm 4) that adaptively selects either the FC or the GD update depending on whether the active set is stable across iterations or not.\nIn the next section we show that this hard thresholding-based strategy offers a linear convergence rate for the algorithm in all its three variations. We shall also demonstrate the applicability of this technique to high dimensional sparse recovery settings in a subsequent section."
    }, {
      "heading" : "4 Convergence Guarantees",
      "text" : "For the sake of ease of exposition, we will first present our convergence analyses for cases where dense noise is not present i.e. y = X>w∗ + b and will handle cases with dense noise and sparse corruptions later. We first analyze the fully corrective Torrent-FC algorithm. The convergence proof in this case relies on the optimality of the two steps carried out by the algorithm, the fully corrective step that selects the best regressor on the active set, and the hard thresholding step that discovers a new active set by selecting points with the least residual error on the current regressor.\nTheorem 3. Let X = [x1, . . . ,xn] ∈ Rp×n be the given data matrix and y = XTw∗ + b be the corrupted output with ‖b‖0 ≤ α · n. Let Algorithm 2 be executed on this data with the thresholding parameter set to β ≥ α. Let Σ0 be an invertible matrix such that X̃ = Σ−1/20 X satisfies the SSC and SSS properties at level γ with constants λγ and Λγ respectively (see Definition 1). If the data satisfies (1+ √\n2)Λβ λ1−β < 1, then after t = O ( log (\n1√ n\n‖b‖2 )) iterations, Algorithm 2 obtains an -accurate solution wt i.e. ‖wt −w∗‖2 ≤ .\nProof (Sketch). Let rt = y − X>wt be the vector of residuals at time t and Ct = XStX>St . Also let S∗ = supp(b) be the set of uncorrupted points. The fully corrective step ensures that\nwt+1 = C−1t XStySt = C −1 t XSt ( X>Stw ∗ + bSt ) = w∗ + C−1t XStbSt ,\nwhereas the hard thresholding step ensures that ∥∥∥rt+1St+1∥∥∥22 ≤ ∥∥rt+1S∗ ∥∥22. Combining the two gives us∥∥bSt+1∥∥22 ≤ ∥∥∥X>S∗\\St+1C−1t XStbSt∥∥∥22 + 2 · b>St+1X>St+1C−1t XStbSt\nζ1 = ∥∥∥∥X̃>S∗\\St+1 (X̃StX̃TSt)−1 X̃StbSt∥∥∥∥2 2 + 2 · b>St+1X̃ > St+1 ( X̃StX̃ T St )−1 X̃StbSt\nζ2 ≤ Λ2β λ21−β · ‖bSt‖ 2 2 + 2 · Λβ λ1−β\n· ‖bSt‖2 ∥∥bSt+1∥∥2 ,\nwhere ζ1 follows from setting X̃ = Σ −1/2 0 X and X > S C −1 t XS′ = X̃ > S (X̃StX̃ > St )−1X̃S′ and ζ2 follows from the SSC and SSS properties, ‖bSt‖0 ≤ ‖b‖0 ≤ β · n and |S∗\\St+1| ≤ β · n. Solving the quadratic equation and performing other manipulations gives us the claimed result.\nTheorem 3 relies on a deterministic (fixed design) assumption, specifically (1+ √\n2)Λβ λ1−β < 1 in order to\nguarantee convergence. We can show that a large class of random designs, including Gaussian and subGaussian designs actually satisfy this requirement. That is to say, data generated from these distributions satisfy the SSC and SSS conditions such that (1+ √\n2)Λβ λ1−β < 1 with high probability. Theorem 4 explicates this\nfor the class of Gaussian designs.\nTheorem 4. Let X = [x1, . . . ,xn] ∈ Rp×n be the given data matrix with each xi ∼ N (0,Σ). Let y = X>w∗ + b and ‖b‖0 ≤ α · n. Also, let α ≤ β < 165 and n ≥ Ω ( p+ log 1δ ) . Then, with probability at least 1 − δ, the data satisfies (1+ √\n2)Λβ λ1−β < 910 . More specifically, after T ≥ 10 log ( 1√ n ‖b‖2 ) iterations of\nAlgorithm 1 with the thresholding parameter set to β, we have ∥∥wT −w∗∥∥ ≤ .\nRemark 2. Note that Theorem 4 provides rates that are independent of the condition number λmax(Σ)λmin(Σ) of the distribution. We also note that results similar to Theorem 4 can be proven for the larger class of sub-Gaussian distributions. We refer the reader to Section G for the same.\nRemark 3. We remind the reader that our analyses can readily accommodate dense noise in addition to sparse unbounded corruptions. We direct the reader to Appendix A which presents convergence proofs for our algorithms in these settings.\nRemark 4. We would like to point out that the design requirements made by our analyses are very mild when compared to existing literature. Indeed, the work of [15] assumes the Bouquet Model where distributions are restricted to be isotropic Gaussians whereas the work of [9] assumes a more stringent model of suborthonormal matrices, something that even Gaussian designs do not satisfy. Our analyses, on the other hand, hold for the general class of sub-Gaussian distributions.\nWe now analyze the Torrent-GD algorithm which performs cheaper, gradient-style updates on the active set. We will show that this method nevertheless enjoys a linear rate of convergence.\nTheorem 5. Let the data settings be as stated in Theorem 3 and let Algorithm 3 be executed on this data with the thresholding parameter set to β ≥ α and the step length set to η = 1Λ1−β . If the data satisfies\nmax { η √ Λβ , 1− ηλ1−β } ≤ 14 , then after t = O ( log ( ‖b‖2√ n 1 )) iterations, Algorithm 1 obtains an -accurate solution wt i.e. ‖wt −w∗‖2 ≤ .\nSimilar to Torrent-FC, the assumptions made by the Torrent-GD algorithm are also satisfied by the class of sub-Gaussian distributions. The proof of Theorem 5, given in Appendix D, details these arguments. Given the convergence analyses for Torrent-FC and GD, we now move on to provide a convergence analysis for the hybrid Torrent-HYB algorithm which interleaves FC and GD steps. Since the exact interleaving adopted by the algorithm depends on the data, and not known in advance, this poses a problem. We address this problem by giving below a uniform convergence guarantee, one that applies to every interleaving of the FC and GD update steps.\nTheorem 6. Suppose Algorithm 4 is executed on data that allows Algorithms 2 and 3 a convergence rate of ηFC and ηGD respectively. Suppose we have 2 · ηFC · ηGD < 1. Then for any interleavings of the FC and GD steps that the policy may enforce, after t = O ( log (\n1√ n\n‖b‖2 )) iterations, Algorithm 4 ensures an -optimal\nsolution i.e. ‖wt −w∗‖ ≤ .\nWe point out to the reader that the assumption made by Theorem 6 i.e. 2 · ηFC · ηGD < 1 is readily satisfied by random sub-Gaussian designs, albeit at the cost of reducing the noise tolerance limit. As we shall see, Torrent-HYB offers attractive convergence properties, merging the fast convergence rates of the FC step, as well as the speed and protection against overfitting provided by the GD step."
    }, {
      "heading" : "5 High-dimensional Robust Regression",
      "text" : "In this section, we extend our approach to the robust high-dimensional sparse recovery setting. As before, we assume that the response vector y is obtained as: y = X>w∗ + b, where ‖b‖0 ≤ α · n. However, this time, we also assume that w∗ is s∗-sparse i.e. ‖w∗‖0 ≤ s∗.\nAs before, we shall neglect white/dense noise for the sake of simplicity. We reiterate that it is not possible to use existing results from sparse recovery (such as [3, 6]) directly to solve this problem.\nOur objective would be to recover a sparse model ŵ so that ‖ŵ −w∗‖2 ≤ . The challenge here is to forgo a sample complexity of n & p and instead, perform recovery with n ∼ s∗ log p samples alone. For this setting, we modify the FC update step of Torrent-FC method to the following:\nwt+1 ← inf ‖w‖0≤s ∑ i∈St (yi − 〈w,xi〉)2 , (3)\nfor some target sparsity level s p. We refer to this modified algorithm as Torrent-HD. Assuming X satisfies the RSC/RSS properties (defined below), (3) can be solved efficiently using results from sparse recovery (for example the IHT algorithm [3, 5] analyzed in [6]).\nDefinition 7 (RSC and RSS Properties). A matrix X ∈ Rp×n will be said to satisfy the Restricted Strong Convexity Property (resp. Restricted Strong Smoothness Property) at level s = s1 +s2 with strong convexity constant αs1+s2 (resp. strong smoothness constant Ls1+s2) if the following holds for all ‖w1‖0 ≤ s1 and ‖w2‖0 ≤ s2:\nαs ‖w1 −w2‖22 ≤ ∥∥X>(w1 −w2)∥∥22 ≤ Ls ‖w1 −w2‖22\nFor our results, we shall require the subset versions of both these properties.\nDefinition 8 (SRSC and SRSS Properties). A matrix X ∈ Rp×n will be said to satisfy the Subset Restricted Strong Convexity (resp. Subset Restricted Strong Smoothness) Property at level (γ, s) with strong convexity constant α(γ,s) (resp. strong smoothness constant L(γ,s)) if for all subsets S ∈ Sγ , the matrix XS satisfies the RSC (resp. RSS) property at level s with constant αs (resp. Ls).\nWe now state the convergence result for the Torrent-HD algorithm.\nTheorem 9. Let X ∈ Rp×n be the given data matrix and y = XTw∗ + b be the corrupted output with ‖w∗‖0 ≤ s∗ and ‖b‖0 ≤ α ·n. Let Σ0 be an invertible matrix such that Σ −1/2 0 X satisfies the SRSC and SRSS properties at level (γ, 2s + s∗) with constants α(γ,2s+s∗) and L(γ,2s+s∗) respectively (see Definition 8). Let Algorithm 2 be executed on this data with the Torrent-HD update, thresholding parameter set to β ≥ α, and s ≥ 32 ( L(1−β,2s+s∗) α(1−β,2s+s∗) ) .\nIf X also satisfies 4L(β,s+s∗) α(1−β,s+s∗)\n< 1, then after t = O ( log (\n1√ n\n‖b‖2 )) iterations, Algorithm 2 obtains an\n-accurate solution wt i.e. ‖wt −w∗‖2 ≤ . In particular, if X is sampled from a Gaussian distribution N (0,Σ) and n ≥ Ω ( s∗ · λmax(Σ)λmin(Σ) log p ) , then\nfor all values of α ≤ β < 165 , we can guarantee ‖w t −w∗‖2 ≤ after t = O\n( log (\n1√ n\n‖b‖2 )) iterations of\nthe algorithm (w.p. ≥ 1− 1/n10).\nRemark 5. The sample complexity required by Theorem 9 is identical to the one required by analyses for high dimensional sparse recovery [6], save constants. Also note that Torrent-HD can tolerate the same corruption index as Torrent-FC."
    }, {
      "heading" : "6 Experiments",
      "text" : "Several numerical simulations were carried out on linear regression problems in low-dimensional, as well as sparse high-dimensional settings. The experiments show that Torrent not only offers statistically better recovery properties as compared to L1-style approaches, but that it can be more than an order of magnitude faster as well.\nData: For the low dimensional setting, the regressor w∗ ∈ Rp was chosen to be a random unit norm vector. Data was sampled as xi ∼ N (0, Ip) and response variables were generated as y∗i = 〈w∗,xi〉. The set of corrupted points S∗ was selected as a uniformly random (αn)-sized subset of [n] and the corruptions were set to bi ∼ U (−5 ‖y∗‖∞ , 5 ‖y∗‖∞) for i ∈ S∗. The corrupted responses were then generated as yi = y∗i + bi + εi where εi ∼ N (0, σ2). For the sparse high-dimensional setting, supp(w∗) was selected to be a random s∗-sized subset of [p]. Phase-transition diagrams (Figure 1) were generated by repeating each experiment 100 times. For all other plots, each experiment was run over 20 random instances of the data and the plots were drawn to depict the mean results.\nAlgorithms: We compared various variants of our algorithm Torrent to the regularized L1 algorithm for robust regression [15, 9]. Note that the L1 problem can be written as minz ‖z‖1 s.t.Az = y, where\nA = [ X> 1λIm×m ] and z∗ = [w∗> λb>]>. We used the Dual Augmented Lagrange Multiplier (DALM) L1 solver implemented by [17] to solve the L1 problem. We ran a fine tuned grid search over the λ parameter for the L1 solver and quoted the best results obtained from the search. In the low-dimensional setting, we compared the recovery properties of Torrent-FC (Algorithm 2) and Torrent-HYB (Algorithm 4) with the DALM-L1 solver, while for the high-dimensional case, we compared Torrent-HD against the DALM-L1 solver. Both the L1 solver, as well as our methods, were implemented in Matlab and were run on a single core 2.4GHz machine with 8 GB RAM.\nChoice of L1-solver: An extensive comparative study of various L1 minimization algorithms was performed by [17] who showed that the DALM and Homotopy solvers outperform other counterparts both in terms of recovery properties, and timings. We extended their study to our observation model and found the DALM solver to be significantly better than the other L1 solvers; see Figure 3 in the appendix. We also observed, similar to [17], that the Approximate Message Passing (AMP) solver diverges on our problem as the input matrix to the L1 solver is a non-Gaussian matrix A = [X T 1 λI].\nEvaluation Metric: We measure the performance of various algorithms using the standard L2 error: rŵ = ‖ŵ −w∗‖2. For the phase-transition plots (Figure 1), we deemed an algorithm successful on an instance if it obtained a model ŵ with error rŵ < 10\n−4 · ‖w∗‖2. We also measured the CPU time required by each of the methods, so as to compare their scalability."
    }, {
      "heading" : "6.1 Low Dimensional Results",
      "text" : "Recovery Property: The phase-transition plots presented in Figure 1 represent our recovery experiments in graphical form. Both the fully-corrective and hybrid variants of Torrent show better recovery properties than the L1-minimization approach, indicated by the number of runs in which the algorithm was able to correctly recover w∗ out of a 100 runs. Figure 2 shows the variation in recovery error as a function of α in the presence of white noise and exhibits the superiority of Torrent-FC and Torrent-HYB over L1-DALM. Here again, Torrent-FC and Torrent-HYB achieve significantly lesser recovery error than L1-DALM for all α <= 0.5. Figure 3 in the appendix show that the variations of ‖ŵ −w∗‖2 with varying p, σ and n follow a similar trend with Torrent having significantly lower recovery error in comparison to the L1 approach.\nFigure 1(d) brings out an interesting trend in the recovery property of Torrent. As we increase the magnitude of corruption from U (−‖y∗‖∞ , ‖y∗‖∞) to U (−20 ‖y∗‖∞ , 20 ‖y∗‖∞), the recovery error for Torrent-HYB and Torrent-FC decreases as expected since it becomes easier to identify the grossly corrupted points. However the L1-solver was unable to exploit this observation and in fact exhibited an increase in recovery error.\nRun Time: In order to ascertain the recovery guarantees for Torrent on ill-conditioned problems, we performed an experiment where data was sampled as xi ∼ N (0,Σ) where diag(Σ) ∼ U(0, 5). Figure 2 plots\nthe recovery error as a function of time. Torrent-HYB was able to correctly recover w∗ about 50× faster than L1-DALM which spent a considerable amount of time pre-processing the data matrix X. Even after allowing the L1 algorithm to run for 500 iterations, it was unable to reach the desired residual error of 10\n−4. Figure 2 also shows that our Torrent-HYB algorithm is able to converge to the optimal solution much faster than Torrent-FC or Torrent-GD. This is because Torrent-FC solves a least square problem at each step and thus, even though it requires significantly fewer iterations to converge, each iteration in itself is very expensive. While each iteration of Torrent-GD is cheap, it is still limited by the slow O ( (1− 1κ ) t ) convergence rate of the gradient descent algorithm, where κ is the condition number of the covariance matrix. Torrent-HYB, on the other hand, is able to combine the strengths of both the methods to achieve faster convergence."
    }, {
      "heading" : "6.2 High Dimensional Results",
      "text" : "Recovery Property: Figure 2 shows the variation in recovery error in the high-dimensional setting as the number of corrupted points was varied. For these experiments, n was set to 5s∗ log(p) and the fraction of corrupted points α was varied from 0.1 to 0.7. While L1-DALM fails to recover w\n∗ for α > 0.5, Torrent-HD offers perfect recovery even for α values upto 0.7.\nRun Time: Figure 2 shows the variation in recovery error as a function of run time in this setting. L1-DALM was found to be an order of magnitude slower than Torrent-HD, making it infeasible for sparse high-dimensional settings. One key reason for this is that the L1-DALM solver is significantly slower in identifying the set of clean points. For instance, whereas Torrent-HD was able to identify the clean set of points in only 5 iterations, it took L1 around 250 iterations to do the same."
    }, {
      "heading" : "A Convergence Guarantees with Dense Noise and Sparse Corrup-",
      "text" : "tions\nWe will now present recovery guarantees for the Torrent-FC algorithm when both, dense noise, as well as sparse adversarial corruptions are present. Extensions for Torrent-GD and Torrent-HYB will follow similarly.\nTheorem 10. Let X = [x1, . . . ,xn] ∈ Rp×n be the given data matrix and y = XTw∗+b+ε be the corrupted output with sparse corruptions ‖b‖0 ≤ α ·n as well as dense bounded noise ε. Let Algorithm 2 be executed on this data with the thresholding parameter set to β ≥ α. Let Σ0 be an invertible matrix such that X̃ = Σ−1/20 X satisfies the SSC and SSS properties at level γ with constants λγ and Λγ respectively (see Definition 1). If the data satisfies 4 √\nΛβ√ λ1−β\n< 1, then after t = O ( log (\n1√ n\n‖b‖2 )) iterations, Algorithm 2 obtains an -accurate\nsolution wt i.e. ‖wt −w∗‖2 ≤ + C ‖ε‖2√ n for some constant C > 0.\nProof. We being by observing that the optimality of the model wt+1 on the active set St ensures∥∥ySt −X>Stwt+1∥∥2 = ∥∥X>St(w∗ −wt+1) + εSt + bSt∥∥2 ≤ ∥∥yt −X>Stw∗∥∥2 = ‖εSt + bSt‖2 , which, upon the application of the triangle inequality, gives us∥∥X>St(w∗ −wt+1)∥∥2 ≤ 2 ‖εSt + bSt‖2 . Since\n∥∥X>St(w∗ −wt+1)∥∥2 ≥√λ1−β ∥∥w∗ −wt+1∥∥2, we get∥∥w∗ −wt+1∥∥ 2 ≤ 2√\nλ1−β ‖εSt + bSt‖2 ≤ 2√ λ1−β (‖ε‖2 + ‖bSt‖2) .\nThe hard thresholding step, on the other hand, guarantees that∥∥∥X>St+1(w∗ −wt+1) + εSt+1 + bSt+1∥∥∥2 2 = ∥∥∥ySt+1 −X>St+1wt+1∥∥∥2 2\n≤ ∥∥yS∗ −X>S∗wt+1∥∥2\n= ∥∥X>S∗(w∗ −wt+1) + εS∗∥∥22 .\nAs before, let CRt+1 = St+1\\S∗ and MDt+1 = S∗\\St+1. Then we have∥∥∥X>CRt+1(w∗ −wt+1) + εCRt+1 + bCRt+1∥∥∥ 2 ≤ ∥∥∥X>MDt+1(w∗ −wt+1) + εMDt+1∥∥∥ 2 .\nAn application of the triangle inequality and the fact that ∥∥bCRt+1∥∥2 = ∥∥bSt+1∥∥ gives us∥∥bSt+1∥∥2 ≤ ∥∥∥X>MDt+1(w∗ −wt+1)∥∥∥2 + ∥∥∥X>CRt+1(w∗ −wt+1)∥∥∥2 + ∥∥εCRt+1∥∥2 + ∥∥εMDt+1∥∥2\n≤ 2 √ Λβ ∥∥w∗ −wt+1∥∥ 2 + √ 2 ‖ε‖2 ,\n= 4 √\nΛβ√ λ1−β\n‖bSt‖2 + ( 4 √\nΛβ√ λ1−β + √ 2) ‖ε‖2\n≤ η · ‖bSt‖2 + (1 + √ 2) ‖ε‖2 ,\nwhere the second step uses the fact that max {|CRt+1| , |MDt+1|} ≤ β ·n and the Cauchy-Schwartz inequality, and the last step uses the fact that for sufficiently small β, we have η := 4 √\nΛβ√ λ1−β . Using the inequality for∥∥wt+1 −w∗∥∥ 2\nagain gives us ∥∥w∗ −wt+1∥∥ 2 ≤ 2√\nλ1−β (‖ε‖2 + ‖bSt‖2)\n≤ 4 + 2 √ 2√ λ1−β ‖ε‖2 + 2 · ηt√ λ1−β ‖b‖2\nFor large enough n we have √ λ1−β ≥ O ( √ n), which completes the proof.\nNotice that for random Gaussian noise, this result gives the following convergence guarantee.\nCorollary 11. Let the date be generated as before with random Gaussian dense noise i.e. y = XTw∗+b+ε with ‖b‖0 ≤ α·n and ε ∼ N (0, σ2·I). Let Algorithm 2 be executed on this data with the thresholding parameter set to β ≥ α. Let Σ0 be an invertible matrix such that X̃ = Σ−1/20 X satisfies the SSC and SSS properties at\nlevel γ with constants λγ and Λγ respectively (see Definition 1). If the data satisfies 4 √\nΛβ√ λ1−β < 1, then after t = O ( log (\n1√ n\n‖b‖2 )) iterations, Algorithm 2 obtains an -accurate solution wt i.e. ‖wt −w∗‖2 ≤ +2σC,\nwhere C > 0 is the constant in Theorem 10.\nProof. Using tail bounds on Chi-squared distributions [7], we get, with probability at least 1− δ,\n‖ε‖22 ≤ σ 2\n( n+ 2 √ n log 1\nδ + 2 log\n1\nδ\n) .\nThus, for n > 4 log 1δ , we have ‖ε‖ 2 2 ≤ 2σn which proves the result. Remark 6. We note that the design assumptions made by Theorem 10 (i..e 4 √\nΛβ√ λ1−β < 1) are similar to\nthose made by Theorem 3 and would be satisfied with high probability by data sampled from sub-Gaussian distributions (see Appendix G for details)."
    }, {
      "heading" : "B Proof of Theorem 3",
      "text" : "Theorem 3. Let X = [x1, . . . ,xn] ∈ Rp×n be the given data matrix and y = XTw∗ + b be the corrupted output with ‖b‖0 ≤ α · n. Let Algorithm 2 be executed on this data with the thresholding parameter set to β ≥ α. Let Σ0 be an invertible matrix such that X̃ = Σ−1/20 X satisfies the SSC and SSS properties at level γ with constants λγ and Λγ respectively (see Definition 1). If the data satisfies (1+ √\n2)Λβ λ1−β < 1, then after t = O ( log (\n1√ n\n‖b‖2 )) iterations, Algorithm 2 obtains an -accurate solution wt i.e. ‖wt −w∗‖2 ≤ .\nProof. Let rt = y −X>wt be the vector of residuals at time t and Ct = XStX>St . Since λα > 0 (something which we shall establish later), we get\nwt+1 = C−1t XStySt = C −1 t XSt ( X>Stw ∗ + bSt ) = w∗ + C−1t XStbSt .\nThus, for any set S ⊂ [n], we have\nrt+1S = yS −X > S wt+1 = bS −X>S C−1t XStbSt\nThis, gives us∥∥bSt+1∥∥22 = ∥∥∥bSt+1 −X>St+1C−1t XStbSt∥∥∥22 − ∥∥∥X>St+1C−1t XStbSt∥∥∥22 + 2 · b>St+1X>St+1C−1t XStbSt ζ1 ≤ ∥∥bS∗ −X>S∗C−1t XStbSt∥∥22 − ∥∥∥X>St+1C−1t XStbSt∥∥∥22 + 2 · b>St+1X>St+1C−1t XStbSt\nζ2 = ∥∥X>S∗C−1t XStbSt∥∥22 − ∥∥∥X>St+1C−1t XStbSt∥∥∥22 + 2 · b>St+1X>St+1C−1t XStbSt\n≤ ∥∥∥X>S∗\\St+1C−1t XStbSt∥∥∥22 + 2 · b>St+1X>St+1C−1t XStbSt\nζ3 = ∥∥∥∥X̃>S∗\\St+1 (X̃StX̃TSt)−1 X̃StbSt∥∥∥∥2 2 + 2 · b>St+1X̃ > St+1 ( X̃StX̃ T St )−1 X̃StbSt\nζ4 ≤ Λ2β λ21−β · ‖bSt‖ 2 2 + 2 · Λβ λ1−β\n· ‖bSt‖2 ∥∥bSt+1∥∥2 ,\nwhere ζ1 follows since the hard thresholding step ensures ∥∥∥rt+1St+1∥∥∥22 ≤ ∥∥rt+1S∗ ∥∥22 (see Claim 19 and use the fact that β ≥ α), ζ2 notices the fact that bS∗ = 0. ζ3 follows from setting X̃ = Σ −1/2 0 X and X > S C −1 t XS′ = X̃>S (X̃StX̃ > St\n)−1X̃S′ . ζ4 follows from the definition of SSC and SSS properties, ‖bSt‖0 ≤ ‖b‖0 ≤ β · n and |S∗\\St+1| ≤ β · n. Solving the quadratic equation gives us∥∥bSt+1∥∥2 ≤ (1 +√2) · Λβλ1−β · ‖bSt‖2 . (4) Let η := (1+ √\n2)Λβ λ1−β denote the convergence rate in (4). We shall show below that for a large family of random designs, we have η < 1 if n ≥ Ω ( p+ log 1δ ) . We now recall from our earlier discussion that wt+1 = w∗ + C−1t XStbSt which gives us∥∥wt+1 −w∗∥∥ 2 = ∥∥C−1t XStbSt∥∥2 ≤ √ Λβ\nλ1−β · ‖bSt‖2 ≤ η\nt · √ Λβ\nλ1−β ‖b‖2 ≤ ,\nfor t ≥ log 1 η\n(√ Λβ\nλ1−β · ‖b‖2\n) . Noting that √ Λβ\nλ1−β ≤ O ( 1√ n ) establishes the convergence result."
    }, {
      "heading" : "C Proof of Theorem 4",
      "text" : "Theorem 4. Let X = [x1, . . . ,xn] ∈ Rp×n be the given data matrix with each xi ∼ N (0,Σ). Let y = X>w∗ + b and ‖b‖0 ≤ α · n. Also, let α ≤ β < 165 and n ≥ Ω ( p+ log 1δ ) . Then, with probability at least 1 − δ, the data satisfies (1+ √\n2)Λβ λ1−β < 910 . More specifically, after T ≥ 10 log ( 1√ n ‖b‖2 ) iterations of\nAlgorithm 1 with the thresholding parameter set to β, we have ∥∥wT −w∗∥∥ ≤ .\nProof. We note that whenever x ∼ N (0,Σ) then Σ−1/2x ∼ N (0, I). Thus, Theorem 15 assures us that with probability at least 1− δ, the data matrix X̃ = Σ−1/2X satisfies the SSC and SSS properties with the following constants\nΛβ ≤ βn ( 1 + 3e √ 6 log e\nβ\n) +O (√ np+ n log 1\nδ\n)\nλ1−β ≥ n− βn ( 1 + 3e √ 6 log e\nβ\n) − Ω (√ np+ n log 1\nδ\n)\nThus, the convergence given be Algorithm 1, when invoked with Σ0 = Σ, relies on the quantity η = (1+ √\n2)Λβ λ1−β\nbeing less than unity. This translates to the requirement (1 + √\n2)Λβ ≤ λ1−β . Using the above bounds translates that requirement to\n(2 + √ 2)β ( 1 + 3e √ 6 log e\nβ ) ︸ ︷︷ ︸\n(A)\n+O\n(√ p\nn +\n1 n log 1 δ ) ︸ ︷︷ ︸\n(B)\n< 1.\nFor n = Ω ( p+ log 1δ ) , the second quantity (B) can be made as small a constant as necessary. Tackling the first quantity (A) turns out to be more challenging. However, we can show that for all β < 1190 , we get η = (1+ √\n2)Λβ λ1−β < 910 which establishes the claimed result. Thus, Algorithm 1 can tolerate a corruption index\nof upto α ≤ 1190 . However, we note that using a more finely tuned setting of the constant in the proof of Theorem 15 and a more careful proof using tight tail inequalities for chi-squared distributions [7], we can achieve a better corruption level tolerance of α < 165 ."
    }, {
      "heading" : "D Proof of Theorem 5",
      "text" : "Theorem 5. Let X = [x1, . . . ,xn] ∈ Rp×n be the given data matrix and y = XTw∗ + b be the corrupted output with ‖b‖0 ≤ α · n. Let X satisfy the SSC and SSS properties at level γ with constants λγ and Λγ respectively (see Definition 1). Let Algorithm 1 be executed on this data with the GD update (Algorithm 3) with the thresholding parameter set to β ≥ α and the step length set to η = 1Λ1−β . If the data satisfies\nmax { η √ Λβ , 1− ηλ1−β } ≤ 14 , then after t = O ( log ( ‖b‖2√ n 1 )) iterations, Algorithm 1 obtains an -accurate solution wt i.e. ‖wt −w∗‖2 ≤ .\nProof. Let rt = y −X>wt be the vector of residuals at time t and Ct = XStX>St . We have\nwt+1 = wt + η ·XStrtSt = w t + η ·XSt(ySt −X>Stw t)\nThe thresholding step ensures that ∥∥∥rt+1St+1∥∥∥22 ≤ ∥∥rt+1S∗ ∥∥22 (see Claim 19 and use β ≥ α) which implies∥∥∥rt+1CRt+1∥∥∥22 ≤ ∥∥∥rt+1MDt+1∥∥∥22 ,\nwhere CRt+1 = St+1\\S∗ are the corrupted recoveries and MDt+1 = S∗\\St+1 are the clean points missed out from detection. Note that |CRt+1| ≤ α · n and |MDt+1| ≤ β · n. Since bS∗ = 0 and MDt+1 ⊆ S∗, we get∥∥∥bCRt+1 +X>CRt+1(w∗ −wt+1)∥∥∥ 2 ≤ ∥∥∥X>MDt+1(w∗ −wt+1)∥∥∥ 2\nUsing the SSS conditions and the fact that ∥∥bSt+1∥∥2 = ∥∥bSt+1\\S∗∥∥2 gives us∥∥bSt+1∥∥2 = ∥∥bCRt+1∥∥2 ≤ (√Λα +√Λβ)∥∥w∗ −wt+1∥∥2 ≤ 2√Λβ ∥∥w∗ −wt+1∥∥2\nNow, using the expression for wt+1 gives us∥∥w∗ −wt+1∥∥ 2 ≤ ∥∥(I − ηCt)(w∗ −wt)∥∥2 + η ‖XStbSt‖2\nWe will bound the two terms on the right hand separately. We can bound the second term easily as η ‖XStbSt‖2 ≤ η √ Λα ‖bSt‖2 ≤ η √ Λβ ‖bSt‖2 ,\nsince ‖bSt‖0 ≤ α · n. For the first term we observe that for η ≤ 1 Λ1−β , we have\n‖I − ηCt‖2 = sup v∈Sp−1 ∣∣1− η · v>Ctv∣∣ = sup v∈Sp−1 { 1− η · v>Ctv } ≤ 1− ηλ1−β ,\nwhich we can use to bound∥∥w∗ −wt+1∥∥ 2 ≤ (1− ηλ1−β) ∥∥w∗ −wt∥∥ 2 + η √ Λβ ‖bSt‖2\nThis gives us, for η = 1Λ1−β ,∥∥bSt+1∥∥2 ≤ 2√Λβ ∥∥w∗ −wt+1∥∥2 ≤ 2 (1− λ1−βΛ1−β )\n︸ ︷︷ ︸ (P )\n√ Λβ ∥∥w∗ −wt∥∥\n2 + 2 Λβ Λ1−β︸ ︷︷ ︸\n(Q)\n‖bSt‖2 .\nFor Gaussian designs and small enough β, we can show (Q) ≤ 14 as we did in Theorem 4. To bound (P ), we use the lower bound on λ1−β given by Theorem 15 and use the following tighter upper bound for Λ1−β :\nΛ1−β ≤ ( (1− β) + 3e √\n6β(1− β) log e β\n) n+O (√ np+ n log 1\nδ\n)\nThe above bound is obtained similarly to the one in Theorem 15 but uses the identity ( n k ) = ( n n−k ) ≤(\nen n−k\n)n−k for values of k ≥ n/2 instead. For small enough β and n = Ω ( κ2(Σ)(p+ log 1δ ) ) , we can then\nshow (P ) ≤ 14 as well. Let Ψt := √ n ‖w∗ −wt‖2 + ‖bSt‖. Using elementary manipulations and the fact that√\nΛβ ≥ Ω ( √ n), we can then show that\nΨt+1 ≤ 3/4 ·Ψt. Thus, in t = O ( log (( ‖w∗‖2 + ‖b‖2√ n ) 1 )) iterations of the algorithm, we arrive at an -optimal solution i.e. ‖w∗ −wt‖2 ≤ . A similar argument holds true for sub-Gaussian designs as well."
    }, {
      "heading" : "E Proof of Theorem 6",
      "text" : "Theorem 6. Suppose Algorithm 4 is executed on data that allows Algorithms 2 and 3 a convergence rate of ηFC and ηGD respectively. Suppose we have 2 · ηFC · ηGD < 1. Then for any interleavings of the FC and GD steps that the policy may enforce, after t = O ( log (\n1√ n\n‖b‖2 )) iterations, Algorithm 4 ensures an -optimal\nsolution i.e. ‖wt −w∗‖ ≤ .\nProof. Our proof shall essentially show that the FC and GD steps do not undo the progress made by the other if executed in succession and if 2 · ηFC · ηGD < 1, actually ensure non-trivial progress. Let\nΨFCt = ‖bSt‖2 ΨGDt = √ n ∥∥wt −w∗∥∥+ ‖bSt‖2\ndenote the potential functions used in the analyses of the FC and GD algorithms before. Then we will show below that if the FC and GD algorithms are executed in steps t and t+ 1 then we have\nΨFCt+2 ≤ 2 · ηFC · ηGD ·ΨFCt\nAlternatively, if the GD and FC algorithms are executed in steps t and t+ 1 respectively, then\nΨGDt+2 ≤ 2 · ηFC · ηGD ·ΨGDt\nThus, if algorithm executes the FC step at the time step t, then it would at least ensure ΨFCt ≤ (2 · ηFC · ηGD) t/2· ΨFC0 (similarly if the last step is a GD step). Since both the FC and GD algorithms ensure ‖wt −w∗‖2 ≤ for t ≥ O ( log (\n1√ n\n‖b‖2 )) , the claim would follow.\nWe now prove the two claimed results regarding the two types of interleaving below\n1. FC −→ GD The FC step guarantees ∥∥bSt+1∥∥2 ≤ ηFC · ‖bSt‖ as well as ∥∥wt+1 −w∗∥∥2 ≤ ηFC · ‖bSt‖√n , whereas the GD step guarantees ΨGDt+2 ≤ ηGD ·ΨGDt+1. Together these guarantee\n√ n ∥∥wt+2 −w∗∥∥ 2 + ∥∥bSt+2∥∥2 ≤ ηGD · √n∥∥wt+1 −w∗∥∥2 + ∥∥bSt+1∥∥2\n≤ 2 · ηFC · ηGD · ‖bSt‖2 Since √ n ∥∥wt+2 −w∗∥∥\n2 ≥ 0, this yields the result.\n2. GD −→ FC The GD step guarantees ΨGDt+1 ≤ ηGD ·ΨGDt whereas the FC step guarantees ∥∥bSt+2∥∥2 ≤ ηFC · ∥∥bSt+1∥∥ as well as ∥∥wt+2 −w∗∥∥ 2 ≤ ηFC · ‖bSt+1‖√ n . Together these guarantee\n√ n ∥∥wt+2 −w∗∥∥ 2 + ∥∥bSt+2∥∥2 ≤ 2ηFC ∥∥bSt+1∥∥2\n≤ 2 · ηFC · ηGD ·ΨGDt ,\nwhere the second step follows from the GD step guarantee since √ n ∥∥wt+1 −w∗∥∥\n2 ≥ 0.\nThis finishes the proof."
    }, {
      "heading" : "F Proof of Theorem 9",
      "text" : "Theorem 9. Let X = [x1, . . . ,xn] ∈ Rp×n be the given data matrix and y = XTw∗ + b be the corrupted output with ‖w∗‖0 ≤ s∗ and ‖b‖0 ≤ α · n. Let Algorithm 2 be executed on this data with the IHT update from [6] and thresholding parameter set to β ≥ α. Let Σ0 be an invertible matrix such that Σ−1/20 X satisfies the SRSC and SRSS properties at level (γ, 2s + s∗) with constants α(γ,2s+s∗) and L(γ,2s+s∗) respectively\n(see Definition 8) for s ≥ 32 ( L(γ,2s+s∗) α(γ,2s+s∗) ) with γ = 1 − β. If X also satisfies 4L(β,s+s∗)α(1−β,s+s∗) < 1, then after\nt = O ( log (\n1√ n\n‖b‖2 )) iterations, Algorithm 2 obtains an -accurate solution wt i.e. ‖wt −w∗‖2 ≤ . In\nparticular, if X is sampled from a Gaussian distribution N (0,Σ) and n ≥ Ω ( (2s+ s∗) log p+ log 1δ ) , then for all values of α ≤ β < 165 , we can guarantee recovery as ‖w t −w∗‖2 ≤ .\nProof. We first begin with the guarantee provided by existing sparse recovery techniques. The results of [6], for example, indicate that if the input to the algorithm indeed satisfies the RSC and RSS properties at the level (1 − β, 2s + s∗) with constants α2s+s∗ and L2s+s∗ for s ≥ 32 ( L2s+s∗\nα2s+s∗\n) , then in time τ =\nO ( L2s+s∗\nα2s+s∗ · log ( ‖b‖2 ρ )) , the IHT algorithm [6, Algorithm 1] outputs an updated model wt+1 that satisfies∥∥wt+1∥∥\n0 ≤ s, as well as ∥∥ySt −X>Stwt+1∥∥22 ≤ ∥∥ySt −X>Stw∗∥∥22 + ρ.\nWe will set ρ later. Since the SRSC and SRSS properties ensure the above and y = X>w∗+ b, this gives us∥∥X>St(wt+1 −w∗)∥∥22 ≤ 2(wt+1 −w∗)>X>StbSt + ρ = 2(wt+1 −w∗)>X>St∩S̄∗bSt∩S̄∗ + ρ, since bS = 0 for any set S ∩ S̄∗ = φ. We now analyze the two sides separately below using the SRSC and SRSS properties below. For any S ⊂ [n], denote X̃S := Σ−1/20 X.∥∥X>St(wt+1 −w∗)∥∥22 = ∥∥∥X̃>StΣ1/20 (wt+1 −w∗)∥∥∥22 ≥ α(1−β,s+s∗) ∥∥∥Σ1/20 (wt+1 −w∗)∥∥∥22∥∥XSt∩S̄∗(wt+1 −w∗)∥∥ = ∥∥∥X̃St∩S̄∗Σ1/20 (wt+1 −w∗)∥∥∥ ≤√L(β,s+s∗) ∥∥∥Σ1/20 (wt+1 −w∗)∥∥∥\n2 .\nNow, if ∥∥wt+1 −w∗∥∥\n2 ≥ , then ∥∥∥Σ1/20 (wt+1 −w∗)∥∥∥ 2 ≥ √ λmin(Σ0) · . This give us\n∥∥∥Σ1/20 (wt+1 −w∗)∥∥∥ 2 ≤ 2 √ L(β,s+s∗)\nα(1−β,s+s∗) ∥∥bSt∩S̄∗∥∥2 + ρα(1−β,s+s∗) = 2 √ L(β,s+s∗)\nα(1−β,s+s∗) ‖bSt‖2 +\nρ · √ λmin(Σ0) · α(1−β,s+s∗) .\nWe note that although we declared the SRSC and SRSS properties for the action of matrices on sparse vectors (such as w∗ − wt+1), we instead applied them above to the action of matrices on sparse vectors transformed by Σ\n1/2 0 (Σ 1/2 0 (w ∗ − wt+1)). Since Σ1/20 v need not be sparse even if v is sparse, this appears to pose a problem. However, all we need to resolve this is to notice that the proof technique of Theorem 18 which would be used to establish the SRSC and SRSS properties, holds in general for not just the action of a matrix on the set of sparse vectors, but on vectors in the union of any fixed set of low dimensional subspaces.\nMore specifically, we can modify the RSC and RSS properties (and by extension, the SRSC and SRSS properties), to requiring that the matrix X act as an approximate isometry on the following set of vectors Sp−1(s,Σ0) := { v : v = Σ −1/2 0 v ′ for some v′ ∈ Sp−1s } . We refer the reader to the work of [2] which describes this technique in great detail. Proceeding with the proof, the assurance of the thresholding step, as used in the proof of Theorem 5, along with a straightforward application of the (modified) SRSS property gives us∥∥bSt+1∥∥2 ≤ ∥∥∥X>CRt+1(wt+1 −w∗)∥∥∥2 + ∥∥∥X>MDt+1(wt+1 −w∗)∥∥∥2\n= ∥∥∥X̃>CRt+1Σ1/20 (wt+1 −w∗)∥∥∥ 2 + ∥∥∥X̃>MDt+1Σ1/20 (wt+1 −w∗)∥∥∥ 2\n≤ 2 √ L(β,s+s∗) ∥∥∥Σ1/20 (wt+1 −w∗)∥∥∥ 2\n≤ 4L(β,s+s∗)\nα(1−β,s+s∗) ‖bSt‖2 +\n2ρ √ L(β,s+s∗)\n· √ λmin(Σ0) · α(1−β,s+s∗)\nThus, whenever ∥∥wt+1 −w∗∥∥\n2 > , in successive steps, ‖bSt‖2 undergoes a linear decrease. Denoting\nη := 4L(β,s+s∗) α(1−β,s+s∗) , we get\n∥∥bSt+1∥∥2 ≤ ηt · ‖b‖2 + (1− ηt1− η )\n2ρ √ L(β,s+s∗)\n· √ λmin(Σ0) · α(1−β,s+s∗)\nand using ∥∥∥Σ1/20 (wt −w∗)∥∥∥ 2 ≥ √ λmin(Σ0) ‖wt −w∗‖2 gives us\n∥∥wt+1 −w∗∥∥ 2 ≤ 2 √ L(β,s+s∗)√\nλmin(Σ0) · α(1−β,s+s∗) ∥∥bSt+1∥∥2 + ρλmin(Σ0) · α(1−β,s+s∗) ≤ ηt 2 √ L(β,s+s∗)√\nλmin(Σ0) · α(1−β,s+s∗) ‖b‖2 +\n36ρ\n· λmin(Σ0) · α(1−β,s+s∗) ,\nwhere we have assumed that 4L(β,s+s∗) α(1−β,s+s∗) < 9/10, something that we shall establish below. Note that λmin(Σ0) > 0 since Σ is assumed to be invertible. In the random design settings we shall consider, we\nalso have\n√ L(β,s+s∗)√\nλmin(Σ0)·α(1−β,s+s∗) = O\n( 1√ n ) . Then setting ρ ≤ 172\n2 · λmin(Σ0) · α(1−β,s+s∗) proves the convergence result.\nAs before, we can use the above result to establish sparse recovery guarantees in the statistical setting for Gaussian and sub-Gaussian design models. If our data matrix X is generated from a Gaussian distribution\nN (0,Σ) for some invertible Σ, then the results in Theorem 18 can be used to establish that Σ−1/2X satisfies the SRSC and SRSS properties at the required levels and that for α < 1190 and n ≥ Ω ( (2s+ s∗) log p+ log 1δ ) , we have η = 2L(β,s+s∗) α(1−β,s+s∗) < 9/10.\nThus, the above result can be applied with Σ0 = Σ to get convergence guarantees in the general Gaussian setting. We note that the above analysis can tolerate the same level of corruption as Theorem 4 and thus, we can improve the noise tolerance level to α ≤ 165 here as well. We also note that these results can be readily extended to the sub-Gaussian setting as well."
    }, {
      "heading" : "G Robust Statistical Estimation",
      "text" : "This section elaborates on how results on the convergence guarantees of our algorithms can be used to give guarantees for robust statistical estimation problems. We begin with a few definition of sampling models that would be used in our results.\nDefinition 12. A random variable x ∈ R is called sub-Gaussian if the following quantity is finite\nsup p≥1\np−1/2 (E |x|p)1/p .\nMoreover, the smallest upper bound on this quantity is referred to as the sub-Gaussian norm of x and denoted as ‖x‖ψ2 . Definition 13. A vector-valued random variable x ∈ Rp is called sub-Gaussian if its unidimensional marginals 〈x,v〉 are sub-Gaussian for all v ∈ Sp−1. Moreover, its sub-Gaussian norm is defined as follows\n‖X‖ψ2 := sup v∈Sp−1 ‖〈x,v〉‖ψ2\nWe will begin with the analysis of Gaussian designs and then extend our analysis for the class of general sub-Gaussian designs.\nLemma 14. Let X ∈ Rp×n be a matrix whose columns are sampled i.i.d from a standard Gaussian distribution i.e. xi ∼ N (0, I). Then for any > 0, with probability at least 1− δ, X satisfies\nsmax(XX >) ≤ n+ (1− 2 )−1 √ cnp+ c′n log 2\nδ\nsmin(XX >) ≥ n− (1− 2 )−1 √ cnp+ c′n log 2\nδ ,\nwhere c = 24e2 log 3 and c ′ = 24e2.\nProof. We will first use the fact that X is sampled from a standard Gaussian to show that its covariance concentrates around identity. Thus, we first show that with high probability,∥∥XX> − nI∥∥\n2 ≤ 1\nfor some 1 < 1. Doing so will automatically establish the following result\nn− 1 ≤ smin(XX>) ≤ smax(XX>) ≤ n+ 1.\nLet A := XX> − I. We will use the technique of covering numbers [14] to establish the above. Let Cp−1( ) ⊂ Sp−1 be an cover for Sp−1 i.e. for all u ∈ Sp−1, there exists at least one v ∈ Cp−1 such that ‖u− v‖2 ≤ . Standard constructions [14, see Lemma 5.2] guarantee such a cover of size at most( 1 + 2\n)p ≤ ( 3 )p. Now for any u ∈ Sp−1 and v ∈ Cp−1 such that ‖u− v‖2 ≤ , we have∣∣u>Au− v>Av∣∣ ≤ ∣∣u>A(u− v)∣∣+ ∣∣v>A(u− v)∣∣ ≤ 2 ‖A‖2 ,\nwhich gives us ∥∥XX> − nI∥∥ 2 ≤ (1− 2 )−1 · sup\nv∈Cp−1( )\n∣∣∣∥∥X>v∥∥2 2 − n ∣∣∣ . Now for a fixed v ∈ Sn−1, the random variable ∥∥X>v∥∥2 2\nis distributed as a χ2(n) distribution with n degrees of freedom. Using Lemma 20, we get, for any µ < 1,\nP [∣∣∣∥∥X>v∥∥22 − n∣∣∣ ≥ µn] ≤ 2 exp(−min{ µ2n224ne2 , µn4√3e }) ≤ 2 exp ( − µ 2n 24e2 ) .\nSetting µ2 = c · pn + c ′ · log\n2 δ\nn , where c = 24e 2 log 3 and c ′ = 24e2, and taking a union bound over all Cp−1( ), we get\nP [ sup\nv∈Cp−1( )\n∣∣∣∥∥X>v∥∥2 2 − n ∣∣∣ ≥√cnp+ c′n log 2 δ ] ≤ 2 ( 3 )p exp ( − µ 2n 24e2 ) ≤ δ.\nThis implies that with probability at least 1− δ,∥∥XX> − nI∥∥ 2 ≤ (1− 2 )−1 √ cnp+ c′n log 2\nδ ,\nwhich gives us the claimed bounds on the singular values of XX>.\nTheorem 15. Let X ∈ Rp×n be a matrix whose columns are sampled i.i.d from a standard Gaussian distribution i.e. xi ∼ N (0, I). Then for any γ > 0, with probability at least 1− δ, the matrix X satisfies the SSC and SSS properties with constants\nΛGaussγ ≤ γn ( 1 + 3e √ 6 log e\nγ\n) +O (√ np+ n log 1\nδ\n)\nλGaussγ ≥ n− (1− γ)n ( 1 + 3e √ 6 log e\n1− γ\n) − Ω (√ np+ n log 1\nδ\n) .\nProof. For any fixed S ∈ Sγ , Lemma 14 guarantees the following bound\nsmax(XSX > S ) ≤ γn+ (1− 2 )−1\n√ cγnp+ c′γn log 2\nδ .\nTaking a union bound over Sγ and noting that ( n k ) ≤ ( en k )k for all 1 ≤ k ≤ n, gives us\nΛγ ≤ γn+ (1− 2 )−1 √ cγnp+ c′γ2n2 log e\nγ + c′γn log\n2\nδ ≤ γn ( 1 + (1− 2 )−1 √ c′ log e\nγ\n) + (1− 2 )−1 √ cγnp+ c′γn log 2\nδ ,\nwhich finishes the first bound after setting = 1/6. For the second bound, we use the equality\nXSX > S = XX > −XS̄X>S̄ ,\nwhich provides the following bound for λγ\nλγ ≥ smin(XX>)− sup T∈S1−γ XTX > T = smin(XX >)− Λ1−γ .\nUsing Lemma 14 to bound the first quantity and the first part of this theorem to bound the second quantity gives us, with probability at least 1− δ,\nλγ ≥ n− γ′n ( 1 + (1− 2 )−1 √ c′ log e\nγ′\n) − (1− 2 )−1 ( 1 + √ γ′ )√ cnp+ c′n log 2\nδ ,\nwhere γ′ = 1− γ. This proves the second bound after setting = 1/6.\nWe now extend our analysis to the class of isotropic subGaussian distributions. We note that this analysis is without loss of generality since for non-isotropic sub-Gaussian distributions, we can simply use the fact that Theorem 3 can admit whitened data for calculation of the SSC and SSS constants as we did for the case of non-isotropic Gaussian distributions.\nLemma 16. Let X ∈ Rp×n be a matrix with columns sampled from some sub-Gaussian distribution with sub-Gaussian norm K and covariance Σ. Then, for any δ > 0, with probability at least 1 − δ, each of the following statements holds true:\nsmax(XX >) ≤ λmax(Σ) · n+ CK · √ pn+ t √ n smin(XX >) ≥ λmin(Σ) · n− CK · √ pn− t √ n,\nwhere t = √\n1 cK log 2δ , and cK , CK are absolute constants that depend only on the sub-Gaussian norm K of\nthe distribution.\nProof. Since the singular values of a matrix are unchanged upon transposition, we shall prove the above statements for X>. The benefit of this is that we get to work with a matrix with independent rows, so that standard results can be applied. The proof technique used in [14, Theorem 5.39] (see also Remark 5.40 (1) therein) can be used to establish the following result: with probability at least 1− δ, with t set as mentioned in the theorem statement, we have ∥∥∥∥ 1nXX> − Σ\n∥∥∥∥ ≤ CK√ pn + t√n This implies that for any v ∈ Sp−1, we have∣∣∣∣ 1n ∥∥X>v∥∥22 − v>Σv ∣∣∣∣ = ∣∣∣∣ 1nv>XX>v − v>Σv ∣∣∣∣ ≤ ∣∣∣∣ 1nXX>v − Σv\n∣∣∣∣ ≤ CK√ pn + t√n. The results then follow from elementary manipulations and the fact that the singular values and eigenvalues of real symmetric matrices coincide.\nTheorem 17. Let X ∈ Rp×n be a matrix with columns sampled from some sub-Gaussian distribution with sub-Gaussian norm K and covariance Σ. Let cK , CK and t be fixed to values as required in Lemma 16. Note that cK and CK are absolute constants depend only on the sub-Gaussian norm K of the distribution. Let γ ∈ (0, 1] be some fixed constant. Then, with we have the following:\nΛsubGauss(K,Σ)γ ≤ ( λmax(Σ) · γ + √ γ\ncK log\ne\nγ\n) · n+ CK · √ γpn+ t √ n.\nFurthermore, fix any ∈ (0, 1) and let γ be a value in (0, 1) satisfying the following\nγ > 1−min { · λmin(Σ) λmax(Σ) , exp ( 1 +W−1 ( −cK 2 · λ2min(Σ) e ))} ,\nwhere W−1(·) is the lower branch of the real valued restriction of the Lambert W function. Then we have, with the same confidence,\nλsubGauss(K,Σ)γ ≥ (1− 2 ) · λmin(Σ) · n− CK ( 1 + √ 1− γ )√ pn− 2t √ n\nProof. The first result follows from an application of Lemma 16, a union bound over sets in Sγ , as well as the bound ( n k ) ≤ ( en k )k for all 1 ≤ k ≤ n which puts a bound on the number of sparse sets as log |Sγ | ≤ γ ·n log eγ .\nFor the second result, we observe that XSX > S = XX > −XS̄X>S̄ , so that smin(XSX > S ) ≥ smin(XX>) −\nsmax(XS̄X > S̄ ). This gives us\ninf S∈Sγ\nsmin(XSX > S ) ≥ smin(XX>)− sup\nS∈S1−γ smax(XSX\n> S ).\nUsing Lemma 16 and the first part of this result gives us\ninf S∈Sγ\nsmin(XSX > S ) ≥ λmin(Σ) · n− CK ·\n√ pn− t √ n\n− ( λmax(Σ)(1− γ) + √ 1− γ cK log e 1− γ ) n− CK √ (1− γ)pn− t √ n\n= ( λmin(Σ)− λmax(Σ)(1− γ)− √ 1− γ cK log e 1− γ ) n\n− CK ( 1 + √ 1− γ )√ pn− 2t √ n\n≥ (1− 2 ) · λmin(Σ) · n− CK ( 1 + √ 1− γ )√ pn− 2t √ n,\nwhere the last step follows from the assumptions on γ and by noticing that it suffices to show the following two inequalities to establish the last step\n1. λmax(Σ)(1− γ) ≤ · λmin(Σ)\n2. (1− γ) log e1−γ ≤ cK 2 · λ2min(Σ)\nThe first part gives us the condition γ > 1 − ·λmin(Σ)λmax(Σ) in a straightforward manner. For the second part, denote v = cK\n2 · λ2min(Σ). Note that for v ≥ 1, all values of γ ∈ (0, 1] satisfy the inequality. Otherwise we require the use of the Lambert W function (also known as the product logarithm function). This function ensures that its value W (z) for any z > −1/e satisfies z = W (z)eW (z). In our case, making a change of variable (1−γ) = eη gives us the inequality (η−1)eη−1 ≥ −v/e. Note that since v ≤ 1 in this case, −v/e ∈ (−1/e, 0) i.e. a valid value for the Lambert W function. However, (−1/e, 0) is also the region in which the Lambert W function is multi-valued. Taking the worse bound for γ by choosing the lower branch\nW−1(·) gives us the second condition γ ≥ 1− exp ( 1 +W−1 ( − cK 2·λ2min(Σ) e )) .\nIt is important to note that for any −1/e ≤ z < 0, we have exp (1 +W−1(z)) > 0 which means that the bounds imposed on γ by Theorem 17 always allow a non-zero fraction of the data points to be corrupted in an adversarial manner. However, the exact value of that fraction depends, in a complicated manner, on the sub-Gaussian norm of the underlying distribution, as well as the condition number and the smallest eigenvalue of the second moment of the underlying distribution.\nWe also note that due to the generic nature of the previous analysis, which can handle the entire class of sub-Gaussian distributions, the bounds are not as explicitly stated in terms of universal constants as they are for the standard Gaussian design setting (Theorem 15).\nWe now establish that for a wide family of random designs, the SRSC and SRSS properties are satisfied with high probability as well. For sake of simplicity, we will present our analysis for the standard Gaussian design. However, the results would readily extend to general Gaussian and sub-Gaussian designs using techniques similar to Theorem 17.\nTheorem 18. Let X ∈ Rp×n be a matrix whose columns are sampled i.i.d from a standard Gaussian distribution i.e. xi ∼ N (0, I). Then for any γ > 0 and s ≤ p, with probability at least 1 − δ, the matrix X satisfies the SRSC and SRSS properties with constants\nLGauss(γ,s) ≤ γn ( 1 + 3e √ 6 log e\nγ\n) + Õ (√ ns+ n log 1\nδ\n)\nαGauss(γ,s) ≥ n− (1− γ)n ( 1 + 3e √ 6 log e\n1− γ\n) − Ω̃ (√ ns+ n log 1\nδ\n) .\nProof. The proof of this theorem proceeds similarly to that of Theorem 15. Hence, we simply point out the main differences. First, we shall establish, that for any > 0, with probability at least 1− δ, X satisfies the RSC and RSS properties at level s with the following constants\nLs ≤ n+ (1− 2 )−1 √ bns+ b′n log 2\nδ αs ≥ n− (1− 2 )−1 √ bns+ b′n log 2\nδ ,\nwhere b = 24e2 log 3ep s and b ′ = 24e2. To do so we notice that the only change needed to be made would be in the application of the covering number argument. Instead of applying the union bound over an -cover Cp−1 of Sp−1, we would only have to consider an -cover Cp−1s of the set Sp−1s of all s-sparse unit vectors in p-dimensions. A straightforward calculation shows us that\n∣∣Cp−1s ∣∣ ≤ (ps )( 1 + 2 )s ≤ ( 3ep s )s .\nThus, setting µ2 = b · sn + b ′ · log\n2 δ\nn , where b = 24e 2 log 3ep s and b ′ = 24e2, we get\nP [ sup\nv∈Cp−1s\n∣∣∣‖Xv‖22 − n∣∣∣ ≥ √ bns+ b′n log 2\nδ\n] ≤ δ,\nwhich establishes the required RSC and RSS constants for X. Now, moving on to the SRSS constant, it follows simply by applying a union bound over all sets in Sγ much like in Theorem 15. One can then proceed to bound the SRSC constant in a similar manner.\nWe note that the nature of the SRSC and SRSS bounds indicate that our Torrent-FC algorithm in the high dimensional sparse recovery setting has noise tolerance properties, characterized by the largest corruption index α that can be tolerated, identical to its low dimnensional counterpart - something that Theorem 9 states explicitly."
    }, {
      "heading" : "H Supplementary Results",
      "text" : "Claim 19. Given any vector v ∈ Rn, let σ ∈ Sn be defined as the permutation that orders elements of v in descending order of their magnitudes i.e. ∣∣vσ(1)∣∣ ≥ ∣∣vσ(2)∣∣ ≥ . . . ≥ ∣∣vσ(n)∣∣. For any 0 < p ≤ q ≤ 1, let S1 ∈ Sq be an arbitrary set of size q · n and S2 = {σ(i) : n− p · n+ 1 ≤ i ≤ n}. Then we have ‖vS2‖ 2 2 ≤ p q ‖vS1‖ 2 2 ≤ ‖vS1‖ 2 2.\nProof. Let S3 = {σ(i) : n− q · n+ 1 ≤ i ≤ n} and S4 = {σ(i) : n− q · n+ 1 ≤ i ≤ n− p · n}. Clearly, we have ‖vS3‖ 2 2 ≤ ‖vS1‖ 2 2 since S3 contains the smallest q · n elements (by magnitude). Now we have ‖vS3‖ 2 2 = ‖vS2‖ 2 2 + ‖vS4‖ 2 2. Moreover, since each element of S4 is larger in magnitude than every element of S2, we have 1\n|S4| ‖vS4‖ 2 2 ≥\n1\n|S2| ‖vS2‖ 2 2 .\nThis gives us\n‖vS2‖ 2 2 = ‖vS3‖ 2 2 − ‖vS4‖ 2 2 ≤ ‖vS3‖ 2 2 − |S4| |S2| ‖vS2‖ 2 2 ,\nwhich upon simple manipulations, gives us the claimed result.\nLemma 20. Let Z be distributed according to the chi-squared distribution with k degrees of freedom i.e. Z ∼ χ2(k). Then for all t ≥ 0,\nP [|Z − k| ≥ t] ≤ 2 exp ( −min { t2\n24ke2 ,\nt 4 √ 3e }) Proof. This lemma requires a proof structure that traces several basic results in concentration inequalities for sub-exponential variables [14, Lemma 5.5, 5.15, Proposition 5.17]. The purpose of performing this exercise is to explicate the constants involved so that a crisp bound can be provided on the corruption index that our algorithm can tolerate in the standard Gaussian design case.\nWe first begin by establishing the sub-exponential norm of a chi-squared random variable with a single degree of freedom. Let X ∼ χ2(1). Then using standard results on the moments of the standard normal distribution gives us, for all p ≥ 2,\n(E|X|p)1/p = ((2p− 1)!!)1/p = ( (2p)!\n2pp!\n)1/p ≤ √ 3\n2 p\nThus, the sub-exponential norm of X is upper bounded by √\n3/2. By applying the triangle inequality, we obtain, as a corollary, an upper bound on the sub-exponential norm of the centered random variable Y = X − 1 as ‖Y ‖ψ1 ≤ 2 ‖X‖ψ1 ≤ √ 3.\nNow we bound the moment generating function of the random variable Y . Noting that EY = 0, we have, for any |λ| ≤ 1\n2 √ 3e ,\nE exp(λY ) = 1 + ∞∑ q=2 E(λY )q q! ≤ 1 + ∞∑ q=2 ( √ 3|λ|q)q q! ≤ 1 + ∞∑ q=2 ( √ 3e|λ|)q ≤ 1 + 6e2λ2 ≤ exp(6e2λ2).\nNote that the second step uses the sub-exponentially of Y , the third step uses the fact that q! ≥ (q/e)q, and the fourth step uses the bound on |λ|. Now let X1, X2, . . . Xk be k independent random variables distributed as χ2(1). Then we have Z ∼ ∑k i=1Xi. Using the exponential Markov’s inequality, and the independence of the random variables Xi gives us\nP [Z − k ≥ t] = P [ eλ(Z−k) ≥ eλt ] ≤ e−λtEeλ(Z−k) = e−λt k∏ i=1 E exp(λ(Xi − 1)).\nFor any |λ| ≤ 1 2 √ 3e , the above bounds on the moment generating function give us\nP [Z − k ≥ t] ≤ e−λt k∏ i=1 exp(6e2λ2) = exp(−λt+ 6ke2λ2).\nChoosing λ = min {\n1 2 √ 3e , t12ke2\n} , we get\nP [Z − k ≥ t] ≤ exp ( −min { t2\n24ke2 ,\nt 4 √ 3e\n}) .\nRepeating this argument gives us the same bound for P [k − Z ≥ t]. This completes the proof.\nI Supplementary Experimental Results"
    } ],
    "references" : [ {
      "title" : "Sampling and reconstructing signals from a union of linear subspaces",
      "author" : [ "Thomas Blumensath" ],
      "venue" : "IEEE Transactions on Information Theory,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2011
    }, {
      "title" : "Iterative Hard Thresholding for Compressed Sensing",
      "author" : [ "Thomas Blumensath", "Mike E. Davies" ],
      "venue" : "Applied and Computational Harmonic Analysis,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2009
    }, {
      "title" : "Robust Sparse Regression under Adversarial Corruption",
      "author" : [ "Yudong Chen", "Constantine Caramanis", "Shie Mannor" ],
      "venue" : "In 30th International Conference on Machine Learning (ICML),",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2013
    }, {
      "title" : "Gradient descent with sparsification: an iterative algorithm for sparse recovery with restricted isometry property",
      "author" : [ "Rahul Garg", "Rohit Khandekar" ],
      "venue" : "In 26th International Conference on Machine Learning (ICML),",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2009
    }, {
      "title" : "On Iterative Hard Thresholding Methods for High-dimensional M-Estimation",
      "author" : [ "Prateek Jain", "Ambuj Tewari", "Purushottam Kar" ],
      "venue" : "In 28th Annual Conference on Neural Information Processing Systems (NIPS),",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2014
    }, {
      "title" : "Adaptive estimation of a quadratic functional by model selection",
      "author" : [ "Beatrice Laurent", "Pascal Massart" ],
      "venue" : "The Annals of Statistics,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2000
    }, {
      "title" : "Fast and Robust Least Squares Estimation in Corrupted Linear Models",
      "author" : [ "Brian McWilliams", "Gabriel Krummenacher", "Mario Lucic", "Joachim M. Buhmann" ],
      "venue" : "In 28th Annual Conference on Neural Information Processing Systems (NIPS),",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2014
    }, {
      "title" : "Exact recoverability from dense corrupted observations via L1 minimization",
      "author" : [ "Nam H. Nguyen", "Trac D. Tran" ],
      "venue" : "IEEE Transaction on Information Theory,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2013
    }, {
      "title" : "Least Median of Squares Regression",
      "author" : [ "Peter J. Rousseeuw" ],
      "venue" : "Journal of the American Statistical Association,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1984
    }, {
      "title" : "Computing LTS Regression for Large Data Sets",
      "author" : [ "Peter J. Rousseeuw", "Katrien Driessen" ],
      "venue" : "Journal of Data Mining and Knowledge Discovery,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2006
    }, {
      "title" : "Robust Regression and Outlier Detection",
      "author" : [ "Peter J. Rousseeuw", "Annick M. Leroy" ],
      "venue" : null,
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 1987
    }, {
      "title" : "Recovery of Sparsely Corrupted Signals",
      "author" : [ "Christoph Studer", "Patrick Kuppinger", "Graeme Pope", "Helmut Bölcskei" ],
      "venue" : "IEEE Transaction on Information Theory,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2012
    }, {
      "title" : "Introduction to the non-asymptotic analysis of random matrices",
      "author" : [ "Roman Vershynin" ],
      "venue" : "Compressed Sensing, Theory and Applications,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2012
    }, {
      "title" : "Dense Error Correction via ` Minimization",
      "author" : [ "John Wright", "Yi Ma" ],
      "venue" : "IEEE Transaction on Information Theory,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2010
    }, {
      "title" : "Robust Face Recognition via Sparse Representation",
      "author" : [ "John Wright", "Alan Y. Yang", "Arvind Ganesh", "S. Shankar Sastry", "Yi Ma" ],
      "venue" : "IEEE Transactions on Pattern Analysis and Machine Intelligence,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2009
    } ],
    "referenceMentions" : [ {
      "referenceID" : 11,
      "context" : "Owing to the wideapplicability of regression, RLSR features as a critical component of several important real-world applications in a variety of domains such as signal processing [13], economics [12], computer vision [16, 15], and astronomy [12].",
      "startOffset" : 179,
      "endOffset" : 183
    }, {
      "referenceID" : 10,
      "context" : "Owing to the wideapplicability of regression, RLSR features as a critical component of several important real-world applications in a variety of domains such as signal processing [13], economics [12], computer vision [16, 15], and astronomy [12].",
      "startOffset" : 195,
      "endOffset" : 199
    }, {
      "referenceID" : 14,
      "context" : "Owing to the wideapplicability of regression, RLSR features as a critical component of several important real-world applications in a variety of domains such as signal processing [13], economics [12], computer vision [16, 15], and astronomy [12].",
      "startOffset" : 217,
      "endOffset" : 225
    }, {
      "referenceID" : 13,
      "context" : "Owing to the wideapplicability of regression, RLSR features as a critical component of several important real-world applications in a variety of domains such as signal processing [13], economics [12], computer vision [16, 15], and astronomy [12].",
      "startOffset" : 217,
      "endOffset" : 225
    }, {
      "referenceID" : 10,
      "context" : "Owing to the wideapplicability of regression, RLSR features as a critical component of several important real-world applications in a variety of domains such as signal processing [13], economics [12], computer vision [16, 15], and astronomy [12].",
      "startOffset" : 241,
      "endOffset" : 245
    }, {
      "referenceID" : 11,
      "context" : "Indeed there exist reformulations of this problem that are known to be NP-hard to optimize [13].",
      "startOffset" : 91,
      "endOffset" : 95
    }, {
      "referenceID" : 13,
      "context" : "Recently, [15] and [9] obtained a surprising result which shows that one can recover w∗ exactly even when α .",
      "startOffset" : 10,
      "endOffset" : 14
    }, {
      "referenceID" : 7,
      "context" : "Recently, [15] and [9] obtained a surprising result which shows that one can recover w∗ exactly even when α .",
      "startOffset" : 19,
      "endOffset" : 22
    }, {
      "referenceID" : 13,
      "context" : "Moreover, the results impose severe restrictions on the data distribution, requiring that the data be either sampled from an isotropic Gaussian ensemble [15], or row-sampled from an incoherent orthogonal matrix [9].",
      "startOffset" : 153,
      "endOffset" : 157
    }, {
      "referenceID" : 7,
      "context" : "Moreover, the results impose severe restrictions on the data distribution, requiring that the data be either sampled from an isotropic Gaussian ensemble [15], or row-sampled from an incoherent orthogonal matrix [9].",
      "startOffset" : 211,
      "endOffset" : 214
    }, {
      "referenceID" : 2,
      "context" : "In contrast, [4] studied RLSR with less stringent assumptions, allowing arbitrary corruptions in response variables as well as in the data matrix X, and proposed a trimmed inner product based algorithm for the problem.",
      "startOffset" : 13,
      "endOffset" : 16
    }, {
      "referenceID" : 6,
      "context" : "A similar result was obtained by [8], albeit using a sub-sampling based algorithm with stronger assumptions on b.",
      "startOffset" : 33,
      "endOffset" : 36
    }, {
      "referenceID" : 8,
      "context" : "This intuitive algorithm seems to embody a long standing heuristic first proposed by Legendre [1] over two centuries ago (see introductory quotation in this paper) that has been adopted in later literature [10, 11] as well.",
      "startOffset" : 206,
      "endOffset" : 214
    }, {
      "referenceID" : 9,
      "context" : "This intuitive algorithm seems to embody a long standing heuristic first proposed by Legendre [1] over two centuries ago (see introductory quotation in this paper) that has been adopted in later literature [10, 11] as well.",
      "startOffset" : 206,
      "endOffset" : 214
    }, {
      "referenceID" : 13,
      "context" : "We would like to stress three key advantages of our result over the results of [15, 9]: a) we allow b to be adversarial, i.",
      "startOffset" : 79,
      "endOffset" : 86
    }, {
      "referenceID" : 7,
      "context" : "We would like to stress three key advantages of our result over the results of [15, 9]: a) we allow b to be adversarial, i.",
      "startOffset" : 79,
      "endOffset" : 86
    }, {
      "referenceID" : 1,
      "context" : "We would also like to stress that while hard-thresholding based methods have been studied rigorously for the sparse-recovery problem [3, 6], hard-thresholding has not been studied formally for the robust regression problem.",
      "startOffset" : 133,
      "endOffset" : 139
    }, {
      "referenceID" : 4,
      "context" : "We would also like to stress that while hard-thresholding based methods have been studied rigorously for the sparse-recovery problem [3, 6], hard-thresholding has not been studied formally for the robust regression problem.",
      "startOffset" : 133,
      "endOffset" : 139
    }, {
      "referenceID" : 13,
      "context" : "Indeed, the work of [15] assumes the Bouquet Model where distributions are restricted to be isotropic Gaussians whereas the work of [9] assumes a more stringent model of suborthonormal matrices, something that even Gaussian designs do not satisfy.",
      "startOffset" : 20,
      "endOffset" : 24
    }, {
      "referenceID" : 7,
      "context" : "Indeed, the work of [15] assumes the Bouquet Model where distributions are restricted to be isotropic Gaussians whereas the work of [9] assumes a more stringent model of suborthonormal matrices, something that even Gaussian designs do not satisfy.",
      "startOffset" : 132,
      "endOffset" : 135
    }, {
      "referenceID" : 1,
      "context" : "We reiterate that it is not possible to use existing results from sparse recovery (such as [3, 6]) directly to solve this problem.",
      "startOffset" : 91,
      "endOffset" : 97
    }, {
      "referenceID" : 4,
      "context" : "We reiterate that it is not possible to use existing results from sparse recovery (such as [3, 6]) directly to solve this problem.",
      "startOffset" : 91,
      "endOffset" : 97
    }, {
      "referenceID" : 1,
      "context" : "Assuming X satisfies the RSC/RSS properties (defined below), (3) can be solved efficiently using results from sparse recovery (for example the IHT algorithm [3, 5] analyzed in [6]).",
      "startOffset" : 157,
      "endOffset" : 163
    }, {
      "referenceID" : 3,
      "context" : "Assuming X satisfies the RSC/RSS properties (defined below), (3) can be solved efficiently using results from sparse recovery (for example the IHT algorithm [3, 5] analyzed in [6]).",
      "startOffset" : 157,
      "endOffset" : 163
    }, {
      "referenceID" : 4,
      "context" : "Assuming X satisfies the RSC/RSS properties (defined below), (3) can be solved efficiently using results from sparse recovery (for example the IHT algorithm [3, 5] analyzed in [6]).",
      "startOffset" : 176,
      "endOffset" : 179
    }, {
      "referenceID" : 4,
      "context" : "The sample complexity required by Theorem 9 is identical to the one required by analyses for high dimensional sparse recovery [6], save constants.",
      "startOffset" : 126,
      "endOffset" : 129
    }, {
      "referenceID" : 13,
      "context" : "Algorithms: We compared various variants of our algorithm Torrent to the regularized L1 algorithm for robust regression [15, 9].",
      "startOffset" : 120,
      "endOffset" : 127
    }, {
      "referenceID" : 7,
      "context" : "Algorithms: We compared various variants of our algorithm Torrent to the regularized L1 algorithm for robust regression [15, 9].",
      "startOffset" : 120,
      "endOffset" : 127
    }, {
      "referenceID" : 0,
      "context" : "[2] Thomas Blumensath.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 1,
      "context" : "[3] Thomas Blumensath and Mike E.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 2,
      "context" : "[4] Yudong Chen, Constantine Caramanis, and Shie Mannor.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 3,
      "context" : "[5] Rahul Garg and Rohit Khandekar.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 4,
      "context" : "[6] Prateek Jain, Ambuj Tewari, and Purushottam Kar.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 5,
      "context" : "[7] Beatrice Laurent and Pascal Massart.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 6,
      "context" : "[8] Brian McWilliams, Gabriel Krummenacher, Mario Lucic, and Joachim M.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 7,
      "context" : "[9] Nam H.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 8,
      "context" : "[10] Peter J.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 9,
      "context" : "[11] Peter J.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 10,
      "context" : "[12] Peter J.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 11,
      "context" : "[13] Christoph Studer, Patrick Kuppinger, Graeme Pope, and Helmut Bölcskei.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 12,
      "context" : "[14] Roman Vershynin.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 13,
      "context" : "[15] John Wright and Yi Ma.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 14,
      "context" : "[16] John Wright, Alan Y.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 5,
      "context" : "Using tail bounds on Chi-squared distributions [7], we get, with probability at least 1− δ,",
      "startOffset" : 47,
      "endOffset" : 50
    }, {
      "referenceID" : 5,
      "context" : "However, we note that using a more finely tuned setting of the constant in the proof of Theorem 15 and a more careful proof using tight tail inequalities for chi-squared distributions [7], we can achieve a better corruption level tolerance of α < 1 65 .",
      "startOffset" : 184,
      "endOffset" : 187
    }, {
      "referenceID" : 4,
      "context" : "Let Algorithm 2 be executed on this data with the IHT update from [6] and thresholding parameter set to β ≥ α.",
      "startOffset" : 66,
      "endOffset" : 69
    }, {
      "referenceID" : 4,
      "context" : "The results of [6], for example, indicate that if the input to the algorithm indeed satisfies the RSC and RSS properties at the level (1 − β, 2s + s∗) with constants α2s+s∗ and L2s+s∗ for s ≥ 32 ( L2s+s∗ α2s+s∗ ) , then in time τ =",
      "startOffset" : 15,
      "endOffset" : 18
    }, {
      "referenceID" : 0,
      "context" : "We refer the reader to the work of [2] which describes this technique in great detail.",
      "startOffset" : 35,
      "endOffset" : 38
    }, {
      "referenceID" : 12,
      "context" : "We will use the technique of covering numbers [14] to establish the above.",
      "startOffset" : 46,
      "endOffset" : 50
    } ],
    "year" : 2015,
    "abstractText" : "We study the problem of Robust Least Squares Regression (RLSR) where several response variables can be adversarially corrupted. More specifically, for a data matrix X ∈ Rp×n and an underlying model w∗, the response vector is generated as y = XTw∗+b where b ∈ R is the corruption vector supported over at most C ·n coordinates. Existing exact recovery results for RLSR focus solely on L1-penalty based convex formulations and impose relatively strict model assumptions such as requiring the corruptions b to be selected independently of X. In this work, we study a simple hard-thresholding algorithm called Torrent which, under mild conditions on X, can recover w∗ exactly even if b corrupts the response variables in an adversarial manner, i.e. both the support and entries of b are selected adversarially after observing X and w∗. Our results hold under deterministic assumptions which are satisfied if X is sampled from any sub-Gaussian distribution. Finally unlike existing results that apply only to a fixed w∗, generated independently of X, our results are universal and hold for any w∗ ∈ R. Next, we propose gradient descent-based extensions of Torrent that can scale efficiently to large scale problems, such as high dimensional sparse recovery and prove similar recovery guarantees for these extensions. Empirically we find Torrent, and more so its extensions, offering significantly faster recovery than the state-of-the-art L1 solvers. For instance, even on moderate-sized datasets (with p = 50K) with around 40% corrupted responses, a variant of our proposed method called Torrent-HYB is more than 20× faster than the best L1 solver. “If among these errors are some which appear too large to be admissible, then those equations which produced these errors will be rejected, as coming from too faulty experiments, and the unknowns will be determined by means of the other equations, which will then give much smaller errors.” A. M. Legendre, On the Method of Least Squares. 1805.",
    "creator" : "LaTeX with hyperref package"
  }
}