{
  "name" : "1512.04011.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "L1-Regularized Distributed Optimization: A Communication-Efficient Primal-Dual Framework",
    "authors" : [ "Virginia Smith", "Simone Forte", "Michael I. Jordan" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "In this paper, we consider standard regularized loss minimization problems, including as our main focus L1-regularized optimization problems of the form\nmin α∈Rn f(Aα) + λ ‖α‖1 ,\nwhere α ∈ Rn is the weight vector, A ∈ Rd×n is a given data matrix, and λ is a regularization parameter. This formulation includes many popular L1-regularized classification and regression models, such as Lasso and sparse logistic regression, and is easily extended to other separable regularizers like elastic net. Models of this form are particularly useful in high-dimensional settings because of their tendency to bias learning towards sparse solutions. However, despite their importance, few methods currently exist to efficiently fit such sparsity-inducing models in the distributed environment.\nOne promising distributed method is COCOA+ [12, 17], a recently proposed primal-dual framework that demonstrates competitive performance, provides a flexible communication scheme, and enables the use of off-the-shelf single-machine solvers internally. However, by solving the problem in the dual, COCOA+ (like SDCA, prox-SDCA, and numerous other primal-dual methods [26, 27, 30, 35, 36]) is only equipped to handle strongly convex regularizers, which prevents it from being directly applied to L1-regularized objectives. Moreover, by requiring the data to be distributed by data point rather than by feature, communication can become a prohibitive bottleneck for COCOA+ as the number of features grows large, which is precisely the setting of interest for L1 regularization.\nIn this work, we take a different perspective and propose a framework that can run either in the dual, or on the primal directly. From this change in perspective we derive several new primal-dual distributed optimization methods, in particular for sparsity-inducing regularizers. Our approach uses ideas from COCOA+, though leveraging these ideas in this new setting requires significant theoretical and algorithmic modifications, particularly in handling non-strongly convex regularizers. The proposed primal-dual framework and associated rates are novel contributions even in the non-distributed case.\n†Parts of this work appear in SF’s Master’s Thesis [10].\nar X\niv :1\n51 2.\n04 01\n1v 2\n[ cs\n.L G\n] 2\nJ un"
    }, {
      "heading" : "1.1 Contributions",
      "text" : "Generalized framework. By building on the COCOA+ framework, PROXCOCOA+ comes with several benefits, including the use of arbitrary local solvers on each machine, and the analysis of and ability to solve subproblems to arbitrary accuracies. However in contrast to COCOA+, we consider a much broader class of optimization problems. This results in a more general framework that: (1) specifically incorporates the case of L1 regularization; (2) allows for the flexibility of distributing the data by either feature or data point; and (3) can be run on either the primal or dual formulation, which we show to have significant theoretical and practical implications.\nAnalysis of non-strongly convex regularizers and losses. We derive convergence rates for the general class of problems considered in this work, leveraging a novel approach in the analysis of primal-dual rates for non-strongly convex regularizers. The proposed technique is a significant improvement over simple smoothing techniques used in, e.g., [22, 27, 35] that enforce strong convexity by adding a small L2 term to the objective. Our results include primal-dual rates and certificates for both strongly convex and non-strongly convex regularizers and losses, and we show how earlier rates of COCOA and COCOA+ can be derived as a special case of our new rates / methods.\nExperimental comparison. The proposed framework yields order-of-magnitude speedups (as much as 50× faster) as compared to other state-of-the-art methods for L1-regularized optimization. We demonstrate these performance gains in an extensive experimental comparison on real-world distributed datasets. We additionally show significant improvements over COCOA+ when considering strongly convex objectives. All algorithms for comparison are implemented in Apache Spark and run on Amazon EC2 clusters. Our code is available at: github.com/gingsmith/proxcocoa."
    }, {
      "heading" : "2 Setup",
      "text" : "A great variety of methods in machine learning and signal processing are posed as the minimization of a weighted sum of two convex functions, where the first term is a convex function of a linear predictor and the second term is a regularizer:\nmin α∈Rn f(Aα) + g(α) . (A)\nHere α ∈ Rn is the parameter vector, and A := [x1; . . . ;xn] ∈ Rd×n is a data matrix with column vectors xi ∈ Rd, i ∈ [n] and row vectors yTj ∈ Rn, j ∈ [d]. Our central assumption will be that g(·) is separable, meaning that\ng(α) = n∑ i=1 gi(αi)\nfor convex functions gi : R→ R. Furthermore, we assume f : Rd → R is (1/τ)-smooth for τ > 0. Examples. The above setting encompasses all convex loss functions depending on linear predictors yTj α, together with most common convex regularizers, including all separable functions, such as L1or general Lp-norms, or the elastic net given by η2 ‖·‖2 + (1− η) ‖·‖1. Data partitioning. To map this setup to the distributed environment, we suppose that the dataset A is distributed over K machines according to a partition {Pk}Kk=1 of the columns of A ∈ Rd×n. We denote the size of the partition on machine k by nk = |Pk|. For k ∈ [K] and α ∈ Rn, we define α[k] ∈ Rn as the n-vector with elements (α[k])i := αi if i ∈ Pk and (α[k])i := 0 otherwise."
    }, {
      "heading" : "3 The PROXCOCOA+ Algorithmic Framework",
      "text" : "The PROXCOCOA+ framework is given in Algorithm 1. This framework builds on the recent COCOA+ framework [12, 17], though with a more general objective, a modified subproblem, and where we allow the method to be applied to either the primal or dual formulation. To distribute the method, we assign each machine to work only on local coordinates of the weight vector α, and access only data that is stored locally. Machines share state through the vector v := Aα. This vector is communicated at each round after using local solvers in parallel to find (possibly) approximate solutions to the subproblems defined in (2). Solving the primal problem (A) directly with PROXCOCOA+ will result in distributing the data column-wise (by feature), and having the vector v be of length equal to the number of data points. This can greatly reduce communication costs as the number of features grows (see Section 6). Most importantly, the proposed setup will prepare us to handle non-strongly convex regularizers in both theory and practice, as we further explain in the following sections.\nAlgorithm 1 PROXCOCOA+ Distributed Framework for Problem (A)\n1: Input: Data matrix A distributed column-wise according to partition {Pk}Kk=1, aggregation parameter γ∈(0, 1], and parameter σ′ for the local subproblems Gσ′k (∆α[k];v,α[k]). Starting point α(0) := 0 ∈ Rn, v(0) := 0 ∈ Rd. 2: for t = 0, 1, 2, . . . do 3: for k ∈ {1, 2, . . . ,K} in parallel over computers do 4: call local solver, returning a Θ-approximate solution ∆α[k] of the local subproblem (2) 5: update local variables α(t+1)[k] := α (t) [k] + γ∆α[k] 6: return updates to shared state ∆vk := A∆α[k] 7: end for 8: reduce v(t+1) := v(t) + γ ∑K k=1 ∆vk 9: end for\nData-local quadratic subproblems. For each machine, we define a data-local subproblem of the original optimization problem (A). This simpler problem can be solved on machine k and only requires accessing data which is already available locally, i.e., columns Ai such that i ∈ Pk. The subproblem depends only on the previous shared vector v := Aα and the local data:\nmin ∆α[k]∈Rn\nGσ ′\nk (∆α[k];v,α[k]) , (1)\nwhere\nGσ ′ k (∆α[k];v,α[k]) := 1\nK f(v) + wTA∆α[k] +\nσ′\n2τ ∥∥∥A∆α[k]∥∥∥2 + ∑ i∈Pk gi(αi + ∆α[k]i) (2)\nwith w := ∇f(v). We denote the change of local variables αi for indices i ∈ Pk as ∆α[k]. For a given aggregation parameter γ ∈ (0, 1], the subproblem relaxation parameter σ′ will be set as σ′ := γK, but can also be improved in a data-dependent way as we discuss in Appendix E.\nReusability of existing single-machine solvers. Our local subproblems have the appealing property of being very similar in structure to the global problem (A), with the main difference being that they are defined on a smaller (local) subset of the data. For the user of our framework, this presents a major advantage in that existing single machine-solvers can be directly re-used in our distributed framework (Algorithm 1) by employing them on the subproblems Gσ′k . Therefore, problem-specific tuned solvers which have already been developed, along with associated speed improvements (such as multi-core implementations), can be easily leveraged in the distributed setting. We quantify the dependence on local solver performance in more detail in our convergence analysis (Section 4).\nInterpretation. The above definition of the local objective functions Gσ′k are such that they closely approximate the global objective in (A) as the “local” variable ∆α[k] varies, which we will see in the analysis (Lemma 8 in the appendix). In fact, if the subproblem were solved exactly, this could be interpreted as a data-dependent, block-separable proximal step, applied to the f part of the objective (A) as follows: K∑ k=1 Gσ ′ k (∆α[k];v,α[k]) = L+ f(v) +∇f(v)TA∆α + σ′ 2τ ∆αT A T [1]A[1] 0 . . .\n0 AT[K]A[K] ∆α , where L = ∑ i∈[n] gi(αi + ∆αi) .\nHowever, note that in contrast to traditional proximal methods, our algorithm does not assume that the prox subproblems be solved to high accuracy, as we instead allow the use of local solvers of any approximation quality Θ. This notion is made precise with the following assumption.\nAssumption 1 (Θ-approximate solution, see [17]). We assume that there exists Θ ∈ [0, 1) such that ∀k ∈ [K], the local solver at any outer iteration t produces a (possibly) randomized approximate solution ∆α[k], which satisfies\nE [ Gσ ′ k (∆α[k];v,α[k])− Gσ ′ k (∆α ? [k];v,α[k]) ] ≤ Θ ( Gσ ′ k (0;v,α[k])− Gσ ′ k (∆α ? [k];v,α[k]) ) , (3)\nwhere ∆α?[k] ∈ arg min\n∆α∈Rn Gσ ′ k (∆α[k];v,α[k]) ∀k ∈ [K] . (4)\nRemark 1. In practice, the time spent solving the local subproblems in parallel should be chosen comparable to the required time of a communication round, for best overall efficiency on a given system. We study this trade-off both in theory (Section 4) and experiments (Section 6)."
    }, {
      "heading" : "3.1 Primal-Dual Context",
      "text" : "Exploiting primal-dual structure is not a requirement to optimize (A); indeed, we have shown above how to solve this optimization problem directly. However, noting the relationship between primal and dual objectives has many benefits, including computation of the duality gap, which allows us to have a certificate of approximation quality. It is also useful as an analysis tool and helps relate this work to the prior work of [30, 12, 17]. To leverage this structure, starting from our original formulation (A) with objective function D(α) := f(Aα) + ∑n i=1 gi(αi), the dual problem is given by\nmin w∈Rd\n[ P(w) := f∗(w) + n∑ i=1 g∗i (−xTi w) ] . (B)\nHere w ∈ Rd is a weight vector and xi ∈ Rd are columns of the data matrix A. The functions f∗, g∗i are the convex conjugates of f, gi in the original problem (A). This duality structure is known as Fenchel-Rockafellar Duality (see [4, Theorem 4.4.2] or a self-contained derivation in the appendix).\nGiven α ∈ Rn in the context of (A), a corresponding primal vector w ∈ Rd for problem (B) is obtained by: w = w(α) := ∇f(Aα) . (5) This mapping is given by the first-order optimality conditions for the f -part of the objective. (Recall that we assumed gi : R→ R are arbitrary closed convex functions, f : Rd → R is (1/τ)-smooth.) The duality gap, given by: G(α) := P(w(α))− (−D(α)) (6) acts as a certificate of approximation quality, as the distance to the true optimum P(w?) is always bounded above by the duality gap. A globally defined and finite duality gapG(α) for any problem (A) can be obtained by bounding the region of interest for the iterates α. This “Lipschitzing” trick will make the conjugates g∗i globally defined and Lipschitz [8], as we prove in Section 4.\nPrimal vs. Dual. Previous work of COCOA+ mapped machine learning tasks to P(w) (B), and then solved this problem in the dual. While this can still be accomplished with the machinery of PROXCOCOA+ (see Section F), here our main focus is to instead solve the original objectiveD(α) (A) directly. This can have a large practical impact for the described applications in the distributed setting, as it implies that we can distribute the data by feature rather than by data point. Further, we will communicate a vector equal in size to the number of data points, as opposed to the number of features. When the number of features is high (as is common in sparsity-inducing models) this can significantly reduce communication and improve overall performance, as we demonstrate in Section 6. Further, it allows us to directly leverage state-of-the-art coordinate-wise primal methods, such as GLMNET [11] and extensions [34, 13]. From a theoretical perspective, solving D(α) will allow us to consider non-strongly convex regularizers, which were not covered in COCOA+, as we discuss in Section 4."
    }, {
      "heading" : "4 Convergence Analysis",
      "text" : "In this section we provide convergence rates for the proposed framework, and introduce an important theoretical technique in analyzing non-strongly convex terms in the primal-dual setting. For simplicity of presentation, we assume in the analysis that the data partition is balanced; i.e., nk = n/K for all k. Furthermore, we assume that the columns of A satisfy ‖xi‖ ≤ 1 for all i ∈ [n]. We present results for the case where γ := 1 in Algorithm 1, and where the subproblems (2) are defined using the corresponding safe bound σ′ := K. This case delivers the fastest convergence rates in the distributed setting, which in particular don’t degrade as the number of machines K grows and n remains fixed."
    }, {
      "heading" : "4.1 General Convex gi",
      "text" : "Our first main theorem provides convergence guarantees for objectives with non-strongly convex regularizers, including models such as Lasso and sparse logistic regression. Providing primal-dual\nrates and globally defined primal-dual accuracy certificates requires a theoretical technique that we introduce below, in which we show how to satisfy the following notion of L-bounded support. Definition 1 (L-Bounded Support). A function h has L-bounded support if its effective domain is bounded by L, i.e.,\nh(u) < +∞ ⇒ ‖u‖ ≤ L . (7)\nAs we explain in Section F of the appendix, our assumption of L-bounded support for the gi functions can be interpreted as an assumption that their conjugates are globally L-Lipschitz.\nTheorem 1. Consider Algorithm 1 with γ := 1, and let Θ be the quality of the local solver as in Assumption 1. Let gi have L-bounded support, and f be (1/τ)-smooth. Then after T iterations where\nT ≥ T0+ max{ ⌈ 1\n1−Θ\n⌉ , 4L2n2\nτ G(1−Θ) } , (8)\nT0 ≥ t0 + [ 2\n1−Θ\n( 8L2n2 τ G − 1 )] + , t0 ≥ max(0, ⌈ 1 (1−Θ) log ( τ(D(α(0))−D(α?)) 2L2Kn )⌉ ) ,\nwe have that the expected duality gap satisfies\nE[P(w(α))− (−D(α))] ≤ G , where α is the averaged iterate returned by Algorithm 1.\nBounded support modification. Note that the absolute value function gi = | · | for L1 regularization does not have L-bounded support, and thus violates the assumptions yielding convergence in Theorem 1. Its dual, the indicator function of the interval, is not defined globally, and thus does not always allow a finite duality gap. To address this, existing approaches typically use a simple smoothing technique as in [22]: by adding a small amount of L2 to the L1-norm, it becomes strongly convex; see, e.g., [27]. This Nesterov smoothing technique is undesirable in practice, as it changes the iterates, the convergence rate, and the tightness of the resulting duality gap. Further, the amount of smoothing can be difficult to tune and can have a large influence on the performance of the method at hand. We show examples of this issue with experiments in Section 6.\nIn contrast, our approach preserves all solutions of the original objective, leaves the iterate sequence unchanged, and allows for direct reusability of existing L1 solvers. It also removes the need for additional parameter tuning. To achieve this, we modify the function | · | by imposing an additional weak constraint that is inactive in our region of interest. Formally, we replace gi(·) = | · | by\nḡi(α) := { |α| : α ∈ [−B,B] +∞ : otherwise.\nFor large enough B, this problem yields the same solution as the original L1-regularized objective. Note that this only affects convergence theory, in that it allows us to present a strong primal-dual rate (Theorem 1 for L=B). The modification of gi does not affect the algorithms for the original problems. Whenever a monotone optimizer is used, we will never leave the level set defined by the objective at the starting point. We provide further details on this technique in Section D.3, and illustrate how to leverage it for a variety of applications (see Section C of the appendix and also [8])."
    }, {
      "heading" : "4.2 Strongly Convex gi",
      "text" : "For the case of strongly convex gi, including elastic net-regularized objectives, we obtain the following faster geometric convergence rate.\nTheorem 2. Consider Algorithm 1 with γ := 1, and let Θ be the quality of the local solver as in Assumption 1. Let gi be µ-strongly convex ∀i ∈ [n], and f be (1/τ)-smooth. Then we have that T iterations are sufficient for suboptimality D, with\nT ≥ 1γ(1−Θ) µτ+n µτ log n D . (9)\nFurthermore, after T iterations with\nT ≥ 1γ(1−Θ) µτ+n µτ log\n( 1\nγ(1−Θ) µτ+n µτ n G\n) ,\nE[P(w(α(T )))− (−D(α(T )))] ≤ G .\nWe provide proofs of both Theorem 1 and Theorem 2 in the appendix (Section E)."
    }, {
      "heading" : "5 Related Work",
      "text" : "Single-machine coordinate solvers. For strongly convex regularizers, current state-of-the-art for empirical loss minimization is randomized coordinate ascent on the dual (SDCA) [26] and its accelerated variants, e.g., [27]. In contrast to primal stochastic gradient descent (SGD) methods, the SDCA family is often preferred as it is free of learning-rate parameters and has faster (geometric) convergence guarantees. Interestingly, a similar trend in coordinate solvers has been observed in recent Lasso literature, but with the roles of primal and dual reversed. For those problems, coordinate descent methods on the primal have become state-of-the-art, as in GLMNET [11] and extensions [34]; see, e.g., the overview in [33]. However, primal-dual convergence rates for unmodified coordinate algorithms have to our knowledge been obtained only for strongly convex regularizers to date [27, 35].\nConnection to coordinate-wise Newton methods. Coordinate descent on L1-regularized problems (A) with g(·) = λ‖ · ‖1 can be interpreted as the iterative minimization of a quadratic approximation of the smooth part of the objective (as in a one-dimensional Newton step), followed by a shrinkage step resulting from the L1 part. In the single-coordinate update case, this is at the core of GLMNET [11, 33], and widely used in, e.g., solvers based on the primal formulation of L1-regularized objectives [25, 34, 3, 9, 28]. When changing more than one coordinate at a time, again employing a quadratic upper bound on the smooth part, this results in a two-loop method as in GLMNET [11] for the special case of logistic regression. This idea is crucial for the distributed setting.\nParallel coordinate descent. Parallel coordinate descent for L1-regularized objectives (with and without using mini-batches) was proposed in [7] (Shotgun) and generalized in [3] , and is among the best performing solvers in the parallel setting. Our framework reduces to Shotgun as a special case when the internal solver is a single coordinate update on the subproblem (2), γ = 1, and for a suitable σ′. However, Shotgun is not covered by our convergence theory, since it uses a potentially un-safe upper bound β instead of σ′, which isn’t guaranteed to satisfy the condition (21). Other parallel coordinate descent methods on the L1-objective have recently been analyzed in [9, 28, 21], but not in the communication-efficient or distributed setting.\nDistributed solvers. The methods most closely related to our approach are distributed variants of GLMNET as in [18]. Inspired by GLMNET and [34], the work of [3, 18] introduced the idea of a block-diagonal Hessian upper approximation in the distributed L1 context. The later work of [29] specialized this approach to sparse logistic regression.\nIf hypothetically each of our quadratic subproblems Gσ′k (∆α[k]) as defined in (2) were to be minimized exactly, the resulting steps could be interpreted as block-wise Newton-type steps on each coordinate block k, where the Newton-subproblem is modified to also contain the L1-regularizer [18, 34, 23]. While [18] allows a fixed accuracy for these subproblems—but not arbitrary approximation quality Θ as in our framework—the work of [29, 34, 31] assumes that the quadratic subproblems are solved exactly. Therefore, these methods are not able to freely trade off communication and computation. Also, they do not allow the re-use of arbitrary local solvers. On the theoretical side, the rate results provided by [18, 29, 34] are not explicit convergence rates but only asymptotic, as the quadratic upper bounds are not explicitly controlled for safety as with our σ′.\nBatch solvers. ADMM [5], proximal gradient descent, and quasi-Newton methods such as L-BFGS and are also often used in distributed environments because of their relatively low communication requirements. However, they require at least a full (distributed) batch gradient computation at each round, and therefore do not allow the gradual trade-off between communication and computation provided by PROXCOCOA+. The works of [19] and [15] have obtained encouraging results for distributed systems employing coordinate descent variants on L1-problems. The latter approach distributes both columns and rows of the data matrix and can be extended to Lasso. However it only provides asymptotic improvement per step, and no convergence rate. We include experimental comparisons with ADMM, prox-GD, and orthant-wise limited memory quasi-Newton (OWL-QN) [1], an L-BFGS variant that can handle L1 regularization [32], but which has no convergence rate.\nFinally, we note that while the provided convergence rates for PROXCOCOA+ mirror the convergence class of classical batch gradient methods in terms of the number of outer rounds, existing batch proximal gradient methods come with a weaker theory, as they do not allow general inexactness Θ for the local subproblem (2). In contrast, our shown convergence rates incorporate this approximation directly, and, moreover, hold for arbitrary local solvers of much cheaper cost than batch methods (where in each round, every machine has to process exactly a full pass through the local data). This\nmakes PROXCOCOA+ more flexible in the distributed setting, as it can adapt to varied communication costs on real systems. We will see in the following section that this flexibility results in significant performance gains over the competing methods."
    }, {
      "heading" : "6 Experimental Results",
      "text" : "In this section we compare PROXCOCOA+ to numerous state-of-the-art methods for large-scale L1-regularized optimization, including:\n• MB-SGD: mini-batch stochastic gradient descent with an L1-prox • PROX-GD: full proximal gradient descent • OWL-QN: orthant-wise limited quasi-Newton • ADMM: alternating direction method of multipliers • MB-CD: mini-batch parallel coordinate descent, incl. SHOTGUN\nThe first three methods are optimized and implemented in Apache Spark’s MLlib (v1.5.0) [20]. We employ coordinate descent as a local solver for PROXCOCOA+, and apply PROXCOCOA+ directly to the primal formulation of Lasso and elastic net, thereby mapping the problem to (A) and solving this objective directly. A comparison with SHOTGUN is provided as an extreme case to highlight the detrimental effects of frequent communication in the distributed environment.\nWe test the performance of each method in large-scale experiments fitting Lasso and elastic net regression models to the datasets shown in Table 1. All code is written in Apache Spark and experiments are run on public cloud Amazon EC2 m3.xlarge machines with one core per machine. For MB-CD, SHOTGUN, and PROXCOCOA+ in the primal, datasets are distributed by feature, whereas for MB-SGD, PROX-GD, OWL-QN, ADMM, and COCOA+ they are distributed by datapoint.\nWe carefully tune each competing method for best performance. ADMM requires the most tuning, both in selecting the penalty parameter ρ and in solving the subproblems. Solving the subproblems to completion for ADMM is prohibitively slow, and we thus use iterations of conjugate gradient and improve performance by allowing early stopping. We also use a varying penalty parameter ρ — practices described in [5, Sec. 4.3, 3.4.1]. For MB-SGD, we\ntune the step size and mini-batch size parameters. For MB-CD, we scale the updates at each round by βb for mini-batch size b and β ∈ [1, b], and tune both parameters b and β. Further implementation details for all methods are given in the appendix (Section G).\nComparison with L1 methods. In analyzing the performance of each algorithm (Figure 1), we measure the improvement to the primal objective given in (A) (D(α)) in terms of wall-clock time in seconds. We see that both MB-SGD and MB-CD are slow to converge, and come with the additional burden of having to tune extra parameters (though MB-CD makes clear improvements over MB-SGD). As expected, naively distributing SHOTGUN [7] (single coordinate updates per machine) does not perform well, as it is tailored to shared-memory systems and requires communicating too frequently. OWL-QN performs the best of all compared methods, but is still much slower to converge than PROXCOCOA+, converging, e.g., 50× more slowly for the webspam dataset. The optimal performance of PROXCOCOA+ is particularly evident in datasets with large numbers of features (e.g., url, kddb, webspam), which are exactly the datasets of interest for L1 regularization.\nResults are shown for regularization parameters λ such that the resulting weight vector α is sparse. However, our results are robust to varying values of λ as well as to various problem settings, as we illustrate in Figure 2.\nWe note that in contrast to the compared methods, PROXCOCOA+ comes with the benefit of having only a single parameter to tune: the subproblem approximation quality, Θ, which can be controlled via the number of local subproblem iterations, H . We further explore the effect of this parameter in Figure 3, and provide a general guideline for choosing it in practice (see Remark 1). In particular, we see that while increasing H always results in better performance in terms of rounds, smaller or larger values of H may result in better performance in terms of wall-clock time, depending on the cost of communication and computation. The flexibility to tuneH is one of the reasons for PROXCOCOA+’s significant performance gains.\nComparison with COCOA+. Finally, we point out several important ways in which PROXCOCOA+ improves upon the COCOA+ framework [17]. First, COCOA+ cannot be in-\ncluded in the set of experiments in Figure 1 because it cannot be directly applied to the Lasso objective (COCOA+ only allows for strongly convex regularizers1). Second, as shown in Figure 4, the performance of COCOA+ degrades drastically when considering datasets with large numbers of features, such as the webspam dataset. One reason for this is that COCOA+ distributes data by data point, which necessitates communicating a vector of length equal to the feature size. When the feature size is large, this can become expensive. The results shown hold despite the fact that we have tuned H (the number of local solver iterations) separately for both PROXCOCOA+ and COCOA+.\nBeyond communication, we also see that COCOA+ is slower to converge as the regularizer becomes less strongly convex (Figure 4a). Indeed, even when the number of features is relatively low such as for the epsilon dataset, we see that the performance of COCOA+ degrades significantly as the regularizer approaches pure L1. In Figure 4, we illustrate this by implementing the Nesterov smoothing technique used in, e.g., [27, 35] — adding a small amount of strong convexity δ‖α‖22 to the objective for Lasso regression. We show results for decreasing levels of δ. As δ decreases, the final sparsity of the problem starts to match that of running pure L1 (Figure 4c), but the performance also degrades (Figure 4b). We note again that through the modification presented in Section 4, we can deliver strong rates without having to make these fundamental alterations to the problem of interest.\n1COCOA+ in [17] is in fact limited to the case where the regularizer is equal to the L2 norm 12‖ · ‖ 2 2, though\nthe extension to strongly convex regularizers is covered as a special case in our analysis."
    }, {
      "heading" : "Acknowledgments",
      "text" : "We thank Michael P. Friedlander and Martin Takáč for fruitful discussions."
    }, {
      "heading" : "Appendix",
      "text" : ""
    }, {
      "heading" : "A Definitions",
      "text" : "Definition 2 (L-Lipschitz Continuity). A function f : Rd → R is L-Lipschitz continuous if ∀a, b ∈ Rd, we have\n|f(a)− f(b)| ≤ L‖a− b‖ . (10)\nDefinition’ 1 (L-Bounded Support). A function f : Rd → R has L-bounded support if its effective domain is bounded by L, i.e.,\nf(u) < +∞ ⇒ ‖u‖ ≤ L . (11)\nDefinition 3 (L-Smoothness). A function f : Rd → R is called L-smooth, for L > 0, if it is differentiable and its derivative is L-Lipschitz continuous, or equivalently\nf(u) ≤ f(w) + 〈∇f(w),u−w〉+ L 2 ‖u−w‖2 ∀u,w ∈ Rd . (12)\nDefinition 4 (µ-Strong Convexity). A function f : Rd → R is called µ-strongly convex, for µ ≥ 0, if f(u) ≥ f(w) + 〈∇f(w),u−w〉+ µ\n2 ‖u−w‖2 ∀u,w ∈ Rd . (13)\nAnd analogously if the same holds for all subgradients, in the case of a general closed convex function f ."
    }, {
      "heading" : "B Convex Conjugates",
      "text" : "The convex conjugate of a function f : Rd → R is defined as f∗(v) := max\nu∈Rd vTu− f(u) . (14)\nBelow we list several useful properties of conjugates (see, e.g., [6, Section 3.3.2]):\n• Double conjugate: (f∗)∗ = f if f is closed and convex.\n• Value Scaling: (for α > 0) f(v) = αg(v) ⇒ f∗(w) = αg∗(w/α) .\n• Argument Scaling: (for α 6= 0) f(v) = g(αv) ⇒ f∗(w) = g∗(w/α) . • Conjugate of a separable sum: f(v) = ∑ i φi(vi) ⇒ f∗(w) = ∑ i φ ∗ i (wi) .\nLemma 3 (Duality between Lipschitzness and L-Bounded Support, [24, Corollary 13.3.3]). Given a proper convex function f , it holds that f is L-Lipschitz if and only if f∗ has L-bounded support.\nLemma 4 (Duality between Smoothness and Strong Convexity, [14, Theorem 6]). Given a closed convex function f , it holds that f is µ strongly convex w.r.t. the norm ‖ · ‖ if and only if f∗ is (1/µ)-smooth w.r.t. the dual norm ‖ · ‖∗."
    }, {
      "heading" : "C Applications",
      "text" : ""
    }, {
      "heading" : "C.1 L1 and General Non-Strongly Convex Regularizers",
      "text" : "L1 regularization is obtained in the objective (A) by letting gi(·) := λ| · |. Primal-dual convergence can be obtained by using the modification introduced in Section 4, which will guarantee L-bounded support. Formally, we replace gi(·) = | · | by\nḡ(α) := { |α| : α ∈ [−B,B] +∞ : otherwise.\nFor large enough B, this problem yields the same solution as the original L1-objective. We provide a detailed proof and description of this technique in Section D.3. Note that this only affects convergence theory, in that it allows us to present a strong primal-dual rate (Theorem 1 for L=B)."
    }, {
      "heading" : "C.2 Elastic Net and General Strongly Convex Regularizers",
      "text" : "Another application we can consider is elastic net regularization, η2 ‖α‖ 2 2 + (1− η) ‖α‖1, for fixed parameter η ∈ (0, 1], which is obtained by setting gi(α) := λ [ η 2α 2 + (1 − η)|α| ]\nin (A). For the special case η = 0, we obtain the L1-norm. For elastic-net-regularized problems of the form (A), Theorem 2 gives a global linear (geometric) convergence rate, since gi is η-strongly convex. This holds as long as the data-fit function is smooth (see Section C.4), and directly yields a primal-dual algorithm and corresponding rate."
    }, {
      "heading" : "C.3 Local Solvers for L1 and Elastic Net",
      "text" : "For the L1-regularizer in the primal setting, the local subproblem (2) becomes a simple quadratic problem on the local data, with regularization applied only to local variables α[k]. Therefore, existing fast L1-solvers for the single-machine case, such as GLMNET variants [11] or BLITZ [13] can be directly applied to each local subproblem Gσ′k ( · ;v,α[k]) within Algorithm 1. The sparsity induced on the subproblem solutions of each machine naturally translates into the sparsity of the global solution, since the local variables α[k] will be concatenated.\nIn terms of the approximation quality parameter Θ for the local problems (Assumption 1), we can apply existing recent convergence results from the single machine case. For example, for randomized coordinate descent (as part of GLMNET), [16, Theorem 1] gives a O(1/t) approximation quality for any separable regularizer, including L1 and elastic net; see also [28, 25]."
    }, {
      "heading" : "C.4 Smooth Data-Fit Functions",
      "text" : "To illustrate the role of f as a smooth data-fit function in this section—contrasting with its role as a regularizer in traditional COCOA+ as we discuss in Section F—we consider the following examples.\nLeast squares loss. Let b ∈ Rd be labels or response values, and consider the least squares objective f(v) := 12‖v − b‖ 2 2, which is 1-smooth. We obtain the familiar least-squares regression objective in our optimization problem (A), using f(Aα) := 12‖Aα− b‖ 2 2 . Observing that the gradient of f is ∇f(v) = v − b, the dual-to-primal mapping is given by: w(α) :=∇f(v(α)) = Aα− b, which is well known as the residual vector in least-squares regression.\nLogistic regression loss. For classification problems, we consider a logistic regression model with d training examples yj ∈ Rn for j ∈ [d] collected as the rows of the data matrix A. For each training example, we are given a binary label, which we collect in the vector b ∈ {−1, 1}d. Formally, the objective is defined as f(v) := ∑d j=1 log (1 + exp (−bjvj)), which is again a separable function. The classifier loss is given by f(Aα) :=\nd∑ j=1 log (1 + exp (−bjyTj α)) , (15)\nwhere α ∈ Rn is the parameter vector. It is not hard to show that f is 1-smooth if the labels satisfy bj ∈ [−1, 1]; see e.g. Lemma 5 below. The primal-dual mapping w(α) := ∇f(v(α)) = ∇f(Aα) is given by wj(α) =\n−bj 1+exp (bjyTj α) ."
    }, {
      "heading" : "D Proofs of Primal-Dual Relationship",
      "text" : "In the following subsections we provide derivations of the primal-dual relationship of the general objectives (A) and (B), and then show how to derive this primal-dual setup for various applications."
    }, {
      "heading" : "D.1 Primal-Dual Relationship",
      "text" : "The relation of our original formulation (A) to its dual formulation (B) is standard in convex analysis, and is a special case of the concept of Fenchel Duality. Using the combination with the linear map A as in our case, the relationship is called Fenchel-Rockafellar Duality, see e.g. [4, Theorem 4.4.2] or [2, Proposition 15.18]. For completeness, we illustrate this correspondence with a self-contained derivation of the duality.\nStarting with the original formulation (A), we introduce a helper variable vector v ∈ Rd representing v = Aα. Then optimization problem (A) becomes:\nmin α∈Rn f(v) + g(α) such that v = Aα . (16)\nIntroducing Lagrange multipliers w ∈ Rd, the Lagrangian is given by: L(α,v;w) := f(v) + g(α) + wT (Aα− v) .\nThe dual problem of (A) follows by taking the infimum with respect to both α and v: inf α,v L(w,α,v) = inf v\n{ f(v)−wTv } + inf\nα\n{ g(α) + wTAα } = − sup\nv\n{ wTv − f(v) } − sup\nα\n{ (−wTA)α− g(α) } = −f∗(w)− g∗(−ATw) . (17)\nWe change signs and turn the maximization of the dual problem (17) into a minimization and thus we arrive at the dual formulation (B) as claimed:\nmin w∈Rd\n[ P(w) := f∗(w) + g∗(−ATw) ] ."
    }, {
      "heading" : "D.2 Conjugates and Smoothness of f -Functions of Interest",
      "text" : "Lemma 5 (Conjugate and Smoothness of the Logistic Loss). The logistic classifier loss function\nf(Aα) := d∑ j=1 log (1 + exp (−bjyTj α))\n(see also (15) above) is the conjugate of f∗, where\nf∗(w) := d∑ j=1 ( (1 + wjbj) log (1 + wjbj)− wjbj log (−wjbj) ) , (18)\nwith the box constraint −wjbj ∈ [0, 1]. Furthermore, f∗(w) is 1-strongly convex over its domain if the labels satisfy bj ∈ [−1, 1]. Proof of Lemma 5. By separability of f∗, the conjugate of f∗(v) = ∑ j φ ∗ j (vj) is f(w) =∑\nj φj(wj). For the losses, the conjugate pairs are φj(u) = log(1 + exp(−bju)), and φ∗j (wj) = −wjbj log(−wjbj) + (1 + wjbj) log(1 + wjbj) with −wjbj ∈ [0, 1], see e.g. [26, Page 577]. For the strong convexity, we show 1-strong smoothness of the conjugate f(v) :=∑d j=1 log (1 + exp (−bjvj)) = ∑d j=1 h(bjvj), which is an equivalent property, see Lemma 4. Using the second derivative h′′(a) = e −a\n(1+e−a)2 ≤ 1 of the function h(a) = log(1 + e −a), we have that ∇2f(v) = diag ( (h′′(bjvj)b 2 j )j ) = diag ( ( e −bjvj (1+e−bjvj )2 b2j )j ) ≤ 1, so f(v) is 1-smooth w.r.t. the Euclidean norm."
    }, {
      "heading" : "D.3 Conjugates of Common Regularizers",
      "text" : "Lemma 6 (Conjugate of the Elastic Net Regularizer). For η ∈ (0, 1], the elastic net function gi(α) := η 2α\n2 + (1− η)|α| is the convex conjugate of g∗i (x) := 1 2η ([ |x| − (1− η) ] + )2 ,\nwhere [.]+ is the positive part operator, [s]+ = s for s > 0, and zero otherwise. Furthermore, this g∗ is smooth, i.e. has Lipschitz continuous gradient with constant 1/η.\nProof. We start by applying the definition of convex conjugate, that is:\ng∗(x) = maxα∈R [ xα− ηα 2 2 − (1− η)|α| ] .\nWe now distinguish two cases for the optimal: α? ≥ 0, α? < 0. For the first case we get that g∗(x) = maxα∈R [ xα− ηα 2 2 − (1− η)α ] .\nSetting the derivative to 0 we get α? = x−(1−η)η . To satisfy α ? ≥ 0, we must have x ≥ 1 − η. Replacing with α? we thus get: g∗(x) = α?(x− 12ηα ? − (1− η)) = α? ( x− 12 (x− (1− η))− (1− η) ) =\n1 2α ? (x− (1− η)) = 12η (x− (1− η)) 2 .\nSimilarly we can show that for x ≤ −(1− η) g∗(x) = 12η (x+ (1− η)) 2 . Finally, by the fact that g∗(.) is convex, always positive, and g∗(−(1 − η)) = g∗(1 − η) = 0, it follows that g∗(x) = 0 for every x ∈ [−(1− η), 1− η]. For the smoothness properties, we consider the derivative of this function g∗(x) and see that g∗(x) is smooth, i.e. has Lipschitz continuous gradient with constant 1/η, assuming η > 0.\nContinuous conjugate modification for indicator functions. To apply the theoretical convergence result from Theorem 1 to objectives with L1 norms, we modify the function | · | by imposing an additional constraint. Consider replacing gi(·) = | · | by\nḡ(α) := { |α| : α ∈ [−B,B] +∞ : otherwise.\nWith this modified L1-regularizer, the optimization problem (A) with regularization parameter λ becomes\nmin α∈Rn f(Aα) + λ n∑ i=1 ḡ(αi) . (19)\nFor large enough choice of the value B, this problems yields the same solution as the original objective:\nmin α∈Rn\n[ D(α) := f(Aα) + λ n∑ i=1 |αi| ] . (20)\nAs we can see, the ḡ is nothing more than a constrained version of the absolute value to the interval [−B,B]. Therefore by setting B to a large enough value that the interesting values of αi will never reach, we can have continuous ḡ∗ and at the same time make (19) equivalent to (20).\nFormally, a simple way to obtain a large enough value ofB, so that all solutions of (20) are unaffected is the following. Note that we start the algorithm at α = 0. For every solution encountered during the execution of the algorithm, the objective values should never become worse than D(0). In other words, we restrict the D(·) optimization problem to the level set given by the initial starting value. Formally, this means that for every i, we will always require:\nλ|αi| ≤ f(0) = D(0) =⇒ |αi| ≤ f(0)\nλ .\n(Note that f(α) ≥ 0 holds without loss of generality). We can thus set the value of B to be f(0)λ .\nLemma 7 (Conjugate of the modified L1-norm). The convex conjugate of ḡi as defined above is\nḡ∗(x) = { 0 : x ∈ [−1, 1] B(|x| − 1) : otherwise,\nand is B-Lipschitz.\nProof. We start by applying the definition of convex conjugate: ḡ(α) = sup\nx∈R [αx− ḡ∗(x)] .\nWe begin by looking at the case in which α ≥ B; in this case it’s easy to see that when x→ +∞, we have:\nαx−B(|x| − 1) = (α−B)x−B → +∞ as α−B ≥ 0. The case α ≤ −B holds analogously. We’ll now look at the case α ∈ [0, B]; in this case it is clear we must have x? ≥ 0. It also must hold that x? ≤ 1, since\nαx−B(x− 1) < αx for every x > 1. Therefore the maximization becomes\nḡ(α) = sup x∈[0,1] αx ,\nwhich has maximum α at x = 1. The remaining α ∈ [−B, 0] case follows in similar fashion."
    }, {
      "heading" : "E Convergence Proofs",
      "text" : "In this section we provide proofs of our main convergence results. The results are motivated by [17], but where we have significantly generalized the problem of interest, and where we derive separate meaning by applying the problem directly to (A). We provide full details of Lemma 8 as a proof of concept, but omit details in later proofs that can be derived using the arguments in [17] or earlier work of [26], and instead outline the proof strategy and highlight sections where the theory deviates."
    }, {
      "heading" : "E.1 Approximation of D(·) by the Local Subproblems Gσ′k (·)",
      "text" : "We begin with a definition of the data-dependent aggregation parameter for PROXCOCOA+, σ′, which we will use in the throughout our convergence results. Definition 5 (Data-dependent aggregation parameter). In Algorithm 1, the aggregation parameter γ controls the level of adding (γ := 1) versus averaging (γ := 1K ) of the partial solutions from all machines. For the convergence results discussed below to hold, the subproblem parameter σ′ must be chosen not smaller than\nσ′ ≥ σ′min := γ max α∈Rn ‖Aα‖2∑K k=1 ‖Aα[k]‖2 . (21)\nThe simple choice of σ′ := γK is valid for (21), i.e., γK ≥ σ′min . In some cases, it will be possible to give better (data-dependent) choices for σ′, closer to the actual bound given in σ′min.\nOur first lemma in the overall proof of convergence helps to relate change in local subproblems to the global objective D(·). Lemma 8. For any dual α,∆α ∈ Rn, v = v(α) := Aα, and real values γ, σ′ satisfying (21), it holds that\nD ( α + γ K∑ k=1 ∆α[k] ) ≤ (1− γ)D(α) + γ K∑ k=1 Gσ ′ k (∆α[k];v,α[k]) . (22)\nProof. In this proof we follow the line of reasoning in [17, Lemma 4] with a more general (1/τ) smoothness assumption on f(·). An outer iteration of PROXCOCOA+ performs the following update:\nD(α + γ K∑ k=1 ∆α[k]) = f(v(α + γ K∑ k=1\n∆α[k]))︸ ︷︷ ︸ A +\nn∑ i=1 gi(αi + γ( K∑ k=1\n∆α[k])i)︸ ︷︷ ︸ B . (23)\nWe bound the terms A and B separately. First we bound A using (1/τ)-smoothness of f : A = f ( v(α + γ K∑ k=1 ∆α[k]) ) = f ( v(α) + γ K∑ k=1 v(∆α[k]) )\nsmoothness of f as in (12) ≤ f(v(α)) + K∑ k=1 γ∇f(v(α))Tv(∆α[k]) + γ2 2τ ‖ K∑ k=1 v(α[k])‖2\ndefinition of w as in (5) ≤ f(v(α)) + K∑ k=1 γv(∆α[k]) Tw(α) + γ2 2τ ‖ K∑ k=1 v(α[k])‖2\nsafe choice of σ′ as in (21) ≤ f(v(α)) + K∑ k=1 γv(∆α[k]) Tw(α) + 1 2τ γσ′ K∑ k=1 ‖v(α[k])‖2 .\nNext we use Jensen’s inequality to bound B:\nB = K∑ k=1 (∑ i∈Pk gi(αi + γ(∆α[k])i) ) = K∑ k=1 (∑ i∈Pk gi((1− γ)αi + γ(α + ∆α[k])i) )\n≤ K∑ k=1 (∑ i∈Pk (1− γ)gi(αi) + γgi(αi + ∆α[k]i) ) .\nPlugging A and B back into (23) yields: D ( α + γ K∑ k=1 ∆α[k] ) ≤ f(v(α))± γf(v(α)) + K∑ k=1 γv(∆α[k]) Tw(α) + 1 2τ γσ′ K∑ k=1 ‖v(α[k])‖2\n+ K∑ k=1 ∑ i∈Pk (1− γ)gi(αi) + γgi(αi + ∆α[k]i)\n= (1− γ)f(v(α)) + K∑ k=1 (∑ i∈Pk (1− γ)gi(αi) ) ︸ ︷︷ ︸\n(1−γ)D(α)\n+ γ K∑ k=1\n( 1\nK f(v(α)) + v(∆α[k])\nTw(α) + σ′\n2τ ‖v(α[k])‖2 + ∑ i∈Pk gi(αi + ∆α[k]i)\n)\n(2) = (1− γ)D(α) + γ K∑ k=1 Gσ ′ k (∆α[k];v) ,\nwhere the last equality is by the definition of the subproblem objective Gσ′k (.) as in (2)."
    }, {
      "heading" : "E.2 Proof of Main Convergence Result (Theorem 1)",
      "text" : "Before proving the main convergence results, we introduce several useful quantities, including the the following lemma, which characterizes the effect of iterations of Algorithm 1 on the duality gap for any chosen local solver of approximation quality Θ.\nLemma 9. Let gi be strongly2 convex with convexity parameter µ ≥ 0 with respect to the norm ‖ · ‖, ∀i ∈ [n]. Then for all iterations t of Algorithm 1 under Assumption 1, and any s ∈ [0, 1], it holds that\nE[D(α(t))−D(α(t+1))] ≥ γ(1−Θ) ( sG(α(t))− σ ′s2\n2τ R(t)\n) , (24)\nwhere R(t) := − τµ(1−s)σ′s ‖u (t) −α(t)‖2 + ∑K k=1‖A(u(t) −α(t))[k]‖2 , (25) for u(t) ∈ Rn with u\n(t) i ∈ ∂g ∗ i (−xTi w(α(t))) . (26)\nProof. The line of proof is motivated by [26, Lemma 19] and follows [17, Lemma 5], with a main addition being the extension to our generalized subproblems Gσ′k (·;v,α[k]) along with the general mappings w(α) := ∇f(v(α)) with v(α) := Aα.\nFor simplicity, we write α instead of α(t), v instead of v(α(t)), w instead of w(α(t)) and u instead of u(t). We can estimate the expected change of the objective D(α) as follows. Starting from the definition of the update α(t+1) := α(t) + γ ∑ k ∆α[k] from Algorithm 1, we apply Lemma 8, which relates the local approximation Gσ′k (α;v,α[k]) to the global objective D(α), and then bound this\n2Note that the case of weakly convex gi(.) is explicitly allowed here as well, as the Lemma holds for the case µ = 0.\nusing the notion of quality of the local solver (Θ), as in Assumption 1. This gives us:\nE [ D(α(t))−D(α(t+1)) ] = E [ D(α)−D ( α + γ K∑ k=1 ∆α[k] )]\n≥ γ(1−Θ) D(α)− K∑ k=1 Gσ ′\nk (∆α ? [k];v,α[k])︸ ︷︷ ︸\nC  . (27) We next upper bound the C term, denoting ∆α? = ∑K k=1 ∆α ? [k]. We first plug in the definition of the objective D in (A) and the local subproblems (2), and then substitute s(ui − αi) for ∆α?i and apply the µ-strong convexity of the gi terms. This gives us:\nC = n∑ i=1 (gi(αi)− gi(αi + ∆α?i ))− (A∆α?)Tw(α)− K∑ k=1 σ′ 2τ ∥∥∥A∆α?[k]∥∥∥2 ≥\nn∑ i=1 ( sgi(αi)− sgi(ui) + µ 2 (1− s)s(ui − αi)2 ) −A(s(u−α))Tw(α)−\nK∑ k=1 σ′ 2τ ∥∥∥A(s(u−α)[k])∥∥∥2 . (28) From the definition of the primal and dual optimization problems (A) and (B), and definition of convex conjugates, we can write the duality gap as:\nG(α) := P(w(α))− (−D(α)) (A),(B)= n∑ i=1 ( g∗i (−xTi w(α)) + gi(αi) ) + f∗(w(α)) + f(Aα))\n= n∑ i=1 ( g∗i (−xTi w(α)) + gi(αi) ) + f∗(∇f(Aα)) + f(Aα)\n= n∑ i=1 ( g∗i (−xTi w(α)) + gi(αi) ) + (Aα)Tw(α)\n= n∑ i=1 ( g∗i (−xTi w(α)) + gi(αi) + αixTi w(α) ) . (29)\nThe convex conjugate maximal property from (26) implies that gi(ui) = ui(−xTi w(α))− g∗i (−xTi w(α)) . (30)\nUsing (30) and (29), we therefore have:\nC (30) ≥ n∑ i=1 ( sgi(αi)− sui(−xTi w(α)) + sg∗i (−xTi w(α)) + µ 2 (1− s)s(ui − αi)2 ) −A(s(u−α))Tw(α)−\nK∑ k=1 σ′ 2τ ∥∥∥A(s(u−α)[k])∥∥∥2 =\nn∑ i=1 [ sgi(αi) + sg ∗ i (−xTi w(α)) + sxTi w(α)αi ] − n∑ i=1 [ sxTi w(α)(αi − ui)− µ 2 (1− s)s(ui − αi)2 ] −A(s(u−α))Tw(α)−\nK∑ k=1 σ′ 2τ ∥∥∥A(s(u−α)[k])∥∥∥2 (29) = sG(α) + µ\n2 (1− s)s‖u−α‖2 − σ\n′s2\n2τ K∑ k=1 ‖A(u−α)[k]‖2 . (31)\nThe claimed improvement bound (24) then follows by plugging (31) into (27).\nThe following Lemma provides a uniform bound on R(t):\nLemma 10. If g∗i are L-Lipschitz continuous for all i ∈ [n], then\n∀t : R(t) ≤ 4L2 K∑ k=1\nσknk︸ ︷︷ ︸ =:σ , (32)\nwhere\nσk := max α[k]∈Rn\n‖Aα[k]‖2\n‖α[k]‖2 . (33)\nProof. [17, Lemma 6]. For general convex functions, the strong convexity parameter is µ = 0, and hence the definition (25) of the complexity constant R(t) becomes\nR(t) = K∑ k=1 ‖A(u(t) −α(t))[k]‖2 (33) ≤ K∑ k=1 σk‖(u(t) −α(t))[k]‖2 ≤ K∑ k=1 σk|Pk|4L2 .\nHere the last inequality follows from in [26, Lemma 21], which shows that for g∗i : R → R being L-Lipschitz, it holds that for any real value a with |a| > L one has that gi(a) = +∞.\nRemark 2. [17, Remark 7] If all data points xi are normalized such that ‖xi‖ ≤ 1 ∀i ∈ [n], then σk ≤ |Pk| = nk. Furthermore, if we assume that the data partition is balanced, i.e., that nk = n/K for all k, then σ ≤ n2/K. This can be used to bound the constants R(t), above, as R(t) ≤ 4L 2n2\nK .\nTheorem 11. Consider Algorithm 1, using a local solver of quality Θ (See Assumption 1). Let g∗i (·) be L-Lipschitz continuous, and G > 0 be the desired duality gap (and hence an upper-bound on suboptimality D). Then after T iterations, where\nT ≥ T0 + max{ ⌈ 1 γ(1−Θ) ⌉ , 4L2σσ′ τ Gγ(1−Θ) } , (34)\nT0 ≥ t0 + [ 2 γ(1−Θ) ( 8L2σσ′ τ G − 1 )] + , t0 ≥ max(0, ⌈ 1 γ(1−Θ) log ( τ(D(α(0))−D(α?)) 2L2σσ′ )⌉ ) ,\nwe have that the expected duality gap satisfies E[P(w(α))− (−D(α))] ≤ G\nat the averaged iterate α := 1T−T0 ∑T−1 t=T0+1 α(t) . (35)\nProof. This proof draws from the line of reasoning in [26, Theorem 2] and follows [17, Theorem 8] but for the more general problem setting (A). We begin by estimating the expected change of feasibility for D. We can bound this above by using Lemma 9 and the fact that the P(·) is always a lower bound for −D(·), and then applying (32) to find:\nE[D(α(t+1))−D(α?)] ≤ (1− γ(1−Θ)s) (D(α(t))−D(α?)) + γ(1−Θ)σ ′s2\n2τ 4L 2σ . (36)\nUsing (36) recursively we have\nE[D(α(t))−D(α?)] ≤ (1− γ(1−Θ)s)t (D(α(0))−D(α?)) + s4L 2σσ′\n2τ . (37)\nChoosing s = 1 and t = t0 := max{0, d 1γ(1−Θ) log(2(D(α (0))−D(α?))/(4L2σσ′))e} will lead to\nE[D(α(t))−D(α?)] ≤ (1− γ(1−Θ))t0 (D(α(0))−D(α?)) + 4L 2σσ′\n2τ ≤ 4L\n2σσ′ τ . (38)\nNext, we show inductively that\n∀t ≥ t0 : E[D(α(t))−D(α?)] ≤ 4L2σσ′\nτ(1 + 12γ(1−Θ)(t− t0)) . (39)\nClearly, (38) implies that (39) holds for t = t0. Assuming that it holds for any t ≥ t0, we show that it must also hold for t+ 1. Indeed, using\ns = 1\n1 + 12γ(1−Θ)(t− t0) ∈ [0, 1] , (40)\nwe obtain\nE[D(α(t+1))−D(α?)] ≤ 4L 2σσ′\nτ\n( 1 + 12γ(1−Θ)(t− t0)− 1 2γ(1−Θ)\n(1 + 12γ(1−Θ)(t− t0))2 ) ︸ ︷︷ ︸\nD\nby applying the bounds (36) and (39), plugging in the definition of s (40), and simplifying. We upperbound the term D using the fact that geometric mean is less or equal to arithmetic mean:\nD = 1 1 + 12γ(1−Θ)(t+ 1− t0) (1 + 12γ(1−Θ)(t+ 1− t0))(1 + 1 2γ(1−Θ)(t− 1− t0))\n(1 + 12γ(1−Θ)(t− t0))2︸ ︷︷ ︸ ≤1\n≤ 1 1 + 12γ(1−Θ)(t+ 1− t0) ,\nIf α is defined as (35), we apply the results of Lemma 9 and Lemma 10 to obtain\nE[G(α)] = E [ G ( T−1∑ t=T0 1 T−T0α (t) )] ≤ 1T−T0E [ T−1∑ t=T0 G ( α(t) )]\n≤ 1 γ(1−Θ)s 1 T − T0 E [ D(α(T0))−D(α?) ] + 4L 2σσ′s 2τ . (41)\nIf T ≥ d 1γ(1−Θ)e+ T0 such that T0 ≥ t0 we have\nE[G(α)] (41),(39) ≤ 1 γ(1−Θ)s 1 T − T0\n( 4L2σσ′\nτ(1 + 12γ(1−Θ)(T0 − t0))\n) + 4L2σσ′s\n2τ\n= 4L2σσ′\nτ\n( 1\nγ(1−Θ)s 1 T − T0 1 1 + 12γ(1−Θ)(T0 − t0) + s 2\n) . (42)\nChoosing\ns = 1\n(T − T0)γ(1−Θ) ∈ [0, 1] (43)\ngives us\nE[G(α)] (42),(43) ≤ 4L\n2σσ′\nτ\n( 1\n1 + 12γ(1−Θ)(T0 − t0) +\n1 (T − T0)γ(1−Θ) 1 2\n) . (44)\nTo have right hand side of (44) smaller then G it is sufficient to choose T0 and T such that 4L2σσ′\nτ\n( 1\n1 + 12γ(1−Θ)(T0 − t0)\n) ≤ 1\n2 G , (45)\n4L2σσ′\nτ\n( 1\n(T − T0)γ(1−Θ) 1 2\n) ≤ 1\n2 G . (46)\nHence if\nt0 + 2\nγ(1−Θ)\n( 8L2σσ′ τ G − 1 ) ≤ T0 , and\nT0 + 4L2σσ′\nτ Gγ(1−Θ) ≤ T ,\nthen (45) and (46) are satisfied.\nThe following main theorem simplifies the results of Theorem 11 and is a generalization of [17, Corollary 9] for general f∗(·) functions: Theorem’ 1. Consider Algorithm 1 with γ := 1, using a local solver of quality Θ (see Assumption 1). Let g∗i (·) be L-Lipschitz continuous, and assume that the columns of A satisfy ‖xi‖ ≤ 1 ∀i ∈ [n]. Let G > 0 be the desired duality gap (and hence an upper-bound on primal sub-optimality). Then\nafter T iterations, where T ≥ T0 + max{ ⌈ 1\n1−Θ\n⌉ , 4L2n2\nτ G(1−Θ) } , (47)\nT0 ≥ t0 + [ 2\n1−Θ\n( 8L2n2 τ G − 1 )] + ,\nt0 ≥ max(0, ⌈ 1 (1−Θ) log ( τ(D(α(0))−D(α?)) 2L2Kn )⌉ ) ,\nwe have that the expected duality gap satisfies E[P(w(α))− (−D(α))] ≤ G\n(where α is the averaged iterate returned by Algorithm 1).\nProof. Plug in parameters γ := 1, σ′ := γK = K to the results of Theorem 11, and note that for balanced datasets we have σ ≤ n 2\nK (see Remark 2). We can further simplify the rate by noting that τ = 1 for the 1-smooth losses (least squares and logistic) given as examples in this work.\nRemark 3. For pure L1-regularized problems as discussed in Section C.1, we have that the above theorem directly delivers a primal-dual convergence with a sublinear rate. This is because in view of Lemma 7, we know that g∗i is B-Lipschitz for the bounded support modification introduced in Section 4."
    }, {
      "heading" : "E.3 Proof of Convergence Result for Strongly Convex gi",
      "text" : "Our second main theorem follows reasoning in [26] and is a generalization of [17, Corollary 11]. We first introduce a lemma to simplify the proof.\nLemma 12. Assume that gi(0) ∈ [0, 1] for all i ∈ [n], then for the zero vector α(0) := 0 ∈ Rn, we have\nD(α(0))−D(α?) = D(0)−D(α?) ≤ n . (48)\nProof. For α := 0 ∈ Rn, we have w(α) = Aα = 0 ∈ Rd. Therefore, since the dual −D(·) is always a lower bound on the primal P(·), and by definition of the objective D given in (A),\n0 ≤ D(α)−D(α?) ≤ P(w(α))− (−D(α)) (A) ≤ n .\nTheorem 13. Assume that gi are µ-strongly convex ∀i ∈ [n]. We define σmax = maxk∈[K] σk. Then after T iterations of Algorithm 1, with\nT ≥ 1γ(1−Θ) µτ+σmaxσ\n′\nµτ log n D ,\nit holds that E[D(α(T ))−D(α?)] ≤ D .\nFurthermore, after T iterations with\nT ≥ 1γ(1−Θ) µτ+σmaxσ\n′ µτ log ( 1 γ(1−Θ) µτ+σmaxσ ′ µτ n G ) ,\nwe have the expected duality gap E[P(w(α(T )))− (−D(α(T )))] ≤ G .\nProof. Given that gi(.) is µ-strongly convex with respect to the ‖ · ‖ norm, we can apply (25) and the definition of σk to find:\nR(t) ≤ − τµ(1−s)σ′s ‖u (t) −α(t)‖2 + ∑K k=1 σk‖u(t) −α(t)[k]‖ 2\n≤ ( − τµ(1−s)σ′s + σmax ) ‖u(t) −α(t)‖2 , (49)\nwhere σmax = maxk∈[K] σk. If we plug the following value of s\ns = τµ\nτµ+ σmaxσ′ ∈ [0, 1] (50)\ninto (49) we obtain that ∀t : R(t) ≤ 0. Putting the same s into (24) will give us\nE[D(α(t))−D(α(t+1))] (24),(50) ≥ γ(1−Θ) τµ τµ+ σmaxσ′ G(α(t)) ≥ γ(1−Θ) τµ τµ+ σmaxσ′ (D(α(t))−D(α?)) .\n(51)\nUsing the fact that E[D(α(t))−D(α(t+1))] = E[D(α?)−D(α(t+1))] +D(α(t))−D(α?) we have\nE[D(α?)−D(α(t+1))] +D(α(t))−D(α?) (51) ≥ γ(1−Θ) τµ\nτµ+ σmaxσ′ (D(α(t))−D(α?)) ,\nwhich is equivalent to E[D(α(t+1))−D(α?)] ≤ (\n1− γ(1−Θ) τµ τµ+ σmaxσ′\n) (D(α(t))−D(α?)) . (52)\nTherefore if we denote (t)D = D(α(t))−D(α?) we have recursively that E[ (t)D ] (52) ≤ (\n1− γ(1−Θ) τµ τµ+ σmaxσ′\n)t (0) D (48) ≤ (\n1− γ(1−Θ) τµ τµ+ σmaxσ′\n)t n\n≤ exp ( −tγ(1−Θ) τµ\nτµ+ σmaxσ′\n) n .\nThe right hand side will be smaller than some D if\nt ≥ 1 γ(1−Θ)\nτµ+ σmaxσ ′\nτµ log\nn D .\nMoreover, to bound the duality gap, we have\nγ(1−Θ) τµ τµ+ σmaxσ′ G(α(t)) (51) ≤ E[D(α(t))−D(α(t+1))] ≤ E[D(α(t))−D(α?)] .\nThus, G(α(t)) ≤ 1γ(1−Θ) τµ+σmaxσ\n′\nτµ (t) D . Hence if D ≤ γ(1−Θ) τµ τµ+σmaxσ′ G then G(α(t)) ≤ G. Therefore after\nt ≥ 1 γ(1−Θ)\nτµ+ σmaxσ ′\nτµ log\n( 1\nγ(1−Θ) τµ+ σmaxσ\n′\nτµ\nn\nG ) iterations we have obtained a duality gap less than G.\nTheorem’ 2. Consider Algorithm 1 with γ := 1, using a local solver of quality Θ (See Assumption 1). Let gi(·) be µ-strongly convex ∀i ∈ [n], and assume that the columns of A satisfy ‖xi‖ ≤ 1 ∀i ∈ [n]. Then we have that T iterations are sufficient for suboptimality D, with\nT ≥ 1γ(1−Θ) τµ+n τµ log n D .\nFurthermore, after T iterations with\nT ≥ 1γ(1−Θ) τµ+n τµ log\n( 1\nγ(1−Θ) τµ+n τµ n G\n) ,\nwe have the expected duality gap E[P(w(α(T )))−D(α(T ))] ≤ G .\nProof. Plug in parameters γ := 1, σ′ := γK = K to the results of Theorem 13 and note that for balanced datasets we have σmax ≤ nK (see Remark 2). We can further simplify the rate by noting that τ = 1 for the 1-smooth losses (least squares and logistic) given as examples in this work.\nRemark 4. For elastic net regularized problems as discussed in Section C.2, we have that the above theorem directly delivers a primal-dual convergence with a geometric rate. This is because in view of Lemma 6, we know that g∗i is 1/η-smooth for any elastic net parameter η ∈ (0, 1]."
    }, {
      "heading" : "F Recovering COCOA+ as a Special Case",
      "text" : "As a special case, PROXCOCOA+ directly applies to any L2-regularized loss-minimization problem, including those presented in [12, 17]. In this setting, the original machine-learning problem is mapped to what we here refer to as the “dual” problem formulation (B):\nmin w∈Rd\n[ P(w) := f∗(w) + n∑ i=1 g∗i (−xTi w) ] ,\nwith f∗(·) = λ2 ‖ · ‖ 2 being the regularizer, and g∗i taking the role of loss function, acting on a linear predictor xTi w (recall that xi is a column of the data matrix A). In other words, the PROXCOCOA + algorithm will in this case apply to (A) as the dual of the original input problem (which will be mapped to (B)), as described in [12, 17]. The following remarks show that we recover the linear (geometric) convergence rates for smooth loss functions g∗i , and sublinear convergence for Lipschitz losses. Note that this contrasts the discussed applications of PROXCOCOA+ where the g function has the role of the regularizer instead.\nRemark 5. If we view (B) as the primal , restrict f∗(·) := λ2 ‖ ·‖ 2 (so that τ = λ), and let g∗i := 1 n` ∗ i , Theorem 1 recovers as a special case the COCOA+ rates for general L-Lipschitz `∗i losses (see [17, Corollary 9]).\nThis follows since g∗i is L-Lipschitz if and only if gi has L-bounded support [24, Corollary 13.3.3].\nRemark 6. If we view (B) as the primal , restrict f∗(·) := λ2 ‖ · ‖ 2 (so that τ = λ), and scale g∗i := 1 n` ∗ i , Theorem 2 recovers as a special case the COCOA\n+ rates for (1/`∗i )-smooth losses (see [17, Corollary 11]).\nThis follows since g∗i is µ-strongly convex if and only if gi is (1/µ)-smooth [14, Theorem 6].\nRemark 7. Note that the approach of mapping the original objective to (B) does not allow general regularizers such asL1. This is one of the reasons we have proposed swapping the roles of regularizers and losses, and running PROXCOCOA+ on the primal of the original problem instead."
    }, {
      "heading" : "G Experiment Details",
      "text" : "In this section we provide greater details on the experimental setup and implementations from Section 6. All experiments are run on Amazon EC2 clusters of m3.xlarge machines, with one core per machine. The code for each method is written in Apache Spark, v1.5.0. Our code is open-source and publicly available at: github.com/gingsmith/proxcocoa.\nADMM Alternating Direction Method of Multipliers (ADMM) [5] is a popular method that lends itself naturally to the distributed environment. Implementing ADMM for the problems of interest requires solving a large linear system Cx = d on each machine, where C ∈ Rn×n with n scaling beyond 107 for the datasets in Table 1, and with C being possibly dense. It is prohibitively slow to solve this directly on each machine, and we therefore employ the iterative method of conjugate gradient with early stopping (see, e.g., [5, Section 4.3]). We further improve performance by using a varying rather than constant penalty parameter, as suggested in [5, Section 3.4.1].\nMini-batch SGD and Proximal GD Mini-batch SGD is a standard and widely used method for parallel and distributed optimization. We use the optimized code provided in Spark’s machine learning library, MLlib, v1.5.0. We tune both the size of the mini-batch and the SGD step size using grid search. Proximal gradient descent can be seen as a specific setting of mini-batch SGD, where the mini-batch size is equal to the total number of datapoints. We thus also use the implementation in MLlib for prox-GD, and tune the step size parameter using grid search.\nMini-batch CD Mini-batch CD aims to improve mini-batch SGD by employing coordinate descent, which has encouraging theoretical and practical backings [25, 9, 28]. We implement mini-batch CD in Spark and scale the updates made at each round by βb for mini-batch size b and β ∈ [1, b], tuning both parameters b and β via grid search.\nShotgun As a special case of mini-batch CD, Shotgun [7] is a popular method for parallel optimization. Shotgun can be seen an extreme case of mini-batch CD where the mini-batch is set to 1 element per machine, i.e., there is a single update made by each machine per round. We see in the experiments that communicating this frequently becomes prohibitively slow in the distributed environment.\nOWL-QN OWN-QN [32] is a quasi-Newton method optimized in Spark’s spark.ml package. Outer iterations of OWL-QN make significant progress towards convergence, but the iterations themselves can be slow because they require processing the entire dataset. PROXCOCOA+, the mini-batch methods, and ADMM with early stopping all improve on this by allowing the flexibility of only a subset of the dataset to be processed at each iteration. PROXCOCOA+ and ADMM have even greater\nflexibility by allowing internal methods to process the dataset more than once. PROXCOCOA+ makes this approximation quality specific, both in theoretical convergence rates and by providing general guidelines for setting the parameter.\nPROXCOCOA+ We implement PROXCOCOA+ with coordinate descent as a local solver. We note that since the framework and theory allow any internal solver to be used, PROXCOCOA+ could benefit even beyond the results shown, by using existing fast L1-solvers for the single-machine case, such as GLMNET variants [11] or BLITZ [13]. The only parameter necessary to tune for PROXCOCOA+ is the level of approximation quality, which we parameterize in the experiments using H , the number of local iterations of the iterative method run locally. Our theory relates local approximation quality to global convergence, and we provide a guideline for how to choose this value in practice that links the value to the systems environment at hand (Remark 1). We implement COCOA+ as a special case of PROXCOCOA+ for elastic net regularized objectives by mapping the main objective to (B) according to the steps described in Section F, and again use coordinate descent as a local solver."
    } ],
    "references" : [ {
      "title" : "Scalable training of L1-regularized log-linear models",
      "author" : [ "G. Andrew", "J. Gao" ],
      "venue" : "In ICML,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2007
    }, {
      "title" : "Convex Analysis and Monotone Operator Theory in Hilbert Spaces. CMS Books in Mathematics",
      "author" : [ "H.H. Bauschke", "P.L. Combettes" ],
      "venue" : null,
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2011
    }, {
      "title" : "Parallel coordinate descent newton method for efficient g1-regularized minimization",
      "author" : [ "Y. Bian" ],
      "venue" : "arXiv.org,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2013
    }, {
      "title" : "Techniques of Variational Analysis and Nonlinear Optimization. Canadian Mathematical Society Books in Math",
      "author" : [ "J.M. Borwein", "Q. Zhu" ],
      "venue" : null,
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2005
    }, {
      "title" : "Distributed optimization and statistical learning via the alternating direction method of multipliers",
      "author" : [ "S. Boyd" ],
      "venue" : "Foundations and Trends in Machine Learning,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2010
    }, {
      "title" : "Convex Optimization",
      "author" : [ "S. Boyd", "L. Vandenberghe" ],
      "venue" : null,
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2004
    }, {
      "title" : "Parallel coordinate descent for l1-regularized loss minimization",
      "author" : [ "J.K. Bradley" ],
      "venue" : "In ICML,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2011
    }, {
      "title" : "Primal-Dual Rates and Certificates",
      "author" : [ "C. Dünner" ],
      "venue" : "In ICML,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2016
    }, {
      "title" : "Accelerated, Parallel, and Proximal Coordinate Descent",
      "author" : [ "O. Fercoq", "P. Richtárik" ],
      "venue" : "SIAM Journal on Optimization,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2015
    }, {
      "title" : "Distributed Optimization for Non-Strongly Convex Regularizers",
      "author" : [ "S. Forte" ],
      "venue" : "Master’s thesis, ETH Zürich,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2015
    }, {
      "title" : "Regularization paths for generalized linear models via coordinate descent",
      "author" : [ "J. Friedman", "T. Hastie", "R. Tibshirani" ],
      "venue" : "Journal of Statistical Software,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2010
    }, {
      "title" : "Communication-efficient distributed dual coordinate ascent",
      "author" : [ "M. Jaggi" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2014
    }, {
      "title" : "Blitz: A Principled Meta-Algorithm for Scaling Sparse Optimization",
      "author" : [ "T. Johnson", "C. Guestrin" ],
      "venue" : "In ICML,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2015
    }, {
      "title" : "On the duality of strong convexity and strong smoothness: Learning applications and matrix regularization",
      "author" : [ "S.M. Kakade", "S. Shalev-Shwartz", "A. Tewari" ],
      "venue" : "Technical report,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2009
    }, {
      "title" : "Data/feature distributed stochastic coordinate descent for logistic regression",
      "author" : [ "Kang" ],
      "venue" : "In CIKM,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2014
    }, {
      "title" : "On the complexity analysis of randomized block-coordinate descent methods",
      "author" : [ "Z. Lu", "L. Xiao" ],
      "venue" : null,
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2013
    }, {
      "title" : "Adding vs. averaging in distributed primal-dual optimization",
      "author" : [ "C. Ma" ],
      "venue" : "In ICML,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2015
    }, {
      "title" : "A distributed block coordinate descent method for training l1 regularized linear classifiers",
      "author" : [ "D. Mahajan", "S.S. Keerthi", "S. Sundararajan" ],
      "venue" : null,
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2014
    }, {
      "title" : "Ad click prediction: a view from the trenches",
      "author" : [ "H.B. McMahan" ],
      "venue" : "In KDD,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2013
    }, {
      "title" : "Mllib: Machine learning in apache spark",
      "author" : [ "X. Meng" ],
      "venue" : "arXiv.org,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2015
    }, {
      "title" : "Parallel Random Coordinate Descent Method for Composite Minimization: Convergence Analysis and Error Bounds",
      "author" : [ "I. Necoara", "D. Clipici" ],
      "venue" : "SIAM Journal on Optimization,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2016
    }, {
      "title" : "Smooth minimization of non-smooth functions",
      "author" : [ "Y. Nesterov" ],
      "venue" : "Mathematical Programming,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2005
    }, {
      "title" : "SDNA: Stochastic dual newton ascent for empirical risk",
      "author" : [ "Z. Qu" ],
      "venue" : "minimization. arXiv.org,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2015
    }, {
      "title" : "Convex Analysis",
      "author" : [ "R.T. Rockafellar" ],
      "venue" : null,
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 1997
    }, {
      "title" : "Stochastic methods for l1-regularized loss minimization",
      "author" : [ "S. Shalev-Shwartz", "A. Tewari" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "25",
      "shortCiteRegEx" : "25",
      "year" : 2011
    }, {
      "title" : "Stochastic dual coordinate ascent methods for regularized loss minimization",
      "author" : [ "S. Shalev-Shwartz", "T. Zhang" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "26",
      "shortCiteRegEx" : "26",
      "year" : 2013
    }, {
      "title" : "Accelerated proximal stochastic dual coordinate ascent for regularized loss minimization",
      "author" : [ "S. Shalev-Shwartz", "T. Zhang" ],
      "venue" : "Mathematical Programming, Series",
      "citeRegEx" : "27",
      "shortCiteRegEx" : "27",
      "year" : 2014
    }, {
      "title" : "On the complexity of parallel coordinate descent",
      "author" : [ "R. Tappenden", "P. Richtárik" ],
      "venue" : "arXiv.org,",
      "citeRegEx" : "28",
      "shortCiteRegEx" : "28",
      "year" : 2015
    }, {
      "title" : "Distributed coordinate descent for l1-regularized logistic regression",
      "author" : [ "I. Trofimov", "A. Genkin" ],
      "venue" : "arXiv.org,",
      "citeRegEx" : "29",
      "shortCiteRegEx" : "29",
      "year" : 2014
    }, {
      "title" : "Trading computation for communication: Distributed stochastic dual coordinate ascent",
      "author" : [ "T. Yang" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "30",
      "shortCiteRegEx" : "30",
      "year" : 2013
    }, {
      "title" : "A Dual Augmented Block Minimization Framework for Learning with Limited Memory",
      "author" : [ "I.E.-H. Yen", "S.-W. Lin", "S.-D. Lin" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "31",
      "shortCiteRegEx" : "31",
      "year" : 2015
    }, {
      "title" : "A quasi-newton approach to nonsmooth convex optimization problems in machine learning",
      "author" : [ "J. Yu", "S. Vishwanathan", "S. Günter", "N.N. Schraudolph" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "32",
      "shortCiteRegEx" : "32",
      "year" : 2010
    }, {
      "title" : "A comparison of optimization methods and software for large-scale l1-regularized linear classification",
      "author" : [ "G.-X. Yuan" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "33",
      "shortCiteRegEx" : "33",
      "year" : 2010
    }, {
      "title" : "An improved glmnet for l1-regularized logistic regression",
      "author" : [ "G.-X. Yuan", "C.-H. Ho", "C.-J. Lin" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "34",
      "shortCiteRegEx" : "34",
      "year" : 2012
    }, {
      "title" : "Stochastic Primal-Dual Coordinate Method for Regularized Empirical Risk Minimization",
      "author" : [ "Y. Zhang", "X. Lin" ],
      "venue" : "In ICML,",
      "citeRegEx" : "35",
      "shortCiteRegEx" : "35",
      "year" : 2015
    } ],
    "referenceMentions" : [ {
      "referenceID" : 11,
      "context" : "One promising distributed method is COCOA+ [12, 17], a recently proposed primal-dual framework that demonstrates competitive performance, provides a flexible communication scheme, and enables the use of off-the-shelf single-machine solvers internally.",
      "startOffset" : 43,
      "endOffset" : 51
    }, {
      "referenceID" : 16,
      "context" : "One promising distributed method is COCOA+ [12, 17], a recently proposed primal-dual framework that demonstrates competitive performance, provides a flexible communication scheme, and enables the use of off-the-shelf single-machine solvers internally.",
      "startOffset" : 43,
      "endOffset" : 51
    }, {
      "referenceID" : 25,
      "context" : "However, by solving the problem in the dual, COCOA+ (like SDCA, prox-SDCA, and numerous other primal-dual methods [26, 27, 30, 35, 36]) is only equipped to handle strongly convex regularizers, which prevents it from being directly applied to L1-regularized objectives.",
      "startOffset" : 114,
      "endOffset" : 134
    }, {
      "referenceID" : 26,
      "context" : "However, by solving the problem in the dual, COCOA+ (like SDCA, prox-SDCA, and numerous other primal-dual methods [26, 27, 30, 35, 36]) is only equipped to handle strongly convex regularizers, which prevents it from being directly applied to L1-regularized objectives.",
      "startOffset" : 114,
      "endOffset" : 134
    }, {
      "referenceID" : 29,
      "context" : "However, by solving the problem in the dual, COCOA+ (like SDCA, prox-SDCA, and numerous other primal-dual methods [26, 27, 30, 35, 36]) is only equipped to handle strongly convex regularizers, which prevents it from being directly applied to L1-regularized objectives.",
      "startOffset" : 114,
      "endOffset" : 134
    }, {
      "referenceID" : 34,
      "context" : "However, by solving the problem in the dual, COCOA+ (like SDCA, prox-SDCA, and numerous other primal-dual methods [26, 27, 30, 35, 36]) is only equipped to handle strongly convex regularizers, which prevents it from being directly applied to L1-regularized objectives.",
      "startOffset" : 114,
      "endOffset" : 134
    }, {
      "referenceID" : 9,
      "context" : "†Parts of this work appear in SF’s Master’s Thesis [10].",
      "startOffset" : 51,
      "endOffset" : 55
    }, {
      "referenceID" : 21,
      "context" : ", [22, 27, 35] that enforce strong convexity by adding a small L2 term to the objective.",
      "startOffset" : 2,
      "endOffset" : 14
    }, {
      "referenceID" : 26,
      "context" : ", [22, 27, 35] that enforce strong convexity by adding a small L2 term to the objective.",
      "startOffset" : 2,
      "endOffset" : 14
    }, {
      "referenceID" : 34,
      "context" : ", [22, 27, 35] that enforce strong convexity by adding a small L2 term to the objective.",
      "startOffset" : 2,
      "endOffset" : 14
    }, {
      "referenceID" : 11,
      "context" : "This framework builds on the recent COCOA+ framework [12, 17], though with a more general objective, a modified subproblem, and where we allow the method to be applied to either the primal or dual formulation.",
      "startOffset" : 53,
      "endOffset" : 61
    }, {
      "referenceID" : 16,
      "context" : "This framework builds on the recent COCOA+ framework [12, 17], though with a more general objective, a modified subproblem, and where we allow the method to be applied to either the primal or dual formulation.",
      "startOffset" : 53,
      "endOffset" : 61
    }, {
      "referenceID" : 0,
      "context" : "k=1 G ′ k (∆α[k];v,α[k]) = L+ f(v) +∇f(v)A∆α + σ′ 2τ ∆α A T [1]A[1] 0 .",
      "startOffset" : 62,
      "endOffset" : 65
    }, {
      "referenceID" : 0,
      "context" : "k=1 G ′ k (∆α[k];v,α[k]) = L+ f(v) +∇f(v)A∆α + σ′ 2τ ∆α A T [1]A[1] 0 .",
      "startOffset" : 66,
      "endOffset" : 69
    }, {
      "referenceID" : 16,
      "context" : "Assumption 1 (Θ-approximate solution, see [17]).",
      "startOffset" : 42,
      "endOffset" : 46
    }, {
      "referenceID" : 29,
      "context" : "It is also useful as an analysis tool and helps relate this work to the prior work of [30, 12, 17].",
      "startOffset" : 86,
      "endOffset" : 98
    }, {
      "referenceID" : 11,
      "context" : "It is also useful as an analysis tool and helps relate this work to the prior work of [30, 12, 17].",
      "startOffset" : 86,
      "endOffset" : 98
    }, {
      "referenceID" : 16,
      "context" : "It is also useful as an analysis tool and helps relate this work to the prior work of [30, 12, 17].",
      "startOffset" : 86,
      "endOffset" : 98
    }, {
      "referenceID" : 7,
      "context" : "This “Lipschitzing” trick will make the conjugates g∗ i globally defined and Lipschitz [8], as we prove in Section 4.",
      "startOffset" : 87,
      "endOffset" : 90
    }, {
      "referenceID" : 10,
      "context" : "Further, it allows us to directly leverage state-of-the-art coordinate-wise primal methods, such as GLMNET [11] and extensions [34, 13].",
      "startOffset" : 107,
      "endOffset" : 111
    }, {
      "referenceID" : 33,
      "context" : "Further, it allows us to directly leverage state-of-the-art coordinate-wise primal methods, such as GLMNET [11] and extensions [34, 13].",
      "startOffset" : 127,
      "endOffset" : 135
    }, {
      "referenceID" : 12,
      "context" : "Further, it allows us to directly leverage state-of-the-art coordinate-wise primal methods, such as GLMNET [11] and extensions [34, 13].",
      "startOffset" : 127,
      "endOffset" : 135
    }, {
      "referenceID" : 21,
      "context" : "To address this, existing approaches typically use a simple smoothing technique as in [22]: by adding a small amount of L2 to the L1-norm, it becomes strongly convex; see, e.",
      "startOffset" : 86,
      "endOffset" : 90
    }, {
      "referenceID" : 26,
      "context" : ", [27].",
      "startOffset" : 2,
      "endOffset" : 6
    }, {
      "referenceID" : 7,
      "context" : "3, and illustrate how to leverage it for a variety of applications (see Section C of the appendix and also [8]).",
      "startOffset" : 107,
      "endOffset" : 110
    }, {
      "referenceID" : 25,
      "context" : "For strongly convex regularizers, current state-of-the-art for empirical loss minimization is randomized coordinate ascent on the dual (SDCA) [26] and its accelerated variants, e.",
      "startOffset" : 142,
      "endOffset" : 146
    }, {
      "referenceID" : 26,
      "context" : ", [27].",
      "startOffset" : 2,
      "endOffset" : 6
    }, {
      "referenceID" : 10,
      "context" : "For those problems, coordinate descent methods on the primal have become state-of-the-art, as in GLMNET [11] and extensions [34]; see, e.",
      "startOffset" : 104,
      "endOffset" : 108
    }, {
      "referenceID" : 33,
      "context" : "For those problems, coordinate descent methods on the primal have become state-of-the-art, as in GLMNET [11] and extensions [34]; see, e.",
      "startOffset" : 124,
      "endOffset" : 128
    }, {
      "referenceID" : 32,
      "context" : ", the overview in [33].",
      "startOffset" : 18,
      "endOffset" : 22
    }, {
      "referenceID" : 26,
      "context" : "However, primal-dual convergence rates for unmodified coordinate algorithms have to our knowledge been obtained only for strongly convex regularizers to date [27, 35].",
      "startOffset" : 158,
      "endOffset" : 166
    }, {
      "referenceID" : 34,
      "context" : "However, primal-dual convergence rates for unmodified coordinate algorithms have to our knowledge been obtained only for strongly convex regularizers to date [27, 35].",
      "startOffset" : 158,
      "endOffset" : 166
    }, {
      "referenceID" : 10,
      "context" : "In the single-coordinate update case, this is at the core of GLMNET [11, 33], and widely used in, e.",
      "startOffset" : 68,
      "endOffset" : 76
    }, {
      "referenceID" : 32,
      "context" : "In the single-coordinate update case, this is at the core of GLMNET [11, 33], and widely used in, e.",
      "startOffset" : 68,
      "endOffset" : 76
    }, {
      "referenceID" : 24,
      "context" : ", solvers based on the primal formulation of L1-regularized objectives [25, 34, 3, 9, 28].",
      "startOffset" : 71,
      "endOffset" : 89
    }, {
      "referenceID" : 33,
      "context" : ", solvers based on the primal formulation of L1-regularized objectives [25, 34, 3, 9, 28].",
      "startOffset" : 71,
      "endOffset" : 89
    }, {
      "referenceID" : 2,
      "context" : ", solvers based on the primal formulation of L1-regularized objectives [25, 34, 3, 9, 28].",
      "startOffset" : 71,
      "endOffset" : 89
    }, {
      "referenceID" : 8,
      "context" : ", solvers based on the primal formulation of L1-regularized objectives [25, 34, 3, 9, 28].",
      "startOffset" : 71,
      "endOffset" : 89
    }, {
      "referenceID" : 27,
      "context" : ", solvers based on the primal formulation of L1-regularized objectives [25, 34, 3, 9, 28].",
      "startOffset" : 71,
      "endOffset" : 89
    }, {
      "referenceID" : 10,
      "context" : "When changing more than one coordinate at a time, again employing a quadratic upper bound on the smooth part, this results in a two-loop method as in GLMNET [11] for the special case of logistic regression.",
      "startOffset" : 157,
      "endOffset" : 161
    }, {
      "referenceID" : 6,
      "context" : "Parallel coordinate descent for L1-regularized objectives (with and without using mini-batches) was proposed in [7] (Shotgun) and generalized in [3] , and is among the best performing solvers in the parallel setting.",
      "startOffset" : 112,
      "endOffset" : 115
    }, {
      "referenceID" : 2,
      "context" : "Parallel coordinate descent for L1-regularized objectives (with and without using mini-batches) was proposed in [7] (Shotgun) and generalized in [3] , and is among the best performing solvers in the parallel setting.",
      "startOffset" : 145,
      "endOffset" : 148
    }, {
      "referenceID" : 8,
      "context" : "Other parallel coordinate descent methods on the L1-objective have recently been analyzed in [9, 28, 21], but not in the communication-efficient or distributed setting.",
      "startOffset" : 93,
      "endOffset" : 104
    }, {
      "referenceID" : 27,
      "context" : "Other parallel coordinate descent methods on the L1-objective have recently been analyzed in [9, 28, 21], but not in the communication-efficient or distributed setting.",
      "startOffset" : 93,
      "endOffset" : 104
    }, {
      "referenceID" : 20,
      "context" : "Other parallel coordinate descent methods on the L1-objective have recently been analyzed in [9, 28, 21], but not in the communication-efficient or distributed setting.",
      "startOffset" : 93,
      "endOffset" : 104
    }, {
      "referenceID" : 17,
      "context" : "The methods most closely related to our approach are distributed variants of GLMNET as in [18].",
      "startOffset" : 90,
      "endOffset" : 94
    }, {
      "referenceID" : 33,
      "context" : "Inspired by GLMNET and [34], the work of [3, 18] introduced the idea of a block-diagonal Hessian upper approximation in the distributed L1 context.",
      "startOffset" : 23,
      "endOffset" : 27
    }, {
      "referenceID" : 2,
      "context" : "Inspired by GLMNET and [34], the work of [3, 18] introduced the idea of a block-diagonal Hessian upper approximation in the distributed L1 context.",
      "startOffset" : 41,
      "endOffset" : 48
    }, {
      "referenceID" : 17,
      "context" : "Inspired by GLMNET and [34], the work of [3, 18] introduced the idea of a block-diagonal Hessian upper approximation in the distributed L1 context.",
      "startOffset" : 41,
      "endOffset" : 48
    }, {
      "referenceID" : 28,
      "context" : "The later work of [29] specialized this approach to sparse logistic regression.",
      "startOffset" : 18,
      "endOffset" : 22
    }, {
      "referenceID" : 17,
      "context" : "If hypothetically each of our quadratic subproblems Gσ k (∆α[k]) as defined in (2) were to be minimized exactly, the resulting steps could be interpreted as block-wise Newton-type steps on each coordinate block k, where the Newton-subproblem is modified to also contain the L1-regularizer [18, 34, 23].",
      "startOffset" : 289,
      "endOffset" : 301
    }, {
      "referenceID" : 33,
      "context" : "If hypothetically each of our quadratic subproblems Gσ k (∆α[k]) as defined in (2) were to be minimized exactly, the resulting steps could be interpreted as block-wise Newton-type steps on each coordinate block k, where the Newton-subproblem is modified to also contain the L1-regularizer [18, 34, 23].",
      "startOffset" : 289,
      "endOffset" : 301
    }, {
      "referenceID" : 22,
      "context" : "If hypothetically each of our quadratic subproblems Gσ k (∆α[k]) as defined in (2) were to be minimized exactly, the resulting steps could be interpreted as block-wise Newton-type steps on each coordinate block k, where the Newton-subproblem is modified to also contain the L1-regularizer [18, 34, 23].",
      "startOffset" : 289,
      "endOffset" : 301
    }, {
      "referenceID" : 17,
      "context" : "While [18] allows a fixed accuracy for these subproblems—but not arbitrary approximation quality Θ as in our framework—the work of [29, 34, 31] assumes that the quadratic subproblems are solved exactly.",
      "startOffset" : 6,
      "endOffset" : 10
    }, {
      "referenceID" : 28,
      "context" : "While [18] allows a fixed accuracy for these subproblems—but not arbitrary approximation quality Θ as in our framework—the work of [29, 34, 31] assumes that the quadratic subproblems are solved exactly.",
      "startOffset" : 131,
      "endOffset" : 143
    }, {
      "referenceID" : 33,
      "context" : "While [18] allows a fixed accuracy for these subproblems—but not arbitrary approximation quality Θ as in our framework—the work of [29, 34, 31] assumes that the quadratic subproblems are solved exactly.",
      "startOffset" : 131,
      "endOffset" : 143
    }, {
      "referenceID" : 30,
      "context" : "While [18] allows a fixed accuracy for these subproblems—but not arbitrary approximation quality Θ as in our framework—the work of [29, 34, 31] assumes that the quadratic subproblems are solved exactly.",
      "startOffset" : 131,
      "endOffset" : 143
    }, {
      "referenceID" : 17,
      "context" : "On the theoretical side, the rate results provided by [18, 29, 34] are not explicit convergence rates but only asymptotic, as the quadratic upper bounds are not explicitly controlled for safety as with our σ′.",
      "startOffset" : 54,
      "endOffset" : 66
    }, {
      "referenceID" : 28,
      "context" : "On the theoretical side, the rate results provided by [18, 29, 34] are not explicit convergence rates but only asymptotic, as the quadratic upper bounds are not explicitly controlled for safety as with our σ′.",
      "startOffset" : 54,
      "endOffset" : 66
    }, {
      "referenceID" : 33,
      "context" : "On the theoretical side, the rate results provided by [18, 29, 34] are not explicit convergence rates but only asymptotic, as the quadratic upper bounds are not explicitly controlled for safety as with our σ′.",
      "startOffset" : 54,
      "endOffset" : 66
    }, {
      "referenceID" : 4,
      "context" : "ADMM [5], proximal gradient descent, and quasi-Newton methods such as L-BFGS and are also often used in distributed environments because of their relatively low communication requirements.",
      "startOffset" : 5,
      "endOffset" : 8
    }, {
      "referenceID" : 18,
      "context" : "The works of [19] and [15] have obtained encouraging results for distributed systems employing coordinate descent variants on L1-problems.",
      "startOffset" : 13,
      "endOffset" : 17
    }, {
      "referenceID" : 14,
      "context" : "The works of [19] and [15] have obtained encouraging results for distributed systems employing coordinate descent variants on L1-problems.",
      "startOffset" : 22,
      "endOffset" : 26
    }, {
      "referenceID" : 0,
      "context" : "We include experimental comparisons with ADMM, prox-GD, and orthant-wise limited memory quasi-Newton (OWL-QN) [1], an L-BFGS variant that can handle L1 regularization [32], but which has no convergence rate.",
      "startOffset" : 110,
      "endOffset" : 113
    }, {
      "referenceID" : 31,
      "context" : "We include experimental comparisons with ADMM, prox-GD, and orthant-wise limited memory quasi-Newton (OWL-QN) [1], an L-BFGS variant that can handle L1 regularization [32], but which has no convergence rate.",
      "startOffset" : 167,
      "endOffset" : 171
    }, {
      "referenceID" : 19,
      "context" : "0) [20].",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 6,
      "context" : "As expected, naively distributing SHOTGUN [7] (single coordinate updates per machine) does not perform well, as it is tailored to shared-memory systems and requires communicating too frequently.",
      "startOffset" : 42,
      "endOffset" : 45
    }, {
      "referenceID" : 16,
      "context" : "Finally, we point out several important ways in which PROXCOCOA+ improves upon the COCOA+ framework [17].",
      "startOffset" : 100,
      "endOffset" : 104
    }, {
      "referenceID" : 26,
      "context" : ", [27, 35] — adding a small amount of strong convexity δ‖α‖2 to the objective for Lasso regression.",
      "startOffset" : 2,
      "endOffset" : 10
    }, {
      "referenceID" : 34,
      "context" : ", [27, 35] — adding a small amount of strong convexity δ‖α‖2 to the objective for Lasso regression.",
      "startOffset" : 2,
      "endOffset" : 10
    }, {
      "referenceID" : 16,
      "context" : "1COCOA+ in [17] is in fact limited to the case where the regularizer is equal to the L2 norm 12‖ · ‖ 2 2, though the extension to strongly convex regularizers is covered as a special case in our analysis.",
      "startOffset" : 11,
      "endOffset" : 15
    }, {
      "referenceID" : 0,
      "context" : "References [1] G.",
      "startOffset" : 11,
      "endOffset" : 14
    }, {
      "referenceID" : 1,
      "context" : "[2] H.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 2,
      "context" : "[3] Y.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 3,
      "context" : "[4] J.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 4,
      "context" : "[5] S.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 5,
      "context" : "[6] S.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 6,
      "context" : "[7] J.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 7,
      "context" : "[8] C.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 8,
      "context" : "[9] O.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 9,
      "context" : "[10] S.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 10,
      "context" : "[11] J.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 11,
      "context" : "[12] M.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 12,
      "context" : "[13] T.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 13,
      "context" : "[14] S.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 14,
      "context" : "[15] Kang et al.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 15,
      "context" : "[16] Z.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 16,
      "context" : "[17] C.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 17,
      "context" : "[18] D.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 18,
      "context" : "[19] H.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 19,
      "context" : "[20] X.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 20,
      "context" : "[21] I.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 21,
      "context" : "[22] Y.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 22,
      "context" : "[23] Z.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 23,
      "context" : "[24] R.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 24,
      "context" : "[25] S.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 25,
      "context" : "[26] S.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 26,
      "context" : "[27] S.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 27,
      "context" : "[28] R.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 28,
      "context" : "[29] I.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 29,
      "context" : "[30] T.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 30,
      "context" : "[31] I.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 31,
      "context" : "[32] J.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 32,
      "context" : "[33] G.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 33,
      "context" : "[34] G.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 34,
      "context" : "[35] Y.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 10,
      "context" : "Therefore, existing fast L1-solvers for the single-machine case, such as GLMNET variants [11] or BLITZ [13] can be directly applied to each local subproblem Gσ k ( · ;v,α[k]) within Algorithm 1.",
      "startOffset" : 89,
      "endOffset" : 93
    }, {
      "referenceID" : 12,
      "context" : "Therefore, existing fast L1-solvers for the single-machine case, such as GLMNET variants [11] or BLITZ [13] can be directly applied to each local subproblem Gσ k ( · ;v,α[k]) within Algorithm 1.",
      "startOffset" : 103,
      "endOffset" : 107
    }, {
      "referenceID" : 27,
      "context" : "For example, for randomized coordinate descent (as part of GLMNET), [16, Theorem 1] gives a O(1/t) approximation quality for any separable regularizer, including L1 and elastic net; see also [28, 25].",
      "startOffset" : 191,
      "endOffset" : 199
    }, {
      "referenceID" : 24,
      "context" : "For example, for randomized coordinate descent (as part of GLMNET), [16, Theorem 1] gives a O(1/t) approximation quality for any separable regularizer, including L1 and elastic net; see also [28, 25].",
      "startOffset" : 191,
      "endOffset" : 199
    }, {
      "referenceID" : 0,
      "context" : "with the box constraint −wjbj ∈ [0, 1].",
      "startOffset" : 32,
      "endOffset" : 38
    }, {
      "referenceID" : 0,
      "context" : "For the losses, the conjugate pairs are φj(u) = log(1 + exp(−bju)), and φj (wj) = −wjbj log(−wjbj) + (1 + wjbj) log(1 + wjbj) with −wjbj ∈ [0, 1], see e.",
      "startOffset" : 139,
      "endOffset" : 145
    }, {
      "referenceID" : 0,
      "context" : "ḡ(α) = sup x∈[0,1] αx ,",
      "startOffset" : 13,
      "endOffset" : 18
    }, {
      "referenceID" : 16,
      "context" : "The results are motivated by [17], but where we have significantly generalized the problem of interest, and where we derive separate meaning by applying the problem directly to (A).",
      "startOffset" : 29,
      "endOffset" : 33
    }, {
      "referenceID" : 16,
      "context" : "We provide full details of Lemma 8 as a proof of concept, but omit details in later proofs that can be derived using the arguments in [17] or earlier work of [26], and instead outline the proof strategy and highlight sections where the theory deviates.",
      "startOffset" : 134,
      "endOffset" : 138
    }, {
      "referenceID" : 25,
      "context" : "We provide full details of Lemma 8 as a proof of concept, but omit details in later proofs that can be derived using the arguments in [17] or earlier work of [26], and instead outline the proof strategy and highlight sections where the theory deviates.",
      "startOffset" : 158,
      "endOffset" : 162
    }, {
      "referenceID" : 0,
      "context" : "Then for all iterations t of Algorithm 1 under Assumption 1, and any s ∈ [0, 1], it holds that E[D(α)−D(α)] ≥ γ(1−Θ) ( sG(α)− σ ′s2 2τ R ) , (24) where R := − τμ(1−s) σ′s ‖u (t) −α‖ + ∑K k=1‖A(u −α)[k]‖ , (25) for u ∈ R with u (t) i ∈ ∂g ∗ i (−xi w(α)) .",
      "startOffset" : 73,
      "endOffset" : 79
    }, {
      "referenceID" : 0,
      "context" : "s = 1 1 + 12γ(1−Θ)(t− t0) ∈ [0, 1] , (40)",
      "startOffset" : 28,
      "endOffset" : 34
    }, {
      "referenceID" : 0,
      "context" : "s = 1 (T − T0)γ(1−Θ) ∈ [0, 1] (43)",
      "startOffset" : 23,
      "endOffset" : 29
    }, {
      "referenceID" : 25,
      "context" : "Our second main theorem follows reasoning in [26] and is a generalization of [17, Corollary 11].",
      "startOffset" : 45,
      "endOffset" : 49
    }, {
      "referenceID" : 0,
      "context" : "Assume that gi(0) ∈ [0, 1] for all i ∈ [n], then for the zero vector α := 0 ∈ R, we have D(α)−D(α) = D(0)−D(α) ≤ n .",
      "startOffset" : 20,
      "endOffset" : 26
    }, {
      "referenceID" : 0,
      "context" : "s = τμ τμ+ σmaxσ′ ∈ [0, 1] (50)",
      "startOffset" : 20,
      "endOffset" : 26
    }, {
      "referenceID" : 11,
      "context" : "F Recovering COCOA+ as a Special Case As a special case, PROXCOCOA+ directly applies to any L2-regularized loss-minimization problem, including those presented in [12, 17].",
      "startOffset" : 163,
      "endOffset" : 171
    }, {
      "referenceID" : 16,
      "context" : "F Recovering COCOA+ as a Special Case As a special case, PROXCOCOA+ directly applies to any L2-regularized loss-minimization problem, including those presented in [12, 17].",
      "startOffset" : 163,
      "endOffset" : 171
    }, {
      "referenceID" : 11,
      "context" : "In other words, the PROXCOCOA + algorithm will in this case apply to (A) as the dual of the original input problem (which will be mapped to (B)), as described in [12, 17].",
      "startOffset" : 162,
      "endOffset" : 170
    }, {
      "referenceID" : 16,
      "context" : "In other words, the PROXCOCOA + algorithm will in this case apply to (A) as the dual of the original input problem (which will be mapped to (B)), as described in [12, 17].",
      "startOffset" : 162,
      "endOffset" : 170
    }, {
      "referenceID" : 4,
      "context" : "ADMM Alternating Direction Method of Multipliers (ADMM) [5] is a popular method that lends itself naturally to the distributed environment.",
      "startOffset" : 56,
      "endOffset" : 59
    }, {
      "referenceID" : 24,
      "context" : "Mini-batch CD Mini-batch CD aims to improve mini-batch SGD by employing coordinate descent, which has encouraging theoretical and practical backings [25, 9, 28].",
      "startOffset" : 149,
      "endOffset" : 160
    }, {
      "referenceID" : 8,
      "context" : "Mini-batch CD Mini-batch CD aims to improve mini-batch SGD by employing coordinate descent, which has encouraging theoretical and practical backings [25, 9, 28].",
      "startOffset" : 149,
      "endOffset" : 160
    }, {
      "referenceID" : 27,
      "context" : "Mini-batch CD Mini-batch CD aims to improve mini-batch SGD by employing coordinate descent, which has encouraging theoretical and practical backings [25, 9, 28].",
      "startOffset" : 149,
      "endOffset" : 160
    }, {
      "referenceID" : 6,
      "context" : "Shotgun As a special case of mini-batch CD, Shotgun [7] is a popular method for parallel optimization.",
      "startOffset" : 52,
      "endOffset" : 55
    }, {
      "referenceID" : 31,
      "context" : "OWL-QN OWN-QN [32] is a quasi-Newton method optimized in Spark’s spark.",
      "startOffset" : 14,
      "endOffset" : 18
    }, {
      "referenceID" : 10,
      "context" : "We note that since the framework and theory allow any internal solver to be used, PROXCOCOA+ could benefit even beyond the results shown, by using existing fast L1-solvers for the single-machine case, such as GLMNET variants [11] or BLITZ [13].",
      "startOffset" : 225,
      "endOffset" : 229
    }, {
      "referenceID" : 12,
      "context" : "We note that since the framework and theory allow any internal solver to be used, PROXCOCOA+ could benefit even beyond the results shown, by using existing fast L1-solvers for the single-machine case, such as GLMNET variants [11] or BLITZ [13].",
      "startOffset" : 239,
      "endOffset" : 243
    } ],
    "year" : 2016,
    "abstractText" : "Despite the importance of sparsity in many large-scale applications, there are few methods for distributed optimization of sparsity-inducing objectives. In this paper, we present a communication-efficient framework for L1-regularized optimization in the distributed environment. By viewing classical objectives in a more general primal-dual setting, we develop a new class of methods that can be efficiently distributed and applied to common sparsity-inducing models, such as Lasso, sparse logistic regression, and elastic net-regularized problems. We provide theoretical convergence guarantees for our framework, and demonstrate its efficiency and flexibility with a thorough experimental comparison on Amazon EC2. Our proposed framework yields speedups of up to 50× as compared to current state-of-the-art methods for distributed L1-regularized optimization.",
    "creator" : "LaTeX with hyperref package"
  }
}