{
  "name" : "1507.01784.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Rethinking LDA: moment matching for discrete ICA",
    "authors" : [ "Anastasia Podosinnikova", "Francis Bach", "Simon Lacoste-Julien" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Topic models have emerged as flexible and important tools for the modelisation of text corpora. While early work has focused on graphical-model approximate inference techniques such as variational inference [6] or Gibbs sampling [21], tensor-based moment matching techniques have recently emerged as strong competitors due to their computational speed and theoretical guarantees [1, 3]. In this paper, we draw explicit links with the independent component analysis (ICA) literature (e.g. [19] and references therein) by showing a strong relationship between latent Dirichlet allocation (LDA) [6] and ICA [24, 25, 18]. We can then reuse standard ICA techniques and results, and derive new tensors with better sample complexity and new algorithms based on joint diagonalization."
    }, {
      "heading" : "2 Is LDA discrete PCA or discrete ICA?",
      "text" : "Notation. Following the text modeling terminology, we define a corpus X = {x1, . . . , xN} as a collection of N documents. Each document is a collection {wn1, . . . , wnLn} of Ln tokens. It is convenient to represent the `-th token of the n-th document as a 1-of-M encoding with an indicator vector wn` ∈ {0, 1}M with only one non-zero, where M is the vocabulary size, and each document as the count vector xn := ∑ ` wn` ∈ RM . In such representation, the length Ln of the n-th document\nis Ln = ∑ m xnm. We will always use index k ∈ {1, . . . ,K} to refer to topics, index n ∈ {1, . . . , N} to refer to documents, index m ∈ {1, . . . ,M} to refer to words from the vocabulary, and index ` ∈ {1, . . . , Ln} to refer to tokens of the n-th document.\nLatent Dirichlet allocation [6] is a generative probabilistic model for discrete data such as text corpora. In accordance to this model, the n-th document is modeled as an admixture over the vocabulary of M words with K latent topics. Specifically, the latent variable θn, which is sampled from the Dirichlet distribution, represents the topic mixture proportion over K topics for the n-th document. Given θn, the topic choice zn`|θn for the `-th token is sampled from the multinomial distribution with the probability vector θn. The token wn`|zn`, θn is then sampled from the multinomial distribution with the probability vector dzn` , or dk if k is the index of the non-zero element in zn`. This vector dk is the k-th topic, that is a vector of probabilities over the words from the vocabulary subject to the simplex constraint, i.e. dk ∈ ∆M , where ∆M := {d ∈ RM : d 0, ∑ m dm = 1}. This generative process of a document (the index n is omitted for simplicity) can be summarized as\nθ ∼ Dirichlet(c), z`|θ ∼ Multinomial(1, θ),\nw`|z`, θ ∼ Multinomial(1, dz`), (1)\nar X\niv :1\n50 7.\n01 78\n4v 1\n[ st\nat .M\nL ]\n7 J\nul 2\n01 5\nOne can think of the latent variables z` as auxiliary variables which were introduced for convenience of inference, but can in fact be marginalized out, which leads to the following model\nθ ∼ Dirichlet(c), x|θ ∼ Multinomial(L,Dθ),\nLDA model (2)\nwhere D ∈ RM×K is the topic matrix with the k-th column equal to the k-th topic dk, and c ∈ RK++ is the vector of parameters for the Dirichlet distribution. While a document is represented as a set of tokens w` in the formulation (1), the formulation (2) instead compactly represents a document as the count vector x. Although the two representations are equivalent, we focus on the second one in this paper and therefore refer to it as the LDA model.\nImportantly, the LDA model does not model the length of documents. Indeed, although the original paper [6] proposes to model the document length as L|λ ∼ Poisson(λ), this is never used in practice and, in particular, the parameter λ is not learned. Therefore, in the way that the LDA model is typically used, it does not provide a complete generative process of a document as there is no rule to sample L|λ. In this paper, this fact is important, as we need to model the document length in order to make the link with discrete ICA.\nDiscrete PCA. Principal component analysis has the following probabilistic interpretation [29, 28]\nθ ∼ Normal(0, IK), x|θ ∼ Normal(Dθ, σ2IM ),\n(3)\nwhere D ∈ RM×K is a transformation matrix and σ is a parameter. As Buntine [9] mentions, the LDA model (2) can be seen as a discretization of the probabilistic PCA model (3) by replacing the normal likelihood with the multinomial one. By analogy with the self-conjuagacy of the normal distribution, the Dirichlet prior is chosen as the conjugate prior for the multinomial distribution. Due to the close relation of models (2) and (3), LDA can be interpreted as a discrete PCA model.\nDiscrete ICA (DICA). Interestingly, a small extension of the LDA model allows its interpretation as a discrete independent component analysis (DICA) model. The extension naturally arises when the document length for the LDA model is modeled as a random variable from the gamma-Poisson mixture (which is equivalent to a negative binomial random variable), i.e. L|λ ∼ Poisson(λ) and λ ∼ Gamma(c0, b), where c0 := ∑ k ck is the shape parameter and b > 0 is the rate parameter. The LDA model (2) with such document length is equivalent (see Appendix A.1) to\nαk ∼ Gamma(ck, b), xm|α ∼ Poisson([Dα]m),\nGP model (4)\nwhere all α1, α2, . . . , αK are mutually independent, the parameters ck coincide with the ones of the LDA model in (2), and the free parameter b can be seen (see Appendix A.2) as a scaling parameter for the document length when c0 is already prescribed.\nThis model was originally introduced by Canny [11] and later named as a discrete ICA model [10]. It is more natural, however, to name model (4) as the gamma-Poisson (GP) model and the model\nα1, . . . , αK ∼ mutually independent, xm|α ∼ Poisson([Dα]m)\nDICA model (5)\nas the discrete ICA model. The only difference between (5) and the standard ICA model [24, 25, 18] (without additive noise) is the presence of the Poisson noise which enforces discrete, instead of continuous, values of xm. Note also that (a) the discrete ICA model is a semi-parametric model that can adapt to any distribution on the topic intensities αk and that (b) the GP model (4) is a particular case of both the LDA model (2) and the DICA model (5).\nThanks to this close connection between LDA and ICA, we can reuse standard ICA techniques to derive new efficient algorithms for topic modeling."
    }, {
      "heading" : "3 Moment matching for topic modeling",
      "text" : "In general, the method of moments is based on the idea of estimating latent parameters of a probabilistic model by matching theoretical expressions of moments with their sample estimates. The\nrecent line of work by Anandkumar et al. [1, 3] discusses applications of the method of moments to several latent variable models including LDA, which results in computationally fast learning algorithms with theoretical guarantees. For LDA, their key ideas are (a) construction of the moments of the LDA model with some particular diagonal structure (called the “LDA moments” in the following) and (b) development of algorithms for estimating the model parameters by exploiting this particular diagonal structure. As discussed later, these algorithms are a particular kind of joint diagonalization algorithms on the sample estimates of expressions involving moments.\nThis paper has a similar high-level structure. In Section 3.1, we introduce novel cumulants for the GP/DICA models (called the “GP/DICA cumulants” in the following), which have a similar structure to the one of the LDA moments. This structure allows to reapply the algorithms of [1, 3] for the estimation of the model parameters, with the same theoretical guarantees. In addition, in Section 4, we consider another algorithm, which in turn is applicable to both the LDA moments and the GP/DICA cumulants. In Section 5, we experimentally compare these algorithms."
    }, {
      "heading" : "3.1 Cumulants of the GP and DICA models",
      "text" : "In this section, we derive and analyze the novel cumulants of the DICA model. As the GP model is a particular case of the DICA model, all results of this section extend to the GP model.\nThe first three cumulant tensors1 for the random vector x can be defined as follows\ncum(x) := E(x), (6) cum(x, x) := cov(x, x) = E [ (x− E(x))(x− E(x))> ] , (7)\ncum(x, x, x) := E [(x− E(x))⊗ (x− E(x))⊗ (x− E(x))] , (8)\nwhere ⊗ denotes the tensor product (see some properties of cumulants in Appendix B.1). The essential property of the cumulants (which does not hold for moments) that we use in this paper is that the cumulant tensor for a random vector with independent components is diagonal.\nLet y = Dα; then for the Poisson random variable xm|ym ∼ Poisson(ym), the expectation is E(xm|ym) = ym. Hence, by the law of total expectation and the linearity of expectation, the expectation in (6) has the following form\nE(x) = E(E(x|y)) = E(y) = DE(α). (9)\nFurther, the variance of the Poisson random variable xm is var(xm|ym) = ym and, as x1, x2, . . . , xM are conditionally independent given y, then their covariance matrix is diagonal, i.e. cov(x, x|y) = diag(y). Therefore, by the law of total covariance, the covariance in (7) has the form\ncov(x, x) = E [cov(x, x|y)] + cov [E(x|y),E(x|y)] = diag [E(y)] + cov(y, y) = diag [E(x)] +Dcov(α, α)D>,\n(10)\nwhere the last equality follows by the multilinearity property of cumulants (see Appendix B.1). Moving the first term from the RHS of (10) to the LHS, we define\nS := cov(x, x)− diag [E(x)] . DICA S-cum. (11)\nFrom (10) and by the independence of α1, . . . , αK (see Appendix B.3), S has the following diagonal structure S = ∑\nk var(αk)dkd\n> k = Ddiag [var(α)]D >. (12)\nBy analogy with the second order case, using the law of total cumulance, the multilinearity property of cumulants, and the independence of α1, . . . , αK , we derive in Appendix B.2 expression (22), similar to (10), for the third cumulant (8). Moving the terms in this expression, we define a tensor T with the following element\n[T ]m1m2m3 := cum(xm1 , xm2 , xm3) + 2δ(m1,m2,m3)E(xm1) DICA T-cum. (13) − δ(m2,m3)cov(xm1 , xm2)− δ(m1,m3)cov(xm1 , xm2)− δ(m1,m2)cov(xm1 , xm3),\n1The 2nd and 3rd cumulants coincide with the 2nd and 3rd central moments (but not at higher order).\nwhere δ is the Kronecker delta. By analogy with (12) (Appendix B.3), the tensor T has the diagonal structure T = ∑\nk cum(αk, αk, αk)dk ⊗ dk ⊗ dk. (14)\nIn Appendix D.1, we recall (in our notation) the matrix S (37) and the tensor T (38) for the LDA model [1], which are analogues of the matrix S (11) and the tensor T (13) for the GP/DICA models. Slightly abusing terminology, we refer to the matrix S (37) and the tensor T (38) as the “LDA moments” and to the matrix S (11) and the tensor T (13) as the “GP/DICA cumulants”. The diagonal structure (39) & (40) of the LDA moments is similar to the diagonal structure (12) & (14) of the GP/DICA cumulants, though arising through a slightly different argument, as discussed at the end of Appendix D.1. Importantly, due to this similarity, the algorithmic frameworks for both the GP/DICA cumulants and the LDA moments coincide.\nThe following sample complexity results apply to the sample estimates of the GP cumulants:2 Proposition 3.1. Under the GP model, the expected error for the sample estimator Ŝ (27) for the GP cumulant S (11) is:\nE [ ‖Ŝ − S‖F ] ≤ √ E [ ‖Ŝ − S‖2F ] ≤ O ( 1√ N max [ ∆L̄2, c̄0L̄ ]) , (15)\nwhere ∆ := max k ‖dk‖22, c̄0 := min(1, c0) and L̄ := E(L).\nA high probability bound could be derived using concentration inequalities for Poisson random variables [7]; but the expectation already gives the right order of magnitude for the error (for example via Markov’s inequality). By following a similar analysis as in [2], we can rephrase the topic recovery error in term of the error on the GP cumulant. Importantly, the whitening transformation redivides the error on S (15) by L̄2, which is the scale of S (see Appendix C.5 for details). This means that the contribution from Ŝ to the recovery error will scale as O( 1√\nN max{∆, c̄0 L̄ }), where both ∆ and c̄0 L̄\nare smaller than 1 and can be very small. We do not present the exact expression for the expected squared error for the estimator of T , but due to a similar structure in the derivation, we expect the analogous bound of E [ ‖T̂ − T‖F ] ≤ 1√\nN max\n[ ∆3/2L̄3, c̄\n3/2 0 L̄\n3/2 ] . In Appendix B.4, we present\nthe expression (27) for an unbiased finite sample estimate Ŝ of S and the expression (28) for an\nunbiased finite sample estimate T̂ of T . A sketch of a proof for Proposition 3.1 can be found in Appendix C. Current sample complexity results of the LDA moments [1] can be summarized as O(1/ √ N). However, the proof (which can be found in the supplementary material [2]) analyzes only the case when finite sample estimates of the LDA moments are constructed from one triple per document, i.e. w1 ⊗ w2 ⊗ w3 only, and not from the U-statistics that average multiple (dependent) triples per document as in the practical expressions (41) and (42). Moreover, one has to be careful when comparing upper bounds. Nevertheless, comparing the bound (15) with the current theoretical results for the LDA moments, we see that the GP/DICA cumulants sample complexity contains the `2- norm of the columns of the topic matrix D in the numerator, as opposed to the O(1) coefficient for the LDA moments. This norm can be significantly smaller than 1 for vectors in the simplex (e.g. ∆ = O(1/‖dk‖0) for sparse topics). This suggests that the GP/DICA cumulants may have better finite sample convergence properties than the LDA moments and our experimental results in Section 5.2 are indeed consistent with this statement.\nThe GP/DICA cumulants have a somewhat more intuitive derivation than the LDA moments as they are expressed via the count vectors x (which are the sufficient statistics for the model) and not the tokens w`’s. Note also that the construction of the LDA moments depend on the unknown parameter c0. Given that we are in an unsupervised setting and that moreover the evaluation of LDA is a difficult task [31], setting this parameter is non-trivial. In Appendix F.1, we investigate this dependence experimentally and observe that the LDA moments are somewhat sensitive to the choice of c0."
    }, {
      "heading" : "4 Diagonalization algorithms",
      "text" : "How is the diagonal structure (12) of S (11) and (14) of T (13) going to be helpful for the estimation of the model parameters? This question has already been thoroughly investigated in the signal\n2Note that the expected squared error for the DICA cumulants is similar, but the expressions are less compact and, in general, depend on the prior on αk.\nprocessing literature more than two decades ago (see, e.g., [12, 13, 15, 23, 16, 19] and references therein) and was recently brought back to the machine learning community (see [1, 3] and references therein), approach that we review in this section. Note that the algorithms of this section apply to both the LDA moments and the GP/DICA cumulants due to their similar diagonal structure.\nFor simplicity, let us rewrite expressions (12) and (14) for S and T as follows S = ∑\nk skdkd\n> k , T = ∑ k tkdk ⊗ dk ⊗ dk, (16)\nwhere sk := var(αk) and tk := cum(αk, αk, αk). Introducing the rescaled topics d̃k := √ skdk, we can also rewrite S = D̃D̃>. Following the same assumption from [1] that the topic vectors are linearly independent (and thus D̃ has full rank), we can compute a whitening matrix W ∈ RK×M of S, i.e. a matrix such that WSW> = IK where IK is the K-by-K identity matrix (see Appendix E.1 for more details). We then obtain that the vectors zk := Wd̃k form an orthonormal set of vectors.\nFurther, let us define a projection T (v) ∈ RK×K of a tensor T ∈ RK×K×K onto a vector u ∈ RK :\nT (u)k1k2 := ∑\nk3 Tk1k2k3uk3 . (17)\nApplying the multilinear transformation (see, e.g., [3] for the definition) with W> to the tensor T from (16) and then projecting the resulting tensor T := T (W>,W>,W>) onto some vector u ∈ RK , we obtain\nT (u) = ∑\nk t̃k〈zk, u〉zkz>k (18)\nwhere t̃k := tk/s 3/2 k is due to the rescaling of topics and 〈·, ·〉 stands for the inner product. As the vectors zk are orthonormal, the pairs zk and λk := t̃k〈zk, u〉 can be seen as eigenpairs of the matrix T (u), which are uniquely defined if the eigenvalues λk are all different. If they are unique, we can recover the GP/DICA (as well as LDA) model parameters via d̃k = W †zk and t̃k = λk/〈zk, u〉.\nThis, in fact, is the spectral algorithm for LDA [1] and its predecessor, the fourth-order3 blind identification algorithm [12, 13]. Indeed, one can define finite sample estimates4 Ŝ and T̂ of S (11) and T (13) and expect that they possess approximately the diagonal structure (12) and (14) and, therefore, the reasoning from above can be applied, under the assumption that the effect of the sampling error is controlled.\nThis spectral algorithm, however, is known to be quite unstable in practice (see, e.g., [14]). To overcome this problem, some other algorithms were proposed. The most notable ones are probably the FastICA algorithm [23] and the JADE algorithm [16]. The FastICA algorithm, with appropriate choice of a contrast function, estimates iteratively the topics, making use of the orthonormal structure (18), and performs the deflation procedure at every step. The recently introduced tensor power method (TPM) for the LDA model [3] is close to the FastICA algorithm. Alternatively, the JADE algorithm modifies the spectral algorithm by performing multiple projections for (18) and then jointly diagonalizing the resulting matrices with an orthogonal matrix. The spectral algorithm is a special case of this orthogonal joint diagonalization algorithm when only one projection is chosen. Importantly, a fast implementation [17] of the orthogonal joint diagonalization algorithm from [8] was proposed, which is based on closed-form iterative Jacobi updates (see, e.g., [27] for the later).\nIn practice, the orthogonal joint diagonalization (JD) algorithm is more robust than FastICA (see, e.g., [5, p.30]) or the spectral algorithm. Moreover, although the application of the JD algorithm for the learning of topic models was mentioned in the literature [3, 26], it was never implemented in practice. In this paper, we apply the JD algorithm for the diagonalization of the GP/DICA cumulants as well as the LDA moments, which is described in Algorithm 1. Note that the choice of a projection vector vp ∈ RM obtained as vp = Ŵ>up for some vector up ∈ RK is important and corresponds to the multilinear transformation of T̂ with Ŵ> along the third mode. Importantly, in Algorithm 1, the joint diagonalization routine is performed over (P + 1) K ×K matrices, where\n3Note that (a) the factorization of S = D̃D̃> does not uniquely determine D̃ as one can equivalently use S = (D̃U)(D̃U)> with any orthogonal K × K matrix U . Therefore, one has to consider higher than the second order information; (b) in ICA the fourth-order tensors are used, because the third cumulant of the Gaussian distribution is zero, which is not the case in the DICA/LDA models, where the third order information is sufficient.\n4The precise expression for our finite sample estimates Ŝ (27) and T̂ (28) of S (11) and T (13) for the GP/DICA cumulants is somewhat cumbersome and is therefore moved to Appendix E.2. For completeness, we also present the finite sample estimates Ŝ (41) and T̂ (42) of S (37) and T (38) for the LDA moments (which are consistent with the ones suggested in [3]) in Appendix E.3.\nthe number of topics K is usually not too big. This makes the algorithm computationally fast (Appendix E discusses the computational complexity). The same is true for the spectral algorithm, but not for TPM.\nAlgorithm 1 Orthogonal joint diagonalization (JD) algorithm for GP/DICA cumulants (or LDA moments)\n1: Input: X ∈ RM×N , K, P (number of random projections); (and c0 for LDA moments) 2: Compute sample estimate Ŝ ∈ RM×M ((27) for GP/DICA / (41) for LDA in Appendix E) 3: Estimate whitening matrix Ŵ ∈ RK×M of Ŝ (see Appendix E.1) 4: option (a) Choose vectors {u1, u2, . . . , uP } ⊆ RK uniformly at random from the unit `2-sphere\nand set vp = Ŵ >up ∈ RM for all p = 1, . . . , P (P = 1 yields spectral algorithm)\n5: option (b) Choose vectors {u1, u2, . . . , uP } ⊆ RK as the canonical basis e1, e2, . . . , eK of RK and set vp = Ŵ\n>up ∈ RM for all p = 1, . . . ,K 6: For ∀p, compute Bp = Ŵ T̂ (vp)Ŵ> ∈ RK×K ((50) for GP/DICA / (52) for LDA; Appendix E) 7: Perform orthogonal joint diagonalization of matrices {Ŵ ŜŴ> = IK , Bp, p = 1, . . . , P} (see [8]\nand [17]) to find an orthogonal matrix V ∈ RK×K and vectors {a1, a2, . . . , aP } ⊂ RK such that\nV Ŵ ŜŴ>V > = IK , and V BpV > ≈ diag(ap), p = 1, . . . , P\n8: Output: joint diagonalization matrix A = V Ŵ and values ap, p = 1, . . . , P\nIn Section 5.1, we compare experimentally the performance of the spectral, JD, and TPM algorithms for the estimation of the parameters of the GP/DICA as well as LDA models. We are not aware of any experimental comparison of these algorithms in the LDA context. While already working on this manuscript, the JD algorithm was also independently analyzed by [26] in the context of tensor factorization for general latent variable models. However, [26] focused mostly on the comparison of approaches for tensor factorization and their stability properties, with brief experiments using a latent variable model related but not equivalent to LDA for community detection. In contrast, we provide a detailed experimental comparison in the context of LDA in this paper, as well as propose a novel cumulant-based estimator.\nModel parameters recovery. Algorithm 1 outputs a joint diagonalization matrix A ∈ RK×M that has the property that AD should be approximately diagonal up to a permutation of the columns of D. The standard approach [1] of taking the pseudo-inverse of A to get an estimate of the topic matrix D has a problem that it does not preserve the simplex constraint of the topics (in\nparticular, the non-negativity of D̃). Due to the space constraints, we do not discuss this issue here, but we observed experimentally that this can potentially significantly deteriorate performance of all moment matching algorithms for LDA. We made an attempt to solve this problem by integrating the non-negativity constraint into the Jacobi-updates procedure of the orthogonal joint diagonalization algorithm, but the obtained results did not lead to any significant improvement. Therefore, for our experiments, we estimate the topic matrix by thresholding the negative values of the pseudo-inverse of A: d̂k := max(0, [A\n†]:k)/‖max(0, [A†]:k)‖1, where [A†]:k is the k-th column of the pseudo-inverse A† of A (see Appendix E.4 for more details on the recovery of the model parameters for the GP model), and leave this issue as an open question for future research."
    }, {
      "heading" : "5 Experiments",
      "text" : "In this section, (a) we compare experimentally the GP/DICA cumulants with the LDA moments and (b) we compare experimentally the spectral algorithm [1], the tensor power method [3] (TPM), the orthogonal joint diagonalization (JD) algorithm from Algorithm 1, and the variational inference algorithm for LDA [6].\nReal data: the associated press (AP) dataset, from D. Blei’s web page5, with N = 2, 243 documents\nand M = 10, 473 words in the vocabulary and the average document length L̂ = 194; the NIPS papers dataset6 [20] of N = 2, 483 NIPS papers and M = 14, 036 words in the vocabulary, and the average document length L̂ = 1, 321; the KOS blog entries dataset7, from the UCI Repository, with\n5http://www.cs.columbia.edu/~blei/lda-c/index.html 6http://ai.stanford.edu/~gal/data.html 7https://archive.ics.uci.edu/ml/datasets/Bag+of+Words\nN = 3, 430 documents and M = 6, 906 words in the vocabulary, and the average document length L̂ = 136. As the LDA moments require at least three tokens in each document, 1 document from the NIPS dataset and 3 documents from the AP dataset, which did not fulfill this requirement, were removed.\nSemi-synthetic data are constructed by analogy with [4] and provide ground truth information for evaluation. First, the LDA parameters D and c are learned from the real datasets with the variational inference LDA and, then, toy data are sampled from a model of interest with the given parameters D and c. For each setting, data are sampled 5 times and the results are averaged. We plot error bars that are the minimum and maximum values. This provides the ground truth parameters D and c. For the AP data, K ∈ {10, 50} topics are learned and, for the NIPS data, K ∈ {10, 90} topics are learned. For larger K, the obtained topic matrix is ill-conditioned, which violates the identifiability condition for topic recovery using moment matching techniques [1]. All the documents with less than 3 tokens were resampled.\nSampling techniques. All the sampling models have the parameter c which is set to c = c0c̄/ ‖c̄‖1, where c̄ is the learned c from the real dataset with variational LDA, and c0 is a parameter that we can vary. The GP data are sampled from the gamma-Poisson model (4) with b = c0/L̂ so that the expected document length is L̂ (see Appendix A.2). The LDA-fix(L) data are sampled from the LDA model (2) with the document length being fixed to a given L. The LDA-fix2(γ,L1,L2) data are sampled as follows: (1− γ)-portion of the documents are sampled from the LDA-fix(L1) model with a given document length L1 and γ-portion of the documents are sampled from the LDA-fix(L2) model with a given document length L2.\nEvaluation. Evaluation of topic recovery for semi-synthetic data is performed with the `1-error between the recovered D̂ and true D topic matrices with the best permutation of columns:\nerr`1(D̂,D) := min π∈PERM\n1\n2K ∑ k ‖d̂πk − dk‖1 ∈ [0, 1]. (19)\nThe minimization is over the possible permutations π ∈ PERM of the columns of D̂ and can be efficiently obtained with the Hungarian algorithm for bipartite matching. For the evaluation of topic recovery in the real data case, we use an approximation of the log-likelihood for held out documents as the metric. The approximation is computed using a Chib-style method as described by [31] using the authors’ implementation8. Note that this evaluation method is also applicable for the GP model, as it is a particular case of the LDA model.\nCode and complexity. We used our own Matlab implementations of the GP/DICA cumulants, the LDA moments, the spectral algorithm, and the tensor power method, as, to our knowledge, no efficient implementation of these algorithms was available for LDA. The expressions (50) and (52) provide efficient formulas for fast computation of the GP/DICA cumulants and LDA moments (O(RNK), where R is the largest number of non-zeros in the count vector x over all documents), which makes even the Matlab implementation fast for large datasets. For the orthogonal joint diagonalization algorithm, we implemented a faster C++ version of the previous Matlab implementation by J.-F. Cardoso. For variational inference, we used the code of D. Blei and modified it for the estimation of a non-symmetric Dirichlet prior c, which is known to be important [30]. The default values of the tolerance/maximum number of iterations parameters are used for variational inference. The computational complexity of one iteration for one document of the variational inference algorithm is O(RK), where R is the number of non-zeros in the count vector for this document, which is then performed a significant number of times. Each experiment was run in a single thread.\nNote that (a) for the large vocabulary size M , the computation of a whitening matrix can be expensive (in terms of both memory and time) and (b) the bottle-neck for the spectral, JD, and TPM algorithms is the computation of the cumulants/moments. One possible solution for (a) is to reduce the vocabulary size with, e.g., TF-IDF score, which is a standard practice in the topic modeling context. Another option is using a stochastic eigendecomposition (see, e.g., [22]) to approximate the whitening matrix. For (b): the spectral algorithm estimates the cumulants/moments only once and, therefore, is fast; joint estimation of P cumulants/moments for JD can be (and is) implemented much faster than estimation of P cumulants/moments by precomputing and reusing terms (e.g. WX) which appear in all cumulants/moments; for TPM, some parts of the cumulants/moments can also be precomputed, but as TPM normally does many more iterations than P , it is significantly slower. Note that the number of random restarts for TPM within one deflation step is set to 10 and\n8http://homepages.inf.ed.ac.uk/imurray2/pub/09etm/\nthe maximum number of iterations for every run is set to 100; the run with the best objective is chosen. It is known that the runs which converge to a good solution converge fast [3].\nParameter c0 for LDA. The construction of the LDA moments requires the parameter c0. For the semi-synthetic experiments, the true value of c0 is provided to the algorithms. It means that the LDA moments, in this case, have access to some oracle information, which in practice is never available. For real data experiments, c0 is set to the value obtained with variational inference. Experiments in Appendix F.1 show that this choice was somewhat important, however, this requires more thorough investigation."
    }, {
      "heading" : "5.1 Comparison of the diagonalization algorithms",
      "text" : "In Figure 1, we give a comparison of the diagonalization algorithms on the semi-synthetic AP dataset for K = 50 using the GP model for sampling. We compare the tensor power method (TPM) [3], the spectral algorithm (Spec), the orthogonal joint diagonalization algorithm (JD) described in Algorithm 1 with different options to choose the random projections: JD(k) takes P = K vectors up sampled uniformly from the unit `2-sphere in RK and selects vp = W>up (option (a) in Algorithm 1); JD selects the full basis e1, . . . , eK in RK and sets vp = W>ep (as JADE [16]) (option (b) in Algorithm 1); JD(f) chooses the full canonical basis of RM as the vectors to project onto (is computationally expensive).\nAlthough both the GP/DICA cumulants and LDA moments are well-specified for sampling from the GP model, the LDA moments have a slower finite sample convergence and, hence, a larger estimation error for the same value N . As expected, the spectral algorithm is always slightly inferior to the joint diagonalization algorithms. With the GP/DICA cumulants, where the estimation error is low, all algorithms demonstrate good performance, which also fulfills our expectations. However, although TPM shows almost perfect performance in the case of the GP/DICA cumulants (left), it significantly deteriorates for the LDA moments (right), which can be explained by the larger estimation error of the LDA moments and lack of robustness of TPM. For N = 50, 000, the algorithms have the following runtimes (min, mean, max) in sec: JD-GP (140, 197, 267), JD(k)-GP (121, 176, 269), JD(f)-GP (1935, 2114, 2259), Spec-GP (87, 106, 125), TPM-GP (1857, 1993, 2102), JD-LDA (238, 308, 447), JD(k)-LDA (236, 292, 441), JD(f)-LDA (2998, 3547, 4939), Spec-LDA (89, 106, 147), TPM-LDA (1490, 2116, 2796). Note, due to random restarts, two runs of TPM/Spec are never the same. Computation of a whitening matrix is roughly 30 sec (this time is the same for all algorithms and is included in the numbers above). Overall, the orthogonal joint diagonalization algorithm with initialization of random projections as W> multiplied with the canonical basis in RK (JD) is both computationally efficient and fast."
    }, {
      "heading" : "5.2 Comparison of the GP/DICA cumulants and the LDA moments",
      "text" : "In Figure 2, when sampling from the GP model (top, left), both the GP/DICA cumulants and LDA moments are well specified, which implies that the approximation error is low for both. The GP/DICA cumulants achieve low values of the estimation error already for N = 10, 000 documents\nindependently of the number of topics, while the convergence is slower for the LDA moments. When sampling from the LDA-fix(200) model (top, right), the GP/DICA cumulants are mis-specified and their approximation error is high, although the estimation error is low due to the faster finite sample convergence. One reason of poor performance of the GP/DICA cumulants, in this case, is the absence of variance in document length. Indeed, if documents with two different lengths are mixed by sampling from the LDA-fix2(0.5,20,200) model (bottom, left), the GP/DICA cumulants’ performance improves. Moreover, the experiment with a changing fraction γ of documents (bottom, right) shows that a non-zero variance on the length improves the performance of the GP/DICA cumulants. As in practice real corpora usually have a non-zero variance for the document length, this bad scenario for the GP/DICA cumulants is not likely to happen."
    }, {
      "heading" : "5.3 Real data experiments",
      "text" : "Each dataset is separated into 5 training/evaluation pairs, where the documents for evaluation are chosen randomly and non-repetitively among the folds (400 documents are held out for AP; 600 documents are held out for KOS). Then, the model parameters are learned for a different number of topics. The evaluation of the held-out documents is performed with averaging over 5 folds. In Figure 3, on the y-axis, the predictive log-likelihood in bits averaged per token is presented. JD-GP, Spec-GP, JD-LDA, and Spec-LDA are compared with variational inference (VI) and with variational inference initialized with the output of JD-GP (VI-JD). The orthogonal joint diagonalization algorithm with the GP/DICA cumulants (JD-GP) demonstrates competitive performance. In particular, the GP/DICA cumulants significantly outperform the LDA moments, and are better than variational inference. Interestingly, using variational inference after the topics have been learned by moment matching decreased performance in some cases. In Appendix F.3, a similar experiment for the NIPS dataset is presented."
    }, {
      "heading" : "6 Conclusion",
      "text" : "In this paper, we have proposed a new set of tensors for a discrete ICA model related to LDA, where word counts are directly modelled. These moments make fewer assumptions regarding distributions, and are theoretically and empirically more robust than previously proposed tensors for LDA, both on synthetic and real data. Following the ICA literature, we showed that our joint diagonalization\nprocedure is also more robust. Once the topic matrix has been estimated, it would be interesting to learn the unknown distributions of the independent topic intensities.\nAknowledgements. This work was partially supported by the MSR-Inria Joint Center."
    }, {
      "heading" : "A Appendix. The GP model",
      "text" : "A.1 The connection between the LDA and GP models\nTo show that the LDA model (2) with the additional assumption that the document length is modeled as a gamma-Poisson random variable is equivalent to the GP model (4), we show that:\n- when modeling the document length L as a Poisson random variable with parameter λ, the count vectors x1, x2, . . . , xM are mutually independent Poisson random variables;\n- the Gamma prior on λ reveals the connection αk = λθk between the Dirichlet random variable θ and the mutually independent gamma random variables α1, α2, . . . , αK .\nFor completeness, we repeat the known result that if L ∼ Poisson(λ) and x|L ∼ Multinomial(L,Dθ) (which thus means that L = ∑ m xm with probability one), then x1, x2, . . . , xM are mutually independent Poisson random variables with parameters λ [Dθ]1, λ [Dθ]2, . . . , λ [Dθ]M . Indeed, we consider the following joint probability mass function where x and L are assumed to be non-negative integers:\np(x, L|θ, λ) =p(L|λ)p(x|L, θ)\n=1{L= ∑ m xm} exp (−λ)λL\nL!\nL!∏ m xm! ∏ m [Dθ] xm m\n=1{L= ∑ m xm} exp(−λ ∑ m [Dθ]m)λ ∑ m xm ∏ m [Dθ] xm m xm! =1{L= ∑\nm xm} ∏ m exp(−λ [Dθ]m)(λ [Dθ]m)xm xm!\n=1{L= ∑ m xm} ∏ m Poisson(xm;λ [Dθ]m),\nwhere in the third equation we used the fact that∑ m [Dθ]m = ∑ m,k Dmkθk = ∑ k θk ∑ m Dmk = 1.\nWe thus have p(x, L|θ, λ) = p(L|x) ∏ m p(xm|λ[Dθ]m) where p(L|x) is simply the deterministic\ndistribution 1{L= ∑\nm xm} and p(xm|λ[Dθ]m) for m = 1, . . . ,M are independent Poisson(λ[Dθ]m) distributions (and thus do not depend on L). Note that in the notation introduced in the paper, Dmk = dkm. Hence, by using the construction of the Dirichlet distribution from the normalization of independent gamma random variables, we can show that the LDA model with a gamma-Poisson prior over the length is equivalent to the following model (recall, that c0 = ∑ k ck):\nλ ∼ Gamma(c0, b), θ ∼ Dirichlet(c),\nxm|λ, θ ∼ Poisson([D(λθ)]m). (20)\nMore specifically, we complete the second part of the argument with the following properties. When α1, α2, . . . , αK are mutually independent gamma random variables, each αk ∼ Gamma(ck, b), their sum is also a gamma random variable ∑ k αk ∼ Gamma( ∑ k ck, b). The former is equivalent to λ. It is known (e.g. [33]) that a Dirichlet random variable can be sampled by first sampling independent gamma random variables (αk) and then dividing each of them by their sum (λ): θk = αk/ ∑ k′ αk′ , and, in other direction, the variables αk = λθk are mutually independent, giving back the GP model (4).\nA.2 The expectation and the variance of the document length for the GP model\nFrom the drivations in Appendix A.1, it follows that the document length of the GP model (4) is a gamma-Poisson random variable, i.e. L|λ ∼ Poisson(λ) and λ ∼ Gamma(c0, b). Therefore, the following follows from the law of total expectation and the law of total variance\nE(L) = E [E(L|λ)] = E(λ) = c0/b var(L) = var [E(L|λ)] + E [var(L|λ)] = var(λ) + E(λ) = c0/b+ c0/b2\nThe first expression shows that the parameter b controls the expected document length E(L) for a given parameter c0: the smaller b, the larger E(L). On the other hand, if we allow c0 to vary as well, only the ratio c0/b is important for the document length. We can then interpret the role of c0 as actually controlling the concentration of the distribution for the length L (through the variance). More specifically, we have that:\nvar(L)\n(E(L))2 =\n1\nE(L) +\n1 c0 . (21)\nFor a fixed target document length E(L), we can increase the variance (and thus decrease the concentration) by using a smaller c0."
    }, {
      "heading" : "B Appendix. The cumulants of the GP and DICA models",
      "text" : "B.1 Cumulants\nFor a random vector x ∈ RM , the first three cumulant tensors9 are\ncum(xm) = E(xm), cum(xm1 , xm2) = E [(xm1 − E(xm1))(xm2 − E(xm2)] = cov(xm1 , xm2),\ncum(xm1 , xm2 , xm3) = E [(xm1 − E(xm1))(xm2 − E(xm2))(xm3 − E(xm3)))] .\nNote that the 2nd and 3rd cumulants coincide with the 2nd and 3rd central moments (but not for higher orders). In the following, cum(x, x, x) ∈ RM×M×M denotes the third order tensor with elements cum(xm1 , xm2 , xm3). Some of the properties of cumulants are listed below (see [19, chap. 5]). The most important property that motivate us to use cumulants in this paper (and the ICA literature) is the independence property, which says that the cumulant tensor for a random vector with independent components is diagonal (this property does not hold for the (non-central) moment tensors of any order, and neither for the central moments of order 4 or more).\n- Independence. If the elements of x ∈ RM are independent, then their cross-cumulants are zero as soon as two indices are different, i.e. cum(xm1 , xm2) = δ(m1,m2)E[(xm1 −Em1))2] and cum(xm1 , xm2 , xm3) = δ(m1,m2,m3)E[(xm1 − E(xm1))3], where δ is the Kronecker delta.\n- Multilinearity. If two random vectors y ∈ RM and α ∈ RK are linearly dependent, i.e. y = Dα for some D ∈ RM×K , then\ncum(ym) = ∑ k cum(αk)Dmk,\ncum(ym1 , ym2) = ∑ k1,k2 cum(αk1 , αk2)Dm1k1Dm2k2 ,\ncum(ym1 , ym2 , ym3) = ∑\nk1,k2,k3\ncum(αk1 , αk2 , αk3)Dm1k1Dm2k2Dm3k3 ,\nwhich can also be denoted10 by\nE(y) = DE(α), cov(y, y) = Dcov(α, α)D>,\ncum(y, y, y) = cum(α, α, α)(D>, D>, D>).\n- The law of total cumulance. For two random vectors x ∈ RM and y ∈ RM , it holds\ncum(xm) = E [E(xm|y)] , cum(xm1 , xm2) = E [cov(xm1 , xm2 |y)] + cov [E(xm1 |y),E(xm2 |y)] ,\ncum(xm1 , xm2 , xm3) = E [cum(xm1 , xm2 , xm3 |y)] + cum [E(xm1 |y),E(xm2 |y),E(xm3 |y)] + cov [E(xm1 |y), cov(xm2 , xm3 |y)] + cov [E(xm2 |y), cov(xm1 , xm3 |y)] + cov [E(xm3 |y), cov(xm1 , xm2 |y)] .\n9Strictly speaking, the (scalar) n-th cumulant κn of a random variable X is defined via the cumulant-generating function g(t), which is the natural logarithm of the moment-generating function, i.e g(t) := logE [ etX ] . The cumulant\nκn is then obtained from a power series expansion of the cumulant-generating function, that is g(t) = ∑∞ n=1 κnt n/n! [Wikipedia]. 10In [3], given a tensor T ∈ RK×K×K , T (D>, D>, D>) is referred to as the multilinear map. In [34], the same entity is denoted by T ×1 D> ×2 D> ×3 D>, where ×n denotes the n-mode tensor-matrix product.\nNote that the first expression is also well known as the law of total expectation or the tower property, while the second one is known as the law of total covariance.\nB.2 The third cumulant of the GP/DICA models\nIn this section, by analogy with Section 3.1, we derive the third GP/DICA cumulant.\nAs the third cumulant of a Poisson random variable xm with parameter ym is E((xm−E(xm))3|ym) = ym, then by the independence property of cumulants from Section B.1, the cumulant of x|y is diagonal:\ncum(xm1 , xm2 , xm3 |y) = δ(m1,m2,m3) ym1 .\nSubstituting the cumulant of x|y into the law of total cumulance, we obtain\ncum(xm1 , xm2 , xm3) = E [cum(xm1 , xm2 , xm3 |y)] + cum [E(xm1 |y),E(xm2 |y),E(xm3 |y)] + cov [E(xm1 |y), cov(xm2 , xm3 |y)] + cov [E(xm2 |y), cov(xm1 , xm3 |y)] + cov [E(xm3 |y), cov(xm1 , xm2 |y)]\n= δ(m1,m2,m3)E(ym1) + cum(ym1 , ym2 , ym3) + δ(m2,m3)cov(ym1 , ym2) + δ(m1,m3)cov(ym1 , ym2) + δ(m1,m2)cov(ym1 , ym3) = δ(m1,m2,m3)E(xm1) + cum(ym1 , ym2 , ym3) + δ(m2,m3)cov(xm1 , xm2)− δ(m1,m2,m3)E(xm1) + δ(m1,m3)cov(xm1 , xm2)− δ(m1,m2,m3)E(xm1) + δ(m1,m2)cov(xm1 , xm3)− δ(m1,m2,m3)E(xm1) = cum(ym1 , ym2 , ym3)− 2δ(m1,m2,m3)E(xm1) + δ(m2,m3)cov(xm1 , xm2) + δ(m1,m3)cov(xm1 , xm2) + δ(m1,m2)cov(xm1 , xm3)\n= [ cum(α, α, α)(D>, D>, D>) ] m1m2m3 − 2δ(m1,m2,m3)E(xm1)\n+ δ(m2,m3)cov(xm1 , xm2) + δ(m1,m3)cov(xm1 , xm2) + δ(m1,m2)cov(xm1 , xm3), (22)\nwhere, in the third equality, we used the previous result from (10) that cov(y, y) = cov(x, x) − diag(E(x)).\nB.3 The diagonal structure of the GP/DICA cumulants\nIn this section, we provide detailed derivation of the diagonal structure (12) of the matrix S (11) and the diagonal structure (14) of the tensor T (13).\nFrom the independence of α1, α2, . . . , αK and by the independence property of cumulants from Section B.1, it follows that cov(α, α) is a diagonal matrix and cum(α, α, α) is a diagonal tensor, i.e. cov(αk1 , αk2) = δ(k1, k2)cov(αk1 , αk2) and cum(αk1 , αk2 , αk3) = δ(k1, k2, k3)cum(αk1 , αk1 , αk1). Therefore, the following holds\ncov(ym1 , ym2) = ∑ k cov(αk, αk)Dm1kDm2k,\ncum(ym1 , ym2 , ym3) = ∑ k cum(αk, αk, αk)Dm1kDm2kDm3k,\nwhich we can rewrite in a matrix/tensor form as cov(y, y) = ∑ k cov(αk, αk)dkd > k ,\ncum(y, y, y) = ∑ k cum(αk, αk, αk)dk ⊗ dk ⊗ dk.\nMoving cov(y, y) / cum(y, y, y) in the expression for cov(x, x) (10) / cum(x, x, x) (22) on one side of equality and all other terms on the other side, we define matrix S ∈ RM×M / tensor T ∈ RM×M×M\nas follows\nS := cov(x, x)− diag (E(x)) , (23) Tm1m2m3 := cum(xm1 , xm2 , xm3) + 2δ(m1,m2,m3)E(xm1)\n− δ(m2,m3)cov(xm1 , xm2) − δ(m1,m3)cov(xm1 , xm2) − δ(m1,m2)cov(xm1 , xm3). (24)\nBy construction, S = cov(y, y) and T = cum(y, y, y) and, therefore, it holds that S = ∑ k cov(αk, αk)dkd > k , (25)\nT = ∑ k cum(αk, αk, αk)dk ⊗ dk ⊗ dk. (26)\nThis means that both the matrix S and the tensor T are sums of rank-1 matrices and tensors, respectively11. This structure of the matrix S and the tensor T is the basis for the algorithms considered in this paper.\nB.4 Unbiased finite sample estimators for the GP/DICA cumulants\nGiven a sample {x1, x2, . . . , xN}, we obtain a finite sample estimate Ŝ of S (11) / T̂ of T (13) for the GP/DICA cumulants:\nŜ := ĉov(x, x)− diag ( Ê(x) ) , (27)\nT̂m1m2m3 := ĉum(xm1 , xm2 , xm3) + 2δ(m1,m2,m3)Ê(xm1) − δ(m2,m3)ĉov(xm1 , xm2) − δ(m1,m3)ĉov(xm1 , xm2) − δ(m1,m2)ĉov(xm1 , xm3), (28)\nwhere unbiased estimators of the first three cumulants are\nÊ(xm1) = 1\nN ∑ n xnm1 ,\nĉov(xm1 , xm2) = 1 N − 1 ∑ n znm1znm2 ,\nĉum(xm1 , xm2 , xm3) = N (N − 1)(N − 2) ∑ n znm1znm2znm3 ,\n(29)\nwhere the word vocabulary indexes are m1,m2,m3 = 1, 2, . . . ,M and the centered documents znm := xnm− Ê(xm). (The latter is introduced only for compact representation of (29) and is different from z in the LDA model.)"
    }, {
      "heading" : "C Appendix. The sketch of the proof for Proposition 3.1",
      "text" : "C.1 Expected squared error for the sample expectation The sample expectation is Ê(x) = 1N ∑ n xn is an unbiased estimator of the expectation and:\nE ( ‖Ê(x)− E(x)‖22 ) = ∑ m E [( Ê(xm)− E(xm) )2]\n= 1\nN2 ∑ m E(∑ n (xnm − E(xm))2 ) + E ∑ n ∑ n6=n′ (xnm − E(xm)) (xn′m − E(xm))  = 1\nN ∑ m E [ (xm − E(xm))2 ] = 1 N ∑ m var(xm).\n11For tensors, such decomposition is also known under the names CANDECOMP/PARAFAC or, simply, the CP decomposition (see, e.g., [34]).\nFurther, by the law of total variance: E ( ‖Ê(x)− E(x)‖22 ) = 1\nN ∑ m [E(var(xm|y)) + var(E(xm|y))] = 1 N ∑ m [E(ym) + var(ym)]\n= 1\nN [∑ k E(αk) + ∑ k 〈dk, dk〉var(αk) ] ,\nusing the fact that ∑ mDmk = 1 for any k.\nC.2 Expected squared error for the sample covariance\nThe following finite sample estimator of the covariance cov(x, x) = E(xx>)− E(x)E(x)>\nĉov(x, x) = 1 N − 1 ∑ n xnx > n − Ê(x)Ê(x)> = 1 N − 1 ∑ n\n( xnx > n − 1\nN2 ∑ n′ ∑ n′′ xn′x > n′′\n)\n= 1\nN ∑ n xnx>n − 1N − 1xn ∑ n′ 6=n x>n′  (30)\nis unbiased, i.e. E(ĉov(x, x)) = cov(x, x). Its squared error is\nE ( ‖ĉov(x, x)− cov(x, x)‖2F ) = ∑ m,m′ E [ (ĉov(xm, xm′)− E[ĉov(xm, xm′)])2 ] .\nThe m,m′-th element of the sum above is equal to\n1\nN2 ∑ n,n′ cov xnmxnm′ − 1 N − 1 xnm ∑ n′′ 6=n xn′′m′ , xn′mxn′m′ − 1 N − 1 xn′m ∑ n′′′ 6=n′ xn′′′m′  = 1\nN2 ∑ n,n′ cov (xnmxnm′ , xn′mxn′m′)− 2 N2(N − 1) ∑ n,n′ cov xnm ∑ n′′ 6=n xn′′m′ , xn′mxn′m′  + 1\nN2(N − 1)2 ∑ n,n′ cov xnm ∑ n′′ 6=n xn′′m′ , xn′m ∑ n′′′ 6=n′ xn′′′m′  = 1\nN2 ∑ n cov (xnmxnm′ , xnmxnm′)\n− 2 N2(N − 1) ∑ n ∑ n′′ 6=n cov (xnmxn′′m′ , xnmxnm′) + ∑ n ∑ n′ 6=n cov (xnmxn′m′ , xn′mxn′m′)  + 1\nN2(N − 1)2 ∑ n ∑ n′′ 6=n ∑ n′′′ 6=n cov (xnmxn′′m′ , xnmxn′′′m′) + ∑ n′ ∑ n6=n′ ∑ n′′ 6=n cov (xnmxn′′m′ , xn′mxnm′)  + 1\nN2(N − 1)2 ∑ n′ ∑ n 6=n′ ∑ n′′′ 6=n′ cov (xnmxn′m′ , xn′mxn′′′m′) + ∑ n′ ∑ n 6=n′ ∑ n′′ 6=n cov (xnmxn′′m′ , xn′mxn′′m′)  , where we used mutual independence of the observations xn in a sample {xn}Nn=1 to conclude that the covariance between two expressions involving only independent variables is zero. Further: E ( ‖ĉov(x, x)− cov(x, x)‖2F ) = 1\nN2 ∑ m,m′ N ( E(x2mx2m′)− [E(xmxm′)] 2 )\n− 4 N2(N − 1) ∑ m,m′ N(N − 1) ( E(x2mxm′)E(xm′)− E(xmxm′)E(xm)E(xm′) ) + 2\nN2(N − 1)2 ∑ m,m′ N(N − 1)(N − 2) ( E(x2m) [E(xm′)] 2 − [E(xm)]2 [E(xm′)]2 )\n+ 2 N2(N − 1)2 ∑ m,m′ N(N − 1)(N − 2) ( E(xmxm′)E(xm)E(xm′)− [E(xm)]2 [E(xm′)]2 ) +O ( 1 N2 ) ,\nwhich after simplification gives\nE ( ‖ĉov(x, x)− cov(x, x)‖2F ) = 1\nN ∑ m,m′ [ var(xmxm′) + 2 [E(xm)]2 var(xm′) ] + 1\nN ∑ m,m′ [2E(xm)E(xm′)cov(xm, xm′)− 4E(xm)cov(xmxm′ , xm′)] +O ( 1 N2 ) ,\nwhere in the last equality, by symmetry, the summation indexes m and m′ can be exchanged. As xm ∼ Poisson(ym), by the law of total expectation and law of total covariance, it follows, for m 6= m′ (and using the auxiliary expressions from Section C.4):\nvar(xmxm′) = E(x2mx2m′)− [E[xmxm′ ]] 2 = E [ y2my 2 m′ + y 2 mym′ + ymy 2 m′ + ymym′ ] − [E(ymym′)]2\n[E(xm)]2 var(xm′) = [E(ym)]2 [E[var(x′m|y)] + var[E(x′m|y)]]\n= [E(ym)]2 E(ym′) + [E(ym)]2 E(y2m′)− [E(ym)] 2 [E(ym′)]2 ,\nE(xm)E(xm′)cov(xm, xm′) = E(ymym′)E(ym)E(ym′)− [E(ym)]2 [E(ym′)]2 , E(xm)cov(xmxm′ , xm′) = E(ym) [ E(ymym′) + E(ymy2m′)− E(ymym′)E(ym′) ] .\nNow, considering the m = m′ case, we have:\nvar(x2m) = E[E(x4m|y)]− ( E[E(x2m|y)] )2 = E [ y4m + 6y 3 m + 7y 2 m + ym ] − ( E [ y2m + ym\n])2 E(xm)E(xm)cov(xm, xm) = E(y2m) [ E(y2m) + E(ym)− [E(ym)] 2 ] ,\nE(xm)cov(x2m, xm) = E(ym) [ E(y3m) + 3E(y3m) + E(ym)− E(ym) [ E(y2m) + E(ym) ]] .\nSubstitution of ym = ∑ kDmkαk gives the following E ( ‖ĉov(x, x)− cov(x, x)‖2F ) = 1\nN ∑ k,k′,k′′,k′′′ 〈dk, dk′〉〈dk′′ , dk′′′〉Akk′k′′k′′′\n+ 1\nN ∑ k,k′,k′′ 〈dk, dk′〉〈dk′′ ,~1〉Bkk′k′′ + 1 N ∑ k,k′ 〈dk,~1〉〈dk′ ,~1〉E(αkαk′) +O ( 1 N2 ) ,\nwhere ~1 is the vector with all the elements equal to 1 and\nAkk′k′′k′′′ = E(αkαk′αk′′αk′′′)− E(αkαk′′)E(αk′αk′′′) + 2E(αk)E(αk′)E(αk′′αk′′′) − 2E(αk)E(αk′)E(αk′′)E(αk′′′) + 2E(αkαk′′)E(αk′)E(αk′′′)− 2E(αk)E(αk′)E(αk′′)E(αk′′′) − 4E(αk)E(αk′αk′′αk′′′) + 4E(αk)E(αk′αk′′)E(αk′′′),\nBkk′k′′ = 2E(αkαk′αk′′) + 4E(αk)E(αk′)E(αk′′)− 4E(αk)E(αk′αk′′),\nwhere we used the expressions from Section C.4.\nC.3 Expected squared error of the estimator Ŝ for the GP/DICA cumulants\nAs the estimator Ŝ (27) of S (11) is unbiased, its expected squared error is\nE [ ‖Ŝ − S‖2F ] =E [∥∥∥(ĉov(x, x)− cov(x, x)) + (diag[Ê(x)]− diag [E(x)])∥∥∥2 F ] = E [ ‖Ê(x)− E(x)‖2F ] + E [ ‖ĉov(x, x)− cov(x, x)‖2F\n] + 2\n∑ m E [( Ê(xm)− E(xm) ) (ĉov(xm, xm)− cov(xm, xm)) ] .\n(31)\nAs Ê(xm) and ĉov(xm, xm) are unbiased, the m-th element of the last sum is equal to\ncov [ Ê(xm), ĉov(xm, xm) ] = 1\nN2 ∑ n,n′ cov [ xnm, x 2 n′m ] − 1 N2(N − 1) ∑ n,n′,n′′ 6=n′ cov [xnm, xn′mxn′′m]\n= 1\nN2 ∑ n cov [ xnm, x 2 nm ] − 2 N2(N − 1) ∑ n,n′ 6=n cov [xnm, xn′mxnm] +O ( 1 N2 )\n= 1\nN E(x3m)−\n2\nN\n( E(x2m)E(xm)− [E(xm)] 3 ) +O ( 1\nN2 ) ≤ 1 N E(x3m) + 2 N [E(xm)]3 +O ( 1 N2 ) = 1 N [ E(y3m) + 3E(y2m) + E(ym) + 2 [E(ym)] 3 ] +O ( 1 N2 ) ,\nwhere we neglected the negative term −E(x2m)E(xm) for the inequality, and the last equality follows from the expressions in Section C.4. Further, the fact that ym = ∑ kDmkαk gives∑\nm\ncov [ Ê(xm), ĉov(xm, xm) ] = 1\nN ∑ k,k′,k′′ 〈dk ◦ dk′ , dk′′〉Ckk′k′′\n+ 3\nN ∑ k,k′ 〈dk, dk′〉E(αkαk′) + 1 N ∑ k 〈dk,~1〉E(αk) +O ( 1 N2 ) ,\nwhere ◦ denotes the elementwise Hadamard product and\nCkk′k′′ = E(αkαk′αk′′) + 2E(αk)E(αk′)E(αk′′).\nPlugging this and the expressions for E(‖Ê(x) − E(x)‖2F ) and E(‖ĉov(x, x) − cov(x, x)‖2F ) from Sections C.1 and C.2, respectively, into (31) gives E [ ‖Ŝ − S‖2F ] = 1\nN ∑ k 〈dk, dk〉var(αk) + ∑ k E(αk) + ∑ k,k′,k′′,k′′′ 〈dk, dk′〉〈dk′′ , dk′′′〉Akk′k′′k′′′ +O( 1 N2 )\n+ 1\nN  ∑ k,k′,k′′ [〈dk, dk′〉Bkk′k′′ + 2〈dk ◦ dk′ , dk′′〉Ckk′k′′ ] + ∑ k,k′ (1 + 6 〈dk, dk′〉)E(αkαk′) + 2 ∑ k E(αk)  , where we used that, by the simplex constraint on the topics, 〈dk,~1〉 = 1 for all k. To analyze this expression in more details, let us now consider the GP model, i.e. αk ∼ Gamma(ck, b):∑\nk,k′,k′′,k′′′\nAkk′k′′k′′′ ≤ 30c40 + 23c 3 0 + 14c 2 0 + 8c0\nb4 , and ∑ k,k′,k′′ Bkk′k′′ ≤ 14c30 + 12c 2 0 + 4c0 b3 ,\n∑ k,k′,k′′ Ckk′k′′ ≤ 7c30 + 6c 2 0 + 2c0 b3 , and ∑ k,k′ E(αkαk′) ≤ 2c20 + c0 b2 ,\nwhere we used the expressions from Section C.4, which gives E [ ‖Ŝ − S‖2F ] ≤ ν N [ max k ‖dk‖22 c0 b2 + c0 b + ( max k,k′ 〈dk, dk′〉 )2 max [ c40 b4 , c0 b4 ] + max k,k′ 〈dk, dk′〉max [ c30 b3 , c0 b3 ]]\n+ ν\nN [( max k,k′,k′′ 〈dk ◦ dk′ , dk′′〉 ) max [ c30 b3 , c0 b3 ] + ( 1 + max k,k′ 〈dk, dk′〉 ) max [ c20 b2 , c0 b2 ]] +O ( 1 N2 ) ,\nwhere ν ≤ 30 is a universal constant. As, by the Cauchy-Schwarz inequality, max k,k′〈dk, dk′〉 ≤ max k ‖dk‖22 =: ∆1 and max k,k′,k′′〈dk ◦ dk′ , dk′′〉 ≤ max k ‖dk‖∞ ‖dk‖ 2 2 ≤ max k ‖dk‖ 3 2 =: ∆2 (note that for the topics in the simplex, ∆2 ≤ ∆1 as well as ∆21 ≤ ∆1), it follows that\nE [ ‖Ŝ − S‖2F ] ≤ ν N [ ∆1 ( L2 c̄0 + L3 c̄20 ) + L+ ∆21 L4 c̄30 + L2 c̄20 + ∆2 L3 c̄20 ] +O ( 1 N2 ) ≤ 2ν N 1\nc̄30\n[ ∆21L 4 + c̄0∆1L 3 + c̄20L 2 + c̄30L ] +O\n( 1\nN2\n) ,\nwhere c̄0 = min(1, c0) ≤ 1 and, from Section A.2, c0 = bL where L is the expected document length. The second term c̄0∆1L 3 cannot be dominant as the system c̄0∆1L 3 > c̄20L 2 and c̄0∆1L 3 > ∆21L 4 is infeasible. Also, with the reasonable assumption that L ≥ 1, we also have that the 4th term c̄30L ≤ c̄20L2. Therefore,\nE [ ‖Ŝ − S‖2F ] ≤ 3ν N max [ ∆21L 4, c̄20L 2 ] +O ( 1 N2 ) .\nC.4 Auxiliary expressions\nAs {xm}Mm=1 are conditionally independent given y in the DICA model (4), we have the following expressions by using the law of total expectation for m 6= m′ and using the moments of the Poisson distribution with parameter ym:\nE(xm) = E[E(xm|ym)] = E(ym), E(x2m) = E[E(x2m|ym)] = E(y2m) + E(ym), E(x3m) = E[E(x3m|ym)] = E(y3m) + 3E(y2m) + E(ym), E(x4m) = E[E(x4m|ym)] = E(y4m) + 6E(y3m) + 7E(y2m) + E(ym),\nE(xmxm′) = E[E(xmxm′ |y)] = E[E(xm|ym)E(xm′ |ym′)] = E(ymym′), E(xmx2m′) = E[E(xmx2m′ |y)] = E[E(xm|ym)E(x2m′ |ym′)] = E(ymy2m′) + E(ymym′), E(x2mx2m′) = E[E(x2m|ym)E(x2m′ |ym′)] = E(y2my2m′) + E(y2mym′) + E(ymy2m′) + E(ymym′).\nMoreover, the moments of αk ∼ Gamma(ck, b) are\nE(αk) = ck b , E(α2k) = c2k + ck b2 , E(α3k) = c3k + 3c 2 k + 2ck b3 , E(α4k) = c4k + 6c 3 k + 11c 2 k + 6ck b4 , etc.\nC.5 Analysis of whitening and recovery error\nWe can follow a similar analysis as in Appendix C of [2] to derive the topic recovery error given the sample estimate error. In particular, if we define the following sampling errors ES and ET :\n‖Ŝ − S‖ ≤ ES ,\n‖T̂ (u)− T (u)‖ ≤ ‖u‖2ET ,\nthen the following form of their Lemma C.2 holds for both the LDA moments and the GP/DICA cumulants:\n‖Ŵ T̂ (Ŵ>u)Ŵ> −WT (W>u)W>‖ ≤ ν\n[ (maxkγk)ES\nσK ( D̃ )2 + ET σK ( D̃ )3 ] , (32)\nwhere σk(·) denotes the k-th singular value of a matrix, ν is some universal constant, and in both cases D̃ was defined such that S = D̃D̃>. For the LDA moments, γk = 2 √ c0(c0+1)) ck(c0+2)2 , whereas for the GP/DICA cumulants, γk takes the simpler form γk := cum(αk)/[var(αk)] 3/2 = 2/ √ ck.\nWe note that the scaling for S is O(L2) for the GP/DICA cumulants, in contrast to O(1) for the LDA moments. Thus, to compare the upper bound (32) for the two types of moments, we need to put it in quantities which are common. In the first section of the Appendix C of [2], it was mentioned\nthat σK ( D̃ ) ≥ √\ncmin c0(c0+1) σK(D) for the LDA moments, where cmin := mink ck. In contrast, for the GP/DICA cumulants, we can show that σK ( D̃ ) ≥ L √ cmin c0\nσK(D), where L := c0/b is the average length of a document in the GP model. Using this lower bound for the singular vector, we thus get the following bound in the case of the GP cumulant:\n‖Ŵ T̂ (Ŵ>u)Ŵ> −WT (W>u)W>‖ ≤ ν c 3/2 min\n[ ES L2 2c20[ σK ( D )]2 + ETL3 c30[σK(D)]3 ] . (33)\nThe c 3/2 min factor is common for both the LDA moment and GP cumulant, but as we mentioned after Proposition 3.1, the sample error ES term gets divided by L 2 for the GP cumulant, as expected.\nThe recovery error bound in [2] is based on the bound (33), and thus by showing that the error ES/L\n2 for the GP cumulant is lower than the ES term for the LDA moment, we expect to also gain a similar gain for the recovery error, as the rest of the argument is the same for both types of moments (see Appendix C.2, C.3 and C.4 in [2] for the completion)."
    }, {
      "heading" : "D Appendix. The LDA moments",
      "text" : "D.1 Our notation\nThe LDA moments were derived in [1]. Note that the full version of the paper with proofs appeared in [2] and a later version of the paper also appeared in [32]. In this section, we recall the form of the LDA moments using our notation. This section does not contain any novel results and is included for the reader’s convenience. We also refer to this section when deriving the practical expressions for computation of the sample estimates of the LDA moments in Appendix E.3.\nFor deriving the LDA moments, a document is assumed to be composed of at least three tokens: L ≥ 3. As the LDA generative model (1) is only defined conditional on the length L, this is not too problematic. But given that we present models in this paper which also model L, we mention for clarity that we can suppose that all expectations and probabilities defined below are implicitly conditioning on L ≥ 3.12 The theoretical LDA moments are derived only using the first three words w1, w2 and w3 of a document. But note that since the words w`’s are conditionally i.i.d. given θ (for 1 ≤ ` ≤ L), we have M3 := E(w1 ⊗w2 ⊗w3) = E(w`1 ⊗w`2 ⊗w`3) for any three distinct tokens `1, `2 and `3. The tensor M3 is thus symmetric, and could have been defined using any distinct `1, `2 and `3 that are less than L. To highlight this arbitrary choice and to make the links with the U-statistics estimator presented later, we thus use generic distinct `1, `2 and `3 in the definition of the LDA moments below, instead of `1 = 1, `2 = 2 and `3 = 1 as in [1].\nUsing this notation, then by the law of total expectation and the properties of the Dirichlet distribution, the non-central moments13 of the LDA model (1) take the form [1]:\nM1 = E(w`1) = D c\nc0 , (34)\nM2 = E(w`1w>`2) = c0\nc0 + 1 M1M\n> 1 +\n1\nc0(c0 + 1) Ddiag (c)D>, (35)\nM3 = E(w`1 ⊗ w`2 ⊗ w`3)\n= c0\nc0 + 2 [E(w`1 ⊗ w`2 ⊗M1) + E(w`1 ⊗M1 ⊗ w`3) + E(M1 ⊗ w`2 ⊗ w`3)] ,\n− 2c 3 0\nc0(c0 + 1)(c0 + 2) M1 ⊗M1 ⊗M1 +\n2\nc0(c0 + 1)(c0 + 2) K∑ k=1 ckdk ⊗ dk ⊗ dk. (36)\nwhere ⊗ denotes the tensor product.\nSimilarly to the GP/DICA cumulants (as discussed in Appendix B.3), moving the terms in the non-central moments (34), (35), (36), the following quantities are defined\n(Pairs) = S := M2 − c0\nc0 + 1 M1M\n> 1 , LDA S-moment (37)\n(Triples) = T := M3 − c0\nc0 + 2 [E(w`1 ⊗ w`2 ⊗M1) + E(w`1 ⊗M1 ⊗ w`3) + E(M1 ⊗ w`2 ⊗ w`3)]\n+ 2c20\n(c0 + 1)(c0 + 2) M1 ⊗M1 ⊗M1. LDA T-moment (38)\n12Note that another advantage of the DICA cumulants from Section 3.1 is that they do not require such a somewhat artificial condition: they are well-defined for any document length (even a document of length zero!).\n13Note, the difference in the notation for the LDA moments in papers [1] and [3]. In [1], M1 = E(w`1 ), M2 = E(w`1 ⊗w`2 ), and M3 = E(w`1 ⊗w`2 ⊗w`3 ). However, in [3], M2 is equivalent to S in our notation and to Pairs in the notation of [1]; similarly, M3 is T in our notation or Triples in the notation of [1].\nSlightly abusing terminology, we refer to the entities S and T as the “LDA moments”. They have the following diagonal structure\nS = 1\nc0(c0 + 1) K∑ k=1 ckdkd > k , (39)\nT = 2\nc0(c0 + 1)(c0 + 2) K∑ k=1 ckdk ⊗ dk ⊗ dk. (40)\nNote however that this form of the LDA moments has a slightly different nature than the similar form (12) and (14) of the GP/DICA cumulants. Indeed, the former is the result of properties of the Dirichlet distribution, while the latter is the result of the independence of α’s. However, one can think of the elements of a Dirichlet random vector as being almost independent (as, e.g., a Dirichlet random vector can be obtained from independent gamma variables through dividing each by their sum). Also, this closeness of the structures of the LDA moments and the GP cumulants can be explained by the closeness of the respective models as discussed in Section 2.\nD.2 Asymptotically unbiased finite sample estimators for the LDA moments\nGiven realizations wn`, n = 1, . . . , N , ` = 1, . . . , Ln, of the token random variable w`, we now give the expressions for the finite sample estimates of S (37) and T (38) for the LDA model (and we re-write them as a function of the sample counts xn). 14 We use the notation Ê below to express a U-statistics empirical expectation over the token within a documents, uniformly averaged over the whole corpus. For example, Ê(w`1 ⊗ w`2 ⊗ M̂1) := 1N ∑N n=1 1 Ln(Ln−1) ∑Ln `1=1 ∑Ln `2=1 `2 6=`1 w`1 ⊗ w`2 ⊗ M̂1.\nŜ := M̂2 − c0\nc0 + 1 M̂1M̂\n> 1 , (41)\nT̂ := M̂3 − c0\nc0 + 2\n[ Ê(w`1 ⊗ w`2 ⊗ M̂1) + Ê(w`1 ⊗ M̂1 ⊗ w`3) + Ê(M̂1 ⊗ w`2 ⊗ w`3) ] +\n2c20 (c0 + 1)(c0 + 2) M̂1 ⊗ M̂1 ⊗ M̂1, (42)\nwhere, as suggested in [3], unbiased U-statistics estimates of M1, M2 and M3 are:\nM̂1 := Ê(w`) = 1\nN N∑ n=1 1 Ln Ln∑ `=1 wn` = 1 N N∑ n=1 [δ1]nxn = 1 N Xδ1, (43)\nM̂2 := Ê(w`1w>`2) = 1\nN N∑ n=1\n1\nLn(Ln − 1) Ln∑ `1=1 Ln∑ `2=1 `2 6=`1 wn`1w > n`2\n= 1\nN N∑ n=1 [δ2]n\n( xnx > n − Ln∑ `=1 wn`w > n` )\n= 1\nN N∑ n=1 [δ2]n ( xnx > n − diag(xn) ) = 1\nN\n[ Xdiag(δ2)X > − diag(Xδ2) ] , (44)\n(45)\n14Note that because non-linear functions of M̂1 appear in the expression for Ŝ (41) and T̂ (42), the estimator is biased, i.e. E(Ŝ) 6= S. The bias is small though: ‖E(Ŝ)− S‖ = O(1/N) and the estimator is asymptotically unbiased. This is in contrast with the estimator for the GP/DICA moments which is easily made unbiased.\nM̂3 := Ê(w`1 ⊗ w`2 ⊗ w`3) = 1\nN N∑ n=1 δ3n Ln∑ `1=1 Ln∑ `2=1 `2 6=`1 Ln∑ `3=1 `3 6=`2 `3 6=`1 wn`1 ⊗ wn`2 ⊗ wn`3\n= 1\nN N∑ n=1 [δ3]n\n( xn ⊗ xn ⊗ xn −\nLn∑ `=1 wn` ⊗ wn` ⊗ wn`\n− Ln∑ `1=1 Ln∑ `2=1 `2 6=`1 (wn`1 ⊗ wn`1 ⊗ wn`2 + wn`1 ⊗ wn`2 ⊗ wn`1 + wn`1 ⊗ wn`2 ⊗ wn`2)  = 1\nN N∑ n=1 [δ3]n\n( xn ⊗ xn ⊗ xn + 2\nM∑ m=1 xnm(em ⊗ em ⊗ em)\n− M∑\nm1=1 M∑ m2=1 xnm1xnm2(em1 ⊗ em1 ⊗ em2 + em1 ⊗ em2 ⊗ em1 + em1 ⊗ em2 ⊗ em2)\n) . (46)\nHere, the vectors δ1, δ2 and δ3 ∈ RN are defined as [δ1]n := L−1n ; [δ2]n := (Ln(Ln − 1))−1, i.e. [δ2]n = [( Ln 2 ) 2! ]−1 is the number of times to choose an ordered pair of tokens out of Ln tokens;\n[δ3]n := (Ln(Ln−1)(Ln−2))−1, i.e. [δ3]n = [( Ln 3 ) 3! ]−1 is the number of times to choose an ordered triple of tokens out of Ln tokens. Note that the vectors δ1, δ2, and δ3 have nothing to do with the Kronecker delta δ.\nFor a vector a ∈ RN , we sometimes use notation [a]n to denote its n-th element. Similarly, for a matrix A ∈ RM×N we use notation [A]mn to denote its (m,n)-th element.\nThere is a slight abuse of notation in the expressions above as w` is sometimes treated as a random variable (i.e. in Ê(w`), Ê(w`1w>`2), etc.) and sometimes as its realization. However, the difference is clear from the context."
    }, {
      "heading" : "E Appendix. Practical aspects and implementation details",
      "text" : "E.1 Whitening of S and dimensionality reduction\nThe algorithms from Section 4 require the computation of a whitening matrix W of S. Due to the similar diagonal structure ((39) and (12)) of the matrix S for both the LDA moments (37) and the GP/DICA cumulants (11), the computation of a whitening matrix is exactly the same in both cases.\nBy a whitening matrix, we mean a matrix W ∈ RK×M (in practice, M K) that does not only whiten S ∈ RM×M , but also reduces its dimensionality such that15 WSW> = IK .\nLet S = UΣU> be an orthogonal eigendecomposition of the symmetric matrix S. Let Σ1:K denotes the diagonal matrix that contains the largest K eigenvalues16 of S on its diagonal and let U1:K be a matrix with the respective eigenvalues in its columns. Then, a whitening matrix is\nW = Σ †1/2 1:K U > 1:K , (47)\nwhere Σ †1/2 1:K is a diagonal matrix constructed from Σ1:K by taking the inverse and the square root of its non-zero diagonal values († stands for the pseudo-inverse).\nIn practice, when only a finite sample estimator Ŝ of S is available, the following finite sample estimator Ŵ of W can be introduced\nŴ := Σ̂ †1/2 1:K Û > 1:K , (48)\nwhere Ŝ = Û Σ̂Û>. 15Note that such a whitening matrix W ∈ RK×M is not uniquely defined as left multiplication by any orthogonal matrix V ∈ RK×K does not change anything. Indeed, let W̃ = VW , then W̃SW̃> = VWSW>V > = IK . 16We mean the largest non-negative eigenvalues. In theory, S have to be PSD. In practice, when we deal with finite number of samples, respective estimate of S can have negative eigenvalues. However, for K sufficiently small, S should have enough positive eigenvalues. Moreover, it is standard practice to use eigenvalues of S for estimation of a good value of K, e.g., by thresholding all negative and close to zero eigenvalues.\nE.2 Computation of the finite sample estimators of the GP/DICA cumulants\nIn this section, we present efficient formulas for computation of the finite sample estimate (see Appendix B.4 for the definition of T̂ ) of Ŵ T̂ (v)Ŵ> for the GP/DICA models. The construction\nof the finite sample estimator Ŵ is discussed in Appendix E.1, while the computation of Ŝ (27) is straightforward.\nBy plugging the definition of the tensor T̂ (28) in the formula (17) for the projection of a tensor onto a vector, we obtain for a given v ∈ RM :[\nT̂ (v) ] m1m2 = ∑ m3 ĉum(xm1 , xm2 , xm3)vm3 + 2 ∑ m3 δ(m1,m2,m3)Ê(xm3)vm3\n− ∑ m3 δ(m2,m3)ĉov(xm1 , xm2)vm3\n− ∑ m3 δ(m1,m3)ĉov(xm1 , xm2)vm3\n− ∑ m3 δ(m1,m2)ĉov(xm1 , xm3)vm3\n= ∑ m3 ĉum(xm1 , xm2 , xm3)vm3 + 2δ(m1,m2)Ê(xm1)vm1\n− ĉov(xm1 , xm2)vm2 − ĉov(xm1 , xm2)vm1 − δ(m1,m2) ∑ m3 ĉov(xm1 , xm3)vm3 .\nThis gives the following for the expression Ŵ T̂ (v)Ŵ>:[ Ŵ T̂ (v)Ŵ> ] k1k2 = Ŵk1 >T̂ (v)Ŵk2\n= ∑\nm1,m2,m3\nĉum(xm1 , xm2 , xm3)vm3Ŵk1m1Ŵk2m2\n+ 2 ∑ m1,m2 δ(m1,m2)Ê(xm1)vm1Ŵk1m1Ŵk2m2\n− ∑ m1,m2 ĉov(xm1 , xm2)vm2Ŵk1m1Ŵk2m2\n− ∑ m1,m2 ĉov(xm1 , xm2)vm1Ŵk1m1Ŵk2m2\n− ∑ m1,m3 ĉov(xm1 , xm3)vm3Ŵk1m1Ŵk2m1 .\nwhere Ŵk denotes the k-th row of Ŵ as a column vector. By further plugging in the expressions (29) for the unbiased finite sample estimates of ĉov and ĉum, we further get[\nŴ T̂ (v)Ŵ> ] k1k2 = N (N − 1)(N − 2) ∑ n 〈 Ŵk1 , xn − Ê(x) 〉〈 Ŵk2 , xn − Ê(x) 〉〈 v, xn − Ê(x) 〉 + 2\n∑ m Ê(xm)vmŴk1mŴk2m\n− 1 N − 1 ∑ n 〈 Ŵk1 , xn − Ê(x) 〉〈 v ◦ Ŵk2 , xn − Ê(x) 〉 − 1 N − 1 ∑ n 〈 v ◦ Ŵk1 , xn − Ê(x) 〉〈 Ŵk2 , xn − Ê(x)\n〉 − 1 N − 1 ∑ n 〈 Ŵk1 ◦ Ŵk2 , xn − Ê(x) 〉〈 v, xn − Ê(x) 〉 ,\nwhere ◦ denotes the elementwise Hadamard product. Introducing the counts matrix X ∈ RM×N where each element Xmn is the count of the m-th word in the n-th document (note, the matrix X\ncontain the vector xn in the n-th column), we further simplify the above expression\nŴ T̂ (v)Ŵ> = N\n(N − 1)(N − 2) (ŴX)diag[X>v](ŴX)>\n+ N\n(N − 1)(N − 2)\n〈 v, Ê(x) 〉 [ 2N(Ŵ Ê(x))(Ŵ Ê(x))> − (ŴX)(ŴX)> ] − N\n(N − 1)(N − 2)\n[ ŴX(X>v)(Ŵ Ê(x))> + Ŵ Ê(x)(ŴX(X>v))> ] + 2Ŵdiag[v ◦ Ê(x)]Ŵ>\n− 1 N − 1\n[ (ŴX)(Ŵdiag(v)X)> + (Ŵdiag(v)X)(ŴX)> + Ŵdiag[X(X>v)]Ŵ> ] + N\nN − 1\n[ (Ŵ Ê(x))(Ŵdiag[v]Ê(x))> + (Ŵdiag[v]Ê(x))(Ŵ Ê(x))> ] + N\nN − 1\n〈 v, Ê(x) 〉 Ŵdiag[Ê(x)]Ŵ>.\n(49)\nFrom expression (49), we can see that the most computationally expensive part of computing Ŵ T̂ (v)Ŵ> is the computation of the product of the whitening matrix Ŵ ∈ RK×M and counts matrix X ∈ RM×N . As the latter is a sparse matrix, the complexity of this operation is approximately O(RmaxNK), where Rmax is the largest number of unique words (non-zero counts) in a document. Moreover, if (49) has to be computed multiple times for different vectors {v1, . . . , vP }, many operations, e.g. ŴX, (ŴX)(ŴX)>, (Ŵ Ê(x))(Ŵ Ê(x))>, do not have to be recomputed P times, which makes the overall computation time significantly faster.\nA more compact way to write down expression (49) is as follows\nŴ T̂ (v)Ŵ> = N\n(N − 1)(N − 2)\n[ T1 + 〈v, Ê(x)〉 (T2 − T3)− (T4 + T>4 ) ] + 1\nN − 1\n[ T5 + T > 5 − T6 − T>6 + Ŵdiag(a)Ŵ> ] ,\n(50)\nwhere\nT1 = (ŴX)diag[X >v](ŴX)>, T2 = 2N(Ŵ Ê(x))(Ŵ Ê(x))>, T3 = (ŴX)(ŴX) >, T4 = ŴX(X >v)(Ŵ Ê(x))>, T5 = (ŴX)(Ŵdiag(v)X) >, T6 = (Ŵdiag(v)Ê(x))(Ŵ Ê(x))>,\na = 2(N − 1)[v ◦ Ê(x)] + 〈v, Ê(x)〉Ê(x)−X(X>v).\nE.3 Computation of the finite sample estimators of the LDA moments\nIn this section, we present efficient formulas for computation of the finite sample estimate (see Appendix D.2 for the definition of T̂ ) of Ŵ T̂ (v)Ŵ> for the LDA model. Note that the construction\nof the sample estimator Ŵ of a whitening matrix W is discussed in Appendix E.1). The computation\nof Ŝ (41) is straightforward. This approach to efficient implementation was discussed in [3], however, to the best of our knowledge, the final expressions were not explicitly stated before. All derivations are straightforward, but quite tedious.\nBy analogy with the GP/DICA case, a projection (17) of the tensor T̂ ∈ RM×M×M (42) onto some vector v ∈ RM in the LDA is[\nT̂ (v) ] m1m2 = M∑ m3=1 [ M̂3 ] m1m2m3 vm3 + 2c20 (c0 + 1)(c0 + 2) ∑ m3 [M̂1]m1 [M̂1]m2 [M̂1]m3vm3\n− c0 c0 + 2 M∑ m3=1 [ Ê(w`1 ⊗ w`2 ⊗ M̂1) + Ê(w`1 ⊗ M̂1 ⊗ w`3) + Ê(M̂1 ⊗ w`2 ⊗ w`3) ] m1m2m3 vm3 .\nPlugging in the expression (46) for an unbiased sample estimate M̂3 of M3, we get [ T̂ (v) ] m1m2 = 1 N N∑ n=1 [δ3]n ( xnm1xnm2 〈xn, v〉+ 2 ∑ m3 δ(m1,m2,m3)xnm3vm3 )\n− 1 N N∑ n=1 [δ3]n M∑ m3=1  M∑ i,j=1 xnixnj (ei ⊗ ei ⊗ ej + ei ⊗ ej ⊗ ei + ei ⊗ ej ⊗ ej)  m1m2m3 vm3 + 2c20\n(c0 + 1)(c0 + 2) [M̂1]m1 [M̂1]m2\n〈 M̂1, v 〉 − c0 c0 + 2 ( [M̂2]m1m2 〈 M̂1, v 〉 + M∑ m3=1 ( [M̂2]m1m3 [M̂1]m2vm3 + [M̂2]m2m3 [M̂1]m1vm3 )) ,\nwhere e1, e2, . . . , eM denote the canonical vectors of RM (i.e. the columns of the identity matrix IM ). Further, this gives the following for the expression Ŵ T̂ (v)Ŵ >: [ Ŵ T̂ (v)Ŵ>\n] k1k2 = 1 N N∑ n=1 [δ3]n ( 〈xn, v〉 〈 xn, Ŵk1 〉〈 xn, Ŵk2 〉 + 2 M∑ m=1 xnmvmŴk1mŴk2m )\n− 1 N N∑ n=1 δ3n M∑ i,j=1 xnixnj ( Ŵk1iŴk2ivj + Ŵk1iŴk2jvi + Ŵk1iŴk2jvj ) − c0 c0 + 2 (〈 Ŵk1 , [ M̂2 ] Ŵk2 〉 + 〈 Ŵk1 , M̂2v 〉〈 M̂1Ŵk2 〉 + 〈 Ŵk2 , M̂2v 〉〈 M̂1, Ŵk1\n〉) +\n2c20 (c0 + 1)(c0 + 2)\n〈 M̂1, Ŵk1 〉〈 M̂1, Ŵk2 〉〈 M̂1, v 〉 ,\nwhere Ŵk denotes the k-th row of Ŵ as a column-vector. This further simplifies to\nŴ T̂ (v)Ŵ> = 1\nN (ŴX)diag\n[ (X>v) ◦ δ3 ] (ŴX)>\n+ 1\nN Ŵdiag\n[ 2[(Xδ3) ◦ v]−X[(X>v) ◦ δ3] ] Ŵ>\n− 1 N (Ŵdiag[v]X)diag[δ3](ŴX) > − 1 N (ŴX)diag[δ3](Ŵdiag[v]X) > − c0 c0 + 2 [〈 M̂1, v 〉 (ŴM̂2Ŵ >) + (Ŵ (M̂2v))(ŴM̂1) > + (ŴM̂1)(Ŵ (M̂2v)) > ] + 2c20\n(c0 + 1)(c0 + 2)\n〈 M̂1, v 〉 (ŴM̂1)(ŴM̂1) >.\n(51)\nA more compact representation gives:\nŴ T̂ (v)Ŵ> = 1\nN\n[ T1 + T2 − T3 − T>3 ] − c0 c0 + 2 [ 〈M̂1, v〉(ŴM̂2Ŵ>) + T4 + T>4 ] +\n2c20 (c0 + 1)(c0 + 2)\n〈M̂1, v〉(ŴM̂1)(ŴM̂1)>, (52)\nwhere\nT1 = (ŴX)diag [ (X>v) ◦ δ3 ] (ŴX)>,\nT2 = Ŵdiag [ 2[(Xδ3) ◦ v]−X[(X>v) ◦ δ3] ] Ŵ>, T3 = [Ŵdiag(v)X]diag(δ3)(ŴX) >, T4 = [Ŵ (M̂2v)](ŴM̂1) >.\nThe comments regarding the computational time of (50) also apply here. However, in practice we noticed that the computation of (50) is slightly faster for large datasets than the computation of (52) (although the code for both was equally well optimized). This means that the constant in O(RNK) for the LDA moments is, probably, slightly larger than for the GP/DICA cumulants.\nE.4 Estimation of the model parameters for GP/DICA model\nGiven the output A and ap of Algorithm 1, the topic matrix is estimated as\nd̂k := max(0, [A †]:k)/‖max(0, [A†]:k)‖1.\nThe truncation is necessary to enforce non-negativity and the normalization corresponds to the transformation from D̃ to D, where in the latter each topic is in the simplex.\nTo estimate the parameters for the prior distribution over topic intensities αk for the DICA model (5), we use the diagonalized form of the projected tensor from (18) and relate it to the output diagonal elements ap for the p-th projection:\n[ap]k = t̃k〈zk, up〉 = tk\ns 3/2 k\n〈zk, up〉 = cum(αk, αk, αk) [var(αk)]3/2 〈 dk,W >up 〉 . (53)\nThis formula is valid for any prior on αk in the DICA model. For the GP model (4) where αk ∼ Gamma(ck, b), we have that var(αk) = ck b2 and cum(αk, αk, αk) = 2ck b3 , and thus t̃k = 2√ ck , which enables us to estimate ck. Plugging this value of t̃k in (53), and solving for ck gives the following expression:\nck = 4 〈 dk,W >up 〉2\n[ap]2k .\nBy replacing the quantities on the RHS with their estimated ones, we get one estimate for ck per projection. We use as our final estimate the average estimate over the projections:\nĉk := 1\nP P∑ p=1\n4 〈 d̂k, Ŵ >up 〉2 [ap]2k . (54)\nReusing the properties of the length of documents for the GP model as described in Appendix A.2, we finally use the following estimates for rate parameter b of the gamma distribution:\nb̂ := ĉ0\nL̂ , (55)\nwhere ĉ0 := ∑ k ĉk and L̂ is the average document length in the corpus."
    }, {
      "heading" : "F Appendix. Supplementary experiments",
      "text" : "F.1 The LDA moments vs parameter c0\nThe LDA moments depend on the parameter c0, which is not trivial to set in the unsupervised setting of topic modeling, especially taking into account the complexity of evaluation for topic models [31]. In Figure 4, the joint diagonalization algorithm with the LDA moment is compared for different values of c0 provided to the algorithm. The data is generated similarly to Figure 2. The experiment indicates that the LDA moments are somewhat sensitive to the choice of c0. For example, the recovery `1-error doubles when moving from the correct choice c0 = 1 to the plausible alternative c0 = 0.1 for K = 10 on the LDAfix1(200) dataset (JD-LDA(10) line on the right of Figure 4). When the error is already high (for both datasets when K = 50 for example), then the choice of c0 seems to matter less: the performance is uniformly bad.\nF.2 Comparison of the `1- and `2-errors\nThe sample complexity results [1] for the spectral algorithm for the LDA moments allow straightforward extension to the GP/DICA cumulants, if the results from Proposition 3.1 are taken into account. The analysis is, however, in terms of the `2-norm. Therefore, in Figure 5, we provide experimental comparison of the `1- and `2-errors to verify that they are indeed behaving similarly.\nF.3 One more real data experiment\nIn Figure 6 (right), we demonstrate one more experiment with real data as described in Section 5.3. Although the variational inference outperforms the joint diagonalization algorithm, the variational inference with warm JD-restarts is the best. Note that the fact that the joint diagonalization algorithm for the LDA moments is worse than the spectral algorithm indicates that the diagonal structure (39) and (40) might not be present in the sample estimates (41) and (42).\nSupplementary References\n[32] A. Anandkumar, D.P. Foster, D. Hsu, S.M. Kakade, and Y.-K. Liu. A spectral algorithm for latent Dirichlet allocation. Algorithmica, 72(1):193–214, 2015.\n[33] B.A. Frigyik, A. Kapila, and M.R. Gupta. Introduction to the Dirichlet distribution and related processes. Technical report, University of Washington, 2010.\n[34] T.G. Kolda and B.W. Bader. Tensor decompositions and applications. SIAM Rev., 51(3):455– 500, 2009."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2017,
    "abstractText" : "We consider moment matching techniques for estimation in Latent Dirichlet Allocation (LDA). By drawing explicit links between LDA and discrete versions of independent component analysis (ICA), we first derive a new set of cumulant-based tensors, with an improved sample complexity. Moreover, we reuse standard ICA techniques such as joint diagonalization of tensors to improve over existing methods based on the tensor power method. In an extensive set of experiments on both synthetic and real datasets, we show that our new combination of tensors and orthogonal joint diagonalization techniques outperforms existing moment matching methods.",
    "creator" : "LaTeX with hyperref package"
  }
}