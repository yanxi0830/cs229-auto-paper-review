{
  "name" : "1509.09030.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Distributed Weighted Parameter Averaging for SVM Training on Big Data",
    "authors" : [ "Ayan Das" ],
    "emails" : [ "ayand@cse.iitkgp.ernet.in", "sourangshu@cse.iitkgp.ernet.in" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n50 9.\n09 03\n0v 1\n[ cs\n.L G\n] 3\n0 Se\nN )\nstability bound on final hypothesis given by WPA, using novel proof techniques. Experimental results on a variety of toy and real world datasets show that our approach is significantly more accurate than parameter averaging for high number of partitions. It is also seen the proposed method enjoys much faster convergence compared to ADMM in features space."
    }, {
      "heading" : "1 Introduction",
      "text" : "With the growing popularity of Big Data platforms [1] for various machine learning and data analytics applications [9, 12], distributed training of Support Vector Machines (SVMs)[4] on Big Data platforms have become increasingly important. Big data platforms such as Hadoop [1] provide simple programming abstraction (Map Reduce), scalability and fault tolerance at the cost of distributed iterative computation being slow and expensive [9]. Thus, there is a need for SVM training algorithms which are efficient both in terms of the number of iterations and volume of data communicated per iteration.\nThe problem of distributed training of support vector machines (SVM) [6] in particular, and distributed regularized loss minimization (RLM) in general [2, 9], has received a lot of attention in the recent times. Here, the training data is partitioned into M -nodes, each having L datapoints. Parameter averaging (PA), also called “mixture weights” [9] or “parallelized SGD” [12], suggests solving an appropriate RLM problem on data in each node, and use average of the resultant parameters. Hence, a single distributed iteration is needed. However, as shown in this paper, the accuracy of this approach reduces with increase in number of partitions. Another interesting result described in [9] is a bound of O( 1\nML ) on the stability of the final hypothesis, which results in a bound on deviation\nfrom optimizer of generalization error.\nAnother popular approach for distributed RLM is alternating direction method of multipliers (ADMM) [2, 6]. This approach tries to achieve consensus between parameters at different nodes while optimizing the objective function. It achieves optimal performance irrespective of the number of partitions. However, this approach needs many distributed iterations. Also, number of parameters to be communicated among machines per iteration is same as the dimension of the problem. This can be ∼ millions for some practical datasets, e.g. webspam [3].\nIn this paper, we propose a hybrid approach which uses weighted parameter averaging and proposes to learn the weights in a distributed manner from the data. We propose a novel SVM-like formulation for learning the weights of the weighted parameter averaging (WPA) model. The dual of WPA turns out to be same as SVM dual, with data projected in a lower dimensional space. We propose an ADMM [2] based distributed algorithm (DWPA), and an accelerated version (DWPAacc), for learning the weights.\nAnother contribution is a O( 1 ML ) bound on the stability of final hypothesis leading to a bound on deviation from optimizer of generalization error. This requires a novel proof technique as both the original parameters and the weights are solutions to optimization problems (section 2.4). Empirically, we show that that accuracy of parameter averaging degrades with increase in the number of partitions. Experimental results on real world datasets show that DWPA and DWPAacc achieve better accuracies than PA as the number of partitions increase, while requiring lower number of iterations and time per iteration compared to ADMM."
    }, {
      "heading" : "2 Distributed Weighted Parameter Averaging (DWPA)",
      "text" : "In this section, we describe the distributed SVM training problem, the proposed solution approach and a distributed algorithm. We describe a bound on stability of the final hypothesis in section 2.4. Note that, we focus on the distributed SVM problem for simplicity. The techniques described here are applicable to other distributed regularized risk minimization problems."
    }, {
      "heading" : "2.1 Background",
      "text" : "Given a training dataset S = {(xi, yi) : i = 1, · · · ,ML, yi ∈ {−1,+1},xi ∈ Rd}, the linear SVM problem [4] is given by:\nmin w\nλ‖w‖22 + 1\nm\nML ∑\ni=1\nloss(w; (xi, yi)), (1)\nwhere, λ is the regularization parameter and the hinge loss is defined as loss(w; (xi, yi)) = max(0, 1 − yiw Txi). The separating hyperplane is given by the equation wTx + b = 0. Here we include the bias b within w by making the following transformation, w = [ wT , b ]T and\nxi = [ xTi , 1 ]T .\nThe above SVM problem can be posed to be solved in a distributed manner, which is interesting when the volume of training data is too large to be effectively stored and processed on a single computer. Let the dataset be which is partitioned into M partitions (Sm, m = 1, . . . ,M ), each having L datapoints. Hence, S = S1∪, . . . ,∪SM , where Sm = {(xml, yml)}, l = 1, . . . , L. Under this setting, the SVM problem (Eqn 1), can be stated as:\nmin wm,z\nM ∑\nm=1\nL ∑\nl=1\nloss(wm; (xml, yml)) + r(z) (2)\ns.t.wm − z = 0,m = 1, · · · ,M, l = 1, . . . , L where loss() is as described above and r(z) = λ‖z‖2.This problem is solved in [2] using ADMM (see section 2.3).\nAnother method for solving distributed RLM problems, called parameter averaging (PA), was proposed by Mann et. al. [9], in the context of conditional maximum entropy model. Let ŵm = argminw 1\nL ∑L l=1 loss(w;xml, yml) + λ‖w‖ 2 , m = 1, . . . ,M be the standard SVM solution obtained by training on partition Sm. Mann et al. [9] suggest the approximate final parameter to be the arithmetic mean of the parameters learnt on individual partitions, (ŵm). Hence:\nwPA = 1\nM\nM ∑\nm=1\nŵm (3)\nZinekevich et al. [12] have also suggested a similar approach where ŵm’s are learnt using SGD. We tried out this approach for SVM. Note that assumptions regarding differentiability of loss function made in [2] can be relaxed in case of convex loss function with an appropriate definition of bregmann divergence using sub-gradients (see [11], section 2.4). The results (reported in section 3) show that the method fails to perform well as the number of partitions increase. This drawback of the above\nmentioned approach motivated us to propose the weighted parameter averaging method described in the next section."
    }, {
      "heading" : "2.2 Weighted parameter averaging (WPA)",
      "text" : "The parameter averaging method uses uniform weight of 1 M for each of the M components. One can conceive a more general setting where the final hypothesis is a weighted sum of the parameters obtained on each partition: w =\n∑M m=1 βmŵm, where ŵm are as defined above and βm ∈ R,m =\n1, . . . ,M . Thus, β = [β1, · · · , βM ]T = [ 1M , . . . , 1 M ] achieves the PA setting. Note that Mann et al. [9] proposed β to be in a simplex. However, no scheme was suggested for learning an appropriate β.\nOur aim is to find the optimal set of weights β which attains the lowest regularized loss. Let Ŵ = [ŵ1, · · · , ŵM ], so that w = Ŵβ. Substituting w in eqn. 1, the regularized loss minimization problem becomes:\nmin β,ξ\nλ‖Ŵβ‖2 + 1\nML\nM ∑\nm=1\nl ∑\ni=1\nξmi (4)\nsubject to: ymi(βTŴTxmi) ≥ 1− ξmi, ∀i,m ξmi ≥ 0, ∀m = 1, . . . ,M, i = 1, . . . , l\nNote that, here the optimization is only w.r.t. β and ξm,i. Ŵ is a pre-computed parameter. Next we can derive the dual formulation by writing the lagrangian and eliminating the primal variables. The Lagrangian is given by:\nL(β, ξmi, αmi, µmi) = λ‖Ŵβ‖ 2 +\n1\nML\n∑\nm,i\nξmi + ∑\nm,i\nαmi(ymi(β TWTxmi)− 1 + ξmi)−\n∑\nm,i\nµmiξmi\nDifferentiating the Lagrangian w.r.t. β and equating to zero, we get:\nβ = 1\n2λ (ŴTŴ)−1(\n∑\nm,i\nαmiymiŴ Txmi) (5)\nDifferentiating L w.r.t. ξmi and equating to zero, ∀i ∈ 1, · · · , L and ∀m ∈ 1, · · · ,M , implies 1 ML − αmi − µmi = 0. Since µmi ≥ 0 and αmi ≥ 0, 0 ≤ αmi ≤ 1ML . Substituting the value of β in the Lagrangian L, we get the dual problem:\nmin α\nL(α) = ∑\nm,i\nαmi − 1\n4λ\n∑\nm,i\n∑\nm′,j\nαmiαm′jymiym′j(x T miŴ(Ŵ TŴ)−1ŴTxm′j) (6)\nsubject to: 0 ≤ αmi ≤ 1\nML ∀i ∈ 1, · · · , L,m ∈ 1, · · · ,M\nNote that this is equivalent to solving SVM using the projected datapoint (Hxmi, ymi), instead of (xmi, ymi), where H = Ŵ(ŴTŴ)−1ŴT , which is the projection on column space of Ŵ. Hence the performance of the method is expected to depend on size and orientation of the column space of Ŵ. Next, we describe distributed algorithms for learning β."
    }, {
      "heading" : "2.3 Distributed algorithms for WPA using ADMM",
      "text" : "In the distributed setting, we assume the presence of a central (master) computer which stores and updates the final hypothesis. The partitions of training set S1, . . . ,SM are distributed to M (slave) computers, where the local optimizations are performed. The master needs to communicate to slaves and vice versa. However, no communication between slaves is necessary. Thus, the underlying networks has a star topology, which is also easily implemented using Big data platforms like Hadoop [1].\nLet γm, for m = 1, · · · ,M be the weight values at the M different nodes and β be the value of the weights at the central server. The formulation given in eqn. 4 can be written as:\nmin γm,β\n1\nML\nM ∑\nm=1\nL ∑\nl=1\nloss(Ŵγm;xml, yml) + r(β) (7)\ns.t. γm − β = 0, m = 1, · · · ,M, where r(β) = λ‖Ŵβ‖2. The augmented lagrangian for the above problem is: L(γm,β,λ) = 1 ML ∑M m=1 ∑L l=1 loss(Ŵγm;xml, yml)+r(β)+ ∑M i=1 ρ 2 ‖γm−β‖ 2+ ∑M i=1ψ T m(γm−β), where\nψm is the lagrange multiplier vector corresponding to mth constraint. Let Am ∈ RL×d = −diag(ym)XmŴ . Using results from [2], the ADMM updates for solving the above problem can derived as:\nγk+1m := argmin γ (loss(Aiγ) + (ρ/2)‖γml − β k + ukm‖ 2 2) (8)\nβk+1 := argmin β (r(β) + (Mρ/2)‖β − γk+1 − uk‖22) (9)\nuk+1m = u k m + γ k+1 m − β k+1. (10)\nwhere, um = 1ρψm, γ = 1 M ∑M m=1 γm and u = 1 M ∑M m=1 um and the superscript k denotes the iteration counts. Algorithm 1 describes the full procedure.\nAlgorithm 1: Distributed Weighted Parameter Averaging (DWPA) input : Partitioned datasets Sm, SVM parameter learnt for each partition ŵm, ∀m = 1, · · · ,M output: Optimal weight vector β\n1 Initialize β = 1,γm = 1,um = 1, ∀m ∈ {1, · · · ,M}; 2 while k < T do /* Executed on slaves */ 3 for m ← 1 to M do 4 γkm := argminγm(1 T (Amγm + 1)+ + ρ/2‖γ k−1 m − β k−1 − uk−1m ‖ 2 2) 5 end\n/* Executed on master */\n6 βk := 1 2λ (ŴT Ŵ +MρIm) −1Mρ(γk + uk−1) 7 for m ← 1 to M do 8 ukm = u k−1 m + γ k m − β k\n9 end 10 end\nA heuristic called overrelaxation [2] is ofter used for improving the convergence rate of ADMM. For overrelaxation, the updates for βk (line 6 and ukm (line 8) are obtained by replacing γ\nk with γ̂km = α × γ k m + (1 − α) × β\nk−1, in algorithm 1. We implemented this heuristic for both DSVM and DWPA. We call them accelarated DSVM (DSVMacc) and accelarated DWPA (DWPAacc)."
    }, {
      "heading" : "2.4 Bound on stability of WPA",
      "text" : "In this section, we derive a bound of O( 1 ML ) on stability of the final hypothesis returned by WPA algorithm described in eqn. 4. A similar bound was derived by Mann et al. [9] on the stability of PA. This leads to a O( 1√\nML ) bound on deviation from optimizer of generalization error (see [9],\ntheorem 2).\nLet S = {S1, · · · , SM} and S′ = {S′1, · · · , S ′ M} be two datasets with M partitions and L datapoints per partition, differing in only one datapoint. Hence, Sm = {zm1, · · · , zmL} and S′m = {z ′ m1, · · · , z ′ mL}, where zml = (xml, yml) and z ′ ml = (x ′ ml, y ′ ml). Further, S1 = S′1, · · · , SM−1 = S ′ M−1, and SM and S ′ M differs at single point zML and z ′ ML. Also, let ‖x‖ ≤ R, ∀x. Moreover, let Ŵ = [ŵS1 , · · · , ŵSM ] and Ŵ ′ = [ŵS′1 , · · · , ŵS′M ] where, ŵSi = argminw λ‖w‖ 2 + 1\nL\n∑\ni∈Si max(0, 1 − yw Tx).We also assume ‖Ŵ‖F = ‖Ŵ′‖F = 1.\nHence, ‖ŵm‖2 = ‖ŵ′m‖ 2 = 1 M , ∀m ∈ {1, · · · ,M}.\nWe also define the following quantities:\nβ = argmin β\nλ‖Ŵβ‖2 + 1\nML\nM∑\ni=1\n∑\nz∈Si\nmax(0, 1− y(Ŵβ)Tx)\nβ ′ = argmin β λ‖Ŵ ′β‖2 +\n1\nML\nM∑\ni=1\n∑\nz′∈S′ i\nmax(0, 1− y′(Ŵβ)Tx′)\nβ̃ = argmin β\nλ‖Ŵ ′β‖2 + 1\nML\nM∑\ni=1\n∑\nz∈Si\nmax(0, 1− y(Ŵ ′β)Tx)\nAlso, let θ = Ŵβ, θ′ = Ŵ ′β′ and θ̃ = Ŵ ′β̃.\nWe are interested in deriving a bound on ‖θ − θ′‖, which decompose as: ‖θ − θ′‖ ≤ ‖θ − θ̃‖ + ‖θ̃ − θ′‖. Intuitively, the first term captures the change from Ŵ to Ŵ ′ and second term captures change in dataset. Lemma 2.2, shows that ‖θ̃−θ′‖ is O( 1\nML ). Showing bound on ‖θ− θ̃‖ requires\nbounds on ‖β − β̃‖ (lemma 2.3) and ‖Ŵ − Ŵ ′‖ (lemma 2.1). The final proof is given in Theorem 2.4.\nLemma 2.1. ‖Ŵ − Ŵ ′‖ = O( 1 ML )\nProof (sketch): Since ŵm = ŵ′m,m = 1, . . . ,M − 1, it suffices to show that ‖ŵM − ŵ ′ M‖ = O( 1 ML ). Since, ŵ and ŵ′ are scaled as ‖ŵm‖2 = ‖ŵ′m‖ 2 = 1 M it suffices to show thatM‖ŵ−ŵ′‖ = O( 1 L ). This result is analogous to theorem 1 of [9]. This can be proved using a special definition of bregmann divergence shown in appendix A.\nLemma 2.2. ‖θ̃ − θ′‖ = O( 1 ML )\nProof (sketch): This can be shown using similar technique as proof in appendix B using ‖ · ‖K , where, K = Ŵ ′ T Ŵ ′ instead of the Euclidean norm.\nLemma 2.3. ‖β − β̃‖ = O( 1 ML )\nProof: Let FW (β) = GW (β) + LW (β) and FW ′ (β̃) = GW ′ (β̃) + LW ′(β̃). Using a similar definition of Bregmann divergence as in appendix B and its positivity:\nBG Ŵ (β̃‖β) +BG ˆ W ′ (β‖β̃) ≤ BF Ŵ (β̃‖β) +BF ˆ W ′ (β‖β̃) (11)\nThe left hand side of the inequality 11, is given by;\nBG Ŵ (β̃‖β) +BG ˆ W ′ (β‖β̃) = λ‖β̃ − β‖T (‖ŴT Ŵ + Ŵ ′\nT Ŵ ′‖)‖β̃ − β‖\n≤ λ‖β − β̃‖2K′ , where, K ′ = ŴT Ŵ + Ŵ ′\nT Ŵ ′\nNow we solve the right hand side of inequality 11, BF\nŴ (β̃‖β) +BF ˆ W ′ (β‖β̃) = F Ŵ (β̃)− F Ŵ (β) + F Ŵ ′ (β) + F Ŵ ′ (β̃)\n=λ[‖Ŵ β̃‖2 − ‖Ŵβ‖2 + ‖Ŵ ′β‖2 − ‖Ŵ ′β̃‖2]+ (12)\n[L Ŵ (β′)− L Ŵ (β) + L Ŵ ′ (β)− L Ŵ ′ (β′)] = R+ L\nFrom 12, we have, L = LŴ (β ′)− LŴ (β) + LŴ ′(β)− LŴ ′(β ′)\n= 1\nML\nM,L∑\nm,l=1\n[max(0, 1− yml(Ŵ β̃) T xml)−max(0, 1− yml(Ŵβ) T xml)+\nmax(0, 1− yml(Ŵ ′β) T xml)−max(0, 1− yml(Ŵ ′β̃) T xml)]\n≤ 1\nML\nM,L∑\nm,l=1\nmax(0, yml((Ŵ ′ − Ŵ )(β − β̃)) T xml) ≤\n1\nML\nM,L∑\nm,l=1\n|yml((Ŵ ′ − Ŵ )(β − β̃)) T xml|\n≤ R\nML ‖(β − β̃))‖\nWhere, first two inequalities use: max(a, 0) −max(b, 0) ≤ max(a − b, 0), and the last step uses lemma 2.1.\nFor the part R of the 12 involving regularizers:\nR = λ[‖Ŵ β̃‖2 − ‖Ŵβ‖2 + ‖Ŵ ′β‖2 − ‖Ŵ ′β̃‖2] = λ(β̃ + β)T (ŴT Ŵ − Ŵ ′ T Ŵ ′)(β̃ − β)\n≤ λ‖β̃ + β‖‖Ŵ‖‖(Ŵ − Ŵ ′)‖‖β̃ − β‖+ ‖β̃ + β‖‖Ŵ ′‖‖(Ŵ − Ŵ ′)‖‖β̃ − β‖\n≤ 4λR\nML ‖β − β̃‖\nwhere for the last step, we use the constant bound ‖β‖ = λR on β obtained from its expression of in 5. Therefore, from the left hand side and right hand side of the inequality 11, we have:\nλ‖β − β̃‖22 ≤ λ\nσmin ‖β − β̃‖2K′ ≤\n4λR ML ‖β − β̃‖+ R ML ‖(β − β̃))‖ (13)\nwhere, σmin is smallest eigenvalue of K ′. This implies;‖β − β̃‖ is O( 1ML ).\nTheorem 2.4. ‖θ − θ′‖ is of the order of O( 1 ML ).\nProof: The steps involved in the proof are as follows; ‖θ − θ′‖ ≤ ‖θ − θ̃‖+ ‖θ̃ − θ′‖ (14)\nFrom lemma 2.2, ‖‖θ − θ̃‖ is O( 1 ML ).\n‖θ̃ − θ′‖ ≤ 1\n2 (‖(Ŵ − Ŵ ′)(β + β̃)‖+ ‖(Ŵ + Ŵ ′)(β − β̃)‖)\n≤ 1\n2 ((‖(Ŵ − Ŵ ′‖)(‖β + β̃‖) + (‖Ŵ + Ŵ ′‖)(‖β − β̃‖)) (15)\nWe have already, shown that, we have a constant bound on ‖β+ β̃‖ and ‖Ŵ + Ŵ ′‖F , since, norms of β, β̃, Ŵ and Ŵ ′ are bounded. Also both ‖β − β̃‖ and ‖(Ŵ − Ŵ ′‖ are O( 1\nML ).\nHence, from 15, we have the required result."
    }, {
      "heading" : "3 Experimental Results",
      "text" : "In this section, we experimentally analyze and compare the methods proposed here, distributed weighted parameter averaging (DWPA) and accelerated DWPA (DWPAacc) described in section 2.3, with parameter averaging (PA) [9], Distributed SVM (DSVM) using ADMM, and accelerated DSVM (DSVMacc) [2]. For our experimentation, we have implemented all the above mentioned algorithms in Matlab [10]. We have used the liblinear library [5] to obtain the SVM parameters corresponding each partition. Optimization problems which arise as subproblems in ADMM has been solved using CVX [7], [8].\nWe used both toy datasets (section 3.1) and real world datasets (described in table 1) for our experiments. Real world datasets were obtained from LIBSVM website [3]. Samples for real world datasets were selected randomly. The datasets were selected to have various ranges of feature count and sparsity. Section 3.1 describes a specially construc"
    }, {
      "heading" : "3.1 Results on toy dataset",
      "text" : "The main purpose of the toy dataset was to visually observe the effect of change in the number of partitions on the final hypothesis for various algorithms. Datapoints are generated from a 2 dimensional mixture of gaussians. In figure 1, the red and blue dots indicate the datapoints from two different classes. The upper red blob contains only 20% of red points. Hence as the number of partitions increase, many partitions will not have any data points from upper blob. For these partitions, the separating hyperplane passes throught the upper red blob. These cause the average hyperplane to pass through upper red blob, thus decreasing the accuracy. This effect is visible in the left plot of figure 1. This effect is mitigated in weighted parameter averaging as the weights learnt for the hyperplanes passing through upper red blob are lesser. This is shown in middle plot of figure 1. Finally, the right plot of figure 1 shows the resultant decrease in accuracy for PA with increase in number of partitions.\nBias of a learning algorithm is E[|w−w∗ |], where w and w∗ are minimizers of regularized loss and generalization error, and the expectation is over all samples of fixed size say N . An criticism against PA is the lack of bound on bias [9]. In table 2, we compare bias of PA, WPA and SVM as a function of N . Data samples were generated from the same toy distribution as above. w∗ was computed by training on a large sample size and ensuring that training set error and test set error are very close. w was computed 100 times by randomly sampling from the distribution. The average of |w − w ∗ | is reported in table 2. We observe that bias of PA is indeed much higher than SVM or WPA."
    }, {
      "heading" : "3.2 Comparison of Accuracies",
      "text" : "In this section, we compare accuracies obtained by various algorithms on real world datasets, with increase in number of paritions. Figure 2 reports test set accuracies for PA, WPA and SVM on three real world datasets with varying size of partitions. It is clear that performance of PA degrades dramatically as the number of parition increases. Thus, the effect demonstrated in section 3.1 is also observed on real world datasets.\nWe also observe that performance of WPA improves with increase in number of paritions. This is due to fact that dimension of space on which xml’s are projected using H (section 2.2) increases, thus reducing the information loss caused by projection. Finally, as expected WPA performs slightly worse than SVM."
    }, {
      "heading" : "3.3 Convergence Analysis and time comparison",
      "text" : "In this section, we compare the convergence properties of DSVM, DSVMacc, DWPA, and DWPAacc. Here we report results on real-sim due to lack of space. Results on other real world datasets are provided in appendix C. Top row of figure 3 shows variation of primal residual (disagreement between parameters on various partitions) with iterations. It is clear that DWPA and DWPAacc\nshow much lesser disagreement compared to DSVM and DSVMacc, thus showing faster convergence. Bottom row fo figure 3 shows variation of test set accuracy with iterations. The same behaviour is apparent here, with testset accuracy of DWPA and DWPAacc converging much faster than DSVM and DSVMacc. One of the reasons is also that DWPA has an obvious good starting point of β = [ 1\nM , . . . , 1 M ] corresponding to PA.\nTable 3 reports the average time taken by DWPA and DSVM for completing one iteration as a function of number of paritions. It is clear that DWPA takes much lesser time due to much smaller number of variables in the local optimization problem (Feature dimensions for DSVM, number of paritions for DWPA). There is slight increase in time per iteration with increase in number of paritions due to increase in number of variables."
    }, {
      "heading" : "4 Conclusion",
      "text" : "We propose a novel approach for training SVM in a distributed manner by learning an optimal set of weights for combining the SVM parameters independently learnt on partitions of the entire dataset. Experimental results show that our method is much more accurate than parameter averaging and is much faster than training SVM in feature space. Moreover, our method reaches an accuracy close to that of SVM trained in feature space in a much shorter time. We propose a novel proof to show that the stability final SVM parameter learnt using DWPA is O( 1\nML ). Also, our method requires much\nless network band-width as compared to DSVM when the number of features for a given dataset is very large as compared to the number of partitions, which is the usual scenerio for Big Data."
    }, {
      "heading" : "Appendix A",
      "text" : "Theorem 4.1. For any two arbitrary training samples of size L differing by one sample point, the stability bound that holds for the parameter vectors returned by support vector machine is:\n‖∆w‖ is O( 1\nML ). (16)\nProof. Suppose we have two training datasets S = (z1, · · · , zL−1, zL) and S′ = (z1, · · · , zL−1, z ′ L), where z = (x, y) ∈ X × Y , such that X ⊂ R\nd and Y = {−1,+1}. The two sets differ at a single data point: zL = (xi, yi) and z′L = (x ′ i, y ′ i). Let BF be the Bregman divergence associated with a convex and non-diffentiable function F defined for all x, y by; BF (x, y) = F (x) − F (y)− < gy, (x− y) >, where g ∈ ∂Fy and ∂Fy is the set of subdifferentials of F at y. Since, the minima is achieved at a point y if 0 ∈ ∂Fy . We define g as follows;\ng =\n{\n0 if 0 ∈ ∂Fy h subject to, h ∈ ∂Fy\n(17)\nLet Ls : x → ∑L i=1 Hzi(x), where, Hzi(x) = max(0, 1 − yw Tx) denote the loss function and G : x → λ‖x‖2 denote the regularizer corresponding to the SVM problem. Clearly, the function, FS = G + LS , is the objective function for SVM. LS is convex and non-differentiable while G is convex and differentiable. Since, Bregman divergence is non-negative (BF ≥ 0),\nBFS = BG +BLS ≥ BG (18)\nBF S′ ≥ BG′ . (19)\nThus, BG(w ′‖w) +BG(w‖w ′) ≤ BFS (w ′‖w) +BFS′ (w‖w ′). (20)\nIf w and w′ are minimizers for of BFS and BFS′ , then, gS(w) = gS′(w ′) = 0 and\nBFS (w ′‖w) + BF S′ (w‖w′) = FS(w ′)− FS(w) + FS′(w) − FS′(w ′)\n= 1\nL [HzL(w\n′)−HzL(w) +Hz′L(w)−Hz′L(w ′)]\n≤ − 1\nL [gzL · (w\n′)(w −w′) + gz′L · (w)(w ′ −w)]\n= − 1\nL [gz′L(w)− gzL(w\n′)] · (w′ −w)\n= − 1\nL [gz′L(w)− gzL(w\n′)] · (∆w) (21)\nFrom definition, BG((w ′)‖w) +BG((w)‖w ′) = λ‖∆w‖2. (22)\nHence, from derivation 21 and equation 22 and Cauchy-Schwarz inequality we have,\nλ‖w‖ ≤ 1\nL ‖gz′L(w)− gzL(w\n′)‖ ≤ 1\nL [‖gz′L(w)‖ + ‖gzL(w\n′)‖] (23)\nBy definition, Hzi(w) = max(0, 1− yiw Txi) and gzi(w) ∈ ∂Hzi(w). Therefore, ∂Hzi(w) ≤ ‖yixi‖\n⇒∂Hzi(w) ≤ ‖xi‖\n⇒‖gzi(w)‖ ≤ ‖xi‖.\nIf we assume that the feature vectors are bounded i.e., there exists a positive integer R > 0 such that for all training instances (x, y) ∈ X × Y , ‖x‖ ≤ R, then we may state that,\n‖w‖ ≤ R\nλL (24)\nSince, w is normalized and scaled by 1 M . So, the bound on ‖∆w‖ in our case, is O( 1 ML )."
    }, {
      "heading" : "Appendix B",
      "text" : "Theorem 4.2. ‖θ′ − θ̃‖ is of the order of O( 1 ML ).\nProof: From definitions we have; ‖θ′ − θ̃‖2 = ‖Ŵ ′β′ − Ŵ ′β̃‖2\n≤ ‖β′ − β̃‖2K , where ,K = Ŵ ′ T Ŵ ′ (25)\nSince, we have a lower bound on ‖β′ − β̃‖2 ≤ 1 σmin ‖β′ − β̃‖2K , where σmin is the minimum eigenvalue of K .\nHence, we need to prove an upper bound on ‖β′ − β̃‖.\nFrom the reasoning of theorem 2.1, we have; BG(β ′‖β̃) +BG(β̃‖β ′) ≤ BFS (β ′‖β̃) +BF ′ S (β̃‖β′) (26)\nFrom the left hand side of the equation we have;\nBG(β ′‖β̃) +BG(β̃‖β ′) = (β̃ + β′)T (Ŵ ′ T Ŵ ′)(β′ − β̃) (27)\nFrom the right hand side of the equation, using the similar reasoning as that used for ‖β − β̃‖, we have; BFS (β ′‖β̃) +BF ′ S (β̃‖β′) = LS(β ′)− LS(β̃) + LS′(β̃)− LS′(β)\n≤ 1\nML [max(0, (Ŵ ′β′)T (yz′ m xz′ m − yzmxzm)− (Ŵ ′β̃)T (yz′ m xz′ m − yzmxzm)]\n≤ 1\nML |Ŵ ′(β̃ − β′)(yz′ m xz′ m − yzmxzm)|\n≤ 2R\nML ‖β̃ − β′‖ (28)\nEquating, left hand side and right hand side of the equation, we get; ‖β′− β̃‖ is O( 1 ML ), and hence, from 25, we get, ‖θ′ − θ̃‖ is O( 1 ML ).\nAppendix C"
    } ],
    "references" : [ {
      "title" : "Distributed optimization and statistical learning via the alternating direction method of multipliers",
      "author" : [ "Stephen Boyd", "Neal Parikh", "Eric Chu", "Borja Peleato", "Jonathan Eckstein" ],
      "venue" : "Found. Trends Mach. Learn.,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2011
    }, {
      "title" : "LIBSVM: A library for support vector machines",
      "author" : [ "Chih-Chung Chang", "Chih-Jen Lin" ],
      "venue" : "ACM Transactions on Intelligent Systems and Technology,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2011
    }, {
      "title" : "LIB- LINEAR: A library for large linear classification",
      "author" : [ "Rong-En Fan", "Kai-Wei Chang", "Cho-Jui Hsieh", "Xiang-Rui Wang", "Chih-Jen Lin" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2008
    }, {
      "title" : "Consensus-based distributed support vector machines",
      "author" : [ "Pedro A. Forero", "Alfonso Cano", "Georgios B. Giannakis" ],
      "venue" : "J. Mach. Learn. Res.,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2010
    }, {
      "title" : "Graph implementations for nonsmooth convex programs",
      "author" : [ "Michael Grant", "Stephen Boyd" ],
      "venue" : "Recent Advances in Learning and Control, Lecture Notes in Control and Information Sciences,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2008
    }, {
      "title" : "CVX: Matlab software for disciplined convex programming, version 2.0 beta",
      "author" : [ "Michael Grant", "Stephen Boyd" ],
      "venue" : null,
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2013
    }, {
      "title" : "Efficient large-scale distributed training of conditional maximum entropy models",
      "author" : [ "Gideon Mann", "Ryan McDonald", "Mehryar Mohri", "Nathan Silberman", "Dan Walker" ],
      "venue" : "Advances in Neural Information Processing Systems",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2009
    }, {
      "title" : "Foundations of Machine Learning",
      "author" : [ "Mehryar Mohri", "Afshin Rostamizadeh", "Ameet Talwalkar" ],
      "venue" : null,
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2012
    } ],
    "referenceMentions" : [ {
      "referenceID" : 6,
      "context" : "1 Introduction With the growing popularity of Big Data platforms [1] for various machine learning and data analytics applications [9, 12], distributed training of Support Vector Machines (SVMs)[4] on Big Data platforms have become increasingly important.",
      "startOffset" : 130,
      "endOffset" : 137
    }, {
      "referenceID" : 6,
      "context" : "Big data platforms such as Hadoop [1] provide simple programming abstraction (Map Reduce), scalability and fault tolerance at the cost of distributed iterative computation being slow and expensive [9].",
      "startOffset" : 197,
      "endOffset" : 200
    }, {
      "referenceID" : 3,
      "context" : "The problem of distributed training of support vector machines (SVM) [6] in particular, and distributed regularized loss minimization (RLM) in general [2, 9], has received a lot of attention in the recent times.",
      "startOffset" : 69,
      "endOffset" : 72
    }, {
      "referenceID" : 0,
      "context" : "The problem of distributed training of support vector machines (SVM) [6] in particular, and distributed regularized loss minimization (RLM) in general [2, 9], has received a lot of attention in the recent times.",
      "startOffset" : 151,
      "endOffset" : 157
    }, {
      "referenceID" : 6,
      "context" : "The problem of distributed training of support vector machines (SVM) [6] in particular, and distributed regularized loss minimization (RLM) in general [2, 9], has received a lot of attention in the recent times.",
      "startOffset" : 151,
      "endOffset" : 157
    }, {
      "referenceID" : 6,
      "context" : "Parameter averaging (PA), also called “mixture weights” [9] or “parallelized SGD” [12], suggests solving an appropriate RLM problem on data in each node, and use average of the resultant parameters.",
      "startOffset" : 56,
      "endOffset" : 59
    }, {
      "referenceID" : 6,
      "context" : "Another interesting result described in [9] is a bound of O( 1 ML ) on the stability of the final hypothesis, which results in a bound on deviation from optimizer of generalization error.",
      "startOffset" : 40,
      "endOffset" : 43
    }, {
      "referenceID" : 0,
      "context" : "Another popular approach for distributed RLM is alternating direction method of multipliers (ADMM) [2, 6].",
      "startOffset" : 99,
      "endOffset" : 105
    }, {
      "referenceID" : 3,
      "context" : "Another popular approach for distributed RLM is alternating direction method of multipliers (ADMM) [2, 6].",
      "startOffset" : 99,
      "endOffset" : 105
    }, {
      "referenceID" : 1,
      "context" : "webspam [3].",
      "startOffset" : 8,
      "endOffset" : 11
    }, {
      "referenceID" : 0,
      "context" : "We propose an ADMM [2] based distributed algorithm (DWPA), and an accelerated version (DWPAacc), for learning the weights.",
      "startOffset" : 19,
      "endOffset" : 22
    }, {
      "referenceID" : 0,
      "context" : "This problem is solved in [2] using ADMM (see section 2.",
      "startOffset" : 26,
      "endOffset" : 29
    }, {
      "referenceID" : 6,
      "context" : "[9], in the context of conditional maximum entropy model.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 6,
      "context" : "[9] suggest the approximate final parameter to be the arithmetic mean of the parameters learnt on individual partitions, (ŵm).",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 0,
      "context" : "Note that assumptions regarding differentiability of loss function made in [2] can be relaxed in case of convex loss function with an appropriate definition of bregmann divergence using sub-gradients (see [11], section 2.",
      "startOffset" : 75,
      "endOffset" : 78
    }, {
      "referenceID" : 7,
      "context" : "Note that assumptions regarding differentiability of loss function made in [2] can be relaxed in case of convex loss function with an appropriate definition of bregmann divergence using sub-gradients (see [11], section 2.",
      "startOffset" : 205,
      "endOffset" : 209
    }, {
      "referenceID" : 6,
      "context" : "[9] proposed β to be in a simplex.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 0,
      "context" : "Using results from [2], the ADMM updates for solving the above problem can derived as: γ m := argmin γ (loss(Aiγ) + (ρ/2)‖γml − β k + ukm‖ 2 2) (8) β := argmin β (r(β) + (Mρ/2)‖β − γ − uk‖22) (9) u m = u k m + γ k+1 m − β .",
      "startOffset" : 19,
      "endOffset" : 22
    }, {
      "referenceID" : 0,
      "context" : "A heuristic called overrelaxation [2] is ofter used for improving the convergence rate of ADMM.",
      "startOffset" : 34,
      "endOffset" : 37
    }, {
      "referenceID" : 6,
      "context" : "[9] on the stability of PA.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 6,
      "context" : "This leads to a O( 1 √ ML ) bound on deviation from optimizer of generalization error (see [9], theorem 2).",
      "startOffset" : 91,
      "endOffset" : 94
    }, {
      "referenceID" : 6,
      "context" : "This result is analogous to theorem 1 of [9].",
      "startOffset" : 41,
      "endOffset" : 44
    }, {
      "referenceID" : 6,
      "context" : "3, with parameter averaging (PA) [9], Distributed SVM (DSVM) using ADMM, and accelerated DSVM (DSVMacc) [2].",
      "startOffset" : 33,
      "endOffset" : 36
    }, {
      "referenceID" : 0,
      "context" : "3, with parameter averaging (PA) [9], Distributed SVM (DSVM) using ADMM, and accelerated DSVM (DSVMacc) [2].",
      "startOffset" : 104,
      "endOffset" : 107
    }, {
      "referenceID" : 2,
      "context" : "We have used the liblinear library [5] to obtain the SVM parameters corresponding each partition.",
      "startOffset" : 35,
      "endOffset" : 38
    }, {
      "referenceID" : 4,
      "context" : "Optimization problems which arise as subproblems in ADMM has been solved using CVX [7], [8].",
      "startOffset" : 83,
      "endOffset" : 86
    }, {
      "referenceID" : 5,
      "context" : "Optimization problems which arise as subproblems in ADMM has been solved using CVX [7], [8].",
      "startOffset" : 88,
      "endOffset" : 91
    }, {
      "referenceID" : 1,
      "context" : "Real world datasets were obtained from LIBSVM website [3].",
      "startOffset" : 54,
      "endOffset" : 57
    }, {
      "referenceID" : 6,
      "context" : "An criticism against PA is the lack of bound on bias [9].",
      "startOffset" : 53,
      "endOffset" : 56
    } ],
    "year" : 2014,
    "abstractText" : "Two popular approaches for distributed training of SVMs on big data are parameter averaging and ADMM. Parameter averaging is efficient but suffers from loss of accuracy with increase in number of partitions, while ADMM in the feature space is accurate but suffers from slow convergence. In this paper, we report a hybrid approach called weighted parameter averaging (WPA), which optimizes the regularized hinge loss with respect to weights on parameters. The problem is shown to be same as solving SVM in a projected space. We also demonstrate an O( 1 N ) stability bound on final hypothesis given by WPA, using novel proof techniques. Experimental results on a variety of toy and real world datasets show that our approach is significantly more accurate than parameter averaging for high number of partitions. It is also seen the proposed method enjoys much faster convergence compared to ADMM in features space.",
    "creator" : "gnuplot 4.4 patchlevel 3"
  }
}