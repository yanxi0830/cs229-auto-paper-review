{
  "name" : "1703.06060.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Online Learning for Offloading and Autoscaling in Energy Harvesting Mobile Edge Computing",
    "authors" : [ "Jie Xu", "Lixing Chen" ],
    "emails" : [ "jiexu@miami.edu,", "lx.chen@miami.edu.", "sren@ece.ucr.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n70 3.\n06 06\n0v 1\n[ cs\n.L G\n] 1\nMobile edge computing (a.k.a. fog computing) has recently emerged to enable in-situ processing of delay-sensitive applications at the edge of mobile networks. Providing grid power supply in support of mobile edge computing, however, is costly and even infeasible (in certain rugged or under-developed areas), thus mandating on-site renewable energy as a major or even sole power supply in increasingly many scenarios. Nonetheless, the high intermittency and unpredictability of renewable energy make it very challenging to deliver a high quality of service to users in energy harvesting mobile edge computing systems. In this paper, we address the challenge of incorporating renewables into mobile edge computing and propose an efficient reinforcement learning-based resource management algorithm, which learns on-the-fly the optimal policy of dynamic workload offloading (to the centralized cloud) and edge server provisioning to minimize the long-term system cost (including both service delay and operational cost). Our online learning algorithm uses a decomposition of the (offline) value iteration and (online) reinforcement learning, thus achieving a significant improvement of learning rate and runtime performance when compared to standard reinforcement learning algorithms such as Q-learning. We prove the convergence of the proposed algorithm and analytically show that the learned policy has a simple monotone structure amenable to practical implementation. Our simulation results validate the efficacy of our algorithm, which significantly improves the edge computing performance compared to fixed or myopic optimization schemes and conventional reinforcement learning algorithms.\nJ. Xu and L. Chen are with the Department of Electrical and Computer Engineering, University of Miami. Email:\njiexu@miami.edu, lx.chen@miami.edu.\nS. Ren is with the Department of Electrical and Computer Engineering, University of California, Riverside. Email:\nsren@ece.ucr.edu\n2 Index Terms\nMobile edge computing, energy harvesting, online learning.\nI. INTRODUCTION\nIn the era of mobile computing and Internet of Things, a tremendous amount of data is generated from massively distributed sources, requiring timely processing to extract its maximum value. Further, many emerging applications, such as mobile gaming and augmented reality, are delay sensitive and have resulted in an increasingly high computing demand that frequently exceeds what mobile devices can deliver. Although cloud computing enables convenient access to a centralized pool of configurable computing resources, moving all the distributed data and computing-intensive applications to clouds (which are often physically located in remote megascale data centers) is simply out of the question, as it would not only pose an extremely heavy burden on today’s already-congested backbone networks [1] but also result in (sometimes intolerable) large transmission latencies that degrade the quality of service [2]–[4].\nAs a remedy to the above limitations, mobile edge computing (MEC) [2]–[4] (a.k.a., fog computing [5]) has recently emerged to enable in-situ processing of (some) workloads locally at the network edge without moving them to the cloud. In MEC, network edge devices, such as base stations, access points and routers, are endowed with cloud-like computing and storage capabilities to serve users’ requests as a substitute of clouds, while significantly reducing the transmission latency as they are placed in close proximity to end users and data sources. In this paper, we consider base station as the default edge device and refer to the combination of an edge device and the associated edge servers as an edge system.\nEffective operation of MEC is contingent upon efficient power provisioning for the edge system. However, providing reliable and stable grid power supply in remote areas and hazardous locations can be extremely costly and even infeasible since construction and operation of transmission lines are often prohibitive, and grid-tied servers can violate environmental quality regulations in rural areas that are ecologically sensitive [6]. For instance, in many developing countries, the majority of base stations have to be powered by continuously operating diesel generators because the electric grid is too unreliable [7]. In view of the significant carbon footprint of grid power as well as soaring electricity prices, off-grid renewable energy harvested from ambient vibrations, heat, wind and/or solar radiation is embraced as a major or even\n3\nsole power supply for edge systems in the field, thanks to the recent advancements of energy harvesting techniques [8], [9].\nDespite the clear advantages, the high intermittency and unpredictability of renewable energy creates tremendous new challenges for fully reaping the benefits of MEC. Although batteries are often installed as an energy buffer, the computing capacity of an edge system is still significantly limited at any moment in time. As a result, although processing computation tasks at the edge reduces the transmission latency, a considerable processing time may occur when little power supply is available. This gives rise to an important trade-off between transmission delay and processing delay, which is jointly determined by the edge system’s offloading policy (i.e. how much workload is offloaded to the cloud) and autoscaling policy (i.e. how many servers are dynamically provisioned or activated). The problem is further complicated due to the temporal correlation — provisioning more servers and processing more workloads at the edge system in the current time means that fewer servers can be provisioned and fewer workloads can be processed locally in the future due to the limited and time-varying renewable energy supply. Figure 1 illustrates the considered system architecture.\nIn this paper, we address the challenge of incorporating renewable energy into MEC and propose an efficient reinforcement learning-based resource management algorithm, which learns on-the-fly the optimal policy of dynamic workload offloading (to the centralized cloud) and edge server provisioning to minimize the long-term system cost (including both service delay and operational cost). Our main contributions are summarized as follows:\n• We formulate the joint offloading and edge server provisioning problem as a Markov\n4 decision process (MDP) by taking into account various unique aspects of the considered energy harvesting MEC system. The offloading and edge server provisioning decisions are jointly made according to the information of computation workload, core network congestion state, available battery power and anticipated renewable power arrival. By formulating the MDP, the edge system resource management is carried out in a foresighted way by taking future system dynamics into account, thereby optimizing the long-term system performance. • We develop a novel post-decision state (PDS) based learning algorithm that learns the\noptimal joint offloading and autoscaling policy on-the-fly. It is well-known that MDP suffers from the so-called “curse of dimensionality” problem when the state space is large [10]. The proposed PDS-based learning algorithm exploits the special structure of state transitions of the considered energy harvesting MEC system to conquer this challenge, thereby significantly improving both the learning convergence speed and the run-time performance compared with conventional online reinforcement learning algorithms such as Q-learning [10]. The key to achieving this performance improvement is a decomposition of the (offline) value iteration and (online) reinforcement learning that allows many components of the algorithm to be learned in a batch manner. • We prove the convergence of the proposed PDS-based learning algorithm and analytically\ncharacterize the structure of the resulting optimal policy. The optimal policy is proven to have a simple monotone structure: the power demand for the optimal joint offloading and autoscaling policy is non-decreasing in the amount of available battery power. This result enables easy implementation of the proposed algorithm in practical MEC applications. • Extensive simulations are carried out to verify our analytical results and evaluate the\nperformance of the proposed algorithm. The results confirm that our method can significantly improve the performance of the energy harvesting MEC system.\nThe rest of this paper is organized as follows. Section II discusses related works. Section III describes the system model. Section IV formulates the MDP problem. Section V develops the PDS-based learning algorithm. Section VI proves the convergence of the proposed algorithm and characterizes the structure of the optimal policy. Section VII evaluates the proposed method via systematic simulations. Section VIII concludes the paper.\n5"
    }, {
      "heading" : "II. RELATED WORK",
      "text" : "Mobile edge computing (MEC) has received an increasing amount of attention in recent years. The concept of MEC was proposed in 2014 as a new platform that provides IT and cloudcomputing capabilities within the radio access network in close proximity to mobile subscribers [11]. Initially, MEC refers to the use of BSs for offloading computation tasks from mobile devices. Recently, the definition of edge devices gets broader, encompassing any devices that have computing resources along the path between data sources and cloud data centers [4]. Fog computing [5] is a related concept that refers to the same computing paradigm. The areas of Fog computing and MEC are overlapping and the terminologies are frequently used interchangeably. There exist significant disparities between MEC and mobile cloud computing (MCC). Compared with MCC, MEC has the advantages of achieving lower latency, saving energy, supporting context-aware computing, and enhancing privacy and security for mobile applications [4]. A central theme of many prior studies is offloading policy on the user side, i.e., what/when/how to offload a user’s workload from its device to the edge system or cloud (see [12] and references therein). Depending on the type of tasks, offloading can be either binary or partial. Our work focuses on edge-side offloading and autoscaling, and hence is complementary to these studies on user-side offloading.\nMEC servers are small-scale data centers and consume substantially less energy than the conventional cloud mega-scale data center [12]. However, as MEC servers become more widely deployed, the system-wide energy consumption becomes a big concern. Therefore, innovative techniques for achieving green MEC is in much need. Off-grid renewable energy, such as solar radiation and wind energy, has recently emerged as a viable and promising power source for various IT systems thanks to the recent advancement of energy harvesting techniques [8], [9]. Compared with traditional grid energy which is normally generated by coal-fired power plants, employing renewable energy significantly reduces the amount of carbon emission. Moreover, the use of renewable energy sources eliminates the need of human intervention, which is difficult if not impossible for certain types of application scenarios where the devices are hard and dangerous to reach. However, designing green MEC powered by renewable energy is much more challenging compared to green communication systems [13]–[15] or green data center networks [16] [7], [17], [18] since the radio and computation resources have to be jointly managed, whereas prior research typically only considers one of the two decisions. For example, autoscaling (a.k.a.,\n6 right-sizing) in data centers [16] dynamically controls the number of active servers, but the control knob of offloading to the cloud is not available in the context of data centers. For energy harvesting mobile devices, a dynamic computation offloading policy was proposed in [19] using Lyapunov optimization techniques [20] based on both information of the wireless channel and energy. The focus of the present paper is on energy harvesting MEC systems and our solution is based on reinforcement learning.\nAnother study relevant to our work is [21], which also studies workload allocation/offloading in a cloud-fog computing system. However, unlike our energy harvesting edge system, this paper considers a grid-powered system and focuses on a one-shot static optimization without addressing the temporal correlation among the offloading decisions across time (due to intermittent renewable energy and limited battery capacity). The present paper develops a foresighted resource management algorithm for energy harvesting MEC, which can operate optimally in timevarying and unknown environments by formulating a Markov decision process problem. To cope with unknown time-varying system dynamics, our learning algorithm employs a decomposition of (offline) value iteration and (online) reinforcement learning based on factoring the system dynamics into an a priori known and an a priori unknown component. A key advantage of our proposed algorithm is that it exploits the partial information of the edge computing system and the structure of the resource management problem, and thus it converges much faster than conventional reinforcement learning algorithms such as Q-learning [10].\nTo the best knowledge of the authors, the conference version of this paper [22] was the first to study resource management for energy harvesting MEC servers (see related discussions in a recent comprehensive survey paper [12]). The present paper extents our findings in [22]. Specifically, in addition to developing an efficient learning algorithm for the optimal offloading and autoscaling policy, we analytically characterize the structure of the learned optimal resource management policy and carry out extensive simulations to evaluate its performance."
    }, {
      "heading" : "III. SYSTEM MODEL",
      "text" : "As a major deployment method of mobile edge computing [11], we consider an edge system consisting of a base station and a set of edge servers, which are physically co-located and share the same power supply in the cell site.\n7"
    }, {
      "heading" : "A. Workload model",
      "text" : "We consider a discrete-time model by dividing the operating period into time slots of equal length indexed by t = 0, 1, ..., each of which has a duration that matches the timescale at which the edge device can adjust its computing capacity (i.e. number of active servers). We use x ∈ L to represent a location coordinate in the service area L. Let λ(x, t) represent the workload arrival rate in location x, and θ(x, t) be the wireless transmission rate between the base station and location x. Thus λ(t) = ∑\nx∈L λ(x, t) ∈ [0, λmax] is the total workload arrival rate at the edge\nsystem, where λmax is the maximum possible arrival rate. The system decides the amount of workload µ(t) ≤ λ(t) that will be processed locally. The remaining workload ν(t) , λ(t)−µ(t) will be offloaded to the cloud for processing. The edge system also decides at the beginning of the time slot the number of active servers, denoted by m(t) ∈ [0,M ] , M. These servers are used to process the local workload µ(t). Since changing the number of servers during job\n8 execution are difficult and in many cases impossible, we only allow determining the number of servers at the beginning of each time slot but not within the slot."
    }, {
      "heading" : "B. Delay cost model",
      "text" : "The average utilization of the base station is ρ(t) = ∑\nx λ(x, t)/θ(x, t), which results in a total\nwireless access and transmission delay of cwi(t) = ∑ x λ(x, t)/[θ(x, t)(1−ρ(t))] by following the literature and modeling the base station as a queueing system [14]. Next we model the workload processing delay incurred at the edge servers.\nFor the local processed workload, the delay cost clo(t) is mainly processing delay due to the limited computing capacity at the local edge servers. The transmission delay from the edge device to the local servers is negligible due to physical co-location. To quantify the delay performance of services, such as average delay and tail delay (e.g. 95th-percentile latency), without restricting our model to any particular performance metric, we use the general notion of clo(m(t), µ(t)) to represent the delay performance of interest during time slot t. As a concrete example, we can model the service process at a server instance as an M/G/1 queue and use the average response time (multiplied by the arrival rate) to represent the delay cost, which can be expressed as clo(m(t), µ(t)) = µ(t)\nm(t)·κ−µ(t) , where κ is the service rate of each server.\nFor the offloaded workload, the delay cost coff (t) is mainly transmission delay due to network round trip time (RTT), which varies depending on the network congestion state. For modeling simplicity, the service delay at the cloud side is also absorbed into the network congestion state. Thus, we model the network congestion state, denoted by h(t), as an exogenous parameter and express it in terms of the RTT (plus cloud service delay) for simplicity. The delay cost is thus coff (h(t), λ(t), µ(t)) = (λ(t)− µ(t))h(t). The total delay cost is therefore\ncdelay(h(t), λ(t), m(t), µ(t))\n=clo(m(t), µ(t)) + coff (h(t), λ(t), µ(t)) + cwi(λ(t)) (1)"
    }, {
      "heading" : "C. Power model",
      "text" : "We interchangeably use power and energy, since energy consumption during each time slot is the product of (average) power and the duration of each time slot that is held constant in our model. The total power demand of the edge system in a time slot consists of two parts: first, basic operation and transmission power demand by edge devices (base station in our study); and\n9 second, computing power demand by edge servers. The first part is independent of the offloading or the autoscaling policy, which is modeled as dop(λ(t)) = dsta + ddyn(λ(t)) where dsta is the static power consumption and ddyn(λ(t)) is the dynamic power consumption depending on the amount of total workload. The computing power demand depends on the number of active servers as well as the locally processed workload. We use a generic function dcom(m(t), µ(t)), which is increasing in m(t) and µ(t), to denote the computing power demand. The total power demand in time slot t is therefore\nd(λ(t), m(t), µ(t)) = dop(λ(t)) + dcom(m(t), µ(t)) (2)\nTo model the uncertainty of the green power supply, we assume that the green power budget, denoted by g(t), is realized after the offloading and autoscaling decisions are made. Therefore, the decisions cannot utilize the exact information of g(t). However, we assume that there is an environment state e(t) which the system can observe and it encodes valuable information of how much green energy budget is anticipated in the current time slot. For instance, daytime in a good weather usually implies high solar power budget. Specifically, we model g(t) as an i.i.d. random variable given e(t), which obeys a conditional probability distribution Pg(g(t)|e(t)). Note that the environment state e(t) itself may not be i.i.d."
    }, {
      "heading" : "D. Battery model",
      "text" : "Batteries are used to balance the power supply and demand. In a solar+wind system, photovoltaic modules and wind turbines can combine their output to power the edge system and charge the batteries [6]. When their combined efforts are insufficient, batteries take over to ensure steady operation of the edge system. We denote the battery state at the beginning of time slot t by b(t) ∈ [0, B] , B (in units of power) where B is the battery capacity. For system protection reasons, the battery unit has to be disconnected from the load once its terminal voltage is below a certain threshold for charging. We map b(t) = 0 to this threshold voltage to ensure basic operation of the system.\nSince green power budget is unpredictable and hence unknown at the beginning of time slot t, the edge system uses a conservative policy which satisfies dcom(m(t), µ(t)) ≤ max{b(t) − dop(λ(t)), 0} to avoid activating backup power supply by making offloading and autoscaling decisions.\n10\n11\nthat the batteries are not leaky. We model the battery depreciation cost in a time slot, denoted by cbattery(t), using the amount of discharged power in this time slot since the lifetime discharging is often limited. Specifically,\ncbattery(t) = ω ·max{d(λ(t), m(t), µ(t))− g(t), 0}\nwhere ω > 0 is the normalized unit depreciation cost."
    }, {
      "heading" : "IV. PROBLEM FORMULATION",
      "text" : "In this section, we formulate the dynamic offloading and autoscaling problem as an online learning problem, in order to minimize the system cost. The system state is described by a tuple s(t) , (λ(t), e(t), h(t), b(t)), which is observable at the beginning of each time slot. Among the four state elements, the workload arrival rate λ(t), the environment state e(t), the backbone network state h(t) are exogenous states which are independent of the offloading and autoscaling actions while the battery state b(t) evolves according the to offloading and autoscaling actions as well as the renewable power realization. To make the stochastic control problem tractable, they are assumed to have finite value spaces and λ(t), e(t), h(t) evolve as finite-state Markov chains. Specifically, let Pλ(λ(t + 1)|λ(t)), Pe(e(t + 1)|e(t)) and Ph(h(t + 1)|h(t)) denote the transition matrices for λ(t), e(t) and h(t), respectively. Similar assumptions have been made in existing literature, e.g. [23], [24]. Importantly, all these probability distributions are unknown a priori to the edge system.\nThe stochastic control problem now can be cast into an MDP, which consists of four elements:\nthe state space S, the action spaceA, the state transition probabilities Ps(s(t+1)|s(t), a(t)), ∀s, s ′ ∈ S, a ∈ A, and the cost function c(s, a), ∀s, a. We have already defined the state space. Next we introduce the other elements as follows.\nActions. Although the actual actions taken by the edge system are ν(t) (offloading) and m(t) (autoscaling) in each time slot t, we will consider an intermediate action in the MDP formulation, which is the computing power demand in each time slot t, denoted by a(t) ∈ A where A is a finite value space [0, 1, ...., B]. We will see in a moment how to determine the optimal offloading and autoscaling actions based on this. As mentioned before, to maintain basic operation in the worst case, we require that a(t) ≤ max{b(t)−dop(λ(t)), 0}. Thus, this condition determines the feasible action set in each time slot.\n12\nState transitions. Given the current state s(t), the computing power demand a(t) and the\nrealized green power budget g(t), the buffer state in the next time slot is\nb(t+ 1) = [b(t) + g(t)]B0 , if dop(λ(t)) > b(t) (5) b(t+ 1) = [b(t)− dop(λ(t))− a(t) + g(t)] B 0 , otherwise\nwhere [·]B0 denotes max{min{·, B}, 0}. The system then evolves into the next time slot t + 1 with the new state s(t+ 1). The transition probability from s(t) to s(t+ 1), given a(t), can be expressed as follows\nP (s(t+ 1)|s(t), a(t))\n=Pλ(λ(t+ 1)|λ(t))Pe(e(t + 1)|e(t))Ph(h(t+ 1)|h(t)) × ∑\ng(t)\nPg(g(t)|e(t))1{ζ(t)} (6)\nwhere 1{·} is the indicator function and ζ(t) denotes the event defined by (5). Notice that the state transition only depends on a(t) but not the offloading or the autoscaling action. This is why we can focus on the computing power demand action a(t) for the foresighted optimization problem.\nCost function. The total system cost is the sum of the delay cost, the battery depreciation\ncost and the backup power supply cost. If dop(λ(t)) > b(t), then the cost is simply\nc̃(t) = cdelay(h(t), λ(t), 0, 0) + cbak(λ(t)) (7)\nsince we must have m(t) = 0 and µ(t) = 0. Otherwise, the realized cost given the realized green power budget g(t) is\nc̃(t) = cdelay(h(t), λ(t), m(t), µ(t)) + ω · [a(t)− g(t)] ∞ 0\nSince the state transition does not depend on µ(t) or m(t), they can be optimized given s(t) and a(t) by solving the following myopic optimization problem\nmin µ,m cdelay(h, λ,m, µ) s.t. d(m,µ) = a (8)\nLet m∗(s, a) and µ∗(s, a) denote the optimal solution and c∗delay(s, a) the optimal value given s and a. Therefore, the minimum cost in time slot t given s and a is\nc̃(t) = c∗delay(s(t), a(t)) + ω · [a(t)− g(t)] ∞ 0 (9)\n13\nThe expected cost is thus\nc(s(t), a(t)) = c∗delay(s(t), a(t)) + Eg(t)|e(t)ω · [a(t)− g(t)] ∞ 0\nPolicy. The edge system’s computing power demand policy (which implies the joint offloading and autoscaling policy) in the MDP is a mapping π : Λ × E × H × B → A. We focus on optimizing the policy to minimize the edge system’s expected long-term cost, which is defined as the expectation of the discounted sum of the edge device’s one-slot cost: Cπ(s(0)) =\nE\n(\n∞ ∑ t=0 δtc(s(t), a(t))|s(0)\n)\nwhere δ < 1 is a constant discount factor, which models the fact\nthat a higher weight is put on the current cost than the future cost. The expectation is taken over the distribution of the green power budget, the workload arrival, the environment state and the network congestion state. It is known that in MDP, this problem is equivalent to the following optimization\nmin π\nCπ(s), ∀s ∈ S (10)\nLet C∗(s) be the optimal discounted sum cost starting with state s. It is well-known that π∗ and C∗(s) can be obtained by recursively solving the following set of Bellman equations\nC∗(s) = min a∈A\n(\nc(s, a) + δ ∑\ns′∈S\nP (s′|s, a)C∗(s′)\n)\n, ∀s (11)\nIn the next section, we solve this problem using the idea of dynamic programming and online learning."
    }, {
      "heading" : "V. POST-DECISION STATE BASED ONLINE LEARNING",
      "text" : "If all the probability distributions were known a priori, then the optimal policy could be solved using traditional algorithms for solving Bellman equations, e.g. the value iteration and the policy iteration [10], in an offline manner. In the considered problem, all these probability distributions are unknown a priori and hence, these algorithms are not feasible. In this section, we propose an online reinforcement learning algorithm to derive the optimal policy π∗ on-the-fly. Our solution is based on the idea of post-decision state (PDS), which exploits the partially known information about the system dynamics and allows the edge system to integrate this information into its learning process to speed up learning. Compared with conventional online reinforcement learning algorithms, e.g. Q-learning, the proposed PDS based learning algorithm significantly improves its convergence speed and run-time performance.\nIn this rest of this section, we first define PDS, and then describe the proposed algorithm.\nFinally, we prove the convergence of the proposed algorithm.\n14"
    }, {
      "heading" : "A. Post-Decision State",
      "text" : "We first introduce the notion of PDS, which is the most critical idea of our proposed algorithm. In our problem, PDS is the intermediate system state after the edge system takes the computing power demand action a(t) but before the green power budget g(t) is realized. Figure 3 illustrates the relationship between a normal state s(t) and its PDS s̃(t). Specifically, the PDS in time slot t, denoted by s̃(t) , (λ̃(t), ẽ(t), h̃(t), b̃(t)), is defined as\nλ̃(t) = λ(t), ẽ(t) = e(t), h̃(t) = h(t) (12)\nand\nb̃(t) =\n \n\nb(t), if dop(λ(t)) > b(t) max{b(t)− dop(λ(t))− a(t), 0}, otherwise (13)\nAs we can see, the post-decision workload state λ̃(t), post-decision environment state ẽ(t) and post-decision network congestion state h̃(t) remain the same because the computing power demand action a(t) does not have a direct impact on these elements of the system state. The only element of the system state that may change is the battery state b(t). However, it is important to notice that the post-decision battery state b̃(t) is only a virtual state but not the real battery state. Given the definition of PDS, we further define the post-decision value function V ∗(s̃) as follows:\nV ∗(s̃) = ∑\ns′∈S\nP (s′|s̃)C∗(s′), ∀s (14)\n15\nwhere the transition P (s′|s̃) between PDS and the next system state is now independent of the action:\nP̃ (s|s̃) =Pλ(λ|λ̃)Pe(e|ẽ)Ph(h|h̃)\n× ∑\ng\nPg(g|ẽ)1{b = min{b̃+ g, B}} (15)\nFor the ease of exposition, we refer to s as the “normal” state and C∗(s) as the “normal” value (cost) function, in order to differentiate with their post-decision counterparts.\nBy comparing (11) and (14), it is obvious that there is a deterministic mapping from the\nnormal value function C∗(s) to the post-state value function V ∗(s̃) as follows by\nC∗(s) = min a∈A (c(s, a) + δV ∗(s̃)) (16)\nThe above equation shows that the normal value function C∗(s) in each time slot is obtained from the corresponding post-decision value function V ∗(s̃) in the same time slot, where s̃ = (λ, e, h, b) if dop(λ)) > b and s̃ = (λ, e, h,max{b − dop(λ) − a, 0}) if dop(λ) ≤ b, by performing the minimization over the action a.\nThe advantages of using the PDS and post-decision value function are summarized as follows. (1) In the normal state based Bellman’s equation set (11), the expectation over the possible workload arrival λ, the environment state e, network congestion state h, and green power budget g has to be performed before the minimization over the possible energy demand actions a. Therefore, performing the minimization requires the knowledge of these dynamics. In contrast, in the PDS based Bellman equations (14), the expectation operation is separated from the minimization operation. If we can learn and approximate the post-decision value function V ∗(s̃), then the minimization can be solved without any prior knowledge of the system dynamics.\n(2) Given the energy demand action a, the PDS decomposes the system dynamics into an a priori unknown component, i.e. λ, e, h and g whose evolution is independent of a, and an a priori known component, i.e. the battery state evolution is partially determined by a. Importantly, λ, e, h and g are also independent of the battery state b. This fact enables us to develop a batch update scheme on the post-decision value functions, which can significantly improve the convergence speed of the proposed PDS based reinforcement learning."
    }, {
      "heading" : "B. The algorithm",
      "text" : "The algorithm maintains and updates a set of variables in each time slot. These variables are\n16\n• The one slot cost estimate ĉt(s, a), ∀(s, a) ∈ S × A. • The post-decision value function estimate V̂ t(s̃), ∀s̃ ∈ S. • The normal value function estimates Ĉt(s), ∀s ∈ S.\nThe superscript t is used to denote the estimates at the beginning of the time slot t. If these estimates are accurate, i.e. ĉt(s, a) = c(s, a), V̂ t(s̃) = V ∗(s̃) and Ĉt(s) = C∗(s), then the optimal power demand policy is readily obtained by solving (16). Our goal is to learn these variables over time using the realizations of the system states and costs. The algorithm works as follows: (In each time slot t)\nStep 1: Determine the empirically optimal computing power demand by solving\na(t) = min a\n(ĉt(s(t), a) + δV̂ t(s̃(t))) (17)\nusing the current estimates ĉt(s(t), a) and V̂ t(s̃(t)), where for each a, s̃(t) represents the corresponding PDS. Given this power demand, the corresponding optimal offloading and autoscaling actions are determined as µ(t) = µ∗(s(t), a(t)) and m(t) = m∗(s(t), a(t)) based on the solution of (8).\nAfter the green power g(t) is harvested and hence the current slot cost c̃(t) is realized according\nto (9), the battery state evolves to b(t+ 1) according to (5).\nSteps 2 through 4 update the estimates. Step 2: Batch update ĉt(s, a) for any action a and any state s = (λ, e, h, b) such that e is the same as the current slot environment state e(t) using the realized green power budget g(t) according to\nĉt+1(s, a) = (1− ρt)ĉt(s, a) + ρtc(s, a, g(t)) (18)\nwhere ρt is the learning rate factor that satisfies ∑∞ t=0 ρ t = ∞ and\n∞ ∑ t=0 (ρt)2 < ∞. For all other\naction-state pair, ĉt+1(s, a) = ĉt(s, a). We can do this batch update because the green power budget g(t) depends only on the environment state e(t) but not on other states or actions.\nStep 3: Batch update the normal value function estimate for any state s = (λ, e, h, b) such\nthat e = e(t) according to\nĈt+1(s) = min a∈A (ĉt+1(s, a) + δV̂ t(s̃)) (19)\nThe normal value function estimates for the remaining states are unchanged. The reason why we can do this batch update is the same as that in Step 2.\n17\nStep 4: Batch update the post-decision value function estimate for any s̃ ∈ S̃ such that\nλ̃ = λ̃(t), ẽ = ẽ(t) and h̃ = h̃(t) according to\nV̂ t+1(s̃) = (1− αt)V̂ t(s̃) + αtĈt+1(s) (20)\nwhere s = (λ, e, h, b) satisfies λ = λ(t+1), e = e(t+1), h = h(t+1) and b = min{b̃+g(t), B}. In this way, we update not only the currently visited PDS s̃(t) but all PDS with common λ̃(t), ẽ(t) and h̃(t). This is because the temporal transition of λ, e, h is independent of of the battery state b and the green power budget realization follows the same distribution since the environment state e is the same for these states.\nAlgorithm 1 Online Learning for Joint Offloading and Autoscaling\n1: Initialize: ĉ0(s, a) = 0, ∀(s, a), V̂ 0(s̃) = 0, ∀s̃, Ĉ0(s) = 0, ∀s. 2: for every time slot t do 3: Observe current state s(t) 4: Determine power demand a(t) by solving (17) 5: Determine offloading and autoscaling actions µ(t) and m(t) by solving (8) 6: Compute the post-decision state s̃t according to (12) and (13) 7: (The green power budget g(t) is realized.) 8: Batch update ĉt(s, a) according to (18) 9: Batch update Ĉt(s) according to (19)\n10: Batch update V̂ t((̃s)) according to (20) 11: end for"
    }, {
      "heading" : "VI. ALGORITHM ANALYSIS",
      "text" : ""
    }, {
      "heading" : "A. Convergence of the PDS learning algorithm",
      "text" : "We first prove the convergence of our algorithm.\nTheorem 1. The PDS based online learning algorithm converges to the optimal post-decision value function V ∗(s̃), ∀s̃ when the sequence of learning rates ρt satisfies ∑∞\nt=0 ρ t = ∞ and\n∞ ∑ t=0 (ρt)2 < ∞.\n18\nProof. The proof follows [24]. For each PDS s̃, we define a function on its value function as follows:\nFs̃(V ) = min a∈A (c(s, a) + δV (s̃)) (21)\nwhere s and a are such that, λ = λ̃, e = ẽ, h = h̃ and b = b̃− a. Thus, for any value of V (s̃), Fs̃(V ) maps to a real number. Based on this, we define F : R |S| → R|S| be a mapping which collects Fs̃ for all s̃ ∈ S. It is proven in [25] that the convergence of our proposed algorithm is equivalent to the convergence of the associated ordinary differential equation (O.D.E.):\nV̇ = F (V )− V (22)\nSince the map F : R|S| → R|S| is a maximum norm δ-contraction, the asymptotic stability of the unique equilibrium point of the above O.D.E. is guaranteed [26]. This unique equilibrium point corresponds to the optimal post-decision value function V ∗(s̃), ∀s̃ ∈ S.\nBecause C∗(s), ∀s is a deterministic function of V ∗(s̃), ∀s̃, it is straightforward that the PDS based online learning algorithm also converges to C∗(s), ∀s. Therefore, we prove that the edge system is able to learn the optimal power demand policy and hence the optimal offloading and autoscaling policies using the proposed algorithm."
    }, {
      "heading" : "B. Structure of the Optimal Policy",
      "text" : "Next, we characterize the structure of the optimal policy. First, we show that the one-slot cost\nfunction is convex in the power demand action.\nLemma 1. Assume that both clo(m,µ) and dcom(m,µ) are jointly convex in (m,µ) for any given s, then the one-slot cost function c(s, a) is convex in a for any given s.\nProof. Recall that c(s, a) = c∗delay(s, a) +Eg|eω ·max{a− g, 0}. Since a− g is linear in a, and the maximum of convex functions is still convex, it is obvious that max{a− g, 0} is convex in a. Since the expectation is just a weighted sum of convex functions, Eg|eω · max{a − g, 0} is also convex in a. Now, if we can prove c∗delay(s, a) is convex in a, then the lemma is proved. Recall that c∗delay(s, a) is the solution to\nmin µ,m cdelay(h, λ,m, µ) s.t. d(m,µ) = a (23)\nfor the given s. Since cdelay(h, λ,m, µ) = clo(m,µ)+coff (µ(t))+cwi, clo(m,µ) is jointly convex in (m,µ) and coff(µ(t)) is linear in µ, cdelay(h, λ,m, µ) is also jointly convex in (m,µ). Similarly,\n19\nsince d(m,µ) = dop + dcom(m,µ) and dcom(m,µ) is jointly convex in (m,µ), d(m,µ) is also jointly convex in (m,µ).\nConsider two power demand actions a1, a2, let (m ∗ 1, µ ∗ 1) and (m ∗ 2, µ ∗ 2) be the corresponding optimal joint offloading and autoscaling actions. Clearly, we should have the constraint be binding for the optimal solution, i.e. d(m∗1, µ ∗ 1) = a ∗ 1 and d(m ∗ 2, µ ∗ 2) = a ∗ 2. Now, we have, ∀λ ∈ (0, 1),\nλc∗delay(a1) + (1− λ)λc ∗ delay(a2)\n=λcdelay(m ∗ 1, µ ∗ 1) + (1− λ)λcdelay(m ∗ 2, µ ∗ 2) (24) ≥cdelay(λ(m ∗ 1, µ ∗ 1) + (1− λ)(m ∗ 2, µ ∗ 2)) , cdelay(mλ, µλ)\nwhere we define (mλ, µλ) , λ(m ∗ 1, µ ∗ 1)+(1−λ)(m ∗ 2, µ ∗ 2). Let ã = d(mλ, µλ) be the corresponding required power demand. Further, we let (m∗, µ∗) be the optimal offloading and autoscaling action for this ã. Clearly, cdelay(mλ, µλ) ≥ cdelay(m∗, µ∗). Due to the convexity of d(m,µ), we have\nã = d(mλ, µλ) = d(λ(m ∗ 1, µ ∗ 1) + (1− λ)(m ∗ 2, µ ∗ 2))\n≤λd(m∗1, µ ∗ 1) + (1− λ)d(m ∗ 2, µ ∗ 2) (25)\n=λa1 + (1− λ)a2 , aλ\nTherefore, cdelay(m ∗, µ∗) ≥ cdelay(m∗λ, µ ∗ λ), where (m ∗ λ, µ ∗ λ) are the optimal offloading and autoscaling actions for aλ. Therefore, we have\nλc∗delay(a1) + (1− λ)λc ∗ delay(a2)\n≥cdelay(m ∗ λ, µ ∗ λ) = c ∗ delay(λa1 + (1− λ)a2) (26)\nThis completes the proof of this lemma.\nLemma 2 characterizes the shape of the optimal value function and post-state value function.\nLemma 2. Assume that c(s, a) is convex in a for any given s, then both V ∗(s) and C∗(s) are non-increasing and convex in b for any given λ, e, h.\nProof. We first prove C∗(s) is non-increasing. The optimal value functions satisfy\nC∗(s) = min a∈A\n(\nc(s, a) + δ ∑\ns′∈S\nP (s′|s, a)C∗(s′)\n)\n(27)\nConsider two states s and s′ that differs only in b and b′, and assume b < b′. Let a∗ be the optimal action for s. Now consider an action a′ = b′ − b + a∗ > a∗ for state s′. It is obvious\n20\nthat the second term on the right-hand side is identical in both cases since the transitions of λ, e, h are independent of the battery state, and because b′ − a′ = b − a∗, the battery state transition is also the same. Because c(s, a) is non-increasing in a, we have c(s′, a′) ≤ c(s, a∗). Therefore, by choosing a′ for s′, we have C(s′, a′) ≤ C∗(s). Realizing C∗(s′) ≤ C(s′, a′) due to the minimization operation, we have C∗(s′) ≤ C∗(s), thus proving C∗(s) is non-increasing.\nNext, we prove that C∗(s) is convex by induction. The optimal value functions C∗(s), ∀s can\nbe solved by the value iteration algorithm\nCn+1(s) = min a∈A\n(\nc(s, a) + δ ∑\ns′∈S\nP (s′|s, a)Cn(s ′)\n)\n(28)\nwhere the subscript n and n + 1 represent the n-th iteration and (n + 1)-th iteration. It is well known that valuation iteration converges to the optimal solution, i.e. as n → ∞, Cn(s) → C∗(s), ∀s, starting from any initial value function C0(s), ∀s. We initialize C0(s) to be convex in b for any given λ, e, h. It is easy to see that V ∗(s) is also non-increasing since it is simply a weighted average of a bunch of value functions.\nSuppose Cn(s), ∀s are convex in b for any given λ, e, h. Consider two battery states b < b′\nand let the corresponding optimal action be a∗ and a′∗. Then we have\nCn+1(b) = c(a ∗) + δVn(b− a ∗) (29)\nCn+1(b ′) = c(a′∗) + δVn(b ′ − a′∗) (30)\nIn the above equations, we omitted the state elements λ, e, h. Since we have assumed that Cn(b), ∀s are convex in b. In addition, b̂ = min{b+ g, B} is a concave function in b. Thus, by applying the results of composition (i.e. if f is concave and g is convex and non-increasing, then h(x) = g(f(x)) is convex.), we have Cn(min{b+ g, B}), ∀s also convex. Therefore Vn(b) is also convex in b since it is a weighted sum of convex functions.\nNow, combining (29) and (30) and using the convexity of Vn(b) we have\nλCn+1(b) + (1− λ)Cn+1(b ′)\n=λc(a∗) + (1− λ)c(a′∗)\n+ δ[λVn(b− a ∗) + (1− λ)Vn(b ′ − a′∗)]\n≥c(aλ) + δVn(bλ − aλ) ≥ Cn+1(bλ) (31)\nwhere bλ = λb+ (1− λ)b′ and aλ = λa∗ + (1− λ)a′∗. This proves that Cn+1(b) is also convex in b.\n21\nNow, we are ready to prove the structural result of the optimal power demand policy.\nTheorem 2. Assume that both clo(m,µ) and dcom(m,µ) are jointly convex in (m,µ) for any given s, then the optimal power demand policy is monotonically non-decreasing in b for any given λ, e, h. That is, ∀s, s′ such that λ = λ′, e = e′, h = h′ and b ≤ b′, then we have π∗(s) ≤ π(s′).\nProof. We aim to prove that C(b, a) is subadditive in the battery state b and the power demand action a for any given λ, e, h. This is to prove that ∀b ≤ b′ and a ≤ a′, we have\nC(b, a′)− C(b, a) ≥ C(b′, a′)− C(b′, a) (32)\nIf the above is true, then we can apply [27] (Section 4.7) to show that π(s) is non-decreasing in b.\nEquation (32) is equivalent to\nV ∗(b− a′)− V ∗(b− a) ≥ V ∗(b′ − a′)− V ∗(b′ − a) (33)\nLet b− a = b̂, b′ − a = b̂′ and ∆ = a′ − a. Then the above becomes\nV ∗(b̂−∆)− V ∗(b̂) ≥ V ∗(b̂′ −∆)− V ∗(b̂′) (34)\nwhich is true due to the fact that V ∗(b) is non-increasing and convex when clo(m,µ) and dcom(m,µ) are jointly convex in (m,µ) for any given s (by Lemma 1 and Lemma 2). This completes the proof.\nVII. SIMULATION"
    }, {
      "heading" : "A. Simulation Setup",
      "text" : "We consider each time slot as 15 minutes. The workload arrival space is set as Λ ={10 units/sec, 20 units/sec, ..., 100 units/sec}. The network congestion space is H ={20 ms/unit, 30 ms/unit, ..., 60 ms/unit}. The environment state space is E ={Low, Medium, High}. For each environment state, the green power will be realized according to a normal distrinution with different means: g(t|e = Low) ∼ N (200W, 102), g(t|e = Medium) ∼ N (400W, 102), g(t|e = High) ∼ N (600W, 102). The battery capacity is set as B =2 kWh. The base station static power consumption is dsta = 300W. The maximum number of activated edge server is M = 15. The power consumption of each edge server is 150W. The maximum service rate of each edge server is 20 units/sec. Other important parameters are set as follows: the normalized unit depreciation cost ω = 0.01, the cost coefficient of backup power supply φ = 0.15.\n22\nThe proposed PDS-based learning algorithm is compared with three benchmark schemes:\n• Q-learning [10]: Q-learning is a famous model-free reinforcement learning technique for\nsolving MDP problems. It has been proven that for any finite MDP problem, Q-learning eventually finds an optimal policy. • Myopic optimization: this scheme ignores the temporal correlation between the system\nstates and the decisions, and minimizes the cost function given the state in the current time slot by utilizing all available battery energy. • Fixed power: this scheme uses a fixed computation power (whenever possible) for edge\ncomputing in each time slot."
    }, {
      "heading" : "B. Run-time Performance Comparison",
      "text" : "Figure 4 compares the run-time performance of our scheme with the three benchmark schemes for 10000 time slots. As can be seen, the proposed PDS-based learning algorithm incurs a significantly lower cost than all benchmark schemes.\n• Myopic optimization incurs a large time-average cost since it ignores the temporal cor-\nrelation of decision making and frequently is forced to activate the backup power in the subsequent time slots. • The fixed power scheme has tremendously different performance depending on the fixed\nvalue used, which implies that it is sensitive to system parameters. In Figure 4, two fixed values (1.0kW and 0.4kW) are shown for illustrative purposes, where 1.0kW is the best fixed value found by our extensive simulations. Since the system dynamics is unknown a priori\n23\nand may change over time, using a fixed computing power scheme may cause significant performance loss. • The performance of Q-learning is much worse than our proposed PDS learning since it\nconverges very slowly due to the large state space. Although there is a trend of declining in the time average cost, even after 10000 time slots, there is still a considerable performance gap compared with our scheme. On the other hand, our proposed PDS scheme converges very quickly."
    }, {
      "heading" : "C. Learned Optimal Policy",
      "text" : "Figure 5 further explains why the proposed algorithm outperforms the myopic solution by showing the learned optimal policy. When the workload demand is low and the network is not congested, the policy learned by the proposed algorithm tends to be conservative in using local computing power if the battery level is low. In this way, more power can be saved for future when the workload is high and the network congestion state degrades, thereby reducing the long-term system cost. On the other hand, the myopic policy ignores this temporal correlation, it activates local servers to process workload even if the battery level is not so high. As a result, even though it achieves slight improvement in the current slot, it wastes power for potentially reducing significant cost in the future. Figure 5 also validates our theoretical results in Theorem 2 on the structure of the optimal policy: The optimal power demand increases in the battery level.\n24"
    }, {
      "heading" : "D. Battery State Distribution",
      "text" : "Figure 6(a) shows the distributions of the battery state over the simulated 10000 time slots in one representative simulation run for the various schemes, and Figure 6(b) shows the fitted curves (polynomial fit) for better inspection. As can be seen, Myopic optimization results in a large portion of time when the system is in the insufficient battery zone, incurring significant backup power costs. If a too small fixed power demand is used (e.g. 0.4kW), the battery state may spend a considerable amount of time in the high battery level zone (i.e. 0.7 – 1kWh). This implies that much of the green power cannot be harvested and hence is wasted due to the limited battery capacity constraint. Moreover, using a smaller fixed power for computation does not guarantee that it has a smaller chance to get into the insufficient battery zone. This is because when the battery state is slightly higher than the level that can support basic operation, using a smaller fixed power can easily make battery state drop to the insufficient battery zone in the subsequent time slot whereas if a larger fixed power scheme is used, the system will decide to offload all workload to the cloud without using the local battery power. Although a proper fixed power demand is able to strike a decent balance, it does not well adapt to the changing system dynamics. The proposed PDS-based algorithm achieves the highest harvesting energy efficiency by keeping the battery at a relatively low state while above the insufficient level."
    }, {
      "heading" : "E. Cost Composition",
      "text" : "Figure 7 shows the cost compositions of the PDS-based algorithm and Myopic optimization in 10000 time slots. It can be observed that the proposed PDS-based algorithm significantly\n25\ncuts the back-up power cost by taking conservative action at low battery states which avoids the usage of backup power. By contrast, Myopic optimization frequently leads the battery state into the insufficient zone as shown in figure 6 and results in significant backup power costs. Figure 8 presents the composition of time-average cost at the end of simulation. It can be observed that the PDS-based algorithm and Q-leaning reduce the total cost by considering the future system dynamics and incur low backup power cost accounting for 12.6% and 16.7% of the total cost, respectively. These fractions are much lower than those of the remaining schemes which do not consider the long-term system performance."
    }, {
      "heading" : "F. Optimal Offloading Strategy",
      "text" : "Finally, we visualize the optimal offloading strategy in Figure 9 given a fixed number of active servers under various system states. As the network becomes more congested and there are more\n26\nactive edge servers, the optimal strategy chooses to process more workload at the local edge system. However, as the workload arrival rate increases, the amount of workload that can be processed at the local edge system is saturated after certain workload arrival rate."
    }, {
      "heading" : "VIII. CONCLUSION",
      "text" : "In this paper, we studied the joint offloading and autoscaling problem in energy harvesting MEC systems. We found that foresightedness and adaptivity are keys to reliable and efficient operation of renewable-powered MEC. To enable fast learning in the presence of a priori unknown system parameters, a PDS-based reinforcement learning algorithm was developed to learn the optimal offloading and autoscaling policy by exploiting the special structure of the considered problem. Our simulations showed that the proposed scheme can significantly improve the edge computing performance even if it is powered by intermittent and unpredictable renewable energy. Future work includes investigating large-scale edge computing systems powered by renewable energy, e.g. green power-aware geographical load balancing."
    } ],
    "references" : [ {
      "title" : "Gartner says the internet of things will transform the data center",
      "author" : [ "J. Rivera", "R. van der Meulen" ],
      "venue" : "Retrieved August, vol. 5, p. 2014, 2014.",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Mobile edge computing: Challenges for future virtual network embedding algorithms",
      "author" : [ "M.T. Beck", "M. Maier" ],
      "venue" : "The Eighth International Conference on Advanced Engineering Computing and Applications in Sciences (ADVCOMP). IARIA. Citeseer, 2014, pp. 65–70.  27",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Finding your way in the fog: Towards a comprehensive definition of fog computing",
      "author" : [ "L.M. Vaquero", "L. Rodero-Merino" ],
      "venue" : "ACM SIGCOMM Computer Communication Review, vol. 44, no. 5, pp. 27–32, 2014.",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Edge computing: Vision and challenges",
      "author" : [ "W. Shi", "J. Cao", "Q. Zhang", "Y. Li", "L. Xu" ],
      "venue" : "IEEE Internet of Things Journal, vol. 3, no. 5, pp. 637–646, 2016.",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Fog and iot: An overview of research opportunities",
      "author" : [ "M. Chiang", "T. Zhang" ],
      "venue" : "IEEE Internet of Things Journal, vol. 3, no. 6, pp. 854–864, 2016.",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Towards sustainable in-situ server systems in the big data era",
      "author" : [ "C. Li", "Y. Hu", "L. Liu", "J. Gu", "M. Song", "X. Liang", "J. Yuan", "T. Li" ],
      "venue" : "ACM SIGARCH Computer Architecture News, vol. 43, no. 3. ACM, 2015, pp. 14–26.",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Traffic load balancing framework for software-defined radio access networks powered by hybrid energy sources",
      "author" : [ "T. Han", "N. Ansari" ],
      "venue" : "IEEE/ACM Transactions on Networking, vol. pp, no. 99, March 2015.",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Energy harvesting sensor nodes: Survey and implications",
      "author" : [ "S. Sudevalayam", "P. Kulkarni" ],
      "venue" : "IEEE Communications Surveys & Tutorials, vol. 13, no. 3, pp. 443–461, 2011.",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Energy harvesting wireless communications: A review of recent advances",
      "author" : [ "S. Ulukus", "A. Yener", "E. Erkip", "O. Simeone", "M. Zorzi", "P. Grover", "K. Huang" ],
      "venue" : "IEEE Journal on Selected Areas in Communications, vol. 33, no. 3, pp. 360–381, 2015.",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Reinforcement learning: An introduction",
      "author" : [ "R.S. Sutton", "A.G. Barto" ],
      "venue" : "MIT press,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1998
    }, {
      "title" : "Mobile-edge computing introductory technical white paper",
      "author" : [ "M. Patel", "B. Naughton", "C. Chan", "N. Sprecher", "S. Abeta", "A. Neal" ],
      "venue" : "White Paper, Mobile-edge Computing (MEC) industry initiative, 2014.",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Mobile edge computing: Survey and research outlook",
      "author" : [ "Y. Mao", "C. You", "J. Zhang", "K. Huang", "K.B. Letaief" ],
      "venue" : "arXiv preprint arXiv:1701.01090, 2017.",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2017
    }, {
      "title" : "Data offloading with renewable energy powered base station connected to a microgrid",
      "author" : [ "Y.-K. Chia", "C.K. Ho", "S. Sun" ],
      "venue" : "Global Communications Conference (GLOBECOM), 2014 IEEE. IEEE, 2014, pp. 2721–2726.",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Dynamic base station switching-on/off strategies for green cellular networks",
      "author" : [ "E. Oh", "K. Son", "B. Krishnamachari" ],
      "venue" : "IEEE Transactions on Wireless Communications, vol. 12, no. 5, pp. 2126–2136, 2013.",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Toward dynamic energy-efficient operation of cellular network infrastructure",
      "author" : [ "E. Oh", "B. Krishnamachari", "X. Liu", "Z. Niu" ],
      "venue" : "IEEE Communications Magazine, vol. 49, no. 6, pp. 56–61, 2011.",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Dynamic right-sizing for power-proportional data centers",
      "author" : [ "M. Lin", "A. Wierman", "L.L.H. Andrew", "E. Thereska" ],
      "venue" : "IEEE Infocom, 2011.",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "iswitch: Coordinating and optimizing renewable energy powered server clusters",
      "author" : [ "C. Li", "A. Qouneh", "T. Li" ],
      "venue" : "ISCA, 2012.",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Greenslot: scheduling energy consumption in green datacenters",
      "author" : [ "I. Goiri", "R. Beauchea", "K. Le", "T.D. Nguyen", "M.E. Haque", "J. Guitart", "J. Torres", "R. Bianchini" ],
      "venue" : "SuperComputing, 2011.",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Dynamic computation offloading for mobile-edge computing with energy harvesting devices",
      "author" : [ "Y. Mao", "J. Zhang", "K.B. Letaief" ],
      "venue" : "IEEE Journal on Selected Areas in Communications, vol. 34, no. 12, pp. 3590–3605, 2016.",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Stochastic network optimization with application to communication and queueing systems",
      "author" : [ "M.J. Neely" ],
      "venue" : "Synthesis Lectures on Communication Networks, vol. 3, no. 1, pp. 1–211, 2010.",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Towards power consumption-delay tradeoff by workload allocation in cloud-fog computing",
      "author" : [ "R. Deng", "R. Lu", "C. Lai", "T.H. Luan" ],
      "venue" : "Communications (ICC), 2015 IEEE International Conference on. IEEE, 2015, pp. 3909–3914.",
      "citeRegEx" : "21",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Online learning for offloading and autoscaling in renewable-powered mobile edge computing",
      "author" : [ "J. Xu", "S. Ren" ],
      "venue" : "2016 IEEE Global Communications Conference (GLOBECOM), Dec 2016, pp. 1–6.",
      "citeRegEx" : "22",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Managing cost, performance and reliability tradeoffs for energy-aware server provisioning",
      "author" : [ "B. Guenter", "N. Jain", "C. Williams" ],
      "venue" : "IEEE Infocom, 2011.  28",
      "citeRegEx" : "23",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Structure-aware stochastic storage management in smart grids",
      "author" : [ "Y. Zhang", "M. van der Schaar" ],
      "venue" : "IEEE Journal of Selected Topics in Signal Processing, vol. 8, no. 6, pp. 1098–1110, 2014.",
      "citeRegEx" : "24",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "The ode method for convergence of stochastic approximation and reinforcement learning",
      "author" : [ "V.S. Borkar", "S.P. Meyn" ],
      "venue" : "SIAM Journal on Control and Optimization, vol. 38, no. 2, pp. 447–469, 2000.",
      "citeRegEx" : "25",
      "shortCiteRegEx" : null,
      "year" : 2000
    }, {
      "title" : "Dynamic programming and optimal control",
      "author" : [ "D.P. Bertsekas" ],
      "venue" : "Athena Scientific Belmont, MA,",
      "citeRegEx" : "26",
      "shortCiteRegEx" : "26",
      "year" : 1995
    }, {
      "title" : "Puterman, Markov decision processes: discrete stochastic dynamic programming",
      "author" : [ "L. M" ],
      "venue" : null,
      "citeRegEx" : "27",
      "shortCiteRegEx" : "27",
      "year" : 2014
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Although cloud computing enables convenient access to a centralized pool of configurable computing resources, moving all the distributed data and computing-intensive applications to clouds (which are often physically located in remote megascale data centers) is simply out of the question, as it would not only pose an extremely heavy burden on today’s already-congested backbone networks [1] but also result in (sometimes intolerable) large transmission latencies that degrade the quality of service [2]–[4].",
      "startOffset" : 389,
      "endOffset" : 392
    }, {
      "referenceID" : 1,
      "context" : "Although cloud computing enables convenient access to a centralized pool of configurable computing resources, moving all the distributed data and computing-intensive applications to clouds (which are often physically located in remote megascale data centers) is simply out of the question, as it would not only pose an extremely heavy burden on today’s already-congested backbone networks [1] but also result in (sometimes intolerable) large transmission latencies that degrade the quality of service [2]–[4].",
      "startOffset" : 501,
      "endOffset" : 504
    }, {
      "referenceID" : 3,
      "context" : "Although cloud computing enables convenient access to a centralized pool of configurable computing resources, moving all the distributed data and computing-intensive applications to clouds (which are often physically located in remote megascale data centers) is simply out of the question, as it would not only pose an extremely heavy burden on today’s already-congested backbone networks [1] but also result in (sometimes intolerable) large transmission latencies that degrade the quality of service [2]–[4].",
      "startOffset" : 505,
      "endOffset" : 508
    }, {
      "referenceID" : 1,
      "context" : "As a remedy to the above limitations, mobile edge computing (MEC) [2]–[4] (a.",
      "startOffset" : 66,
      "endOffset" : 69
    }, {
      "referenceID" : 3,
      "context" : "As a remedy to the above limitations, mobile edge computing (MEC) [2]–[4] (a.",
      "startOffset" : 70,
      "endOffset" : 73
    }, {
      "referenceID" : 4,
      "context" : ", fog computing [5]) has recently emerged to enable in-situ processing of (some) workloads locally at the network edge without moving them to the cloud.",
      "startOffset" : 16,
      "endOffset" : 19
    }, {
      "referenceID" : 5,
      "context" : "However, providing reliable and stable grid power supply in remote areas and hazardous locations can be extremely costly and even infeasible since construction and operation of transmission lines are often prohibitive, and grid-tied servers can violate environmental quality regulations in rural areas that are ecologically sensitive [6].",
      "startOffset" : 334,
      "endOffset" : 337
    }, {
      "referenceID" : 6,
      "context" : "For instance, in many developing countries, the majority of base stations have to be powered by continuously operating diesel generators because the electric grid is too unreliable [7].",
      "startOffset" : 181,
      "endOffset" : 184
    }, {
      "referenceID" : 7,
      "context" : "sole power supply for edge systems in the field, thanks to the recent advancements of energy harvesting techniques [8], [9].",
      "startOffset" : 115,
      "endOffset" : 118
    }, {
      "referenceID" : 8,
      "context" : "sole power supply for edge systems in the field, thanks to the recent advancements of energy harvesting techniques [8], [9].",
      "startOffset" : 120,
      "endOffset" : 123
    }, {
      "referenceID" : 9,
      "context" : "It is well-known that MDP suffers from the so-called “curse of dimensionality” problem when the state space is large [10].",
      "startOffset" : 117,
      "endOffset" : 121
    }, {
      "referenceID" : 9,
      "context" : "The proposed PDS-based learning algorithm exploits the special structure of state transitions of the considered energy harvesting MEC system to conquer this challenge, thereby significantly improving both the learning convergence speed and the run-time performance compared with conventional online reinforcement learning algorithms such as Q-learning [10].",
      "startOffset" : 352,
      "endOffset" : 356
    }, {
      "referenceID" : 10,
      "context" : "The concept of MEC was proposed in 2014 as a new platform that provides IT and cloudcomputing capabilities within the radio access network in close proximity to mobile subscribers [11].",
      "startOffset" : 180,
      "endOffset" : 184
    }, {
      "referenceID" : 3,
      "context" : "Recently, the definition of edge devices gets broader, encompassing any devices that have computing resources along the path between data sources and cloud data centers [4].",
      "startOffset" : 169,
      "endOffset" : 172
    }, {
      "referenceID" : 4,
      "context" : "Fog computing [5] is a related concept that refers to the same computing paradigm.",
      "startOffset" : 14,
      "endOffset" : 17
    }, {
      "referenceID" : 3,
      "context" : "Compared with MCC, MEC has the advantages of achieving lower latency, saving energy, supporting context-aware computing, and enhancing privacy and security for mobile applications [4].",
      "startOffset" : 180,
      "endOffset" : 183
    }, {
      "referenceID" : 11,
      "context" : ", what/when/how to offload a user’s workload from its device to the edge system or cloud (see [12] and references therein).",
      "startOffset" : 94,
      "endOffset" : 98
    }, {
      "referenceID" : 11,
      "context" : "MEC servers are small-scale data centers and consume substantially less energy than the conventional cloud mega-scale data center [12].",
      "startOffset" : 130,
      "endOffset" : 134
    }, {
      "referenceID" : 7,
      "context" : "Off-grid renewable energy, such as solar radiation and wind energy, has recently emerged as a viable and promising power source for various IT systems thanks to the recent advancement of energy harvesting techniques [8], [9].",
      "startOffset" : 216,
      "endOffset" : 219
    }, {
      "referenceID" : 8,
      "context" : "Off-grid renewable energy, such as solar radiation and wind energy, has recently emerged as a viable and promising power source for various IT systems thanks to the recent advancement of energy harvesting techniques [8], [9].",
      "startOffset" : 221,
      "endOffset" : 224
    }, {
      "referenceID" : 12,
      "context" : "However, designing green MEC powered by renewable energy is much more challenging compared to green communication systems [13]–[15] or green data center networks [16] [7], [17], [18] since the radio and computation resources have to be jointly managed, whereas prior research typically only considers one of the two decisions.",
      "startOffset" : 122,
      "endOffset" : 126
    }, {
      "referenceID" : 14,
      "context" : "However, designing green MEC powered by renewable energy is much more challenging compared to green communication systems [13]–[15] or green data center networks [16] [7], [17], [18] since the radio and computation resources have to be jointly managed, whereas prior research typically only considers one of the two decisions.",
      "startOffset" : 127,
      "endOffset" : 131
    }, {
      "referenceID" : 15,
      "context" : "However, designing green MEC powered by renewable energy is much more challenging compared to green communication systems [13]–[15] or green data center networks [16] [7], [17], [18] since the radio and computation resources have to be jointly managed, whereas prior research typically only considers one of the two decisions.",
      "startOffset" : 162,
      "endOffset" : 166
    }, {
      "referenceID" : 6,
      "context" : "However, designing green MEC powered by renewable energy is much more challenging compared to green communication systems [13]–[15] or green data center networks [16] [7], [17], [18] since the radio and computation resources have to be jointly managed, whereas prior research typically only considers one of the two decisions.",
      "startOffset" : 167,
      "endOffset" : 170
    }, {
      "referenceID" : 16,
      "context" : "However, designing green MEC powered by renewable energy is much more challenging compared to green communication systems [13]–[15] or green data center networks [16] [7], [17], [18] since the radio and computation resources have to be jointly managed, whereas prior research typically only considers one of the two decisions.",
      "startOffset" : 172,
      "endOffset" : 176
    }, {
      "referenceID" : 17,
      "context" : "However, designing green MEC powered by renewable energy is much more challenging compared to green communication systems [13]–[15] or green data center networks [16] [7], [17], [18] since the radio and computation resources have to be jointly managed, whereas prior research typically only considers one of the two decisions.",
      "startOffset" : 178,
      "endOffset" : 182
    }, {
      "referenceID" : 15,
      "context" : "right-sizing) in data centers [16] dynamically controls the number of active servers, but the control knob of offloading to the cloud is not available in the context of data centers.",
      "startOffset" : 30,
      "endOffset" : 34
    }, {
      "referenceID" : 18,
      "context" : "For energy harvesting mobile devices, a dynamic computation offloading policy was proposed in [19] using Lyapunov optimization techniques [20] based on both information of the wireless channel and energy.",
      "startOffset" : 94,
      "endOffset" : 98
    }, {
      "referenceID" : 19,
      "context" : "For energy harvesting mobile devices, a dynamic computation offloading policy was proposed in [19] using Lyapunov optimization techniques [20] based on both information of the wireless channel and energy.",
      "startOffset" : 138,
      "endOffset" : 142
    }, {
      "referenceID" : 20,
      "context" : "Another study relevant to our work is [21], which also studies workload allocation/offloading in a cloud-fog computing system.",
      "startOffset" : 38,
      "endOffset" : 42
    }, {
      "referenceID" : 9,
      "context" : "A key advantage of our proposed algorithm is that it exploits the partial information of the edge computing system and the structure of the resource management problem, and thus it converges much faster than conventional reinforcement learning algorithms such as Q-learning [10].",
      "startOffset" : 274,
      "endOffset" : 278
    }, {
      "referenceID" : 21,
      "context" : "To the best knowledge of the authors, the conference version of this paper [22] was the first to study resource management for energy harvesting MEC servers (see related discussions in a recent comprehensive survey paper [12]).",
      "startOffset" : 75,
      "endOffset" : 79
    }, {
      "referenceID" : 11,
      "context" : "To the best knowledge of the authors, the conference version of this paper [22] was the first to study resource management for energy harvesting MEC servers (see related discussions in a recent comprehensive survey paper [12]).",
      "startOffset" : 221,
      "endOffset" : 225
    }, {
      "referenceID" : 21,
      "context" : "The present paper extents our findings in [22].",
      "startOffset" : 42,
      "endOffset" : 46
    }, {
      "referenceID" : 10,
      "context" : "SYSTEM MODEL As a major deployment method of mobile edge computing [11], we consider an edge system consisting of a base station and a set of edge servers, which are physically co-located and share the same power supply in the cell site.",
      "startOffset" : 67,
      "endOffset" : 71
    }, {
      "referenceID" : 13,
      "context" : "x λ(x, t)/[θ(x, t)(1−ρ(t))] by following the literature and modeling the base station as a queueing system [14].",
      "startOffset" : 107,
      "endOffset" : 111
    }, {
      "referenceID" : 5,
      "context" : "In a solar+wind system, photovoltaic modules and wind turbines can combine their output to power the edge system and charge the batteries [6].",
      "startOffset" : 138,
      "endOffset" : 141
    }, {
      "referenceID" : 22,
      "context" : "[23], [24].",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 23,
      "context" : "[23], [24].",
      "startOffset" : 6,
      "endOffset" : 10
    }, {
      "referenceID" : 9,
      "context" : "the value iteration and the policy iteration [10], in an offline manner.",
      "startOffset" : 45,
      "endOffset" : 49
    }, {
      "referenceID" : 23,
      "context" : "The proof follows [24].",
      "startOffset" : 18,
      "endOffset" : 22
    }, {
      "referenceID" : 24,
      "context" : "It is proven in [25] that the convergence of our proposed algorithm is equivalent to the convergence of the associated ordinary differential equation (O.",
      "startOffset" : 16,
      "endOffset" : 20
    }, {
      "referenceID" : 25,
      "context" : "is guaranteed [26].",
      "startOffset" : 14,
      "endOffset" : 18
    }, {
      "referenceID" : 26,
      "context" : "If the above is true, then we can apply [27] (Section 4.",
      "startOffset" : 40,
      "endOffset" : 44
    }, {
      "referenceID" : 9,
      "context" : "The proposed PDS-based learning algorithm is compared with three benchmark schemes: • Q-learning [10]: Q-learning is a famous model-free reinforcement learning technique for solving MDP problems.",
      "startOffset" : 97,
      "endOffset" : 101
    } ],
    "year" : 2017,
    "abstractText" : "Mobile edge computing (a.k.a. fog computing) has recently emerged to enable in-situ processing of delay-sensitive applications at the edge of mobile networks. Providing grid power supply in support of mobile edge computing, however, is costly and even infeasible (in certain rugged or under-developed areas), thus mandating on-site renewable energy as a major or even sole power supply in increasingly many scenarios. Nonetheless, the high intermittency and unpredictability of renewable energy make it very challenging to deliver a high quality of service to users in energy harvesting mobile edge computing systems. In this paper, we address the challenge of incorporating renewables into mobile edge computing and propose an efficient reinforcement learning-based resource management algorithm, which learns on-the-fly the optimal policy of dynamic workload offloading (to the centralized cloud) and edge server provisioning to minimize the long-term system cost (including both service delay and operational cost). Our online learning algorithm uses a decomposition of the (offline) value iteration and (online) reinforcement learning, thus achieving a significant improvement of learning rate and runtime performance when compared to standard reinforcement learning algorithms such as Q-learning. We prove the convergence of the proposed algorithm and analytically show that the learned policy has a simple monotone structure amenable to practical implementation. Our simulation results validate the efficacy of our algorithm, which significantly improves the edge computing performance compared to fixed or myopic optimization schemes and conventional reinforcement learning algorithms. J. Xu and L. Chen are with the Department of Electrical and Computer Engineering, University of Miami. Email: jiexu@miami.edu, lx.chen@miami.edu. S. Ren is with the Department of Electrical and Computer Engineering, University of California, Riverside. Email: sren@ece.ucr.edu",
    "creator" : "LaTeX with hyperref package"
  }
}