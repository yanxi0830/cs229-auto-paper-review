{
  "name" : "1702.00196.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Communication-Optimal Distributed Clustering∗",
    "authors" : [ "Jiecao Chen", "He Sun", "David P. Woodruff", "Qin Zhang" ],
    "emails" : [ "jiecchen@indiana.edu", "h.sun@bristol.ac.uk", "dpwoodru@us.ibm.com", "qzhangcs@indiana.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "∗A preliminary version of this paper appears at the 30th Annual Conference on Neural Information Processing Systems (NIPS), 2016. †Department of Computer Science, Indiana University, Bloomington, USA. Work supported in part by NSF CCF1525024 and IIS-1633215. Email: jiecchen@indiana.edu ‡Department of Computer Science, University of Bristol, Bristol, UK. h.sun@bristol.ac.uk §IBM Research Almaden, San Jose, USA. dpwoodru@us.ibm.com ¶Department of Computer Science, Indiana University, Bloomington, USA. Work supported in part by NSF CCF1525024 and IIS-1633215. Email: qzhangcs@indiana.edu\nar X\niv :1\n70 2.\n00 19\n6v 1\n[ cs\n.D S]\n1 F\neb 2\n01 7\nContents"
    }, {
      "heading" : "1 Introduction 1",
      "text" : "1.1 Our contributions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1.2 Related work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2"
    }, {
      "heading" : "2 Preliminaries 3",
      "text" : "2.1 Graph Laplacian . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 2.2 Spectral sparsification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 2.3 Models of computation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 2.4 Communication complexity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 2.5 Information complexity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5"
    }, {
      "heading" : "3 Distributed graph clustering 5",
      "text" : "3.1 The message passing model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 3.2 The blackboard model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8"
    }, {
      "heading" : "4 Distributed geometric clustering 9",
      "text" : "4.1 The message passing model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 4.2 The blackboard model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12"
    }, {
      "heading" : "5 Experiments 13",
      "text" : "5.1 Datasets. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 5.2 Results on clustering quality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 5.3 Results on communication costs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 5.4 Parameters in MsgPassing and Blackboard . . . . . . . . . . . . . . . . . . . . . . . 15"
    }, {
      "heading" : "1 Introduction",
      "text" : "Clustering is a fundamental task in machine learning with widespread applications in data mining, computer vision, and social network analysis. Example applications of clustering include grouping similar webpages by search engines, finding users with common interests in a social network, and identifying different objects in a picture or video. For these applications, one can model the objects that need to be clustered as points in Euclidean space Rd, where the similarities of two objects are represented by the Euclidean distance between the two points. Then the task of clustering is to choose k points as centers, so that the total distance between all input points to their corresponding closest center is minimized. Depending on different distance objective functions, three typical problems have been studied: k-means, k-median, and k-center.\nThe other popular approach for clustering is to model the input data as vertices of a graph, and the similarity between two objects is represented by the weight of the edge connecting the corresponding vertices. For this scenario, one is asked to partition the vertices into clusters so that the “highly connected” vertices belong to the same cluster. A widely-used approach for graph clustering is spectral clustering, which embeds the vertices of a graph into the points in Rk through the bottom k eigenvectors of the graph’s Laplacian matrix, and applies k-means on the embedded points.\nBoth the spectral clustering and the geometric clustering algorithms mentioned above have been widely used in practice, and have been the subject of extensive theoretical and experimental studies over the decades. However, these algorithms are designed for the centralized setting, and are not applicable in the setting of large-scale datasets that are maintained remotely by different sites. In particular, collecting the information from all the remote sites and performing a centralized clustering algorithm is infeasible due to high communication costs, and new distributed clustering algorithms with low communication cost need to be developed.\nThere are several natural communication models, and we focus on two of them: (1) a point-topoint model, and (2) a model with a broadcast channel. In the former, sometimes referred to as the message-passing model, there is a communication channel between each pair of users. This may be impractical, and the so-called coordinator model can often be used in place; in the coordinator model there is a centralized site called the coordinator, and all communication goes through the coordinator. This affects the total communication by a factor of two, since the coordinator can forward a message from one server to another and therefore simulate a point-to-point protocol. There is also an additional additive O(log s) bits per message, where s is the number of sites, since a server must specify to the coordinator where to forward its message. In the model with a broadcast channel, sometimes referred to as the blackboard model, the coordinator has the power to send a single message which is received by all s sites at once. This can be viewed as a model for single-hop wireless networks.\nIn both models we study the total number of bits communicated among all sites. Although the blackboard model is at least as powerful as the message-passing model, it is often unclear how to exploit its power to obtain better bounds for specific problems. Also, for a number of problems the communication complexity is the same in both models, such as computing the sum of s length-n bit vectors modulo two, where each site holds one bit vector [21], or estimating large moments [23]. Still, for other problems like set disjointness it can save a factor of s in the communication [5]."
    }, {
      "heading" : "1.1 Our contributions",
      "text" : "We present algorithms for graph clustering: for any n-vertex graph whose edges are arbitrarily partitioned across s sites, our algorithms have communication cost Õ(ns) in the message passing\nmodel, and have communication cost Õ(n + s) in the blackboard model, where the Õ notation suppresses polylogarithmic factors. The algorithm in the message passing model has each site send a spectral sparsifier of its local data to the coordinator, who then merges them in order to obtain a spectral sparsifier of the union of the datasets, which is sufficient for solving the graph clustering problem. Our algorithm in the blackboard model is technically more involved, as we show a particular recursive sampling procedure for building a spectral sparsifier can be efficiently implemented using a broadcast channel. It is unclear if other natural ways of building spectral sparsifiers can be implemented with low communication in the blackboard model. Our algorithms demonstrate the surprising power of the blackboard model for clustering problems. Since our algorithms compute spectral sparsifiers, they also have applications to solving symmetric diagonally dominant linear systems in a distributed model. Any such system can be converted into a system involving a Laplacian (see, e.g., [1]), from which a spectral sparsifier serves as a good preconditioner.\nNext we show that Ω(ns) bits of communication is necessary in the message passing model to even recover a constant fraction of a cluster, and Ω(n + s) bits of communication is necessary in the blackboard model. This shows the optimality of our algorithms up to poly-logarithmic factors.\nWe then study clustering problems in constant-dimensional Euclidean space. We show for any c > 1, computing a c-approximation for k-median, k-means, or k-center correctly with constant probability in the message passing model requires Ω(sk) bits of communication. We then strengthen this lower bound, and show even for bicriteria clustering algorithms, which may output a constant factor more clusters and a constant factor approximation, our Ω(sk) bit lower bound still holds. Our proofs are based on communication and information complexity. Our results imply that existing algorithms [3] for k-median and k-means with Õ(sk) bits of communication, as well as the folklore parallel guessing algorithm for k-center with Õ(sk) bits of communication, are optimal up to polylogarithmic factors. For the blackboard model, we present an algorithm for k-median and k-means that achieves an O(1)-approximation using Õ(s + k) bits of communication. This again separates the models.\nWe give empirical results which show that using spectral sparsifiers preserves the quality of spectral clustering surprisingly well in real-world datasets. For example, when we partition a graph with over 70 million edges (the Sculpture dataset) into 30 sites, only 6% of the input edges are communicated in the blackboard model and 8% are communicated in the message passing model, while the values of the normalized cut (the objective function of spectral clustering) given in those two models are at most 2% larger than the ones given by the centralized algorithm, and the visualized results are almost identical. This is strong evidence that spectral sparsifiers can be a powerful tool in practical, distributed computation. When the number of sites is large, the blackboard model incurs significantly less communication than the message passing model, e.g., in the Twomoons dataset when there are 90 sites, the message passing model communicates 9 times as many edges as communicated in the blackboard model, illustrating the strong separation between these models that our theory predicts."
    }, {
      "heading" : "1.2 Related work",
      "text" : "There is a rich literature on spectral and geometric clustering algorithms from various aspects (see, e.g., [2, 19, 20, 22]). Balcan et al. [3, 4] and Feldman et al. [10] study distributed k-means ([3] also studies k-median), and present provable guarantees on the clustering quality. Very recently Guha et al. [11] studied distributed k-median/center/means with outliers. Cohen et al. [7] study dimensionality reduction techniques for the input data matrices that can be used for distributed k-means. The main takeaway is that there is no previous work which develops protocols for spectral clustering in the common message passing and blackboard models, and lower bounds are lacking as\nwell. For geometric clustering, while upper bounds exist (e.g., [3, 4, 10]), no provable lower bounds in either model existed, and our main contribution is to show that previous algorithms are optimal. We also develop a new protocol in the blackboard model."
    }, {
      "heading" : "2 Preliminaries",
      "text" : "Let G = (V,E,w) be an undirected graph with n vertices, m edges, and weight function V × V → R≥0. The set of neighbors of a vertex v is represented by N(v), and its degree is dv = ∑ u∼v w(u, v).\nThe maximum degree of G is defined to be ∆(G) = maxv{dv}. For any set S ⊆ V , let µ(S) ,∑ v∈S dv. For any sets S, T ⊆ V , we define w(S, T ) , ∑ u∈S,v∈T w(u, v) to be the total weight of edges crossing S and T . We define the conductance of any set S by\nφ(S) = w(S, V \\ S)\nµ(S) .\nFor two sets X and Y , the symmetric difference of X and Y is defined as X4Y , (X \\Y )∪(Y \\X). For any matrix A ∈ Rn×n, let λ1(A) ≤ · · · ≤ λn(A) = λmax(A) be the eigenvalues of A. For any two matrices A,B ∈ Rn×n, we write A B to represent B−A is positive semi-definite (PSD). Notice that this condition implies that xᵀAx ≤ xᵀBx for any x ∈ Rn. Sometimes we also use a weaker notation (1− ε)A r B r (1 + ε)A to indicate that\n(1− ε)xᵀAx ≤ xᵀBx ≤ (1 + ε)xᵀAx\nfor all x in the row span of A."
    }, {
      "heading" : "2.1 Graph Laplacian",
      "text" : "The Laplacian matrix of G is an n × n matrix LG defined by LG = DG − AG, where AG is the adjacency matrix of G defined by AG(u, v) = w(u, v), and DG is the n × n diagonal matrix with DG(v, v) = dv for any v ∈ V [G]. Alternatively, we can write LG with respect to a signed edge-vertex incidence matrix : we assign every edge e = {u, v} an arbitrary orientation, and let BG(e, v) = 1 if v is e’s head, BG(e, v) = −1 if v is e’s tail, and BG(e, v) = 0 otherwise. We further define a diagonal matrix WG ∈ Rm×m, where WG(e, e) = we for any edge e ∈ E[G]. Then, we can write LG as LG = B ᵀ GWGBG. The normalized Laplacian matrix of G is defined by LG , D−1/2G LGD −1/2 G = I − D −1/2 G AGD −1/2 G . We sometimes drop the subscript G when the underlying graph is clear from the context."
    }, {
      "heading" : "2.2 Spectral sparsification",
      "text" : "For any undirected and weighted graph G = (V,E,w), we say a subgraph H of G with proper reweighting of the edges is a (1 + ε)-spectral sparsifier if\n(1− ε)LG LH (1 + ε)LG. (1)\nBy definition, it is easy to show that, if we decompose the edge set of a graph G = (V,E) into E1, . . . , E` for a constant ` and Hi is a spectral sparsifier of Gi = (V,Ei) for any 1 ≤ i ≤ `, then the graph formed by the union of edge sets from Hi is a spectral sparsifier of G. It is known that, for any undirected graph G of n vertices, there is a (1 + ε)-spectral sparsifier of G with O(n/ε2) edges, and it can be constructed in almost-linear time [15].\nThe following lemma shows that a spectral sparsifier preserves the clustering structure of a graph.\nLemma 2.1. Let H be a (1 + ε)-spectral sparsifier of G for some ε ≤ 1/3. Then, it holds for any set S ⊆ V that φH(S) ∈ ( 1 2 , 2 ) φG(S).\nProof. Let xu ∈ Rn be the indicator vector of vertex u, i.e., xu(v) = 1 if u = v, and xu(v) = 0 otherwise. We have that\n(1− ε) · xᵀuLGxu ≤ xᵀuLHxu ≤ (1 + ε) · xᵀuLGxu,\nwhich implies that (1− ε) · µG(S) ≤ µH(S) ≤ (1 + ε) · µG(S) for any subset S. Similarly, for any set S ⊆ V we define the indicator vector of S by xS ∈ Rn, where xS(u) = 1 if u ∈ S, and xS(u) = 0 otherwise. Hence, xᵀSLGxS = wG(S, V \\ S), and x ᵀ SLHxS = wH(S, V \\ S). Combining these with (1), we have that\n(1− ε) · wG(S, V \\ S) ≤ wH(S, V \\ S) ≤ (1 + ε) · wG(S, V \\ S).\nHence, for any subset S we have that\nφH(S) = wH(S, V \\ S) µH(S) ≤ (1 + ε)wG(S, V \\ S) (1− ε)µG(S) ≤ 2 · φG(S),\nwhere the last inequality holds by assuming ε ≤ 1/3. Similarly, we have that\nφH(S) = wH(S, V \\ S) µH(S) ≥ (1− ε)wG(S, V \\ S) (1 + ε)µG(S) ≥ 1 2 · φG(S).\nHence, φH(S) and φG(S) differ by at most a factor of 2 for any vertex set S."
    }, {
      "heading" : "2.3 Models of computation",
      "text" : "We study distributed clustering in two models for distributed data: the message passing model and the blackboard model. The message passing model represents those distributed computation systems with point-to-point communication, and the blackboard model represents those where messages can be broadcast to all parties.\nMore precisely, in the message passing model there are s sites P1, . . . ,Ps, and one coordinator. These sites can talk to the coordinator through a two-way private channel. In fact, this is referred to as the coordinator model in Section 1, where it is shown to be equivalent to the point-to-point model up to small factors. The input is initially distributed at the s sites. The computation is in terms of rounds: at the beginning of each round, the coordinator sends a message to some of the s sites, and then each of those sites that have been contacted by the coordinator sends a message back to the coordinator. At the end, the coordinator outputs the answer. In the alternative blackboard model, the coordinator is simply a blackboard where these s sites P1, . . . ,Ps can share information; in other words, if one site sends a message to the coordinator/blackboard then all the other s− 1 sites can see this information without further communication. The order for the sites to speak is decided by the contents of the blackboard.\nFor both models we measure the communication cost as the total number of bits sent through the channels. The two models are now standard in multiparty communication complexity (see, e.g., [5, 21, 23]). They are similar to the congested clique model [16] studied in the distributed computing community; the main difference is that in our models we do not post any bandwidth limitations at each channel but instead consider the total number of bits communicated."
    }, {
      "heading" : "2.4 Communication complexity",
      "text" : "For any problem A and any protocol Π solving A, the communication complexity of a protocol Π is the maximum communication cost of Π over all possible inputs X. When the protocol is randomised, we define the error of Π by\nmax X\nP (the coordinator outputs an incorrect answer on X) ,\nwhere the max is over all inputs X and the probability is over all random strings of the coordinator and s sites. The δ-error randomised communication complexity Rδ(A) of a problem A in the message passing model is the minimum communication complexity of any randomised protocol Π that solves A with error at most δ.\nLet µ be an input distribution on X. We call a deterministic protocol (δ, µ)-error if it gives the correct answer for A on at least a 1−δ fraction of all input pairs, weighted by the distribution µ. We denote Dδ,µ(A) as the cost of the minimum-communication (δ, µ)-error protocol. A standard lemma in communication complexity called Yao’s minimax lemma shows that Rδ(A) ≥ maxµDδ,µ(A)."
    }, {
      "heading" : "2.5 Information complexity",
      "text" : "We abuse notation by using Π for both the protocol and its transcript (its concatenation of messages). In the message passing model, let Πi (i ∈ [s]) be the transcript (set of messages exchanged) between the i-th site and the coordinator. Then Π can be seen as a concatenation Π1 ◦Π2 ◦ . . . ◦Πs ordered by the timestamps of the messages. We define the information complexity of a problem A in the message passing model by\nICµ,δ(A) = min (δ,µ)-error Π ∑ i∈[s] I(X1, . . . , Xs; Πi),\nwhere I(· ; ·) is the mutual information function. It has been shown in [12] that Rδ(A) ≥ ICδ,µ(A) for any input distribution µ."
    }, {
      "heading" : "3 Distributed graph clustering",
      "text" : "In this section we study distributed graph clustering. We assume that the vertex set of the input graph G = (V,E) can be partitioned into k clusters, where vertices in each cluster S are highly connected to each other, and there are fewer edges between S and V \\ S. To formalize this notion, we define the k-way expansion constant of graph G by\nρ(k) , min partition A1, . . . , Ak max 1≤i≤k φG(Ai).\nNotice that a graph G has k clusters if the value of ρ(k) is small. It was shown in [14] that ρ(k) closely relates to λk(LG) by the following higher-order Cheeger inequality:\nλk(LG) 2\n≤ ρ(k) ≤ O(k2) √ λk(LG).\nHence, a large gap between λk+1(LG) and ρ(k) implies (i) the existence of a k-way partition {Si}ki=1 such that every Si has small conductance φG(Si) ≤ ρ(k), and (ii) any (k + 1)-way partition of G\ncontains a subset with high conductance ρ(k + 1) ≥ λk+1(LG)/2. Therefore, a large gap between λk+1(LG) and ρ(k) ensures that G has exactly k clusters. In the following, we assume that\nΥ , λk+1(LG)/ρ(k) = Ω(k3)\nto ensure that the input graph G has exactly k clusters. The same assumption has been used in the literature for studying graph clustering in the centralized setting [20].\nBoth algorithms presented in the section are based on the following spectral clustering algorithm: (i) compute the k eigenvectors f1, . . . , fk of LG associated with λ1(LG), . . . , λk(LG); (ii) embed every vertex v to a point in Rk through the embedding\nF (v) = 1√ dv · (f1(v), . . . , fk(v));\n(iii) run k-means on the embedded points {F (v)}v∈V , and group the vertices of G into k clusters according to the output of k-means."
    }, {
      "heading" : "3.1 The message passing model",
      "text" : "We assume the edges of the input graph G = (V,E) are arbitrarily allocated among s sites P1, · · · ,Ps, and we use Ei to denote the edge set maintained by site Pi. Our proposed algorithm consists of two steps: (i) every Pi computes a linear-sized (1 + ε)-spectral sparsifier Hi of Gi , (V,Ei), for a small constant ε ≤ 1/10, and sends the edge set of Hi, denoted by E′i, to the coordinator; (ii) the coordinator runs a spectral clustering algorithm on the union of received graphs\nH , ( V, ⋃k i=1E ′ i ) . The theorem below summarizes the performance of this algorithm, and shows the approximation guarantee of this algorithm is as good as the provable guarantee of spectral clustering known in the centralized setting, which is shown in the lemma below.\nLemma 3.1 ([20]). Let G be a graph satisfying the condition Υ = Ω(k3), and k ∈ N. Then, a spectral clustering algorithm outputs sets A1, . . . , Ak such that µ(Ai4Si) = O ( k3 ·Υ−1 · µ(Si) ) holds for any 1 ≤ i ≤ k, where Si is the optimal cluster corresponding to Ai.\nTheorem 3.2. Let G = (V,E) be an n-vertex graph with Υ = Ω(k3), and suppose the edges of G are arbitrarily allocated among s sites. Assume S1, · · · , Sk is an optimal partition that achieves ρ(k). Then, the algorithm above computes a partition A1, . . . , Ak satisfying µ(Ai4Si) = O ( k3 ·Υ−1 · µ(Si) ) for any 1 ≤ i ≤ k. The total communication cost of this algorithm is Õ(ns) bits.\nProof. By the definition of the Laplacian matrix, we have that LG = ∑s\ni=1 LGi . Since every Hi is a (1 + ε)-spectral sparsifier of graph Gi, we have that (1 − ε)LHi LGi (1 + ε)LHi . This implies that (1− ε)LH LG (1 + ε)LH , by the definition of Hi and graph Laplacians. Now we show that our assumption on Υ is preserved in H. By Lemma 2.1, we have for any 1 ≤ i ≤ k that φH(Si) ∈ ( 1 2 , 2 ) φG(Si), which implies that Si has low conductance in H, and ρH(k) ∈ ( 1 2 , 2 ) ρG(k). To show that λk(LH) is a constant approximation of λk(LG), notice that\n(1− c) · xᵀLGx ≤ xᵀLHx ≤ (1 + c) · xᵀLGx\nholds for any x ∈ Rn. Hence it holds for any x ∈ Rn that\n(1− ε) · xᵀD−1/2G LGD −1/2 G x ≤ x ᵀD −1/2 G LHD −1/2 G x ≤ (1 + ε) · x ᵀD −1/2 G LGD −1/2 G x.\nSince D −1/2 G LGD −1/2 G = LG and 1 2D −1 G D −1 H 2D −1 G , we have that λi (LH) = Θ (λi (LG)), and the assumption on Υ in H is preserved from G up to a constant factor. By Lemma 3.1, the output of a spectral clustering algorithm on H satisfies the claimed properties. The total communication cost of Õ(ns) bits follows from the fact that every Hi has O(n) edges.\nNext we show that the communication cost of our proposed algorithm is optimal up to a logarithmic factor. Our analysis is based on a reduction from graph clustering to the Multiparty Set-Disjointness problem (DISJs,n): for any s sites P1, . . . ,Ps, where each Pi has a set Si ⊆ [n], let Xi = (X 1 i , . . . , X n i ) be the characteristic vector of Si, and let X = (X1, . . . , Xs) be the input matrix with Xi being the i-th row. Let X j = (Xj1 , . . . , X j s ) be the j-th column of the input matrix\nX. We define a function ALLONEs on an s-bit vector Y = (Y1, . . . , Ys) as ALLONEs(Y ) = ∧ i∈[s] Yi,\nand DISJs,n(X) = ∨ j∈[n] ALLONEs(X\nj). Then the DISJs,n problem asks the value of DISJs,n(X). We introduce two hard input distributions for ALLONEs and DISJs,n respectively.\n• Hard input distribution ν on Y ∈ {0, 1}s for ALLONEs: with probability 1/2, we choose each Yi (i ∈ [s]) to be 0 or 1 with equal probability; with probability 1/4 we choose Y to be an all-1 vector; and with the remaining probability 1/4 we choose Y to be a random vector with n− 1 coordinates being 1’s and a random coordinate being 0.\n• Hard input distribution µn on X ∈ {0, 1}s×n for DISJs,n: For each j ∈ [n], we choose Xj ∼ ν.\nTheorem 3.3 ([5]). It holds that IC0.49,ν(ALLONEs) = Ω(s), and IC0.49,ν(DISJs,n) = Ω(sn).\nLemma 3.4. In the message passing model, any randomized algorithm that computes DISJs,n correctly with probability 0.9 needs Ω(sn) bits of communication.\nProof. The lemma follows from Theorem 3.3 and Yao’s minimax lemma.\nTheorem 3.5. Let G be an undirected graph with n vertices, and suppose the edges of G are distributed among s sites. Then, any algorithm that correctly outputs a constant fraction of a cluster in G requires Ω(ns) bits of communication. This holds even if each cluster has constant expansion.\nProof. Our proof is based on the reduction from graph clustering to the Multiparty Set-Disjointness problem (DISJs,n). For any item j and site Pi, we set Xji = 0 if item j appears in site Pi, and Xji = 1 otherwise. Then DISJs,n(X) = 1 if there is some item not appearing in any site. Now we construct a graph G based on the hard instance X of DISJn,s as follows: initially, graph G consists of n isolated vertices `1, . . . , `n, and r isolated vertices r1, . . . , rs. Then, we add an edge between `j and ri if item j appears in site Pi. With this construction, it is easy to see that DISJs,n(X) = 0 if every vertex `j is connected to some ri, and DISJs,n(X) = 1 if there are some isolated vertices `j .\nWe will show that, when DISJs,n(X) = 0, our constructed graph G is a bipartite expander, i.e., G has only 1 cluster. To prove this, notice that, from the hard input distribution µ on Y ∈ {0, 1}s described above, with probability 1/2 we choose each Yi(i ∈ [s]) to be 0 or 1 with equal probability. This implies that, for any `i and rj , there is an edge between `i and rj independently with probability at least 1/4. By standard results on constructing expanders, this implies G is a bipartite expander with constant expansion, and in particular is connected.\nOn the other side, when DISJs,n(X) = 1, every isolated vertex `j itself forms a cluster with conductance 0 and constant expansion, and the giant component of G forms a cluster with conductance 0 and constant expansion (since, as argued in the previous paragraph, it is a bipartite expander). Let k be the number of connected components in graph G. Then, ρ(k) = 0, and our\nassumption on Υ = λk+1(LG)/ρ(k) = Ω(k3) holds trivially. Hence any clustering algorithm that is able to find a constant fraction of each cluster in graph G satisfying Υ = Ω(k3) can be used to solve DISJs,n. The lower bound on the communication complexity of graph clustering follows from the lower bound for DISJs,n.\nAs a remark, it is easy to see that this lower bound also holds for constructing spectral sparsifiers: for any n×n PSD matrix A whose entries are arbitrarily distributed among s sites, any distributed algorithm that constructs a (1+Θ(1))-spectral sparsifier of A requires Ω(ns) bits of communication. This follows since such a spectral sparsifier can be used to solve the spectral clustering problem. Spectral sparsification has played an important role in designing fast algorithms from different areas, e.g., machine learning, and numerical linear algebra. Hence our lower bound result for constructing spectral sparsifiers may have applications to studying other distributed learning algorithms."
    }, {
      "heading" : "3.2 The blackboard model",
      "text" : "Next we present a graph clustering algorithm with Õ(n + s) bits of communication cost in the blackboard model. Our result is based on the observation that a spectral sparsifier preserves the structure of clusters, which was used for proving Theorem 3.2. So it suffices to design a distributed algorithm for constructing a spectral sparsifier in the blackboard model.\nOur distributed algorithm is based on constructing a chain of coarse sparsifiers [18], which is described as follows: for any input PSD matrix K with λmax(K) ≤ λu and all the non-zero eigenvalues of K at least λ`, we define d = dlog2(λu/λ`)e and construct a chain of d+ 1 matrices\n[K(0),K(1), . . . ,K(d)], (2)\nwhere γ(i) = λu/2 i and K(i) = K+γ(i)I. Notice that in the chain above every K(i−1) is obtained by adding weights to the diagonal entries of K(i), and K(i− 1) approximates K(i) as long as the weights added to the diagonal entries are small. We will construct this chain recursively, so that K(0) has heavy diagonal entries and can be approximated by a diagonal matrix. Moreover, since K is the Laplacian matrix of a graph G, it is easy to see that d = O(log n) as long as the edge weights of G are polynomially upper-bounded in n.\nLemma 3.6 ([18]). The chain (2) satisfies the following relations: (1) K r K(d) r 2K; (2) K(`) K(`− 1) 2K(`) for all ` ∈ {1, . . . , d}; (3) K(0) 2γ(0)I 2K(0).\nBased on Lemma 3.6, we will construct a chain of matrices[ K̃(0), K̃(1), . . . , K̃(d) ] (3)\nin the blackboard model, such that every K̃(`) is a spectral sparsifier of K(`), and every K̃(`+ 1) can be constructed from K̃(`). The basic idea behind our construction is to use the relations among different K(`) shown in Lemma 3.6 and the fact that, for any K = BᵀB, sampling rows of B with respect to their leverage scores can be used to obtain a matrix approximating K.\nTheorem 3.7. Let G be an undirected graph on n vertices, where the edges of G are allocated among s sites, and the edge weights are polynomially upper bounded in n. Then, a spectral sparsifier of G can be constructed with Õ(n+ s) bits of communication in the blackboard model. That is, the chain (3) can be constructed with Õ(n+ s) bits of communication in the blackboard model.\nProof. Let K = BᵀB be the Laplacian matrix of the underlying graph G, where B ∈ Rm×n is the edge-vertex incidence matrix of G. We will prove that every K̃(i+ 1) can be constructed based on K̃(i) with Õ(n+ s) bits of communication. This implies that K̃(d), a (1 + ε)-spectral sparsifier of K, can be constructed with Õ(n+s) bits of communication, as the length of the chain d = O(log n).\nFirst of all, notice that λu ≤ 2n, and the value of n can be obtained with communication cost Õ(n + s) (different sites sequentially write the new IDs of the vertices on the blackboard). In the following we assume that λu is the upper bound of λmax that we actually obtained in the blackboard.\nBase case of ` = 0: By definition, K(0) = K + λu · I, and 12 · K(0) γ(0) · I K(0), due to Statement 3 of Lemma 3.6. Let ⊕ denote appending the rows of one matrix to another. We define Bγ(0) = B ⊕ √ γ(0) · I, and write K(0) = K + γ(0) · I = Bᵀγ(0)Bγ(0). By defining τi = b ᵀ i (K(0)) ᵀ bi for each row of Bγ(0), we have τi ≤ b ᵀ i (γ(0) · I) bi ≤ 2 ·τi. Let τ̃i = b ᵀ i (γ(0) · I)\n+ bi be the leverage score of bi approximated using γ(0) · I, and let τ̃ be the vector of approximate leverage scores, with the leverage scores of the n rows corresponding to √ γ(0) · I rounded up to 1. Then, with high probability sampling O(ε−2n log n) rows of B will give a matrix K̃(0) such that (1 − ε)K(0) K̃(0) (1 + ε)K(0). Notice that, as every row of B corresponds to an edge of G, the approximate leverage scores τ̃i for different edges can be computed locally by different sites maintaining the edges, and the sites only need to send the information of the sampled edges to the blackboard, hence the communication cost is Õ(n+ s) bits.\nInduction step: We assume that (1 − ε)K(`) r K̃(`) r (1 + ε)K(`), and the blackboard maintains the matrix K̃(`). This implies that (1 − ε)/(1 + ε) ·K(`) r 1/(1 + ε) · K̃(`) r K(`). Combining this with Statement 2 of Lemma 3.6, we have that\n1− ε 2(1 + ε) K(`+ 1) r 1 2(1 + ε) K̃(`) K(`+ 1).\nWe apply the same sampling procedure as in the base case, and obtain a matrix K̃(`+ 1) such that (1−ε)K(`+1) r K̃(`+1) r (1+ε)K(`+1). Notice that, since K̃(`) is written on the blackboard, the probabilities used for sampling individual edges can be computed locally by different sites, and in each round only the sampled edges will be sent to the blackboard in order for the blackboard to obtain K̃(`+1). Hence, the total communication cost in each iteration is Õ(n+s) bits. Combining this with the fact that the chain length d = O(log n) proves the theorem.\nCombining Theorem 3.7 and the fact that a spectral sparsifier preserves the structure of clusters, we obtain a distributed algorithm in the blackboard model with total communication cost Õ(n+s) bits, and the performance of our algorithm is the same as in the statement of Theorem 3.2. Notice that Ω(n + s) bits of communication are needed for graph clustering in the blackboard model, since the output of a clustering algorithm contains Ω(n) bits of information and each site needs to communicate at least one bit. Hence the communication cost of our proposed algorithm is optimal up to a poly-logarithmic factor."
    }, {
      "heading" : "4 Distributed geometric clustering",
      "text" : "We now consider geometric clustering, including k-median, k-means and k-center. Let P be a set of points of size n in a metric space with distance function d(·, ·), and let k ≤ n be an integer. In the k-center problem we want to find a set C (|C| = k) such that maxp∈P d(p, C) is minimized, where d(p, C) = minc∈C d(p, c). In k-median and k-means we replace the objective function maxp∈P d(p, C) with ∑ p∈P d(p, C) and ∑ p∈P (d(p, C)) 2, respectively."
    }, {
      "heading" : "4.1 The message passing model",
      "text" : "As mentioned, for constant dimensional Euclidean space and a constant c > 1, there are algorithms that c-approximate k-median and k-means using Õ(sk) bits of communication [3]. For k-center, the folklore parallel guessing algorithms (see, e.g., [9]) achieve a 2.01-approximation using Õ(sk) bits of communication.\nThe following theorem states that the above upper bounds are tight up to logarithmic factors. The proof uses tools from multiparty communication complexity. We in fact can prove a stronger statement that any algorithm that can differentiate whether we have k points or k + 1 points in total in the message passing model needs Ω(sk) bits of communication.\nTheorem 4.1. For any c > 1, computing c-approximation for k-median, k-means or k-center correctly with probability 0.99 in the message passing model needs Ω(sk) bits of communication.\nProof. We can in fact prove a more general result: we can show that the Ω(sk) lower bound holds for any eligible function which evaluates to 0 if there are at most k points, and evaluates to a value greater than 0 if there are at least k + 1 points. Note that k-median, k-means and k-center are all eligible functions. We prove this by a simple reduction from DISJs,` where ` = (k + 1)/2 (w.l.o.g., assuming k is odd).\nThe reduction is as follows. Given an s-player set-disjointness instance of size ` (i.e., DISJs,`), let Xi = (X 1 i , . . . , X ` i ) be the i-th row of the input matrix X. Let p\n1, . . . , p` and q1, . . . , q` be 2` distinct point locations on a line under Euclidean distance. Each site i does the following: for each coordinate j, if Xji = 0 then it put a point u j i at location q\nj ; otherwise if Xji = 1 it put a point at location pj . It is easy to see that DISJs,` = 1 if and only if the number of distinct points in⋃ i∈[s],j∈[`] u\nj i is 2(` − 1) + 1 = k; and DISJs,` = 1 if and only if the number of distinct points in⋃\ni∈[s],j∈[`] u j i is 2(`−1)+2 = k+1. The lower bound follows from the definition of eligible function\nand Theorem 3.3.\nA number of works on clustering consider bicriteria solutions (e.g., [6, 13]). An algorithm is a (c1, c2)-approximation (c1, c2 > 1) if the optimal solution costs W when using k centers, then the output of the algorithm costs at most c1W when using at most c2k centers. We can show that for k-median and k-means, the Ω(sk) lower bound holds even for algorithms with bicriteria approximations.\nTheorem 4.2. For any c ∈ [1, 1.01], computing (7.1−6c, c)-bicriteria-approximation for k-median or k-means correctly with probability 0.99 in the message passing model needs Ω(sk) bits of communication.\nBefore proving Theorem 4.2, we first show the following technical lemma.\nLemma 4.3. In the message-passing model, Ω(s`) bits of communication is needed for computing at least a 0.8 fraction of j ∈ [`] ALLONEs(Xj) correctly with probability 0.99 under the input distribution X ∼ µ`.\nProof. By a Markov inequality, there must exist Ω(s) coordinates j such that the algorithm computes ALLONEs(X j) (Xj ∼ ν) with error probability at most 0.24. Call each of these coordinates\nj good. Let Π be the protocol transcript. We have I(X; Π) = ∑ j∈[`] I(Xj ; Π | X−j)\n≥ ∑ j∈[`] I(Xj ; Π) (Xj and X−j are independent)\n≥ ∑\ngood j\nI(Xj ; Π)\n≥ Ω(s) · IC0.24,ν(ALLONEs) ≥ Ω(s`). (Theorem 3.3)\nNow we are ready to prove the theorem.\nProof of Theorem 4.2. We consider 8` point locations on a line (under Euclidean distance) with x-coordinates being 1, 2, . . . , 8`. We put a point with infinite weight at every even point location. We name the 4` odd point locations from left to right as\np1, q1, p2, q2, . . . , p`, q`, z1, z2, . . . , z2`.\nFor each site i ∈ [s] and each column j ∈ [`], if Xji = 0 then we put a point with weight 1 at location qj ; otherwise if Xji = 1 then we put a point with weight 1 at location p\nj . We also put a point with weight 1/2 at each of the “dummy” locations z1, . . . , z2`. Let the weight of a location be the sum of the weights of points falling into that location.\nGiven such an input X, for both k-median and k-means, the optimal solution (OPT) which is allowed to use k = 6` centers will include all locations pj and qj whose weights are at least 1 (note that there are at most 2` such locations), the 4` even point locations, and as many as dummy locations that it can still include. The cost of the optimal solution will be precisely the cost of linking the points in the rest of the dummy locations to their nearest centers (at the even locations), which can be written as\nOPT = 1/2 · (k/3− (k/3− F0)) = 1/2 · F0 ≤ `,\nwhere F0 is the number of locations in {p1, q1, . . . , p`, q`} that have weights at least 1. Now suppose our solution (SOL) outputs ck centers for a constant c ∈ [1, 1.01]. Each time we include a location qj as a center when there is no 0-coordinate in the input column Xj , we have a loss of 1/2 since we miss out on including a dummy location (i.e., we can take one more dummy location instead of taking qj as a center). Similarly, each time we do not include a location qj as a center when there is a 0-coordinate in Xj , we have a loss of 1/2 since a point at qj has weight at least 1 but a point at a dummy location has weight at 1/2. Therefore, even if we are allowed to output ck medians, we will still need to figure out whether there is any point at location qj for at least an α = 0.9 fraction of the coordinates j ∈ [`]. If not, then\nSOL− OPT ≥ 1/2 · (1− α)`− 1 · (c− 1)k (4)\n= (1− α)− 12(c− 1)\n2 · `\n≥ (6.1− 6c)OPT,\nwhere the first term in the RHS of (4) counts the loss of incorrectly computing the (at least) (1−α)` coordinates j ∈ [`], and the second term counts the maximum gain of the extra (c − 1)k centers SOL can use (compared with OPT).\nBy Lemma 4.3, we have that for any c ∈ [1, 1.01], computing (7.1−6c, c)-bicriteria-approximation for k-median or k-means in the message passing model correctly with probability 0.9 under distribution X ∼ µ needs Ω(sk) bits of communication. The theorem follows by Yao’s minimax principle."
    }, {
      "heading" : "4.2 The blackboard model",
      "text" : "We can show that there is an algorithm that achieves an O(1)-approximation using Õ(s + k) bits of communication for k-median and k-means. For k-center, it is straightforward to implement the parallel guessing algorithm in the blackboard model using Õ(s+ k) bits of communication.\nOur algorithm for k-median/means is an easy adaptation of the successive sampling algorithm proposed by Mettu and Plaxton [17] in the (centralized) RAM model. We first summarize their algorithm and then describe how to port it to the blackboard model.\nLet X1, . . . Xs be the point sets at sites P1, . . . ,Pk respectively. The successive sampling algorithm proceeds in rounds. At each round j it does the following:\n1. s sites jointly sample O(k) point centers, denoted by Yj ;\n2. s sites grow balls from each of the point centers in Yj synchronously until a time step when a 0.9 fraction of points in ⋃ i∈[s]Xi are covered;\n3. each site Pi updates Xj by removing those points that are covered by any of the balls centered at points in Yj ;\n4. s sites remove all the points covered by balls centered at points in Yj , and proceed to the next round j + 1.\nIt is easy to see that the computation will finish in r = O(log n) rounds since at each round we remove a constant fraction of points. At the end we compute an O(1)-approximation of k-median or k-means on the O(k log n) points ⋃ j∈[r] Yj . In [17] it has been shown that this algorithm gives an O(1)-approximation to k-median or k-means with high probability. We now describe how to implement this centralized algorithm in the blackboard model. We first consider each round. Step 1 can be done by the distributed sampling algorithm in [8] using Õ(k + s) bits of communication; note that at the end of this step the sampled points in Yj are written on the blackboard. Step 2 can be done by a binary search for the minimum ball radius tj such that ⋃ p∈Yj Ball(p, tj) covers at least a 0.9 fraction of points in ⋃ i∈[s]Xi, where Ball(p, tj) denotes the ball centered at p with radius tj ; this binary search can be done using Õ(1) bits of communication. Step 3 and 4 can be done locally without any communication. After r rounds, the final clustering step can be done by any of the s sites since all points in ⋃ j∈[r] Yj have already been written on the blackboard. Therefore the total communication cost can be bounded by Õ(k + s). Finally, we would like to mention that Ω(k+ s) is an obvious lower bound, and thus our upper bound is tight up to logarithmic factors. To see this, notice that k is the size of the output, and the coordinator has to communication with each of the s sites for at least 1 bit."
    }, {
      "heading" : "5 Experiments",
      "text" : "In this section we present experimental results for graph clustering in the message passing and blackboard models. We will compare the following three algorithms. (1) Baseline: each site sends all the data to the coordinator directly; (2) MsgPassing: our algorithm in the message passing model (Section 3.1); (3) Blackboard: our algorithm in the blackboard model (Section 3.2).\nBesides giving the visualized results of these algorithms on various datasets, we also measure the qualities of the results via the normalized cut, defined as\nncut(A1, . . . , Ak) = 1\n2 ∑ i∈[k] w(Ai, V \\Ai) µ(Ai) ,\nwhich is a standard objective function to be minimized for spectral clustering algorithms. We implemented the algorithms using multiple languages, including Matlab, Python and C++. Our experiments were conducted on an IBM NeXtScale nx360 M4 server, which is equipped with 2 Intel Xeon E5-2652 v2 8-core processors, 32GB RAM and 250GB local storage."
    }, {
      "heading" : "5.1 Datasets.",
      "text" : "We test the algorithms in the following real and synthetic datasets, which is visualized in Figure 1.\n• Twomoons: this dataset contains n = 14, 000 coordinates in R2. We consider each point to be a vertex. For any two vertices u, v, we add an edge with weight w(u, v) = exp{−‖u−v‖22/σ2} with σ = 0.1 when one vertex is among the 7000-nearest points of the other. This construction results in a graph with about 110, 000, 000 edges.\n• Gauss: this dataset contains n = 10, 000 points in R2. There are 4 clusters in this dataset, each generated using a Gaussian distribution. We construct a complete graph as the similarity graph. For any two vertices u, v, we define the weight w(u, v) = exp{−‖u − v‖22/σ2} with σ = 1. The resulting graph has about 100, 000, 000 edges.\n• Sculpture: a photo of The Greek Slave 1. We use an 80 × 150 version of this photo where each pixel is viewed as a vertex. To construct a similarity graph, we map each pixel to a point in R5, i.e., (x, y, r, g, b), where the latter three coordinates are the RGB values. For any two vertices u, v, we put an edge between u, v with weight w(u, v) = exp{−‖u−v‖22/σ2} with σ = 0.5 if one of u, v is among the 5000-nearest points of the other. This results in a graph with about 70, 000, 000 edges.\nIn the distributed model edges are randomly partitioned across s sites.\n1Available in e.g., http://artgallery.yale.edu/collections/objects/14794"
    }, {
      "heading" : "5.2 Results on clustering quality",
      "text" : "We visualize the clustered results for the Twomoons, Gauss and Sculpture in Figure 2. It can be seen that Baseline, MsgPassing and Blackboard give results of very similar qualities. For simplicity, here we only present the visualization for s = 15. Similar results were observed when we varied the values of s.\nWe also compare the normalized cut (ncut) values of the clustering results of different algorithms. The results are presented in Figure 3. In all datasets, the ncut values of different algorithms are very close. The ncut value of MsgPassing slightly decreases when we increase the value of s, while the ncut value of Blackboard is independent of s."
    }, {
      "heading" : "5.3 Results on communication costs",
      "text" : "We compare the communication costs of different algorithms in Figure 4. We observe that while achieving similar clustering qualities as Baseline, both MsgPassing and Blackboard are significantly more communication-efficient (by one or two orders of magnitudes in our experiments). We also notice that the value of s does not affect the communication cost of Blackboard, while the communication cost of MsgPassing grows almost linearly with s; when s is large, MsgPassing uses significantly more communication than Blackboard. These confirm our theory.\n5.4 Parameters in MsgPassing and Blackboard\nFigure 5 shows in MsgPassinghow the value of ncut is affected by the number of sites and the number of edges sampled in each site. Here, each site samples cn edges. When c = 3 and s = 1, the ncut value diverges in all datasets. This is because with such a small c, the algorithm does not generate a valid sparsifier. In general, increasing c or s will slightly decrease the ncut value. But\nonce they are above some thresholds, the ncut values of MsgPassing and Baseline become very close.\nFigure 6 shows in Blackboardhow the ncut value is affected by the number of iterations and the number of edges sampled. When the number of iterations is set to be 5, ncut values diverge in all datasets. This is because we cannot expect to generate a valid sparsifier by using such few iterations. It can be seen from 6(b) that for a fixed c, performing more iterations will help to reduce ncut values. From the same figure, one can also conclude that for fixed iterations, increasing c also helps to reduce the ncut values."
    } ],
    "references" : [ {
      "title" : "On sketching quadratic forms",
      "author" : [ "Alexandr Andoni", "Jiecao Chen", "Robert Krauthgamer", "Bo Qin", "David P. Woodruff", "Qin Zhang" ],
      "venue" : "In ITCS,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2016
    }, {
      "title" : "k-means++: The advantages of careful seeding",
      "author" : [ "David Arthur", "Sergei Vassilvitskii" ],
      "venue" : "In SODA,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2007
    }, {
      "title" : "Distributed k-means and k-median clustering on general communication topologies",
      "author" : [ "Maria-Florina Balcan", "Steven Ehrlich", "Yingyu Liang" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2013
    }, {
      "title" : "Improved distributed principal component analysis",
      "author" : [ "Maria-Florina Balcan", "Vandana Kanchanapally", "Yingyu Liang", "David P. Woodruff" ],
      "venue" : "CoRR, abs/1408.5823,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2014
    }, {
      "title" : "A tight bound for set disjointness in the message-passing model",
      "author" : [ "Mark Braverman", "Faith Ellen", "Rotem Oshman", "Toniann Pitassi", "Vinod Vaikuntanathan" ],
      "venue" : "In FOCS,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2013
    }, {
      "title" : "Algorithms for facility location problems with outliers",
      "author" : [ "Moses Charikar", "Samir Khuller", "David M. Mount", "Giri Narasimhan" ],
      "venue" : "In SODA,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2001
    }, {
      "title" : "Dimensionality reduction for k-means clustering and low rank approximation",
      "author" : [ "Michael B. Cohen", "Sam Elder", "Cameron Musco", "Christopher Musco", "Madalina Persu" ],
      "venue" : "In STOC,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2015
    }, {
      "title" : "Continuous sampling from distributed streams",
      "author" : [ "Graham Cormode", "S. Muthukrishnan", "Ke Yi", "Qin Zhang" ],
      "venue" : "J. ACM,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2012
    }, {
      "title" : "Conquering the divide: Continuous clustering of distributed data streams",
      "author" : [ "Graham Cormode", "S Muthukrishnan", "Wei Zhuang" ],
      "venue" : "In ICDE,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2007
    }, {
      "title" : "Turning big data into tiny data: Constant-size coresets for k -means, PCA and projective clustering",
      "author" : [ "Dan Feldman", "Melanie Schmidt", "Christian Sohler" ],
      "venue" : "In SODA,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2013
    }, {
      "title" : "Distributed partial clustering",
      "author" : [ "Sudipto Guha", "Yi Li", "Qin Zhang" ],
      "venue" : null,
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2017
    }, {
      "title" : "Communication complexity of approximate matching in distributed graphs",
      "author" : [ "Zengfeng Huang", "Bozidar Radunovic", "Milan Vojnovic", "Qin Zhang" ],
      "venue" : "In STACS,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2015
    }, {
      "title" : "Analysis of a local search heuristic for facility location problems",
      "author" : [ "Madhukar R. Korupolu", "C. Greg Plaxton", "Rajmohan Rajaraman" ],
      "venue" : "In SODA,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 1998
    }, {
      "title" : "Multi-way spectral partitioning and higher-order cheeger inequalities",
      "author" : [ "James R. Lee", "Shayan Oveis Gharan", "Luca Trevisan" ],
      "venue" : "In STOC,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2012
    }, {
      "title" : "Constructing linear-sized spectral sparsification in almost-linear time",
      "author" : [ "Yin Tat Lee", "He Sun" ],
      "venue" : "In FOCS,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2015
    }, {
      "title" : "MST construction in O(log log n) communication rounds",
      "author" : [ "Zvi Lotker", "Elan Pavlov", "Boaz Patt-Shamir", "David Peleg" ],
      "venue" : "In SPAA,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2003
    }, {
      "title" : "Optimal time bounds for approximate clustering",
      "author" : [ "Ramgopal R. Mettu", "C. Greg Plaxton" ],
      "venue" : "Machine Learning,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2004
    }, {
      "title" : "Iterative approaches to row sampling",
      "author" : [ "Gary L. Miller", "Richard Peng" ],
      "venue" : "CoRR, abs/1211.2713,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2012
    }, {
      "title" : "On spectral clustering: Analysis and an algorithm",
      "author" : [ "Andrew Y. Ng", "Michael I. Jordan", "Yair Weiss" ],
      "venue" : "Advances in neural information processing systems,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2002
    }, {
      "title" : "Partitioning well-clustered graphs: Spectral clustering works",
      "author" : [ "Richard Peng", "He Sun", "Luca Zanetti" ],
      "venue" : "In COLT, pages 1423–1455,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2015
    }, {
      "title" : "Lower bounds for number-in-hand multiparty communication complexity, made easy",
      "author" : [ "Jeff M. Phillips", "Elad Verbin", "Qin Zhang" ],
      "venue" : "SIAM J. Comput.,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2016
    }, {
      "title" : "A tutorial on spectral clustering",
      "author" : [ "Ulrike Von Luxburg" ],
      "venue" : "Statistics and computing,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2007
    }, {
      "title" : "Tight bounds for distributed functional monitoring",
      "author" : [ "David P. Woodruff", "Qin Zhang" ],
      "venue" : "In STOC,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2012
    } ],
    "referenceMentions" : [ {
      "referenceID" : 20,
      "context" : "Also, for a number of problems the communication complexity is the same in both models, such as computing the sum of s length-n bit vectors modulo two, where each site holds one bit vector [21], or estimating large moments [23].",
      "startOffset" : 189,
      "endOffset" : 193
    }, {
      "referenceID" : 22,
      "context" : "Also, for a number of problems the communication complexity is the same in both models, such as computing the sum of s length-n bit vectors modulo two, where each site holds one bit vector [21], or estimating large moments [23].",
      "startOffset" : 223,
      "endOffset" : 227
    }, {
      "referenceID" : 4,
      "context" : "Still, for other problems like set disjointness it can save a factor of s in the communication [5].",
      "startOffset" : 95,
      "endOffset" : 98
    }, {
      "referenceID" : 0,
      "context" : ", [1]), from which a spectral sparsifier serves as a good preconditioner.",
      "startOffset" : 2,
      "endOffset" : 5
    }, {
      "referenceID" : 2,
      "context" : "Our results imply that existing algorithms [3] for k-median and k-means with Õ(sk) bits of communication, as well as the folklore parallel guessing algorithm for k-center with Õ(sk) bits of communication, are optimal up to polylogarithmic factors.",
      "startOffset" : 43,
      "endOffset" : 46
    }, {
      "referenceID" : 1,
      "context" : ", [2, 19, 20, 22]).",
      "startOffset" : 2,
      "endOffset" : 17
    }, {
      "referenceID" : 18,
      "context" : ", [2, 19, 20, 22]).",
      "startOffset" : 2,
      "endOffset" : 17
    }, {
      "referenceID" : 19,
      "context" : ", [2, 19, 20, 22]).",
      "startOffset" : 2,
      "endOffset" : 17
    }, {
      "referenceID" : 21,
      "context" : ", [2, 19, 20, 22]).",
      "startOffset" : 2,
      "endOffset" : 17
    }, {
      "referenceID" : 2,
      "context" : "[3, 4] and Feldman et al.",
      "startOffset" : 0,
      "endOffset" : 6
    }, {
      "referenceID" : 3,
      "context" : "[3, 4] and Feldman et al.",
      "startOffset" : 0,
      "endOffset" : 6
    }, {
      "referenceID" : 9,
      "context" : "[10] study distributed k-means ([3] also studies k-median), and present provable guarantees on the clustering quality.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 2,
      "context" : "[10] study distributed k-means ([3] also studies k-median), and present provable guarantees on the clustering quality.",
      "startOffset" : 32,
      "endOffset" : 35
    }, {
      "referenceID" : 10,
      "context" : "[11] studied distributed k-median/center/means with outliers.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 6,
      "context" : "[7] study dimensionality reduction techniques for the input data matrices that can be used for distributed k-means.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 2,
      "context" : ", [3, 4, 10]), no provable lower bounds in either model existed, and our main contribution is to show that previous algorithms are optimal.",
      "startOffset" : 2,
      "endOffset" : 12
    }, {
      "referenceID" : 3,
      "context" : ", [3, 4, 10]), no provable lower bounds in either model existed, and our main contribution is to show that previous algorithms are optimal.",
      "startOffset" : 2,
      "endOffset" : 12
    }, {
      "referenceID" : 9,
      "context" : ", [3, 4, 10]), no provable lower bounds in either model existed, and our main contribution is to show that previous algorithms are optimal.",
      "startOffset" : 2,
      "endOffset" : 12
    }, {
      "referenceID" : 14,
      "context" : "It is known that, for any undirected graph G of n vertices, there is a (1 + ε)-spectral sparsifier of G with O(n/ε2) edges, and it can be constructed in almost-linear time [15].",
      "startOffset" : 172,
      "endOffset" : 176
    }, {
      "referenceID" : 4,
      "context" : ", [5, 21, 23]).",
      "startOffset" : 2,
      "endOffset" : 13
    }, {
      "referenceID" : 20,
      "context" : ", [5, 21, 23]).",
      "startOffset" : 2,
      "endOffset" : 13
    }, {
      "referenceID" : 22,
      "context" : ", [5, 21, 23]).",
      "startOffset" : 2,
      "endOffset" : 13
    }, {
      "referenceID" : 15,
      "context" : "They are similar to the congested clique model [16] studied in the distributed computing community; the main difference is that in our models we do not post any bandwidth limitations at each channel but instead consider the total number of bits communicated.",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 11,
      "context" : "It has been shown in [12] that Rδ(A) ≥ ICδ,μ(A) for any input distribution μ.",
      "startOffset" : 21,
      "endOffset" : 25
    }, {
      "referenceID" : 13,
      "context" : "It was shown in [14] that ρ(k) closely relates to λk(LG) by the following higher-order Cheeger inequality: λk(LG) 2 ≤ ρ(k) ≤ O(k) √ λk(LG).",
      "startOffset" : 16,
      "endOffset" : 20
    }, {
      "referenceID" : 19,
      "context" : "The same assumption has been used in the literature for studying graph clustering in the centralized setting [20].",
      "startOffset" : 109,
      "endOffset" : 113
    }, {
      "referenceID" : 19,
      "context" : "1 ([20]).",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 4,
      "context" : "3 ([5]).",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 17,
      "context" : "Our distributed algorithm is based on constructing a chain of coarse sparsifiers [18], which is described as follows: for any input PSD matrix K with λmax(K) ≤ λu and all the non-zero eigenvalues of K at least λ`, we define d = dlog2(λu/λ`)e and construct a chain of d+ 1 matrices",
      "startOffset" : 81,
      "endOffset" : 85
    }, {
      "referenceID" : 17,
      "context" : "6 ([18]).",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 2,
      "context" : "As mentioned, for constant dimensional Euclidean space and a constant c > 1, there are algorithms that c-approximate k-median and k-means using Õ(sk) bits of communication [3].",
      "startOffset" : 172,
      "endOffset" : 175
    }, {
      "referenceID" : 8,
      "context" : ", [9]) achieve a 2.",
      "startOffset" : 2,
      "endOffset" : 5
    }, {
      "referenceID" : 5,
      "context" : ", [6, 13]).",
      "startOffset" : 2,
      "endOffset" : 9
    }, {
      "referenceID" : 12,
      "context" : ", [6, 13]).",
      "startOffset" : 2,
      "endOffset" : 9
    }, {
      "referenceID" : 16,
      "context" : "Our algorithm for k-median/means is an easy adaptation of the successive sampling algorithm proposed by Mettu and Plaxton [17] in the (centralized) RAM model.",
      "startOffset" : 122,
      "endOffset" : 126
    }, {
      "referenceID" : 16,
      "context" : "In [17] it has been shown that this algorithm gives an O(1)-approximation to k-median or k-means with high probability.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 7,
      "context" : "Step 1 can be done by the distributed sampling algorithm in [8] using Õ(k + s) bits of communication; note that at the end of this step the sampled points in Yj are written on the blackboard.",
      "startOffset" : 60,
      "endOffset" : 63
    } ],
    "year" : 2017,
    "abstractText" : "Clustering large datasets is a fundamental problem with a number of applications in machine learning. Data is often collected on different sites and clustering needs to be performed in a distributed manner with low communication. We would like the quality of the clustering in the distributed setting to match that in the centralized setting for which all the data resides on a single site. In this work, we study both graph and geometric clustering problems in two distributed models: (1) a point-to-point model, and (2) a model with a broadcast channel. We give protocols in both models which we show are nearly optimal by proving almost matching communication lower bounds. Our work highlights the surprising power of a broadcast channel for clustering problems; roughly speaking, to spectrally cluster n points or n vertices in a graph distributed across s servers, for a worst-case partitioning the communication complexity in a point-to-point model is n · s, while in the broadcast model it is n + s. A similar phenomenon holds for the geometric setting as well. We implement our algorithms and demonstrate this phenomenon on real life datasets, showing that our algorithms are also very efficient in practice. ∗A preliminary version of this paper appears at the 30th Annual Conference on Neural Information Processing Systems (NIPS), 2016. †Department of Computer Science, Indiana University, Bloomington, USA. Work supported in part by NSF CCF1525024 and IIS-1633215. Email: jiecchen@indiana.edu ‡Department of Computer Science, University of Bristol, Bristol, UK. h.sun@bristol.ac.uk §IBM Research Almaden, San Jose, USA. dpwoodru@us.ibm.com ¶Department of Computer Science, Indiana University, Bloomington, USA. Work supported in part by NSF CCF1525024 and IIS-1633215. Email: qzhangcs@indiana.edu ar X iv :1 70 2. 00 19 6v 1 [ cs .D S] 1 F eb 2 01 7",
    "creator" : "LaTeX with hyperref package"
  }
}