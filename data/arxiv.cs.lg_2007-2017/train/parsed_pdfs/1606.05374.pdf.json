{
  "name" : "1606.05374.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Avoiding Imposters and Delinquents: Adversarial Crowdsourcing and Peer Prediction",
    "authors" : [ "Jacob Steinhardt" ],
    "emails" : [ "jsteinhardt@cs.stanford.edu", "valiant@stanford.edu", "moses@cs.stanford.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n60 6.\n05 37\n4v 1\n[ cs\n.H C\nWe consider a crowdsourcing model in which n workers are asked to rate the quality of n items previously generated by other workers. An unknown set of αn workers generate reliable ratings, while the remaining workers may behave arbitrarily and possibly adversarially. The manager of the experiment can also manually evaluate the quality of a small number of items, and wishes to curate together almost all of the high-quality items with at most an ǫ fraction of lowquality items. Perhaps surprisingly, we show that this is possible with an amount of work required of the manager, and each worker, that does not scale with n: the dataset can be curated with Õ (\n1 βα3ǫ4\n) ratings per worker, and Õ (\n1 βǫ2\n)\nratings\nby the manager, where β is the fraction of high-quality items. Our results extend to the more general setting of peer prediction, including peer grading in online classrooms."
    }, {
      "heading" : "1 Introduction",
      "text" : "How can we reliably obtain information from humans, given that the humans themselves are unreliable, and might even have incentives to mislead us? Versions of this question arise in crowdsourcing (Vuurens et al., 2011), collaborative knowledge generation (Priedhorsky et al., 2007), peer grading in online classrooms (Piech et al., 2013; Kulkarni et al., 2015), aggregation of customer reviews (Harmon, 2004), and the generation/curation of large datasets (Deng et al., 2009). A key challenge is to ensure high information quality despite the fact that many people interacting with the system may be unreliable or even adversarial. This is particularly relevant when raters have an incentive to collude and cheat as in the setting of peer grading, as well as reviews on sites like Amazon and Yelp, where artists and firms are incentivized to manufacture positive reviews for their own products and negative reviews for their rivals (Harmon, 2004; Mayzlin et al., 2012).\nOne approach to ensuring quality is to use gold sets — questions where the answer is known, which can be used to assess reliability on unknown questions. However, this is overly constraining — it does not make sense for open-ended tasks such as knowledge generation on wikipedia, nor even for crowdsourcing tasks such as “translate this paragraph” or “draw an interesting picture” where there are different equally good answers. This approach may also fail in settings, such as peer grading in massive online open courses, where students might collude to inflate their grades.\nIn this work, we consider the challenge of using crowdsourced human ratings to accurately and efficiently evaluate a large dataset of content. In some settings, such as peer grading, the end goal is to obtain the accurate evaluation of each datum; in other settings, such as the curation of a large dataset, accurate evaluations could be leveraged to select a high-quality subset of a larger set of variable-quality (perhaps crowd-generated) data.\nThere are several confounding difficulties that arise in extracting accurate evaluations. First, many raters may be unreliable and give evaluations that are uncorrelated with the actual item quality; second, some reliable raters might be harsher or more lenient than others; third, some items may be harder to evaluate than others and so error rates could vary from item to item, even among reliable raters; finally, some raters may even collude or want to hack the system. This raises the question: can we obtain information from the reliable raters, without knowing who they are a priori?\nIn this work, we answer this question in the affirmative, under surprisingly weak assumptions:\n• We do not assume that there is a “gold set” or other cheap way to judge worker performance; instead, we rely on a small number of our own (potentially noisy) post hoc judgments. • We do not assume that the majority of workers are reliable. • We do not assume that the unreliable workers conform to any statistical model; they could\nbehave fully adversarially, in collusion with each other and with full knowledge of how the reliable workers behave. • We do not assume that the reliable worker ratings match our own, but only that they are “approximately monotonic” in our ratings, in a sense that will be formalized later.\nFor concreteness, we describe a simple formalization of the crowdsourcing setting (our actual results hold in a more general setting). There are n raters and n items to evaluate, which have an unknown quality level in [0, 1]. At least αn workers are “reliable” in that their judgments match our own in expectation, and they make independent errors. We assign each worker to evaluate at most k randomly selected items. In addition, we ourselves judge k0 items. Our goal is to recover the β-quantile: the set T ∗ of the βn highest-quality items. Our main result is the following:\nTheorem 1. In the setting above, suppose k ≥ Ω(1/βα3ǫ4) and k0 ≥ Ω(log(1/αβǫ)/βǫ2). Then, with probability at least 99%, we can identify βn items with average quality at most ǫ worse than T ∗.\nAmazingly, the amount of work that each worker (and we ourselves) has to do does not grow with n; it depends only on the fraction α of reliable workers and the the desired accuracy ǫ. While the number of evaluations k for each worker is likely not optimal, we note that the amount of work k0 required of us is close to optimal: for α ≤ β, it is information theoretically necessary for us to evaluate Ω(1/βǫ2) items,via a reduction to estimating noisy coin flips (Mannor and Tsitsiklis, 2004).\nWhy is it necessary to include some of our own ratings? If we did not, and α < 12 , then an adversary could create a set of dishonest raters that were identical to the reliable raters except with the item\nindices permuted by a random permutation of {1, . . . ,m}. In this case, there is no way to distinguish the honest from the dishonest raters except by breaking the symmetry with our own ratings.\nOur main result holds in a considerably more general setting where we require a weaker form of inter-rater agreement — for example, our results hold even if some of the reliable raters are harsher than others, as long as the expected ratings induce approximately the same ranking. The focus on quantiles rather than raw ratings is what enables this. Note that once we estimate the quantiles, we can approximately recover the ratings by evaluating a few items in each quantile.\nOur technical tools draw on semidefinite programming methods for matrix completion, which have been used to study graph clustering as well as community detection in the stochastic block model (Holland et al., 1983; Condon and Karp, 2001). Our setting corresponds to the sparse case where all nodes have constant degree, which has recently seen great interest (Decelle et al., 2011; Mossel et al., 2012; 2013b;a; Massoulié, 2014; Guédon and Vershynin, 2014; Mossel et al., 2015; Chin et al., 2015; Abbe and Sandon, 2015; Makarychev et al., 2015). Makarychev et al. (2015) in particular provide an algorithm that is robust to adversarial perturbations, but only if the perturbation has size o(n); see also Cai and Li (2015) for robusness results when the node degree is logarithmic.\nSeveral authors have considered semirandom settings for graph clustering, which allow for some types of adversarial behavior (Feige and Krauthgamer, 2000; Feige and Kilian, 2001; Coja-Oghlan, 2004; Krivelevich and Vilenchik, 2006; Coja-Oghlan, 2007; Makarychev et al., 2012; Chen et al., 2014; Guédon and Vershynin, 2014; Moitra et al., 2015; Agarwal et al., 2015). In our setting, these semirandom models would need to assume that the adversaries are strictly dominated by the reliable raters, in the sense of having lower expected accuracy on every item; this is implausible as it rules out most types of strategic behavior. In removing this assumption, we face a key technical challenge: while previous analyses consider errors relative to a ground truth clustering, in our setting the ground truth only exists for rows of the matrix corresponding to reliable raters while the remaining rows could behave arbitrarily even in the limit where all ratings are observed. This necessitates a more careful analysis, which helps to clarify what properties of a clustering are truly necessary for identifying it."
    }, {
      "heading" : "2 Algorithm and Intuition",
      "text" : "We now describe our recovery algorithm. To fix notation, we assume that there are n raters and m items, and that we observe a matrix Ã ∈ [0, 1]n×m: Ãij = 0 if rater i does not rate item j, and otherwise Ãij is the assigned rating, which takes values in [0, 1]. In the settings we care about Ã is very sparse — each rater only rates a few items. Remember that our goal is to recover the β-quantile T ∗ of the best items according to our own rating.\nOur algorithm is based on the following intuition: the reliable raters must (approximately) agree on the ranking of items, and so if we can cluster the rows of Ã appropriately, then the reliable raters should form a single very large cluster (of size αn). There can be at most 1α disjoint clusters of this size, and so we can manually check the accuracy of each large cluster (by checking agreement with our own rating on a few randomly selected items) and then choose the best one.\nAlgorithm 1 Algorithm for recovering β-quantile matrix M̃ using (unreliable) ratings Ã. 1: Parameters: reliable fraction α, quantile β, tolerance ǫ, number of raters n, number of items m 2: Input: noisy rating matrix Ã 3: Let M̃ be the solution of the optimization problem (1):\nmaximize 〈Ã,M〉, (1) subject to 0 ≤ Mij ≤ 1 ∀i, j,\n∑ jMij ≤ βm ∀j, ‖M‖∗ ≤ 2\nαǫ\n√\nαβnm,\nwhere ‖ · ‖∗ denotes nuclear norm. 4: Output M̃ .\nAlgorithm 2 Algorithm for recovering an accurate β-quantile T from the β-quantile matrix M̃ . 1: Parameters: tolerance ǫ, reliable fraction α 2: Input: matrix M̃ of approximate β-quantiles, noisy ratings r̃, r̃′\n3: Let C′ be the set of αn indices i ∈ [n] for which ∑j M̃ij r̃j is largest. 4: T0 ← 1|C′| ∑\ni∈C′ M̃i. ⊲ T0 ∈ [0, 1]m 5: do T ← RANDOMIZEDROUND(T0) while 〈T − T0, r̃′〉 < − ǫ4βk 6: return T ⊲ T ∈ {0, 1}m\nOne major challenge in using the clustering intuition is the sparsity of Ã: any two rows of Ã will almost certainly have no ratings in common, so we must exploit the global structure of Ã to discover clusters, rather than using pairwise comparisons of rows. The key is to view our problem as a form of noisy matrix completion — we imagine a matrix A∗ in which all the ratings have been filled in and all noise from individual ratings has been removed. We define a matrix M∗ that indicates the top βm items in each row of A∗: M∗ij = 1 if item j has one of the top βm ratings from rater i, and M∗ij = 0 otherwise (this differs from the actual definition of M\n∗ given in Section 4, but is the same in spirit). If we could recover M∗, we would be close to obtaining the clustering we wanted.\nThe key observation that allows us to approximate M∗ given only the noisy, incomplete Ã is that M∗ has low-rank structure: since all of the reliable raters agree with each other, their rows in M∗ are all identical, and so there is an (αn) × m submatrix of M∗ with rank 1. This inspires the low-rank matrix completion algorithm for recovering M̃ given in Algorithm 1. Each row of M is constrained to have sum at most βm, and M as a whole is constrained to have nuclear norm ‖M‖∗ at most 2αǫ √ αβnm. Recall that the nuclear norm is the sum of the singular values of M ; in the same way that the ℓ1-norm is a convex surrogate for the ℓ0-norm, the nuclear norm acts as a convex surrogate for the rank of M (i.e., number of non-zero singular values). The optimization problem (1) therefore chooses a set of βm items in each row to maximize the corresponding values in Ã, while constraining the item sets to have low rank (where low rank is relaxed to low nuclear norm to obtain a convex problem). This low-rank constraint acts as a strong regularizer that quenches the noise in Ã.\nOnce we have recovered M̃ using Algorithm 1, it remains to recover a specific set T that approximates the β-quantile according to our ratings. Algorithm 2 provides a recipe for doing so: first, rate k0 items at random, obtaining the vector r̃: r̃j = 0 if we did not rate item j, and otherwise r̃j is the (possibly noisy) rating that we assign to item j. Next, score each row M̃i based on the noisy ratings ∑\nj M̃ij r̃j , and let T0 be the average of the αn highest-scoring M̃i. Finally, use randomized rounding to turn the vector T0 ∈ [0, 1]m into a discrete vector T ∈ {0, 1}m, and treat T as the indicator function of a set approximating the β-quantile (see Section 5 for details of the rounding algorithm).\nIn summary, given a noisy rating matrix Ã, we will first run Algorithm 1 to recover a β-quantile matrix M̃ for each rater, and then run Algorithm 2 to recover our personal β-quantile from M̃ .\nPossible attacks by adversaries. In our algorithm, the adversaries can influence M̃i for reliable raters i via the nuclear norm constraint (note that the other constraints are separable across rows). This makes sense because the nuclear norm is what causes us to pool global structure across raters (and thus potentially pool bad information). In order to limit this influence, the constraint on the nuclear norm is weaker than is typical by a factor of 2ǫ ; it is not clear to us whether this is actually necessary or due to a loose analysis. (Note that M∗C–M\n∗ restricted to the reliable rows–has nuclear norm √ αβnm, since it is the αn×βm all-1s matrix padded by zeros; the constraint on ‖M‖∗ must be at least 1α times as large as this since the adversaries could produce 1 α permuted copies of M ∗ C .) The constraint ∑\nj Mij ≤ βm is not typical in the literature. For instance, (Chen et al., 2014) place no constraint on the sum of each row in M (instead of recovering the β-quantile, they normalize Ã to lie in [−1, 1]m×m and recover the items with a positive rating). Our row normalization constraint prevents an attack in which a spammer rates a random subset of items as high as possible and rates the remaining items as low as possible. If the actual set of high-quality items has density much smaller than 50%, then the spammer gains undue influence relative to honest raters that only rate\nAlgorithm 3 Algorithm for obtaining (unreliable) ratings matrix Ã and noisy ratings r̃, r̃′. 1: Input: number of raters n, number of items m, and ratings per rater k. 2: Initially assign each rater to each item independently with probability k/m. 3: For every rater assigned more than 2k items, un-assign items until there are 2k remaining. 4: For every item assigned to more than 2k raters, un-assign raters until there are 2k remaining. 5: Have the raters submit ratings of their assigned items, and let Ã denote the resulting matrix of\nratings with missing entries fill in with zeros. 6: Generate each of r̃ and r̃′ by rating items with probability k0m (fill in missing entries with zeros) 7: Output Ã, r̃, and r̃′\ne.g. 10% of the items highly. Normalizing M to have a fixed row sum prevents this; see Section B for details."
    }, {
      "heading" : "3 Assumptions and Approach",
      "text" : "We now state our assumptions more formally, state the general form of our results, and outline the key ingredients of the proof. In our setting, we can query a rater i ∈ [m] and item j ∈ [m] to obtain a rating Ãij ∈ [0, 1]. Let r∗ ∈ [0, 1]m denote the vector of true ratings of the items. We can also query an item j (by rating it ourself) to obtain a noisy rating r̃j such that E[r̃j ] = r∗j .\nLet C ⊆ [n] be the set of reliable raters, where |C| ≥ αn. Our main assumption is that the reliable raters make independent errors:\nAssumption 1 (Independence). When we query a pair (i, j), and i ∈ C, we obtain an output Ãij whose value is independent of all of the other queries so far. Similarly, when we query an item j, we obtain an output r̃j that is independent of all of the other queries so far.\nNote that Assumption 1 allows the unreliable ratings to depend on all previous ratings and also allows arbitrary collusion among the unreliable raters. In our algorithm, we will generate our own ratings after querying everyone else, which ensures that at least r̃ is independent of the adversaries.\nWe need a way to formalize the idea that the reliable raters agree with us. To this end, for i ∈ C let A∗ij be the expected rating that rater i assigns to item j. We want A ∗ to be roughly increasing in r∗:\nDefinition 1 (Monotonic raters). We say that the reliable raters are (L, ǫ)-monotonic if\nr∗j − r∗j′ ≤ L · (A∗ij −A∗ij′ ) + ǫ (2)\nwhenever r∗j ≥ r∗j′ , and for all i ∈ C and all j, j′ ∈ [m].\nThe (L, ǫ)-monotonicity property says that if we think that one item is substantially better than another item, the reliable raters should think so as well. As an example, suppose that our own ratings are binary (r∗j ∈ {0, 1}) and that each rating Ãi,j matches r∗j with probability 35 . Then A∗i,j = 2 5 + 1 5r ∗ j , and hence the ratings are (5, 0)-monotonic. In general, the monotonicity property is fairly mild — if the reliable ratings are not (L, ǫ)-monotonic, it is not clear that they should even be called reliable!\nAlgorithm for collecting ratings. Under the model given in Assumption 1, our algorithm for collecting ratings is given in Algorithm 3. Given integers k and k0, Algorithm 3 assigns each rater at most 2k ratings, and assigns us 2k0 ratings in expectation. The output is a noisy rating matrix Ã ∈ [0, 1]n×m as well as noisy rating vectors r̃, r̃′ ∈ [0, 1]m (we need to create two independent rating vectors for technical reasons; in practice we can use a single vector). Our main result states that we can use Ã and r̃ to estimate the β-quantile T ∗; throughout we will assume that m is at least n.\nTheorem 2. Let m ≥ n. Suppose that Assumption 1 holds, that the reliable raters are (L, ǫ0)monotonic, and that we run Algorithm 3 to obtain noisy ratings, with k ≥ Ω (\nlog3(1/δ) βα3ǫ4 m n\n)\nand\nk0 ≥ Ω ( log(1/αβǫδ) βǫ2 ) . Then, with probability 1− δ, Algorithms 1 and 2 recover a set T satisfying\n1 βm\n\n\n∑\nj∈T∗\nr∗j − ∑\nj∈T\nr∗j\n\n ≤ (L+ 1) · ǫ+ ǫ0. (3)\nNote that the amount of work for the raters scales as mn . Some dependence on m n is necessary, since we need to make sure that every item gets rated at least once.\nThe proof of Theorem 2 can be split into two parts: analyzing Algorithm 1 (Section 4), and analyzing Algorithm 2 (Section 5). At a high level, analyzing Algorithm 1 involves showing that the nuclear norm constraint in (1) imparts sufficient noise robustness while not allowing the adversary too much influence over the reliable rows of M̃ . Analyzing Algorithm 2 is far more straightforward, and requires only standard concentration inequalities and a standard randomized rounding idea (though the latter is perhaps not well-known, so we will explain it briefly in Section 5)."
    }, {
      "heading" : "4 Recovering M̃ (Algorithm 1)",
      "text" : "The goal of this section is to show that solving the optimization problem (1) recovers a matrix M̃ that approximates the β-quantile of r∗ in the following sense:\nProposition 1. Under the conditions of Theorem 2, Algorithm 1 outputs a matrix M̃ satisfying\n1 |C| 1 βm ∑\ni∈C\n∑\nj∈[m]\n(T ∗j − M̃i,j)A∗ij ≤ ǫ, (4)\nwhere T ∗j = 1 if j lies in the β-quantile of r ∗, and is 0 otherwise.\nProposition 1 says that the row M̃i is good according to rater i’s ratings A∗i . Note that (L, ǫ0)monotonicity then implies that M̃i is also good according to r∗. In particular (see A.2 for details)\n1 |C| 1 βm ∑\ni∈C\n∑\nj∈[m]\n(T ∗j − M̃ij)r∗j ≤ L · 1 |C| 1 βm ∑\ni∈C\n∑\nj∈[m]\n(T ∗j − M̃ij)A∗ij + ǫ0 ≤ L · ǫ + ǫ0. (5)\nProving Proposition 1 involves two major steps: showing (a) that the nuclear norm constraint in (1) imparts noise-robustness, and (b) that the constraint does not allow the adversaries to influence M̃C too much. (For a matrix X we let XC denote the rows indexed by C and XC the remaining rows.)\nIn a bit more detail, if we let M∗ denote a denoised version of M̃ , and B denote a denoised version of Ã, we first show (Lemma 1) that 〈B, M̃ − M∗〉 ≥ −ǫ′ for some ǫ′ determined below. This is established via the matrix concentration inequalities in Le and Vershynin (2015). Lemma 1 already suffices for standard approaches (e.g., Guédon and Vershynin, 2014), but in our case we must grapple with the issue that the rows of B could be arbitrary outside of C, and hence closeness according to B may not imply actual closeness between M̃ and M∗. Our main technical contribution, Lemma 2, shows that 〈BC , M̃C − M∗C 〉 ≥ 〈B, M̃ − M∗〉 − ǫ′; that is, closeness according to B implies closeness according to BC . We can then restrict attention to the reliable raters, and obtain Proposition 1.\nPart 1: noise-robustness. Let B be the matrix satisfying BC = kmA ∗ C , BC = ÃC , which denoises Ã on C. The scaling km is chosen so that E[ÃC ] ≈ BC . Also define R ∈ Rn×m by Rij = T ∗j . Ideally, we would like to have MC = RC , i.e., M matches T ∗ on all the rows of C. In light of this, we will let M∗ be the solution to the following “corrected” program, which we don’t have access to (since it involves knowledge of A∗ and C), but which will be useful for analysis purposes:\nmaximize 〈B,M〉, (6) subject to MC = RC , 0 ≤ Mij ≤ 1 ∀i, j,\n∑ jMij ≤ βm ∀i, ‖M‖∗ ≤ 2\nαǫ\n√\nαβnm\nImportantly, (6) enforces M∗ij = T ∗ j for all i ∈ C. Lemma 1 shows that M̃ is “close” to M∗:\nLemma 1. Let m ≥ n. Suppose that Assumption 1 holds and that k = Ω ( log3(1/δ) βα3ǫ4 m n ) . Then, the solution M̃ to (1) performs nearly as well as M∗ under B; specifically, with probability 1− δ, 〈B, M̃〉 ≥ 〈B,M∗〉 − ǫαβkn. (7)\nNote that M̃ is not necessarily feasible for (6), because of the constraintMC = RC ; Lemma 1 merely asserts that M̃ approximates M∗ in objective value. The proof of Lemma 1, given in Section A.3, primarily involves establishing a uniform deviation result; if we let P denote the feasible set for (1), then we wish to show that |〈Ã − B,M〉| ≤ 12ǫαβkn for all M ∈ P . This would imply that the objectives of (1) and (6) are essentially identical, and so optimizing one also optimizes the other.\nUsing the inequality |〈Ã − B,M〉| ≤ ‖Ã − B‖op‖M‖∗, where ‖ · ‖op denotes operator norm, it suffices to establish a matrix concentration inequality bounding ‖Ã − B‖op. This bound follows from the general matrix concentration result of Le and Vershynin (2015), stated in Section A.1.\nPart 2: bounding the influence of adversaries. We next show that the nuclear norm constraint does not give the adversaries too much influence over the de-noised program (6); this is the most novel aspect of our argument.\nSuppose that the constraint on ‖M‖∗ were not present in (6). Then the adversaries would have no influence on M∗C , because all the remaining constraints in (6) are separable across rows. How can we quantify the effect of this nuclear norm constraint? We exploit Lagrangian duality, which allows us to replace constraints with appropriate modifications to the objective function.\nTo gain some intuition, consider Figure 2. The key is that the Lagrange multiplier ZC can bound the amount that 〈B,M〉 can increase due to changing M outside of C. If we formalize this and analyze Z in detail, we obtain the following result: Lemma 2. Let m ≥ n. Suppose that k = Ω (\nlog3(1/δ) αβǫ2 m n\n)\n. Then with probability at least 1 − δ there exists a matrix Z with rank(Z) = 1, ‖Z‖F ≤ ǫk √\nαβn/m such that 〈BC − ZC ,M∗C −MC〉 ≤ 〈B,M∗ −M〉 for all M ∈ P . (8)\nBy localizing 〈B,M∗ −M〉 to C via (8), Lemma 2 bounds the effect that the adversaries can have on M̃C . It is therefore the key technical tool powering our results, and is proved in Section A.4. Proposition 1 is proved from Lemmas 1 and 2 in Section A.5."
    }, {
      "heading" : "5 Recovering T (Algorithm 2)",
      "text" : "In this section we show that if M̃ satisfies the conclusion of Proposition 1, then Algorithm 2 recovers a set T that approximates T ∗ well. Formally, we show the following:\nProposition 2. Suppose Assumption 1 holds and k0 ≥ Ω ( log(1/αβǫδ) βǫ2 )\n. With probability 1 − δ, Algorithm 2 outputs a set T satisfying\n1\nβm\n∑\nj∈T\nr∗j ≥\n\n\n1\nβm\n1\n|C| ∑\ni∈C\n∑\nj∈[m]\nM̃ijr ∗ j\n\n− ǫ. (9)\nThe validity of this procedure hinges on two results. First, establish a concentration bound showing that ∑\nj M̃ij r̃j is close to k0 m\n∑\nj M̃ijr ∗ j for all i ∈ C, which implies that the αn best rows of M̃\naccording to r̃ also look good according to r∗. This yields the following lemma:\nLemma 3. Let C′ be the αn best rows according to r̃, as in Algorithm 2. Suppose that r̃ satisfies Assumption 1 and that k0 ≥ Ω ( log(1/αδ) βǫ2 ) . Then, with probability 1− δ, we have\n1\nαn\n∑\ni∈C′\n(\n∑\nj∈[m]\nM̃ijr ∗ j\n) ≥ 1|C| ∑\ni∈C\n(\n∑\nj∈[m]\nM̃ijr ∗ j\n) − ǫ 4 βm. (10)\nSee Section A.6 for a proof. The idea is to establish a uniform bound showing that ∑\ni∈S\n∑\nj∈[m] M̃ij(r̃j − k0m r∗j ) is small for any set of αn rows S, and hence that greedily taking the αn best rows according to r̃ is almost as good as taking the αn best rows according to r∗. We improve over a naïve union bound by exploiting power mean inequalities on cumulant functions.\nHaving recovered a set C′ of good rows, define their average T0 ∈ [0, 1]m as T0 def= 1|C′| ∑\ni∈C′ M̃i. We need to turn T0 into a binary vector so that Algorithm 2 can output a set; we do so via randomized rounding, obtaining a vector T ∈ {0, 1}m such that E[T0] = T . Our rounding procedure is given in Algorithm 4; the following lemma, proved in A.7, asserts its correctness:\nLemma 4. The output T of Algorithm 4 satisfies E[T ] = T0, ‖T ‖0 ≤ βm.\nAlgorithm 4 Randomized rounding algorithm. 1: procedure RANDOMIZEDROUND(T0) ⊲ T0 ∈ [0, 1]m satisfies ‖T0‖1 ≤ βm 2: Let s be the vector of partial sums of T0 ⊲ i.e., sj = (T0)1 + · · ·+ (T0)j 3: Sample u ∼ Uniform([0, 1]). 4: T ← [0, . . . , 0] ∈ Rm 5: for z = 0 to βm− 1 do 6: Find j such that u+ z ∈ [sj−1, sj). ⊲ if no such j exists, skip the next step 7: Tj ← 1 8: end for 9: return T 10: end procedure\nThe remainder of the proof involves lower-bounding the probability that T is accepted in each stage of the while loop in Algorithm 2. We refer the reader to Section A.8 for details."
    }, {
      "heading" : "6 Open Directions and Related Work",
      "text" : "Future Directions On the theoretical side, perhaps the most immediate open question is whether it is possible to improve the dependence of k (the amount of work required per worker) on the parameters α, β, and ǫ. It is tempting to hope that when m = n a tight result would have k = Θ (\nlog(1/α) min(α,β)ǫ2\n)\n,\nin loose analogy to recent results for the stochastic block model (Banks and Moore, 2016).\nOur results also leave some open questions for variations on our setting. One concerns the regime where m ≪ n: in this case, can we get by with much less work per rater? Another question concerns adaptivity: if the choice of queries is based on previous worker ratings, can we reduce the amount of work? We would be quite interested in answers to either question.\nRelated work. Our setting is closely related to the problem of peer prediction (Miller et al., 2005), in which we wish to obtain truthful information from a population of raters by exploiting inter-rater\nagreement. While several mechanisms have been proposed for these tasks, they typically assume that rater accuracy is observable online (Resnick and Sami, 2007), that raters are rational agents maximizing a payoff function (Dasgupta and Ghosh, 2013; Kamble et al., 2015; Shnayder et al., 2016), that the workers follow a simple statistical model (Karger et al., 2014; Zhang et al., 2014; Zhou et al., 2015), or some combination of the above (Shah and Zhou, 2015; Shah et al., 2015).\nThe work most close to ours is Christiano (2014; 2016), which studies online collaborative prediction in the presence of adversaries; roughly, when raters interact with an item they predict its quality and afterwards observe the actual quality; the goal is to minimize the number of incorrect predictions among the honest raters. This differs from our setting in that (i) the raters are trying to learn the item qualities as part of the task, and (ii) there is no requirement to induce a final global estimate of the high-quality items, which is necessary for estimating quantiles. It seems possible however that there are theoretical ties between this setting and ours, which would be interesting to explore."
    }, {
      "heading" : "A Deferred Proofs",
      "text" : ""
    }, {
      "heading" : "A.1 Matrix Concentration Bound of Le and Vershynin (2015)",
      "text" : "For ease of reference, here we state the matrix concentration bound from Le and Vershynin (2015), which we make use of in the proofs below. Theorem 3 (Theorem 2.1 in Le and Vershynin (2015)). Given an s×s matrix P with entries Pi,j ∈ [0, 1], and a random matrix A with the properties that 1) each entry of A is chosen independently, 2) E[Ai,j ] = Pi,j , and 3) Ai,j ∈ [0, 1], then for any r ≥ 1, the following holds with probability at least 1− s−r: let d = s ·maxi,j Pi,j , and modify any subset of at most 10s/d rows and/or columns of A by arbitrarily decreasing the value of nonzero elements of those rows or columns to form the matrix A′ with entries in [0, 1], then\n||A′ − P ||op ≤ Cr3/2 (√ d+ √ d′ ) ,\nwhere d′ is the maximum ℓ2 norm of any row or column of A′, and C is an absolute constant.\nNote: The proof of this theorem in Le and Vershynin (2015) shows that the statement continues to hold in the slightly more general setting where the entries of A are chosen independently according to random variables with bounded variance and sub-Gaussian tails, rather than just random variables restricted to the interval [0, 1]."
    }, {
      "heading" : "A.2 Details of Lipschitz Bound (Equation 5)",
      "text" : "The proof essentially consists of matching up each value r∗j , for j ∈ T ∗, with a set of values r∗j′ , j′ ≥ j, where the corresponding M̃i,j′ sum to 1; we can then invoke the condition (2). Unfortunately, expressing this idea formally is a bit notationally cumbersome.\nBefore we start, we observe that the Lipschitz condition (2) implies that, if r∗j ≥ r∗j′ , then r∗j − r∗j′ ≤ L · (\nA∗i,j −A∗i,j′ ) + ǫ0. It is this form of (2) that we will make use of below.\nNow, let Ij = I[j ∈ T ∗], and without loss of generality suppose that the indices j are such that r∗1 ≥ r∗2 ≥ · · · ≥ r∗m. For a vector v ∈ [0, 1]m, define\nh(τ, v) def = inf{j |\nj ∑\nj′=1\nvj′ ≥ τ}, (11)\nwhere h(τ, v) = ∞ if no such j exists. We observe that for any vector v ∈ [0, 1]m, we have ∑\nj∈[m]\nvjr ∗ j =\n∫ ∞\n0\nr∗h(τ ;v)dτ, (12)\nwhere we define r∗∞ = 0 (note that the integrand is therefore 0 for any τ ≥ ‖v‖1). Hence, we have ∑\nj∈T∗\nr∗j − ∑\nj∈[m]\nM̃i,jr ∗ j =\n∑\nj∈[m]\nIjr ∗ j −\n∑\nj∈[m]\nM̃i,jr ∗ j (13)\n=\n∫ βm\n0\nr∗h(τ,I) − r∗h(τ,M̃i)dτ (14)\n(i) ≤ ∫ βm\n0\n[ L · ( A∗h(τ,I) −A∗h(τ,M̃i) ) + ǫ0 ] dτ (15)\n= L ·\n\n\n∑\nj∈[m]\nIjA ∗ j −\n∑\nj∈[m]\nM̃i,jA ∗ j\n\n+ βmǫ0 (16)\n= L ·\n\n\n∑\nj∈T∗\nA∗j − ∑\nj∈[m]\nM̃i,jA ∗ j\n\n + βmǫ0, (17)\nwhich implies (5). The key step is (i), which uses the fact that h(τ, I) ≤ h(τ, M̃i) (because I is maximally concentrated on the left-most indices of [m]), and hence r∗h(τ,I) ≥ r∗h(τ,M̃i)."
    }, {
      "heading" : "A.3 Stability Under Noise (Proof of Lemma 1)",
      "text" : "By Hölder’s inequality, we have that |〈Ã−B,M〉| ≤ ‖Ã−B‖op‖M‖∗. We now leverage Theorem 3 to bound ‖Ã − B‖op. To apply the theorem, first note that from the construction of Ã given in Algorithm 3, Ã can be constructed by first having the raters rate each item independently with probability k/m to form matrix Ão and then removing ratings from the “heavy” rows (i.e. rows with more than 2k ratings), and “heavy” columns (i.e. columns with more than 2k) ratings. By standard Chernoff bounds, the probability that a given row or column will need to be “pruned” is at most e−k/3 ≤ 2/k, and hence from the independence of the rows, the probability that more than 5n/k rows are “heavy” is at most e−2n/3k. The probability that there are more than 5n/k heavy columns is identically bounded.\nNote that the expectation of the portion of Ão corresponding to the reliable raters is exactly the corresponding portion of matrix B, and with probability at least 1− 2e−2n/3k, at most 10n/k rows and/or columns of Ão are pruned to form Ã. Consider padding matrices Ã and B with zeros, to form the n × n matrices Ã′ and B′. With probability 1 − 2e−2n/3k the conditions of Theorem 3 now apply to Ã′ and B′, with the parameters d = nkm ≤ k, and d′ = 2k. Hence for any r ≥ 1, with probability at least 1− 2e−2n/3k − n−r\n‖Ã−B‖op = ‖Ã′ − B′‖op ≤ Cr3/2 √ k,\nfor some absolute constant C. By assumption, ‖M̃‖∗ ≤ 2αǫ √ αβnm and ‖M∗‖∗ ≤ 2αǫ √ αβnm. Hence setting r = log(1/δ), and k ≥ C′ log3(1δ ) m/n ǫ4α3β for some absolute constant C\n′, we have that with probability at least 1 − δ, we have\n|〈Ã−B, M̃〉| ≤ 1 2 ǫαβkn,\nand |〈Ã−B,M∗〉| is bounded identically. To conclude, we have the following:\n〈B, M̃〉 ≥ 〈Ã, M̃〉 − 1 2 ǫαβkn (18)\n≥ 〈Ã,M∗〉 − 1 2 ǫαβkn (since M̃ is optimal for Ã) (19)\n≥ 〈B,M∗〉 − ǫαβkn, (20) which completes the proof."
    }, {
      "heading" : "A.4 Bounding the Effect of Adversaries (Proof of Lemma 2)",
      "text" : "In this section we prove Lemma 2. Let P0 be the superset of P where we have removed the nuclear norm constraint. By Lagrangian duality we know that there is some µ such that maximizing 〈B,M〉 over P ∩ {MC = RC} is equivalent to maximizing fµ(M) def= 〈B,M〉 + µ ( 2 ǫα √ αβnm− ‖M‖∗ ) over P0 ∩ {MC = RC}. We start by bounding µ. We claim that µ ≤ ǫk √\nαβn/m. To show this, we will first show that 〈B,M〉 cannot get too large. Let E be the set of (i, j) for which ratings are observed, and define the matrix B′ as (B′)ij = km + I[(i, j) ∈ E ] (Bij − 1); note that (B − B′)ij = I[(i, j) ∈ E ]− km . For any M ∈ P0, we have\n〈B,M〉 ≤ 〈B′,M〉+ 〈B −B′,M〉 (21) ≤ βkn+ ‖B −B′‖op‖M‖∗ (22) (i)\n≤ βkn+ log(1/δ)3/22 √ 2k‖M‖∗ (23)\n(ii) ≤ k ( βn+ ǫ √ αβn/m\n2 ‖M‖∗\n)\n. (24)\nIn (i) we used the matrix concentration inequality of Theorem 3, in a similar manner as was used in our proof of Lemma 1. Specifically, we consider padding B and B′ with zeros so as to make both into n × n matrices. Provided the total number of raters and items whose initial assignments are removed in the second and third steps of the rater/item assignment procedure (Algorithm 3) is bounded by 10n/k, which occurs with probability at least 1 − δ/2 given our choice of k, then Theorem 3 applies with r = log(1/δ), and d and d′ bounded by 2k, yielding an operator norm bound of r3/2( √ k+ √ 2k) ≤ log(1/δ)3/22 √ 2k, that holds with probability 1− n−r > 1− δ/2. In (ii) we plug in our assumption k = Ω ( log(1/δ)3\nαβǫ2 m n\n)\n.\nNow, suppose that we take µ0 = ǫ √ αβn/mk and optimize 〈B,M〉 − µ0‖M‖∗ over P0 ∩ {MC = RC}. By the above inequalities, we have 〈B,M〉 − µ0‖M‖∗ ≤ βkn − ǫ √ αβn/mk\n2 ‖M‖∗, and so any M with ‖M‖∗ > 2ǫα √ αβnm cannot possibly be optimal, since the solution M = 0 would be better. Hence, µ0 is a large enough Lagrange multiplier to ensure that M ∈ P , and so µ ≤ µ0 = ǫk √ αβn/m, as claimed.\nWe next characterize the subgradient of fµ at M = M∗. Define the projection matrix P as\nPi,i′ =\n{\n1 |C| : i, i ′ ∈ C δi,i′ : else . (25)\nThus PM = M if and only if all rows in C are equal to each other. In particular, PM = M whenever MC = RC . Now, since M∗ is the maximum of fµ(M) over all M ∈ P0 ∩ {MC = RC}, there must be some G ∈ ∂fµ(M∗) such that 〈G,M − M∗〉 ≤ 0 for all M ∈ P0 ∩ {MC = RC}. The following lemma says that without loss of generality we can assume that PG = G:\nLemma 5. Suppose that G ∈ ∂f(M∗) satisfies 〈G,M −M∗〉 ≤ 0 for all M ∈ P0 ∩ {MC = RC}. Then, PG satisfies the same property, and lies in ∂f(M∗) as well.\nWe can further note (by differentiating fµ) that G = B − µZ0, where ‖Z0‖op ≤ 11. Then PG = PB − µPZ0 = B − µPZ0. Let r(M) denote the matrix where MC is replaced with RC (so r(M) ∈ P0 ∩ {RC = MC} whenever M ∈ P0). The rest of the proof is basically algebra; for any M ∈ P , we have\n〈B,M −M∗〉 (i)\n≤ fµ(M)− fµ(M∗) (26) (ii) ≤ 〈B − µPZ0,M −M∗〉 (27) = 〈B − µPZ0,M − r(M)〉 + 〈B − µPZ0, r(M) −M∗〉 (28) (iii)\n≤ 〈B − µPZ0,M − r(M)〉 (29) (iv) = 〈BC − µ(PZ0)C ,MC − r(M)C〉 (30) = 〈BC − µ(PZ0)C ,MC −M∗C 〉, (31)\nwhere (i) is by complementary slackness (either µ = 0 or ‖M∗‖∗ = 2αǫ √ αβnm); (ii) is concavity of fµ, and the fact that B − µPZ0 is a subgradient; (iii) is the property from Lemma 5 (〈B − µPZ0, r(M)−M∗〉 ≤ 0 since r(M) ∈ P0); and (iv) is because M and r(M) only differ on C. To finish, we will take Z = µ(PZ0)C . We note that ‖Z‖op = ‖µ(PZ0)C‖op ≤ µ‖PZ0‖op ≤ µ‖Z0‖op ≤ µ. Moreover, Z has rank 1 and so ‖Z‖F = ‖Z‖op ≤ µ ≤ ǫk √\nαβn/m, as was to be shown.\nProof of Lemma 5. First, since PM = M for all M ∈ P0 ∩ {MC = RC}, and PM∗ = M∗, we have 〈PG,M −M∗〉 = 〈G,P (M −M∗)〉 = 〈G,M −M∗〉 ≤ 0. We thus only need to show that\n1This is due to the more general result that, for any norm ‖ · ‖, the subgradient of ‖ · ‖ at any point has dual norm at most 1.\nPG is still a subgradient of fµ. Indeed, we have (for arbitrary M )\n〈PG,M −M∗〉 = 〈G,PM −M∗〉 (32) (i)\n≥ fµ(PM)− fµ(M∗) (33) = 〈B,PM〉 − µ‖PM‖∗ − fµ(M∗) (34) = 〈B,M〉 − µ‖PM‖∗ − fµ(M∗) (35) (ii) ≥ 〈B,M〉 − µ‖M‖∗ − fµ(M∗) (36) = fµ(M)− fµ(M∗), (37)\nwhere (i) is because G ∈ ∂fµ(M∗), and (ii) is because projecting decreases the nuclear norm. Since the inequality 〈PG,M −M∗〉 ≥ fµ(M)− fµ(M∗) is the defining property for PG to lie in ∂fµ(M ∗), the proof is complete."
    }, {
      "heading" : "A.5 Proof of Proposition 1",
      "text" : "In this section, we will prove Proposition 1 from Lemmas 1 and 2. We start by plugging in M̃ for M in Lemma 2. This yields 〈BC − ZC ,M∗C − M̃C〉 ≤ 〈B,M∗ − M̃〉 ≤ ǫαβkn by Lemma 1. On the other hand, we have\n|〈ZC ,M∗C − M̃C〉| ≤ ‖ZC‖F‖M∗C − M̃C‖F (38)\n≤ ǫ √ αβnk/m\n√\n‖M∗C − M̃C‖1‖M∗C − M̃C‖∞ (39)\n≤ ǫ √ αβnk/m √ 2αβmn = √ 2ǫαβkn. (40)\nPutting these together, we obtain 〈BC ,M∗C − M̃C〉 ≤ (1 + √ 2)ǫαβkn. Expanding 〈BC ,M∗C − M̃C〉 as km ∑ i∈C ( ∑ j∈[m](Rij − M̃ij)A∗ij ) , we obtain\n1 |C| 1 βm ∑\ni∈C\n∑\nj∈[m]\n(T ∗j − M̃ij)A∗ij ≤ (1 + √ 2)ǫ. (41)\nScaling ǫ by a factor of 1 + √ 2 yields the desired result."
    }, {
      "heading" : "A.6 Concentration Bounds for r̃ (Proof of Lemma 3)",
      "text" : "We start by stating a lemma which will be useful both here and later:\nLemma 6. Let M ∈ [0, 1]n×m be a matrix of random variables such that ‖Mi‖22 ≤ βm for all rows i ∈ [n]. Define the deviation Di def= ∑m j=1 M̃ij(r̃j − k0m r∗j ). Then, for k0 ≥ 3 log(2n/vδ) min(ǫ,ǫ2) , with probability 1− δ, we have ∣ ∣\n∣ 1 |V |\n∑\ni∈V Di\n∣ ∣ ∣ ≤ ǫβk0 for all sets V ⊆ [n] with |V | ≥ v.\nGiven Lemma 6, the rest of the proof is fairly straightforward. Noting that ǫ ≤ 1 and applying this conclusion for v = αn, and k0 ≥ 3·8 2 log(2/αδ) ǫ2 , we see that\n1\nαn\n∑\ni∈C′\n∑\nj∈[m]\nM̃ijr ∗ ij ≥\n1\nαn\nm\nk0\n∑\ni∈C′\n∑\nj∈[m]\nM̃ij r̃ij − ǫ\n8 βm (42)\n≥ 1|C| m\nk0\n∑\ni∈C\n∑\nj∈[m]\nM̃ij r̃ij − ǫ\n8 βm (43)\n≥ 1|C| ∑\ni∈C\n∑\nj∈[m]\nM̃ijr ∗ ij −\nǫ 4 βm, (44)\nas was to be shown.\nProof of Lemma 6. Define the cumulant function ci(λ) def = log(Er̃[exp(λDi)]). We have\nci(λ) = log(Er̃[exp(λ ∑\nj\nM̃ij(r̃j − (k0/m)r∗j ))]) (45)\n= ∑\nj\nlog(Er̃[exp(λM̃ij(r̃j − (k0/m)r∗j ))]) (46)\n(i) ≤ ∑\nj\n(eλ − λ− 1)M̃2ij Var[r̃j ] (47)\n≤ (eλ − λ− 1) ∑\nj\nM̃2ij k0 m\n(48)\n≤ (eλ − λ− 1)βk0, (49) where (i) is Bennet’s inequality.\nWe also consider the cumulant function for the maximum average deviation over possible sets V :\nCv(λ) def = log\n(\nEr̃\n[\nmax |V |≥v exp\n(\nλ\n|V | ∑\ni∈V\nDi\n)])\n. (50)\nTo bound Cv(λ), we use the power mean inequality\nmax |V |≥v exp\n(\nλ\n|V | ∑\ni∈V\nDi\n)\n≤ max |V |≥v\n1\n|V | ∑\ni∈V\nexp (λDi) (51)\n≤ max |V |≥v\n1\n|V |\nn ∑\ni=1\nexp (λDi) (52)\n≤ 1 v\nn ∑\ni=1\nexp (λDi) . (53)\nTherefore,\nCv(λ) = log\n(\nEr̃\n[\nmax |V |≥v exp\n(\nλ\n|V | ∑\ni∈V\nDi\n)])\n(54)\n≤ log (\nEr̃\n[\n1\nv\nn ∑\ni=1\nexp (λDi)\n])\n(55)\n≤ log (n\nv exp\n( (eλ − λ− 1)βk0 )\n)\n(56)\n= log(n/v) + (eλ − λ− 1)βk0. (57) By applying a standard Chernoff bound argument to Cv(λ), we obtain\nP\n[\nmax |V |≥v\n∣ ∣ ∣ ∣ ∣ 1 |V | ∑\ni∈V\nDi\n∣ ∣ ∣ ∣ ∣ ≥ ǫβk0 ] ≤ 2n v exp ( −βk0 3 min(ǫ, ǫ2) ) . (58)\nIn particular, for k0 ≥ 3 log(2n/vδ)βmin(ǫ,ǫ2) , we have with probability 1 − δ that ∣ ∣ ∣ 1 |V | ∑ i∈V Di ∣ ∣\n∣ ≤ ǫβk0 for all sets V ⊆ [n] with |V | ≥ v, as was to be shown."
    }, {
      "heading" : "A.7 Correctness of Randomized Rounding (Proof of Lemma 4)",
      "text" : "Our goal is to show that the output of Algorithm 4 satisfies E[T ] = T0. First, observe that since (T0)j ≤ 1 for all j, each interval [sj−1, sj) has length at most 1, and so the for loop over z never picks the same index j twice. Moreover, the probability that j is included in T0 is exactly sj−sj−1 = (T0)j . The result follows by linearity of expectation."
    }, {
      "heading" : "A.8 Correctness of Algorithm 2 (Proof of Proposition 2)",
      "text" : "First, we claim that with probability 1 − δ, we will invoke RandomizedRound at most 4 log(1/δ)ǫβ times. To see this, note that E[〈T, r̃′〉] = 〈T0, r̃′〉, and 〈T, r̃′〉 ∈ [0, k0] almost surely. By Markov’s inequality, the probability that 〈T, r̃′〉 < 〈T0, r̃′〉 − ǫ4βk0 is at most k0−〈T0,r̃ ′〉 k0−〈T0,r̃′〉+(ǫ/4)βk0 . We can assume that 〈T0, r̃′〉 ≥ (ǫ/4)βk0 (since otherwise we accept T with probability 1), in which case the preceding expression is bounded by k0−(ǫ/4)βk0k0 = 1 − ǫ 4β. Therefore, the probability of accepting T in any given iteration of the while loop is at least ǫ4β, and so the probability of accepting at least once in 4 log(1/δ)ǫβ iterations is indeed at least 1− δ.\nNext, for k0 ≥ Ω ( log(2/ǫβδ) βǫ2 )\n, we can make the probability that |〈T, r̃− k0m r∗〉| ≥ ǫ4βk0 be at most δǫβ 4 log(1/δ)+1 (this follows from a standard Chernoff argument which we omit; Lemma 6 contains a superset of the necessary ideas). Therefore, by union bounding over the 4 log(1/δ)ǫβ possible T as well as T0, with probability 1−2δ we have |〈T, r̃− k0m r∗〉| ≤ ǫ4βk0 for whichever T we end up accepting, as well as for T = T0.\nConsequently, we have\n〈T, r∗〉 ≥ m k0 〈T, r̃′〉 − ǫ 4 βm (59)\n≥ m k0 〈T0, r̃′〉 − 2ǫ 4 βm (60) ≥ 〈T0, r∗〉 − 3ǫ\n4 βm (61)\n≥ 〈 1|C| ∑\ni∈C\nM̃i, r ∗〉 − ǫβm, (62)\nwhere the final step is Lemma 3. By scaling down the failure probability δ by a constant (to account for the probability of failure at each step of the above argument), Proposition 2 follows."
    }, {
      "heading" : "A.9 Proof of Theorem 2",
      "text" : "By Proposition 1, for k = Ω (\n1 βα3ǫ4 max\n( 1, mn )\n)\n, we can recover a matrix M̃ sat-\nisfying 1|C| 1 βm\n∑\ni∈C\n∑\nj∈[m](M ∗ ij − T ∗j )A∗ij ≤ ǫ, and hence by (5) M̃ also satisfies\n1 |C| 1 βm\n∑\ni∈C\n∑\nj∈[m](M ∗ ij − T ∗j )r∗j ≤ L · ǫ+ ǫ0.\nBy Proposition 2, we then recover a set T satisfying\n1\nβm\n∑\nj∈T\nr∗j ≥\n\n\n1\nβm\n1\n|C| ∑\ni∈C\n∑\nj∈[m]\nM̃ijr ∗ j\n\n− ǫ (63)\n≥\n\n\n1\nβm\n1\n|C| ∑\ni∈C\n∑\nj∈[m]\nT ∗j r ∗ j\n\n − [(L+ 1) · ǫ+ ǫ0] (64)\n=\n\n\n1\nβm\n∑\nj∈T∗\nr∗j\n\n− [(L + 1) · ǫ + ǫ0], (65)\nas was to be shown."
    }, {
      "heading" : "B Examples of Adversarial Behavior",
      "text" : "In this section, in order to provide some intuition we show two possible attacks that adversaries could employ to make it hard for us to recover the good items. The first attack creates a symmetric\nsituation, whereby there are 1α indistinguishable sets of potentially good items, and we are therefore forced to consider each set before we can find out which one is actually good. The second attack demonstrates the necessity of constraining each row to have a fixed sum, by showing that adversaries that are allowed to create very dense rows can have disproportionate influence on nuclear normbased recovery algorithms"
    }, {
      "heading" : "B.1 Necessity of Nuclear Norm Scaling",
      "text" : "Suppose for simplicity that α = β and n = m. Let J be the αn× αn all-ones matrix, and suppose that the full rating matrix A has a block structure:\nA∗ =\n\n \n\nJ (1− ǫ)J · · · (1− ǫ)J (1− ǫ)J J · · · (1− ǫ)J\n... ...\n. . . ...\n(1− ǫ)J (1− ǫ)J · · · J\n\n \n\n(66)\nIn other words, both the items and raters are partitioned into 1α blocks, each of size αn. A rater assigns a rating of 1 to everything in their corresponding block, and a rating of 1 − ǫ to everything outside of their block. Thus, there are 1α completely symmetric blocks, only one of which corresponds to the good raters. Since we do not know which of these blocks is actually good, we need to include them all in our solution M∗. Therefore, M∗ should be\nM∗ =\n\n \n J 0 · · · 0 0 J · · · 0 ... ... . . .\n... 0 0 · · · J\n\n \n\n(67)\nNote however that in this case, ‖M∗‖∗ = n, while √ αβnm = √ α2n2 = αn. We therefore need\nthe nuclear norm constraint in (1) to be at least 1α times larger than √ αβnm in order to capture the solution M∗ above.\nIt is not obvious to us that the additional 2ǫ factor appearing in (1) is actually necessary, but it was needed in our analysis in order to bound the impact of adversaries."
    }, {
      "heading" : "B.2 Necessity of Row Normalization",
      "text" : "Suppose that we did not include the row-normalization constraint ∑ j M̃ij ≤ βm in (1). For instance, this might happen if, instead of seeking all items of quality above a given quantile, we sought all items with quality above a given threshold (say, whose quality was great than 12 ). In this case we might pose the optimization problem\nmaximize 〈Ã− 12Jn,m,M〉, (68) subject to 0 ≤ Mij ≤ 1 ∀i, j,\n‖M‖∗ ≤ 2\nαǫ\n√\nαβnm,\nwhere Jn,m is the n × m all-ones matrix. There are several reasons not to do this (for instance, focusing on quality thresholds rather than quantile thresholds loses the robustness to monotonic transformations that our method enjoys). In this section, we will focus on the particular issue that (68) is less robust to adversaries than (1).\nConcretely, we will suppose that the adversaries are split into 13β ( 1 α − 1 )\nblocks of size 3αβn, each of which rates a random subset of m2 items positively and the rest negatively. So for instance the\nmatrix A∗ might look like (with α = 25 , β = 1 6 , n = 10,m = 12):\nA∗ =\n\n                     \n\n\n                     \n\ngo od\n1 1 0 0 0 0 0 0 0 0 0 0\n1 1 0 0 0 0 0 0 0 0 0 0\n1 1 0 0 0 0 0 0 0 0 0 0\n1 1 0 0 0 0 0 0 0 0 0 0\nba d 1 0 1 0 0 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 1 1 1 1\nba d 2 0 1 1 0 1 1 0 1 0 0 1 0\n0 1 1 0 1 1 0 1 0 0 1 0 ba d 3 1 0 1 1 0 0 1 0 0 1 0 1 1 0 1 1 0 0 1 0 0 1 0 1\n(69)\nThe nuclear norm of each individual bad block is √\n3 2αβnm, and because the blocks are chosen\nindependently of each other, the nuclear norm will be approximately additive across blocks. In addition, including a given bad block increases 〈Ã − 12J,M〉 by 34αβnm. In contrast, including the good block increases the nuclear norm by √ αβnm and only increases the objective by 12αβnm. The bad blocks therefore all give more “bang for the buck” in terms of how much they increase the objective vs. how much much they increase the nuclear norm, so we will add them before the good block.\nTo accomodate all these bad blocks, we need to allow ‖M‖∗ to be at least roughly 13β ( 1 α − 1 ) × √\n3 2αβnm = Ω\n(\n1 αβ\n√ αβnm )\n, which is adds an extra factor of 1β relative to when we constrain\nthe column sum. The issue can be seen in the above construction in (69): if we do not normalize the rows, then the rows controlled by adversaries can exert disproportionate influence (up to a factor of 1 β ) by creating columns that are much denser than those of the reliable raters."
    } ],
    "references" : [ {
      "title" : "Community detection in general stochastic block models: fundamental limits and efficient recovery",
      "author" : [ "E. Abbe", "C. Sandon" ],
      "venue" : null,
      "citeRegEx" : "Abbe and Sandon.,? \\Q2015\\E",
      "shortCiteRegEx" : "Abbe and Sandon.",
      "year" : 2015
    }, {
      "title" : "Multisection in the stochastic block model using semidefinite programming",
      "author" : [ "N. Agarwal", "A.S. Bandeira", "K. Koiliaris", "A. Kolla" ],
      "venue" : null,
      "citeRegEx" : "Agarwal et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Agarwal et al\\.",
      "year" : 2015
    }, {
      "title" : "Information-theoretic thresholds for community detection in sparse networks",
      "author" : [ "J. Banks", "C. Moore" ],
      "venue" : null,
      "citeRegEx" : "Banks and Moore.,? \\Q2016\\E",
      "shortCiteRegEx" : "Banks and Moore.",
      "year" : 2016
    }, {
      "title" : "Robust and computationally feasible community detection in the presence of arbitrary outlier nodes",
      "author" : [ "T.T. Cai", "X. Li" ],
      "venue" : "The Annals of Statistics,",
      "citeRegEx" : "Cai and Li.,? \\Q2015\\E",
      "shortCiteRegEx" : "Cai and Li.",
      "year" : 2015
    }, {
      "title" : "Improved graph clustering",
      "author" : [ "Y. Chen", "S. Sanghavi", "H. Xu" ],
      "venue" : "IEEE Transactions on Information Theory,",
      "citeRegEx" : "Chen et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Chen et al\\.",
      "year" : 2014
    }, {
      "title" : "Stochastic block model and community detection in the sparse graphs: A spectral algorithm with optimal rate of recovery",
      "author" : [ "P. Chin", "A. Rao", "V. Vu" ],
      "venue" : "In Conference on Learning Theory (COLT),",
      "citeRegEx" : "Chin et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Chin et al\\.",
      "year" : 2015
    }, {
      "title" : "Provably manipulation-resistant reputation systems",
      "author" : [ "P. Christiano" ],
      "venue" : "arXiv,",
      "citeRegEx" : "Christiano.,? \\Q2014\\E",
      "shortCiteRegEx" : "Christiano.",
      "year" : 2014
    }, {
      "title" : "Robust collaborative online learning. arXiv, 2016",
      "author" : [ "P. Christiano" ],
      "venue" : null,
      "citeRegEx" : "Christiano.,? \\Q2016\\E",
      "shortCiteRegEx" : "Christiano.",
      "year" : 2016
    }, {
      "title" : "Coloring semirandom graphs optimally. Automata, Languages and Programming, pages 71–100",
      "author" : [ "A. Coja-Oghlan" ],
      "venue" : null,
      "citeRegEx" : "Coja.Oghlan.,? \\Q2004\\E",
      "shortCiteRegEx" : "Coja.Oghlan.",
      "year" : 2004
    }, {
      "title" : "Solving NP-hard semirandom graph problems in polynomial expected time",
      "author" : [ "A. Coja-Oghlan" ],
      "venue" : "Journal of Algorithms,",
      "citeRegEx" : "Coja.Oghlan.,? \\Q2007\\E",
      "shortCiteRegEx" : "Coja.Oghlan.",
      "year" : 2007
    }, {
      "title" : "Algorithms for graph partitioning on the planted partition model",
      "author" : [ "A. Condon", "R.M. Karp" ],
      "venue" : "Random Structures and Algorithms,",
      "citeRegEx" : "Condon and Karp.,? \\Q2001\\E",
      "shortCiteRegEx" : "Condon and Karp.",
      "year" : 2001
    }, {
      "title" : "Crowdsourced judgement elicitation with endogenous proficiency",
      "author" : [ "A. Dasgupta", "A. Ghosh" ],
      "venue" : "In World Wide Web (WWW),",
      "citeRegEx" : "Dasgupta and Ghosh.,? \\Q2013\\E",
      "shortCiteRegEx" : "Dasgupta and Ghosh.",
      "year" : 2013
    }, {
      "title" : "Asymptotic analysis of the stochastic block model for modular networks and its algorithmic applications",
      "author" : [ "A. Decelle", "F. Krzakala", "C. Moore", "L. Zdeborová" ],
      "venue" : "Physical Review E,",
      "citeRegEx" : "Decelle et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Decelle et al\\.",
      "year" : 2011
    }, {
      "title" : "ImageNet: A large-scale hierarchical image database",
      "author" : [ "J. Deng", "W. Dong", "R. Socher", "L. Li", "K. Li", "L. Fei-Fei" ],
      "venue" : "In Computer Vision and Pattern Recognition (CVPR),",
      "citeRegEx" : "Deng et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Deng et al\\.",
      "year" : 2009
    }, {
      "title" : "Heuristics for semirandom graph problems",
      "author" : [ "U. Feige", "J. Kilian" ],
      "venue" : "Journal of Computer and System Sciences,",
      "citeRegEx" : "Feige and Kilian.,? \\Q2001\\E",
      "shortCiteRegEx" : "Feige and Kilian.",
      "year" : 2001
    }, {
      "title" : "Finding and certifying a large hidden clique in a semirandom graph",
      "author" : [ "U. Feige", "R. Krauthgamer" ],
      "venue" : "Random Structures and Algorithms,",
      "citeRegEx" : "Feige and Krauthgamer.,? \\Q2000\\E",
      "shortCiteRegEx" : "Feige and Krauthgamer.",
      "year" : 2000
    }, {
      "title" : "Community detection in sparse networks via Grothendieck’s",
      "author" : [ "O. Guédon", "R. Vershynin" ],
      "venue" : "inequality. arXiv,",
      "citeRegEx" : "Guédon and Vershynin.,? \\Q2014\\E",
      "shortCiteRegEx" : "Guédon and Vershynin.",
      "year" : 2014
    }, {
      "title" : "Amazon glitch unmasks war of reviewers",
      "author" : [ "A. Harmon" ],
      "venue" : "New York Times,",
      "citeRegEx" : "Harmon.,? \\Q2004\\E",
      "shortCiteRegEx" : "Harmon.",
      "year" : 2004
    }, {
      "title" : "Stochastic blockmodels: Some first steps",
      "author" : [ "P.W. Holland", "K.B. Laskey", "S. Leinhardt" ],
      "venue" : "Social Networks,",
      "citeRegEx" : "Holland et al\\.,? \\Q1983\\E",
      "shortCiteRegEx" : "Holland et al\\.",
      "year" : 1983
    }, {
      "title" : "Truth serums for massively crowdsourced evaluation",
      "author" : [ "V. Kamble", "N. Shah", "D. Marn", "A. Parekh", "K. Ramachandran" ],
      "venue" : "tasks. arXiv,",
      "citeRegEx" : "Kamble et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Kamble et al\\.",
      "year" : 2015
    }, {
      "title" : "Budget-optimal task allocation for reliable crowdsourcing systems",
      "author" : [ "D.R. Karger", "S. Oh", "D. Shah" ],
      "venue" : "Operations Research,",
      "citeRegEx" : "Karger et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Karger et al\\.",
      "year" : 2014
    }, {
      "title" : "Semirandom models as benchmarks for coloring algorithms",
      "author" : [ "M. Krivelevich", "D. Vilenchik" ],
      "venue" : "In Meeting on Analytic Algorithmics and Combinatorics,",
      "citeRegEx" : "Krivelevich and Vilenchik.,? \\Q2006\\E",
      "shortCiteRegEx" : "Krivelevich and Vilenchik.",
      "year" : 2006
    }, {
      "title" : "Concentration and regularization of random graphs",
      "author" : [ "K. Makarychev", "Y. Makarychev", "A. Vijayaraghavan" ],
      "venue" : "self assessment in massive online classes. Design Thinking Research, pages 131–168,",
      "citeRegEx" : "Makarychev et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Makarychev et al\\.",
      "year" : 2015
    }, {
      "title" : "Stochastic block models and reconstruction",
      "author" : [ "E. Mossel", "J. Neeman", "A. Sly" ],
      "venue" : "arXiv,",
      "citeRegEx" : "2015",
      "shortCiteRegEx" : "2015",
      "year" : 2012
    }, {
      "title" : "A proof of the block model threshold conjecture",
      "author" : [ "E. Mossel", "J. Neeman", "A. Sly" ],
      "venue" : null,
      "citeRegEx" : "Mossel et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Mossel et al\\.",
      "year" : 2013
    }, {
      "title" : "The influence limiter: provably manipulation-resistant recommender systems",
      "author" : [ "P. Resnick", "R. Sami" ],
      "venue" : "International ACM Conference on Supporting Group Work,",
      "citeRegEx" : "Resnick and Sami.,? \\Q2007\\E",
      "shortCiteRegEx" : "Resnick and Sami.",
      "year" : 2007
    } ],
    "referenceMentions" : [ {
      "referenceID" : 17,
      "context" : ", 2015), aggregation of customer reviews (Harmon, 2004), and the generation/curation of large datasets (Deng et al.",
      "startOffset" : 41,
      "endOffset" : 55
    }, {
      "referenceID" : 13,
      "context" : ", 2015), aggregation of customer reviews (Harmon, 2004), and the generation/curation of large datasets (Deng et al., 2009).",
      "startOffset" : 103,
      "endOffset" : 122
    }, {
      "referenceID" : 17,
      "context" : "This is particularly relevant when raters have an incentive to collude and cheat as in the setting of peer grading, as well as reviews on sites like Amazon and Yelp, where artists and firms are incentivized to manufacture positive reviews for their own products and negative reviews for their rivals (Harmon, 2004; Mayzlin et al., 2012).",
      "startOffset" : 300,
      "endOffset" : 336
    }, {
      "referenceID" : 18,
      "context" : "Our technical tools draw on semidefinite programming methods for matrix completion, which have been used to study graph clustering as well as community detection in the stochastic block model (Holland et al., 1983; Condon and Karp, 2001).",
      "startOffset" : 192,
      "endOffset" : 237
    }, {
      "referenceID" : 10,
      "context" : "Our technical tools draw on semidefinite programming methods for matrix completion, which have been used to study graph clustering as well as community detection in the stochastic block model (Holland et al., 1983; Condon and Karp, 2001).",
      "startOffset" : 192,
      "endOffset" : 237
    }, {
      "referenceID" : 12,
      "context" : "Our setting corresponds to the sparse case where all nodes have constant degree, which has recently seen great interest (Decelle et al., 2011; Mossel et al., 2012; 2013b;a; Massoulié, 2014; Guédon and Vershynin, 2014; Mossel et al., 2015; Chin et al., 2015; Abbe and Sandon, 2015; Makarychev et al., 2015).",
      "startOffset" : 120,
      "endOffset" : 305
    }, {
      "referenceID" : 16,
      "context" : "Our setting corresponds to the sparse case where all nodes have constant degree, which has recently seen great interest (Decelle et al., 2011; Mossel et al., 2012; 2013b;a; Massoulié, 2014; Guédon and Vershynin, 2014; Mossel et al., 2015; Chin et al., 2015; Abbe and Sandon, 2015; Makarychev et al., 2015).",
      "startOffset" : 120,
      "endOffset" : 305
    }, {
      "referenceID" : 5,
      "context" : "Our setting corresponds to the sparse case where all nodes have constant degree, which has recently seen great interest (Decelle et al., 2011; Mossel et al., 2012; 2013b;a; Massoulié, 2014; Guédon and Vershynin, 2014; Mossel et al., 2015; Chin et al., 2015; Abbe and Sandon, 2015; Makarychev et al., 2015).",
      "startOffset" : 120,
      "endOffset" : 305
    }, {
      "referenceID" : 0,
      "context" : "Our setting corresponds to the sparse case where all nodes have constant degree, which has recently seen great interest (Decelle et al., 2011; Mossel et al., 2012; 2013b;a; Massoulié, 2014; Guédon and Vershynin, 2014; Mossel et al., 2015; Chin et al., 2015; Abbe and Sandon, 2015; Makarychev et al., 2015).",
      "startOffset" : 120,
      "endOffset" : 305
    }, {
      "referenceID" : 22,
      "context" : "Our setting corresponds to the sparse case where all nodes have constant degree, which has recently seen great interest (Decelle et al., 2011; Mossel et al., 2012; 2013b;a; Massoulié, 2014; Guédon and Vershynin, 2014; Mossel et al., 2015; Chin et al., 2015; Abbe and Sandon, 2015; Makarychev et al., 2015).",
      "startOffset" : 120,
      "endOffset" : 305
    }, {
      "referenceID" : 15,
      "context" : "Several authors have considered semirandom settings for graph clustering, which allow for some types of adversarial behavior (Feige and Krauthgamer, 2000; Feige and Kilian, 2001; Coja-Oghlan, 2004; Krivelevich and Vilenchik, 2006; Coja-Oghlan, 2007; Makarychev et al., 2012; Chen et al., 2014; Guédon and Vershynin, 2014; Moitra et al., 2015; Agarwal et al., 2015).",
      "startOffset" : 125,
      "endOffset" : 364
    }, {
      "referenceID" : 14,
      "context" : "Several authors have considered semirandom settings for graph clustering, which allow for some types of adversarial behavior (Feige and Krauthgamer, 2000; Feige and Kilian, 2001; Coja-Oghlan, 2004; Krivelevich and Vilenchik, 2006; Coja-Oghlan, 2007; Makarychev et al., 2012; Chen et al., 2014; Guédon and Vershynin, 2014; Moitra et al., 2015; Agarwal et al., 2015).",
      "startOffset" : 125,
      "endOffset" : 364
    }, {
      "referenceID" : 8,
      "context" : "Several authors have considered semirandom settings for graph clustering, which allow for some types of adversarial behavior (Feige and Krauthgamer, 2000; Feige and Kilian, 2001; Coja-Oghlan, 2004; Krivelevich and Vilenchik, 2006; Coja-Oghlan, 2007; Makarychev et al., 2012; Chen et al., 2014; Guédon and Vershynin, 2014; Moitra et al., 2015; Agarwal et al., 2015).",
      "startOffset" : 125,
      "endOffset" : 364
    }, {
      "referenceID" : 21,
      "context" : "Several authors have considered semirandom settings for graph clustering, which allow for some types of adversarial behavior (Feige and Krauthgamer, 2000; Feige and Kilian, 2001; Coja-Oghlan, 2004; Krivelevich and Vilenchik, 2006; Coja-Oghlan, 2007; Makarychev et al., 2012; Chen et al., 2014; Guédon and Vershynin, 2014; Moitra et al., 2015; Agarwal et al., 2015).",
      "startOffset" : 125,
      "endOffset" : 364
    }, {
      "referenceID" : 9,
      "context" : "Several authors have considered semirandom settings for graph clustering, which allow for some types of adversarial behavior (Feige and Krauthgamer, 2000; Feige and Kilian, 2001; Coja-Oghlan, 2004; Krivelevich and Vilenchik, 2006; Coja-Oghlan, 2007; Makarychev et al., 2012; Chen et al., 2014; Guédon and Vershynin, 2014; Moitra et al., 2015; Agarwal et al., 2015).",
      "startOffset" : 125,
      "endOffset" : 364
    }, {
      "referenceID" : 4,
      "context" : "Several authors have considered semirandom settings for graph clustering, which allow for some types of adversarial behavior (Feige and Krauthgamer, 2000; Feige and Kilian, 2001; Coja-Oghlan, 2004; Krivelevich and Vilenchik, 2006; Coja-Oghlan, 2007; Makarychev et al., 2012; Chen et al., 2014; Guédon and Vershynin, 2014; Moitra et al., 2015; Agarwal et al., 2015).",
      "startOffset" : 125,
      "endOffset" : 364
    }, {
      "referenceID" : 16,
      "context" : "Several authors have considered semirandom settings for graph clustering, which allow for some types of adversarial behavior (Feige and Krauthgamer, 2000; Feige and Kilian, 2001; Coja-Oghlan, 2004; Krivelevich and Vilenchik, 2006; Coja-Oghlan, 2007; Makarychev et al., 2012; Chen et al., 2014; Guédon and Vershynin, 2014; Moitra et al., 2015; Agarwal et al., 2015).",
      "startOffset" : 125,
      "endOffset" : 364
    }, {
      "referenceID" : 1,
      "context" : "Several authors have considered semirandom settings for graph clustering, which allow for some types of adversarial behavior (Feige and Krauthgamer, 2000; Feige and Kilian, 2001; Coja-Oghlan, 2004; Krivelevich and Vilenchik, 2006; Coja-Oghlan, 2007; Makarychev et al., 2012; Chen et al., 2014; Guédon and Vershynin, 2014; Moitra et al., 2015; Agarwal et al., 2015).",
      "startOffset" : 125,
      "endOffset" : 364
    }, {
      "referenceID" : 0,
      "context" : ", 2015; Abbe and Sandon, 2015; Makarychev et al., 2015). Makarychev et al. (2015) in particular provide an algorithm that is robust to adversarial perturbations, but only if the perturbation has size o(n); see also Cai and Li (2015) for robusness results when the node degree is logarithmic.",
      "startOffset" : 8,
      "endOffset" : 82
    }, {
      "referenceID" : 0,
      "context" : ", 2015; Abbe and Sandon, 2015; Makarychev et al., 2015). Makarychev et al. (2015) in particular provide an algorithm that is robust to adversarial perturbations, but only if the perturbation has size o(n); see also Cai and Li (2015) for robusness results when the node degree is logarithmic.",
      "startOffset" : 8,
      "endOffset" : 233
    }, {
      "referenceID" : 4,
      "context" : "For instance, (Chen et al., 2014) place no constraint on the sum of each row in M (instead of recovering the β-quantile, they normalize Ã to lie in [−1, 1] and recover the items with a positive rating).",
      "startOffset" : 14,
      "endOffset" : 33
    }, {
      "referenceID" : 2,
      "context" : ", in loose analogy to recent results for the stochastic block model (Banks and Moore, 2016).",
      "startOffset" : 68,
      "endOffset" : 91
    }, {
      "referenceID" : 25,
      "context" : "While several mechanisms have been proposed for these tasks, they typically assume that rater accuracy is observable online (Resnick and Sami, 2007), that raters are rational agents maximizing a payoff function (Dasgupta and Ghosh, 2013; Kamble et al.",
      "startOffset" : 124,
      "endOffset" : 148
    }, {
      "referenceID" : 11,
      "context" : "While several mechanisms have been proposed for these tasks, they typically assume that rater accuracy is observable online (Resnick and Sami, 2007), that raters are rational agents maximizing a payoff function (Dasgupta and Ghosh, 2013; Kamble et al., 2015; Shnayder et al., 2016), that the workers follow a simple statistical model (Karger et al.",
      "startOffset" : 211,
      "endOffset" : 281
    }, {
      "referenceID" : 19,
      "context" : "While several mechanisms have been proposed for these tasks, they typically assume that rater accuracy is observable online (Resnick and Sami, 2007), that raters are rational agents maximizing a payoff function (Dasgupta and Ghosh, 2013; Kamble et al., 2015; Shnayder et al., 2016), that the workers follow a simple statistical model (Karger et al.",
      "startOffset" : 211,
      "endOffset" : 281
    }, {
      "referenceID" : 20,
      "context" : ", 2016), that the workers follow a simple statistical model (Karger et al., 2014; Zhang et al., 2014; Zhou et al., 2015), or some combination of the above (Shah and Zhou, 2015; Shah et al.",
      "startOffset" : 60,
      "endOffset" : 120
    }, {
      "referenceID" : 23,
      "context" : "1 Matrix Concentration Bound of Le and Vershynin (2015) For ease of reference, here we state the matrix concentration bound from Le and Vershynin (2015), which we make use of in the proofs below.",
      "startOffset" : 50,
      "endOffset" : 153
    }, {
      "referenceID" : 23,
      "context" : "1 Matrix Concentration Bound of Le and Vershynin (2015) For ease of reference, here we state the matrix concentration bound from Le and Vershynin (2015), which we make use of in the proofs below. Theorem 3 (Theorem 2.1 in Le and Vershynin (2015)).",
      "startOffset" : 50,
      "endOffset" : 246
    } ],
    "year" : 2016,
    "abstractText" : "We consider a crowdsourcing model in which n workers are asked to rate the quality of n items previously generated by other workers. An unknown set of αn workers generate reliable ratings, while the remaining workers may behave arbitrarily and possibly adversarially. The manager of the experiment can also manually evaluate the quality of a small number of items, and wishes to curate together almost all of the high-quality items with at most an ǫ fraction of lowquality items. Perhaps surprisingly, we show that this is possible with an amount of work required of the manager, and each worker, that does not scale with n: the dataset can be curated with Õ (",
    "creator" : "LaTeX with hyperref package"
  }
}