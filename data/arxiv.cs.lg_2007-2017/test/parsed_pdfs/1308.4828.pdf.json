{
  "name" : "1308.4828.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Peter Sunehag" ],
    "emails" : [ "tor.lattimore@anu.edu.au", "marcus.hutter@anu.edu.au", "peter.sunehag@anu.edu.au" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n30 8.\n48 28\nv1 [\ncs .L\nG ]\n2 2\nContents"
    }, {
      "heading" : "1 Introduction 2",
      "text" : ""
    }, {
      "heading" : "2 Notation 3",
      "text" : ""
    }, {
      "heading" : "3 Finite Case 4",
      "text" : ""
    }, {
      "heading" : "4 Compact Case 12",
      "text" : ""
    }, {
      "heading" : "5 Unbounded Environment Classes 12",
      "text" : ""
    }, {
      "heading" : "6 Lower Bound 13",
      "text" : "7 Conclusions 13 References 14 A Technical Results 15 B Constants 16 C Table of Notation 16\nKeywords\nReinforcement learning; sample-complexity; exploration exploitation."
    }, {
      "heading" : "1 Introduction",
      "text" : "Reinforcement Learning (RL) is the task of learning policies that lead to nearly-optimal rewards where the environment is unknown. One metric of the efficiency of an RL algorithm is samplecomplexity, which is a high probability upper bound on the number of time-steps when that algorithm is not nearly-optimal that holds for all environment in some class. Such bounds are typically shown for very specific classes of environments, such as (partially observable/factored) Markov Decision Processes (MDP) and bandits. We consider more general classes of environments where at each time-step an agent takes an action a ∈ A where-upon it receives reward r ∈ [0, 1] and an observation o ∈ O, which are generated stochastically by the environment and may depend arbitrarily on the entire history sequence.\nWe present a new reinforcement learning algorithm, named Maximum Exploration Reinforcement Learning (MERL), that accepts as input a finite set M := {ν1, · · · , νN} of arbitrary environments, an accuracy ǫ, and a confidence δ. The main result is that MERL has a sample-complexity of\nÕ\n(\nN ǫ2(1− γ)3 log 2 N δǫ(1− γ)\n)\n,\nwhere 1/(1− γ) is the effective horizon determined by discount rate γ. We also consider the case where M is infinite, but compact with respect to a particular topology. In this case, a variant of MERL has the same sample-complexity as above, but where N is replaced by the size of the smallest ǫ-cover. A lower bound is also given that matches the upper bound except for logarithmic factors. Finally, if M is non-compact then in general no finite sample-complexity bound exists. Related work. Many authors have worked on the sample-complexity of RL in various settings. The simplest case is the multiarmed bandit problem that has been extensively studied with varying assumptions. The typical measure of efficiency in the bandit literature is regret, but samplecomplexity bounds are also known and sometimes used. The next step from bandits is finite state MDPs, of which bandits are an example with only a single state. There are two main settings when MDPs are considered, the discounted case where sample-complexity bounds are proven and the undiscounted (average reward) case where regret bounds are more typical. In the discounted setting the upper and lower bounds on sample-complexity are now extremely refined. See Strehl et al. [2009] for a detailed review of the popular algorithms and theorems. More recent work on closing the gap between upper and lower bounds is by Szita and Szepesvári [2010], Lattimore and Hutter [2012], Azar et al. [2012]. In the undiscounted case it is necessary to make some form of ergodicity assumption as without this regret bounds cannot be given. In this work we avoid ergodicity assumptions and discount future rewards. Nevertheless, our algorithm borrows some tricks used by UCRL2 Auer et al. [2010]. Previous work for more general environment classes is somewhat limited. For factored MDPs there are known bounds, see Chakraborty and Stone [2011] and references there-in. Even-dar et al. [2005] give essentially unimprovable exponential bounds on the sample-complexity of learning in finite partially observable MDPs. Odalric-Ambrym et al. [2013] show regret bounds\nfor undiscounted RL where the true environment is assumed to be finite, Markov and communicating, but where the state is not directly observable. As far as we know there has been no work on the sample-complexity of RL when environments are completely general, but asymptotic results have garnered some attention with positive results by Hutter [2002], Ryabko and Hutter [2008], Sunehag and Hutter [2012] and (mostly) negative ones by Lattimore and Hutter [2011b]. Perhaps the closest related worked is Diuk et al. [2009], which deals with a similar problem in the rather different setting of learning the optimal predictor from a class of N experts. They obtain an O(N logN) bound, which is applied to the problem of structure learning for discounted finite-state factored MDPs. Our work generalises this approach to the non-Markov case and compact model classes."
    }, {
      "heading" : "2 Notation",
      "text" : "The definition of environments is borrowed from the work of Hutter [2005], although the notation is slightly more formal to ease the application of martingale inequalities.\nGeneral. N = {0, 1, 2, · · · } is the natural numbers. For the indicator function we write [[x = y]] = 1 if x = y and 0 otherwise. We use ∧ and ∨ for logical and/or respectively. If A is a set then |A| is its size and A∗ is the set of all finite strings (sequences) over A. If x and y are sequences then x ⊏ y means that x is a prefix of y. Unless otherwise mentioned, log represents the natural logarithm. For random variable X we write EX for its expectation. For x ∈ R, ⌈x⌉ is the ceiling function. Environments and policies. Let A, O and R ⊂ R be finite sets of actions, observations and rewards respectively and H := A × O × R. H∞ is the set of infinite history sequences while H∗ := (A × O × R)∗ is the set of finite history sequences. If h ∈ H∗ then ℓ(h) is the number of action/observation/reward tuples in h. We write at(h), ot(h), rt(h) for the tth action/observation/reward of history sequence h. For h ∈ H∗, Γh := {h′ ∈ H∞ : h ⊏ h′} is the cylinder set. Let F := σ({Γh : h ∈ H∗}) and Ft := σ({Γh : h ∈ H∗ ∧ ℓ(h) = t}) be σ-algebras. An environment µ is a set of conditional probability distributions over observation/reward pairs given the history so far. A policy π is a function π : H∗ → A. An environment and policy interact sequentially to induce a measure, Pµ,π, on filtered probability space (H∞,F , {Ft}). For convenience, we abuse notation and write Pµ,π(h) := Pµ,π(Γh). If h ⊏ h ′ then conditional probabilities are Pµ,π(h ′|h) := Pµ,π(h′)/Pµ,π(h). Rt(h; d) := ∑t+d k=t γ\nk−trk(h) is the d-step return function and Rt(h) := limd→∞ Rt(h; d). Given history ht with ℓ(ht) = t, the value function is defined by V πµ (ht; d) := E[Rt(h; d)|ht] where the expectation is taken with respect to Pµ,π(·|ht). V πµ (ht) := limd→∞ V π µ (ht; d). The optimal policy for environment µ is π ∗ µ := argmaxπ V π µ , which with our assumptions is known to exist Lattimore and Hutter [2011a]. The value of the optimal policy is V ∗µ := V π∗µ µ . In general, µ denotes the true environment while ν is a model. π will typically be the policy of the algorithm under consideration. Q∗µ(h, a) is the value in history h of following policy π∗µ except for the first time-step when action a is taken. M is a set of environments (models). Sample-complexity. Policy π is ǫ-optimal in history h and environment µ if V ∗µ (h)−V πµ (h) ≤ ǫ. The sample-complexity of a policy π in environment class M is the smallest Λ such that, with high probability, π is ǫ-optimal for all but Λ time-steps for all µ ∈ M. Define Lǫµ,π : H∞ → N∪ {∞} to be the number of time-steps when π is not ǫ-optimal.\nLǫµ,π(h) :=\n∞ ∑\nt=1\n[ V ∗µ (ht)− V πµ (ht) > ǫ ] ,\nwhere ht is the length t prefix of h. The sample-complexity of policy π is Λ with respect to accuracy ǫ and confidence 1− δ if P {\nLǫµ,π(h) > Λ } < δ, ∀µ ∈ M."
    }, {
      "heading" : "3 Finite Case",
      "text" : "We start with the finite case where the true environment is known to belong to a finite set of models, M. The Maximum Exploration Reinforcement Learning algorithm is model-based in the sense that it maintains a set, Mt ⊆ M, where models are eliminated once they become implausible. The algorithm operates in phases of exploration and exploitation, choosing to exploit if it knows all plausible environments are reasonably close under all optimal policies and explore otherwise. This method of exploration essentially guarantees that MERL is nearly optimal whenever it is exploiting and the number of exploration phases is limited with high probability. The main difficulty is specifying what it means to be plausible. Previous authors working on finite environments, such as MDPs or bandits, have removed models for which the transition probabilities are not sufficiently close to their empirical estimates. In the more general setting this approach fails because states (histories) are never visited more than once, so sufficient empirical estimates cannot be collected. Instead, we eliminate environments if the reward we actually collect over time is not sufficiently close to the reward we expected given that environment.\nBefore giving the explicit algorithm, we explain the operation of MERL more formally in two parts. First we describe how it chooses to explore and exploit and then how the model class is maintained. See Figure 2 for a diagram of how exploration and exploitation occurs.\nExploring and exploiting. At each time-step t MERL computes the pair of environments ν, ν in the model class Mt and the policy π maximising the difference\n∆ := V πν (h; d)− V πν (h; d), d := 1 1− γ log 8 (1− γ)ǫ .\nIf ∆ > ǫ/4, then MERL follows policy π for d time-steps, which we call an exploration phase. Otherwise, for one time-step it follows the optimal policy with respect to the first environment currently in the model class. Therefore, if MERL chooses to exploit, then all policies and environments in the model class lead to similar values, which implies that exploiting is near-optimal. If MERL explores, then either V πν (h; d) − V πµ (h; d) > ǫ/8 or V πµ (h; d) − V πν (h; d) > ǫ/8, which will allow us to apply concentration inequalities to eventually eliminate either ν (the upper bound) or ν (the lower bound). The model class. An exploration phase is a κ-exploration phase if ∆ ∈ [ǫ2κ−2, ǫ2κ−1), where\nκ ∈ K := { 0, 1, 2, · · · , log2 1 ǫ(1− γ) + 2 } .\nFor each environment ν ∈ M and each κ ∈ K, MERL associates a counter E(ν, κ), which is incremented at the start of a κ-exploration phase if ν ∈ {ν, ν}. At the end of each κ-exploration phase MERL calculates the discounted return actually received during that exploration phase R ∈ [0, 1/(1− γ)] and records the values\nX(ν, κ) := (1− γ)(V πν (h; d)−R) X(ν, κ) := (1− γ)(R− V πν (h; d)),\nwhere h is the history at the start of the exploration phase. So X(ν, κ) is the difference between the return expected if the true model was ν and the actual return and X(ν, κ) is the difference between the actual return and the expected return if the true model was ν. Since the expected value of R is V πµ (h; d), and ν,ν are upper and lower bounds respectively, the expected values of both X(ν, κ) and X(ν, κ) are non-negative and at least one of them has expectation larger than (1− γ)ǫ/8.\nMERL eliminates environment ν from the model class if the cumulative sum of X(ν, κ) over all exploration phases where ν ∈ {ν, ν} is sufficiently large, but it tests this condition only when the counts E(ν, κ) has increased enough since the last test. Let αj := ⌈ αj ⌉ for α ∈ (1, 2) as defined in\nthe algorithm. MERL only tests if ν should be removed from the model class when E(ν, κ) = αj for some j ∈ N. This restriction ensures that tests are not performed too often, which allows us to apply the union bound without losing too much. Note that if the true environment µ ∈ {ν, ν}, then Eµ,πX(µ, κ) = 0, which will ultimately be enough to ensure that µ remains in the model class with high probability. The reason for using κ to bucket exploration phases will become apparent later in the proof of Lemma 3.\nAlgorithm 1 MERL\n1: Inputs: ǫ, δ andM := {ν1, ν2, · · · , νN}. 2: t = 1 and h empty history 3: d := 1\n1−γ log 8 (1−γ)ǫ , δ1 := δ\n32|K|N3/2\n4: α := 4 √ N\n4 √ N−1 and αj := ⌈ αj ⌉\n5: E(ν, κ) := 0, ∀ν ∈M and κ ∈ N 6: loop 7: repeat 8: Π := {π∗ν : ν ∈ M} 9: ν, ν, π := argmax\nν,ν∈M,π∈Π V πν (h; d)− V π ν (h; d)\n10: if ∆ := V πν (h; d)− V π ν (h; d) > ǫ/4 then 11: h̃ = h and R = 0 12: for j = 0→ d do 13: R = R+ γjrt(h) 14: Act(π) 15: end for 16: κ := min { κ ∈ N : ∆ > ǫ2κ−2 }\n. 17: E(ν, κ) = E(ν, κ) + 1 and E(ν, κ) = E(ν, κ) + 1 18: X(ν, κ)E(ν,κ) = (1− γ)(V π ν (h̃; d)−R) 19: X(ν, κ)E(ν,κ) = (1− γ)(R − V π ν (h̃; d)) 20: else 21: i := min {i : νi ∈M} and Act(π ∗ νi ) 22: end if 23: until ∃ν ∈ M, κ, j ∈ N such that E(ν, κ) = αj and\nE(ν,κ) ∑\ni=1\nX(ν, κ)i ≥\n√\n2E(ν, κ) log E(ν, κ)\nδ1 .\n24: M =M− {ν} 25: end loop 26: function Act(π) 27: Take action at = π(h) and receive reward and observation rt, ot from environment 28: t← t+ 1 and h← hatotrt 29: end function\nSubscripts. For clarity, we have omitted subscripts in the pseudo-code above. In the analysis we will refer to Et(ν, κ) and Mt for the values of E(ν, κ) and M respectively at time-step t. We write νt for νi in line 21 and similarly πt := π ∗ νt .\nPhases. An exploration phase is a period of exactly d time-steps, starting at time-step t if\n1. t is not currently in an exploration phase.\n2. ∆ := V πν (ht; d)− V πν (ht; d) > ǫ/4.\nWe say it is a ν-exploration phase if ν = ν or ν = ν and a κ-exploration phase if ∆ ∈ [ǫ2κ−2, ǫ2κ−1) ≡ [ǫκ, 2ǫκ) where ǫκ := ǫ2κ−2. It is a (ν, κ)-exploration phase if it satisfies both\nof the previous statements. We say that MERL is exploiting at time-step t if t is not in an exploration phase. A failure phase is also a period of d time-steps and starts in time-step t if\n1. t is not in an exploration phase or earlier failure phase\n2. V ∗µ (ht)− V πµ (ht) > ǫ.\nUnlike exploration phases, the algorithm does not depend on the failure phases, which are only used in the analysis, An exploration or failure phase starting at time-step t is proper if µ ∈ Mt. The effective horizon d is chosen to ensure that V πµ (h; d) ≥ V πµ (h)− ǫ/8 for all π, µ and h.\nTest statistics. We have previously remarked that most traditional model-based algorithms with sample-complexity guarantees record statistics about the transition probabilities of an environment. Since the environments are assumed to be finite, these statistics eventually become accurate (or irrelevant) and the standard theory on the concentration of measure can be used for hypothesis testing. In the general case, environments can be infinite and so we cannot collect useful statistics about individual transitions. Instead, we use the statistics X(ν, κ), which are dependent on the value function rather than individual transitions. These satisfy Eµ,π[X(µ, κ)i] = 0 while Eµ,π[X(ν, κ)i] ≥ 0 for all ν ∈ Mt. Testing is then performed on the statistic ∑αk i=1 X(ν, κ)i, which will satisfy certain martingale inequalities.\nUpdates. As MERL explores, it updates its model class, Mt ⊆ M, by removing environments that have become implausible. This is comparable to the updating of confidence intervals for algorithms such as MBIE (Strehl and Littman, 2005) or UCRL2 (Auer et al., 2010). In MBIE, the confidence interval about the empirical estimate of a transition probability is updated after every observation. A slight theoretical improvement used by UCRL2 is to only update when the number of samples of a particular statistic doubles. The latter trick allows a cheap application of the union bound over all updates without wasting too many samples. For our purposes, however, we need to update slightly more often than the doubling trick would allow. Instead, we check if an environment should be eliminated if the number of (ν, κ)-exploration phases is exactly αj for some j where αj := ⌈ αj ⌉ and α := 4 √ N\n4 √ N−1 ∈ (1, 2). Since the growth of αj is still exponential, the\nunion bound will still be applicable.\nProbabilities. For the remainder of this section, unless otherwise mentioned, all probabilities and expectations are with respect to Pµ,π where π is the policy of Algorithm 1 and µ ∈ M is the true environment.\nAnalysis. Define Gmax := 216N |K| ǫ2(1−γ)2 log 2 29N ǫ2(1−γ)2δ1 and Emax := 216N ǫ2(1−γ)2 log 2 29N ǫ2(1−γ)2δ1 , which are high probability bounds on the number of failure and exploration phases respectively.\nTheorem 1. Let µ ∈ M = {ν1, ν2, · · · νN} be the true environment and π be the policy of Algorithm 1. Then\nP { Lǫµ,π(h) ≥ d · (Gmax + Emax) } ≤ δ.\nIf lower order logarithmic factors are dropped then the sample-complexity bound of MERL\ngiven by Theorem 1 is Õ (\nN ǫ2(1−γ)3 log 2 N δǫ(1−γ)\n)\n. Theorem 1 follows from three lemmas.\nLemma 2. µ ∈ Mt for all t with probability 1− δ/4.\nLemma 3. The number of proper failure phases is bounded by\nGmax := 216N |K| ǫ2(1− γ)2 log 2 2 9N ǫ2(1− γ)2δ1\nwith probability at least 1− δ2 .\nLemma 4. The number of proper exploration phases is bounded by\nEmax := 216N ǫ2(1− γ)2 log 2 2 9N ǫ2(1− γ)2δ1\nwith probability at least 1− δ4 .\nProof of Theorem 1. Applying the union bound to the results of Lemmas 2, 3 and 4 gives the following with probability at least 1− δ.\n1. There are no non-proper exploration or failure phases.\n2. The number of proper exploration phases is at most Emax.\n3. The number of proper failure phases is at most Gmax.\nIf π is not ǫ-optimal at time-step t then t is either in an exploration or failure phase. Since both are exactly d time-steps long the total number of time-steps when π is sub-optimal is at most d · (Gmax + Emax).\nWe now turn our attention to proving Lemmas 2, 3 and 4. Of these, Lemma 4 is more conceptually challenging while Lemma 3 is intuitively unsurprising, but technically difficult. Proof of Lemma 2. If µ is removed from M, then there exists a κ and j ∈ N such that αj ∑\ni=1\nX(µ, κ)i ≥ √ 2αj log αj δ1 .\nFix a κ ∈ K, E∞(µ, κ) := limt Et(µ, κ) and Xi := X(µ, κ)i. Define a sequence of random variables\nX̃i :=\n{\nXi if i ≤ E∞(µ, κ) 0 otherwise.\nNow we claim that Bn := ∑n i=1 X̃i is a martingale with |Bi+1 −Bi| ≤ 1 and EBi = 0. That it is a martingale with zero expectation follows because if t is the time-step at the start of the exploration phase associated with variable Xi, then E[Xi|Ft] = 0. |Bi+1 −Bi| ≤ 1 because discounted returns are bounded in [0, 1/(1− γ)] and by the definition of Xi.\nFor all j ∈ N, we have by Azuma’s inequality that\nP\n{\nBαj ≥ √ 2αj log αj δ1\n}\n≤ δ1 αj .\nApply the union bound over all j.\nP\n{\n∃j ∈ N : Bαj ≥ √ 2αj log αj δ1\n} ≤ ∞ ∑\nj=1\nδ1 αj .\nComplete the result by the union bound over all κ, applying Lemma 10 (see Appendix) and the definition of δ1 to bound ∑ κ∈K ∑∞ j=1 δ1 αj ≤ δ/4.\nWe are now ready to give a high-probability bound on the number of proper exploration phases. If MERL starts a proper exploration phase at time-step t then at least one of the following holds:\n1. E[X(ν, κ)E(ν,κ)|Ft] > (1− γ)ǫ/8.\n2. E[X(ν, κ)E(ν,κ)|Ft] > (1− γ)ǫ/8. This contrasts with E[X(µ, κ)E(µ,κ)|Ft] = 0, which ensures that µ remains in M for all time-steps. If one could know which of the above statements were true at each time-step then it would be comparatively easy to show by means of Azuma’s inequality that all environments that are not ǫclose are quickly eliminated after O( 1\nǫ2(1−γ)2 ) ν-exploration phases, which would lead to the desired\nbound. Unfortunately though, the truth of (1) or (2) above cannot be determined, which greatly increases the complexity of the proof. Proof of Lemma 4. Fix a κ ∈ K and let Emax,κ be a constant to be chosen later. Let ht be the history at the start of some κ-exploration phase. We say an (ν, κ)-exploration phase is ν-effective if\nE[X(ν, κ)E(ν,κ)|Ft] ≡ (1− γ)(V πµ (ht; d)− V πν (ht; d)) > (1− γ)ǫκ/2\nand ν-effective if the same condition holds for ν. Now since t is the start of a proper exploration phase we have that µ ∈ Mt and so\nV πν (ht; d) ≥ V πµ (ht; d) ≥ V πν (ht; d) V πν (ht; d)− V πν (ht; d) > ǫκ.\nTherefore every proper exploration phase is either ν-effective or ν-effective. Let Et,κ := ∑\nν Et(ν, κ), which is twice the number of κ-exploration phases at time t and E∞,κ := limt Et,κ, which is twice the total number of κ-exploration phases.1 Let Ft(ν, κ) be the number of ν-effective (ν, κ)-exploration phases up to time-step t. Since each proper κ-exploration phase is either νeffective or ν-effective or both, ∑\nν Ft(ν, κ) ≥ Et,κ/2. Applying Lemma 8 to yν := Et(ν, κ)/Et,κ and xν := Ft(ν, κ)/Et(ν, κ) shows that if E∞,κ > Emax,κ then there exists a t′ and ν such that Et′,κ = Emax,κ and\nFt′(ν, κ) 2\nEmax,κEt′(ν, κ) ≥ 1 4N , (1)\nwhich implies that\nFt′(ν, κ) ≥ √ Emax,κEt′(ν, κ)\n4N\n(a) ≥ Et′(ν, κ)√ 4N , (2)\n1Note that it is never the case that ν = ν at the start of an exploration phase, since in this case ∆ = 0.\nwhere (a) follows because Emax,κ = Et′,κ ≥ Et′(ν, κ). Let Z(ν) be the event that there exists a t′ satisfying (1). We will shortly show that P {Z(ν)} < δ/(4N |K|). Therefore\nP {E∞,κ > Emax,κ} ≤ P {∃ν : Z(ν)} ≤ ∑\nν∈M P {Z(ν)}\n≤ δ/(4|K|)\nFinally take the union bound over all κ and let\nEmax := ∑\nκ∈K\n1 2 Emax,κ,\nwhere we used 12Emax,κ because Emax,κ is a high-probability upper bound on E∞,κ, which is twice the number of κ-exploration phases.\nBounding P {Z(ν)} < δ/(4N |K|). Fix a ν ∈ M and let X1, X2, · · · , XE∞(ν,κ) be the sequence with Xi := X(ν, κ)i and let ti be the corresponding time-step at the start of the ith (ν, κ)exploration phase. Define a sequence\nYi :=\n{\nXi −E[Xi|Fti ] if i ≤ E∞(ν, κ) 0 otherwise\nLet λ(E) := √\n2E log E δ1 . Now if Z(ν), then the largest time-step t ≤ t′ with Et(ν, t) = αj for some\nj ∈ N is\nt := max {t ≤ t′ : ∃j ∈ N s.t. αj = Et(ν, t)} ,\nwhich exists and satisfies\n1. Et(ν, κ) = αj for some j.\n2. E∞(ν, κ) > Et(ν, κ).\n3. Ft(ν, κ) ≥ √ Et(ν, κ)Emax,κ/(16N).\n4. Et(ν, κ) ≥ Emax,κ/(16N).\nwhere parts 1 and 2 are straightforward and parts 3 and 4 follow by the definition of {αj}, which was chosen specifically for this part of the proof. Since E∞(ν, κ) > Et(ν, κ), at the end of the exploration phase starting at time-step t, ν must remain in M. Therefore\nλ(αj) (a) ≥ αj ∑\ni=1\nXi (b) ≥ αj ∑\ni=1\nYi + ǫκ(1− γ)Ft(ν, κ)\n2\n(c) ≥ αj ∑\ni=1\nYi + ǫκ(1− γ)\n8\n√\nαjEmax,κ N , (3)\nwhere in (a) we used the definition of the confidence interval of MERL. In (b) we used the definition of Yi and the fact that EXi ≥ 0 for all i and EXi ≥ ǫκ(1 − γ)/2 if Xi is effective. Finally we used the lower bound on the number of effective ν-exploration phases, Ft(ν, κ) (part 3 above). If Emax,κ := 211N\nǫ2κ(1−γ)2 log2 2 9N ǫ2(1−γ)2δ1 , then by applying Lemma 9 with a = 29N ǫ2κ(1−γ)2 and b = 1/δ1 we\nobtain\nEmax,κ ≥ 29N\nǫ2κ(1− γ)2 log Emax,κ δ1 ≥ 2 9N ǫ2κ(1− γ)2 log αj δ1\nMultiplying both sides by αj and rearranging and using the definition of λ(αj) leads to\nǫκ(1− γ) 8\n√\nαjEmax,κ N ≥ 2λ(αj).\nInserting this into Equation (3) shows that Z(ν) implies that there exists an αj such that ∑αj i=1 Yi ≤ −λ(αj). Now by the same argument as in the proof of Lemma 2, Bn := ∑n i=1 Yi is a martingale with |Bi+1 −Bi| ≤ 1. Therefore by Azuma’s inequality\nP\n{\nαj ∑\ni=1\nYi ≤ −λ(αj) }\n≤ δ1 αj .\nFinally apply the union bound over all j.\nRecall that if MERL is exploiting at time-step t, then πt is the optimal policy with respect to the first environment in the model class. To prove Lemma 3 we start by showing that in this case πt is nearly-optimal.\nLemma 5. Let t be a time-step and ht be the corresponding history. If µ ∈ Mt and MERL is exploiting (not exploring), then V ∗µ (ht)− V πtµ (ht) ≤ 5ǫ/8.\nProof of Lemma 5. Since MERL is not exploring\nV ∗µ (ht)− V πtµ (ht) (a) ≤ V ∗µ (ht; d)− V πtµ (ht; d) + ǫ\n8 (b) ≤ V π ∗\nµ νt (ht; d)− V πtνt (ht; d) + 5ǫ/8\n(c) ≤ 5ǫ/8,\n(a) follows by truncating the value function. (b) follows because µ ∈ Mt and MERL is exploiting. (c) is true since πt is the optimal policy in νt.\nLemma 5 is almost sufficient to prove Lemma 3. The only problem is that MERL only follows πt = π ∗ νt until there is an exploration phase. The idea to prove Lemma 3 is as follows:\n1. If there is a low probability of entering an exploration phase within the next d time-steps following policy πt, then π is nearly as good as πt, which itself is nearly optimal by Lemma 5.\n2. The number of time-steps when the probability of entering an exploration phase within the next d time-steps is high is unlikely to be too large before an exploration phase is triggered. Since there are not many exploration phases with high probability, there are also unlikely to be too many time-steps when π expects to enter one with high probability.\nBefore the proof of Lemma 3 we remark on an easier to prove (but weaker) version of Theorem 1. If MERL is exploiting then Lemma 5 shows that V ∗µ (h)−Q∗µ(h, π(h)) ≤ 5ǫ/8 < ǫ. Therefore if we cared about the number of time-steps when this is not the case (rather than V ∗µ − V πµ ), then we would already be done by combining Lemmas 4 and 5.\nProof of Lemma 3. Let t be the start of a proper failure phase with corresponding history, h. Therefore V ∗µ (h)−V πµ (h) > ǫ. By Lemma 5, V ∗µ (h)−V πµ (h) = V ∗µ (h)−V πtµ (h)+V πtµ (h)−V πµ (h) ≤ 5ǫ/8 + V πtµ − V πµ (h) and so\nV πtµ (h)− V πµ (h) ≥ 3ǫ\n8 . (4)\nWe define set Hκ ⊂ H∗ to be the set of extensions of h that trigger κ-exploration phases. Formally Hκ ⊂ H∗ is the prefix free set such that h′ in Hκ if h ⊏ h′ and h′ triggers a κ-exploration phase for the first time since t. Let Hκ,d := {h′ : h′ ∈ Hκ ∧ ℓ(h′) ≤ t+ d}, which is the set of extensions of h that are at most d long and trigger κ-exploration phases. Therefore\n3ǫ\n8\n(a) ≤ V πtµ (h)− V πµ (h) (b) = ∑\nκ∈K\n∑\nh′∈Hκ P (h′|h)γℓ(h′)−t ( V πtµ (h ′)− V πµ (h′) )\n(c) ≤ ∑\nκ∈K\n∑\nh′∈Hκ,d\nP (h′|h) ( V πtµ (h ′)− V πµ (h′) )\n+ ǫ\n8\n(d) ≤ ∑\nκ∈K\n∑\nh′∈Hκ,d\nP (h′|h) ( V ∗µ (h ′; d)− V πµ (h′; d) )\n+ ǫ\n4\n(e) ≤ ∑\nκ∈K\n∑\nh′∈Hκ,d\nP (h′|h)4ǫκ + ǫ\n4 ,\n(a) follows from Equation (4). (b) by noting that that π = πt until an exploration phase is triggered. (c) by replacing Hκ with Hκ,d and noting that if h′ ∈ Hκ−Hκ,d, then γℓ(h\n′)−t ≤ (1−γ)ǫ/8. (d) by substituting V ∗µ (h\n′) ≥ V πtµ (h′) and by using the effective horizon to truncate the value functions. (e) by the definition of a κ-exploration phase.\nSince the maximum of a set is greater than the average, there exists a κ ∈ K such that ∑\nh′∈Hκ,d P (h ′|h) ≥ 2−κ−3/|K|, which is the probability that MERL encounters a κ-exploration phase within d time-steps from h. Now fix a κ and let t1, t2, · · · , · · · , tGκ be the sequence of timesteps such that ti is the start of a failure phase and the probability of a κ-exploration phase within the next d time-steps is at least 2−κ−3/|K|. Let Yi ∈ {0, 1} be the event that a κ-exploration phase does occur within d time-steps of ti and define an auxiliary infinite sequence Ỹ1, Ỹ2, · · · by Ỹi := Yi if i ≤ Gκ and 1 otherwise. Let Eκ be the number of κ-exploration phases and Gmax,κ be a constant to be chosen later and suppose Gκ > Gmax,κ, then ∑Gmax,κ i=1 Ỹi = ∑Gmax,κ i=1 Yi and either ∑Gmax,κ\ni=1 Ỹi ≤ Emax,κ or Eκ > Emax,κ, where the latter follows because Yi = 1 implies a κ-exploration phase occurred. Therefore\nP {Gκ > Gmax,κ}\n≤ P\n\n\n\nGmax,κ ∑\ni=1\nỸi < Emax,κ\n\n\n\n+ P {Eκ > Emax,κ}\n≤ P\n\n\n\nGmax,κ ∑\ni=1\nỸi < Emax,κ\n\n\n\n+ δ\n4|K| .\nWe now choose Gmax,κ sufficiently large to bound the first term in the display above by δ/(4|K|). By the definition of Ỹi and Yi, if i ≤ Gκ then E[Ỹi|Fti ] ≥ 2−κ−3/|K| and for i > Gκ, Ỹi is always 1. Setting\nGmax,κ := 2 κ+4|K|Emax,κ\n= 217N |K|\nǫǫκ(1− γ)2 log2\n29N\nǫ2(1− γ)2δ1 is sufficient to guarantee E[\n∑Gmax,κ i=1 Ỹi] > 2Emax,κ and an application of Azuma’s inequality to the\nmartingale difference sequence completes the result. Finally we apply the union bound over all κ and set Gmax := ∑ κ∈N Gmax,κ > ∑ κ∈KGmax,κ."
    }, {
      "heading" : "4 Compact Case",
      "text" : "In the last section we presented MERL and proved a sample-complexity bound for the case when the environment class is finite. In this section we show that if the number of environments is infinite, but compact with respect to the topology generated by a natural metric, then samplecomplexity bounds are still possible with a minor modification of MERL. The key idea is to use compactness to cover the space of environments with ǫ-balls and compute statistics on these balls rather than individual environments. Since all environments in the same ǫ-ball are sufficiently close, the resulting statistics cannot be significantly different and all analysis goes through identically to the finite case. Define a topology on the space of all environments induced by the pseudo-metric\nd(ν1, ν2) := sup h,π\n|V πν1(h)− V πν2(h)|.\nTheorem 6. Let M be compact and coverable by N ǫ-balls then a modification of Algorithm 1 satisfies\nP { L2ǫµ,π(h) ≥ d · (Gmax + Emax) } ≤ δ.\nThe main modification is to define statistics on elements of the cover, rather than specific environments.\n1. Let U1, · · · , UN be an ǫ-cover of M.\n2. At each time-step choose U and U such that ν ∈ U and ν ∈ U .\n3. Define statistics {X} on elements of the cover, rather than environments, by\nX(U, κ)E(U,κ) := inf ν∈U\n(1− γ)(R− V πν (h))\nX(U, κ)E(U,κ) := inf ν∈U\n(1− γ)(V πν (h)−R)\n4. If there exists a U where the test fails then eliminate all environments in that cover.\nThe proof requires only small modifications to show that with high probability the U containing the true environment is never discarded, while those not containing the true environment are if tested sufficiently often."
    }, {
      "heading" : "5 Unbounded Environment Classes",
      "text" : "If the environment class is non-compact then we cannot in general expect finite sample-complexity bounds. Indeed, even asymptotic results are usually not possible.\nTheorem 7. There exist non-compact M for which no agent has a finite PAC bound.\nThe obvious example is when M is the set of all environments. Then for any policy M includes an environment that is tuned to ensure the policy acts sub-optimally infinitely often. A more interesting example is the class of all computable environments, which is non-compact and also does not admit algorithms with uniform finite sample-complexity. See negative results by Lattimore and Hutter [2011b] for counter-examples."
    }, {
      "heading" : "6 Lower Bound",
      "text" : "We now turn our attention to the lower bound. In specific cases, the bound in Theorem 1 is very weak. For example, if M is the class of finite MDPs with |S| states then a natural covering leads to a PAC bound with exponential dependence on the state-space while it is known that the true dependence is at most quadratic. This should not be surprising since information about the transitions for one state gives information about a large subset ofM, not just a single environment. We show that the bound in Theorem 1 is unimprovable for general environment classes except for logarithmic factors. That is, there exists a class of environments where Theorem 1 is nearly tight.\nThe simplest counter-example is a set of MDPs with four states, S = {0, 1,⊕,⊖} and N actions, A = {a1, · · · , aN}. The rewards and transitions are depicted in Figure 3 where the transition probabilities depend on the action. Let M := {ν1, · · · , νN} where for νk we set ǫ(ai) = [[i = k]]ǫ(1 − γ). Therefore in environment νk, ak is the optimal action in state 1. M can be viewed as a set of bandits with rewards in (0, 1/(1− γ)). In the bandit domain tight lower bounds on sample-complexity are known and given in Mannor and Tsitsiklis [2004]. These results can be applied as in Strehl et al. [2009] and Lattimore and Hutter [2012] to show that no algorithm has sample-complexity less than O( N\nǫ2(1−γ)3 log 1 δ )."
    }, {
      "heading" : "7 Conclusions",
      "text" : "Summary. The Maximum Exploration Reinforcement Learning algorithm was presented. For finite classes of arbitrary environments a sample-complexity bound was given that is linear in the number of environments. We also presented lower bounds that show that in general this cannot be improved except for logarithmic factors. Learning is also possible for compact classes with the sample complexity depending on the size of the smallest ǫ-cover where the distance between two environments is the difference in value functions over all policies and history sequences. Finally, for non-compact classes of environments sample-complexity bounds are typically not possible.\nRunning time. The running time of MERL can be arbitrary large since computing the policy maximising ∆ depends on the environment class used. Even assuming the distribution of observation/rewards given the history can be computed in constant time, the values of optimal policies can still only be computed in time exponential in the horizon.\nFuture work. MERL is close to unimprovable in the sense that there exists a class of environments where the upper bound is nearly tight. On the other hand, there are classes of environments where the bound of Theorem 1 scales badly compared to the bounds of tuned algorithms (for example, finite state MDPs). It would be interesting to show that MERL, or a variant thereof, actually performs comparably to the optimal sample-complexity even in these cases. This question is likely to be subtle since there are unrealistic classes of environments where the algorithm minimising sample-complexity should take actions leading directly to a trap where it receives low reward eternally, but is never (again) sub-optimal. Since MERL will not behave this way it will tend to have poor sample-complexity bounds in this type of environment class. This is really a failure of the sample-complexity optimality criterion rather than MERL, since jumping into non-rewarding traps is clearly sub-optimal by any realistic measure.\nAcknowledgements. This work was supported by ARC grant DP120100950."
    }, {
      "heading" : "M. Azar, R. Munos, and B. Kappen. On the sample complexity of reinforcement learning with a generative",
      "text" : "model. In Proceedings of the 29th international conference on machine learning, New York, NY, USA, 2012. ACM."
    }, {
      "heading" : "D. Chakraborty and P. Stone. Structure learning in ergodic factored mdps without knowledge of the",
      "text" : "transition function’s in-degree. In Proceedings of the Twenty Eighth International Conference on Machine Learning (ICML’11), 2011.\nC. Diuk, L. Li, and B. Leffler. The adaptive k-meteorologists problem and its application to structure learning and feature selection in reinforcement learning. In Andrea Pohoreckyj Danyluk, Léon Bottou, and Michael L. Littman, editors, Proceedings of the 26th Annual International Conference on Machine Learning (ICML 2009), pages 249–256. ACM, 2009."
    }, {
      "heading" : "E. Even-dar, S. Kakade, and Y. Mansour. Reinforcement learning in POMDPs without resets. In In",
      "text" : "IJCAI, pages 690–695, 2005."
    }, {
      "heading" : "M. Hutter. Self-optimizing and Pareto-optimal policies in general environments based on Bayes-mixtures.",
      "text" : "In Proc. 15th Annual Conf. on Computational Learning Theory (COLT’02), volume 2375 of LNAI, pages 364–379, Sydney, 2002. Springer, Berlin. URL http://arxiv.org/abs/cs.AI/0204040 .\nM. Hutter. Universal Artificial Intelligence: Sequential Decisions based on Algorithmic Probability. Springer, Berlin, 2005. URL http://www.hutter1.net/ai/uaibook.htm."
    }, {
      "heading" : "T. Lattimore and M. Hutter. Time consistent discounting. In Jyrki Kivinen, Csaba Szepesvári, Esko",
      "text" : "Ukkonen, and Thomas Zeugmann, editors, Algorithmic Learning Theory, volume 6925 of Lecture Notes in Computer Science. Springer Berlin / Heidelberg, 2011a."
    }, {
      "heading" : "T. Lattimore and M. Hutter. Asymptotically optimal agents. In Jyrki Kivinen, Csaba Szepesvári, Esko",
      "text" : "Ukkonen, and Thomas Zeugmann, editors, Algorithmic Learning Theory, volume 6925 of Lecture Notes in Computer Science. Springer Berlin / Heidelberg, 2011b."
    }, {
      "heading" : "T. Lattimore and M. Hutter. PAC bounds for discounted MDPs. Technical report, 2012. http://torlattimore.com/pubs/pac-tech.pdf.",
      "text" : ""
    }, {
      "heading" : "S. Mannor and J. Tsitsiklis. The sample complexity of exploration in the multi-armed bandit problem. J.",
      "text" : "Mach. Learn. Res., 5:623–648, December 2004. ISSN 1532-4435."
    }, {
      "heading" : "M. Odalric-Ambrym, P. Nguyen, R. Ortner, and D. Ryabko. Optimal regret bounds for selecting the state",
      "text" : "representation in reinforcement learning. In Proceedings of the Thirtieth International Conference on Machine Learning (ICML’13), 2013.\nD. Ryabko and M. Hutter. On the possibility of learning in reactive environments with arbitrary dependence. Theoretical Computer Science, 405(3):274–284, 2008.\nA. Strehl and M. Littman. A theoretical analysis of model-based interval estimation. In Proceedings of the 22nd international conference on Machine learning, ICML ’05, pages 856–863, 2005.\nA. Strehl, L. Li, and M. Littman. Reinforcement learning in finite MDPs: PAC analysis. J. Mach. Learn. Res., 10:2413–2444, December 2009.\nP. Sunehag and M. Hutter. Optimistic agents are asymptotically optimal. In Proceedings of the 25th Australasian AI conference, 2012."
    }, {
      "heading" : "I. Szita and C. Szepesvári. Model-based reinforcement learning with nearly tight exploration complexity",
      "text" : "bounds. In Proceedings of the 27th international conference on Machine learning, pages 1031–1038, New York, NY, USA, 2010. ACM."
    }, {
      "heading" : "A Technical Results",
      "text" : "Lemma 8. Let x, y ∈ [0, 1]N satisfy ∑Ni=1 yi = 1 and ∑N i=1 xiyi ≥ 1/2. Then maxi x2i yi > 1/(4N).\nProof. The result essentially follows from the fact that a maximum is greater than an average.\nN ∑\ni=1\nx2i yi =\nN ∑\ni=1\nxiyi − N ∑\ni=1\nxiyi(1− xi)\n≥ 1 2 −\nN ∑\ni=1\nxiyi(1 − xi) ≥ 1\n2 −\nN ∑\ni=1\nyi 4 = 1 4\nTherefore there exists an i such that x2i yi ≥ 1/(4N) as required.\nLemma 9. Let a, b > 2 and x := 4a(log ab)2. Then x ≥ a log bx.\nLemma 10. Let αj := ⌈ αj ⌉ where α := 4 √ N\n4 √ N−1 . Then ∑∞ j=1 α −1 j ≤ 4\n√ N .\nProof. We have 1 αj ≤ ( 1 α )j < 1. Therefore by the geometric series,\n∞ ∑\nj=1\n1 αj ≤ 1\n1− 1 α ≡ 1 1− 4 √ N−1\n4 √ N\n= 4 √ N\nas required.\nB Constants\nd 11−γ log 8 (1−γ)ǫ ǫκ 2 κ−2ǫ\nGmax 216N |K| ǫ2(1−γ)2 log 2 29N ǫ2(1−γ)2δ1 Gmax,κ 217N |K| ǫǫκ(1−γ)2 log 2 29N ǫ2(1−γ)2δ1 Emax 216N ǫ2(1−γ)2 log 2 29N ǫ2(1−γ)2δ1 Emax,κ 211N\nǫ2κ(1−γ)2 log2 2 9N ǫ2(1−γ)2δ1\nα 4 √ N\n4 √ N−1\nδ1 δ\n32|K|N3/2\n|K| log2 1ǫ(1−γ) + 2"
    }, {
      "heading" : "C Table of Notation",
      "text" : "N number of candidate models\nǫ required accuracy\nδ probability that an algorithm makes more mistakes than its sample-complexity\nt time-step\nht history at time-step t\nV πµ (h) value of policy π in environment µ given history h\nd effective horizon\nµ true environment\nν an environment\nν, ν models achieving upper and lower bounds on the value of the exploration policy\nγ discount factor Satisfies γ ∈ (0, 1) Emax,κ high probability bound on the number of κ-exploration phases\nEmax high probability bound on the number of exploration phases\nE∞ number of exploration phases\nE∞(ν, κ) number of ν-exploration phases\nEt(ν, κ) number of (ν, κ)-exploration phases at time-step t\nFt(ν, κ) number of effective (ν, κ)-exploration phases at time-step t\nX(ν, κ)i ith test statistic for (ν, κ) pair"
    } ],
    "references" : [ {
      "title" : "Near-optimal regret bounds for reinforcement learning",
      "author" : [ "P. Auer", "T. Jaksch", "R. Ortner" ],
      "venue" : null,
      "citeRegEx" : "Auer et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Auer et al\\.",
      "year" : 2010
    }, {
      "title" : "On the sample complexity of reinforcement learning with a generative",
      "author" : [ "Learn. Res" ],
      "venue" : null,
      "citeRegEx" : "Res.,? \\Q2010\\E",
      "shortCiteRegEx" : "Res.",
      "year" : 2010
    }, {
      "title" : "Reinforcement learning in POMDPs without resets",
      "author" : [ "E. Even-dar", "S. Kakade", "Y. Mansour" ],
      "venue" : null,
      "citeRegEx" : "Even.dar et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Even.dar et al\\.",
      "year" : 2009
    }, {
      "title" : "Universal Artificial Intelligence: Sequential Decisions based on Algorithmic Probability",
      "author" : [ "M. Hutter" ],
      "venue" : null,
      "citeRegEx" : "Hutter.,? \\Q2002\\E",
      "shortCiteRegEx" : "Hutter.",
      "year" : 2002
    }, {
      "title" : "Time consistent discounting",
      "author" : [ "Springer", "Berlin" ],
      "venue" : null,
      "citeRegEx" : "Springer and Berlin,? \\Q2005\\E",
      "shortCiteRegEx" : "Springer and Berlin",
      "year" : 2005
    }, {
      "title" : "Optimal regret bounds for selecting the state",
      "author" : [ "Mach. Learn" ],
      "venue" : null,
      "citeRegEx" : "Learn.,? \\Q2004\\E",
      "shortCiteRegEx" : "Learn.",
      "year" : 2004
    }, {
      "title" : "Optimistic agents are asymptotically optimal",
      "author" : [ "P. Sunehag", "M. Hutter" ],
      "venue" : null,
      "citeRegEx" : "Sunehag and Hutter.,? \\Q2009\\E",
      "shortCiteRegEx" : "Sunehag and Hutter.",
      "year" : 2009
    } ],
    "referenceMentions" : [ {
      "referenceID" : 1,
      "context" : "More recent work on closing the gap between upper and lower bounds is by Szita and Szepesvári [2010], Lattimore and Hutter [2012], Azar et al.",
      "startOffset" : 116,
      "endOffset" : 130
    }, {
      "referenceID" : 1,
      "context" : "More recent work on closing the gap between upper and lower bounds is by Szita and Szepesvári [2010], Lattimore and Hutter [2012], Azar et al. [2012]. In the undiscounted case it is necessary to make some form of ergodicity assumption as without this regret bounds cannot be given.",
      "startOffset" : 116,
      "endOffset" : 150
    }, {
      "referenceID" : 0,
      "context" : "Nevertheless, our algorithm borrows some tricks used by UCRL2 Auer et al. [2010]. Previous work for more general environment classes is somewhat limited.",
      "startOffset" : 62,
      "endOffset" : 81
    }, {
      "referenceID" : 0,
      "context" : "Nevertheless, our algorithm borrows some tricks used by UCRL2 Auer et al. [2010]. Previous work for more general environment classes is somewhat limited. For factored MDPs there are known bounds, see Chakraborty and Stone [2011] and references there-in.",
      "startOffset" : 62,
      "endOffset" : 229
    }, {
      "referenceID" : 0,
      "context" : "Nevertheless, our algorithm borrows some tricks used by UCRL2 Auer et al. [2010]. Previous work for more general environment classes is somewhat limited. For factored MDPs there are known bounds, see Chakraborty and Stone [2011] and references there-in. Even-dar et al. [2005] give essentially unimprovable exponential bounds on the sample-complexity of learning in finite partially observable MDPs.",
      "startOffset" : 62,
      "endOffset" : 277
    }, {
      "referenceID" : 0,
      "context" : "Nevertheless, our algorithm borrows some tricks used by UCRL2 Auer et al. [2010]. Previous work for more general environment classes is somewhat limited. For factored MDPs there are known bounds, see Chakraborty and Stone [2011] and references there-in. Even-dar et al. [2005] give essentially unimprovable exponential bounds on the sample-complexity of learning in finite partially observable MDPs. Odalric-Ambrym et al. [2013] show regret bounds",
      "startOffset" : 62,
      "endOffset" : 429
    }, {
      "referenceID" : 3,
      "context" : "As far as we know there has been no work on the sample-complexity of RL when environments are completely general, but asymptotic results have garnered some attention with positive results by Hutter [2002], Ryabko and Hutter [2008], Sunehag and Hutter [2012] and (mostly) negative ones by Lattimore and Hutter [2011b].",
      "startOffset" : 191,
      "endOffset" : 205
    }, {
      "referenceID" : 3,
      "context" : "As far as we know there has been no work on the sample-complexity of RL when environments are completely general, but asymptotic results have garnered some attention with positive results by Hutter [2002], Ryabko and Hutter [2008], Sunehag and Hutter [2012] and (mostly) negative ones by Lattimore and Hutter [2011b].",
      "startOffset" : 191,
      "endOffset" : 231
    }, {
      "referenceID" : 3,
      "context" : "As far as we know there has been no work on the sample-complexity of RL when environments are completely general, but asymptotic results have garnered some attention with positive results by Hutter [2002], Ryabko and Hutter [2008], Sunehag and Hutter [2012] and (mostly) negative ones by Lattimore and Hutter [2011b].",
      "startOffset" : 191,
      "endOffset" : 258
    }, {
      "referenceID" : 3,
      "context" : "As far as we know there has been no work on the sample-complexity of RL when environments are completely general, but asymptotic results have garnered some attention with positive results by Hutter [2002], Ryabko and Hutter [2008], Sunehag and Hutter [2012] and (mostly) negative ones by Lattimore and Hutter [2011b]. Perhaps the closest related worked is Diuk et al.",
      "startOffset" : 191,
      "endOffset" : 317
    }, {
      "referenceID" : 3,
      "context" : "As far as we know there has been no work on the sample-complexity of RL when environments are completely general, but asymptotic results have garnered some attention with positive results by Hutter [2002], Ryabko and Hutter [2008], Sunehag and Hutter [2012] and (mostly) negative ones by Lattimore and Hutter [2011b]. Perhaps the closest related worked is Diuk et al. [2009], which deals with a similar problem in the rather different setting of learning the optimal predictor from a class of N experts.",
      "startOffset" : 191,
      "endOffset" : 375
    }, {
      "referenceID" : 3,
      "context" : "2 Notation The definition of environments is borrowed from the work of Hutter [2005], although the notation is slightly more formal to ease the application of martingale inequalities.",
      "startOffset" : 71,
      "endOffset" : 85
    }, {
      "referenceID" : 3,
      "context" : "2 Notation The definition of environments is borrowed from the work of Hutter [2005], although the notation is slightly more formal to ease the application of martingale inequalities. General. N = {0, 1, 2, · · · } is the natural numbers. For the indicator function we write [[x = y]] = 1 if x = y and 0 otherwise. We use ∧ and ∨ for logical and/or respectively. If A is a set then |A| is its size and A∗ is the set of all finite strings (sequences) over A. If x and y are sequences then x ⊏ y means that x is a prefix of y. Unless otherwise mentioned, log represents the natural logarithm. For random variable X we write EX for its expectation. For x ∈ R, ⌈x⌉ is the ceiling function. Environments and policies. Let A, O and R ⊂ R be finite sets of actions, observations and rewards respectively and H := A × O × R. H∞ is the set of infinite history sequences while H∗ := (A × O × R)∗ is the set of finite history sequences. If h ∈ H∗ then l(h) is the number of action/observation/reward tuples in h. We write at(h), ot(h), rt(h) for the tth action/observation/reward of history sequence h. For h ∈ H∗, Γh := {h′ ∈ H∞ : h ⊏ h′} is the cylinder set. Let F := σ({Γh : h ∈ H∗}) and Ft := σ({Γh : h ∈ H∗ ∧ l(h) = t}) be σ-algebras. An environment μ is a set of conditional probability distributions over observation/reward pairs given the history so far. A policy π is a function π : H∗ → A. An environment and policy interact sequentially to induce a measure, Pμ,π, on filtered probability space (H∞,F , {Ft}). For convenience, we abuse notation and write Pμ,π(h) := Pμ,π(Γh). If h ⊏ h ′ then conditional probabilities are Pμ,π(h ′|h) := Pμ,π(h′)/Pμ,π(h). Rt(h; d) := ∑t+d k=t γ k−trk(h) is the d-step return function and Rt(h) := limd→∞ Rt(h; d). Given history ht with l(ht) = t, the value function is defined by V π μ (ht; d) := E[Rt(h; d)|ht] where the expectation is taken with respect to Pμ,π(·|ht). V π μ (ht) := limd→∞ V π μ (ht; d). The optimal policy for environment μ is π ∗ μ := argmaxπ V π μ , which with our assumptions is known to exist Lattimore and Hutter [2011a]. The value of the optimal policy is V ∗ μ := V π∗ μ μ .",
      "startOffset" : 71,
      "endOffset" : 2078
    }, {
      "referenceID" : 0,
      "context" : "This is comparable to the updating of confidence intervals for algorithms such as MBIE (Strehl and Littman, 2005) or UCRL2 (Auer et al., 2010).",
      "startOffset" : 123,
      "endOffset" : 142
    }, {
      "referenceID" : 3,
      "context" : "See negative results by Lattimore and Hutter [2011b] for counter-examples.",
      "startOffset" : 38,
      "endOffset" : 53
    }, {
      "referenceID" : 3,
      "context" : "[2009] and Lattimore and Hutter [2012] to show that no algorithm has sample-complexity less than O( N ǫ2(1−γ)3 log 1 δ ).",
      "startOffset" : 25,
      "endOffset" : 39
    } ],
    "year" : 2013,
    "abstractText" : "We present a new algorithm for general reinforcement learning where the true environment is known to belong to a finite class of N arbitrary models. The algorithm is shown to be near-optimal for all but O(N log N) time-steps with high probability. Infinite classes are also considered where we show that compactness is a key criterion for determining the existence of uniform sample-complexity bounds. A matching lower bound is given for the finite case.",
    "creator" : "LaTeX with hyperref package"
  }
}