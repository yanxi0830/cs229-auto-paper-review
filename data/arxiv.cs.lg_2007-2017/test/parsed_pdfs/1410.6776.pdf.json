{
  "name" : "1410.6776.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Online and Stochastic Gradient Methods for Non-decomposable Loss Functions",
    "authors" : [ "Purushottam Kar", "Harikrishna Narasimhan", "Prateek Jain" ],
    "emails" : [ "t-purkar@microsoft.com,", "prajain@microsoft.com,", "harikrishna@csa.iisc.ernet.in", "precision@k,", "Prec@k", "Prec@k,", "Precision@k," ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Modern learning applications frequently require a level of fine-grained control over prediction performance that is not offered by traditional “per-point” performance measures such as hinge loss. Examples include datasets with mild to severe label imbalance such as spam classification wherein positive instances (spam emails) constitute a tiny fraction of the available data, and learning tasks such as those in medical diagnosis which make it imperative for learning algorithms to be sensitive to class imbalances. Other popular examples include ranking tasks where precision in the top ranked results is valued more than overall precision/recall characteristics. The performance measures of choice in these situations are those that evaluate algorithms over the entire dataset in a holistic manner. Consequently, these measures are frequently non-decomposable over data points.\nar X\niv :1\n41 0.\n67 76\nv1 [\ncs .L\nG ]\n2 4\nO ct\nMore specifically, for these measures, the loss on a set of points cannot be expressed as the sum of losses on individual data points (unlike hinge loss, for example). Popular examples of such measures include F-measure, Precision@k, (partial) area under the ROC curve etc.\nDespite their success in these domains, non-decomposable loss functions are not nearly as well understood as their decomposable counterparts. The study of point loss functions has led to a deep understanding about their behavior in batch and online settings and tight characterizations of their generalization abilities. The same cannot be said for most non-decomposable losses. For instance, in the popular online learning model, it is difficult to even instantiate a non-decomposable loss function as defining the per-step penalty itself becomes a challenge."
    }, {
      "heading" : "1.1 Our Contributions",
      "text" : "Our first main contribution is a framework for online learning with non-decomposable loss functions. The main hurdle in this task is a proper definition of instantaneous penalties for non-decomposable losses. Instead of resorting to canonical definitions, we set up our framework in a principled way that fulfills the objectives of an online model. Our framework has a very desirable characteristic that allows it to recover existing online learning models when instantiated with point loss functions. Our framework also admits online-to-batch conversion bounds.\nWe then propose an efficient Follow-the-Regularized-Leader [1] algorithm within our framework. We show that for loss functions that satisfy a generic “stability” condition, our algorithm is able to offer vanishing O (\n1√ T\n) regret. Next, we instantiate within our framework, convex surrogates\nfor two popular performances measures namely, Precision at k (Prec@k) and partial area under the ROC curve (pAUC) [2] and show, via a stability analysis, that we do indeed achieve sublinear regret bounds for these loss functions. Our stability proofs involve a structural lemma on sorted lists of inner products which proves Lipschitz continuity properties for measures on such lists (see Lemma 2) and might be useful for analyzing non-decomposable loss functions in general.\nA key property of online learning methods is their applicability in designing solvers for offline/batch problems. With this goal in mind, we design a stochastic gradient-based solver for non-decomposable loss functions. Our methods apply to a wide family of loss functions (including Prec@k, pAUC and F-measure) that were introduced in [3] and have been widely adopted [4, 5, 6] in the literature. We design several variants of our method and show that our methods provably converge to the empirical risk minimizer of the learning instance at hand. Our proofs involve uniform convergence-style results which were not known for the loss functions we study and require novel techniques, in particular the structural lemma mentioned above.\nFinally, we conduct extensive experiments on real life and benchmark datasets with pAUC and Prec@k as performance measures. We compare our methods to state-of-the-art methods that are based on cutting plane techniques [7]. The results establish that our methods can be significantly faster, all the while offering comparable or higher accuracy values. For example, on a KDD 2008 challenge dataset, our method was able to achieve a pAUC value of 64.8% within 30ms whereas it took the cutting plane method more than 1.2 seconds to achieve a comparable performance."
    }, {
      "heading" : "1.2 Related Work",
      "text" : "Non decomposable loss functions such as Prec@k, (partial) AUC, F-measure etc, owing to their demonstrated ability to give better performance in situations with label imbalance etc, have generated significant interest within the learning community. From their role in early works as indicators\nof performance on imbalanced datasets [8], their importance has risen to a point where they have become the learning objectives themselves. Due to their complexity, methods that try to indirectly optimize these measures are very common e.g. [9], [10] and [11] who study the F-measure. However, such methods frequently seek to learn a complex probabilistic model, a task arguably harder than the one at hand itself. On the other hand are algorithms that perform optimization directly via structured losses. Starting from the seminal work of [3], this method has received a lot of interest for measures such as the F-measure [3], average precision [4], pAUC [7] and various ranking losses [5, 6]. These formulations typically use cutting plane methods to design dual solvers.\nWe note that the learning and game theory communities are also interested in non-additive notions of regret and utility. In particular [12] provides a generic framework for online learning with non-additive notions of regret with a focus on showing regret bounds for mixed strategies in a variety of problems. However, even polynomial time implementation of their strategies is difficult in general. Our focus, on the other hand, is on developing efficient online algorithms that can be used to solve large scale batch problems. Moreover, it is not clear how (if at all) can the loss functions considered here (such as Prec@k) be instantiated in their framework.\nRecently, online learning for AUC maximization has received some attention [13, 14]. Although AUC is not a point loss function, it still decomposes over pairs of points in a dataset, a fact that [13] and [14] crucially use. The loss functions in this paper do not exhibit any such decomposability."
    }, {
      "heading" : "2 Problem Formulation",
      "text" : "Let x1:t := {x1, . . . ,xt}, xi ∈ Rd and y1:t := {y1, . . . , yt}, yi ∈ {−1, 1} be the observed data points and true binary labels. We will use ŷ1:t := {ŷ1, . . . , ŷt}, ŷi ∈ R to denote the predictions of a learning algorithm. We shall, for sake of simplicity, restrict ourselves to linear predictors ŷi = w\n>xi for parameter vectors w ∈ Rd. A performance measure P : {−1, 1}t × Rt → R+ shall be used to evaluate the the predictions of the learning algorithm against the true labels. Our focus shall be on non-decomposable performance measures such as Prec@k, partial AUC etc.\nSince these measures are typically non-convex, convex surrogate loss functions are used instead (we will use the terms loss function and performance measure interchangeably). A popular technique for constructing such loss functions is the structural SVM formulation [3] given below. For simplicity, we shall drop mention of the training points and use the notation `P(w) := `P(x1:T , y1:T ,w).\n`P(w) = max ȳ∈{−1,+1}T T∑ i=1 (ȳi − yi)x>i w − P(ȳ,y). (1)\nPrecision@k. The Prec@k measure ranks the data points in order of the predicted scores ŷi and then returns the number of true positives in the top ranked positions. This is valuable in situations where there are very few positives. To formalize this, for any predictor w and set of points x1:t, define S(x,w) := {j : w>x > w>xj} to be the set of points which w ranks above x. Then define\nTβ,t(x,w) = { 1, if |S(x,w)| < dβte, 0, otherwise.\n(2)\ni.e. Tβ,t(x,w) is non-zero iff x is in the top-β fraction of the set. Then we define1\nPrec@k(w) := ∑\nj:Tk,t(xj ,w)=1\nI [yj = 1] .\nThe structural surrogate for this measure is then calculated as 2\n`Prec@k(w) = max ȳ∈{−1,+1}t∑ i(ȳi+1)=2kt\nt∑ i=1 (ȳi − yi)xTi w − t∑ i=1 yiȳi. (3)\nPartial AUC. This measures the area under the ROC curve with the false positive rate restricted to the range [0, β]. This is in contrast to AUC that allows false positive range in [0, 1]. pAUC is useful in medical applications such as cancer detection where a small false positive rate is desirable. Let us extend notation to use T−β,t(x,w) to denote the indicator that selects the top β fraction of the negatively labeled points i.e. T−β,t(x,w) = 1 iff\n∣∣{j : yj < 0,w>x > w>xj}∣∣ ≤ dβt−e where t− is the number of negatives. Then we define\npAUC(w) = ∑ i:yi>0 ∑ j:yj<0 T−β,t(xj ,w) · I[x > i w ≥ x>j w]. (4)\nThe structural surrogate for this performance measure can be equivalently expressed in a simpler form by replacing the indicator functions I [·] with hinge loss as follows (see [7], Theorem 4)\n`pAUC(w) = ∑ i:yi>0 ∑ j:yj<0 T−β,t(xj ,w) · h(x > i w − x>j w), (5)\nwhere h(c) = max(0, 1− c) is the hinge loss function. In the next section we will develop an online learning framework for non-decomposable performance measures and instantiate our framework with the above mentioned loss functions `Prec@k and `pAUC. Then in Section 4, we will develop stochastic gradient methods for non-decomposable loss functions and prove error bounds for the same. There we will focus on a much larger family of loss functions including Prec@k, pAUC and F-measure."
    }, {
      "heading" : "3 Online Learning with Non-decomposable Loss Functions",
      "text" : "We now present our online learning framework for non-decomposable loss functions. Traditional online learning takes place in several rounds, in each of which the player proposes some wt ∈ W while the adversary responds with a penalty function Lt : W → R and a loss Lt(wt) is incurred. The goal is to minimize the regret i.e. ∑T t=1 Lt(wt) − arg minw∈W ∑T t=1 Lt(w). For point loss functions, the instantaneous penalty Lt(·) is encoded using a data point (xt, yt) ∈ Rd × {−1, 1} as Lt(w) = `P(xt, yt,w). However, for (surrogates of) non-decomposable loss functions such as `pAUC and `Prec@k the definition of instantaneous penalty itself is not clear and remains a challenge.\nTo guide us in this process we turn to some properties of standard online learning frameworks. For point losses, we note that the best solution in hindsight is also the batch optimal solution. This\n1An equivalent definition considers k to be the number of top ranked points instead. 2[3] uses a slightly modified, but equivalent, definition that considers labels to be Boolean.\nis equivalent to the condition arg minw∈W ∑T\nt=1 Lt(w) = arg minw∈W `P(x1:T , y1:T ,w) for nondecomposable losses. Also, since the batch optimal solution is agnostic to the ordering of points, we should expect ∑T t=1 Lt(w) to be invariant to permutations within the stream. By pruning away several naive definitions of Lt using these requirements, we arrive at the following definition:\nLt(w) = `P(x1:t, y1:t,w)− `P(x1:(t−1), y1:(t−1),w). (6)\nIt turns out that the above is a very natural penalty function as it measures the amount of “extra” penalty incurred due to the inclusion of xt into the set of points. It can be readily verified that ∑T t=1 Lt(w) = `P(x1:T , y1:T ,w) as required. Also, this penalty function seamlessly generalizes\nonline learning frameworks since for point losses, we have `P(x1:t, y1:t,w) = ∑t\ni=1 `P(xi, yi,w) and thus Lt(w) = `P(xt, yt,w). We note that our framework also recovers the model for online AUC maximization used in [13] and [14]. The notion of regret corresponding to this penalty is\nR(T ) = 1\nT T∑ t=1 Lt(wt)− arg min w∈W 1 T `P(x1:T , y1:T ,w).\nWe note that Lt, being the difference of two loss functions, is non-convex in general and thus, standard online convex programming regret bounds cannot be applied in our framework. Interestingly, as we show below, by exploiting structural properties of our penalty function, we can still get efficient low-regret learning algorithms, as well as online-to-batch conversion bounds in our framework."
    }, {
      "heading" : "3.1 Low Regret Online Learning",
      "text" : "We propose an efficient Follow-the-Regularized-Leader (FTRL) style algorithm in our framework. Let w1 = arg minw∈W ‖w‖22 and consider the following update:\nwt+1 = arg min w∈W t∑ t=1 Lt(w) + η 2 ‖w‖22 = arg min w∈W `P(x1:t, yt:t,w) + η 2 ‖w‖22 (FTRL)\nWe would like to stress that despite the non-convexity of Lt, the FTRL objective is strongly convex if `P is convex and thus the update can be implemented efficiently by solving a regularized batch problem on x1:t. We now present our regret bound analysis for the FTRL update given above.\nTheorem 1. Let `P(·,w) be a convex loss function and W ⊆ Rd be a convex set. Assume w.l.o.g. ‖xt‖2 ≤ 1,∀t. Also, for the penalty function Lt in (6), let |Lt(w) − Lt(w′)| ≤ Gt · ‖w −w′‖2, for all t and all w,w′ ∈ W for some Gt > 0. Suppose we use the update step given in ((FTRL)) to obtain wt+1, 0 ≤ t ≤ T − 1. Then for all w∗, we have\n1\nT T∑ t=1 Lt(wt) ≤ 1 T `P(x1:T , y1:T ,w ∗) + ‖w∗‖2\n√ 2 ∑T\nt=1G 2 t\nT .\nSee Appendix A for a proof. The above result requires the penalty function Lt to be Lipschitz continuous i.e. be “stable” w.r.t. w. Establishing this for point losses such as hinge loss is relatively straightforward. However, the same becomes non-trivial for non-decomposable loss functions as Lt\nis now the difference of two loss functions, both of which involve Ω (t) data points. A naive argument would thus, only be able to show Gt ≤ O(t) which would yield vacuous regret bounds.\nInstead, we now show that for the surrogate loss functions for Prec@k and pAUC, this Lipschitz continuity property does indeed hold. Our proofs crucially use a structural lemma given below that shows that sorted lists of inner products are Lipschitz at each fixed position.\nLemma 2 (Structural Lemma). Let x1, . . . ,xt be t points with ‖xi‖2 ≤ 1 ∀t. Let w,w′ ∈ W be any two vectors. Let zi = 〈w,xi〉 − ci and z′i = 〈w′,xi〉 − ci, where ci ∈ R are constants independent of w,w′. Also, let {i1, . . . , it} and {j1, . . . , jt} be ordering of indices such that zi1 ≥ zi2 ≥ · · · ≥ zit and z′j1 ≥ z ′ j2 ≥ · · · ≥ z′jt. Then for any 1-Lipschitz increasing function g : R→ R (i.e. |g(u)− g(v)| ≤ |u− v| and u ≤ v ⇔ g(u) ≤ g(v)), we have, ∀k |g(zik)− g(z′jk)| ≤ 3‖w −w ′‖2.\nSee Appendix B for a proof. Using this lemma we can show that the Lipschitz constant for `Prec@k is bounded by Gt ≤ 8 which gives us a O (√ 1 T ) regret bound for Prec@k (see Appendix C for the proof). In Appendix D, we show that the same technique can be used to prove a stability result for the structural SVM surrogate of the Precision-Recall Break Even Point (PRBEP) performance measure [3] as well. The case of pAUC is handled similarly. However, since pAUC discriminates between positives and negatives, our previous analysis cannot be applied directly. Nevertheless, we can obtain the following regret bound for pAUC (a proof will appear in the full version of the paper).\nTheorem 3. Let T+ and T− resp. be the number of positive and negative points in the stream and let wt+1, 0 ≤ t ≤ T − 1 be obtained using the FTRL algorithm ((FTRL)). Then we have\n1\nβT+T− T∑ t=1 Lt(wt) ≤ min w∈W\n1\nβT+T− `pAUC(x1:T , y1:T ,w) +O\n(√ 1\nT+ +\n1\nT−\n) .\nNotice that the above regret bound depends on both T+ and T− and the regret becomes large even if one of them is small. This is actually quite intuitive because if, say T+ = 1 and T− = T − 1, an adversary may wish to provide the lone positive point in the last round. Naturally the algorithm, having only seen negatives till now, would not be able to perform well and would incur a large error."
    }, {
      "heading" : "3.2 Online-to-batch Conversion",
      "text" : "To present our bounds we generalize our framework slightly: we now consider the stream of T points to be composed of T/s batches Z1, . . . ,ZT/s of size s each. Thus, the instantaneous penalty is now defined as Lt(w) = `P(Z1, . . . ,Zt,w)− `P(Z1, . . . ,Zt−1,w) for t = 1 . . . T/s and the regret becomes R(T, s) = 1T ∑T/s t=1 Lt(wt)−arg minw∈W 1T `P(x1:T , y1:T ,w). Let RP denote the population risk for the (normalized) performance measure P. Then we have:\nTheorem 4. Suppose the sequence of points (xt, yt) is generated i.i.d. and let w1,w2, . . . ,wT/s be an ensemble of models generated by an online learning algorithm upon receiving these T/s batches. Suppose the online learning algorithm has a guaranteed regret bound R(T, s). Then for\nw = 1T/s ∑T/s t=1 wt, any w ∗ ∈ W, ∈ (0, 0.5] and δ > 0, with probability at least 1− δ,\nRP(w) ≤ (1 + )RP(w∗) + R(T, s) + e−Ω(s 2) + Õ\n(√ s ln(1/δ)\nT\n) .\nAlgorithm 1 1PMB: Single-Pass with Mini-batches Input: Step length scale η, Buffer B of size s Output: A good predictor w ∈ W\n1: w0 ← 0, B ← φ, e← 0 2: while stream not exhausted do 3: Collect s data points (xe1, y e 1), . . . , (x e s, y e s) in buffer B 4: Set step length ηe ← η√e 5: we+1 ← ΠW [we + ηe∇w`P(xe1:s, ye1:s,we)] //ΠW projects onto the set W 6: Flush buffer B 7: e← e+ 1 //start a new epoch 8: end while 9: return w = 1e ∑e i=1 wi\nAlgorithm 2 2PMB: Two-Passes with Mini-batches Input: Step length scale η, Buffers B+, B− of size s Output: A good predictor w ∈ W\nPass 1: B+ ← φ 1: Collect random sample of pos. x+1 , . . . ,x + s in B+\nPass 2: w0 ← 0, B− ← φ, e← 0 2: while stream of negative points not exhausted do 3: Collect s negative points xe−1 , . . . ,x e− s in B− 4: Set step length ηe ← η√e 5: we+1 ← ΠW [ we + ηe∇w`P(xe−1:s,x + 1:s,we)\n] 6: Flush buffer B− 7: e← e+ 1 //start a new epoch 8: end while 9: return w = 1e ∑e i=1 wi\nIn particular, setting s = Õ( √ T ) and = 4 √ 1/T gives us, with probability at least 1− δ,\nRP(w) ≤ RP(w∗) + R(T, √ T ) + Õ\n( 4 √ ln(1/δ)\nT\n) .\nWe conclude by noting that for Prec@k and pAUC, R(T, √ T ) ≤ O\n( 4 √\n1/T ) (see Appendix E)."
    }, {
      "heading" : "4 Stochastic Gradient Methods for Non-decomposable Losses",
      "text" : "The online learning algorithms discussed in the previous section present attractive guarantees in the sequential prediction model but are required to solve batch problems at each stage. This rapidly becomes infeasible for large scale data. To remedy this, we now present memory efficient stochastic gradient descent methods for batch learning with non-decomposable loss functions. The motivation for our approach comes from mini-batch methods used to make learning methods for point loss functions amenable to distributed computing environments [15, 16], we exploit these techniques to offer scalable algorithms for non-decomposable loss functions."
    }, {
      "heading" : "4.1 Single-pass Method with Mini-batches",
      "text" : "The method assumes access to a limited memory buffer and takes a pass over the data stream. The stream is partitioned into epochs. In each epoch, the method accumulates points in the stream, uses them to form gradient estimates and takes descent steps. The buffer is flushed after each epoch. Algorithm 1 describes the 1PMB method. Gradient computations can be done using Danskin’s theorem (see Appendix H)."
    }, {
      "heading" : "4.2 Two-pass Method with Mini-batches",
      "text" : "The previous algorithm is unable to exploit relationships between data points across epochs which may help improve performance for loss functions such as pAUC. To remedy this, we observe that several real life learning scenarios exhibit mild to severe label imbalance (see Table 1 in Appendix H) which makes it possible to store all or a large fraction of points of the rare label. Our two pass\nmethod exploits this by utilizing two passes over the data: the first pass collects all (or a random subset of) points of the rare label using some stream sampling technique [13]. The second pass then goes over the stream, restricted to the non-rare label points, and performs gradient updates. See Algorithm 2 for details of the 2PMB method."
    }, {
      "heading" : "4.3 Error Bounds",
      "text" : "Given a set of n labeled data points (xi, yi), i = 1 . . . n and a performance measure P, our goal is to approximate the empirical risk minimizer w∗ = arg min\nw∈W `P(x1:n, y1:n,w) as closely as possible. In\nthis section we shall show that our methods 1PMB and 2PMB provably converge to the empirical risk minimizer. We first introduce the notion of uniform convergence for a performance measure.\nDefinition 5. We say that a loss function ` demonstrates uniform convergence with respect to a set of predictors W if for some α(s, δ) = poly ( 1 s , log 1 δ ) , when given a set of s points x̄1, . . . , x̄s chosen randomly from an arbitrary set of n points {(x1, y1), . . . , (xn, yn)} then w.p. at least 1− δ, we have\nsup w∈W\n|`P(x1:n, y1:n,w)− `P(x̄1:s, ȳ1:s,w)| ≤ α(s, δ).\nSuch uniform convergence results are fairly common for decomposable loss functions such as the squared loss, logistic loss etc. However, the same is not true for non-decomposable loss functions barring a few exceptions [17, 10]. To bridge this gap, below we show that a large family of surrogate loss functions for popular non decomposable performance measures does indeed exhibit uniform convergence. Our proofs require novel techniques and do not follow from traditional proof progressions. However, we first show how we can use these results to arrive at an error bound.\nTheorem 6. Suppose the loss function ` is convex and demonstrates α(s, δ)-uniform convergence. Also suppose we have an arbitrary set of n points which are randomly ordered, then the predictor w returned by 1PMB with buffer size s satisfies w.p. 1− δ,\n`P(x1:n, y1:n,w) ≤ `P(x1:n, y1:n,w∗) + 2α ( s, sδ\nn\n) +O (√ s\nn ) We would like to stress that the above result does not assume i.i.d. data and works for arbitrary datasets so long as they are randomly ordered. We can show similar guarantees for the two pass method as well (see Appendix F). Using regularized formulations, we can also exploit logarithmic regret guarantees [18], offered by online gradient descent, to improve this result - however we do not explore those considerations here. Instead, we now look at specific instances of loss functions that posses the desired uniform convergence properties. As mentioned before, due to the combinatorial nature of these performance measures, our proofs do not follow from traditional methods.\nTheorem 7 (Partial Area under the ROC Curve). For any convex, monotone, Lipschitz, classification surrogate φ : R → R+, the surrogate loss function for the (0, β)-partial AUC performance measure defined as follows exhibits uniform convergence at the rate α(s, δ) = O (√ log(1/δ)/s ) :\n1\ndβn−en+ ∑ i:yi>0 ∑ j:yj<0 T−β,t(xj ,w) · φ(x > i w − x>j w)\nSee Appendix G for a proof sketch. This result covers a large family of surrogate loss functions such as hinge loss (5), logistic loss etc. Note that the insistence on including only top ranked negative points introduces a high degree of non-decomposability into the loss function. A similar result for the special case β = 1 is due to [17]. We extend the same to the more challenging case of β < 1.\nTheorem 8 (Structural SVM loss for Prec@k). The structural SVM surrogate for the Prec@k performance measure (see (3)) exhibits uniform convergence at the rate α(s, δ) = O (√ log(1/δ)/s ) .\nWe defer the proof to the full version of the paper. The above result can be extended to a large family of performances measures introduced in [3] that have been widely adopted [10, 19, 8] such as F-measure, G-mean, and PRBEP. The above indicates that our methods are expected to output models that closely approach the empirical risk minimizer for a wide variety of performance measures. In the next section we verify that this is indeed the case for several real life and benchmark datasets."
    }, {
      "heading" : "5 Experimental Results",
      "text" : "We evaluate the proposed stochastic gradient methods on several real-world and benchmark datasets.\nPerformance measures: We consider three measures, 1) partial AUC in the false positive range [0, 0.1], 2) Prec@k with k set to the proportion of positives (PRBEP), and 3) F-measure.\nAlgorithms: For partial AUC, we compare against the state-of-the-art cutting plane (CP) and projected subgradient methods (PSG) proposed in [7]; unlike the (online) stochastic methods\nMeasure 1PMB 2PMB CP\npAUC 0.10 (68.2) 0.15 (69.6) 0.39 (62.5) Prec@k 0.49 (42.7) 0.55 (38.7) 23.25 (40.8)\nTable 2: Comparison of training time (secs) and accuracies (in brackets) of 1PMB, 2PMB and cutting plane methods for pAUC (in [0, 0.1]) and Prec@k maximization tasks on the KDD Cup 2008 dataset.\n10 0\n10 2\n10 4\n0.42 0.44 0.46 0.48 0.5\n0.52 0.54\nEpoch length\nA ve\nra ge\np A\nU C\n1PMB\n10 0\n10 2\n10 4\n0.45\n0.5\n0.55\n0.6\nEpoch length\nA ve\nra ge\np A\nU C\n2PMB\nFigure 3: Performance of 1PMB and 2PMB on the PPI dataset with varying epoch/buffer sizes for pAUC tasks.\nconsidered in this work, the PSG method is a ‘batch’ algorithm which, at each iteration, computes a subgradient-based update over the entire training set. For Prec@k and F-measure, we compare our methods against cutting plane methods from [3]. We used structural SVM surrogates for all the measures.\nDatasets: We used several data sets for our experiments (see Table 1); of these, KDDCup08 is from the KDD Cup 2008 challenge and involves a breast cancer detection task [20], PPI contains data for a protein-protein interaction prediction task [21], and the remaining datasets are taken from the UCI repository [22].\nParameters: We used 70% of the data set for training and the remaining for testing, with the results averaged over 5 random train-test splits. Tunable parameters such as step length scale were chosen using a small validation set. All experiments used a buffer of size 500. Epoch lengths were set equal to the buffer size. Since a single iteration of the proposed stochastic methods is very fast in practice, we performed multiple passes over the training data (see Appendix H for details).\nResults: The results for pAUC and Prec@k maximization tasks are shown in the Figures 1 and 2. We found the proposed stochastic gradient methods to be several orders of magnitude faster than the baseline methods, all the while achieving comparable or better accuracies. For example, for the pAUC task on the KDD Cup 2008 dataset, the 1PMB method achieved an accuracy of 64.81% within 0.03 seconds, while even after 0.39 seconds, the cutting plane method could only achieve an accuracy of 62.52% (see Table 2). As expected, the (online) stochastic gradient methods were faster than the ‘batch’ projected subgradient descent method for pAUC as well. We found similar trends on Prec@k (see Figure 2) and F-measure maximization tasks as well. For F-measure tasks, on the KDD Cup 2008 dataset, for example, the 1PMB method achieved an accuracy of 35.92 within 12 seconds whereas, even after 150 seconds, the cutting plane method could only achieve an accuracy of 35.25.\nThe proposed stochastic methods were also found to be robust to changes in epoch lengths\n(buffer sizes) till such a point where excessively long epochs would cause the number of updates as well as accuracy to dip (see Figure 3). The 2PMB method was found to offer higher accuracies for pAUC maximization on several datasets (see Table 2 and Figure 1), as well as be more robust to changes in buffer size (Figure 3). We defer results on more datasets and performance measures to the full version of the paper.\nThe cutting plane methods were generally found to exhibit a zig-zag behaviour in performance across iterates. This is because these methods solve the dual optimization problem for a given performance measure; hence the intermediate models do not necessarily yield good accuracies. On the other hand, (stochastic) gradient based methods directly offer progress in terms of the primal optimization problem, and hence provide good intermediate solutions as well. This can be advantageous in scenarios with a time budget in the training phase."
    }, {
      "heading" : "Acknowledgements",
      "text" : "The authors thank Shivani Agarwal for helpful comments. They also thank the anonymous reviewers for their suggestions. HN thanks support from a Google India PhD Fellowship."
    }, {
      "heading" : "A Proof of Theorem 1",
      "text" : "Broadly, we follow the proof structure of FTRL given in [1, 23]. We first observe that the “forward regret” analysis follows easily despite the non-convexity of Lt. That is,\nT∑ t=1 Lt(wt+1) ≤ x1:T , y1:T ,w∗) + η 2 ‖w∗‖22, (7)\nwhere w∗ = arg minw∈W x1:T , y1:T ,w). The proof of this statement can be found in [23, Theorem 7] and is reproduced below as Lemma 9 for completeness. Next, using strong convexity of the regularizer ‖w‖22 and optimality of wt and wt+1 for their respective update steps, we get:\n`P(x1:t, y1:t,wt+1) + η\n2 ‖wt+1 −wt‖22 ≤ `P(x1:t, y1:t,wt)\n`P(x1:t−1, y1:t−1,wt+1) ≥ `P(x1:t−1, y1:t−1,wt) + η\n2 ‖wt+1 −wt‖22,\nwhich when subtracted, give us\nη‖wt+1 −wt‖22 ≤ Lt(wt)− Lt(wt+1) ≤ Gt‖wt+1 −wt‖2, (8)\nwhere the last inequality follows using the Lipschitz continuity of Lt. We now use the fact that\nT∑ t=1 Lt(wt) = T∑ t=1 Lt(wt+1) + T∑ t=1 (Lt(wt)− Lt(wt+1)),\nalong with (7) and (8) to get\nT∑ t=1 Lt(wt) ≤ x1:T , y1:T ,w∗) + η 2 ‖w∗‖22 + ∑T t=1G 2 t η .\nThe result now follows by selecting η = √ 2 ∑T\nt=1G 2 t / ‖w∗‖ 2 2.\nLemma 9. For the setting described in Theorem 1, we have\nT∑ t=1 Lt(wt+1) ≤ x1:T , y1:T ,w∗) + η 2 ‖w∗‖22\nProof. Let L0(w) := η2 ‖w‖ 2 2. Thus, we can equivalently write the FTRL update in (FTRL) as\nwt+1 = arg min w∈W t∑ τ=0 Lτ (w).\nNow, using the optimality of wt+1 at time t, we get\nt∑ τ=0 Lτ (wt+1) ≤ t∑ τ=0 Lτ (w∗) (9)\nCombining this with the optimality of wt at time t− 1, we get t−1∑ τ=0 Lτ (wt) + Lt(wt+1) ≤ t∑ τ=0 Lτ (wt+1) ≤ t∑ τ=0 Lτ (w∗) (10)\nRepeating this argument gives us\nt∑ τ=0 Lτ (wτ+1) ≤ t∑ τ=0 Lτ (w∗),\nwhich proves the result."
    }, {
      "heading" : "B Proof of Lemma 2",
      "text" : "We consider the following four exhaustive cases in turn:\nCase 1. zik ≥ zjk and z′jk ≥ z ′ ik\nWe have the following set of inequalities\ng(zik) = g(〈w,xik〉 − ci) ≤ g( 〈 w′,xik 〉 − ci) + ∣∣〈w −w′,xik〉∣∣ ≤ g( 〈 w′,xik 〉 − ci) + ∥∥w −w′∥∥ 2\n= g(z′ik) + ∥∥w −w′∥∥ 2\n≤ g(z′jk) + ∥∥w −w′∥∥ 2 ,\nwhere the first inequality follows by the Lipschitz assumption, the second follows by Cauchy-Schwartz inequality and the last follows by the case assumption z′jk ≥ z ′ ik\nand the fact that g is an increasing function. By renaming i ↔ j and w ↔ w′, we also have g(z′jk) ≤ g(zik) + ‖w −w ′‖2. This establishes the result for the specific case.\nCase 2. zik ≤ zjk and z′jk ≤ z ′ ik\nThis case follows similar to the case above.\nCase 3. zik ≥ zjk and z′jk ≤ z ′ ik\nUsing the above conditions zjk does not belong to the top k elements of z1, . . . , zt, but both z′ik and z ′ jk belong to the top k elements of z′1, . . . , z ′ t. Using the pigeonhole principle, there exists an index s such that zs ≥ zik but zs ≤ z′jk . Hence, using arguments similar to Case 1, we get the following two bounds:\n|g(z′ik)− g(zs)| ≤ ‖w −w ′‖2, |g(zs)− g(z′jk)| ≤ ‖w −w ′‖2.\nWe also have ∣∣g(z′ik)− g(zik)∣∣ ≤ |〈w −w′,xik〉| ≤ ‖w −w′‖2. Adding these three inequalities gives us the desired result.\nCase 4. zik ≤ zjk and z′jk ≥ z ′ ik\nThis case follows similar to the case above.\nThese cases are exhaustive and we thus conclude the proof.\nC Stability result for Prec@k\nLemma 10. Let `Prec@k be the surrogate for Prec@k as defined in (3), ‖xt‖2 ≤ 1,∀t and Lt be defined as in (6). Then ∀w,w′ ∈ W, |Lt(w)− Lt(w′)| ≤ 8‖w −w′‖2.\nProof. Recall that, the loss function corresponding to Prec@k is defined as:\n`Prec@k(x1:t, y1:t,w) = max q∈{−1,1}t∑ i(qi+1)=2dkte\nt∑ i=1 (qi − yi)xTi w − t∑ i=1 qiyi (11)\n= max q∈{−1,1}t∑ i(qi+1)=2dkte\nt∑ i=1 qix T i w − t∑ i=1 qiyi\n︸ ︷︷ ︸ A(x1:t,y1:t,w)\n− t∑ i=1 yix T i w︸ ︷︷ ︸\nB(x1:t,y1:t,w)\n(12)\nSince B(x1:t, y1:t,w) is a decomposable loss function, it can at most add a constant (because of the assumptions made by us, that constant can be shown to be no bigger than 1) to the Lipschitz constant of Lt. Hence we concentrate on bounding the contribution of A(x1:t, y1:t,w) to the Lipschitz constant of Lt. Define zi = 〈w,xi〉 − yi and z′i = 〈w′,xi〉 − yi. It will be useful to rewrite A(x1:t, y1:t,w) as follows (and drop mentioning the dependence on x1:t for notational simplicity):\npt(w) = 2 max q∈{1,0}t∑ i qi=dkte\nt∑ i=1 qizi − t∑ i=1 zi. (13)\nSimilarly, we can define pt−1(w) as well. Now we have\nLt(w)− Lt(w′) = pt(w)− pt−1(w)− pt(w′) + pt−1(w′) + ytxt(w′ −w) ≤ pt(w)− pt−1(w)− pt(w′) + pt−1(w′)︸ ︷︷ ︸\n∆t(w,w′)\n+ ∥∥w −w′∥∥\n2\nOur mail goal in the sequel will be to show that ∆t(w,w ′) ≤ O (‖w −w′‖2) which shall establish the desired Lipschitz continuity result. Now for both vectors w,w′ and time instances t− 1, t, let us denote the optimal assignments as follows:\nat = arg max q∈{1,0}t∑ i qi=dkte\nt∑ i=1 qizi, b t = arg max\nq∈{1,0}t∑ i qi=dkte\nt∑ i=1 qiz ′ i,\nat−1 = arg max q∈{1,0}(t−1)∑ i qi=dk(t−1)e\nt−1∑ i=1 qizi, b t−1 = arg max\nq∈{1,0}(t−1)∑ i qi=dk(t−1)e\nt−1∑ i=1 qiz ′ i.\nAlso, define indices 1 ≤ ir ≤ t− 1 and 1 ≤ js ≤ t− 1 as:\nzi1 ≥ zi2 · · · ≥ zit−1 , z′j1 ≥ z ′ j2 · · · ≥ z ′ jt−1 .\nNow, note that (13) involves maximization of a linear function, hence the optimizing assignment q will always lie on the boundary of the Boolean hypercube with the cardinality constraint. Hence, at can be obtained by setting atir = 1, ∀1 ≤ r ≤ dkte and a t ir\n= 0, ∀r > dkte, similarly for bt. We consider the following two cases and within each, four subcases which establish the result.\nIn the rest of the proof, all invocations of Lemma 2 shall use the identity function for g(·) and ci = yi. Clearly this satisfies the prerequisites of Lemma 2 since the identity function is 1-Lipschitz and increasing.\nCase 1 dkte = dk(t− 1)e = α Within this, we have the following four exhaustive subcases:\nCase 1.1 zt ≤ ziα and z′t ≤ z′jα The above condition implies that both att = 0 and b t t = 0. Furthermore, a t 1:(t−1) = a t−1\nand bt1:(t−1) = b t−1. As a result we have\n∆t(w,w ′) = −zt + z′t = −〈w,xt〉+ 〈 w′,xt 〉 ≤ ‖w −w′‖2.\nCase 1.2 zt > ziα and z ′ t ≤ z′jα\nThe above condition implies that att = 1 and b t t = 0. Hence, b t 1:(t−1) = b t−1. Also, as att is turned on, the cardinality constraint dictates that one previously positive index should be turned off. That is, atiα = 0, but a t−1 iα = 1. Finally, atir = a t−1 ir\n, r 6= α and r < t. Using the above observations, we have the following sequence of inequalities:\n∆t(w,w ′) = (2(zt − ziα)− zt)− (0− z′t)\n= (zt − ziα) + (z′t − ziα) = (zt − z′t) + 2(z′t − ziα) ≤ (zt − z′t) + 2(z′jα − ziα) ≤ 7 ∥∥w −w′∥∥ 2 ,\nwhere the third inequality follows from the case assumptions and the final inequality follows from an application of Cauchy Schwartz inequality and Lemma 2.\nCase 1.3 zt ≤ ziα and z′t > z′jα In this case, we can analyze similarly to get\n∆t(w,w ′) = (0− zt)− (2(z′t − z′jα)− z ′ t)\n= (z′jα − zt) + (z ′ jα − z ′ t) = (z′t − zt) + 2(z′jα − z ′ t) ≤ (z′t − zt) ≤ 3 ∥∥w −w′∥∥ 2 .\nCase 1.4 zt > ziα and z ′ t > z ′ jα\nIn this case, both att = 1 and b t t = 1. Hence, both a t iα = 0 and btjα = 0. The remaining terms of at and at−1 (similarly for bt and bt−1) remain the same. That is, we have\n∆t(w,w ′) = (2(zt − ziα)− zt)− (2(z′t − z′jα)− z ′ t)\n= (zt − z′t)− 2(ziα − z′jα) ≤ 7 ∥∥w −w′∥∥ 2 .\nCase 2 dkte = dk(t− 1)e+ 1 = α Here again, we consider the following four exhaustive subcases:\nCase 2.1 zt ≤ ziα and z′t ≤ z′jα The above condition implies that att = 0 and b t t = 0. Also, one new positive is included\nin both at and bt, i.e., atiα = 1 and b t jα = 1. The remaining entries of at and bt remains the same. Hence,\n∆t(w,w ′) = (2ziα − zt)− (2z′jα − z ′ t) = 2(ziα − z′jα)− (zt − z ′ t) ≤ 9 ∥∥w −w′∥∥ 2 .\nCase 2.2 zt > ziα and z ′ t ≤ z′jα\nThe above condition implies that att = 1 and b t t = 0. Also, b t jα\n= 1. The remaining entries of at and bt remains the same. Hence we have\n∆t(w,w ′) = (2zt − zt)− (2z′jα − z ′ t)\n= (zt − z′jα) + (z ′ t − z′jα) = (zt − z′t) + 2(z′t − z′jα) ≤ 3 ∥∥w −w′∥∥ 2 .\nCase 2.3 zt ≤ ziα and z′t > z′jα In this case we have\n∆t(w,w ′) = (2ziα − zt)− (2z′t − z′t)\n= (ziα − zt) + (ziα − z′t) = (z′t − zt) + 2(ziα − z′t) ≤ (z′t − zt) + 2(ziα − z′jα) ≤ 7 ∥∥w −w′∥∥ 2 .\nCase 2.4 zt > ziα and z ′ t > z ′ jα\nThe above condition implies that att = 1 and b t t = 1. The remaining entries of a t and bt remains the same. Hence,\n∆t(w,w ′) = (2zt − zt)− (2z′t − z′t) = zt − z′t ≤ 3 ∥∥w −w′∥∥ 2 .\nTaking the worst case Lipschitz constants from these 8 subcases and adding the contribution of B(x1:t, y1:t,w) concludes the proof."
    }, {
      "heading" : "D Extension to Precision-Recall Break Even Point (PRBEP)",
      "text" : "We note that the above discussion can easily be extended to prove stability results for the structural surrogate loss for the PRBEP performance measure [3]. Recall that the PRBEP measure essentially measures the precision (equivalently recall) of a predictor when thresholded at a point that equates\nthe precision and recall. Since we have Prec = TPTP+FP and Rec = TP\nTP+FN , the break even point is reached at a threshold where TP + FP = TP + FN. Notice that the left hand side equals the number of points that are predicted as positive whereas the right hand side equals the number of points that are actual positives.\nThus, the PRBEP is achieved at a threshold that predicts as many points as positive as there are actual positives which gives us the formal definition of this performance measure\nPRBEP(w) := ∑\nj:T( t+ t ,t\n)(xj ,w)=1 I [yj = 1] . (14)\nNote that this is equivalent to the definition of Prec@k with k = t+ t . Correspondingly, we can also define the structural SVM surrogate for this performance measure as\n`PRBEP(w) = max ȳ∈{−1,+1}t∑ i(ȳi+1)=2t+\nt∑ i=1 (ȳi − yi)xTi w − t∑ i=1 yiȳi. (15)\nGiven this, it is easy to see that the proof of Lemma 10 would apply to this case as well. The only difference in applying the analysis would be that Case 1 and its subcases would apply when yt < 0 which is when the incoming point is negative and hence the number of actual positives in the stream does not go up. Case 2 and its subcases would apply when yt > 0 in which case the number of points to be considered while calculating precision would have to be increased by 1."
    }, {
      "heading" : "E Online-to-batch Conversion",
      "text" : "This section presents a proof of the regret bound in the batch model considered in Theorem 4 and a proof sketch of the online-to-batch conversion result. The full proof shall appear in the full version of the paper. We will consider in this section, the pAUC measure in the 2PMB setting wherein positives are assumed to reside in the buffer and negatives are streaming in. The case of the Prec@k measure in the usual 1PMB setting can be handled similarly. Additionally, we will show in Appendix G that for the case of pAUC, the contributions from a large enough buffer of randomly chosen positive points mimics the contributions of the entire population of positive points. Thus, for pAUC, it suffices to show the online-to-batch conversion bounds just with respect to the negatives. We clarify this further in the discussion.\nE.1 Regret Bounds in the Modified Framework\nWe prove the following lemma which will help us in instantiating our online-to-batch conversion proofs. Lemma 11. For the surrogate losses of Prec@k and pAUC, we have R(T, s) ≤ √ s ·R(T )\nProof. The only thing we need to do is analyze one time step for changes in the Lipschitz constant. Fix a time step t and let Zt = {xt,1,xt,2, . . . ,xt,s}. Also, let gt(w, i) := `P(Z1, . . . ,Zt−1,xt,1:i,w) for any i = 1 . . . s (note that this gives us gt(w, s) = `P(Z1, . . . ,Zt,w)). Also let us abuse notation to denote gt(w, 0) := `P(Z1, . . . ,Zt−1,w) = gt−1(w, s). Let the Lipschitz constant in the model\nwith batch size s be denoted as Gst . Thus, we have G 1 t = Gt, the Lipschitz constant for the problem in the original model (i.e. for s = 1). Then we have, for any w,w′ ∈ W,∣∣Lt(w)− Lt(w′)∣∣ = ∣∣`P(Z1:t,w)− `P(Z1:t−1,w)− `P(Z1:t,w′) + `P(Z1:t−1,w′)∣∣ =\n∣∣gt(w, s)− gt(w, 0)− gt(w′, s) + gt(w′, 0)∣∣ =\n∣∣∣∣∣ s∑ i=1 gt(w, i)− gt(w, i− 1)− gt(w′, i) + gt(w′, i− 1) ∣∣∣∣∣ ≤\ns∑ i=1 ∣∣gt(w, i)− gt(w, i− 1)− gt(w′, i) + gt(w′, i− 1)∣∣ ≤\ns∑ i=1 Gt ∥∥w −w′∥∥ = Gt · s∥∥w −w′∥∥ ,\nwhere the first inequality follows by triangle inequality and the second inequality follows by a repeated application of the Lipschitz property of these loss functions in the original online model (i.e. with batch size s = 1). This establishes the Lipschitz constant in this model as Gst ≤ s · Gt. Now, the usual FTRL analysis gives us the following (note that there are only T/s time steps now)\nT/s∑ t=1 Lt(wt) ≤ `P(x1:T , y1:T ,w∗) + η 2 ‖w∗‖22 + ∑T/s t=1(G s t ) 2 η ≤ `P(x1:T , y1:T ,w∗) + 2s‖w∗‖2 √√√√T/s∑ t=1 G2t ,\nby setting η appropriately. Now, for Prec@k, Gt ≤ 8. Thus, we have\n1\nT T/s∑ t=1 Lt(wt) ≤ 1 T `P(x1:T , y1:T ,w∗) + 6‖w∗‖2 √ s T ,\nwhich establishes the result for Prec@k. Similarly, for pAUC, we can show that the regret in the batch model does not worsen by more than a factor of √ s.\nE.2 Online-to-batch Conversion for pAUC\nWe will consider the 2PMB setting where negative points come as a stream and positive points reside in an in-memory buffer. At each trial t, the learner receives a batch of s negative points Z−t = {x − t,1, . . . ,x − t,s} (we shall assume throughout, for simplicity, that sβ is an integer). Let us denote the loss w.r.t all the positive points in the buffer by φ+ : W × R → [0, B]. φ+ is defined using a loss function g(·) such as hinge loss or logistic loss as\nφ+(w, c) = 1\nB B∑ i=1 g(w>x+i − c)\nFor sake of brevity, we will abbreviate φ+(w, c) as φ+(c), the reference to w being clear from context. We assume that φ+ is monotonically increasing (as is the case for hinge loss and logistic regression) and bounded i.e. for some fixed B > 0, we have, for all w ∈ W, c ∈ R, 0 ≤ φ+(w, c) ≤ B.\nThe empirical (unnormalized) partial AUC loss for a model w ∈ W ⊆ Rd over the negative points received in t trials is then given by\n˜̀ pAUC(Z − 1:t,w) = t∑ τ=1 s∑ q=1 T−β,t(x − τ,q,w)φ+(w >x−τ,q),\nwhere T−β,t(x −,w) is the (empirical) indicator function that is turned on whenever x− appears in the top-β fraction of all the negatives seen till now, ordered by w, i.e. T−β,t(x −,w) = 1 when-\never ∣∣{τ ∈ [t], q ∈ [s] : w>x− > w>x−τ,q}∣∣ ≤ tsβ. We similarly define a population version of this empirical loss function as\nR̃pAUC(w) = Ex− r T−β (x −,w)φ+(w >x−) z ,\nwhere T−β (x −,w) is the population indicator function with T−β (x −,w) = 1 whenever Px̃− ( w>x̃− >\nw>x− ) ≤ β. Also, we define Lt(w) = `pAUC(Z−1:t,w) − `pAUC(Z − 1:t−1,w), with the regret of a learning algorithm that generates an ensemble of models w1,w2, . . . ,wT/s ∈ W ⊆ Rd upon receiving T/s batches of negative points Z−1:T/s defined as:\nR(T, s) = 1\nT T/s∑ t=1 Lt(wt)− arg min w∈W 1 T ˜̀ pAUC(Z − 1:T/s,w).\nDefine βt = Ex− r T−β,t−1(x −,wt) z as the fraction of the population that can appear in the top β fraction of the set of points seen till now, i.e. the fraction of the population for which the empirical indicator function is turned on, and\nQt(w) = Ex− r T−β,t−1(x −,w)φ+(w >x−) z\nas the population partial AUC computed with respect to the empirical indicator function T−β,t−1 (note that the population risk functional R̃pAUC(w) is computed with respect to T−β (x\n−,w), the population indicator function instead). We will also find it useful to define the following conditional expectation.\nL̃t(w) = EZ−t q Lt(w) |Z−1:t−1 y .\nWe now present a proof sketch of the online-to-batch conversion result in Theorem 4 for pAUC.\nTheorem 12 (Online-to-batch Conversion for pAUC). Suppose the sequence of negative points x−1 , . . . ,x − T is generated i.i.d.. Let us partition this sequence into T/s batches of size s and let w1,w2, . . . ,wT/s be an ensemble of models generated by an online learning algorithm upon receiving these T/s batches. Suppose the online learning algorithm has a guaranteed regret bound R(T, s).\nThen for w = 1T/s ∑T/s t=1 wt, any w ∗ ∈ W ⊆ Rd, ∈ (0, 1] and δ > 0, with probability at least 1− δ,\nR̃pAUC(w) ≤ (1 + )R̃pAUC(w∗) + 1 β R(T, s) + e−Ω(s 2) + Õ\n(√ s ln(1/δ)\nT\n) .\nIn particular, setting s = Õ( √ T ) and = 4 √ 1/T gives us, with probability at least 1− δ,\nR̃pAUC(w) ≤ R̃pAUC(w∗) + 1\nβ R(T,\n√ T ) + Õ\n( 4 √ ln(1/δ)\nT\n) .\nProof (Sketch). Fix ∈ (0, 0.5]. We wish to bound the difference\n(1− )sβ T/s∑ t=1 R̃pAUC(wt) − TβR̃pAUC(w∗) (16)\nand do so by decomposing (16) into four terms as shown below.\n(16) ≤ T/s∑ t=1 REt(wt) + MC(w1:T/s) + R(w1:T/s) + UC(w∗),\nwhere we have\nUC(w∗) = ˜̀pAUC(Z − 1:T/s,w∗) − TβR̃pAUC(w∗) (Uniform Convergence Term)\nR(w1:T/s) =\nT/s∑ t=1 Lt(wt) − T/s∑ t=1 Lt(w∗) (Regret Term)\nMC(w1:T/s) =\nT/s∑ t=1 L̃t(wt) − T/s∑ t=1 Lt(wt) (Martingale Convergence Terms)\nREt(wt) = (1− )sβR̃pAUC(wt) − L̃t(wt) (Residual Error Terms)\nNote that the above has used the fact that ˜̀pAUC(Z − 1:T/s,w∗) = ∑T/s t=1 Lt(w∗).\nWe will bound these terms in order below. First we look at the term UC(w∗). Bounding this simply requires a batch generalization bound of the form we prove in Theorem 7. Thus, we can show, that with probability 1− δ/3, we have\nUC(w∗) ≤ O (√ T log(1/δ) ) .\nWe now move on the term R(w1:T/s). This is simply bounded by the regret of the ensemble w1:T/s. This gives us\nR(w1:T/s) ≤ T ·R(T, s).\nThe next term we bound is MC(w1:T/s). Note that by definition of L̃t(w), if we define\nvt = L̃t(wt)− Lt(wt), then the terms {vt} form a martingale difference sequence. Since ∣∣L̃t(wt) − Lt(wt)∣∣ ≤ O (s), we get, by an application of the Azuma-Hoefding inequality, with probability at least 1− δ/3,\nMC(w1:T/s) ≤ O\n( s √ T\ns ln\n1\nδ\n) = O (√ sT ln(1/δ) ) .\nThe last step requires us to bound the residual term REt(wt) which will again require uniform convergence techniques. We shall show, that with probability, at least 1− (δ · s/3T ), we have\nβt ≥ β − Õ √ log 1δ s(t− 1)  .\nThis shall allow us to show that with the same probability, we have\nQt(wt)− R̃pAUC(wt) ≤ Õ √ log 1δ s(t− 1)  . The last ingredient in the proof shall involve showing that the following holds for any > 0\nL̃t(wt) ≥ (1− )sβtQt(wt)− Ω ( s exp(−sβ2t 2) ) Combining the above with a union bound will show us that, with probability at least 1− δ/3,\nT/s∑ i=1 REt(wt) ≤ O ( T exp(−s 2) ) + Õ (√ sT log(1/δ) ) A final union bound and some manipulations would then establish the claimed result."
    }, {
      "heading" : "F Proof of Theorem 6",
      "text" : "The proof proceeds in two parts: the first part uses the fact that the 1PMB method essentially simulates the GIGA method of [24] with the non-decomposable loss function and the second part uses the uniform convergence properties of the loss function to establish the error bound. To proceed, let us set up some notation. Consider the eth epoch of the 1PMB algorithm. Let us denote the set of points considered in this epoch by Xe = {xe1, . . . , xes}. With this notation it is clear that the 1PMB algorithm can be said to be performing online gradient descent with respect to the instantaneous loss functions Le(w) = L(Xe,w) := `P(xe1:s, ye1:s,w).\nSince the loss function Le(w) is convex, the standard analysis for online convex optimization would apply under mild boundedness assumptions on the domain and the (sub)gradients of the loss function. Since there are n/s epochs (assuming for simplicity that n is a multiple of s), this allows us to use the standard regret bounds [24] to state the following:\ns\nn n/s∑ e=1 Le(we) ≤ s n n/s∑ e=1 Le(w∗) +O (√ s n ) .\nNow we will invoke uniform convergence properties of the loss function. However, doing so requires clarifying certain aspects of the problem setting. The statement of Theorem 6 assumes only a random ordering of training data points whereas uniform convergence properties typically require i.i.d. samples. We reconcile this by noticing that all our uniform convergence proofs use the Hoeffding’s lemma to establish statistical convergence and that the Hoeffding’s lemma holds when random variables are sampled without replacement as well (e.g. see [25]). Since a random ordering of the data provides, for each epoch, a uniformly random sample without replacement, we are able to invoke the uniform convergence proofs.\nThus, if we denote L(w) := `P(x1:n, y1:n,w), then by using the uniform convergence properties of the loss function, for every e, with probability at least 1− sδn , we have Le(we) ≥ L(we)−α ( s, sδn ) as well as Le(w∗) ≤ L(w∗) +α ( s, sδn ) . Applying the union bound and Jensen’s inequality gives us, with probability at least 1− δ, the desired result:\nL(w) ≤ s n n/s∑ e=1 L(we) ≤ L(w∗) + 2α ( s, sδ n ) +O (√ s n ) .\nWe note that we can use similar arguments as above to give error bounds for the 2PMB procedure as well. Suppose x̄+1:s+ and x̄ − 1:s−\nare the positive and negative points sampled in the process (note that here the number of positive and negatives points (i.e. s+ and s− respectively) are random quantities as well). Also suppose x+1:n+ and x − 1:n−\nare the positive and negative points in the population. Then recall that Definition 5 requires, for a uniform (but possibly without replacement) sample,\nsup w∈W ∣∣∣`P(x+1:n+ ,x−1:n− ,w)− `P(x̄+1:s+ , x̄−1:s− ,w)∣∣∣ ≤ Õ (α(s, δ)) . To prove bounds for 2PMB, we require that for arbitrary choice of s+, s− ≥ Ω (s), when x̄+1:s+ and x̄−1:s− are chosen separately and uniformly (but yet again possibly without replacement) from x+1:n+ and x − 1:n−\nrespectively, we still obtain a similar result as above. Since the first pass and each epoch of the second pass provide such a sample, we can use this result to prove error bounds for the 2PMB procedure. We defer the detailed arguments for such results to the full version of the paper.\nWe however note that the proof of Theorem 7 below does indeed prove such a result for the pAUC loss function by effectively proving (see Section G.1) the following two results\nsup w∈W ∣∣∣`P(x+1:n+ , x̄−1:s− ,w)− `P(x̄+1:s+ , x̄−1:s− ,w)∣∣∣ ≤ Õ (α(s, δ)) sup w∈W\n∣∣∣`P(x+1:n+ ,x−1:n− ,w)− `P(x+1:n+ , x̄−1:s− ,w)∣∣∣ ≤ Õ (α(s, δ)) ."
    }, {
      "heading" : "G Uniform Convergence Bounds for Partial Area under the ROC",
      "text" : "Curve\nIn this section we present a proof sketch of Theorem 7 which we restate below for convenience.\nTheorem 13. Consider any convex, monotonic and Lipschitz classification surrogate φ : R→ R+. Then the loss function for the (0, β)-partial AUC performance measure defined as follows exhibits uniform convergence at the rate α(s) = Õ (1/ √ s):\n`P(x1:n, y1:n,w) = 1\nβn+n− n∑ i=1 I [yi > 0] n∑ j=1 I [yj < 0]T−β,n(xj ,w)φ ( w>(xi − xj) ) ,\nwhere n+ = |{i : yi > 0}| and n− = |{i : yi < 0}|. Proof (Sketch). We shall use the notation T̂−β,s to denote the indicator function for the top β fraction of the negative elements in the smaller sample of size s. Thus, over the smaller sample (x̄1, ȳ1) . . . (x̄s, ȳs), the pAUC is calculated as\n`P(x̄1:s, ȳ1:s,w) = 1\nβs+s− s∑ i=1 I [ȳi > 0] s∑ j=1 I [ȳj < 0] T̂−β,s(x̄j ,w)φ ( w>(x̄i − x̄j) ) .\nOur goal would be to show that with probability at least 1− δ, for all w ∈ W |`P(x1:n, y1:n,w)− `P(x̄1:s, ȳ1:s,w)| ≤ Õ (\n1√ s ) We shall demonstrate this by establishing the following three statements:\n1. For any fixed w ∈ W, w.h.p., we have |`P(x1:n, y1:n,w)− `P(x̄1:s, ȳ1:s,w)| ≤ Õ (\n1√ s ) 2. For any two w,w′ ∈ W, we have |`P(x1:n, y1:n,w)− `P(x1:n, y1:n,w′)| ≤ O (‖w −w′‖2)\n3. For any two w,w′ ∈ W, we have |`P(x̄1:s, ȳ1:s,w)− `P(x̄1:s, ȳ1:s,w′)| ≤ O (‖w −w′‖2) With these three results established, we would be able to conclude the proof by an application of a standard covering number argument. We now prove these three statements in parts.\nG.1 Part 1: Pointwise Convergence for pAUC\nFix a predictor w ∈ W and S+ and S− denote the set of positive and negative samples. We shall assume that s+, s− ≥ Ω (s) which holds with high probability. Denote, for any xi such that yi > 0,\n`+(xi,w) = 1\nβn− n∑ j=1 I [yj < 0]T−β,n(xj ,w)φ ( w>(xi − xj) ) ,\nand for any x̄i ∈ S+,\n`+S−(x̄i,w) = 1\nβs− s∑ j=1 I [ȳj < 0] T̂−β,s(x̄j ,w)φ ( w>(x̄i − x̄j) ) .\nNotice that `P(x̄1:s, ȳ1:s,w) = 1 n+ ∑n i=1 I [yi > 0] `+(xi,w) and `P(x̄1:s, ȳ1:s,w) = 1 s+ ∑s i=1 I [ȳi > 0] ` + S−\n(x̄i,w). We shall now show the following holds w.h.p. over S−:\n1. For any xi such that yi > 0, ∣∣∣`+(xi,w)− `+S−(xi,w)∣∣∣ ≤ Õ ( 1√s).\n2. 1n+ ∣∣∣∑ni=1 I [yi > 0] `+(xi,w)− I [yi > 0] `+S−(xi,w)∣∣∣ ≤ Õ ( 1√s). 3. ∣∣∣ 1n+ ∑ni=1 I [yi > 0] `+S−(xi,w)− 1s+ ∑si=1 I [ȳi > 0] `+S−(x̄i,w)∣∣∣ ≤ Õ ( 1√s).\nThe second part follows from the first part by an application of the triangle inequality. The third part also can be shown to hold by an application of Hoeffding’s inequality and other arguments. This leaves the first part for which we provide a proof in the full version of the paper.\nG.2 Parts 2 and 3: Establishing an -net for pAUC\nFor simplicity, we assume that the domain is finite. This does not affect the proof in any way since it still allows the domain to be approximated arbitrary closely by an -net of (arbitrarily) large size. However, we note that we can establish the same result for infinite domains as well, but choose not to for sake of simplicity. We prove the second part, the proof of the first part being similar. We have∣∣`P(x1:n, y1:n,w)− `P(x1:n, y1:n,w′)∣∣ = 1\ns+ ∣∣∣∣∣ s∑ i=1 I [ȳi > 0] `+S−(xi,w)− I [ȳi > 0] ` + S− (xi,w ′) ∣∣∣∣∣ ≤ 1\ns+ s∑ i=1 ∣∣∣I [ȳi > 0](`+S−(xi,w)− `+S−(xi,w′))∣∣∣ ≤ O (∥∥w −w′∥∥ 2 ) ,\nusing Lemma 2 with g(a) = φ(w>xi − a) and ci = 0. This concludes the proof."
    }, {
      "heading" : "H Methodology for implementing 1PMB and 2PMB for pAUC",
      "text" : "tasks\nIn this section we clarify the mechanisms used to implement the 1PMB and 2PMB routines. Going as per the dataset statistics (see Table 1), we will consider the variant of the 2PMB routine with the positive class as the rare class. Recall the definition of the surrogate loss function for pAUC (5)\n`pAUC(w) = ∑ i:yi>0 ∑ j:yj<0 T−β,t(xj ,w) · h(x > i w − x>j w).\nWe now rewrite this in a slightly different manner. Define, for any i : yi > 0 `+S−(xi,w) = ∑ j:yj<0 T−β,t(xj ,w) · h(x > i w − x>j w),\nso that we can write `pAUC(w) = ∑\ni:yi>0 `+S−(xi,w). This shows that a subgradient to `pAUC(w)\ncan be found by simply finding and summing up, subgradients for `+S−(xi,w). For now, fix an i such that yi > 0 and define g(a) = h(x > i w − a). Using the properties of the hinge loss function, it is clear that g(a) is an increasing function of a. Since `+S−(xi,w) is defined on the top ranked dβt−e negatives, we can, using the monotonicity of g(·), equivalently write it as follows. Let Zβ = ( S− dβt−e\n) be the set of all sets of negative points of negative training points of size dβt−e. Then we can write\n`+S−(xi,w) = maxS∈Zβ ∑ x−∈S g(x−>w)\nSince the maximum in the above formulation is achieved at S = { j : yj < 0,T−β,t(xj ,w) = 1 } , by Danskin’s theorem (see, for example [26]), we get the following result: let vij ∈ δh(x>i w − x>j w) be a subgradient to the hinge loss function, then for the following vector\nvi := ∑ j:yj<0 T−β,t(xj ,w) · vij ,\nwe have vi ∈ δ`+S−(xi,w) and consequently, for v := ∑ i:yi>0 vi, we have v ∈ δ`pAUC(w). This gives us a straightforward way to implement 1PMB: for each epoch, we take all the negatives in that epoch, filter out the top β fraction of them according to the scores assigned to them by the current iterate we and then calculate the (sub)gradients between all the positives in that epoch and these filtered negatives. This takes at most O (s log s) time per epoch."
    } ],
    "references" : [ {
      "title" : "A Structural SVM Based Approach for Optimizing Partial AUC",
      "author" : [ "Harikrishna Narasimhan", "Shivani Agarwal" ],
      "venue" : "In 30th International Conference on Machine Learning (ICML),",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2013
    }, {
      "title" : "A Support Vector Method for Multivariate Performance Measures",
      "author" : [ "Thorsten Joachims" ],
      "venue" : "In ICML,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2005
    }, {
      "title" : "A Support Vector Method for Optimizing Average Precision",
      "author" : [ "Yisong Yue", "Thomas Finley", "Filip Radlinski", "Thorsten Joachims" ],
      "venue" : "In SIGIR,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2007
    }, {
      "title" : "Structured Learning for Non-Smooth Ranking Losses",
      "author" : [ "Soumen Chakrabarti", "Rajiv Khanna", "Uma Sawant", "Chiru Bhattacharyya" ],
      "venue" : "In KDD,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2008
    }, {
      "title" : "Metric Learning to Rank",
      "author" : [ "Brian McFee", "Gert Lanckriet" ],
      "venue" : "In ICML,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2010
    }, {
      "title" : "SVM  pAUC: A New Support Vector Method for Optimizing Partial AUC Based on a Tight Convex Upper Bound",
      "author" : [ "Harikrishna Narasimhan", "Shivani Agarwal" ],
      "venue" : "In KDD,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2013
    }, {
      "title" : "Addressing the Curse of Imbalanced. Training Sets: One- Sided Selection",
      "author" : [ "Miroslav Kubat", "Stan Matwin" ],
      "venue" : "In 24th International Conference on Machine Learning (ICML),",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1997
    }, {
      "title" : "An Exact Algorithm for F-Measure Maximization",
      "author" : [ "Krzysztof Dembczyński", "Willem Waegeman", "Weiwei Cheng", "Eyke Hüllermeier" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2011
    }, {
      "title" : "Optimizing F-Measures: A Tale of Two Approaches",
      "author" : [ "Nan Ye", "Kian Ming A. Chai", "Wee Sun Lee", "Hai Leong Chieu" ],
      "venue" : "In 29th International Conference on Machine Learning (ICML),",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2012
    }, {
      "title" : "Optimizing the F-Measure in Multi-Label Classification: Plug-in Rule Approach versus Structured Loss Minimization",
      "author" : [ "Krzysztof Dembczyński", "Arkadiusz Jachnik", "Wojciech Kotlowski", "Willem Waegeman", "Eyke Hüllermeier" ],
      "venue" : "In 30th International Conference on Machine Learning (ICML),",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2013
    }, {
      "title" : "Online Learning: Beyond Regret",
      "author" : [ "Alexander Rakhlin", "Karthik Sridharan", "Ambuj Tewari" ],
      "venue" : "In 24th Annual Conference on Learning Theory (COLT),",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2011
    }, {
      "title" : "On the Generalization Ability of Online Learning Algorithms for Pairwise Loss Functions",
      "author" : [ "Purushottam Kar", "Bharath K Sriperumbudur", "Prateek Jain", "Harish Karnick" ],
      "venue" : "In ICML,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2013
    }, {
      "title" : "Online AUC Maximization",
      "author" : [ "Peilin Zhao", "Steven C.H. Hoi", "Rong Jin", "Tianbao Yang" ],
      "venue" : "In ICML,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2011
    }, {
      "title" : "Optimal Distributed Online Prediction Using Mini-Batches",
      "author" : [ "Ofer Dekel", "Ran Gilad-Bachrach", "Ohad Shamir", "Lin Xiao" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2012
    }, {
      "title" : "Communication-Efficient Algorithms for Statistical Optimization",
      "author" : [ "Yuchen Zhang", "John C. Duchi", "Martin J. Wainwright" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2013
    }, {
      "title" : "Ranking and empirical minimization of U-statistics",
      "author" : [ "Stéphan Clémençon", "Gábor Lugosi", "Nicolas Vayatis" ],
      "venue" : "Annals of Statistics,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2008
    }, {
      "title" : "Logarithmic Regret Algorithms for Online Convex Optimization",
      "author" : [ "Elad Hazan", "Adam Kalai", "Satyen Kale", "Amit Agarwal" ],
      "venue" : "In COLT,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2006
    }, {
      "title" : "Evaluation of Classifiers for an Uneven Class Distribution Problem",
      "author" : [ "Sophia Daskalaki", "Ioannis Kopanas", "Nikolaos Avouris" ],
      "venue" : "Applied Artificial Intelligence,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2006
    }, {
      "title" : "Oksana Yakhnenko",
      "author" : [ "R. Bharath Rao" ],
      "venue" : "and Balaji Krishnapuram. KDD Cup 2008 and the Workshop on Mining Medical Data. SIGKDD Explorations Newsletter, 10(2):34–38",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Evaluation of Different Biological Data and Computational Classification Methods for Use in Protein Interaction",
      "author" : [ "Yanjun Qi", "Ziv Bar-Joseph", "Judith Klein-Seetharaman" ],
      "venue" : "Prediction. Proteins,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 2006
    }, {
      "title" : "The UCI Machine Learning Repository",
      "author" : [ "A. Frank", "Arthur Asuncion" ],
      "venue" : "http://archive. ics.uci.edu/ml,",
      "citeRegEx" : "22",
      "shortCiteRegEx" : "22",
      "year" : 2010
    }, {
      "title" : "The interplay between stability and regret in online learning",
      "author" : [ "Ankan Saha", "Prateek Jain", "Ambuj Tewari" ],
      "venue" : "CoRR, abs/1211.6158,",
      "citeRegEx" : "23",
      "shortCiteRegEx" : "23",
      "year" : 2012
    }, {
      "title" : "Online Convex Programming and Generalized Infinitesimal Gradient Ascent",
      "author" : [ "Martin Zinkevich" ],
      "venue" : "In ICML, pages 928–936,",
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 2003
    }, {
      "title" : "Probability Inequalities for the Sum in Sampling without Replacement",
      "author" : [ "Robert J. Serfling" ],
      "venue" : "Annals of Statistics,",
      "citeRegEx" : "25",
      "shortCiteRegEx" : "25",
      "year" : 1974
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Next, we instantiate within our framework, convex surrogates for two popular performances measures namely, Precision at k (Prec@k) and partial area under the ROC curve (pAUC) [2] and show, via a stability analysis, that we do indeed achieve sublinear regret bounds for these loss functions.",
      "startOffset" : 175,
      "endOffset" : 178
    }, {
      "referenceID" : 1,
      "context" : "Our methods apply to a wide family of loss functions (including Prec@k, pAUC and F-measure) that were introduced in [3] and have been widely adopted [4, 5, 6] in the literature.",
      "startOffset" : 116,
      "endOffset" : 119
    }, {
      "referenceID" : 2,
      "context" : "Our methods apply to a wide family of loss functions (including Prec@k, pAUC and F-measure) that were introduced in [3] and have been widely adopted [4, 5, 6] in the literature.",
      "startOffset" : 149,
      "endOffset" : 158
    }, {
      "referenceID" : 3,
      "context" : "Our methods apply to a wide family of loss functions (including Prec@k, pAUC and F-measure) that were introduced in [3] and have been widely adopted [4, 5, 6] in the literature.",
      "startOffset" : 149,
      "endOffset" : 158
    }, {
      "referenceID" : 4,
      "context" : "Our methods apply to a wide family of loss functions (including Prec@k, pAUC and F-measure) that were introduced in [3] and have been widely adopted [4, 5, 6] in the literature.",
      "startOffset" : 149,
      "endOffset" : 158
    }, {
      "referenceID" : 5,
      "context" : "We compare our methods to state-of-the-art methods that are based on cutting plane techniques [7].",
      "startOffset" : 94,
      "endOffset" : 97
    }, {
      "referenceID" : 6,
      "context" : "of performance on imbalanced datasets [8], their importance has risen to a point where they have become the learning objectives themselves.",
      "startOffset" : 38,
      "endOffset" : 41
    }, {
      "referenceID" : 7,
      "context" : "[9], [10] and [11] who study the F-measure.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 8,
      "context" : "[9], [10] and [11] who study the F-measure.",
      "startOffset" : 5,
      "endOffset" : 9
    }, {
      "referenceID" : 9,
      "context" : "[9], [10] and [11] who study the F-measure.",
      "startOffset" : 14,
      "endOffset" : 18
    }, {
      "referenceID" : 1,
      "context" : "Starting from the seminal work of [3], this method has received a lot of interest for measures such as the F-measure [3], average precision [4], pAUC [7] and various ranking losses [5, 6].",
      "startOffset" : 34,
      "endOffset" : 37
    }, {
      "referenceID" : 1,
      "context" : "Starting from the seminal work of [3], this method has received a lot of interest for measures such as the F-measure [3], average precision [4], pAUC [7] and various ranking losses [5, 6].",
      "startOffset" : 117,
      "endOffset" : 120
    }, {
      "referenceID" : 2,
      "context" : "Starting from the seminal work of [3], this method has received a lot of interest for measures such as the F-measure [3], average precision [4], pAUC [7] and various ranking losses [5, 6].",
      "startOffset" : 140,
      "endOffset" : 143
    }, {
      "referenceID" : 5,
      "context" : "Starting from the seminal work of [3], this method has received a lot of interest for measures such as the F-measure [3], average precision [4], pAUC [7] and various ranking losses [5, 6].",
      "startOffset" : 150,
      "endOffset" : 153
    }, {
      "referenceID" : 3,
      "context" : "Starting from the seminal work of [3], this method has received a lot of interest for measures such as the F-measure [3], average precision [4], pAUC [7] and various ranking losses [5, 6].",
      "startOffset" : 181,
      "endOffset" : 187
    }, {
      "referenceID" : 4,
      "context" : "Starting from the seminal work of [3], this method has received a lot of interest for measures such as the F-measure [3], average precision [4], pAUC [7] and various ranking losses [5, 6].",
      "startOffset" : 181,
      "endOffset" : 187
    }, {
      "referenceID" : 10,
      "context" : "In particular [12] provides a generic framework for online learning with non-additive notions of regret with a focus on showing regret bounds for mixed strategies in a variety of problems.",
      "startOffset" : 14,
      "endOffset" : 18
    }, {
      "referenceID" : 11,
      "context" : "Recently, online learning for AUC maximization has received some attention [13, 14].",
      "startOffset" : 75,
      "endOffset" : 83
    }, {
      "referenceID" : 12,
      "context" : "Recently, online learning for AUC maximization has received some attention [13, 14].",
      "startOffset" : 75,
      "endOffset" : 83
    }, {
      "referenceID" : 11,
      "context" : "Although AUC is not a point loss function, it still decomposes over pairs of points in a dataset, a fact that [13] and [14] crucially use.",
      "startOffset" : 110,
      "endOffset" : 114
    }, {
      "referenceID" : 12,
      "context" : "Although AUC is not a point loss function, it still decomposes over pairs of points in a dataset, a fact that [13] and [14] crucially use.",
      "startOffset" : 119,
      "endOffset" : 123
    }, {
      "referenceID" : 1,
      "context" : "A popular technique for constructing such loss functions is the structural SVM formulation [3] given below.",
      "startOffset" : 91,
      "endOffset" : 94
    }, {
      "referenceID" : 5,
      "context" : "The structural surrogate for this performance measure can be equivalently expressed in a simpler form by replacing the indicator functions I [·] with hinge loss as follows (see [7], Theorem 4) `pAUC(w) = ∑",
      "startOffset" : 177,
      "endOffset" : 180
    }, {
      "referenceID" : 1,
      "context" : "[3] uses a slightly modified, but equivalent, definition that considers labels to be Boolean.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 11,
      "context" : "We note that our framework also recovers the model for online AUC maximization used in [13] and [14].",
      "startOffset" : 87,
      "endOffset" : 91
    }, {
      "referenceID" : 12,
      "context" : "We note that our framework also recovers the model for online AUC maximization used in [13] and [14].",
      "startOffset" : 96,
      "endOffset" : 100
    }, {
      "referenceID" : 1,
      "context" : "In Appendix D, we show that the same technique can be used to prove a stability result for the structural SVM surrogate of the Precision-Recall Break Even Point (PRBEP) performance measure [3] as well.",
      "startOffset" : 189,
      "endOffset" : 192
    }, {
      "referenceID" : 13,
      "context" : "The motivation for our approach comes from mini-batch methods used to make learning methods for point loss functions amenable to distributed computing environments [15, 16], we exploit these techniques to offer scalable algorithms for non-decomposable loss functions.",
      "startOffset" : 164,
      "endOffset" : 172
    }, {
      "referenceID" : 14,
      "context" : "The motivation for our approach comes from mini-batch methods used to make learning methods for point loss functions amenable to distributed computing environments [15, 16], we exploit these techniques to offer scalable algorithms for non-decomposable loss functions.",
      "startOffset" : 164,
      "endOffset" : 172
    }, {
      "referenceID" : 11,
      "context" : "method exploits this by utilizing two passes over the data: the first pass collects all (or a random subset of) points of the rare label using some stream sampling technique [13].",
      "startOffset" : 174,
      "endOffset" : 178
    }, {
      "referenceID" : 15,
      "context" : "However, the same is not true for non-decomposable loss functions barring a few exceptions [17, 10].",
      "startOffset" : 91,
      "endOffset" : 99
    }, {
      "referenceID" : 8,
      "context" : "However, the same is not true for non-decomposable loss functions barring a few exceptions [17, 10].",
      "startOffset" : 91,
      "endOffset" : 99
    }, {
      "referenceID" : 16,
      "context" : "Using regularized formulations, we can also exploit logarithmic regret guarantees [18], offered by online gradient descent, to improve this result - however we do not explore those considerations here.",
      "startOffset" : 82,
      "endOffset" : 86
    }, {
      "referenceID" : 15,
      "context" : "A similar result for the special case β = 1 is due to [17].",
      "startOffset" : 54,
      "endOffset" : 58
    }, {
      "referenceID" : 1,
      "context" : "The above result can be extended to a large family of performances measures introduced in [3] that have been widely adopted [10, 19, 8] such as F-measure, G-mean, and PRBEP.",
      "startOffset" : 90,
      "endOffset" : 93
    }, {
      "referenceID" : 8,
      "context" : "The above result can be extended to a large family of performances measures introduced in [3] that have been widely adopted [10, 19, 8] such as F-measure, G-mean, and PRBEP.",
      "startOffset" : 124,
      "endOffset" : 135
    }, {
      "referenceID" : 17,
      "context" : "The above result can be extended to a large family of performances measures introduced in [3] that have been widely adopted [10, 19, 8] such as F-measure, G-mean, and PRBEP.",
      "startOffset" : 124,
      "endOffset" : 135
    }, {
      "referenceID" : 6,
      "context" : "The above result can be extended to a large family of performances measures introduced in [3] that have been widely adopted [10, 19, 8] such as F-measure, G-mean, and PRBEP.",
      "startOffset" : 124,
      "endOffset" : 135
    }, {
      "referenceID" : 5,
      "context" : "Algorithms: For partial AUC, we compare against the state-of-the-art cutting plane (CP) and projected subgradient methods (PSG) proposed in [7]; unlike the (online) stochastic methods",
      "startOffset" : 140,
      "endOffset" : 143
    }, {
      "referenceID" : 1,
      "context" : "For Prec@k and F-measure, we compare our methods against cutting plane methods from [3].",
      "startOffset" : 84,
      "endOffset" : 87
    }, {
      "referenceID" : 18,
      "context" : "Datasets: We used several data sets for our experiments (see Table 1); of these, KDDCup08 is from the KDD Cup 2008 challenge and involves a breast cancer detection task [20], PPI contains data for a protein-protein interaction prediction task [21], and the remaining datasets are taken from the UCI repository [22].",
      "startOffset" : 169,
      "endOffset" : 173
    }, {
      "referenceID" : 19,
      "context" : "Datasets: We used several data sets for our experiments (see Table 1); of these, KDDCup08 is from the KDD Cup 2008 challenge and involves a breast cancer detection task [20], PPI contains data for a protein-protein interaction prediction task [21], and the remaining datasets are taken from the UCI repository [22].",
      "startOffset" : 243,
      "endOffset" : 247
    }, {
      "referenceID" : 20,
      "context" : "Datasets: We used several data sets for our experiments (see Table 1); of these, KDDCup08 is from the KDD Cup 2008 challenge and involves a breast cancer detection task [20], PPI contains data for a protein-protein interaction prediction task [21], and the remaining datasets are taken from the UCI repository [22].",
      "startOffset" : 310,
      "endOffset" : 314
    } ],
    "year" : 2014,
    "abstractText" : "Modern applications in sensitive domains such as biometrics and medicine frequently require the use of non-decomposable loss functions such as precision@k, F-measure etc. Compared to point loss functions such as hinge-loss, these offer much more fine grained control over prediction, but at the same time present novel challenges in terms of algorithm design and analysis. In this work we initiate a study of online learning techniques for such non-decomposable loss functions with an aim to enable incremental learning as well as design scalable solvers for batch problems. To this end, we propose an online learning framework for such loss functions. Our model enjoys several nice properties, chief amongst them being the existence of efficient online learning algorithms with sublinear regret and online to batch conversion bounds. Our model is a provable extension of existing online learning models for point loss functions. We instantiate two popular losses, Prec@k and pAUC, in our model and prove sublinear regret bounds for both of them. Our proofs require a novel structural lemma over ranked lists which may be of independent interest. We then develop scalable stochastic gradient descent solvers for non-decomposable loss functions. We show that for a large family of loss functions satisfying a certain uniform convergence property (that includes Prec@k, pAUC, and F-measure), our methods provably converge to the empirical risk minimizer. Such uniform convergence results were not known for these losses and we establish these using novel proof techniques. We then use extensive experimentation on real life and benchmark datasets to establish that our method can be orders of magnitude faster than a recently proposed cutting plane method.",
    "creator" : "LaTeX with hyperref package"
  }
}